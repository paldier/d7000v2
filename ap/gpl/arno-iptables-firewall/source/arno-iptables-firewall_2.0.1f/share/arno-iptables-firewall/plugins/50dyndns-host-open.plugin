# ------------------------------------------------------------------------------
#            -= Arno's iptables firewall - DynDNS Host Open plugin =-
#
PLUGIN_NAME="DynDNS Host Open plugin"
PLUGIN_VERSION="1.33-BETA2"
PLUGIN_CONF_FILE="dyndns-host-open.conf"
#
# Last changed          : June 22, 2015
# Requirements          : kernel 2.6 + AIF 2.0.1f or better
# Comments              : This implements dynamic DNS (DynDNS) support for eg. opening ports
#
# Author                : (C) Copyright 2008-2014 by Arno van Amersfoort
# Homepage              : http://rocky.eld.leidenuniv.nl/
# Email                 : a r n o v a AT r o c k y DOT e l d DOT l e i d e n u n i v DOT n l
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# If HOST_CACHE_FILE is not defined, fallback to old DYNDNS variable
if [ -n "$HOST_CACHE_FILE" ]; then
  DYNDNS_HOST_CACHE="$HOST_CACHE_FILE"
else
  DYNDNS_HOST_CACHE="/var/tmp/aif_dyndns_host_cache"
fi

# Plugin start function
plugin_start()
{
  # Create new DYNDNS_CHAIN chain:
  iptables -N DYNDNS_CHAIN 2>/dev/null
  iptables -F DYNDNS_CHAIN

  # Insert rule into the main chain:
  iptables -A EXT_INPUT_CHAIN -j DYNDNS_CHAIN

  # Remove the cache file
  rm -f "$DYNDNS_HOST_CACHE"
  
  # Create cron job
  echo "$DYNDNS_HOST_OPEN_CRON        root    $PLUGIN_BIN_PATH/dyndns-host-open-helper >/dev/null" >/etc/cron.d/dyndns-host-open

  # Call the dyndns-helper script at startup?
  if [ "$DYNDNS_RUN_AT_START" = "1" ]; then
    echo "${INDENT}Running helper script..."
    "$PLUGIN_BIN_PATH/dyndns-host-open-helper"
  fi

  return 0
}


# Plugin restart function
plugin_restart()
{
  ## Re-add standard chain rules that are flushed on a restart
  echo "${INDENT}Restarting..."
  
  # Insert rule into the main chain:
  iptables -A EXT_INPUT_CHAIN -j DYNDNS_CHAIN

  # Call the dyndns-helper script at startup?
  if [ "$DYNDNS_RUN_AT_START" = "1" ]; then
    echo "${INDENT}Running helper script..."
    "$PLUGIN_BIN_PATH/dyndns-host-open-helper"
  fi

  return 0
}


# Plugin stop function
plugin_stop()
{
  # Remove cron job
  rm -f /etc/cron.d/dyndns-host-open
  
  # Remove the cache file
  rm -f "$DYNDNS_HOST_CACHE"
  
  iptables -D EXT_INPUT_CHAIN -j DYNDNS_CHAIN 2>/dev/null

  iptables -F DYNDNS_CHAIN
  iptables -X DYNDNS_CHAIN 2>/dev/null
  
  return 0
}


# Plugin status function
plugin_status()
{
  iptables -L DYNDNS_CHAIN
  
  # Show IP->hostname mappings from our host-cache
  if [ -e "$DYNDNS_HOST_CACHE" ]; then
    echo ""
    echo "Showing hostname->IP mapping"
    echo "----------------------------"
    cat "$DYNDNS_HOST_CACHE"
  fi

  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$DYNDNS_HOST_OPEN_TCP" -a -z "$DYNDNS_HOST_OPEN_UDP"  -a \
       -z "$DYNDNS_HOST_OPEN_IP"  -a -z "$DYNDNS_HOST_OPEN_ICMP" -a \
       -z "$DYNDNS_HOST_MISC" ] || [ -z "$DYNDNS_HOST_OPEN_CRON" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not (properly) setup!\033[0m\n" >&2
    return 1
  fi

  if [ ! -x "$PLUGIN_BIN_PATH/dyndns-host-open-helper" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The dyndns-host-open-helper script can not be found or is not executable!\033[0m\n" >&2
    return 1
  fi
  
  if ! check_command dig nslookup; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: Required command dig (or nslookup) is not available!\033[0m\n" >&2
    return 1
  fi

  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        restart ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
