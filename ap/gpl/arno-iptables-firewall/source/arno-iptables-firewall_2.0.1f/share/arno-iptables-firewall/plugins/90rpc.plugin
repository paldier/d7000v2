# ------------------------------------------------------------------------------
#            -= Arno's iptables firewall - RPC plugin =-
#
PLUGIN_NAME="RPCplugin"
PLUGIN_VERSION="0.21-BETA"
PLUGIN_CONF_FILE="rpc.conf"
#
# Last changed          : January 17, 2012
# Requirements          : kernel 2.6
# Comments              : This plugin opens RPC ports
#
# Author                : (C) Copyright 2011-2012 by Jared H. Hudson
# Email                 : jhhudso AT volumehost DOT com
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  # Create new DYNDNS_CHAIN chain:
  iptables -N RPC_CHAIN 2>/dev/null
  iptables -F RPC_CHAIN 
  
  # Insert rule into the main chain:
  iptables -A EXT_INPUT_CHAIN -j RPC_CHAIN
  
  echo "${INDENT}Enabling RPC service(s) $RPC_SERVICES for net(s) $RPC_NETS"
  
  IFS=' ,'
  for service in $RPC_SERVICES; do
    ports="$(rpcinfo -p |awk "/tcp.*$service/"' { print $4 }' |uniq)"
    echo "${INDENT}Adding TCP ports $ports for RPC service $service"
    for net in $RPC_NETS; do
      for port in $ports; do
        iptables -I RPC_CHAIN -p tcp -s $net --dport $port -j ACCEPT
      done
    done

    ports="$(rpcinfo -p | awk "/udp.*$service/"' {print $4}' |uniq)"
    echo "${INDENT}Adding UDP ports $ports for RPC service $service"
    for net in $RPC_NETS; do
      for port in $ports; do
        iptables -I RPC_CHAIN -p udp -s $net --dport $port -j ACCEPT
      done
    done
  done

  return 0
}


# Plugin restart function
plugin_restart()
{
  ## Re-add standard chain rules that are flushed on a restart
  echo "${INDENT}Restarting..."
  
  # Insert rule into the main chain:
  iptables -A EXT_INPUT_CHAIN -j RPC_CHAIN
  
  return 0
}


# Plugin stop function
plugin_stop()
{
  iptables -D EXT_INPUT_CHAIN -j RPC_CHAIN 2>/dev/null

  iptables -F RPC_CHAIN
  iptables -X RPC_CHAIN 2>/dev/null 

  return 0
}


# Plugin status function
plugin_status()
{
  iptables -L RPC_CHAIN

  return 0
}


plugin_sanity_check()
{
  if [ -z "$RPC_SERVICES" ] || [ -z "$RPC_NETS" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not properly setup!\033[0m\n" >&2
    return 1
  fi   
  
  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|'') plugin_start; PLUGIN_RET_VAL=$? ;;
        restart ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status  ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *       ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
