# ------------------------------------------------------------------------------
#            -= Arno's iptables firewall - Traffic Accounting plugin =-
#
PLUGIN_NAME="Traffic Accounting plugin"
PLUGIN_VERSION="1.22-BETA1"
PLUGIN_CONF_FILE="traffic-accounting.conf"
#
# Last changed          : September 18, 2014
# Requirements          : AIF 2.0.1f (or later)
# Comments              : This implements support for traffic accounting for
#                         IPv4 & IPv6. It can take advantage of the
#                         DynDNS-plugin (v1.20+) by using its hostname-cache.
#                         You may want to use the plugin's DYNDNS_HOSTS_MISC
#                         for that
#
# Author                : (C) Copyright 2008-2014 by Arno van Amersfoort
# Homepage              : http://rocky.eld.leidenuniv.nl/
# Email                 : a r n o v a AT r o c k y DOT e l d DOT l e i d e n u n i v DOT n l
#                         (note: you must remove all spaces and substitute the @ and the .
#                         at the proper locations!)
# ------------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ------------------------------------------------------------------------------

# Plugin start function
plugin_start()
{
  # Enable Conntrack Accounting (kernel config CONFIG_NF_CT_ACCT)
  # CONFIG_NF_CT_ACCT is deprecated and will be removed sometime after kernel 2.6.27
  sysctl net.netfilter.nf_conntrack_acct=1 2>/dev/null

  iptables -N ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -F ACCOUNTING_INPUT_CHAIN

  iptables -N ACCOUNTING_OUTPUT_CHAIN 2>/dev/null
  iptables -F ACCOUNTING_OUTPUT_CHAIN

  # Insert rule in the INPUT chain
  iptables -I INPUT 1 -j ACCOUNTING_INPUT_CHAIN

  # Insert rule in the OUTPUT chain
  iptables -I OUTPUT 1 -j ACCOUNTING_OUTPUT_CHAIN

  # Create hourly cron job
  echo "$TRAFFIC_ACCOUNTING_CRON        root    \"$PLUGIN_BIN_PATH/traffic-accounting-helper\" >/dev/null" >/etc/cron.d/traffic-accounting

  # Call the host-accounting-helper script at startup?
  if [ "$TRAFFIC_ACCOUNTING_RUN_AT_START" = "1" ]; then
    echo "${INDENT}Running helper script..."
    "$PLUGIN_BIN_PATH/traffic-accounting-helper"
  fi

  return 0
}


# Plugin restart function
plugin_restart()
{
  ## Re-add standard chain rules that are flushed on a restart
  echo "${INDENT}Restarting..."
  
  # Insert rule in the INPUT chain
  iptables -I INPUT 1 -j ACCOUNTING_INPUT_CHAIN

  # Insert rule in the OUTPUT chain
  iptables -I OUTPUT 1 -j ACCOUNTING_OUTPUT_CHAIN

  # Call the host-accounting-helper script at startup?
  if [ "$TRAFFIC_ACCOUNTING_RUN_AT_START" = "1" ]; then
    echo "${INDENT}Running helper script..."
    "$PLUGIN_BIN_PATH/traffic-accounting-helper"
  fi

  return 0
}


# Plugin stop function
plugin_stop()
{
  # Remove cron job
  rm -f /etc/cron.d/traffic-accounting

  # Store current values
  "$PLUGIN_BIN_PATH/traffic-accounting-helper" >/dev/null

  iptables -D INPUT -j ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -D OUTPUT -j ACCOUNTING_OUTPUT_CHAIN 2>/dev/null

  iptables -F ACCOUNTING_INPUT_CHAIN
  iptables -X ACCOUNTING_INPUT_CHAIN 2>/dev/null
  iptables -F ACCOUNTING_OUTPUT_CHAIN
  iptables -X ACCOUNTING_OUTPUT_CHAIN 2>/dev/null

  return 0
}


# Plugin status function
plugin_status()
{
  # Store current values
  "$PLUGIN_BIN_PATH/traffic-accounting-helper" >/dev/null

  # Call parse script
  "$PLUGIN_BIN_PATH/traffic-accounting-show"

  return 0
}


# Check sanity of eg. environment
plugin_sanity_check()
{
  if [ -z "$TRAFFIC_ACCOUNTING_CRON" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The plugin config file is not properly set!\033[0m\n" >&2
    return 1
  fi

  if [ ! -x "$PLUGIN_BIN_PATH/traffic-accounting-helper" ]; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: The traffic-accounting-helper script can not be found or is not executable!\033[0m\n" >&2
    return 1
  fi
  
  if ! check_command dig nslookup; then
    printf "\033[40m\033[1;31m${INDENT}ERROR: Required command dig (or nslookup) is not available!\033[0m\n" >&2
    return 1
  fi
  
  return 0
}


############
# Mainline #
############

# Check where to find the config file
CONF_FILE=""
if [ -n "$PLUGIN_CONF_PATH" ]; then
  CONF_FILE="$PLUGIN_CONF_PATH/$PLUGIN_CONF_FILE"
fi

# Preinit to success:
PLUGIN_RET_VAL=0

# Check if the config file exists
if [ ! -e "$CONF_FILE" ]; then
  printf "NOTE: Config file \"$CONF_FILE\" not found!\n        Plugin \"$PLUGIN_NAME v$PLUGIN_VERSION\" ignored!\n" >&2
else
  # Source the plugin config file
  . "$CONF_FILE"

  if [ "$ENABLED" = "1" -a "$PLUGIN_CMD" != "stop-restart" ] ||
     [ "$ENABLED" = "0" -a "$PLUGIN_CMD" = "stop-restart" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "stop" ] ||
     [ -n "$PLUGIN_LOAD_FILE" -a "$PLUGIN_CMD" = "status" ]; then
    # Show who we are:
    echo "${INDENT}$PLUGIN_NAME v$PLUGIN_VERSION"

    # Increment indention
    INDENT="$INDENT "

    # Only proceed if environment ok
    if ! plugin_sanity_check; then
      PLUGIN_RET_VAL=1
    else
      case $PLUGIN_CMD in
        start|''         ) plugin_start; PLUGIN_RET_VAL=$? ;;
        restart          ) plugin_restart; PLUGIN_RET_VAL=$? ;;
        stop|stop-restart) plugin_stop; PLUGIN_RET_VAL=$? ;;
        status           ) plugin_status; PLUGIN_RET_VAL=$? ;;
        *                ) PLUGIN_RET_VAL=1; printf "\033[40m\033[1;31m${INDENT}ERROR: Invalid plugin option \"$PLUGIN_CMD\"!\033[0m\n" >&2 ;;
      esac
    fi
  fi
fi
