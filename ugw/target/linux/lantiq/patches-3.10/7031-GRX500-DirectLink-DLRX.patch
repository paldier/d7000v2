# HG changeset patch
# Parent c6eb49fc92bb68c9610014a6724204077fad7abe

diff --git a/drivers/net/ethernet/lantiq/Kconfig b/drivers/net/ethernet/lantiq/Kconfig
--- a/drivers/net/ethernet/lantiq/Kconfig
+++ b/drivers/net/ethernet/lantiq/Kconfig
@@ -21,9 +21,15 @@ config LANTIQ_VRX318
 config ACCL_11AC
     tristate "Support DirectLink 11AC QCA"
     depends on LTQ_PPA_GRX500
+	select ACCL_11AC_DLRX
     default n
     ---help---
     Supported DirectLink for QCA 11AC
+config ACCL_11AC_DLRX
+    tristate "Build DirectLink DLRX FW -- loadable modules only"
+    depends on ACCL_11AC && m
+	 ---help---
+	 Build DirectLink DLRX FW
 
 config LANITQ_VRX318_PCIE_SWITCH_DSL_BONDING
 	tristate "VRX318 SmartPHY DSL bonding with PCIe Switch"
diff --git a/drivers/net/ethernet/lantiq/Makefile b/drivers/net/ethernet/lantiq/Makefile
--- a/drivers/net/ethernet/lantiq/Makefile
+++ b/drivers/net/ethernet/lantiq/Makefile
@@ -10,3 +10,6 @@ obj-$(CONFIG_LTQ_DIRECTCONNECT_DP) += di
 ifeq ($(CONFIG_LTQ_PPA_GRX500),y)
 obj-$(CONFIG_ACCL_11AC) += directlink/
 endif
+ifneq ($(CONFIG_ACCL_11AC),)
+obj-$(CONFIG_ACCL_11AC_DLRX) += directlink/dlrx/dlrx_fw/
+endif
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/Makefile b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/Makefile
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/Makefile
@@ -0,0 +1,7 @@
+obj-$(CONFIG_ACCL_11AC_DLRX) += dlrx_fw.o
+dlrx_fw-objs := dlrx_fw_init.o dlrx_reorder_buffering_process.o  dlrx_rx_ind_msg.o      \
+                dlrx_main.o             dlrx_ro_list_fns.o       dlrx_rxpb_fns.o        \
+                dlrx_mib_func.o         dlrx_rx_flush_msg.o      dlrx_utility_fns.o     \
+                dlrx_playout_process.o  dlrx_rx_frag_ind_msg.o dlrx_tx_cmpl_msg.o       \
+                dlrx_drv_api_fns.o
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_drv_api_fns.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_drv_api_fns.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_drv_api_fns.c
@@ -0,0 +1,252 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <asm/addrspace.h>
+#include <linux/kernel.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_fw_macro_adaptor.h"
+
+extern void mib_clear(int vap);
+
+/******************************************************************************
+Function name: dlrx_drv_get_revision
+Description  : Get the firmware version id
+Parameters   : None
+Return value : Firmware version id
+Functions called by this module:
+	None
+	Notes        : Make sure the fw_ver_id is set to the correct value in
+	the context structure before calling this function. Check the
+	notes of functions called for complete list to be set in the context.
+******************************************************************************/
+unsigned int dlrx_drv_get_revision(void)
+{
+	return DLRX_CFG_GLOBAL_fw_ver_id_get_indirect(DLRX_CFG_GLOBAL_BASE, 0);
+}
+
+/***************************************************************************
+Function name: dlrx_drv_reset
+Description  : Reset the peer or the mib depending on the input
+Parameters   : reset_type - Indicates if the reset is for peer or mib
+	id_num - Indicates the peer or the vap_id depending on the reset_type
+Return value : None
+Functions called by this module:
+		ro_list_reset
+		mib_clear
+Notes        : Check the notes of functions called for list of values
+		to be set in the context.
+**************************************************************************/
+void dlrx_drv_reset(unsigned int reset_type, unsigned int id_num)
+{
+	switch (reset_type) {
+	case DRE_RESET_MIB:
+
+		/* Case to reset mib */
+		if (id_num == 0xFF)
+			mib_clear(-1);
+		else if (id_num < NUM_TID)
+			mib_clear(id_num);
+
+		break;
+
+	case DRE_RESET_PEER:
+
+		/* case to reset the peer */
+		if (id_num < NUM_PEER) {
+			DLRX_CFG_PEER_RESET_req_set_indirect(DLRX_CFG_PEER_RESET_BASE, 0, 1);
+			DLRX_CFG_PEER_RESET_peer_set_indirect(DLRX_CFG_PEER_RESET_BASE, 0, id_num);
+			/*
+			Scan RO_mainlist and RO_linklist of all TID and seqid of this peer.
+			Free all valid packet buffer pointer used. Free used RO_linklist entry.
+			ro_list_reset(id_num);
+			*/
+		}
+
+		break;
+
+	default:
+		break;
+	}
+}
+
+/******************************************************************************
+Function name: dlrx_drv_get_mib_data
+Description  : Get the mib data
+Parameters   : mib_type - Indicates if the type of mib requested by the driver
+	vap_id - Indicates the vap_id if the request mib is vap mib
+Return value : Pointer to the location of the mib data
+	Functions called by this module:
+	None
+Notes        : None
+******************************************************************************/
+unsigned int *dlrx_drv_get_mib_data(unsigned int mib_type, unsigned int vap_id)
+{
+	switch (mib_type) {
+	case DRE_MSG_MIB:
+		/* Case to get msg mib */
+		return (unsigned int *)DLRX_MSG_MIB_BASE;
+		break;
+
+	case DRE_VAP_MIB:
+
+		/* Case to get vap mib */
+		if (vap_id == 0xFF)
+			return NULL;
+		else
+			return (unsigned int *)DLRX_VAP_MIB_BASE(vap_id);
+
+		break;
+
+	case DRE_DATA_MIB:
+		/* Case to get data mib */
+		return (unsigned int *)DLRX_DATA_MIB_BASE;
+		break;
+
+	default:
+		return NULL;
+		break;
+	}
+}
+
+/***************************************************************************
+Function name: dlrx_drv_get_cur_rxpb_ptr
+Description  : Get the current rxpb pointer and the data length
+Parameters   : rxpb_ptr - Location passed by the driver to store the rxpb pointer
+	data_len - Location passed by the driver to store the data length
+Return value : -1 - Read index is equal to write index
+	0 - Success status
+Functions called by this module:
+	None
+Notes        : Make sure the rxpb_ptr_read_index,  rxpb_ptr_write_index,
+	cfg_badr_rxpb_ptr_ring and cfg_num_rxpb_ptr_ring is set to the correct
+	value in the context structure before calling this function. Check the
+	notes of functions called for complete list to be set in the context.
+******************************************************************************/
+int dlrx_drv_get_cur_rxpb_ptr(unsigned int *rxpb_ptr, unsigned int *data_len)
+{
+	unsigned int rxpb_ptr_read_index;
+	unsigned int rxpb_ptr_write_index;
+	unsigned int rxpb_ptr_ring_badr;
+	unsigned int *tmp_rxpb_ptr;
+
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+	rxpb_ptr_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	if (rxpb_ptr_read_index == rxpb_ptr_write_index)
+		return -1;
+
+	rxpb_ptr_ring_badr = UNCACHE_ADDR(g_cfg_badr_rxpb_ptr_ring);
+
+#if defined (USE_CACHED_ADDR) && USE_CACHED_ADDR
+	tmp_rxpb_ptr = (unsigned int *)CACHE_ADDR(DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ptr_ring_badr, rxpb_ptr_read_index));
+	dre_dma_unmap((unsigned int)(tmp_rxpb_ptr), (HTT_RX_BUF_SIZE));
+	*rxpb_ptr = (unsigned int)tmp_rxpb_ptr;
+#else
+	tmp_rxpb_ptr = (unsigned int *)UNCACHE_ADDR(DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ptr_ring_badr, rxpb_ptr_read_index));
+	*rxpb_ptr = (unsigned int)CACHE_ADDR(tmp_rxpb_ptr);
+#endif
+
+	*data_len = DLRX_RXPB_HDR_msdu_len_get_indirect((unsigned int *)(*rxpb_ptr), CFG_OFFSET_ATTEN_IN_DWORDS);
+	/* pr_info("skb :0x%x  read index: %u  write index: %u rxpb_ptr 0x%x, rxpb_ptr_ptr 0x%x rxpb_ptr_ring_badr 0x%x \n",
+		 *(tmp_rxpb_ptr-1), rxpb_ptr_read_index, rxpb_ptr_write_index,
+		 (unsigned int)*rxpb_ptr, (unsigned int)rxpb_ptr, (unsigned int)rxpb_ptr_ring_badr);
+	*/
+	/* pr_info("pkt_buffer is 0x%x,0x%x,0x%x,0x%x  0ff13 0x%x \n",*tmp_rxpb_ptr,*(tmp_rxpb_ptr+1),*(tmp_rxpb_ptr+2),*(tmp_rxpb_ptr+3),*(tmp_rxpb_ptr+13)); */
+	/* Increment rxpb_ptr_read_index and check for wraparound */
+	rxpb_ptr_read_index = (rxpb_ptr_read_index + 1) % GET_NUM_RXPB_PTR_RING;
+	DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_set_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0, rxpb_ptr_read_index);
+
+	rxpb_write_free_buffer_to_rxpb_ptr_ring(NEW_RXPB_PTR);
+	return 0;
+}
+
+/******************************************************************************
+Function name: dlrx_dre_replenish_rxpb_ptr
+Description  : Replenish the rxpb pointer ring with new rxpb pointers
+Parameters   : None
+Return value : None
+Functions called by this module:
+	rxpb_write_free_buffer_to_rxpb_ptr_ring
+Notes        : Check the notes of functions called for list of values to be
+	set in the context.
+******************************************************************************/
+void dlrx_drv_replenish_rxpb_ptr(void)
+{
+	rxpb_write_free_buffer_to_rxpb_ptr_ring(NEW_RXPB_PTR);
+}
+
+/* configure the base address */
+int dlrx_drv_set_mem_base(unsigned int ddr_membase,
+			  unsigned int cfg_ctxt_membase,
+			  unsigned int pcie_membase
+			 )
+{
+	ddr_base = (unsigned int *)ddr_membase;
+	pcie_base = (unsigned int *)pcie_membase;
+	cfg_ctxt_base = (unsigned int *)cfg_ctxt_membase;
+
+	DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, cfg_ctxt_membase);
+	DLRX_CFG_GLOBAL_dlrx_ddr_base_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, ddr_membase);
+	DLRX_CFG_GLOBAL_dlrx_pcie_base_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, pcie_membase);
+
+	return 0;
+}
+int dlrx_drv_set_wapi_rxpn(unsigned int peer, unsigned int *rxpn)
+{
+	unsigned int ext_tid;
+	unsigned int *mainlist_data_ptr;
+
+	for (ext_tid = 0; ext_tid < NUM_TID; ext_tid++) {
+		/* Offset into the required mainlist entry */
+		mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer * NUM_TID) + ext_tid));
+		/* update pn_dw */
+		DLRX_RO_LINKLIST_pn_dw0_set_indirect(mainlist_data_ptr, 0, *rxpn);
+		/* update pn_dw */
+		DLRX_RO_LINKLIST_pn_dw1_set_indirect(mainlist_data_ptr, 0, *(rxpn + 1));
+		/* update pn_dw */
+		DLRX_RO_LINKLIST_pn_dw2_set_indirect(mainlist_data_ptr, 0, *(rxpn + 2));
+		/* update pn_dw */
+		DLRX_RO_LINKLIST_pn_dw3_set_indirect(mainlist_data_ptr, 0, *(rxpn + 3));
+	}
+
+	return 0;
+}
+
+#if DLRX_SUPPORT_UNLOAD
+/******************************************************************************
+Function name: dre_dl_set_dlrx_unload_t
+Description  : Set Flag indicating the unload of the dlrx module
+Parameters   : None
+Return value : None
+Functions called by this module: None
+Notes        : None
+******************************************************************************/
+void dre_drv_set_dlrx_unload(void)
+{
+	DLRX_CFG_GLOBAL_dlrx_cfg_unload_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, 1);
+}
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_fw_init.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_fw_init.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_fw_init.c
@@ -0,0 +1,222 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/stat.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_fw_version.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+
+/* #include "../include/cycle_counter.h" */
+#define DLRX_SRAM_PHY_ADDR      0x1F107400
+
+#define DMA_BASE		0xBE104100
+#define DMA_CS			(volatile u32 *)(DMA_BASE + 0x18)
+#define DMA_CCTRL		(volatile u32 *)(DMA_BASE + 0x1C)
+#define DMA_CDBA		(volatile u32 *)(DMA_BASE + 0x20)
+#define DMA_CDLEN		(volatile u32 *)(DMA_BASE + 0x24)
+#define DMA_CIS			(volatile u32 *)(DMA_BASE + 0x28)
+#define DMA_CIE			(volatile u32 *)(DMA_BASE + 0x2C)
+#define PPE_TX_CH_NO	3
+/* Global variables */
+unsigned int global_debug_flag;
+/* unsigned int global_debug_print; */
+unsigned int g_cfg_badr_ce5buf;
+unsigned int g_cfg_badr_ce5des;
+unsigned int g_cfg_badr_rxpb_ptr_ring;
+unsigned int g_cfg_badr_ro_linklist;
+unsigned int g_cfg_badr_ro_mainlist;
+
+#if USE_GLOBAL_VARIABLES
+unsigned int g_cfg_num_ce5buf;
+unsigned int g_cfg_size_shift_ce5buf;
+unsigned int g_cfg_num_rxpb_ptr_ring;
+unsigned int g_cfg_size_rxpktdes;
+unsigned int g_cfg_offset_atten;
+#endif
+
+unsigned int g_qca_hw;
+unsigned int g_ce5_offset;
+unsigned int g_qca_hw_sub_type;
+
+unsigned int g_congestion_timeout_num;
+unsigned int g_congestion_drop_flag;
+unsigned int dl_kseg0;
+unsigned int dl_kseg1;
+
+extern int dlrx_main(void);
+
+static int __init dlrx_fw_init(void)
+{
+	/* #if DLRX_GRX330_BOARD_CFG */
+	unsigned int loop_index;
+	unsigned int write_index_address;
+	/* #else */
+	unsigned int sram_phy_addr;
+	/* #endif */
+
+#if DLRX_GRX330_BOARD_CFG
+#if defined(USE_CACHED_ADDR) && USE_CACHED_ADDR
+	cfg_ctxt_base = (unsigned int *)CACHE_ADDR(DLRX_SRAM_PHY_ADDR);
+#else
+	cfg_ctxt_base = (unsigned int *)UNCACHE_ADDR(DLRX_SRAM_PHY_ADDR);
+#endif
+#else
+	sram_phy_addr = ppa_dl_dre_get_sram_addr();
+	dl_kseg0 = ppa_dl_dre_get_kseg0();
+	dl_kseg1 = ppa_dl_dre_get_kseg1();
+
+#if defined(USE_CACHED_ADDR) && USE_CACHED_ADDR
+	cfg_ctxt_base = (unsigned int *)CACHE_ADDR(sram_phy_addr);
+#else
+	cfg_ctxt_base = (unsigned int *)UNCACHE_ADDR(sram_phy_addr);
+#endif
+#endif
+
+	DLRX_CFG_GLOBAL_fw_ver_id_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, DRE_FW_VERSION);
+	DLRX_CFG_GLOBAL_fw_feature_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, DRE_FW_FEATURE);
+
+	ppa_dl_dre_fn_register(DRE_MAIN_FN, dlrx_main);
+	ppa_dl_dre_fn_register(DRE_GET_VERSION_FN, dlrx_drv_get_revision);
+	ppa_dl_dre_fn_register(DRE_RESET_FN, dlrx_drv_reset);
+	ppa_dl_dre_fn_register(DRE_GET_MIB_FN, dlrx_drv_get_mib_data);
+	ppa_dl_dre_fn_register(DRE_GET_CURMSDU_FN, dlrx_drv_get_cur_rxpb_ptr);
+	ppa_dl_dre_fn_register(DRE_SET_MEMBASE_FN, dlrx_drv_set_mem_base);
+	ppa_dl_dre_fn_register(DRE_SET_RXPN_FN, dlrx_drv_set_wapi_rxpn);
+#if DLRX_SUPPORT_UNLOAD
+	ppa_dl_dre_fn_register(DRE_SET_DLRX_UNLOAD, dre_drv_set_dlrx_unload);
+#endif
+
+	pr_info("Hello, dlrx_fw\n=============\n");
+	pr_info("DRE_Version is 0x%x, DRE_Feature is 0x%x \n",
+		DRE_FW_VERSION,
+		DRE_FW_FEATURE);
+
+	global_debug_flag = 0;
+	/* global_debug_print = 1; */
+	g_cfg_badr_ce5buf = DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_get_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0);
+	g_cfg_badr_ce5des = DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_get_indirect(DLRX_CFG_CTXT_CE5DES_BASE, 0);
+
+#if DLRX_GRX330_BOARD_CFG
+	/* TODO : debug */
+	ddr_base = (unsigned int *)0x8f200000;
+#endif
+#if 0
+	DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, 0x4000);
+	DLRX_CFG_GLOBAL_dlrx_timout_count_th_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, 0x0A);
+#endif
+	g_congestion_timeout_num = 0;
+
+	g_cfg_badr_rxpb_ptr_ring = DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE, 0);
+	g_cfg_badr_ro_linklist = DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+	g_cfg_badr_ro_mainlist = DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_get_indirect(DLRX_CFG_CTXT_RO_MAINLIST_BASE, 0);
+
+#if USE_GLOBAL_VARIABLES
+	g_cfg_num_ce5buf = DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_get_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0);
+	g_cfg_size_shift_ce5buf = DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_get_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0);
+	g_cfg_num_rxpb_ptr_ring = DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_get_indirect(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE, 0);
+	g_cfg_size_rxpktdes = DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_get_indirect(DLRX_CFG_CTXT_RXPB_BASE, 0);
+	g_cfg_offset_atten = DLRX_CFG_CTXT_RXPB_cfg_offset_atten_get_indirect(DLRX_CFG_CTXT_RXPB_BASE, 0);
+#endif
+
+	g_qca_hw = DLRX_CFG_GLOBAL_dlrx_qca_hw_get_indirect(DLRX_CFG_GLOBAL_BASE, 0);
+	g_qca_hw_sub_type = DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_get_indirect(DLRX_CFG_GLOBAL_BASE, 0);
+
+	if (g_qca_hw == BEELINER_BOARD) {
+		g_ce5_offset = DLRX_TARGET_CE5_BEELINER;
+
+		if (g_qca_hw_sub_type == SUBTYPE_NONE_BOARD)
+			pr_info("DLRX FW: Beeliner board detected\n");
+		else
+			pr_info("DLRX FW: Beeliner Cascade board detected\n");
+	} else {
+		g_ce5_offset = DLRX_TARGET_CE5_PEREGRINE;
+		pr_info("DLRX FW: Peregrine board detected\n");
+	}
+
+	/* #if DLRX_GRX330_BOARD_CFG */
+	/* Each entry in the rxpb ptr ring is one dword,
+	Multiply GET_NUM_RXPB_PTR_RING by 4 to convert to bytes
+	*/
+	dre_dma_map(g_cfg_badr_rxpb_ptr_ring, (GET_NUM_RXPB_PTR_RING * 4));
+	/* Each entry in the ce5 des ring is two dwords,
+	Multiply GET_NUM_CE5BUF by 8 to convert to bytes
+	*/
+	dre_dma_map(g_cfg_badr_ce5des, (GET_NUM_CE5BUF * 2) * 4);
+	/* Each entry in the ce5 buffer is 512 bytes
+	Multiply GET_NUM_CE5BUF by 512
+	*/
+	dre_dma_map(g_cfg_badr_ce5buf, ((GET_NUM_CE5BUF) * (1 << GET_CE5BUF_SIZE_SHIFT)));
+
+	for (loop_index = 0; loop_index < GET_NUM_RXPB_PTR_RING; loop_index++) {
+		unsigned int rxpb_ptr;
+		rxpb_ptr = CACHE_ADDR(DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)g_cfg_badr_rxpb_ptr_ring, loop_index));
+		dre_dma_map(rxpb_ptr, HTT_RX_BUF_SIZE);
+	}
+
+	/* 2 is offset for the write index */
+	write_index_address = (unsigned int)((unsigned int *)CACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE) + 2);
+
+#if TEST_GRX350
+	*((unsigned int *)UNCACHE_ADDR(write_index_address)) =  512;
+#endif
+	dre_dma_map(write_index_address, 4);
+	/* function1_cycles  = CycleCounter_Create("Rx Ind : Overall"); */
+#if DLRX_GRX330_BOARD_CFG
+	*DMA_CS 	= 7;
+	*DMA_CCTRL	= 0x30102;
+
+	*DMA_CS 	= 7;
+	*DMA_CCTRL	= 0x30101;
+#endif
+	return 0;
+}
+
+static void __exit dlrx_fw_exit(void)
+{
+#if DLRX_SUPPORT_UNLOAD
+	/* Find duplicate pointer values in the rxpb
+	ring ans set to 0 if duplicate is found
+	*/
+	rxpb_find_duplicate_ptr_value();
+	/* Release of the rxpb buffers between
+	read and write pointer
+	*/
+	rxpb_free_buffers_on_unload();
+	/* Clear the RO list */
+	ro_list_clear();
+	/* Unregister functions that are already registered with the driver */
+	dlrx_unregister_driver_fns();
+#endif
+	pr_info("Goodbye, dlrx_fw\n");
+}
+
+module_init(dlrx_fw_init);
+module_exit(dlrx_fw_exit);
+MODULE_AUTHOR("LANTIQ");
+MODULE_DESCRIPTION("DRE FW");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_main.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_main.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_main.c
@@ -0,0 +1,336 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+
+int dlrx_main(void);
+void peer_reset_check(void);
+void peer_reset(unsigned int *ptr);
+void mib_reset_check(void);
+extern void mib_clear(int vap);
+void ce5_write_index_update(unsigned int *ce5_parsing_index_ptr);
+
+extern void dlrx_rx_flush_msg_process(unsigned int *ce5buf_ptr);
+extern void dlrx_rx_frag_ind_msg_process(unsigned int *ce5buf_ptr);
+
+extern void dlrx_tx_cmpl_msg_process(unsigned int *ce5buf_ptr);
+
+extern void dlrx_tx_cmp_msg_process(unsigned int *ce5buf_ptr);
+extern void dlrx_ind_msg_process(unsigned int *ce5buf_ptr);
+extern void msg_mib_inc(unsigned int msg_type);
+extern void ro_list_reset(unsigned int peer);
+extern int ppa_dl_dre_wlan_msg_send(unsigned int msg_type,
+				    unsigned int msg_ptr,
+				    unsigned int msg_len,
+				    unsigned int flags);
+
+unsigned int *ddr_base, *pcie_base, *cfg_ctxt_base;
+unsigned int *congestion_register_addr;
+
+/***********************************************************************
+Function name:   dlrx_main
+Description:     Check message type and call corresponding function for
+	processing each type of message
+Parameters:      None
+Return value :   0
+Functions called by this module:
+	peer_reset_check()
+	mib_reset_check()
+	dlrx_ind_msg_process()
+	dlrx_flush_msg_process()
+	dlrx_frag_ind_msg_process()
+	dlrx_cmp_msg_process()
+Notes:           cfg_badr_ce5des, cfg_badr_ce5buf and cfg_size_ce5buf
+	should be set to the correct value by driver in the
+	context structure before calling this function. Check
+	the notes of functions called for complete list to be
+	set in the context.
+************************************************************************/
+int dlrx_main(void)
+{
+	unsigned int ce5_parsing_index;
+	unsigned int ptr_in_ce5_ring;
+
+	/* printk("dlrx_main_called\n"); */
+	if (DLRX_CFG_GLOBAL_dlrx_enable_get_indirect(DLRX_CFG_GLOBAL_BASE, 0)) {
+		ce5_parsing_index = DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_get_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0);
+
+		/* Check CE5 message status */
+		/* Read unload from memory during every iteration */
+		while (((*DLRX_TARGET_CE5_READ_INDEX(g_ce5_offset)) != ce5_parsing_index)
+		       && !global_debug_flag &&
+		       !(DLRX_CFG_GLOBAL_dlrx_cfg_unload_get_indirect(DLRX_CFG_GLOBAL_BASE, 0))) {
+			unsigned int *ce5buf_ptr;
+			unsigned int *ce5des_ptr;
+			unsigned int msg_len;
+			unsigned int msg_type = 0;
+
+			/* Check if the consumed segments in the
+			switch buffer is below threshold.
+			If not wait for the value to come below threshold
+			If timeout occurs return
+			*/
+			ce5des_ptr = ((unsigned int *)UNCACHE_ADDR(g_cfg_badr_ce5des)
+				      + (ce5_parsing_index << 1));
+
+			msg_len = DLRX_CE5DES_FORMAT_nbytes_get_indirect(ce5des_ptr, 0);
+			ptr_in_ce5_ring = DLRX_CE5DES_FORMAT_dest_ptr_get_indirect(ce5des_ptr, 0);
+
+			DLRX_CFG_CTXT_CE5DES_msg_len_set_indirect(DLRX_CFG_CTXT_CE5DES_BASE, 0, msg_len);
+
+			/* Note: cfg_size_ce5buf is the number of bytes in power of 2 */
+			ce5buf_ptr = (unsigned int *)((uint8_t *)g_cfg_badr_ce5buf
+						      + (ce5_parsing_index << GET_CE5BUF_SIZE_SHIFT));
+
+			/* printk("ce5des_ptr=0x%x, msg_len=0x%x\n",
+				ce5des_ptr, msg_len);
+			*/
+			if (msg_len) {
+				/* TODO: remove */
+				dre_dma_unmap((unsigned int)ce5buf_ptr, msg_len + 4);
+				msg_type = DLRX_IND_MSG_msg_type_get_indirect(ce5buf_ptr, 0);
+
+				if (DLRX_CFG_GLOBAL_dlrx_enable_get_indirect(DLRX_CFG_GLOBAL_BASE, 0) == 0xf)
+					pr_info("ce5des_ptr=0x%p, msg_type= 0x%x ,msg_len=0x%x\n",
+						ce5des_ptr, msg_type, msg_len);
+
+				if ((ptr_in_ce5_ring != ((unsigned int)VIR_TO_PHY(ce5buf_ptr)))
+				    || ((msg_type == 0xFF) && (msg_len))) {
+					pr_info("ptr_in_ce5_ring: 0x%x ce5buf_ptr: 0x%x\n",
+						ptr_in_ce5_ring,
+						((unsigned int)VIR_TO_PHY(ce5buf_ptr)));
+					pr_info("Msg type: 0x%x msg_len: %u\n",
+						msg_type,
+						msg_len);
+					global_debug_flag = 1;
+					break;
+				}
+
+				DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_set_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0, msg_type);
+
+				/* TODO: DEBUG */
+				if (DLRX_CFG_GLOBAL_dltx_enable_get_indirect(DLRX_CFG_GLOBAL_BASE, 0)) {
+					switch (msg_type) {
+					case HTT_RX_IND_MSG:
+#if 0
+						if (!dlrx_check_congestion_status()) {
+							g_congestion_timeout_num++;
+
+							if (g_congestion_timeout_num >= DLRX_CFG_GLOBAL_dlrx_timout_count_th_get_indirect(DLRX_CFG_GLOBAL_BASE, 0))
+								g_congestion_drop_flag = 1;
+							else
+								return 0;
+						} else {
+							g_congestion_timeout_num = 0;
+							g_congestion_drop_flag = 0;
+						}
+
+#else
+						g_congestion_timeout_num = 0;
+						g_congestion_drop_flag = 0;
+#endif
+						dlrx_ind_msg_process(ce5buf_ptr);
+						break;
+
+					case HTT_RX_FLUSH_MSG:
+						dlrx_rx_flush_msg_process(ce5buf_ptr);
+						break;
+
+					case HTT_RX_FRAG_IND_MSG:
+						dlrx_rx_frag_ind_msg_process(ce5buf_ptr);
+						break;
+
+					case HTT_TX_CMP_MSG:
+						dlrx_tx_cmpl_msg_process(ce5buf_ptr);
+						break;
+
+					default:
+						/*Increment message mib for WLAN
+						(Not TX complete, not RX indication,
+						not RX fragment indication, not RX flush)
+						*/
+						msg_mib_inc(HTT_RX_CPU_CE5);
+						/* call driver API to send message to wlan driver */
+						ppa_dl_dre_wlan_msg_send(msg_type,
+									 (unsigned int)ce5buf_ptr,
+									 msg_len,
+									 0);
+						break;
+					}
+				} else if (msg_type == HTT_TX_CMP_MSG)/* always send to QCA */
+					dlrx_tx_cmpl_msg_process(ce5buf_ptr);
+				else
+					ppa_dl_dre_wlan_msg_send(msg_type,
+								 (unsigned int)ce5buf_ptr,
+								 msg_len,
+								 0);
+
+				/* dre_dma_map((unsigned int)ce5buf_ptr, msg_len); */
+#if 1 /* test */
+				dre_dma_wback_invalidate((unsigned int)ce5buf_ptr, msg_len + 4);
+#else
+				dre_dma_map((unsigned int)ce5buf_ptr, msg_len + 4);
+				dre_dma_unmap((unsigned int)ce5buf_ptr, msg_len + 4);
+#endif
+			} /* if(msg_len) */
+
+#if 1
+			else
+				break;
+
+#endif
+#if 1/* tmp remove */
+			DLRX_IND_MSG_msg_type_set_indirect((unsigned int *)UNCACHE_ADDR(ce5buf_ptr), 0, 0xFF);
+#endif
+			DLRX_CE5DES_FORMAT_nbytes_set_indirect(ce5des_ptr, 0, 0);
+			ce5_write_index_update(&ce5_parsing_index);
+		}
+
+		if (DLRX_CFG_GLOBAL_debug_print_enable_get_indirect(DLRX_CFG_GLOBAL_BASE, 0)) {
+#if defined(DRE_DBG_PRINT_ENABLE) && DRE_DBG_PRINT_ENABLE
+			dlrx_generate_debug(0);
+#endif
+			DLRX_CFG_GLOBAL_debug_print_enable_set_indirect(DLRX_CFG_GLOBAL_BASE, 0, 0);
+		}
+
+		peer_reset_check();
+
+		mib_reset_check();
+	} /* if(DLRX_ENABLE) */
+
+	return 0;
+}
+
+/*************************************************************************
+Function name:   peer_reset_check
+Description:     Check whether need to execute peer_reset or
+	invalid tid reset
+Parameters:      None
+Return value :   None
+Functions called by this module:
+	peer_reset()
+Notes        :   req and peer should be configured by driver in the event
+	of peer_reset and by firmware in the event of invalid
+	peer.
+*************************************************************************/
+void peer_reset_check(void)
+{
+	/*If peer reset or invalid TI
+	Scan reorder main list and reorder link list of
+	all TID of this peer. Free all valid packet buffer
+	pointer used. Free used reorder link list entry.
+	*/
+	if (DLRX_CFG_PEER_RESET_req_get_indirect(DLRX_CFG_PEER_RESET_BASE, 0))
+		peer_reset((unsigned int *)DLRX_CFG_PEER_RESET_BASE);
+	else if (DLRX_CFG_INVALID_TID_req_get_indirect(DLRX_CFG_INVALID_TID_BASE, 0)) {
+		peer_reset((unsigned int *)DLRX_CFG_INVALID_TID_BASE);
+		msg_mib_inc(HTT_RX_INVALID_TID);
+	}
+
+	return;
+}
+
+/*************************************************************************
+Function name:   mib_reset_check
+Description:     Check whether need to execute mib_reset
+Parameters:      None
+Return value :   None
+Functions called by this module:
+	mib_clear()
+Notes        :   allreq or vapreq and vap should be configured by driver
+	in the event of requesting to reset the mib
+*************************************************************************/
+void mib_reset_check(void)
+{
+	if (DLRX_CFG_MIB_RESET_allreq_get_indirect(DLRX_CFG_MIB_RESET_BASE, 0)) {
+		mib_clear(-1);
+		/* Clear all mib reset request */
+		DLRX_CFG_MIB_RESET_allreq_clear_indirect(DLRX_CFG_MIB_RESET_BASE, 0);
+	} else if (DLRX_CFG_MIB_RESET_vapreq_get_indirect(DLRX_CFG_MIB_RESET_BASE, 0)) {
+		unsigned int vap;
+		/* Clear VAP MIB */
+		vap = DLRX_CFG_MIB_RESET_vap_get_indirect(DLRX_CFG_MIB_RESET_BASE, 0);
+		mib_clear(vap);
+		/* Clear VAP mib reset request */
+		DLRX_CFG_MIB_RESET_vapreq_clear_indirect(DLRX_CFG_MIB_RESET_BASE, 0);
+	}
+
+	return;
+}
+
+/*************************************************************************
+Function name:    peer_reset
+Description:      peer reset when peer_reset_req is set or
+	invalid_tid_req is set
+Parameters:       ptr (point to DLRX_CFG_PEER_RESET_BASE or
+	DLRX_CFG_INVALID_TID_BASE)
+Return value :    None
+Functions called by this module:
+	ro_list_reset()
+Notes        :    None
+*************************************************************************/
+void peer_reset(unsigned int *ptr)
+{
+	unsigned int peer;
+
+	peer = DLRX_CFG_PEER_RESET_peer_get_indirect(ptr, 0);
+
+	/* Scan RO_mainlist and RO_linklist of all TID and seqid of this peer.
+	Free all valid packet buffer pointer used.
+	Free used RO_linklist entry.
+	*/
+	ro_list_reset(peer);
+	/* Clear req bit */
+	DLRX_CFG_PEER_RESET_req_clear_indirect(ptr, 0);
+}
+
+/*************************************************************************
+Function name:    ce5_write_index_update
+Description:      write local_ce5_parsing_index to target's
+	ce5_write_index and increment local_ce5_parsing_index
+Parameters:       ce5_parsing_index_ptr
+Return value :    None
+Functions called by this module:
+	None
+Notes        :    cfg_num_ce5buf should be configured by driver prior
+	this function is called
+*************************************************************************/
+void ce5_write_index_update(unsigned int *ce5_parsing_index_ptr)
+{
+	if (!global_debug_flag)
+		*DLRX_TARGET_CE5_WRITE_INDEX(g_ce5_offset) = *ce5_parsing_index_ptr;
+	else
+		*DLRX_TARGET_CE5_WRITE_INDEX(g_ce5_offset) = ((*DLRX_TARGET_CE5_READ_INDEX(g_ce5_offset)) + 64) % GET_NUM_CE5BUF;
+
+	*ce5_parsing_index_ptr = *ce5_parsing_index_ptr + 1;
+	*ce5_parsing_index_ptr = (*ce5_parsing_index_ptr) % GET_NUM_CE5BUF;
+	DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_set_indirect(DLRX_CFG_CTXT_CE5BUF_BASE, 0, *ce5_parsing_index_ptr);
+
+	return;
+}
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_mib_func.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_mib_func.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_mib_func.c
@@ -0,0 +1,484 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_internal_def.h"
+
+void mib_clear(int vap);
+void msg_mib_inc(unsigned int msg_type);
+void struct_val_set(void *struct_addr, int val, unsigned int struct_size);
+
+/*************************************************************************
+Module:          struct_val_set
+Description:     set value for every byte of a data structure
+Parameters:      struct_addr, val, struct_size
+Return value :   struct_addr
+Functions called by this module:
+	None
+Notes        :   None
+*************************************************************************/
+void struct_val_set(void *struct_addr, int val, unsigned int struct_size)
+{
+	uint8_t *struct_addr_byte_ptr = struct_addr;
+
+	while (struct_size--)
+		*struct_addr_byte_ptr++ = val;
+}
+
+/*************************************************************************
+Module:          mib_clear
+Description:     Clear all mibs (including vap mibs, data mibs and
+	message mibs)or mib of a particular vap. Vap mib
+	structure is shared between directlink rx and tx.
+Parameters:      vap (set to vap value if mib_reset_vapreq is set
+	or -1 if mib_reset_allreq is set)
+Return value :   None
+Functions called by this module:
+	struct_val_set()
+Notes        :   None
+*************************************************************************/
+void mib_clear(int vap)
+{
+	int k = 0;
+
+	if (vap == -1) {
+		/* Clear vap mib's for all 16 vaps */
+		for (k = 0; k < 16; k++) {
+			struct_val_set((void *)DLRX_VAP_MIB_BASE(k),
+				       0,
+				       sizeof(vap_data_mib_t));
+			struct_val_set((void *)DLRX_VAP_MIB_MISC_BASE(k),
+				       0,
+				       sizeof(vap_data_misc_mib_t));
+		}
+
+		/* Clear data mib's */
+		struct_val_set((void *)DLRX_DATA_MIB_BASE,
+			       0,
+			       sizeof(dlrx_data_mib_t));
+		/* Clear message mib's */
+		struct_val_set((void *)DLRX_MSG_MIB_BASE,
+			       0,
+			       sizeof(dlrx_msg_mib_t));
+		/* Clear misc mib's */
+		struct_val_set((void *)DLRX_MISC_MIB_BASE,
+			       0,
+			       sizeof(dlrx_misc_mib_t));
+	} else {
+		struct_val_set((void *)DLRX_VAP_MIB_BASE(vap),
+			       0,
+			       sizeof(vap_data_mib_t));
+		struct_val_set((void *)DLRX_VAP_MIB_MISC_BASE(vap),
+			       0,
+			       sizeof(vap_data_misc_mib_t));
+	}
+
+	return;
+}
+
+/*************************************************************************
+Module:          msg_mib_inc
+Description:     Increment message mib according to message type.
+Parameters:      msg_type
+Return value :   None
+Functions called by this module:
+	None
+Notes        :   None
+*************************************************************************/
+void msg_mib_inc(unsigned int msg_type)
+{
+	unsigned int msg_mib = 0;
+
+	/* printk("msg_mib_inc = %d\n", msg_type); */
+	/* reduce CPU load for critical path */
+	if (msg_type == HTT_RX_IND_MSG) {
+		msg_mib = DLRX_MSG_MIB_total_rx_ind_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_ind_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		return;
+	}
+
+	switch (msg_type) {
+	case HTT_RX_CPU_CE4:
+		msg_mib = DLRX_MSG_MIB_total_ce4_cpu_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_ce4_cpu_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_CPU_CE5:
+		msg_mib = DLRX_MSG_MIB_total_ce5_cpu_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_ce5_cpu_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_FLUSH_MSG:
+		msg_mib = DLRX_MSG_MIB_total_rx_flush_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_flush_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_TX_CMP_MSG:
+		msg_mib = DLRX_MSG_MIB_total_tx_cmp_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_tx_cmp_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_IND_MSG_WLAN:
+		msg_mib = DLRX_MSG_MIB_total_rx_ind_wlan_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_ind_wlan_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_FLUSH_MSG_WLAN:
+		msg_mib = DLRX_MSG_MIB_total_rx_flush_wlan_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_flush_wlan_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_FRAG_IND_MSG:
+		msg_mib = DLRX_MSG_MIB_total_rx_frag_ind_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_frag_ind_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	case HTT_RX_INVALID_TID:
+		msg_mib = DLRX_MSG_MIB_total_rx_invalid_tid_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+		DLRX_MSG_MIB_total_rx_invalid_tid_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+		break;
+
+	default:
+		break;
+	}
+
+	return;
+}
+
+/******************************************************************************
+Function name: mib_update_vap_dlrx_data
+Description  : Update the mib VAP data
+Parameters   : msdu_length : msdu length
+	packet_drop_reason: Used to find if packet is dropped or not and
+	update the corresponding counters.
+Return value : None
+Functions called by this module:
+	None
+Notes        : Make sure the vap, discard, forward, inspect is set to the
+	correct value in the context structure before calling this
+	function. Check the notes of functions called for
+	complete list to be set in the context.
+******************************************************************************/
+void mib_update_vap_dlrx_data(
+	unsigned int msdu_length,
+	dlrx_packet_drop_reason packet_drop_reason)
+{
+	unsigned int vap;
+	unsigned int discard;
+	unsigned int forward;
+	unsigned int inspect;
+	unsigned long long msb_byte;
+	unsigned long long lsb_byte;
+	unsigned long long pdu_data;
+	unsigned long long num_bytes_data;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (!packet_drop_reason) {
+		discard = DLRX_CTXT_MSG_discard_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+		forward = DLRX_CTXT_MSG_forward_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+		inspect = DLRX_CTXT_MSG_inspect_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+		if (!discard) {
+			lsb_byte = VAP_DATA_MIB_rx_rcv_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_rcv_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_rcv_pdu_high;
+			pdu_data = (msb_byte | lsb_byte);
+			pdu_data++;
+			VAP_DATA_MIB_rx_rcv_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_rcv_pdu_low));
+			VAP_DATA_MIB_rx_rcv_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_rcv_pdu_high) \
+					& M_VAP_DATA_MIB_rx_rcv_pdu_high));
+			lsb_byte = VAP_DATA_MIB_rx_rcv_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_rcv_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_rcv_bytes_high;
+			num_bytes_data = (msb_byte | lsb_byte);
+			num_bytes_data += msdu_length;
+			VAP_DATA_MIB_rx_rcv_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_rcv_bytes_low));
+			VAP_DATA_MIB_rx_rcv_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_rcv_bytes_high) \
+					& M_VAP_DATA_MIB_rx_rcv_bytes_high));
+		} else {
+			lsb_byte = VAP_DATA_MIB_rx_discard_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_discard_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_discard_pdu_high;
+			pdu_data = (msb_byte | lsb_byte);
+			pdu_data++;
+			VAP_DATA_MIB_rx_discard_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_discard_pdu_low));
+			VAP_DATA_MIB_rx_discard_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_discard_pdu_high) \
+					& M_VAP_DATA_MIB_rx_discard_pdu_high));
+
+			lsb_byte = VAP_DATA_MIB_rx_discard_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_discard_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_discard_bytes_high;
+			num_bytes_data = (msb_byte | lsb_byte);
+			num_bytes_data += msdu_length;
+			VAP_DATA_MIB_rx_discard_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_discard_bytes_low));
+			VAP_DATA_MIB_rx_discard_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_discard_bytes_high) \
+					& M_VAP_DATA_MIB_rx_discard_bytes_high));
+		}
+
+		if (forward) {
+			lsb_byte = VAP_DATA_MIB_rx_fwd_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_fwd_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_fwd_pdu_high;
+			pdu_data = (msb_byte | lsb_byte);
+			pdu_data++;
+			VAP_DATA_MIB_rx_fwd_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_fwd_pdu_low));
+			VAP_DATA_MIB_rx_fwd_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_fwd_pdu_high) \
+					& M_VAP_DATA_MIB_rx_fwd_pdu_high));
+
+			lsb_byte = VAP_DATA_MIB_rx_fwd_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_fwd_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_fwd_bytes_high;
+			num_bytes_data = (msb_byte | lsb_byte);
+			num_bytes_data += msdu_length;
+			VAP_DATA_MIB_rx_fwd_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_fwd_bytes_low));
+			VAP_DATA_MIB_rx_fwd_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_fwd_bytes_high) \
+					& M_VAP_DATA_MIB_rx_fwd_bytes_high));
+		}
+
+		if (inspect) {
+
+			lsb_byte = VAP_DATA_MIB_rx_inspect_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_inspect_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_inspect_pdu_high;
+			pdu_data = (msb_byte | lsb_byte);
+			pdu_data++;
+			VAP_DATA_MIB_rx_inspect_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_inspect_pdu_low));
+			VAP_DATA_MIB_rx_inspect_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_inspect_pdu_high) \
+					& M_VAP_DATA_MIB_rx_inspect_pdu_high));
+
+			lsb_byte = VAP_DATA_MIB_rx_inspect_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = VAP_DATA_MIB_rx_inspect_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+			msb_byte = msb_byte << W_VAP_DATA_MIB_rx_inspect_bytes_high;
+			num_bytes_data = (msb_byte | lsb_byte);
+			num_bytes_data += msdu_length;
+			VAP_DATA_MIB_rx_inspect_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_inspect_bytes_low));
+			VAP_DATA_MIB_rx_inspect_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_inspect_bytes_high) \
+					& M_VAP_DATA_MIB_rx_inspect_bytes_high));
+		}
+	}
+
+	if (packet_drop_reason == WRONG_PN_SEQUENCE) {
+		lsb_byte = VAP_DATA_MIB_rx_pn_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = VAP_DATA_MIB_rx_pn_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = msb_byte << W_VAP_DATA_MIB_rx_pn_pdu_high;
+		pdu_data = (msb_byte | lsb_byte);
+		pdu_data++;
+		VAP_DATA_MIB_rx_pn_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_pn_pdu_low));
+		VAP_DATA_MIB_rx_pn_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_pn_pdu_high) \
+				& M_VAP_DATA_MIB_rx_pn_pdu_high));
+
+		lsb_byte = VAP_DATA_MIB_rx_pn_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = VAP_DATA_MIB_rx_pn_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = msb_byte << W_VAP_DATA_MIB_rx_pn_bytes_high;
+		num_bytes_data = (msb_byte | lsb_byte);
+		num_bytes_data += msdu_length;
+		VAP_DATA_MIB_rx_pn_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_pn_bytes_low));
+		VAP_DATA_MIB_rx_pn_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_pn_bytes_high) \
+				& M_VAP_DATA_MIB_rx_pn_bytes_high));
+	} else if (packet_drop_reason == DMA_TX_CHANNEL_FULL) {
+		lsb_byte = VAP_DATA_MIB_rx_drop_pdu_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = VAP_DATA_MIB_rx_drop_pdu_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = msb_byte << W_VAP_DATA_MIB_rx_drop_pdu_high;
+		pdu_data = (msb_byte | lsb_byte);
+		pdu_data++;
+		VAP_DATA_MIB_rx_drop_pdu_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (pdu_data & M_VAP_DATA_MIB_rx_drop_pdu_low));
+		VAP_DATA_MIB_rx_drop_pdu_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MIB_rx_drop_pdu_high) \
+				& M_VAP_DATA_MIB_rx_drop_pdu_high));
+
+		lsb_byte = VAP_DATA_MIB_rx_drop_bytes_low_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = VAP_DATA_MIB_rx_drop_bytes_high_get_indirect(DLRX_VAP_MIB_BASE(vap), 0);
+		msb_byte = msb_byte << W_VAP_DATA_MIB_rx_drop_bytes_high;
+		num_bytes_data = (msb_byte | lsb_byte);
+		num_bytes_data += msdu_length;
+		VAP_DATA_MIB_rx_drop_bytes_low_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MIB_rx_drop_bytes_low));
+		VAP_DATA_MIB_rx_drop_bytes_high_set_indirect(DLRX_VAP_MIB_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MIB_rx_drop_bytes_high) \
+				& M_VAP_DATA_MIB_rx_drop_bytes_high));
+	}
+}
+
+/**************************************************************************************
+Function name: mib_update_status_counters
+Description  : Update the mib status counters
+Parameters   : switch_value : Used to determine if msdu or mpdu counters need to
+be updated.
+status_value : Used to update the corresponding status counters
+Return value : None
+Functions called by this module:
+None
+Notes        : None
+***************************************************************************************/
+void mib_update_status_counters(mib_msdu_mpdu_update_switch switch_value, unsigned int status_value)
+{
+	unsigned int counter_value;
+
+	switch (status_value) {
+	case MPDU_STATUS_SUCCESS:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_success_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_success_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_success_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_success_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_FCS_ERROR:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error2_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error2_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error2_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error2_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_DUPLICATE_ERROR:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error3_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error3_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error3_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error3_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_REPLAY_ERROR:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error4_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error4_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error4_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error4_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_INVALID_PEER:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error5_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error5_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error5_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error5_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_UNAUTHORIZED_PEER:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error6_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error6_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error6_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error6_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_OUT_OF_SYNC_PEER:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error7_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error7_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error7_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error7_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_MANAGEMENT_CONTROL:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error8_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error8_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error8_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error8_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_TKIP_MIB_ERROR:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error9_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error9_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_error9_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_error9_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MPDU_STATUS_DECRYPT_ERROR:
+		if (switch_value == UPDATE_MSDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_errora_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_errora_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		} else if (switch_value == UPDATE_MPDU_MIB) {
+			counter_value = DLRX_DATA_MIB_rx_errora_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+			counter_value++;
+			DLRX_DATA_MIB_rx_errora_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		}
+
+		break;
+
+	case MSDU_STATUS_ERROR_5_DROP:
+		counter_value = DLRX_DATA_MIB_rx_drop_error5_get_indirect(DLRX_DATA_MIB_BASE, 0);
+		counter_value++;
+		DLRX_DATA_MIB_rx_drop_error5_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		break;
+
+	case MSDU_STATUS_RO_LINKLIST_DROP:
+		counter_value = DLRX_DATA_MIB_rx_drop_ro_linklist_get_indirect(DLRX_DATA_MIB_BASE, 0);
+		counter_value++;
+		DLRX_DATA_MIB_rx_drop_ro_linklist_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+		break;
+
+	default:
+		/* Should not reach here */
+		break;
+	}
+}
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_playout_process.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_playout_process.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_playout_process.c
@@ -0,0 +1,204 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include<linux/kernel.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_inl_fns.h"
+#include "../include/dlrx_dre_api.h"
+
+extern int ppa_dl_dre_wlan_pkt_send(unsigned int rxpb_ptr, unsigned int data_len, unsigned int pktstatus,
+				    unsigned int msg_ptr, unsigned int vap_id, unsigned int flags);
+extern int ppa_dl_dre_ps_send(unsigned int rxpb_ptr, unsigned int data_ptr, unsigned int data_len,
+			      unsigned int vap_id);
+
+extern int ppa_dl_dre_gswip_dma_send(unsigned int vap_id, unsigned int rxpb_ptr, unsigned int data_ptr, unsigned int data_len,
+				     unsigned int release_flag, unsigned int pmac_hdr_ptr, unsigned int unmap_type);
+
+/******************************************************************************
+//      Function name: dlrx_playout_process
+//      Description  : Playout process function
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//                     ro_list_release_data
+//      Notes        : Make sure the start_seqid and total_seqid is set to the
+//                     correct value in the context structure before calling this
+//                     function. Check the notes of functions called for complete
+//                     list to be set in the context.
+******************************************************************************/
+
+void dlrx_playout_process(unsigned int ce5_buf_ptr)
+{
+	unsigned int mpdu_index;
+	unsigned int start_seq_id;
+	unsigned int total_seq_id;
+
+	start_seq_id = DLRX_CTXT_MSG_start_seqid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	total_seq_id = DLRX_CTXT_MSG_total_seqid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	/* Step 27 , Step 28 */
+	for (mpdu_index = 0; mpdu_index < total_seq_id; mpdu_index++) {
+		DLRX_CTXT_MSG_mpdu_index_set_indirect(DLRX_CTXT_MSG_BASE, 0, start_seq_id);
+		ro_list_release_data(ce5_buf_ptr);
+
+		start_seq_id++;
+		start_seq_id %=  NUM_SEQ_ID;   /* Check wrap around condition */
+	}
+}
+
+/***********************************************************************************
+//      Function name: dlrx_send_packet_to_dma_descriptor
+//      Description  : Send the packet to corresponding dma descriptor based
+//                     on the comditions
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_get_interface_data_from_vap
+//                     mib_update_vap_dlrx_data
+//                     rxpb_write_free_buffer_to_rxpb_ptr_ring
+//      Notes        : Make sure the cur_ro_des_ptr and vap is set to the correct value
+//                     in the context structure before calling this function. Check
+//                     the notes of functions called for complete list to be set
+//                     in the context.
+************************************************************************************/
+void dlrx_send_packet_to_dma_descriptor(unsigned int ce5_buf_ptr)
+{
+	unsigned int forward, discard, inspect;
+	unsigned int *linklist_data_ptr;
+	unsigned int vap, vap2int;
+	unsigned int msdu_length;
+	unsigned int rxpb_buf_ptr, data_ptr;
+	int driver_status = -2;
+	unsigned int padding_bytes = 0; /* Must initialize to zero */
+
+	linklist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+
+	forward = DLRX_RO_LINKLIST_fwd_get_indirect(linklist_data_ptr, 0);
+	inspect = DLRX_RO_LINKLIST_inspect_get_indirect(linklist_data_ptr, 0);
+	discard = DLRX_RO_LINKLIST_discard_get_indirect(linklist_data_ptr, 0);
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	vap2int = dlrx_get_interface_data_from_vap(vap);
+
+	msdu_length = DLRX_RO_LINKLIST_msdu_len_get_indirect(linklist_data_ptr, 0);
+	rxpb_buf_ptr = DLRX_RO_LINKLIST_rxpb_ptr_get_indirect(linklist_data_ptr, 0);
+
+	if (g_qca_hw == BEELINER_BOARD)
+		padding_bytes = DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_indirect((unsigned int *)rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+	data_ptr = (unsigned int)((uint8_t *)rxpb_buf_ptr + GET_RXPKT_DESC_SIZE + padding_bytes);
+
+	if (inspect == 1) { /* Step 12 */
+		unsigned int mpdu_status;
+		unsigned int *temp_rxpb_ptr;
+		unsigned int flags = 0;
+
+		temp_rxpb_ptr = (unsigned int *)rxpb_buf_ptr;
+		mpdu_status = ((*temp_rxpb_ptr) >> B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status);
+
+		dre_dma_unmap((unsigned int)(rxpb_buf_ptr + MAX_INV_HEADER_LEN), HTT_RX_BUF_SIZE - MAX_INV_HEADER_LEN);
+
+		flags = ((padding_bytes << 16) | 1);   /* Store the padding bytes value in the upper 16 bits for driver usage and last bit to indicate if inspect is 1 or 0 */
+		/* call driver API to send packet to wlan dma */
+		driver_status = ppa_dl_dre_wlan_pkt_send(rxpb_buf_ptr, msdu_length, WLAN_INSPECT_TYPE , ce5_buf_ptr, vap, flags);   /*Step 14 */
+		mib_update_vap_wlan_data(msdu_length);
+	} else { /* The flow in the else part is not defined in the specification */
+		unsigned int pmac_hdr_ptr;
+		unsigned int release_bit;
+		unsigned int temp_switch = 0;
+
+		if ((discard == 0) && (forward == 1)) {
+			release_bit = 0;
+			mib_update_vap_forward_data(msdu_length);
+			/* call driver API to send packet to gswip dma */
+			dre_dma_unmap((unsigned int)(rxpb_buf_ptr + MAX_INV_HEADER_LEN), HTT_RX_BUF_SIZE - MAX_INV_HEADER_LEN);
+		} else
+			release_bit = 1;
+
+		if (forward == 1) {
+			pmac_hdr_ptr = (unsigned int)(((uint8_t *)data_ptr) - 4);
+
+			driver_status = ppa_dl_dre_gswip_dma_send(vap, rxpb_buf_ptr, data_ptr, msdu_length, release_bit, pmac_hdr_ptr, 1);
+			mib_update_vap_gswip_data(msdu_length);
+			release_bit = 1;
+			temp_switch = 1;
+		}
+
+		if (discard == 0) {
+#if (defined (DLRX_GRX330_BOARD_CFG) && (DLRX_GRX330_BOARD_CFG == 1))
+
+			if (vap2int == 15) {
+				/* TODO: test remove packet send to PS */
+#if 1
+
+				if (release_bit == 1)
+					dre_dma_unmap((unsigned int)(rxpb_buf_ptr + MAX_INV_HEADER_LEN), HTT_RX_BUF_SIZE - MAX_INV_HEADER_LEN);
+
+				/* call driver API to send packet to protocol stack dma */
+
+				driver_status = ppa_dl_dre_ps_send(rxpb_buf_ptr, data_ptr, msdu_length, vap);
+				mib_update_vap_protocol_stack_data(msdu_length);
+#else
+				;
+#endif
+			} else
+#endif
+			{
+				if (temp_switch == 1)
+					pmac_hdr_ptr = (unsigned int)(((uint8_t *)data_ptr) - 8);
+				else
+					pmac_hdr_ptr = (unsigned int)(((uint8_t *)data_ptr) - 4);
+
+				/* call driver API to send packet to gswip dma */
+				if (forward == 0) {
+
+#if (defined (DLRX_GRX330_BOARD_CFG) && (DLRX_GRX330_BOARD_CFG == 1))
+#else
+#if	 OPTIMIZE_PERF
+#else
+					dre_dma_unmap((unsigned int)(rxpb_buf_ptr + MAX_INV_HEADER_LEN), HTT_RX_BUF_SIZE - MAX_INV_HEADER_LEN);
+#endif
+#endif
+					driver_status = ppa_dl_dre_gswip_dma_send(vap, rxpb_buf_ptr, data_ptr, msdu_length, release_bit, pmac_hdr_ptr , 0);
+					/*printk(" data ptr 0x%x  data : 0x%x    0x%x	 0x%x   0x%x  0x%x  0x%x  \n",  \
+											  (unsigned int)data_ptr, *((unsigned int *)data_ptr), *((unsigned int *)data_ptr+1),*((unsigned int *)data_ptr+2),*((unsigned int *)data_ptr+3),*((unsigned int *)data_ptr+4), *((unsigned int *)data_ptr+5)); */
+
+				} else /* already unmapped */
+					driver_status = ppa_dl_dre_gswip_dma_send(vap, rxpb_buf_ptr, data_ptr, msdu_length, release_bit, pmac_hdr_ptr, 1);
+
+				mib_update_vap_gswip_data(msdu_length);
+			}
+		}
+	}
+
+	if (driver_status == -1) {   /* Step 13, Step 17, Step 19, Step 21 */
+		/* update drop mib counter */
+		mib_update_vap_dlrx_data(msdu_length, DMA_TX_CHANNEL_FULL);
+	}
+
+	/* Step 24 */
+	rxpb_write_free_buffer_to_rxpb_ptr_ring(NEW_RXPB_PTR);
+}
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_reorder_buffering_process.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_reorder_buffering_process.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_reorder_buffering_process.c
@@ -0,0 +1,391 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <asm/addrspace.h>
+#include <linux/kernel.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_inl_fns.h"
+#include "../include/dlrx_fw_macro_adaptor.h"
+
+extern int ppa_dl_dre_wlan_pkt_send(unsigned int rxpb_ptr, unsigned int data_len, unsigned int pktstatus,
+				    unsigned int msg_ptr, unsigned int vap_id, unsigned int flags);
+
+/********************************************************************************
+//      Function name: dlrx_reorder_buffering_process
+//      Description  : Perform the dlrx reorder buffering process
+//      Parameters   : ce5_buf_ptr : Message buffer pointer
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_get_ind_msg_mpdu_data_offset
+//                     dlrx_get_cfg_offset_atten_in_dwords
+//                     dlrx_get_current_rxpb_buf_ptr
+//                     dlrx_get_fw_rx_desc_byte_data
+//                     mib_update_mpdu_msdu_counters
+//                     mib_update_vap_dlrx_data
+//                     dlrx_add_outgoing_data_to_rxpb_buffer
+//                     ro_list_add_data
+//                     rxpb_write_free_buffer_to_rxpb_ptr_ring
+//
+//      Notes        : Make sure the peer, ext_tid, peer_vld,rxpb_ptr_read_index
+//                     cfg_num_rxpb_ptr_ring, is set to the correct value in the
+//                     context structure before calling this function. Check the
+//                     notes of functions called for complete list to be set
+//                     in the context.
+********************************************************************************/
+void dlrx_reorder_buffering_process(unsigned int *ce5_buf_ptr)
+{
+	/* Step 6 */
+	unsigned int msdu_index = 0;  /* This should to initialized to zero here */
+	/* Step 7 */
+	unsigned int msdu_mpdu_index = 0; /* This should to initialized to zero here */
+	unsigned int mpdu_data_offset, mpdu_range_index, mpdu_range_num;
+	unsigned int peer, ext_tid, seq_id = 0, peer_vld;
+	unsigned int rxpb_ptr_read_index;
+	unsigned int *base_ptr, *rxpb_buf_ptr = NULL;
+	unsigned int total_msdus, last_msdu = 0, msdu_number_debug_count = 0;
+	unsigned int msdu_chained = 0;
+	unsigned int seq_id_mask;
+	unsigned int *seq_mask_base = DLRX_DDR_SEQ_MASK_BASE;
+
+	mpdu_data_offset = dlrx_get_ind_msg_mpdu_data_offset(ce5_buf_ptr);
+
+	mpdu_range_num = DLRX_IND_MSG_mpdu_ranges_num_get_indirect(ce5_buf_ptr, 0);
+	peer = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	ext_tid = DLRX_CTXT_MSG_ext_tid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	peer_vld = DLRX_CTXT_MSG_peer_vld_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	seq_id_mask = seq_mask_base[(peer * 16) + ext_tid];
+
+	if ((seq_id_mask == 0) || (seq_id_mask > 0x40))
+		seq_id_mask = 0x40;
+
+	seq_id_mask--;
+
+	DLRX_CTXT_MSG_msdu_index_set_indirect(DLRX_CTXT_MSG_BASE, 0, msdu_index);
+	total_msdus = DLRX_IND_MSG_fw_rx_desc_byte_num_get_indirect(ce5_buf_ptr, 0);
+
+	base_ptr = (unsigned int *)((uint8_t *)ce5_buf_ptr + sizeof(dlrx_ind_msg_t) + mpdu_data_offset);
+
+	/* Step 5 , step 30 and step 31 */
+	for (mpdu_range_index = 0; mpdu_range_index < mpdu_range_num; mpdu_range_index++) {
+		unsigned int *temp_ptr;
+		unsigned int mpdu_status;
+		unsigned int mpdu_index;
+
+		unsigned int mpdu_cnt = 0;
+
+		/* Step 9 : Get MPDU status and MPDU count */
+		temp_ptr = base_ptr + mpdu_range_index;
+		mpdu_cnt = CTXT_MPDU_mpdu_cnt_mpdu_range0_get_indirect(temp_ptr, 0);
+		mpdu_status = CTXT_MPDU_mpdu_status_mpdu_range0_get_indirect(temp_ptr, 0);
+
+		DLRX_CTXT_MSG_mpdu_cnt_set_indirect(DLRX_CTXT_MSG_BASE, 0, mpdu_cnt);
+		DLRX_CTXT_MSG_mpdu_status_set_indirect(DLRX_CTXT_MSG_BASE, 0, mpdu_status);
+
+#if DL_BAND_STEERING
+
+		if ((mpdu_status == MPDU_STATUS_SUCCESS) && peer) {
+			unsigned int peer_id;
+			peer_id = DLRX_IND_MSG_peer_id_get_indirect(ce5_buf_ptr, 0);
+			ppa_dl_dre_peer_act_fn(peer_id);
+		}
+
+#endif
+
+		/* Step 8 , Step 28 and Step 29 */
+		for (mpdu_index = 0; mpdu_index < mpdu_cnt; mpdu_index++) {
+			unsigned int msdu_length = 0;
+			unsigned int first_msdu = 0;
+			unsigned int msdu_chain_num;
+
+			msdu_mpdu_index = 0;  /* Reset msdu_mpdu_index (step 28) */
+			msdu_chain_num = 0;
+			msdu_chained = 0;
+
+			while (1) {
+#if defined(USE_CACHED_ADDR) && USE_CACHED_ADDR
+				rxpb_buf_ptr = (unsigned int *)(dlrx_get_current_rxpb_buf_ptr());
+				rxpb_buf_ptr = (unsigned int *)CACHE_ADDR((unsigned int)rxpb_buf_ptr);
+
+				if (DLRX_CFG_GLOBAL_dlrx_enable_get_indirect(DLRX_CFG_GLOBAL_BASE, 0) == 0xf)
+
+					/*	if(	mpdu_status == MPDU_STATUS_SUCCESS ) */
+					printk("ce5buf 0x%x RXPB ADD 0x%x  mpdu_status : 0x%x  mpdu_cnt :0x%x    peer : 0x%x  peer_id : 0x%x  peer_vld:0x%x  \n",  \
+					       (unsigned int)ce5_buf_ptr, (unsigned int)rxpb_buf_ptr, mpdu_status, mpdu_cnt, peer, DLRX_IND_MSG_peer_id_get_indirect(ce5_buf_ptr, 0), peer_vld);
+
+				dre_dma_unmap((unsigned int)rxpb_buf_ptr, MAX_INV_HEADER_LEN);
+
+#else
+				rxpb_buf_ptr = (unsigned int *)UNCACHE_ADDR((unsigned int *)dlrx_get_current_rxpb_buf_ptr());
+#endif
+
+				if (msdu_chain_num == 0) {
+					unsigned int time_out_index;
+
+					for (time_out_index = 0; time_out_index < 0x8000000; time_out_index++) {
+						if (DLRX_RXPB_HDR_msdu_load_status_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS))
+							break;
+					}
+
+					if (time_out_index) {
+						unsigned int rxpb_ptr_write_index;
+
+						rxpb_ptr_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+						printk("Time out index value: %u  ce5_buf_ptr: 0x%x rxpb_buf_ptr: 0x%x (Read_idx *4): 0x%x (write_idx *4): 0x%x\n", \
+						       time_out_index, (unsigned int)ce5_buf_ptr, (unsigned int)rxpb_buf_ptr, (rxpb_ptr_read_index * 4), (rxpb_ptr_write_index * 4));
+						global_debug_flag = 1;
+#if defined(DRE_DBG_PRINT_ENABLE) && DRE_DBG_PRINT_ENABLE
+
+						dlrx_generate_debug(1);
+#endif
+						return;
+					}
+
+					/*clear msdu_done */
+					DLRX_RXPB_HDR_msdu_load_status_clear_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+					msdu_length = DLRX_RXPB_HDR_msdu_len_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+					first_msdu = DLRX_RXPB_HDR_first_msdu_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+					last_msdu = DLRX_RXPB_HDR_last_msdu_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+					msdu_chain_num = DLRX_RXPB_HDR_msdu_chain_num_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+					if (msdu_chain_num) {
+						msdu_number_debug_count++;
+						msdu_chain_num++;
+						/* TODO: Add code to count this status in the MIB */
+						mpdu_status = MSDU_STATUS_CHAIN_MSDU_DROP;
+						DLRX_CTXT_MSG_mpdu_status_set_indirect(DLRX_CTXT_MSG_BASE, 0, mpdu_status);
+						msdu_chained = 1;
+
+						mib_update_chained_mpdu(0);
+					}
+				}
+
+				if (first_msdu) {
+					/* Setting seq_id here as it is valid when it is the first msdu */
+					seq_id = (DLRX_RXPB_HDR_seqid_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS)) & seq_id_mask;   /* Since seqid is between 0-63 , AND with the value of seq_id_mask */
+					DLRX_CTXT_MSG_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, seq_id);
+
+					/* Step 10 */
+					mib_update_status_counters(UPDATE_MPDU_MIB, mpdu_status);
+					first_msdu = 0;  /* Need to set this to zero here to handle the case where first msdu is a part of a chain */
+				}
+
+				DLRX_CTXT_MSG_msdu_mpdu_index_set_indirect(DLRX_CTXT_MSG_BASE, 0, msdu_mpdu_index);
+
+				if ((mpdu_status != MPDU_STATUS_INVALID_PEER) && (mpdu_status != MPDU_STATUS_TKIP_MIB_ERROR) \
+				    && peer_vld) {
+					if ((mpdu_status == MPDU_STATUS_SUCCESS) && (ext_tid < NUM_TID)) {
+
+						unsigned int discard, forward, inspect;
+
+#if TEST_GRX350
+						{
+							unsigned int rx_atten;
+							unsigned int rxpb_ptr_write_index;
+
+							rx_atten = *(rxpb_buf_ptr + CFG_OFFSET_ATTEN_IN_DWORDS);
+
+							if (rx_atten & 0xf0000) {
+
+								rxpb_ptr_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+								printk("packet error  rx_atten: 0x%x  ce5_buf_ptr: 0x%x rxpb_buf_ptr: 0x%x (Read_idx): 0x%x (write_idx): 0x%x\n", \
+								       rx_atten, (unsigned int)ce5_buf_ptr, (unsigned int)rxpb_buf_ptr, rxpb_ptr_read_index, rxpb_ptr_write_index);
+							}
+
+						}
+#endif
+
+						dlrx_get_fw_rx_desc_byte_data(ce5_buf_ptr);
+						discard = DLRX_CTXT_MSG_discard_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+						forward = DLRX_CTXT_MSG_forward_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+						inspect = DLRX_CTXT_MSG_inspect_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+						mib_update_success_status_counters(UPDATE_MSDU_MIB);
+						/* Step 13 to 16 */
+						mib_update_vap_dlrx_data(msdu_length, 0);
+
+						if (inspect) {
+							/*Step 19 */
+							ro_list_prepare_rxpb_buf_and_add_to_ro_list(ce5_buf_ptr, rxpb_buf_ptr, INSPECT_BIT_DATA);
+						} else if ((discard && forward) || (!discard && !forward)) {
+							/*Step 18 */
+							ro_list_prepare_rxpb_buf_and_add_to_ro_list(ce5_buf_ptr, rxpb_buf_ptr, ONE_PMAC_DATA);
+						} else if (discard && !forward) {
+							/* Not defined in spec flowchart */
+							rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_RXPB_PTR);
+							mib_update_chained_mpdu(2);
+						} else if (!discard && forward) {
+							/* step 17 */
+							ro_list_prepare_rxpb_buf_and_add_to_ro_list(ce5_buf_ptr, rxpb_buf_ptr, TWO_PMAC_DATA);
+						}
+					} else {
+						/* Step 11 */
+						mib_update_status_counters(UPDATE_MSDU_MIB, mpdu_status);
+
+						/* Step 20 */
+						rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_RXPB_PTR);
+
+						mib_update_chained_mpdu(4);
+					}
+				} else {
+					/* Step 11 */
+					mib_update_status_counters(UPDATE_MSDU_MIB, mpdu_status);
+
+					if (!peer_vld) {
+						/* Not defined in spec. */
+#if 0
+						rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_RXPB_PTR);
+						mib_update_chained_mpdu(6);
+#else
+
+						if (mpdu_status == MPDU_STATUS_INVALID_PEER) {
+							int driver_status;
+							unsigned int vap;
+							unsigned int flags = 0;
+							unsigned int padding_bytes = 0;
+
+							vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+							/* Step 12 here */
+							dlrx_add_outgoing_data_to_rxpb_buffer(rxpb_buf_ptr, INSPECT_BIT_DATA);
+
+							if (g_qca_hw == BEELINER_BOARD)
+								padding_bytes = DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_indirect((unsigned int *)rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+							flags = ((padding_bytes << 16) | 0);   /* Store the padding bytes value in the upper 16 bits for driver usage and last bit to indicate if inspect is 1 or 0 */
+
+							/*call driver API to send packet to wlan dma */
+							driver_status = ppa_dl_dre_wlan_pkt_send((unsigned int)rxpb_buf_ptr, msdu_length, mpdu_status, (unsigned int)ce5_buf_ptr, vap, flags);
+
+							if (driver_status == -1) { /*DMA descriptor is full */
+								/* Case when DMA descriptor is full */
+								mib_update_vap_dlrx_data(msdu_length, DMA_TX_CHANNEL_FULL);
+								mib_update_status_counters(0, MSDU_STATUS_ERROR_5_DROP);
+							}
+
+							rxpb_write_free_buffer_to_rxpb_ptr_ring(NEW_RXPB_PTR);
+						} else {
+							rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_RXPB_PTR);
+							mib_update_chained_mpdu(6);
+						}
+
+#endif
+					} else {
+						int driver_status;
+						unsigned int vap;
+						unsigned int flags = 0;
+						unsigned int padding_bytes = 0;
+
+						vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+						/* Step 12 here */
+						dlrx_add_outgoing_data_to_rxpb_buffer(rxpb_buf_ptr, INSPECT_BIT_DATA);
+
+						if (g_qca_hw == BEELINER_BOARD)
+							padding_bytes = DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_indirect((unsigned int *)rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+						flags = ((padding_bytes << 16) | 0);   /* Store the padding bytes value in the upper 16 bits for driver usage and last bit to indicate if inspect is 1 or 0 */
+
+						/*call driver API to send packet to wlan dma */
+						driver_status = ppa_dl_dre_wlan_pkt_send((unsigned int)rxpb_buf_ptr, msdu_length, mpdu_status, (unsigned int)ce5_buf_ptr, vap, flags);
+
+						if (driver_status == -1) { /*DMA descriptor is full */
+							/* Case when DMA descriptor is full */
+							mib_update_vap_dlrx_data(msdu_length, DMA_TX_CHANNEL_FULL);
+
+							if (mpdu_status == MPDU_STATUS_INVALID_PEER)
+								mib_update_status_counters(0, MSDU_STATUS_ERROR_5_DROP);
+
+							printk("%s : %d : LTQ11ACOL OFFLOAD - DMA descriptor full: mpdu_status = %d\n", __func__, __LINE__, mpdu_status);
+						}
+
+						rxpb_write_free_buffer_to_rxpb_ptr_ring(NEW_RXPB_PTR);
+					}
+				}
+
+				*(rxpb_buf_ptr - 2) = (unsigned int)ce5_buf_ptr;
+
+				/* Step 24 */
+				msdu_index++;
+				DLRX_CTXT_MSG_msdu_index_set_indirect(DLRX_CTXT_MSG_BASE, 0, msdu_index);
+				/* Step 25 */
+				rxpb_ptr_read_index++;
+				rxpb_ptr_read_index = (rxpb_ptr_read_index % GET_NUM_RXPB_PTR_RING);    /* Wrap around to zero if max number reached */
+				DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_set_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0, rxpb_ptr_read_index);
+
+				/* Step 26 */
+				if (!msdu_chain_num) {
+					msdu_mpdu_index++; /* No need to set context here as it will be set if the loop is continued */
+					msdu_number_debug_count++;
+				} else {
+					msdu_chain_num--;
+
+					if (!msdu_chain_num) { /* Restore back the original MPDU status */
+						mpdu_status = CTXT_MPDU_mpdu_status_mpdu_range0_get_indirect(temp_ptr, 0);
+						DLRX_CTXT_MSG_mpdu_status_set_indirect(DLRX_CTXT_MSG_BASE, 0, mpdu_status);
+					}
+				}
+
+				/* Step 27 */
+				if (last_msdu == 1) {
+					if (msdu_chain_num == 0) { /* Add the number of msdu to the reorder mainlist only if msdu_mpdu_index is not 0. */
+						if (msdu_mpdu_index) {
+							unsigned int *temp_mainlist_data_ptr;
+							/* Update the number of MSDU for this sequence ID : Not defined in new spec */
+							temp_mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer * NUM_TID) + ext_tid)); /* Offset into the required mainlist entry */
+							DLRX_RO_MAINLIST_msdu_num_set_indirect(temp_mainlist_data_ptr, seq_id, (msdu_mpdu_index));   /* Number of MSDU data */
+						}
+
+						if (msdu_chained) {
+							dre_print("msdu_chained : seq_Id=0x%x  msdu_mpdu_index=0x%x", seq_id, msdu_mpdu_index);
+							ro_list_reset_a_tid_seqid(peer, ext_tid, seq_id, RECYCLE_RXPB);
+						}
+
+						break;
+					}
+				}
+			}
+		}
+	}
+
+#if TEST_GRX350
+
+	if (msdu_number_debug_count != total_msdus && total_msdus != 0) {
+		printk("*****MSDU Count not matching !!!! ***** \n");
+		printk("ce5_bufptr: 0x%x next rxpb_ptr_read_idx: %u  Debug_count: %u total_msdu: %u curr_rxpb_ptr: 0x%x\n", (unsigned int)ce5_buf_ptr, rxpb_ptr_read_index, msdu_number_debug_count, total_msdus, (unsigned int)rxpb_buf_ptr);
+		printk("last_msdu: %u  ; msdu_chained : %u msdu_mpdu_index: %u  \n", 	last_msdu,   msdu_chained, msdu_mpdu_index);
+		global_debug_flag = 1;
+#if defined(DRE_DBG_PRINT_ENABLE) && DRE_DBG_PRINT_ENABLE
+		dlrx_generate_debug(0);
+#endif
+
+	}
+
+#endif
+}
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_ro_list_fns.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_ro_list_fns.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_ro_list_fns.c
@@ -0,0 +1,462 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_fw_macro_adaptor.h"
+
+/**********************************************************************************
+//      Function name: ro_list_add_data
+//      Description  : Add the data to the ro main and link list
+//      Parameters   : ce5_buf_ptr : Message buffer pointer
+//                     rxpb_buf_ptr : packet buffer pointer  ( Virtual address)
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_get_cfg_offset_atten_in_dwords
+//                     ro_linklist_get_free_ro_desc
+//
+//      Notes        : Make sure the cfg_badr_ro_linklist, peer, seq_id, ext_tid,
+//                     msdu_mpdu_index, prev_ro_des_index, discard, forward and inspect
+//                     data is set to the correct value in the context structure before
+//                     calling this function. Check the notes of functions called
+//                     for complete list to be set in the context.
+**********************************************************************************/
+unsigned int ro_list_add_data(unsigned int *ce5_buf_ptr, unsigned int *rxpb_buf_ptr)
+{
+	unsigned int temp_cur_ro_des_index;
+	unsigned int *temp_linklist_data_ptr;
+	unsigned int *temp_mainlist_data_ptr;
+	unsigned int temp_prev_ro_des_index;
+	unsigned int peer;
+	unsigned int seq_id;
+	unsigned int msdu_mpdu_index;
+	unsigned int ext_tid;
+	unsigned int msdu_length;
+	unsigned int pn_dw0;
+	unsigned int pn_dw1;
+	unsigned int pn_dw2;
+	unsigned int pn_dw3;
+	unsigned int discard;
+	unsigned int forward;
+	unsigned int inspect;
+	unsigned int mcast_bcast;
+	unsigned int sec_type;
+
+	/*step 21 in Page no. 23 of CPU_11AC_ACC_DES.pdf*/
+	temp_cur_ro_des_index = ro_linklist_get_free_ro_desc();
+
+	if (temp_cur_ro_des_index == NULL_PTR)
+		return 0;
+
+	DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_des_index);
+	sec_type = DLRX_CTXT_MSG_sec_type_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + temp_cur_ro_des_index);
+
+	if (sec_type != SEC_TYPE_DISABLE) { /* Step 5, In spec present in wrong place should be between step 7 and 8*/
+		pn_dw0      = DLRX_RXPB_HDR_pn_31_0_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		pn_dw1      = (DLRX_RXPB_HDR_pn_63_48_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS) << B_DLRX_RXPB_HDR_pn_63_48) | \
+			      DLRX_RXPB_HDR_pn_47_32_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		pn_dw2      = DLRX_RXPB_HDR_pn_95_64_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		pn_dw3      = DLRX_RXPB_HDR_pn_127_96_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		DLRX_RO_LINKLIST_pn_dw0_set_indirect(temp_linklist_data_ptr, 0, pn_dw0);
+		DLRX_RO_LINKLIST_pn_dw1_set_indirect(temp_linklist_data_ptr, 0, pn_dw1);
+		DLRX_RO_LINKLIST_pn_dw2_set_indirect(temp_linklist_data_ptr, 0, pn_dw2);
+		DLRX_RO_LINKLIST_pn_dw3_set_indirect(temp_linklist_data_ptr, 0, pn_dw3);
+	}
+
+	/* TODO: To optimize further*/
+	msdu_length = DLRX_RXPB_HDR_msdu_len_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+	mcast_bcast = DLRX_RXPB_HDR_mcast_bcast_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+	discard     = DLRX_CTXT_MSG_discard_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	forward     = DLRX_CTXT_MSG_forward_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	inspect     = DLRX_CTXT_MSG_inspect_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	DLRX_RO_LINKLIST_discard_set_indirect(temp_linklist_data_ptr, 0, discard);
+	DLRX_RO_LINKLIST_fwd_set_indirect(temp_linklist_data_ptr, 0, forward);
+	DLRX_RO_LINKLIST_inspect_set_indirect(temp_linklist_data_ptr, 0, inspect);
+	DLRX_RO_LINKLIST_msdu_len_set_indirect(temp_linklist_data_ptr, 0, msdu_length);
+	DLRX_RO_LINKLIST_rxpb_ptr_set_indirect(temp_linklist_data_ptr, 0, (unsigned int)rxpb_buf_ptr);
+	DLRX_RO_LINKLIST_next_ptr_set_indirect(temp_linklist_data_ptr, 0, NULL_PTR);
+
+	/* TODO: Change all the fixed values to be read in higher level function and passed as a parameter to this function*/
+	peer = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	seq_id = DLRX_CTXT_MSG_seqid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	ext_tid = DLRX_CTXT_MSG_ext_tid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	msdu_mpdu_index = DLRX_CTXT_MSG_msdu_mpdu_index_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (msdu_mpdu_index == 0) { /* Step 22 in Page no. 23 of CPU_11AC_ACC_DES.pdf*/
+		unsigned int original_1st_des_idx;
+
+		temp_mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer * NUM_TID) + ext_tid)); /* Offset into the required mainlist entry*/
+
+		original_1st_des_idx = DLRX_RO_MAINLIST_first_ptr_get_indirect(temp_mainlist_data_ptr, seq_id);  /* First pointer data*/
+
+		if (original_1st_des_idx != NULL_PTR) {
+			dre_print("original link list not empty temp_mainlist_data_ptr=0x%x original_1st_des_idx=0x%x", temp_mainlist_data_ptr, original_1st_des_idx);
+			ro_list_reset_a_tid_seqid(peer, ext_tid, seq_id, RECYCLE_RXPB);
+		}
+
+		DLRX_RO_MAINLIST_first_ptr_set_indirect(temp_mainlist_data_ptr, seq_id, temp_cur_ro_des_index);    /* First pointer data*/
+		DLRX_RO_MAINLIST_mcast_bcast_set_indirect(temp_mainlist_data_ptr, seq_id, mcast_bcast);    /* mcast bcast data*/
+		DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_des_index);
+	} else { /* Step 23 in Page no. 23 of CPU_11AC_ACC_DES.pdf*/
+		temp_prev_ro_des_index = DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+		temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + temp_prev_ro_des_index);  /* Offset into the required linklist entry*/
+
+		DLRX_RO_LINKLIST_next_ptr_set_indirect(temp_linklist_data_ptr, 0, temp_cur_ro_des_index);
+		DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_des_index);
+	}
+
+	return 1;
+}
+
+/**********************************************************************************
+//      Function name: ro_linklist_get_free_ro_desc
+//      Description  : Get a free reorder linklist pointer
+//      Parameters   : None
+//      Functions called by this module:
+//                     None
+//      Return value : Free reorder linklist pointer
+//      Notes        : Make sure the ro_des_free_head_index, free_num_ro_linklist,
+//                     cfg_badr_ro_linklist data is set to the correct value in the
+//                     context structure before calling this function. Check the notes
+//                     of functions called for complete list to be set in the context.
+**********************************************************************************/
+unsigned int ro_linklist_get_free_ro_desc(void)
+{
+	unsigned int ro_des_free_index;
+	unsigned int *temp_linklist_data_ptr;
+	unsigned int temp_next_free_head_index;
+	unsigned int free_num_ro_linklist;
+
+	free_num_ro_linklist = DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+
+	if (free_num_ro_linklist == 0) {
+		return NULL_PTR;   /* No free reorder descriptor*/
+	}
+
+	ro_des_free_index = DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+
+	temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + ro_des_free_index);  /* Offset into the required linklist entry*/
+
+	temp_next_free_head_index = DLRX_RO_LINKLIST_next_ptr_get_indirect(temp_linklist_data_ptr, 0);
+	DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_next_free_head_index);
+
+	/* Reduce the number of free linklist*/
+	free_num_ro_linklist--;
+	DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, free_num_ro_linklist);
+
+	return ro_des_free_index;
+}
+
+/**************************************************************************************
+//      Function name: ro_list_release_data
+//      Description  : Release data from the RO link list
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_is_pn_check_fail
+//                     dlrx_send_packet_to_dma_descriptor
+//                     dlrx_copy_last_pn_to_mainlist
+//                     ro_linklist_return_free_ptr
+//      Notes        : Make sure the peer, ext_tid, mpdu_index, cfg_badr_ro_mainlist,
+//                     cfg_badr_ro_linklist , sec_type and pn_pass
+//                     is set to the correct value in the context structure before
+//                     calling this function. Check the notes of functions called
+//                     for complete list to be set in the context.
+**************************************************************************************/
+void ro_list_release_data(unsigned int ce5_buf_ptr)
+{
+	unsigned int *temp_mainlist_data_ptr = 0;
+	unsigned int *temp_linklist_data_ptr = 0;
+	unsigned int temp_cur_ro_desc_index = 0;
+	unsigned int mpdu_index;
+	unsigned int first_msdu = 1;    /* Step 1*/
+	unsigned int msdu_length;
+	unsigned int sec_type;
+	unsigned int next_ptr_index_to_process = NULL_PTR;
+
+	mpdu_index = DLRX_CTXT_MSG_mpdu_index_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	while (1) {
+		/* Step 2*/
+		if (first_msdu) {
+			unsigned int peer;
+			unsigned int ext_tid;
+
+			peer = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+			ext_tid = DLRX_CTXT_MSG_ext_tid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+			temp_mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer * NUM_TID) + ext_tid)); /* Offset into the required mainlist entry*/
+			temp_cur_ro_desc_index = DLRX_RO_MAINLIST_first_ptr_get_indirect(temp_mainlist_data_ptr, mpdu_index);
+			DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_set_indirect(DLRX_CFG_CTXT_RO_MAINLIST_BASE, 0, (unsigned int)temp_mainlist_data_ptr);
+		} else /* Step 3*/
+			temp_cur_ro_desc_index = next_ptr_index_to_process;
+
+		/* Step 4*/
+		if (temp_cur_ro_desc_index == NULL_PTR)  /* if current ro descriptor pointer in NULL*/
+			break;
+
+		DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_desc_index);
+
+		temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + temp_cur_ro_desc_index);
+		DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, (unsigned int)temp_linklist_data_ptr);
+
+		/* TODO: Change all the fixed values to be read in higher level function and passed as a parameter to this function*/
+		sec_type = DLRX_CTXT_MSG_sec_type_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+		msdu_length = DLRX_RO_LINKLIST_msdu_len_get_indirect(temp_linklist_data_ptr, 0);
+
+		if (first_msdu) {
+			if (sec_type == SEC_TYPE_DISABLE) { /* Step 5, In spec present in wrong place should be between step 7 and 8*/
+				DLRX_CTXT_MSG_pn_pass_set_indirect(DLRX_CTXT_MSG_BASE, 0, 1);
+				/* Call function to step 12*/
+				dlrx_send_packet_to_dma_descriptor(ce5_buf_ptr);
+			} else {
+				if (dlrx_is_pn_check_fail()) {   /* Step 8*/
+					DLRX_CTXT_MSG_pn_pass_set_indirect(DLRX_CTXT_MSG_BASE, 0, 0);
+					/* Step 23*/
+					mib_update_vap_dlrx_data(msdu_length, WRONG_PN_SEQUENCE);
+					/* Step 24*/
+					rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_LL_RXPB_PTR);
+				} else {
+					unsigned int mcast_bcast;
+
+					mcast_bcast = DLRX_RO_MAINLIST_mcast_bcast_get_indirect(temp_mainlist_data_ptr, mpdu_index);;
+
+					if (mcast_bcast == 0) {
+						unsigned int pn_last_bit;
+
+						/*Unicast*/
+						pn_last_bit = (DLRX_RO_LINKLIST_pn_dw0_get_indirect(temp_linklist_data_ptr, 0) & 0x01);
+
+						if ((sec_type == SEC_TYPE_PN_48) || \
+						    ((sec_type == SEC_TYPE_PN_128_EVEN)  && (!pn_last_bit)) || \
+						    ((sec_type == SEC_TYPE_PN_128_ODD)  && pn_last_bit)) {    /* Step 9 and step 10*/
+							/* step 11*/
+							DLRX_CTXT_MSG_pn_pass_set_indirect(DLRX_CTXT_MSG_BASE, 0, 1);
+							dlrx_copy_last_pn_to_mainlist();
+							/* call function to step 12*/
+							dlrx_send_packet_to_dma_descriptor(ce5_buf_ptr);
+						} else {
+							DLRX_CTXT_MSG_pn_pass_set_indirect(DLRX_CTXT_MSG_BASE, 0, 0);
+							/* Step 23*/
+							mib_update_vap_dlrx_data(msdu_length, WRONG_PN_SEQUENCE);
+							/* Step 24*/
+							rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_LL_RXPB_PTR);
+						}
+					} else { /* Not defined in spec*/
+						DLRX_CTXT_MSG_pn_pass_set_indirect(DLRX_CTXT_MSG_BASE, 0, 1);
+						dlrx_copy_last_pn_to_mainlist();
+						/* call function to step 12*/
+						dlrx_send_packet_to_dma_descriptor(ce5_buf_ptr);
+					}
+				}
+			}
+		} else {
+			/* Step 6*/
+			if (DLRX_CTXT_MSG_pn_pass_get_indirect(DLRX_CTXT_MSG_BASE, 0)) {
+				/* Call function to step 12*/
+				dlrx_send_packet_to_dma_descriptor(ce5_buf_ptr);
+			} else { /* step 7*/
+				/* Step 23*/
+				mib_update_vap_dlrx_data(msdu_length, WRONG_PN_SEQUENCE);
+				rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_LL_RXPB_PTR);
+			}
+		}
+
+		/* Step 25*/
+		next_ptr_index_to_process = ro_linklist_return_free_ptr(temp_cur_ro_desc_index);
+		/* Add cur_ro_desc_index as prev_ro_des_index in cfg ctxt for debug purposes*/
+		DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_desc_index);
+		/* Step 3*/
+		first_msdu = 0;
+	}
+
+	/* Step 26*/
+	DLRX_RO_MAINLIST_first_ptr_set_indirect(temp_mainlist_data_ptr, mpdu_index, NULL_PTR);
+	/* Not defined in spec.*/
+	DLRX_RO_MAINLIST_msdu_num_set_indirect(temp_mainlist_data_ptr, mpdu_index, 0);    /* Reset the number of MSDU data*/
+	DLRX_RO_MAINLIST_mcast_bcast_set_indirect(temp_mainlist_data_ptr, mpdu_index, 0);    /* Reset the mcast bcast data*/
+}
+
+/*******************************************************************************
+//      Function name: ro_linklist_return_free_ptr
+//      Description  : Free a reorder linklist pointer
+//      Parameters   : ro_des_free_ptr - Free pointer to be released
+//      Return value : Next free pointer to process
+//      Functions called by this module:
+//                     None
+//      Notes        : 1. Make sure the ro_des_free_tail_index free_num_ro_linklist and
+//                     cfg_badr_ro_linklist is set to the correct value in the context
+//                     structure before calling this function. Check the notes of functions
+//                     called for complete list to be set in the context.
+//                    2. The pointer to be freed is added as the head in this function to increase the cache hits.
+//                        The spec however defines the pointer to be freed to be added to the tail
+*******************************************************************************/
+unsigned int ro_linklist_return_free_ptr(unsigned int ro_des_free_ptr)
+{
+	unsigned int temp_free_head_index;
+	unsigned int *temp_linklist_data_ptr;
+	unsigned int free_num_ro_linklist;
+	unsigned int next_ptr_index_to_process;
+
+	temp_free_head_index = DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+	free_num_ro_linklist = DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+
+	temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + ro_des_free_ptr);  /* Offset into the required linklist entry*/
+	next_ptr_index_to_process = DLRX_RO_LINKLIST_next_ptr_get_indirect(temp_linklist_data_ptr, 0);
+
+	DLRX_RO_LINKLIST_next_ptr_set_indirect(temp_linklist_data_ptr, 0, temp_free_head_index);
+	DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, ro_des_free_ptr);
+
+	/* Increase the number of free linklist*/
+	free_num_ro_linklist++;
+	DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, free_num_ro_linklist);
+	return next_ptr_index_to_process;
+}
+
+/**************************************************************************************
+//      Function name: ro_list_reset
+//      Description  : Reset RO_mainlist and RO_linklist for a particular peer.
+//                     Scan RO_mainlist and RO_linklist of
+//                     all TID and seqid of this peer. Free all valid packet buffer
+//                     pointer used. Free used RO_linklist entry.
+//      Parameters   : peer
+//      Return value : None
+//      Functions called by this module:
+//                     ro_list_reset_a_tid_seqid
+//      Notes        : Check the notes of functions called
+//                     for complete list to be set in the context.
+**************************************************************************************/
+void ro_list_reset(unsigned int peer)
+{
+	unsigned int ext_tid = 0;
+	unsigned int mpdu_index = 0;
+
+	for (ext_tid = 0; ext_tid < NUM_TID; ext_tid++) {
+		for (mpdu_index = 0; mpdu_index < NUM_SEQ_ID; mpdu_index++) {
+			dre_print("ro_list_reset  mpdu_index=0x%x", mpdu_index);
+			ro_list_reset_a_tid_seqid(peer, ext_tid, mpdu_index, RECYCLE_RXPB);
+		}
+	}
+
+}
+
+/**************************************************************************************
+//      Function name: ro_list_reset_a_tid_seqid
+//      Description  : Reset RO_mainlist and RO_linklist for a particular
+//                     ext_tid and mpdu_index (seqid).
+//                     Free all valid packet buffer pointer used.
+//                     Free used RO_linklist entry.
+//      Parameters   : peer, ext_tid, mpdu_index
+//      Return value : None
+//      Functions called by this module:
+//                     rxpb_write_free_buffer_to_rxpb_ptr_ring
+//                     ro_linklist_return_free_ptr
+//      Notes        : Make sure the cfg_badr_ro_mainlist and cfg_badr_ro_linklist
+//                     is set to the correct value in the context structure before
+//                     calling this function. Check the notes of functions called
+//                     for complete list to be set in the context.
+**************************************************************************************/
+void ro_list_reset_a_tid_seqid(unsigned int peer, unsigned int ext_tid, unsigned int mpdu_index, unsigned int rxpb_release_type)
+{
+	unsigned int *temp_mainlist_data_ptr = 0;
+	unsigned int *temp_linklist_data_ptr = 0;
+	unsigned int temp_cur_ro_desc_index = 0;
+	unsigned int first_msdu = 1;    /* Step 1*/
+	unsigned int next_ptr_index_to_process = NULL_PTR;
+
+	while (1) {
+		/* Step 2*/
+		if (first_msdu) {
+			temp_mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer * NUM_TID) + ext_tid)); /* Offset into the required mainlist entry*/
+			temp_cur_ro_desc_index = DLRX_RO_MAINLIST_first_ptr_get_indirect(temp_mainlist_data_ptr, mpdu_index);
+			DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_set_indirect(DLRX_CFG_CTXT_RO_MAINLIST_BASE, 0, (unsigned int)temp_mainlist_data_ptr);
+		} else /* Step 3*/
+			temp_cur_ro_desc_index = next_ptr_index_to_process;
+
+		/* Step 4*/
+		if (temp_cur_ro_desc_index == NULL_PTR)  /* if current ro descriptor pointer in NULL*/
+			break;
+
+		DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_desc_index);
+
+		temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + temp_cur_ro_desc_index);
+		DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, (unsigned int)temp_linklist_data_ptr);
+
+		if (rxpb_release_type == RECYCLE_RXPB)
+			rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_LL_RXPB_PTR);
+
+#if DLRX_SUPPORT_UNLOAD
+		else {
+			unsigned int rxpb_buf_ptr;
+			rxpb_buf_ptr = VIR_TO_PHY(dlrx_get_ro_ll_rxpb_ptr());
+			ppa_dl_dre_rxpb_buf_free(rxpb_buf_ptr);
+		}
+
+#endif
+
+		/* Step 25*/
+		next_ptr_index_to_process = ro_linklist_return_free_ptr(temp_cur_ro_desc_index);
+		/* Add cur_ro_desc_index as prev_ro_des_index in cfg ctxt for debug purposes*/
+		DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0, temp_cur_ro_desc_index);
+		/* Step 3*/
+		first_msdu = 0;
+	}
+
+	/* Step 26*/
+	DLRX_RO_MAINLIST_first_ptr_set_indirect(temp_mainlist_data_ptr, mpdu_index, NULL_PTR);
+	/* Not defined in spec.*/
+	DLRX_RO_MAINLIST_msdu_num_set_indirect(temp_mainlist_data_ptr, mpdu_index, 0);    /* Reset the number of MSDU data*/
+	DLRX_RO_MAINLIST_mcast_bcast_set_indirect(temp_mainlist_data_ptr, mpdu_index, 0);    /* Reset the mcast bcast data*/
+}
+
+#if DLRX_SUPPORT_UNLOAD
+/**************************************************************************************
+//      Function name: ro_list_clear
+//      Description  : Clear the RO list data
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//                     ro_list_reset_a_tid_seqid
+//      Notes        : None
+**************************************************************************************/
+void ro_list_clear(void)
+{
+	unsigned int peer;
+	unsigned int ext_tid;
+	unsigned int mpdu_index;
+
+	for (peer = 0; peer < NUM_PEER; peer++) {
+		for (ext_tid = 0; ext_tid < NUM_TID; ext_tid++) {
+			for (mpdu_index = 0; mpdu_index < NUM_SEQ_ID; mpdu_index++)
+				ro_list_reset_a_tid_seqid(peer, ext_tid, mpdu_index, RELEASE_RXPB);
+		}
+	}
+}
+#endif   /* #if DLRX_SUPPORT_UNLOAD */
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_flush_msg.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_flush_msg.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_flush_msg.c
@@ -0,0 +1,117 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+
+void dlrx_rx_flush_msg_process(unsigned int *ce5buf_ptr);
+
+extern void msg_mib_inc(unsigned int msg_type);
+extern unsigned int peer_vld_check(unsigned int peer_id);
+extern void dlrx_playout_process(unsigned int ce5_buf_ptr);
+extern void ro_list_reset(unsigned int peer);
+extern int ppa_dl_dre_wlan_msg_send(unsigned int msg_type, unsigned int msg_ptr, unsigned int msg_len, unsigned int flags);
+
+/*************************************************************************
+// Module:          dlrx_rx_flush_msg_process
+// Description:     RX Flush Message Processing.
+//                  If ext_tid is invalid, set invalid_tid_peer and
+//                  invalid_tid_req; otherwise check fv and rv flag
+//                  to perform RX Playout Process accordingly.
+// Parameters:      ce5buf_ptr
+// Return value :   None
+// Functions called by this module:
+//                  msg_mib_inc()
+//                  ro_list_reset()
+//                  rx_playout_process()
+// Notes        :   Make sure peer_vld and peer is saved
+//                  to message context prior this function is called.
+//                  Check the notes of functions called for
+//                  complete list to be set in the context.
+*************************************************************************/
+
+void dlrx_rx_flush_msg_process(unsigned int *ce5buf_ptr)
+{
+	unsigned int peer_id, peer_vld, acc_dis;
+	unsigned int ext_tid, peer;
+
+	/*Increment message mib for RX Flush Message */
+	msg_mib_inc(HTT_RX_FLUSH_MSG);
+
+	peer_id = DLRX_FLUSH_MSG_peer_id_get_indirect(ce5buf_ptr, 0);
+
+	/*peer_vld is set if peer_id is within valid range and valid */
+	peer_vld = peer_vld_check(peer_id);
+
+	/*peer, acc_dis and vap are set by peer_vld_check() */
+	/*When peer_vid !=0, acc_dis is not correct value. */
+	acc_dis = DLRX_CTXT_MSG_acc_dis_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (peer_vld && (!acc_dis)) {
+		ext_tid = DLRX_FLUSH_MSG_ext_tid_get_indirect(ce5buf_ptr, 0);
+		DLRX_CTXT_MSG_ext_tid_set_indirect(DLRX_CTXT_MSG_BASE, 0, ext_tid);
+
+		peer    = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+		if (ext_tid == INVALID_TID) {
+			/*Scan RO_mainlist and RO_linklist of all TID and seqid of this peer. */
+			/*Free all valid packet buffer pointer used. Free used RO_linklist entry. */
+			ro_list_reset(peer);
+			msg_mib_inc(HTT_RX_INVALID_TID);
+		} else {
+			unsigned int start_seqid, end_seqid, total_seqid;
+
+			start_seqid = DLRX_FLUSH_MSG_flush_start_seqid_get_indirect(ce5buf_ptr, 0);
+			end_seqid =  DLRX_FLUSH_MSG_flush_end_seqid_get_indirect(ce5buf_ptr, 0);
+
+			/*Note: end_seqid is the sequence number one larger */
+			/*than the sequence number of the last MPDU to check to flush */
+			if (end_seqid > start_seqid)
+				total_seqid = end_seqid - start_seqid;
+			else if (end_seqid == start_seqid)
+				total_seqid = 1;
+			else
+				total_seqid = end_seqid + NUM_SEQ_ID - start_seqid;
+
+			DLRX_CTXT_MSG_start_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, start_seqid);
+			DLRX_CTXT_MSG_total_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, total_seqid);
+
+			/* ce5buf_ptr is passed here for usage by the driver API */
+			dlrx_playout_process((unsigned int) ce5buf_ptr);
+
+		}
+	} else {
+		unsigned int msg_type;
+		unsigned int msg_len;
+
+		msg_type = DLRX_IND_MSG_msg_type_get_indirect(ce5buf_ptr, 0);
+		msg_len = DLRX_CFG_CTXT_CE5DES_msg_len_get_indirect(DLRX_CFG_CTXT_CE5DES_BASE, 0);
+
+		/*Increment message mib for CPU_CE5 */
+		msg_mib_inc(HTT_RX_FLUSH_MSG_WLAN);
+
+		/*call driver API to send message to wlan driver */
+		ppa_dl_dre_wlan_msg_send(msg_type, (unsigned int)ce5buf_ptr, msg_len, 0);
+	}
+}
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_frag_ind_msg.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_frag_ind_msg.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_frag_ind_msg.c
@@ -0,0 +1,102 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_dre_api.h"
+
+void dlrx_rx_frag_ind_msg_process(unsigned int *ce5buf_ptr);
+
+extern void msg_mib_inc(unsigned int msg_type);
+extern unsigned int peer_vld_check(unsigned int peer_id);
+extern void dlrx_playout_process(unsigned int ce5_buf_ptr);
+extern void ro_list_reset(unsigned int peer);
+extern int ppa_dl_dre_wlan_msg_send(unsigned int msg_type, unsigned int msg_ptr, unsigned int msg_len, unsigned int flags);
+
+/*************************************************************************
+// Module:          dlrx_rx_frag_ind_msg_process
+// Description:     RX Fragment Indication Message Processing.
+//                  If peer is valid and acc is enabled, reset this peer;
+//                  pass this message to WLAN driver
+// Parameters:      ce5buf_ptr
+// Return value :   None
+// Functions called by this module:
+//                  msg_mib_inc()
+//                  peer_vld_check()
+//                  ro_list_reset()
+// Notes        :   Check the notes of functions called for
+//                  complete list to be set in the context.
+*************************************************************************/
+
+void dlrx_rx_frag_ind_msg_process(unsigned int *ce5buf_ptr)
+{
+	unsigned int peer_id, peer_vld, acc_dis, vap, sec_type, temp_acc_dis;
+	unsigned int peer;
+	unsigned int rxpb_ptr_read_index;
+	unsigned int msg_type;
+	unsigned int msg_len;
+
+	/*Increment message mib for RX Fragment Indication Message */
+	msg_mib_inc(HTT_RX_FRAG_IND_MSG);
+
+	peer_id = DLRX_FRAG_IND_MSG_peer_id_get_indirect(ce5buf_ptr, 0);
+
+	/*peer_vld is set if peer_id is within valid range and valid */
+	peer_vld = peer_vld_check(peer_id);
+
+	/*peer, acc_dis and vap are set by peer_vld_check() */
+	/*When peer_vid !=0, acc_dis is not correct value. */
+	acc_dis = DLRX_CTXT_MSG_acc_dis_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (peer_vld && (!acc_dis)) {
+		peer    = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+		/*Set acc_dis for this peer */
+		ppa_dl_dre_vapinfo_from_peer(peer, &vap, &sec_type, &temp_acc_dis);
+		ppa_dl_dre_vapinfo_set(peer, vap, sec_type, 1);
+		DLRX_CTXT_MSG_acc_dis_set_indirect(DLRX_CTXT_MSG_BASE, 0, 1);
+
+		/*Scan RO_mainlist and RO_linklist of all TID and seqid of this peer. */
+		/*Free all valid packet buffer pointer used. Free used RO_linklist entry. */
+		ro_list_reset(peer);
+
+	}
+
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	/*Write rxpb_ptr_read_index to the end of message */
+	DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_set_indirect(ce5buf_ptr, 0, rxpb_ptr_read_index);
+
+	/*Increment rxpb_ptr_read_index and check for wraparound */
+	/*Note: number of msdu is always 1 for RX Fragment Indication Message */
+	/*  rxpb_ptr_read_index = (rxpb_ptr_read_index + 1) % GET_NUM_RXPB_PTR_RING; */
+
+	/* DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_set_indirect((unsigned int*)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0, rxpb_ptr_read_index); */
+
+	msg_type = DLRX_IND_MSG_msg_type_get_indirect(ce5buf_ptr, 0);
+	msg_len = DLRX_CFG_CTXT_CE5DES_msg_len_get_indirect(DLRX_CFG_CTXT_CE5DES_BASE, 0);
+
+	/*call driver API to send message to wlan driver */
+	ppa_dl_dre_wlan_msg_send(msg_type, (unsigned int)ce5buf_ptr, msg_len, 0);
+
+}
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_ind_msg.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_ind_msg.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rx_ind_msg.c
@@ -0,0 +1,251 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_inl_fns.h"
+
+/*#include "../include/cycle_counter.h" */
+void dlrx_ind_msg_process(unsigned int *ce5buf_ptr);
+void dlrx_ind_rel_flush_process(unsigned int *ce5buf_ptr);
+unsigned int peer_vld_check(unsigned int peer_id);
+
+extern void msg_mib_inc(unsigned int msg_type);
+extern void dlrx_reorder_buffering_process(unsigned int *ce5_buf_ptr);
+extern void dlrx_playout_process(unsigned int ce5_buf_ptr);
+extern void ro_list_reset(unsigned int peer);
+extern int ppa_dl_dre_wlan_msg_send(unsigned int msg_type, unsigned int msg_ptr, unsigned int msg_len,
+				    unsigned int flags);
+
+/*************************************************************************
+// Module:          dlrx_ind_msg_process
+// Description:     RX Indication Message Processing, based on validity of
+//                  peer, continue processing or send the whole message to
+//                  wlan driver
+// Parameters:      ce5buf_ptr
+// Return value :   None
+// Functions called by this module:
+//                  peer_vld_check()
+//                  dlrx_reorder_buffering_process()
+//                  dlrx_ind_rel_flush_process()
+// Notes        :   rxpb_ptr_read_index should be set correctly by firmware
+//                  when dlrx_main was called previously,
+//                  cfg_num_rxpb_ptr_ring should be set correctly by driver
+//                  . Check the notes of functions called for complete list
+//                  to be set in the context.
+*************************************************************************/
+void dlrx_ind_msg_process(unsigned int *ce5buf_ptr)
+{
+	unsigned int peer_id, peer_vld, acc_dis;
+	unsigned int var_size_rx_desc_byte, variable_size, total_msdu, ext_tid;
+
+/*    CycleCounter_Start(function1_cycles); */
+
+	/*Increment message mib for RX Indication Message */
+	mib_update_rx_ind_msg();
+
+	peer_id = DLRX_IND_MSG_peer_id_get_indirect(ce5buf_ptr, 0);
+
+	/*peer_vld is set if peer_id is within valid range and valid */
+	peer_vld = peer_vld_check(peer_id);
+	/*acc_dis is set by peer_vld_check() */
+	/*When peer_vid !=0, acc_dis is not correct value. */
+	acc_dis = DLRX_CTXT_MSG_acc_dis_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	total_msdu = DLRX_IND_MSG_fw_rx_desc_byte_num_get_indirect(ce5buf_ptr, 0);
+
+	DLRX_CTXT_MSG_total_msdu_set_indirect(DLRX_CTXT_MSG_BASE, 0, total_msdu);
+
+	/*variable_size (dw) = roundup(total_msdu/4) + number of mpdu_ranges */
+	var_size_rx_desc_byte = total_msdu >> 2;
+
+	if (total_msdu % 4)
+		var_size_rx_desc_byte++;
+
+	variable_size  = var_size_rx_desc_byte + DLRX_IND_MSG_mpdu_ranges_num_get_indirect(ce5buf_ptr, 0);
+
+	/*Get ext_tid and save to FW context */
+	ext_tid = DLRX_IND_MSG_ext_tid_get_indirect(ce5buf_ptr, 0);
+	DLRX_CTXT_MSG_ext_tid_set_indirect(DLRX_CTXT_MSG_BASE, 0, ext_tid);
+
+	if (peer_vld && acc_dis) {
+		/*For peer valid but acceleration is disabled */
+		unsigned int msg_type;
+		unsigned int msg_len;
+
+		/*RX indication Message to wlan */
+		unsigned int *buf_end_ptr = ce5buf_ptr + (sizeof(dlrx_ind_msg_t) / 4) + variable_size;
+
+		/*Increment message mib for RX Indication Message to WLAN */
+		msg_mib_inc(HTT_RX_IND_MSG_WLAN);
+
+		/*Write rxpb_ptr_read_index to end of message */
+
+		*buf_end_ptr = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+		/*cpu_ce5des_enq(); */
+
+		msg_type = DLRX_IND_MSG_msg_type_get_indirect(ce5buf_ptr, 0);
+		msg_len = DLRX_CFG_CTXT_CE5DES_msg_len_get_indirect(DLRX_CFG_CTXT_CE5DES_BASE, 0);
+
+		/*call driver API to send message to wlan driver */
+		ppa_dl_dre_wlan_msg_send(msg_type, (unsigned int)ce5buf_ptr, msg_len, 0);
+	} else {
+		/*For peer valid and acceleration enabled/ peer invalid */
+		/* Control can reach here when the peer is not valid however the function */
+		/* dlrx_reorder_buffering_process handles this condition */
+		if ((g_qca_hw == BEELINER_BOARD) || total_msdu)
+			dlrx_reorder_buffering_process(ce5buf_ptr);
+
+		if (!global_debug_flag)
+			dlrx_ind_rel_flush_process(ce5buf_ptr);
+
+	}
+
+	/*  CycleCounter_End(function1_cycles); */
+	return;
+}
+
+/*************************************************************************
+// Module:          peer_vld_check
+// Description:     Check peer_id range and peer_id_vld to determine whether
+//                  the peer is valid or not; also get vap, sec_type
+//                  and acc_dis for this peer.
+// Parameters:      ce5buf_ptr
+// Return value :   peer_vld
+// Functions called by this module:
+//                  None
+// Notes        :   dlrx_cfg_peer_id_to_peer_map and dlrx_cfg_peer_to_vap
+//                  should be configured by driver prior this function is
+//                  called.
+*************************************************************************/
+unsigned int peer_vld_check(unsigned int peer_id)
+{
+	unsigned int peer, vap, sec_type, acc_dis, peer_id_vld;
+	unsigned int peer_vld = 0;
+
+	peer_id_vld = ppa_dl_dre_peer_from_peerid(peer_id, &peer);
+
+	if (peer_id_vld) {
+		ppa_dl_dre_vapinfo_from_peer(peer, &vap, &sec_type, &acc_dis);
+
+		DLRX_CTXT_MSG_peer_set_indirect(DLRX_CTXT_MSG_BASE, 0, peer);
+		DLRX_CTXT_MSG_vap_set_indirect(DLRX_CTXT_MSG_BASE, 0, vap);
+		DLRX_CTXT_MSG_sec_type_set_indirect(DLRX_CTXT_MSG_BASE, 0, sec_type);
+		DLRX_CTXT_MSG_acc_dis_set_indirect(DLRX_CTXT_MSG_BASE, 0, acc_dis);
+
+		if (peer_id < MAX_PEERID_NUM)
+			peer_vld = 1;
+	}
+
+	DLRX_CTXT_MSG_peer_vld_set_indirect(DLRX_CTXT_MSG_BASE, 0, peer_vld);
+
+	return peer_vld;
+
+}
+
+/*************************************************************************
+// Module:          dlrx_ind_rel_flush_process
+// Description:     RX Indication Message Release or Flush Processing.
+//                  If ext_tid is invalid, set invalid_tid_peer and
+//                  invalid_tid_req; otherwise check fv and rv flag
+//                  to perform RX Playout Process accordingly.
+// Parameters:      ce5buf_ptr
+// Return value :   None
+// Functions called by this module:
+//                  msg_mib_inc()
+//                  ro_list_reset()
+//                  rx_playout_process()
+// Notes        :   Make sure ext_tid and peer is saved to message context
+//                  prior this function is called. Check the notes of
+//                  functions called for complete list to be set in the
+//                  context.
+*************************************************************************/
+void dlrx_ind_rel_flush_process(unsigned int *ce5buf_ptr)
+{
+	unsigned int ext_tid, peer;
+	unsigned int fv = 0, rv = 0;
+	unsigned int start_seqid, end_seqid, total_seqid;
+
+	ext_tid = DLRX_CTXT_MSG_ext_tid_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	peer    = DLRX_CTXT_MSG_peer_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (ext_tid == INVALID_TID) {
+		DLRX_CFG_INVALID_TID_peer_set_indirect(DLRX_CFG_INVALID_TID_BASE, 0, peer);
+		DLRX_CFG_INVALID_TID_req_set_indirect(DLRX_CFG_INVALID_TID_BASE, 0, 1);
+
+		/*Scan RO_mainlist and RO_linklist of all TID and seqid of this peer. */
+		/*Free all valid packet buffer pointer used. Free used RO_linklist entry. */
+		ro_list_reset(peer);
+		msg_mib_inc(HTT_RX_INVALID_TID);
+	} else {
+		fv = DLRX_IND_MSG_fv_get_indirect(ce5buf_ptr, 0);
+		rv = DLRX_IND_MSG_rv_get_indirect(ce5buf_ptr, 0);
+
+		/*It is possible to have both fv and rv set, in this case, */
+		/*perform flush first and followed by release */
+		if (fv) {
+			start_seqid = DLRX_IND_MSG_flush_start_seqid_get_indirect(ce5buf_ptr, 0);
+			end_seqid =  DLRX_IND_MSG_flush_end_seqid_get_indirect(ce5buf_ptr, 0);
+
+			/*Note: end_seqid is the sequence number one larger */
+			/*than the sequence number of the last MPDU to check to flush */
+			if (end_seqid > start_seqid)
+				total_seqid = end_seqid - start_seqid;
+			else if (end_seqid == start_seqid)
+				total_seqid = 1;
+			else
+				total_seqid = end_seqid + NUM_SEQ_ID - start_seqid;
+
+			DLRX_CTXT_MSG_start_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, start_seqid);
+			DLRX_CTXT_MSG_total_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, total_seqid);
+
+			/* ce5buf_ptr is passed here for usage by the driver API */
+			dlrx_playout_process((unsigned int) ce5buf_ptr);
+		}
+
+		if (rv) {
+			start_seqid = DLRX_IND_MSG_release_start_seqid_get_indirect(ce5buf_ptr, 0);
+			end_seqid =  DLRX_IND_MSG_release_end_seqid_get_indirect(ce5buf_ptr, 0);
+
+			/*Note: end_seqid is the sequence number one larger */
+			/*than the sequence number of the last MPDU to check to release */
+			if (end_seqid > start_seqid)
+				total_seqid = end_seqid - start_seqid;
+			else if (end_seqid == start_seqid)
+				total_seqid = 1;
+			else
+				total_seqid = end_seqid + NUM_SEQ_ID - start_seqid;
+
+			DLRX_CTXT_MSG_start_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, start_seqid);
+			DLRX_CTXT_MSG_total_seqid_set_indirect(DLRX_CTXT_MSG_BASE, 0, total_seqid);
+
+			/* ce5buf_ptr is passed here for usage by the driver API */
+			dlrx_playout_process((unsigned int) ce5buf_ptr);
+		}
+	}
+
+	return;
+}
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rxpb_fns.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rxpb_fns.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_rxpb_fns.c
@@ -0,0 +1,222 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_fw_macro_adaptor.h"
+
+/**************************************************************************************
+//      Function name: rxpb_write_free_buffer_to_rxpb_ptr_ring
+//      Description  : Write a free buffer to the end of the rx packet buffer
+//                     pointer ring
+//      Parameters   : ce5_buf_ptr : Message buffer pointer
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_get_current_rxpb_buf_ptr
+//                     dlrx_get_ro_ll_rxpb_ptr
+//      Notes        : Make sure the cfg_badr_rxpb_ptr_ring, rxpb_ptr_write_index,
+//                     cfg_badr_rel_msgbuf,pb_ptr_rel_num, cfg_num_rxpb_ptr_ring
+//                     is set to the correct value in the context structure before
+//                     calling this function. Check the notes of functions called
+//                     for complete list to be set in the context.
+**************************************************************************************/
+void rxpb_write_free_buffer_to_rxpb_ptr_ring(rxpb_free_ptr_type free_ptr_type)
+{
+	unsigned int rxpb_buf_ptr = 0;
+	unsigned int rxpb_ptr_write_index;
+	unsigned int rxpb_ring_base_address;
+	unsigned int va_rxpb_buf_ptr;
+	unsigned int *tmp_buf_ptr;
+
+	unsigned int rxpb_ptr_read_index;
+	rxpb_ring_base_address = UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0));
+	rxpb_ptr_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	switch (free_ptr_type) {
+	case RECYCLE_RXPB_PTR:
+		rxpb_buf_ptr = dlrx_get_current_rxpb_buf_ptr();
+#if TEST_GRX350
+		ppa_dl_dre_rxpb_buf_free(rxpb_buf_ptr);
+		rxpb_buf_ptr = VIR_TO_PHY(dlrx_dl_dre_rxpb_buf_alloc());
+#endif
+		break;
+
+	case NEW_RXPB_PTR:
+		rxpb_buf_ptr = VIR_TO_PHY(dlrx_dl_dre_rxpb_buf_alloc());
+		break;
+
+	case RECYCLE_LL_RXPB_PTR:
+		rxpb_buf_ptr = VIR_TO_PHY(dlrx_get_ro_ll_rxpb_ptr());
+#if TEST_GRX350
+		ppa_dl_dre_rxpb_buf_free(rxpb_buf_ptr);
+		rxpb_buf_ptr = VIR_TO_PHY(dlrx_dl_dre_rxpb_buf_alloc());
+#endif
+
+		break;
+
+	default:
+		/* Should not reach here */
+		break;
+	}
+
+	if (!rxpb_buf_ptr)
+		return;
+
+#ifdef USE_CACHED_ADDR
+	va_rxpb_buf_ptr = CACHE_ADDR(rxpb_buf_ptr);
+#else
+	va_rxpb_buf_ptr = UNCACHE_ADDR(rxpb_buf_ptr);
+#endif
+
+/*test only */
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	DLRX_RXPB_HDR_msdu_load_status_clear_indirect((unsigned int *)va_rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+	/* TODO: */
+	dre_dma_map(CACHE_ADDR(rxpb_buf_ptr), MAX_INV_HEADER_LEN);
+
+	tmp_buf_ptr = (unsigned int *)CACHE_ADDR(rxpb_buf_ptr);
+/*	printk("rxpb_ptr_write_index is 0x%x, reset 1st 256 DW to 0 from rxpb_buf_ptr 0x%x \n",rxpb_ptr_write_index,(unsigned int)tmp_buf_ptr); */
+/*#if	 OPTIMIZE_PERF */
+#if 1
+#else
+
+	for (i = 0; i < 480 ; i++)
+		*(tmp_buf_ptr + i) = 0;
+
+	dre_dma_map(CACHE_ADDR(rxpb_buf_ptr), HTT_RX_BUF_SIZE);
+#endif
+	/*printk("phy rxpb_buf_ptr is 0x%x, va_rxpb_buf_ptr is 0x%x  uncached address is 0x%x ,  context is 0x%x , 0x%x, 0x%x ,0x%x \n" ,rxpb_buf_ptr,va_rxpb_buf_ptr ,tmp_buf_ptr, */
+	/*	   *(tmp_buf_ptr),*(tmp_buf_ptr+1),*(tmp_buf_ptr+2) ,*(tmp_buf_ptr+3)); */
+
+/*    printk("rxpb_ptr_write_index 0x%x, read_idx 0x%x free_type %u,rxpb_buf_ptr 0x%x skb 0x%x\n",rxpb_ptr_write_index,rxpb_ptr_read_index,free_ptr_type,(unsigned int)rxpb_buf_ptr,*((unsigned int *)va_rxpb_buf_ptr-1)); */
+	DLRX_RXPB_PTR_RING_rxpb_ptr_set_indirect((unsigned int *)rxpb_ring_base_address, rxpb_ptr_write_index, rxpb_buf_ptr);
+	rxpb_ptr_write_index++;
+	rxpb_ptr_write_index = (rxpb_ptr_write_index % GET_NUM_RXPB_PTR_RING);    /* Wrap around to zero if max number reached */
+
+	tmp_buf_ptr = (unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE);
+	DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_set_indirect(tmp_buf_ptr, 0, rxpb_ptr_write_index);
+}
+
+#if DLRX_SUPPORT_UNLOAD
+
+/**************************************************************************************
+//      Function name: rxpb_find_duplicate_ptr_value
+//      Description  : Find duplicate pointer values in the rxpb ring ans set to 0 if duplicate is found
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//      Notes        : Make sure the cfg_badr_rxpb_ptr_ring, rxpb_ptr_write_index,
+//                         rxpb_ptr_read_index is set to the correct value in the context
+//                         structure before calling this function. Check the notes of functions
+//                         called for complete list to be set in the context.
+**************************************************************************************/
+void rxpb_find_duplicate_ptr_value(void)
+{
+	unsigned int loop_index_1;
+	unsigned int loop_index_2;
+	unsigned int rxpb_ptr;
+	unsigned int temp_rxpb_ptr;
+	unsigned int rxpb_ring_base_address;
+	unsigned int rxpb_write_index;
+	unsigned int rxpb_read_index;
+	unsigned int loop_count;
+	unsigned int rxpb_idx;
+	unsigned int temp_rxpb_idx;
+
+	rxpb_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+	rxpb_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+	rxpb_ring_base_address = UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0));
+
+	/*printk("dlrx_fw_exit : Read index %u  Write index %u\n",rxpb_read_index,rxpb_write_index); */
+	if (rxpb_write_index < rxpb_read_index)
+		loop_count = (GET_NUM_RXPB_PTR_RING + rxpb_write_index) - rxpb_read_index;
+	else
+		loop_count = rxpb_write_index - rxpb_read_index;
+
+	/* Find duplicate pointer values in the rxpb ring ans set to 0 if duplicate is found */
+	for (loop_index_1 = 0; loop_index_1 < loop_count; loop_index_1++) {
+		rxpb_idx = (rxpb_read_index + loop_index_1) % GET_NUM_RXPB_PTR_RING;
+		rxpb_ptr = DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ring_base_address, rxpb_idx);
+
+		for (loop_index_2 = 0; loop_index_2 < loop_count; loop_index_2++) {
+			temp_rxpb_idx = (rxpb_read_index + loop_index_2) % GET_NUM_RXPB_PTR_RING;
+
+			if (temp_rxpb_idx == rxpb_idx)
+				continue;
+
+			temp_rxpb_ptr = DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ring_base_address, temp_rxpb_idx);
+
+			if (temp_rxpb_ptr == rxpb_ptr) {
+				/*printk("Duplicate ptr value found in index %u and %u . Ptr value = 0x%x\n", rxpb_idx,temp_rxpb_idx, rxpb_ptr); */
+				DLRX_RXPB_PTR_RING_rxpb_ptr_set_indirect((unsigned int *)rxpb_ring_base_address, loop_index_2, 0);
+			}
+		}
+	}
+
+}
+/**************************************************************************************
+//      Function name: rxpb_free_buffers_on_unload
+//      Description  : Release the rxpb buffers between the read pointer and write pointer
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//      Notes        : Make sure the cfg_badr_rxpb_ptr_ring, rxpb_ptr_write_index,
+//                         rxpb_ptr_read_index is set to the correct value in the context
+//                         structure before calling this function. Check the notes of functions
+//                         called for complete list to be set in the context.
+**************************************************************************************/
+void rxpb_free_buffers_on_unload(void)
+{
+	unsigned int rxpb_write_index;
+	unsigned int rxpb_read_index;
+	unsigned int loop_count;
+	unsigned int loop_index;
+	unsigned int rxpb_ring_base_address;
+
+	rxpb_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+	rxpb_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+	rxpb_ring_base_address = UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0));
+
+	if (rxpb_write_index < rxpb_read_index)
+		loop_count = (GET_NUM_RXPB_PTR_RING + rxpb_write_index) - rxpb_read_index;
+	else
+		loop_count = rxpb_write_index - rxpb_read_index;
+
+	/* Release rxpb buffer */
+	for (loop_index = 0; loop_index < loop_count; loop_index++) {
+		unsigned int rxpb_ptr;
+		unsigned int rxpb_idx;
+
+		rxpb_idx = (rxpb_read_index + loop_index) % GET_NUM_RXPB_PTR_RING;
+		rxpb_ptr = DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ring_base_address, rxpb_idx);
+		ppa_dl_dre_rxpb_buf_free(rxpb_ptr);
+	}
+
+}
+#endif  /* #if DLRX_SUPPORT_UNLOAD */
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_tx_cmpl_msg.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_tx_cmpl_msg.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_tx_cmpl_msg.c
@@ -0,0 +1,155 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <linux/kernel.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_internal_def.h"
+
+#define HTT_TX_COMPL_CTXT_SZ                sizeof(A_UINT16)
+#define HTT_TX_COMPL_CTXT_NUM(_bytes)       ((_bytes) >> 1)
+
+#define HTT_TX_COMPL_INV_MSDU_ID            0xffff
+
+#define HTT_TX_COMPL_IND_STAT_OK            0
+#define HTT_TX_COMPL_IND_STAT_DISCARD       1
+#define HTT_TX_COMPL_IND_STAT_NO_ACK        2
+#define HTT_TX_COMPL_IND_STAT_POSTPONE      3
+#define HTT_HOST_ONLY_STATUS_CODE_START     128
+
+#define MAX_TX_CMPL_NUM                     1
+struct htt_tx_compl_ind_base {
+	uint32_t hdr;
+	uint16_t payload[MAX_TX_CMPL_NUM];
+};
+
+enum htt_tx_status {
+	/* ok - successfully sent + acked */
+	htt_tx_status_ok = HTT_TX_COMPL_IND_STAT_OK,
+
+	/* discard - not sent (congestion control) */
+	htt_tx_status_discard = HTT_TX_COMPL_IND_STAT_DISCARD,
+
+	/* no_ack - sent, but no ack */
+	htt_tx_status_no_ack = HTT_TX_COMPL_IND_STAT_NO_ACK,
+
+	/* download_fail - the host could not deliver the tx frame to the target */
+	htt_tx_status_download_fail = HTT_HOST_ONLY_STATUS_CODE_START,
+};
+
+struct offload_tx_release_t {
+	uint8_t reserved1;
+	uint8_t num_msdus;
+	uint16_t reserved0;
+	uint16_t msdu_ids[129 * 2];
+};
+struct offload_tx_release_t offload_tx_release_data;
+
+void dlrx_tx_cmpl_msg_process(unsigned int *ce5buf_ptr);
+void ol_tx_completion_handler_ltq(
+	int num_msdus,
+	enum htt_tx_status status,
+	void *tx_desc_id_iterator);
+
+extern void msg_mib_inc(unsigned int msg_type);
+extern uint32_t ppa_dl_dre_txpkt_buf_release(uint32_t num_msdus, uint32_t *msg, uint32_t flags);
+
+/*extern unsigned int peer_vld_check(unsigned int peer_id); */
+/*extern void dlrx_playout_process(void); */
+/*extern void ro_list_reset(unsigned int peer); */
+
+/*************************************************************************
+// Module:          dlrx_tx_cmpl_msg_process
+// Description:     RX Fragment Indication Message Processing.
+//                  If peer is valid and acc is enabled, reset this peer;
+//                  pass this message to WLAN driver
+// Parameters:      ce5buf_ptr
+// Return value :   None
+// Functions called by this module:
+//                  msg_mib_inc()
+//                  peer_vld_check()
+//                  ro_list_reset()
+// Notes        :   Check the notes of functions called for
+//                  complete list to be set in the context.
+*************************************************************************/
+
+void dlrx_tx_cmpl_msg_process(unsigned int *ce5buf_ptr)
+{
+	int num_msdus;
+	enum htt_tx_status status;
+
+	/*Increment message mib for RX Fragment Indication Message */
+	msg_mib_inc(HTT_TX_CMP_MSG);
+
+	/* status - no enum translation needed */
+	status = DLRX_TX_CMPL_MSG_status_get_indirect(ce5buf_ptr, 0);
+	num_msdus = DLRX_TX_CMPL_MSG_pb_ptr_rel_num_get_indirect(ce5buf_ptr, 0);
+
+	if (num_msdus & 0x1) {
+		struct htt_tx_compl_ind_base *compl = (struct htt_tx_compl_ind_base *)(ce5buf_ptr + O_DLRX_TX_CMPL_MSG_free_txpb_ptr - 1);
+
+		/*
+		       * Host CPU endianness can be different from FW CPU. This
+		       * can result in even and odd MSDU IDs being switched. If
+		       * this happens, copy the switched final odd MSDU ID from
+		       * location payload[size], to location payload[size-1],
+		       * where the message handler function expects to find it
+		       */
+		if (compl->payload[num_msdus] != HTT_TX_COMPL_INV_MSDU_ID) {
+			compl->payload[num_msdus - 1] =
+				compl->payload[num_msdus];
+		}
+	}
+
+	ol_tx_completion_handler_ltq(num_msdus, status, ce5buf_ptr + O_DLRX_TX_CMPL_MSG_free_txpb_ptr);
+
+}
+
+void ol_tx_completion_handler_ltq(
+	int num_msdus,
+	enum htt_tx_status status,
+	void *tx_desc_id_iterator)
+{
+	int i;
+	uint16_t *desc_ids = (uint16_t *)tx_desc_id_iterator;
+	uint16_t tx_desc_id;
+
+	offload_tx_release_data.num_msdus = (uint8_t)num_msdus;
+
+	for (i = 0; i < num_msdus; i++) {
+		tx_desc_id = desc_ids[i];
+
+		if ((i % 2) == 0)
+			offload_tx_release_data.msdu_ids[i + 1] = tx_desc_id;
+		else
+			offload_tx_release_data.msdu_ids[i - 1] = tx_desc_id;
+	}
+
+/*tmp disable TX completion release  for GRX350_DL_TEST */
+#if 1
+
+	if (ppa_dl_dre_txpkt_buf_release(num_msdus, (unsigned int *)&offload_tx_release_data, 0))
+		printk("%s : %d : LTQ11ACOL OFFLOAD txpkt_buf_release failed num_msdus: %d\n", __func__, __LINE__, num_msdus);
+
+#endif
+}
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_utility_fns.c b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_utility_fns.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/dlrx_fw/dlrx_utility_fns.c
@@ -0,0 +1,634 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#include <asm/addrspace.h>
+#include <linux/kernel.h>
+#include "../include/dlrx_fw_def.h"
+#include "../include/dlrx_fw_data_structure.h"
+#include "../include/dlrx_fw_data_structure_macro.h"
+#include "../include/dlrx_fw_internal_def.h"
+#include "../include/dlrx_dre_api.h"
+#include "../include/dlrx_fw_macro_adaptor.h"
+#include "../include/dlrx_inl_fns.h"
+
+/**************************************************************************************
+//      Function name: dlrx_add_outgoing_data_to_rxpb_buffer
+//      Description  : Add data to the outgoing packet buffer based on the switch value
+//      Parameters   : *rxpb_buf_ptr : rx packet buffer pointer
+//                     outgoing_header_switch: Switch value to decide the type of data
+//                     to be added to the rx packet buffer
+//      Return value : None
+//      Functions called by this module:
+//                     dlrx_get_interface_data_from_vap
+//      Notes        : Make sure the vap, discard, forward, inspect, cfg_size_rxpktdes and
+//                     mpdu_status data is set to the correct value in the context structure
+//                     before calling this function. Check the notes of functions called for
+//                     complete list to be set in the context.
+**************************************************************************************/
+void dlrx_add_outgoing_data_to_rxpb_buffer(unsigned int *rxpb_buf_ptr, rx_outgoing_header_switch outgoing_header_switch)
+{
+	unsigned int pmac_header_data = 0;
+	unsigned int vap;
+	unsigned int forward;
+	unsigned int discard;
+	unsigned int interface;
+	unsigned int inspect;
+	unsigned int mpdu_status;
+	unsigned int fw_rx_desc_byte;
+	unsigned int *pmac_data_ptr;
+	unsigned int padding_bytes = 0; /* Must initialize to zero */
+	unsigned int pmac_ptr_offset;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	/* TODO: Handle error case for interface */
+	interface = dlrx_get_interface_data_from_vap(vap);
+	discard = DLRX_CTXT_MSG_discard_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	forward = DLRX_CTXT_MSG_forward_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	inspect = DLRX_CTXT_MSG_inspect_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	if (g_qca_hw == BEELINER_BOARD)
+		padding_bytes = DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+	switch (outgoing_header_switch) {
+	case INSPECT_BIT_DATA:
+		mpdu_status = DLRX_CTXT_MSG_mpdu_status_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+		fw_rx_desc_byte = ((inspect << B_FW_RX_DESC_BYTE_inspect_msdu0) | (forward << B_FW_RX_DESC_BYTE_forward_msdu0) | discard);
+
+		pmac_header_data = ((mpdu_status << B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status) | fw_rx_desc_byte);
+		*rxpb_buf_ptr = pmac_header_data;
+		break;
+
+	case ONE_PMAC_DATA:
+		if (interface == 15) {
+			/* The value of 3 is set as the interface value to prevent passing invalid interface value to the switch during the */
+			/* playout process. The value could be any value between 3 to 7. Only condition is source and destination interface */
+			/* value should be same */
+			interface = VALID_INTERFACE_NUMBER;
+		}
+
+		pmac_header_data = ((interface << B_DLRX_RXPB_PMAC_HDR_src_int) | (interface << B_DLRX_RXPB_PMAC_HDR_dest_int) | (forward << B_DLRX_RXPB_PMAC_HDR_fwd1) | \
+				    (vap << B_DLRX_RXPB_PMAC_HDR_vap) | (discard << B_DLRX_RXPB_PMAC_HDR_discard) | forward);
+		pmac_data_ptr = (unsigned int *)((uint8_t *)rxpb_buf_ptr + GET_RXPKT_DESC_SIZE + padding_bytes);
+
+		if ((padding_bytes % 4) == 0) {
+			pmac_data_ptr--;
+			*pmac_data_ptr = pmac_header_data;
+		} else {
+			uint8_t *temp_pmac_ptr;
+			pmac_ptr_offset = 4;
+			temp_pmac_ptr = dlrx_get_pmac_data_ptr(pmac_data_ptr, pmac_ptr_offset);
+			memcpy((void *)temp_pmac_ptr, (void *)&pmac_header_data, 4);
+		}
+
+		break;
+
+	case TWO_PMAC_DATA:
+		if (interface == 15) {
+			/* The value of 3 is set as the interface value to prevent passing invalid interface value to the switch during the */
+			/* playout process. The value could be any value between 3 to 7. Only condition is source and destination interface */
+			/* value should be same */
+			pmac_header_data = ((VALID_INTERFACE_NUMBER << B_DLRX_RXPB_PMAC_HDR_src_int) | (VALID_INTERFACE_NUMBER << B_DLRX_RXPB_PMAC_HDR_dest_int) | \
+					    (forward << B_DLRX_RXPB_PMAC_HDR_fwd1) | (vap << B_DLRX_RXPB_PMAC_HDR_vap) | (discard << B_DLRX_RXPB_PMAC_HDR_discard) | forward);
+		} else {
+			pmac_header_data = ((interface << B_DLRX_RXPB_PMAC_HDR_src_int) | (interface << B_DLRX_RXPB_PMAC_HDR_dest_int) | (forward << B_DLRX_RXPB_PMAC_HDR_fwd1) | \
+					    (vap << B_DLRX_RXPB_PMAC_HDR_vap) | (discard << B_DLRX_RXPB_PMAC_HDR_discard) | forward | (1 << B_DLRX_RXPB_PMAC_HDR_rsvd1));
+		}
+
+		pmac_data_ptr = (unsigned int *)((uint8_t *)rxpb_buf_ptr + GET_RXPKT_DESC_SIZE + padding_bytes);
+
+		if ((padding_bytes % 4) == 0) {
+			pmac_data_ptr--;
+			*pmac_data_ptr = pmac_header_data;
+		} else {
+			uint8_t *temp_pmac_ptr;
+			pmac_ptr_offset = 4;
+			temp_pmac_ptr = dlrx_get_pmac_data_ptr(pmac_data_ptr, pmac_ptr_offset);
+			memcpy((void *)temp_pmac_ptr, (void *)&pmac_header_data, 4);
+		}
+
+		pmac_header_data = 0;
+		pmac_header_data = ((interface << B_DLRX_RXPB_PMAC_HDR_src_int) | (interface << B_DLRX_RXPB_PMAC_HDR_dest_int));
+
+		if ((padding_bytes % 4) == 0) {
+			pmac_data_ptr--;
+			*pmac_data_ptr = pmac_header_data;
+		} else {
+			uint8_t *temp_pmac_ptr;
+			pmac_ptr_offset = 8;
+			temp_pmac_ptr = dlrx_get_pmac_data_ptr(pmac_data_ptr, pmac_ptr_offset);
+			memcpy((void *)temp_pmac_ptr, (void *)&pmac_header_data, 4);
+		}
+
+		break;
+
+	default:
+		/* Should not reach here */
+		break;
+	}
+}
+
+/**************************************************************************************
+//      Function name: dlrx_get_interface_data_from_vap
+//      Description  : Get the interface value for the vap
+//      Parameters   : None
+//      Return value : Interface value for the vap
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the vap 0 to vap 15 is set to the correct value in the
+//                     context structure before calling this function. Check the notes
+//                     of functions called for complete list to be set in the context.
+**************************************************************************************/
+unsigned int dlrx_get_interface_data_from_vap(unsigned int vap)
+{
+	return ppa_dl_dre_itf_from_vapid(vap);
+}
+
+/**************************************************************************************
+//      Function name: dlrx_get_current_rxpb_buf_ptr
+//      Description  : Get the current rx packet buffer pointer  ( Physical address returned)
+//      Parameters   : None
+//      Return value : Current rx packet buffer pointer
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the cfg_badr_rxpb_ptr_ring and rxpb_ptr_read_index is
+//                     set to the correct value in the context structure before calling
+//                     this function. Check the notes of functions called for complete
+//                     list to be set in the context.
+**************************************************************************************/
+unsigned int dlrx_get_current_rxpb_buf_ptr(void)
+{
+	unsigned int rxpb_ring_base_address;
+	unsigned int rxpb_ptr_read_index;
+
+	/* Get RXPB ring data */
+	rxpb_ring_base_address = UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0));
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect((unsigned int *)UNCACHE_ADDR(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE), 0);
+
+	return DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)rxpb_ring_base_address, rxpb_ptr_read_index);
+}
+
+/**************************************************************************************
+//      Function name: dlrx_get_ind_msg_mpdu_data_offset
+//      Description  : Get the dword offset to the mpdu data
+//      Parameters   : *ce5_buf_ptr : ce5 buffer pointer
+//      Return value : Byte data offset to reach to get the MPDU status and MPDU count
+//      Functions called by this module:
+//                     None
+//      Notes        : None
+**************************************************************************************/
+unsigned int dlrx_get_ind_msg_mpdu_data_offset(unsigned int *ce5_buf_ptr)
+{
+	unsigned int num_rx_desc_bytes;
+
+	num_rx_desc_bytes = DLRX_IND_MSG_fw_rx_desc_byte_num_get_indirect(ce5_buf_ptr, 0);
+
+	return ((num_rx_desc_bytes + 3) >> 2) << 2;
+}
+
+/**************************************************************************************
+//      Function name: dlrx_get_fw_rx_desc_byte_data
+//      Description  : Get the fw_rx_dwsc_byte for the corresponding msdu
+//      Parameters   : *ce5_buf_ptr : ce5 buffer pointer
+//      Return value : None
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the msdu_index is set to the correct value in the
+//                     context structure before calling this function. Check the notes of
+//                     functions called for complete list to be set in the context.
+**************************************************************************************/
+void dlrx_get_fw_rx_desc_byte_data(unsigned int *ce5_buf_ptr)
+{
+	unsigned int msdu_dword_offset;
+	unsigned int *fw_rx_desc_data_base_addr;
+	unsigned int msdu_switch_value;
+	unsigned int msdu_index;
+	unsigned int discard = 0;
+	unsigned int forward = 0;
+	unsigned int inspect = 0;
+	unsigned int total_msdu;
+
+	total_msdu = DLRX_CTXT_MSG_total_msdu_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	msdu_index = DLRX_CTXT_MSG_msdu_index_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+	msdu_dword_offset = msdu_index >> 2;
+	fw_rx_desc_data_base_addr = (unsigned int *)((uint8_t *)ce5_buf_ptr + sizeof(dlrx_ind_msg_t));
+	msdu_switch_value = msdu_index % 4;
+
+	switch (msdu_switch_value) {
+	case 0:
+		discard = FW_RX_DESC_BYTE_discard_msdu0_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		forward = FW_RX_DESC_BYTE_forward_msdu0_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		inspect = FW_RX_DESC_BYTE_inspect_msdu0_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		break;
+
+	case 1:
+		discard = FW_RX_DESC_BYTE_discard_msdu1_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		forward = FW_RX_DESC_BYTE_forward_msdu1_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		inspect = FW_RX_DESC_BYTE_inspect_msdu1_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		break;
+
+	case 2:
+		discard = FW_RX_DESC_BYTE_discard_msdu2_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		forward = FW_RX_DESC_BYTE_forward_msdu2_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		inspect = FW_RX_DESC_BYTE_inspect_msdu2_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		break;
+
+	case 3:
+		discard = FW_RX_DESC_BYTE_discard_msdu3_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		forward = FW_RX_DESC_BYTE_forward_msdu3_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		inspect = FW_RX_DESC_BYTE_inspect_msdu3_get_indirect(fw_rx_desc_data_base_addr, msdu_dword_offset);
+		break;
+
+	default:
+		/* Should not reach here */
+		break;
+	}
+
+	if (g_congestion_drop_flag) {
+		if (inspect != 1) {
+			discard = 1;
+			forward = 0;
+			inspect = 0;
+			mib_update_congestion_drop_packets();
+		}
+	} else if (msdu_index >= total_msdu) {
+		discard = 0;
+		forward = 0;
+		inspect = 0;
+	}
+
+	DLRX_CTXT_MSG_discard_set_indirect(DLRX_CTXT_MSG_BASE, 0, discard);
+	/* TODO: DEBUG remove forword */
+#if 0	  /*temp disable forwarding for GRX350_DL_TEST */
+	forward = 0;
+#endif
+	DLRX_CTXT_MSG_forward_set_indirect(DLRX_CTXT_MSG_BASE, 0, forward);
+
+	DLRX_CTXT_MSG_inspect_set_indirect(DLRX_CTXT_MSG_BASE, 0, inspect);
+
+}
+
+/*****************************************************************************************
+//      Function name: dlrx_copy_last_pn_to_mainlist
+//      Description  : Copy the last PN value from the linklist to the mainlist
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the cur_ro_des_ptr and ro_mainlist_ptr is set to the
+//                     correct value in the context structure before calling this function.
+//                     Check the notes of functions called for complete list to be set
+//                     in the context.
+*****************************************************************************************/
+void dlrx_copy_last_pn_to_mainlist(void)
+{
+	unsigned int *linklist_data_ptr;
+	unsigned int *mainlist_data_ptr;
+	unsigned int pn_data;
+
+	linklist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+	mainlist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_get_indirect(DLRX_CFG_CTXT_RO_MAINLIST_BASE, 0);
+
+	pn_data = DLRX_RO_LINKLIST_pn_dw0_get_indirect(linklist_data_ptr, 0);
+	DLRX_RO_MAINLIST_last_pn_dw0_set_indirect(mainlist_data_ptr, 0, pn_data);
+
+	pn_data = DLRX_RO_LINKLIST_pn_dw1_get_indirect(linklist_data_ptr, 0);
+	DLRX_RO_MAINLIST_last_pn_dw1_set_indirect(mainlist_data_ptr, 0, pn_data);
+
+	pn_data = DLRX_RO_LINKLIST_pn_dw2_get_indirect(linklist_data_ptr, 0);
+	DLRX_RO_MAINLIST_last_pn_dw2_set_indirect(mainlist_data_ptr, 0, pn_data);
+
+	pn_data = DLRX_RO_LINKLIST_pn_dw3_get_indirect(linklist_data_ptr, 0);
+	DLRX_RO_MAINLIST_last_pn_dw3_set_indirect(mainlist_data_ptr, 0, pn_data);
+}
+
+/*****************************************************************************************
+//      Function name: dlrx_is_pn_check_fail
+//      Description  : Compare the current PN in the linklist with the last PN value in the
+//                     mainlist
+//      Parameters   : None
+//      Return value : TRUE : Current PN is less than or equal to last PN (PN check failed)
+//                     FALSE : Current PN is greater than the last PN (PN check passed)
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the sec_type, cur_ro_des_ptr and ro_mainlist_ptr is set to
+//                     the correct value in the context structure before calling this
+//                     function. Check the notes of functions called for complete list to
+//                     be set in the context.
+*****************************************************************************************/
+unsigned int dlrx_is_pn_check_fail(void)
+{
+	unsigned int sec_type;
+	unsigned int cur_pn[4];
+	unsigned int last_pn[4];
+	unsigned int loop_count;
+	unsigned int i;
+	unsigned int *linklist_data_ptr;
+	unsigned int *mainlist_data_ptr;
+
+	linklist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+	mainlist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_get_indirect(DLRX_CFG_CTXT_RO_MAINLIST_BASE, 0);
+	sec_type = DLRX_CTXT_MSG_sec_type_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	cur_pn[0] = DLRX_RO_LINKLIST_pn_dw0_get_indirect(linklist_data_ptr, 0);
+	cur_pn[1] = DLRX_RO_LINKLIST_pn_dw1_get_indirect(linklist_data_ptr, 0);
+	cur_pn[2] = DLRX_RO_LINKLIST_pn_dw2_get_indirect(linklist_data_ptr, 0);
+	cur_pn[3] = DLRX_RO_LINKLIST_pn_dw3_get_indirect(linklist_data_ptr, 0);
+
+	last_pn[0] = DLRX_RO_MAINLIST_last_pn_dw0_get_indirect(mainlist_data_ptr, 0);
+	last_pn[1] = DLRX_RO_MAINLIST_last_pn_dw1_get_indirect(mainlist_data_ptr, 0);
+	last_pn[2] = DLRX_RO_MAINLIST_last_pn_dw2_get_indirect(mainlist_data_ptr, 0);
+	last_pn[3] = DLRX_RO_MAINLIST_last_pn_dw3_get_indirect(mainlist_data_ptr, 0);
+
+	if (sec_type == SEC_TYPE_PN_48) {
+		/* Compare only 48 bits */
+		cur_pn[1] = (cur_pn[1] & 0xFFFF);
+		last_pn[1] = (last_pn[1] & 0xFFFF);
+		loop_count = 2;
+	} else
+		loop_count = 4;
+
+	for (i = loop_count; i > 0; i--) {
+		if (cur_pn[i - 1] < last_pn[i - 1])
+			return 1;
+		else if (cur_pn[i - 1] > last_pn[i - 1])
+			return 0;
+	}
+
+	return 1; /* This return is for the last case when cur_pn[0] == last_pn[0] */
+}
+
+/*****************************************************************************************
+//      Function name: dlrx_get_ro_ll_rxpb_ptr
+//      Description  : Get the vap to int value based on the vap
+//      Parameters   : None
+//      Return value : Vap to int value
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the cur_ro_des_ptr is set to the correct value in the
+//                     context structure before calling this function. Check the notes of
+//                     functions called for complete list to be set in the context.
+*****************************************************************************************/
+unsigned int dlrx_get_ro_ll_rxpb_ptr(void)
+{
+	unsigned int *linklist_data_ptr;
+
+	linklist_data_ptr = (unsigned int *)DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0);
+	return DLRX_RO_LINKLIST_rxpb_ptr_get_indirect(linklist_data_ptr, 0);
+}
+
+#if DLRX_GRX330_BOARD_CFG
+/*****************************************************************************************
+//      Function name: dlrx_check_congestion_status
+//      Description  : Check the congestion bit status
+//      Parameters   : None
+//      Return value : Congestion status
+//      Functions called by this module:
+//                     None
+//      Notes        : Make sure the congestion_bit_timeout is set to the correct value in the
+//                     context structure before calling this function. Check the notes of
+//                     functions called for complete list to be set in the context.
+*****************************************************************************************/
+unsigned int dlrx_check_congestion_status(void)
+{
+	unsigned int loop_val = DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_get_indirect(DLRX_CFG_GLOBAL_BASE, 0);
+	unsigned int loop_count = 0;
+
+	if ((*congestion_register_addr & CONGESTION_REG_MASK)) {
+		for (loop_count = 0; loop_count < loop_val; loop_count++) {
+			if (((*congestion_register_addr) & CONGESTION_REG_MASK) == 0)
+				break;
+		}
+	}
+
+	if (loop_count == loop_val)
+		return 0;
+	else
+		return 1;
+}
+#endif
+
+void dlrx_generate_debug(unsigned int stop_flag)
+{
+	unsigned int rxpb_ptr_read_index;
+	unsigned int *rxpb_buf_ptr;
+	unsigned int rxpb_ptr_write_index;
+	unsigned int idx, i;
+	unsigned int *ce5buf_ptr;
+	unsigned int first_msdu = 0;
+	unsigned int last_msdu = 0;
+	unsigned int msdu_chain_num, msdu_length, seq_id;
+	unsigned int peer_id, peer, total_msdu, ext_tid, msg_type;
+	unsigned int iden_id;
+
+	if (stop_flag) {
+		*DLRX_TARGET_CE5_WRITE_INDEX(g_ce5_offset) = ((*DLRX_TARGET_CE5_READ_INDEX(g_ce5_offset)) + 64) % GET_NUM_CE5BUF;
+
+		/*delay some time */
+		for (i = 0; i < 0xffffff ; i++)
+			idx = 0;
+	}
+
+	rxpb_ptr_write_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE, 0);
+	rxpb_ptr_read_index = DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect(DLRX_CFG_CTXT_RXPB_PTR_RING_BASE, 0);
+
+	printk("\n\n");
+	printk("rxpb_parse_idex=0x%x, write_idx=0x%x \n", rxpb_ptr_read_index, rxpb_ptr_write_index);
+	printk(" rxpb_idx, seq_id,skb, msdu_length,first_msdu,last_msdu,msdu_chained_num,ce5_buf_ptr,total_msdu,peer_id,ext_tid,msg_type,iden_id\n");
+
+	for (idx = 0; idx < GET_NUM_RXPB_PTR_RING; idx++) {
+		rxpb_buf_ptr = (unsigned int *)UNCACHE_ADDR(DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)g_cfg_badr_rxpb_ptr_ring, idx));
+		msdu_length = DLRX_RXPB_HDR_msdu_len_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		first_msdu = DLRX_RXPB_HDR_first_msdu_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		last_msdu = DLRX_RXPB_HDR_last_msdu_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		msdu_chain_num = DLRX_RXPB_HDR_msdu_chain_num_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+
+		if (first_msdu)
+			seq_id = DLRX_RXPB_HDR_seqid_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS);
+		else
+			seq_id = 0xfff;
+
+		ce5buf_ptr = (unsigned int *) *(rxpb_buf_ptr - 2) ;
+
+		if (idx == 0x3ff)
+			printk("rxpb_buf_ptr 0x%x,ce5buf_ptr0x%x \n ", (unsigned int)rxpb_buf_ptr, (unsigned int)ce5buf_ptr);
+
+		if (((unsigned  int)ce5buf_ptr & 0xF0000000) ==  0x80000000) {
+			peer_id = DLRX_IND_MSG_peer_id_get_indirect(ce5buf_ptr, 0);
+			ppa_dl_dre_peer_from_peerid(peer_id, &peer);
+
+			total_msdu = DLRX_IND_MSG_fw_rx_desc_byte_num_get_indirect(ce5buf_ptr, 0);
+
+			/*Get ext_tid and save to FW context */
+			ext_tid = DLRX_IND_MSG_ext_tid_get_indirect(ce5buf_ptr, 0);
+			msg_type = DLRX_IND_MSG_msg_type_get_indirect(ce5buf_ptr, 0);
+		} else {
+			peer = 0;
+			total_msdu = 0;
+			ext_tid = 0;
+			msg_type = 0;
+		}
+
+		if (DLRX_RXPB_HDR_msdu_load_status_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS))   /*msdu_done set */
+			printk("MSDU_DONE     ") ;
+		else
+			printk("MSDU_NOT_DONE ");
+
+		iden_id = *(rxpb_buf_ptr + 66);
+		printk(" 0x%x,0x%x, 0x%x,0x%x 0x%x,0x%x,%u,%u,%u,0x%x,0x%x,0x%x,0x%x,0x%x \n", idx, iden_id, (unsigned int) *(rxpb_buf_ptr - 1), (unsigned int)rxpb_buf_ptr, (unsigned int)seq_id, msdu_length, first_msdu, last_msdu, msdu_chain_num, (unsigned int)ce5buf_ptr, total_msdu, peer, ext_tid, msg_type);
+#if 1
+
+		if ((unsigned int) *(rxpb_buf_ptr - 1) == 0x6e746400) {
+			for (i = 32; i > 0 ; i--)
+				printk("0x%x", (unsigned int) *(rxpb_buf_ptr - i));
+
+			printk("\n");
+		}
+
+#endif
+
+		for (i = 0; i < GET_NUM_RXPB_PTR_RING; i++) {
+			unsigned int *tmp_ptr;
+
+			if (i == idx)
+				continue;
+
+			tmp_ptr = (unsigned int *)UNCACHE_ADDR(DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect((unsigned int *)g_cfg_badr_rxpb_ptr_ring, i));
+
+			if ((unsigned int)tmp_ptr == (unsigned int)rxpb_buf_ptr) {
+				if (DLRX_RXPB_HDR_msdu_load_status_get_indirect(rxpb_buf_ptr, CFG_OFFSET_ATTEN_IN_DWORDS))
+					printk(" Same buffer : 0x%x for index(msdu_done set) 0x%x  and (msdu_done set) 0x%x \n", (unsigned int)tmp_ptr, idx, i);
+				else
+					printk(" Same buffer : 0x%x for index(msdu_done set) 0x%x  and  free 0x%x \n", (unsigned int)tmp_ptr, idx, i);
+			}
+		}
+
+	}
+
+	/* Ro list debug data */
+/*   dlrx_print_rolist_debug_data( ); */
+#if 0
+	{
+		int index;
+		unsigned int *dma_desc;
+		dma_desc = DLRX_DDR_GSWIP_DMA_DESC_BASE;
+		printk("index  Des_ptr, Iden_id  \n");
+
+		for (index = 0 ;  index < 127;   index++) {
+			unsigned int   *tmp_ptr;
+			tmp_ptr = (unsigned int *) *(dma_desc + 1) + 0xa0000000;
+
+			if ((index % 2) == 0)
+				printk(" 0x%x  ", index);
+
+			printk("0x%x , 0x%x   ", tmp_ptr, *(tmp_ptr + 10));
+			dma_desc += 4;
+
+			if ((index % 2) == 1)
+				printk(" \n");
+		}
+	}
+#endif
+}
+
+void dlrx_print_rolist_debug_data(void)
+{
+	unsigned int peer_num;
+	unsigned int tid_num;
+	unsigned int seqid_num;
+	unsigned int *temp_mainlist_data_ptr;
+	unsigned int *temp_linklist_data_ptr;
+	unsigned int first_ptr;
+	unsigned int next_ptr;
+	unsigned int count_num = 0;
+	unsigned int msdu_num;
+
+	/*re-order list */
+	printk("Reorder Link list context \n");
+	printk("Head = %u Tail = %u Free = %u cur_ptr = 0x%x  cur_index = %u\n\n",
+	       DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0),
+	       DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0),
+	       DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0),
+	       DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0),
+	       DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_get_indirect(DLRX_CFG_CTXT_RO_LINKLIST_BASE, 0));
+
+	printk("Main list Data \n");
+	printk("Peer  Tid  seqid  Linked ro link list\n");
+
+	for (peer_num = 0; peer_num < 128; peer_num++) {
+		for (tid_num = 0; tid_num < 16; tid_num++) {
+			temp_mainlist_data_ptr = (unsigned int *)(((dlrx_ro_mainlist_t *)g_cfg_badr_ro_mainlist) + ((peer_num * NUM_TID) + tid_num)); /* Offset into the required mainlist entry */
+
+			for (seqid_num = 0; seqid_num < 64; seqid_num++) {
+				first_ptr = DLRX_RO_MAINLIST_first_ptr_get_indirect(temp_mainlist_data_ptr, seqid_num);
+				msdu_num = DLRX_RO_MAINLIST_msdu_num_get_indirect(temp_mainlist_data_ptr, seqid_num);
+
+				if (first_ptr == NULL_PTR)
+					continue;
+
+				temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + first_ptr);   /* Offset into the required linklist entry */
+				printk("%u    %u    %u   ", peer_num, tid_num, seqid_num);
+				printk("%u  ", first_ptr);
+				count_num++;
+				next_ptr = DLRX_RO_LINKLIST_next_ptr_get_indirect(temp_linklist_data_ptr, 0);
+
+				while (next_ptr != NULL_PTR) {
+					count_num++;
+					printk("%u  ", next_ptr);
+					temp_linklist_data_ptr = (unsigned int *)((dlrx_ro_linklist_t *)g_cfg_badr_ro_linklist + next_ptr);   /* Offset into the required linklist entry */
+					next_ptr = DLRX_RO_LINKLIST_next_ptr_get_indirect(temp_linklist_data_ptr, 0);
+				}
+
+				if (count_num == msdu_num)
+					printk("LL_MATCH\n");
+				else
+					printk("LL_MISMATCH Count_num = %u msdu_num = %u\n", count_num, msdu_num);
+
+				count_num = 0;
+			}
+		}
+	}
+
+	printk("--------------------------------------------------------\n");
+}
+
+#if DLRX_SUPPORT_UNLOAD
+/*****************************************************************************************
+//      Function name: dlrx_unregister_driver_fns
+//      Description  : Unregister the functions registered with the driver
+//      Parameters   : None
+//      Return value : None
+//      Functions called by this module: ppa_dl_dre_fn_register
+//      Notes        : None
+*****************************************************************************************/
+void dlrx_unregister_driver_fns(void)
+{
+	ppa_dl_dre_fn_register(DRE_MAIN_FN, NULL);
+	ppa_dl_dre_fn_register(DRE_GET_VERSION_FN, NULL);
+	ppa_dl_dre_fn_register(DRE_RESET_FN, NULL);
+	ppa_dl_dre_fn_register(DRE_GET_MIB_FN, NULL);
+	ppa_dl_dre_fn_register(DRE_GET_CURMSDU_FN, NULL);
+	ppa_dl_dre_fn_register(DRE_SET_MEMBASE_FN , NULL);
+	ppa_dl_dre_fn_register(DRE_SET_RXPN_FN , NULL);
+	ppa_dl_dre_fn_register(DRE_SET_DLRX_UNLOAD, NULL);
+}
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/cycle_counter.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/cycle_counter.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/cycle_counter.h
@@ -0,0 +1,44 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __CYCLEX_COUNTER_H__
+#define __CYCLEX_COUNTER_H__
+
+/*---------------------------------------------
+*          #defines
+*---------------------------------------------*/
+extern void *CycleCounter_Create(char *);
+extern void CycleCounter_Start(void *);
+extern void CycleCounter_End(void *);
+
+extern void *function1_cycles, *function2_cycles, *function3_cycles;
+extern void *function4_cycles, *function5_cycles, *function6_cycles;
+extern void *function7_cycles, *function8_cycles;
+extern void *functionA_cycles, *functionB_cycles;
+extern void *functionC_cycles, *functionD_cycles;
+
+/* above function1_cycles  and fucntion2_cycles
+* are pointer for function1 and function2 respectively
+*/
+
+
+#endif
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_dre_api.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_dre_api.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_dre_api.h
@@ -0,0 +1,249 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_DRE_API_H__
+#define __DLRX_DRE_API_H__
+
+enum {
+	DRE_MAIN_FN = 0,
+	DRE_GET_VERSION_FN,
+	DRE_RESET_FN,
+	DRE_GET_MIB_FN,
+	DRE_GET_CURMSDU_FN,
+	DRE_SET_MEMBASE_FN,
+	DRE_SET_RXPN_FN,
+	DRE_SET_DLRX_UNLOAD,
+	DRE_MAX_FN
+};
+
+enum {
+	DRE_RESET_MIB,
+	DRE_RESET_PEER,
+};
+
+enum {
+	DRE_MSG_MIB,
+	DRE_VAP_MIB,
+	DRE_DATA_MIB,
+};
+
+enum {
+	MIN_PEERID = 0,
+	MAX_PEERID = 127
+};
+
+enum {
+	MIN_VAPID = 0,
+	MAX_VAPID = 15
+};
+
+enum {
+	PEER_INVALID = 0,
+	PEER_VALID	 = 1,
+};
+
+enum {
+	INVALIDATE_HEADER = 0,
+	INVALIDATE_FULL
+};
+
+enum {
+	PEREGRINE_BOARD = 0,
+	BEELINER_BOARD
+};
+
+enum {
+	SUBTYPE_NONE_BOARD = 0,
+	SUBTYPE_BEELINER_CASCADE_BOARD
+};
+
+enum {
+	LOAD_QCA = 0,
+	UNLOAD_QCA = 1
+};
+
+
+#define RESET_ALLVAP	0xFF
+#define MAX_PEERID_NUM	1056
+#define MAX_PEER_NUM	128
+#define MAX_VAP_NUM		16
+#define MAX_INV_PEREGRINE_HEADER_LEN	256
+#define MAX_INV_BEELINER_HEADER_LEN		320
+#define MAX_INV_CASCADE_HEADER_LEN		324
+
+#define QCA_PEREGRINE_11AC_CFG_OFFSET_ATTEN   248
+#define QCA_BEELINER_11AC_CFG_OFFSET_ATTEN	 296
+#define QCA_CASCADE_11AC_CFG_OFFSET_ATTEN	 300
+
+#define DTLK_INVALID_ITFID	0xF
+
+typedef struct dre_register_func_set {
+	void *dre_dl_main_fn;
+	void *dre_dl_getver_fn;
+	void *dre_dl_reset_fn;
+	void *dre_dl_getmib_fn;
+	void *dre_dl_getmsdu_fn;
+	void *dre_dl_set_membase_fn;
+	void *dre_dl_set_rxpn_fn;
+	void *dre_dl_set_dlrx_unload_t;
+} dre_regfn_set_t;
+
+typedef int (*dre_dl_main_fn_t)(void);
+typedef unsigned int (*dre_dl_getver_fn_t)(void);
+/* reset type, vap id(0-15)/peer id(0-127) */
+typedef void (*dre_dl_reset_fn_t)(
+			unsigned int reset_type,
+			unsigned int id_num
+			);
+typedef unsigned int (*dre_dl_getmib_fn_t)(
+			unsigned int mib_type,
+			unsigned int vapid
+			);
+/* return base addr and data len */
+typedef int (*dre_dl_getmsdu_fn_t)(
+			unsigned int *rxpb_ptr,
+			unsigned int *data_len
+			);
+/* configure the base address */
+typedef int (*dre_dl_set_membase_fn_t)(
+			unsigned int ddr_membase,
+			unsigned int cfg_ctxt_membase,
+			unsigned int pcie_membase
+			);
+/* set rxpn */
+typedef int (*dre_dl_set_rxpn_fn_t)(
+			unsigned int peer,
+			unsigned int *rxpn
+			);
+typedef void (*dre_dl_set_dlrx_unload_t)(void);
+
+
+/* API to support dre to send pkt to switch via dma */
+extern int ppa_dl_dre_gswip_dma_send(
+	unsigned int vap_id,
+	unsigned int rxpb_ptr,
+	unsigned int data_ptr,
+	unsigned int data_len,
+	unsigned int release_flag,
+	unsigned int pmac_hdr_ptr,
+	unsigned int unmap_type
+	);
+
+/* API to support dre to send pkt to protocol stack*/
+extern int ppa_dl_dre_ps_send(
+	unsigned int rxpb_ptr,
+	unsigned int data_ptr,
+	unsigned int data_len,
+	unsigned int vap_id
+	);
+
+/* API to support dre to send pkt to wlan driver */
+extern int ppa_dl_dre_wlan_pkt_send(
+	unsigned int rxpb_ptr,
+	unsigned int data_len,
+	unsigned int pktstatus,
+	unsigned int msg_ptr,
+	unsigned int vap_id,
+	unsigned int flags
+	);
+
+/* API to support dre to send message to wlan driver */
+extern int ppa_dl_dre_wlan_msg_send(
+	unsigned int msg_type,
+	unsigned int msg_ptr,
+	unsigned int msg_len,
+	unsigned int flags
+	);
+
+/* API to support dre to release buff after receive the TX complete message */
+extern int ppa_dl_dre_txpkt_buf_release(
+	unsigned int num_msdus,
+	unsigned int *msg,
+	unsigned int flags
+	);
+
+/* API to support dre to register callback functons */
+extern int ppa_dl_dre_fn_register(
+	unsigned int regno,
+	void *func
+	);
+
+/* API to get peer via peer id */
+extern int ppa_dl_dre_peer_from_peerid(
+	unsigned int peerid,
+	unsigned int *peer
+	);
+
+/* API to get vap info via peer */
+extern int ppa_dl_dre_vapinfo_from_peer(
+	unsigned int peer,
+	unsigned int *vapid,
+	unsigned int *sec_type,
+	unsigned int *acc_dis
+	);
+
+/* API to get interface id via vap id */
+extern unsigned int ppa_dl_dre_itf_from_vapid(
+	unsigned int vap_id
+	);
+
+/*API to set the vapinfo */
+extern int ppa_dl_dre_vapinfo_set(
+	unsigned int peer,
+	unsigned int vapid,
+	unsigned int sec_type,
+	unsigned int acc_dis
+	);
+
+
+/* API to allocate a rxpb pkt buffer to FW */
+extern unsigned int dlrx_dl_dre_rxpb_buf_alloc(void);
+
+/*API to free the rxpb buffer*/
+extern int ppa_dl_dre_rxpb_buf_free(
+	unsigned int rxpb_ptr
+	);
+
+extern unsigned int ppa_dl_dre_get_sram_addr(void);
+
+extern void ppa_dl_dre_dma_invalidate(
+		unsigned int startAddr,
+		unsigned int size
+		);
+
+extern void ppa_dl_dre_dma_writeback(
+		unsigned int startAddr,
+		unsigned int size
+		);
+
+extern void ppa_dl_dre_dma_wback_inv(
+		unsigned int startAddr,
+		unsigned int size
+		);
+
+extern unsigned int ppa_dl_dre_get_kseg0(void);
+
+extern unsigned int ppa_dl_dre_get_kseg1(void);
+
+extern void ppa_dl_dre_peer_act_fn(unsigned int peer_id);
+
+#endif
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure.h
@@ -0,0 +1,32 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_DATA_STRUCTURE_H_
+#define __DLRX_FW_DATA_STRUCTURE_H_
+
+#ifdef __LITTLE_ENDIAN
+	#include "dlrx_fw_data_structure_le.h"
+#else
+	#include "dlrx_fw_data_structure_be.h"
+#endif
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_be.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_be.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_be.h
@@ -0,0 +1,854 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_DATA_STRUCTURE_BE_H_
+#define __DLRX_FW_DATA_STRUCTURE_BE_H_
+
+typedef struct {
+
+	unsigned int msdu_load_status:1;
+	unsigned int insig1:28;
+	unsigned int mcast_bcast:1;
+	unsigned int insig0:2;
+
+	unsigned int insig3:8;
+	unsigned int msdu_chain_num:8;
+	unsigned int insig2:16;
+
+	unsigned int insig5:4;
+	unsigned int seqid:12;
+	unsigned int insig4:16;
+
+	unsigned int pn_31_0;
+
+	unsigned int insig6:16;
+	unsigned int pn_47_32:16;
+
+	unsigned int insig7:18;
+	unsigned int msdu_len:14;
+
+	unsigned int insig8;
+
+	unsigned int insig9;
+
+	unsigned int insig10;
+
+	unsigned int pn_63_48:16;
+	unsigned int insig11:16;
+
+	unsigned int pn_95_64;
+
+	unsigned int pn_127_96;
+
+	unsigned int insig13:16;
+	unsigned int last_msdu:1;
+	unsigned int first_msdu:1;
+	unsigned int insig12:14;
+
+} dlrx_rxpb_hdr_peregrine_t;
+
+typedef struct {
+
+	unsigned int msdu_load_status:1;
+	unsigned int insig1:28;
+	unsigned int mcast_bcast:1;
+	unsigned int insig0:2;
+
+	unsigned int insig3:8;
+	unsigned int msdu_chain_num:8;
+	unsigned int insig2:16;
+
+	unsigned int insig5:4;
+	unsigned int seqid:12;
+	unsigned int insig4:16;
+
+	unsigned int pn_31_0;
+
+	unsigned int insig6:16;
+	unsigned int pn_47_32:16;
+
+	unsigned int insig7:18;
+	unsigned int msdu_len:14;
+
+	unsigned int insig8;
+
+	unsigned int insig9;
+
+	unsigned int insig10;
+
+	unsigned int insig11;
+
+	unsigned int pn_63_48:16;
+	unsigned int insig12:16;
+
+	unsigned int pn_95_64;
+
+	unsigned int pn_127_96;
+
+	unsigned int insig14:16;
+	unsigned int last_msdu:1;
+	unsigned int first_msdu:1;
+	unsigned int insig13:14;
+
+	unsigned int insig15;
+
+	unsigned int insig16;
+
+	unsigned int insig17;
+
+	unsigned int insig19:19;
+	unsigned int l3_header_padding:3;
+	unsigned int insig18:10;
+
+	unsigned int insig20;
+
+} dlrx_rxpb_hdr_beeliner_t;
+
+typedef struct {
+
+	unsigned int rsvd3:4;
+	unsigned int src_int:4;
+	unsigned int rsvd2:4;
+	unsigned int dest_int:4;
+	unsigned int rsvd1:3;
+	unsigned int fwd1:1;
+	unsigned int vap:4;
+	unsigned int rsvd0:6;
+	unsigned int discard:1;
+	unsigned int fwd:1;
+
+} dlrx_rxpb_pmac_hdr_t;
+
+typedef struct {
+
+	unsigned int rsvd0:16;
+	unsigned int mpdu_status:8;
+	unsigned int fw_rx_desc_byte:8;
+
+} dlrx_rxpb_wlan_drv_hdr_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int peer_id:16;
+	unsigned int rsvd0:1;
+	unsigned int rv:1;
+	unsigned int fv:1;
+	unsigned int ext_tid:5;
+	unsigned int msg_type:8;
+
+	unsigned int mpdu_ranges_num:8;
+	unsigned int release_end_seqid:6;
+	unsigned int release_start_seqid:6;
+	unsigned int flush_end_seqid:6;
+	unsigned int flush_start_seqid:6;
+
+	unsigned int rsvd2;
+
+	unsigned int rsvd3;
+
+	unsigned int rsvd4;
+
+	unsigned int rsvd5;
+
+	unsigned int rsvd6;
+
+	unsigned int rsvd7;
+
+	unsigned int rsvd8;
+
+	unsigned int rsvd9;
+
+	unsigned int rsvd10;
+
+	unsigned int rsvd11:16;
+	unsigned int fw_rx_desc_byte_num:16;
+
+} dlrx_ind_msg_t;
+
+typedef struct {
+
+	unsigned int rsvd2_msdu3:2;
+	unsigned int inspect_msdu3:1;
+	unsigned int rsvd1_msdu3:3;
+	unsigned int forward_msdu3:1;
+	unsigned int discard_msdu3:1;
+	unsigned int rsvd2_msdu2:2;
+	unsigned int inspect_msdu2:1;
+	unsigned int rsvd1_msdu2:3;
+	unsigned int forward_msdu2:1;
+	unsigned int discard_msdu2:1;
+	unsigned int rsvd2_msdu1:2;
+	unsigned int inspect_msdu1:1;
+	unsigned int rsvd1_msdu1:3;
+	unsigned int forward_msdu1:1;
+	unsigned int discard_msdu1:1;
+	unsigned int rsvd2_msdu0:2;
+	unsigned int inspect_msdu0:1;
+	unsigned int rsvd1_msdu0:3;
+	unsigned int forward_msdu0:1;
+	unsigned int discard_msdu0:1;
+
+} fw_rx_desc_byte_t;
+
+typedef struct {
+
+	unsigned int mpdu_status_mpdu_range1:8;
+	unsigned int mpdu_cnt_mpdu_range1:8;
+	unsigned int mpdu_status_mpdu_range0:8;
+	unsigned int mpdu_cnt_mpdu_range0:8;
+
+} ctxt_mpdu_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int rsvd1:3;
+	unsigned int ext_tid:5;
+	unsigned int peer_id:16;
+	unsigned int msg_type:8;
+
+	unsigned int rsvd4:2;
+	unsigned int flush_end_seqid:6;
+	unsigned int rsvd3:2;
+	unsigned int flush_start_seqid:6;
+	unsigned int mpdu_status:8;
+	unsigned int rsvd2:8;
+
+} dlrx_flush_msg_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int peer_id:16;
+	unsigned int rsvd0:2;
+	unsigned int fv:1;
+	unsigned int ext_tid:5;
+	unsigned int msg_type:8;
+
+	unsigned int rsvd2:20;
+	unsigned int flush_end_seqid:6;
+	unsigned int flush_start_seqid:6;
+
+	unsigned int rsvd3:16;
+	unsigned int fw_rx_desc_byte_num:16;
+
+	unsigned int padding:24;
+	unsigned int fw_rx_desc_byte_msdu0:8;
+
+	unsigned int rsvd4:20;
+	unsigned int rxpb_ptr_read_index:12;
+
+} dlrx_frag_ind_msg_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int _res0:8;
+	unsigned int pb_ptr_rel_num:8;
+	unsigned int _res1:5;
+	unsigned int status:3;
+	unsigned int msg_type:8;
+
+	unsigned int free_txpb_ptr[128];
+
+} dlrx_tx_cmpl_msg_t;
+
+typedef struct {
+
+	unsigned int last_pn_dw0;
+
+	unsigned int last_pn_dw1;
+
+	unsigned int last_pn_dw2;
+
+	unsigned int last_pn_dw3;
+
+	unsigned int mcast_bcast:1;
+	unsigned int msdu_num:15;
+	unsigned int first_ptr:16;
+
+	unsigned int _dw_res0[63];
+
+} dlrx_ro_mainlist_t;
+
+typedef struct {
+
+	unsigned int pn_dw0;
+
+	unsigned int pn_dw1;
+
+	unsigned int pn_dw2;
+
+	unsigned int pn_dw3;
+
+	unsigned int next_ptr:12;
+	unsigned int rsvd0:1;
+	unsigned int inspect:1;
+	unsigned int discard:1;
+	unsigned int fwd:1;
+	unsigned int msdu_len:16;
+
+	unsigned int rxpb_ptr;
+
+} dlrx_ro_linklist_t;
+
+typedef struct {
+
+	unsigned int rsvd1:9;
+	unsigned int pb_ptr_rel_num:7;
+	unsigned int rsvd0:16;
+
+	unsigned int rxpb_ptr[127];
+
+} dlrx_rxpb_ptr_rel_msg_t;
+
+typedef struct {
+
+	unsigned int txpdu_low;
+
+	unsigned int txpdu_high;
+
+	unsigned int txbytes_low;
+
+	unsigned int txbytes_high;
+
+	unsigned int txdrop_low;
+
+	unsigned int txdrop_high;
+
+	unsigned int rx_fwd_pdu_low;
+
+	unsigned int rx_fwd_pdu_high;
+
+	unsigned int rx_fwd_bytes_low;
+
+	unsigned int rx_fwd_bytes_high;
+
+	unsigned int rx_inspect_pdu_low;
+
+	unsigned int rx_inspect_pdu_high;
+
+	unsigned int rx_inspect_bytes_low;
+
+	unsigned int rx_inspect_bytes_high;
+
+	unsigned int rx_discard_pdu_low;
+
+	unsigned int rx_discard_pdu_high;
+
+	unsigned int rx_discard_bytes_low;
+
+	unsigned int rx_discard_bytes_high;
+
+	unsigned int rx_pn_pdu_low;
+
+	unsigned int rx_pn_pdu_high;
+
+	unsigned int rx_pn_bytes_low;
+
+	unsigned int rx_pn_bytes_high;
+
+	unsigned int rx_drop_pdu_low;
+
+	unsigned int rx_drop_pdu_high;
+
+	unsigned int rx_drop_bytes_low;
+
+	unsigned int rx_drop_bytes_high;
+
+	unsigned int rx_rcv_pdu_low;
+
+	unsigned int rx_rcv_pdu_high;
+
+	unsigned int rx_rcv_bytes_low;
+
+	unsigned int rx_rcv_bytes_high;
+
+	unsigned int _dw_res0[2];
+
+} vap_data_mib_t;
+
+typedef struct {
+
+	unsigned int rx_gswip_packets_low;
+
+	unsigned int rx_gswip_packets_high;
+
+	unsigned int rx_gswip_bytes_low;
+
+	unsigned int rx_gswip_bytes_high;
+
+	unsigned int rx_wlan_packets_low;
+
+	unsigned int rx_wlan_packets_high;
+
+	unsigned int rx_wlan_bytes_low;
+
+	unsigned int rx_wlan_bytes_high;
+
+	unsigned int rx_protocol_stack_packets_low;
+
+	unsigned int rx_protocol_stack_packets_high;
+
+	unsigned int rx_protocol_stack_bytes_low;
+
+	unsigned int rx_protocol_stack_bytes_high;
+
+	unsigned int rx_forward_packets_low;
+
+	unsigned int rx_forward_packets_high;
+
+	unsigned int rx_forward_bytes_low;
+
+	unsigned int rx_forward_bytes_high;
+
+	unsigned int _dw_res0[16];
+
+} vap_data_misc_mib_t;
+
+typedef struct {
+
+	unsigned int rx_success_mpdu;
+
+	unsigned int rx_success_msdu;
+
+	unsigned int rx_error2_mpdu;
+
+	unsigned int rx_error2_msdu;
+
+	unsigned int rx_error3_mpdu;
+
+	unsigned int rx_error3_msdu;
+
+	unsigned int rx_error4_mpdu;
+
+	unsigned int rx_error4_msdu;
+
+	unsigned int rx_error5_mpdu;
+
+	unsigned int rx_error5_msdu;
+
+	unsigned int rx_error6_mpdu;
+
+	unsigned int rx_error6_msdu;
+
+	unsigned int rx_error7_mpdu;
+
+	unsigned int rx_error7_msdu;
+
+	unsigned int rx_error8_mpdu;
+
+	unsigned int rx_error8_msdu;
+
+	unsigned int rx_error9_mpdu;
+
+	unsigned int rx_error9_msdu;
+
+	unsigned int rx_errora_mpdu;
+
+	unsigned int rx_errora_msdu;
+
+	unsigned int rx_drop_error5;
+
+	unsigned int rx_drop_ro_linklist;
+
+	unsigned int rx_drop_congestion_packets;
+
+	unsigned int _dw_res0[9];
+
+} dlrx_data_mib_t;
+
+typedef struct {
+
+	unsigned int total_ce4_cpu_msg;
+
+	unsigned int total_ce5_cpu_msg;
+
+	unsigned int total_rx_ind_msg;
+
+	unsigned int total_rx_flush_msg;
+
+	unsigned int total_tx_cmp_msg;
+
+	unsigned int total_rx_ind_wlan_msg;
+
+	unsigned int total_rx_flush_wlan_msg;
+
+	unsigned int total_rx_frag_ind_msg;
+
+	unsigned int total_rx_invalid_tid_msg;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_msg_mib_t;
+
+typedef struct {
+
+	unsigned int total_chained_mpdu;
+
+	unsigned int total_chained_msdu;
+
+	unsigned int _dw_res0[14];
+
+} dlrx_misc_mib_t;
+
+typedef struct {
+
+	unsigned int vld3:1;
+	unsigned int peer3:7;
+	unsigned int vld2:1;
+	unsigned int peer2:7;
+	unsigned int vld1:1;
+	unsigned int peer1:7;
+	unsigned int vld0:1;
+	unsigned int peer0:7;
+
+} dlrx_cfg_peer_id_to_peer_map_t;
+
+typedef struct {
+
+	unsigned int rsvd0:25;
+	unsigned int acc_dis:1;
+	unsigned int sec_type:2;
+	unsigned int vap:4;
+
+} dlrx_cfg_peer_to_vap_pn_t;
+
+typedef struct {
+
+	unsigned int req:1;
+	unsigned int rsvd0:24;
+	unsigned int peer:7;
+
+} dlrx_cfg_peer_reset_t;
+
+typedef struct {
+
+	unsigned int req:1;
+	unsigned int rsvd0:24;
+	unsigned int peer:7;
+
+} dlrx_cfg_invalid_tid_t;
+
+typedef struct {
+
+	unsigned int allreq:1;
+	unsigned int vapreq:1;
+	unsigned int rsvd0:26;
+	unsigned int vap:4;
+
+} dlrx_cfg_mib_reset_t;
+
+typedef struct {
+
+	unsigned int vap7:4;
+	unsigned int vap6:4;
+	unsigned int vap5:4;
+	unsigned int vap4:4;
+	unsigned int vap3:4;
+	unsigned int vap2:4;
+	unsigned int vap1:4;
+	unsigned int vap0:4;
+
+} dlrx_cfg_vap2int_map1_t;
+
+typedef struct {
+
+	unsigned int vap15:4;
+	unsigned int vap14:4;
+	unsigned int vap13:4;
+	unsigned int vap12:4;
+	unsigned int vap11:4;
+	unsigned int vap10:4;
+	unsigned int vap9:4;
+	unsigned int vap8:4;
+
+} dlrx_cfg_vap2int_map2_t;
+
+typedef struct {
+
+	unsigned int rxpb_ptr;
+
+} dlrx_rxpb_ptr_ring_t;
+
+typedef struct {
+
+	unsigned int own:1;
+	unsigned int c:1;
+	unsigned int sop:1;
+	unsigned int eop:1;
+	unsigned int _res0:3;
+	unsigned int byte_off:2;
+	unsigned int _res1:7;
+	unsigned int data_len:16;
+
+	unsigned int _res2:2;
+	unsigned int data_ptr:27;
+	unsigned int _res3:2;
+	unsigned int data_ptr_rel:1;
+
+} dlrx_dma_des_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_dma;
+
+	unsigned int cfg_num_dma;
+
+	unsigned int txdes_index;
+
+	unsigned int rsvd0;
+
+} dlrx_cfg_ctxt_dma_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ce5buf;
+
+	unsigned int cfg_num_ce5buf;
+
+	unsigned int cfg_size_ce5buf;
+
+	unsigned int cfg_size_shift_ce5buf;
+
+	unsigned int cfg_badr_target_ce5_read_index;
+
+	unsigned int cfg_badr_target_ce5_write_index;
+
+	unsigned int local_ce5_read_index;
+
+	unsigned int local_ce5_parsing_index;
+
+	unsigned int ce5_msg_type;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_cfg_ctxt_ce5buf_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ce5des;
+
+	unsigned int cfg_num_ce5des;
+
+	unsigned int msg_len;
+
+	unsigned int _dw_res0;
+
+} dlrx_cfg_ctxt_ce5des_t;
+
+typedef struct {
+
+	unsigned int dest_ptr;
+
+	unsigned int meta_data:14;
+	unsigned int byte_swap:1;
+	unsigned int gather:1;
+	unsigned int nbytes:16;
+
+} dlrx_ce5des_format_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_cpu_ce5;
+
+	unsigned int cfg_num_cpu_ce5;
+
+	unsigned int cpu_ce5_read_index;
+
+	unsigned int cpu_ce5_write_index;
+
+	unsigned int cpu_ce5_msg_done;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_cfg_ctxt_cpu_ce5des_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_rxpb_ptr_ring;
+
+	unsigned int cfg_num_rxpb_ptr_ring;
+
+	unsigned int rxpb_ptr_write_index;
+
+	unsigned int rxpb_ptr_read_index;
+
+	unsigned int _dw_res0[4];
+
+} dlrx_cfg_ctxt_rxpb_ptr_ring_t;
+
+typedef struct {
+
+	unsigned int cfg_size_rxpktdes;
+
+	unsigned int cfg_offset_atten;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_ctxt_rxpb_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ro_linklist;
+
+	unsigned int cfg_num_ro_linklist;
+
+	unsigned int free_num_ro_linklist;
+
+	unsigned int cur_ro_des_ptr;
+
+	unsigned int cur_ro_des_index;
+
+	unsigned int prev_ro_des_index;
+
+	unsigned int ro_des_free_head_index;
+
+	unsigned int ro_des_free_tail_index;
+
+	unsigned int _dw_res0[8];
+
+} dlrx_cfg_ctxt_ro_linklist_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ro_mainlist;
+
+	unsigned int cfg_num_ro_mainlist;
+
+	unsigned int ro_mainlist_ptr;
+
+	unsigned int _dw_res0[5];
+
+} dlrx_cfg_ctxt_ro_mainlist_t;
+
+typedef struct {
+
+	unsigned int mpdu_cnt;
+
+	unsigned int mpdu_status;
+
+	unsigned int mpdu_range_index;
+
+	unsigned int mpdu_index;
+
+	unsigned int msdu_mpdu_index;
+
+	unsigned int msdu_index;
+
+	unsigned int peer;
+
+	unsigned int ext_tid;
+
+	unsigned int seqid;
+
+	unsigned int total_seqid;
+
+	unsigned int start_seqid;
+
+	unsigned int vap;
+
+	unsigned int sec_type;
+
+	unsigned int pn_pass;
+
+	unsigned int total_msdu;
+
+	unsigned int check_rv_pending;
+
+	unsigned int ext_ro_mainlist_ptr;
+
+	unsigned int ext_msg_ptr;
+
+	unsigned int peer_vld;
+
+	unsigned int acc_dis;
+
+	unsigned int _res0:26;
+	unsigned int inspect:1;
+	unsigned int _res1:3;
+	unsigned int forward:1;
+	unsigned int discard:1;
+
+	unsigned int _dw_res0[27];
+
+} dlrx_ctxt_msg_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_rel_msgbuf;
+
+	unsigned int cfg_num_rel_msgbuf;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_ctxt_rxpb_ptr_rel_msgbuf_t;
+
+typedef struct {
+
+	unsigned int dltx_enable;
+
+	unsigned int dlrx_enable;
+
+	unsigned int dlrx_pcie_base;
+
+	unsigned int dlrx_ddr_base;
+
+	unsigned int dlrx_cfg_ctxt_base;
+
+	unsigned int dlrx_cfg_ctxt_max_size;
+
+	unsigned int fw_ver_id;
+
+	unsigned int fw_feature;
+
+	unsigned int debug_print_enable;
+
+	unsigned int dlrx_cfg_unload;
+
+	unsigned int dlrx_qca_hw;
+
+	unsigned int dlrx_congestion_bit_timeout;
+
+	unsigned int dlrx_timout_count_th;
+
+	unsigned int dlrx_qca_hw_sub_type;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_global_t;
+
+typedef struct {
+
+	unsigned int cfg_peer_handler;
+
+	unsigned int cfg_peer_count;
+
+} dlrx_cfg_ctxt_peer_handler_t;
+
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_le.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_le.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_le.h
@@ -0,0 +1,854 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_DATA_STRUCTURE_LE_H_
+#define __DLRX_FW_DATA_STRUCTURE_LE_H_
+
+typedef struct {
+
+	unsigned int insig0:2;
+	unsigned int mcast_bcast:1;
+	unsigned int insig1:28;
+	unsigned int msdu_load_status:1;
+
+	unsigned int insig2:16;
+	unsigned int msdu_chain_num:8;
+	unsigned int insig3:8;
+
+	unsigned int insig4:16;
+	unsigned int seqid:12;
+	unsigned int insig5:4;
+
+	unsigned int pn_31_0;
+
+	unsigned int pn_47_32:16;
+	unsigned int insig6:16;
+
+	unsigned int msdu_len:14;
+	unsigned int insig7:18;
+
+	unsigned int insig8;
+
+	unsigned int insig9;
+
+	unsigned int insig10;
+
+	unsigned int insig11:16;
+	unsigned int pn_63_48:16;
+
+	unsigned int pn_95_64;
+
+	unsigned int pn_127_96;
+
+	unsigned int insig12:14;
+	unsigned int first_msdu:1;
+	unsigned int last_msdu:1;
+	unsigned int insig13:16;
+
+} dlrx_rxpb_hdr_peregrine_t;
+
+typedef struct {
+
+	unsigned int insig0:2;
+	unsigned int mcast_bcast:1;
+	unsigned int insig1:28;
+	unsigned int msdu_load_status:1;
+
+	unsigned int insig2:16;
+	unsigned int msdu_chain_num:8;
+	unsigned int insig3:8;
+
+	unsigned int insig4:16;
+	unsigned int seqid:12;
+	unsigned int insig5:4;
+
+	unsigned int pn_31_0;
+
+	unsigned int pn_47_32:16;
+	unsigned int insig6:16;
+
+	unsigned int msdu_len:14;
+	unsigned int insig7:18;
+
+	unsigned int insig8;
+
+	unsigned int insig9;
+
+	unsigned int insig10;
+
+	unsigned int insig11;
+
+	unsigned int insig12:16;
+	unsigned int pn_63_48:16;
+
+	unsigned int pn_95_64;
+
+	unsigned int pn_127_96;
+
+	unsigned int insig13:14;
+	unsigned int first_msdu:1;
+	unsigned int last_msdu:1;
+	unsigned int insig14:16;
+
+	unsigned int insig15;
+
+	unsigned int insig16;
+
+	unsigned int insig17;
+
+	unsigned int insig18:10;
+	unsigned int l3_header_padding:3;
+	unsigned int insig19:19;
+
+	unsigned int insig20;
+
+} dlrx_rxpb_hdr_beeliner_t;
+
+typedef struct {
+
+	unsigned int fwd:1;
+	unsigned int discard:1;
+	unsigned int rsvd0:6;
+	unsigned int vap:4;
+	unsigned int fwd1:1;
+	unsigned int rsvd1:3;
+	unsigned int dest_int:4;
+	unsigned int rsvd2:4;
+	unsigned int src_int:4;
+	unsigned int rsvd3:4;
+
+} dlrx_rxpb_pmac_hdr_t;
+
+typedef struct {
+
+	unsigned int fw_rx_desc_byte:8;
+	unsigned int mpdu_status:8;
+	unsigned int rsvd0:16;
+
+} dlrx_rxpb_wlan_drv_hdr_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int msg_type:8;
+	unsigned int ext_tid:5;
+	unsigned int fv:1;
+	unsigned int rv:1;
+	unsigned int rsvd0:1;
+	unsigned int peer_id:16;
+
+	unsigned int flush_start_seqid:6;
+	unsigned int flush_end_seqid:6;
+	unsigned int release_start_seqid:6;
+	unsigned int release_end_seqid:6;
+	unsigned int mpdu_ranges_num:8;
+
+	unsigned int rsvd2;
+
+	unsigned int rsvd3;
+
+	unsigned int rsvd4;
+
+	unsigned int rsvd5;
+
+	unsigned int rsvd6;
+
+	unsigned int rsvd7;
+
+	unsigned int rsvd8;
+
+	unsigned int rsvd9;
+
+	unsigned int rsvd10;
+
+	unsigned int fw_rx_desc_byte_num:16;
+	unsigned int rsvd11:16;
+
+} dlrx_ind_msg_t;
+
+typedef struct {
+
+	unsigned int discard_msdu0:1;
+	unsigned int forward_msdu0:1;
+	unsigned int rsvd1_msdu0:3;
+	unsigned int inspect_msdu0:1;
+	unsigned int rsvd2_msdu0:2;
+	unsigned int discard_msdu1:1;
+	unsigned int forward_msdu1:1;
+	unsigned int rsvd1_msdu1:3;
+	unsigned int inspect_msdu1:1;
+	unsigned int rsvd2_msdu1:2;
+	unsigned int discard_msdu2:1;
+	unsigned int forward_msdu2:1;
+	unsigned int rsvd1_msdu2:3;
+	unsigned int inspect_msdu2:1;
+	unsigned int rsvd2_msdu2:2;
+	unsigned int discard_msdu3:1;
+	unsigned int forward_msdu3:1;
+	unsigned int rsvd1_msdu3:3;
+	unsigned int inspect_msdu3:1;
+	unsigned int rsvd2_msdu3:2;
+
+} fw_rx_desc_byte_t;
+
+typedef struct {
+
+	unsigned int mpdu_cnt_mpdu_range0:8;
+	unsigned int mpdu_status_mpdu_range0:8;
+	unsigned int mpdu_cnt_mpdu_range1:8;
+	unsigned int mpdu_status_mpdu_range1:8;
+
+} ctxt_mpdu_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int msg_type:8;
+	unsigned int peer_id:16;
+	unsigned int ext_tid:5;
+	unsigned int rsvd1:3;
+
+	unsigned int rsvd2:8;
+	unsigned int mpdu_status:8;
+	unsigned int flush_start_seqid:6;
+	unsigned int rsvd3:2;
+	unsigned int flush_end_seqid:6;
+	unsigned int rsvd4:2;
+
+} dlrx_flush_msg_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int msg_type:8;
+	unsigned int ext_tid:5;
+	unsigned int fv:1;
+	unsigned int rsvd0:2;
+	unsigned int peer_id:16;
+
+	unsigned int flush_start_seqid:6;
+	unsigned int flush_end_seqid:6;
+	unsigned int rsvd2:20;
+
+	unsigned int fw_rx_desc_byte_num:16;
+	unsigned int rsvd3:16;
+
+	unsigned int fw_rx_desc_byte_msdu0:8;
+	unsigned int padding:24;
+
+	unsigned int rxpb_ptr_read_index:12;
+	unsigned int rsvd4:20;
+
+} dlrx_frag_ind_msg_t;
+
+typedef struct {
+
+	unsigned int htt_hdr[2];
+
+	unsigned int msg_type:8;
+	unsigned int status:3;
+	unsigned int _res0:5;
+	unsigned int pb_ptr_rel_num:8;
+	unsigned int _res1:8;
+
+	unsigned int free_txpb_ptr[128];
+
+} dlrx_tx_cmpl_msg_t;
+
+typedef struct {
+
+	unsigned int last_pn_dw0;
+
+	unsigned int last_pn_dw1;
+
+	unsigned int last_pn_dw2;
+
+	unsigned int last_pn_dw3;
+
+	unsigned int first_ptr:16;
+	unsigned int msdu_num:15;
+	unsigned int mcast_bcast:1;
+
+	unsigned int _dw_res0[63];
+
+} dlrx_ro_mainlist_t;
+
+typedef struct {
+
+	unsigned int pn_dw0;
+
+	unsigned int pn_dw1;
+
+	unsigned int pn_dw2;
+
+	unsigned int pn_dw3;
+
+	unsigned int msdu_len:16;
+	unsigned int fwd:1;
+	unsigned int discard:1;
+	unsigned int inspect:1;
+	unsigned int rsvd0:1;
+	unsigned int next_ptr:12;
+
+	unsigned int rxpb_ptr;
+
+} dlrx_ro_linklist_t;
+
+typedef struct {
+
+	unsigned int rsvd0:16;
+	unsigned int pb_ptr_rel_num:7;
+	unsigned int rsvd1:9;
+
+	unsigned int rxpb_ptr[127];
+
+} dlrx_rxpb_ptr_rel_msg_t;
+
+typedef struct {
+
+	unsigned int txpdu_low;
+
+	unsigned int txpdu_high;
+
+	unsigned int txbytes_low;
+
+	unsigned int txbytes_high;
+
+	unsigned int txdrop_low;
+
+	unsigned int txdrop_high;
+
+	unsigned int rx_fwd_pdu_low;
+
+	unsigned int rx_fwd_pdu_high;
+
+	unsigned int rx_fwd_bytes_low;
+
+	unsigned int rx_fwd_bytes_high;
+
+	unsigned int rx_inspect_pdu_low;
+
+	unsigned int rx_inspect_pdu_high;
+
+	unsigned int rx_inspect_bytes_low;
+
+	unsigned int rx_inspect_bytes_high;
+
+	unsigned int rx_discard_pdu_low;
+
+	unsigned int rx_discard_pdu_high;
+
+	unsigned int rx_discard_bytes_low;
+
+	unsigned int rx_discard_bytes_high;
+
+	unsigned int rx_pn_pdu_low;
+
+	unsigned int rx_pn_pdu_high;
+
+	unsigned int rx_pn_bytes_low;
+
+	unsigned int rx_pn_bytes_high;
+
+	unsigned int rx_drop_pdu_low;
+
+	unsigned int rx_drop_pdu_high;
+
+	unsigned int rx_drop_bytes_low;
+
+	unsigned int rx_drop_bytes_high;
+
+	unsigned int rx_rcv_pdu_low;
+
+	unsigned int rx_rcv_pdu_high;
+
+	unsigned int rx_rcv_bytes_low;
+
+	unsigned int rx_rcv_bytes_high;
+
+	unsigned int _dw_res0[2];
+
+} vap_data_mib_t;
+
+typedef struct {
+
+	unsigned int rx_gswip_packets_low;
+
+	unsigned int rx_gswip_packets_high;
+
+	unsigned int rx_gswip_bytes_low;
+
+	unsigned int rx_gswip_bytes_high;
+
+	unsigned int rx_wlan_packets_low;
+
+	unsigned int rx_wlan_packets_high;
+
+	unsigned int rx_wlan_bytes_low;
+
+	unsigned int rx_wlan_bytes_high;
+
+	unsigned int rx_protocol_stack_packets_low;
+
+	unsigned int rx_protocol_stack_packets_high;
+
+	unsigned int rx_protocol_stack_bytes_low;
+
+	unsigned int rx_protocol_stack_bytes_high;
+
+	unsigned int rx_forward_packets_low;
+
+	unsigned int rx_forward_packets_high;
+
+	unsigned int rx_forward_bytes_low;
+
+	unsigned int rx_forward_bytes_high;
+
+	unsigned int _dw_res0[16];
+
+} vap_data_misc_mib_t;
+
+typedef struct {
+
+	unsigned int rx_success_mpdu;
+
+	unsigned int rx_success_msdu;
+
+	unsigned int rx_error2_mpdu;
+
+	unsigned int rx_error2_msdu;
+
+	unsigned int rx_error3_mpdu;
+
+	unsigned int rx_error3_msdu;
+
+	unsigned int rx_error4_mpdu;
+
+	unsigned int rx_error4_msdu;
+
+	unsigned int rx_error5_mpdu;
+
+	unsigned int rx_error5_msdu;
+
+	unsigned int rx_error6_mpdu;
+
+	unsigned int rx_error6_msdu;
+
+	unsigned int rx_error7_mpdu;
+
+	unsigned int rx_error7_msdu;
+
+	unsigned int rx_error8_mpdu;
+
+	unsigned int rx_error8_msdu;
+
+	unsigned int rx_error9_mpdu;
+
+	unsigned int rx_error9_msdu;
+
+	unsigned int rx_errora_mpdu;
+
+	unsigned int rx_errora_msdu;
+
+	unsigned int rx_drop_error5;
+
+	unsigned int rx_drop_ro_linklist;
+
+	unsigned int rx_drop_congestion_packets;
+
+	unsigned int _dw_res0[9];
+
+} dlrx_data_mib_t;
+
+typedef struct {
+
+	unsigned int total_ce4_cpu_msg;
+
+	unsigned int total_ce5_cpu_msg;
+
+	unsigned int total_rx_ind_msg;
+
+	unsigned int total_rx_flush_msg;
+
+	unsigned int total_tx_cmp_msg;
+
+	unsigned int total_rx_ind_wlan_msg;
+
+	unsigned int total_rx_flush_wlan_msg;
+
+	unsigned int total_rx_frag_ind_msg;
+
+	unsigned int total_rx_invalid_tid_msg;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_msg_mib_t;
+
+typedef struct {
+
+	unsigned int total_chained_mpdu;
+
+	unsigned int total_chained_msdu;
+
+	unsigned int _dw_res0[14];
+
+} dlrx_misc_mib_t;
+
+typedef struct {
+
+	unsigned int peer0:7;
+	unsigned int vld0:1;
+	unsigned int peer1:7;
+	unsigned int vld1:1;
+	unsigned int peer2:7;
+	unsigned int vld2:1;
+	unsigned int peer3:7;
+	unsigned int vld3:1;
+
+} dlrx_cfg_peer_id_to_peer_map_t;
+
+typedef struct {
+
+	unsigned int vap:4;
+	unsigned int sec_type:2;
+	unsigned int acc_dis:1;
+	unsigned int rsvd0:25;
+
+} dlrx_cfg_peer_to_vap_pn_t;
+
+typedef struct {
+
+	unsigned int peer:7;
+	unsigned int rsvd0:24;
+	unsigned int req:1;
+
+} dlrx_cfg_peer_reset_t;
+
+typedef struct {
+
+	unsigned int peer:7;
+	unsigned int rsvd0:24;
+	unsigned int req:1;
+
+} dlrx_cfg_invalid_tid_t;
+
+typedef struct {
+
+	unsigned int vap:4;
+	unsigned int rsvd0:26;
+	unsigned int vapreq:1;
+	unsigned int allreq:1;
+
+} dlrx_cfg_mib_reset_t;
+
+typedef struct {
+
+	unsigned int vap0:4;
+	unsigned int vap1:4;
+	unsigned int vap2:4;
+	unsigned int vap3:4;
+	unsigned int vap4:4;
+	unsigned int vap5:4;
+	unsigned int vap6:4;
+	unsigned int vap7:4;
+
+} dlrx_cfg_vap2int_map1_t;
+
+typedef struct {
+
+	unsigned int vap8:4;
+	unsigned int vap9:4;
+	unsigned int vap10:4;
+	unsigned int vap11:4;
+	unsigned int vap12:4;
+	unsigned int vap13:4;
+	unsigned int vap14:4;
+	unsigned int vap15:4;
+
+} dlrx_cfg_vap2int_map2_t;
+
+typedef struct {
+
+	unsigned int rxpb_ptr;
+
+} dlrx_rxpb_ptr_ring_t;
+
+typedef struct {
+
+	unsigned int data_len:16;
+	unsigned int _res0:7;
+	unsigned int byte_off:2;
+	unsigned int _res1:3;
+	unsigned int eop:1;
+	unsigned int sop:1;
+	unsigned int c:1;
+	unsigned int own:1;
+
+	unsigned int data_ptr_rel:1;
+	unsigned int _res2:2;
+	unsigned int data_ptr:27;
+	unsigned int _res3:2;
+
+} dlrx_dma_des_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_dma;
+
+	unsigned int cfg_num_dma;
+
+	unsigned int txdes_index;
+
+	unsigned int rsvd0;
+
+} dlrx_cfg_ctxt_dma_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ce5buf;
+
+	unsigned int cfg_num_ce5buf;
+
+	unsigned int cfg_size_ce5buf;
+
+	unsigned int cfg_size_shift_ce5buf;
+
+	unsigned int cfg_badr_target_ce5_read_index;
+
+	unsigned int cfg_badr_target_ce5_write_index;
+
+	unsigned int local_ce5_read_index;
+
+	unsigned int local_ce5_parsing_index;
+
+	unsigned int ce5_msg_type;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_cfg_ctxt_ce5buf_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ce5des;
+
+	unsigned int cfg_num_ce5des;
+
+	unsigned int msg_len;
+
+	unsigned int _dw_res0;
+
+} dlrx_cfg_ctxt_ce5des_t;
+
+typedef struct {
+
+	unsigned int dest_ptr;
+
+	unsigned int nbytes:16;
+	unsigned int gather:1;
+	unsigned int byte_swap:1;
+	unsigned int meta_data:14;
+
+} dlrx_ce5des_format_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_cpu_ce5;
+
+	unsigned int cfg_num_cpu_ce5;
+
+	unsigned int cpu_ce5_read_index;
+
+	unsigned int cpu_ce5_write_index;
+
+	unsigned int cpu_ce5_msg_done;
+
+	unsigned int _dw_res0[3];
+
+} dlrx_cfg_ctxt_cpu_ce5des_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_rxpb_ptr_ring;
+
+	unsigned int cfg_num_rxpb_ptr_ring;
+
+	unsigned int rxpb_ptr_write_index;
+
+	unsigned int rxpb_ptr_read_index;
+
+	unsigned int _dw_res0[4];
+
+} dlrx_cfg_ctxt_rxpb_ptr_ring_t;
+
+typedef struct {
+
+	unsigned int cfg_size_rxpktdes;
+
+	unsigned int cfg_offset_atten;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_ctxt_rxpb_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ro_linklist;
+
+	unsigned int cfg_num_ro_linklist;
+
+	unsigned int free_num_ro_linklist;
+
+	unsigned int cur_ro_des_ptr;
+
+	unsigned int cur_ro_des_index;
+
+	unsigned int prev_ro_des_index;
+
+	unsigned int ro_des_free_head_index;
+
+	unsigned int ro_des_free_tail_index;
+
+	unsigned int _dw_res0[8];
+
+} dlrx_cfg_ctxt_ro_linklist_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_ro_mainlist;
+
+	unsigned int cfg_num_ro_mainlist;
+
+	unsigned int ro_mainlist_ptr;
+
+	unsigned int _dw_res0[5];
+
+} dlrx_cfg_ctxt_ro_mainlist_t;
+
+typedef struct {
+
+	unsigned int mpdu_cnt;
+
+	unsigned int mpdu_status;
+
+	unsigned int mpdu_range_index;
+
+	unsigned int mpdu_index;
+
+	unsigned int msdu_mpdu_index;
+
+	unsigned int msdu_index;
+
+	unsigned int peer;
+
+	unsigned int ext_tid;
+
+	unsigned int seqid;
+
+	unsigned int total_seqid;
+
+	unsigned int start_seqid;
+
+	unsigned int vap;
+
+	unsigned int sec_type;
+
+	unsigned int pn_pass;
+
+	unsigned int total_msdu;
+
+	unsigned int check_rv_pending;
+
+	unsigned int ext_ro_mainlist_ptr;
+
+	unsigned int ext_msg_ptr;
+
+	unsigned int peer_vld;
+
+	unsigned int acc_dis;
+
+	unsigned int discard:1;
+	unsigned int forward:1;
+	unsigned int _res0:3;
+	unsigned int inspect:1;
+	unsigned int _res1:26;
+
+	unsigned int _dw_res0[27];
+
+} dlrx_ctxt_msg_t;
+
+typedef struct {
+
+	unsigned int cfg_badr_rel_msgbuf;
+
+	unsigned int cfg_num_rel_msgbuf;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_ctxt_rxpb_ptr_rel_msgbuf_t;
+
+typedef struct {
+
+	unsigned int dltx_enable;
+
+	unsigned int dlrx_enable;
+
+	unsigned int dlrx_pcie_base;
+
+	unsigned int dlrx_ddr_base;
+
+	unsigned int dlrx_cfg_ctxt_base;
+
+	unsigned int dlrx_cfg_ctxt_max_size;
+
+	unsigned int fw_ver_id;
+
+	unsigned int fw_feature;
+
+	unsigned int debug_print_enable;
+
+	unsigned int dlrx_cfg_unload;
+
+	unsigned int dlrx_qca_hw;
+
+	unsigned int dlrx_congestion_bit_timeout;
+
+	unsigned int dlrx_timout_count_th;
+
+	unsigned int dlrx_qca_hw_sub_type;
+
+	unsigned int _dw_res0[2];
+
+} dlrx_cfg_global_t;
+
+typedef struct {
+
+	unsigned int cfg_peer_handler;
+
+	unsigned int cfg_peer_count;
+
+} dlrx_cfg_ctxt_peer_handler_t;
+
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_macro.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_macro.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_data_structure_macro.h
@@ -0,0 +1,9631 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_DATA_STRUCTURE_MACRO_H_
+#define __DLRX_FW_DATA_STRUCTURE_MACRO_H_
+
+/*-----------------------
+*Data Structure #defines
+*-----------------------*/
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig0 0
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig0 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig0 2
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig0 0x00000003
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig0 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig0) >> B_DLRX_RXPB_HDR_PEREGRINE_insig0))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig0) >> B_DLRX_RXPB_HDR_PEREGRINE_insig0))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig0 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig0));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig0 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig0) & M_DLRX_RXPB_HDR_PEREGRINE_insig0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig0));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig0) & M_DLRX_RXPB_HDR_PEREGRINE_insig0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig0 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig0)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig0)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast 0
+#define B_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast 2
+#define W_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast 1
+#define M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast 0x00000004
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast) >> B_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast))
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast) >> B_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast))
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast) & M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast) & M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_mcast_bcast_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_mcast_bcast)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig1 0
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig1 3
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig1 28
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig1 0x7ffffff8
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig1 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig1) >> B_DLRX_RXPB_HDR_PEREGRINE_insig1))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig1) >> B_DLRX_RXPB_HDR_PEREGRINE_insig1))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig1 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig1));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig1 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig1) & M_DLRX_RXPB_HDR_PEREGRINE_insig1);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig1));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig1) & M_DLRX_RXPB_HDR_PEREGRINE_insig1);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig1 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig1)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig1_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig1)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status 0
+#define B_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status 31
+#define W_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status 1
+#define M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status 0x80000000
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_load_status_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_load_status)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig2 1
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig2 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig2 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig2 0x0000ffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig2 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig2) >> B_DLRX_RXPB_HDR_PEREGRINE_insig2))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig2) >> B_DLRX_RXPB_HDR_PEREGRINE_insig2))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig2 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig2));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig2 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig2) & M_DLRX_RXPB_HDR_PEREGRINE_insig2);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig2));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig2) & M_DLRX_RXPB_HDR_PEREGRINE_insig2);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig2 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig2)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig2_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig2)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num 1
+#define B_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num 16
+#define W_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num 8
+#define M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num 0x00ff0000
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_chain_num)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig3 1
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig3 24
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig3 8
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig3 0xff000000
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig3 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig3) >> B_DLRX_RXPB_HDR_PEREGRINE_insig3))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig3) >> B_DLRX_RXPB_HDR_PEREGRINE_insig3))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig3 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig3));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig3 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig3) & M_DLRX_RXPB_HDR_PEREGRINE_insig3);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig3));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig3) & M_DLRX_RXPB_HDR_PEREGRINE_insig3);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig3 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig3)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig3_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig3)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig4 2
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig4 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig4 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig4 0x0000ffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig4 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig4) >> B_DLRX_RXPB_HDR_PEREGRINE_insig4))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig4) >> B_DLRX_RXPB_HDR_PEREGRINE_insig4))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig4 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig4));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig4 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig4) & M_DLRX_RXPB_HDR_PEREGRINE_insig4);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig4));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig4) & M_DLRX_RXPB_HDR_PEREGRINE_insig4);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig4 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig4)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig4_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig4)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_seqid 2
+#define B_DLRX_RXPB_HDR_PEREGRINE_seqid 16
+#define W_DLRX_RXPB_HDR_PEREGRINE_seqid 12
+#define M_DLRX_RXPB_HDR_PEREGRINE_seqid 0x0fff0000
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_seqid + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_seqid) >> B_DLRX_RXPB_HDR_PEREGRINE_seqid))
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_seqid) >> B_DLRX_RXPB_HDR_PEREGRINE_seqid))
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_seqid + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_seqid));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_seqid + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_seqid) & M_DLRX_RXPB_HDR_PEREGRINE_seqid);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_seqid));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_seqid) & M_DLRX_RXPB_HDR_PEREGRINE_seqid);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_seqid + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_seqid)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_seqid)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig5 2
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig5 28
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig5 4
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig5 0xf0000000
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig5 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig5) >> B_DLRX_RXPB_HDR_PEREGRINE_insig5))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig5) >> B_DLRX_RXPB_HDR_PEREGRINE_insig5))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig5 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig5));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig5 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig5) & M_DLRX_RXPB_HDR_PEREGRINE_insig5);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig5));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig5) & M_DLRX_RXPB_HDR_PEREGRINE_insig5);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig5 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig5)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig5_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig5)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 3
+#define B_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_31_0))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_31_0))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_31_0) & M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_31_0) & M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_31_0 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_31_0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_31_0)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 4
+#define B_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 0x0000ffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_47_32))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_47_32))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_47_32) & M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_47_32) & M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_47_32 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_47_32_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_47_32)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig6 4
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig6 16
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig6 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig6 0xffff0000
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig6 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig6) >> B_DLRX_RXPB_HDR_PEREGRINE_insig6))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig6) >> B_DLRX_RXPB_HDR_PEREGRINE_insig6))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig6 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig6));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig6 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig6) & M_DLRX_RXPB_HDR_PEREGRINE_insig6);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig6));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig6) & M_DLRX_RXPB_HDR_PEREGRINE_insig6);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig6 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig6)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig6_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig6)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_msdu_len 5
+#define B_DLRX_RXPB_HDR_PEREGRINE_msdu_len 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_msdu_len 14
+#define M_DLRX_RXPB_HDR_PEREGRINE_msdu_len 0x00003fff
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_len + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_len) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_len))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_len) >> B_DLRX_RXPB_HDR_PEREGRINE_msdu_len))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_len + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_len));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_len + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_len) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_len);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_len));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_msdu_len) & M_DLRX_RXPB_HDR_PEREGRINE_msdu_len);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_msdu_len + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_len)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_msdu_len_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_msdu_len)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig7 5
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig7 14
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig7 18
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig7 0xffffc000
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig7 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig7) >> B_DLRX_RXPB_HDR_PEREGRINE_insig7))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig7) >> B_DLRX_RXPB_HDR_PEREGRINE_insig7))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig7 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig7));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig7 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig7) & M_DLRX_RXPB_HDR_PEREGRINE_insig7);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig7));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig7) & M_DLRX_RXPB_HDR_PEREGRINE_insig7);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig7 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig7)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig7_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig7)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig8 6
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig8 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig8 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig8 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig8 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig8) >> B_DLRX_RXPB_HDR_PEREGRINE_insig8))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig8) >> B_DLRX_RXPB_HDR_PEREGRINE_insig8))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig8 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig8));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig8 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig8) & M_DLRX_RXPB_HDR_PEREGRINE_insig8);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig8));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig8) & M_DLRX_RXPB_HDR_PEREGRINE_insig8);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig8 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig8)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig8_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig8)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig9 7
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig9 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig9 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig9 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig9 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig9) >> B_DLRX_RXPB_HDR_PEREGRINE_insig9))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig9) >> B_DLRX_RXPB_HDR_PEREGRINE_insig9))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig9 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig9));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig9 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig9) & M_DLRX_RXPB_HDR_PEREGRINE_insig9);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig9));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig9) & M_DLRX_RXPB_HDR_PEREGRINE_insig9);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig9 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig9)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig9_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig9)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig10 8
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig10 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig10 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig10 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig10 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig10) >> B_DLRX_RXPB_HDR_PEREGRINE_insig10))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig10) >> B_DLRX_RXPB_HDR_PEREGRINE_insig10))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig10 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig10));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig10 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig10) & M_DLRX_RXPB_HDR_PEREGRINE_insig10);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig10));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig10) & M_DLRX_RXPB_HDR_PEREGRINE_insig10);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig10 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig10)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig10_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig10)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig11 9
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig11 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig11 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig11 0x0000ffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig11 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig11) >> B_DLRX_RXPB_HDR_PEREGRINE_insig11))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig11) >> B_DLRX_RXPB_HDR_PEREGRINE_insig11))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig11 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig11));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig11 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig11) & M_DLRX_RXPB_HDR_PEREGRINE_insig11);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig11));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig11) & M_DLRX_RXPB_HDR_PEREGRINE_insig11);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig11 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig11)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig11_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig11)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 9
+#define B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 16
+#define W_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 0xffff0000
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48) & M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48) & M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_63_48 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_63_48_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_63_48)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 10
+#define B_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_95_64))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_95_64))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_95_64) & M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_95_64) & M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_95_64 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_95_64_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_95_64)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 11
+#define B_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 32
+#define M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 0xffffffff
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_127_96))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96) >> B_DLRX_RXPB_HDR_PEREGRINE_pn_127_96))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_127_96) & M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_pn_127_96) & M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_pn_127_96 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_pn_127_96_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_pn_127_96)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig12 12
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig12 0
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig12 14
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig12 0x00003fff
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig12 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig12) >> B_DLRX_RXPB_HDR_PEREGRINE_insig12))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig12) >> B_DLRX_RXPB_HDR_PEREGRINE_insig12))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig12 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig12));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig12 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig12) & M_DLRX_RXPB_HDR_PEREGRINE_insig12);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig12));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig12) & M_DLRX_RXPB_HDR_PEREGRINE_insig12);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig12 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig12)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig12_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig12)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_first_msdu 12
+#define B_DLRX_RXPB_HDR_PEREGRINE_first_msdu 14
+#define W_DLRX_RXPB_HDR_PEREGRINE_first_msdu 1
+#define M_DLRX_RXPB_HDR_PEREGRINE_first_msdu 0x00004000
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_first_msdu + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_first_msdu) >> B_DLRX_RXPB_HDR_PEREGRINE_first_msdu))
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_first_msdu) >> B_DLRX_RXPB_HDR_PEREGRINE_first_msdu))
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_first_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_first_msdu));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_first_msdu + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_first_msdu) & M_DLRX_RXPB_HDR_PEREGRINE_first_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_first_msdu));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_first_msdu) & M_DLRX_RXPB_HDR_PEREGRINE_first_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_first_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_first_msdu)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_first_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_first_msdu)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_last_msdu 12
+#define B_DLRX_RXPB_HDR_PEREGRINE_last_msdu 15
+#define W_DLRX_RXPB_HDR_PEREGRINE_last_msdu 1
+#define M_DLRX_RXPB_HDR_PEREGRINE_last_msdu 0x00008000
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_last_msdu + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_last_msdu) >> B_DLRX_RXPB_HDR_PEREGRINE_last_msdu))
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_last_msdu) >> B_DLRX_RXPB_HDR_PEREGRINE_last_msdu))
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_last_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_last_msdu));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_last_msdu + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_last_msdu) & M_DLRX_RXPB_HDR_PEREGRINE_last_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_last_msdu));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_last_msdu) & M_DLRX_RXPB_HDR_PEREGRINE_last_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_last_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_last_msdu)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_last_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_last_msdu)))
+
+#define O_DLRX_RXPB_HDR_PEREGRINE_insig13 12
+#define B_DLRX_RXPB_HDR_PEREGRINE_insig13 16
+#define W_DLRX_RXPB_HDR_PEREGRINE_insig13 16
+#define M_DLRX_RXPB_HDR_PEREGRINE_insig13 0xffff0000
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig13 + offset)) & M_DLRX_RXPB_HDR_PEREGRINE_insig13) >> B_DLRX_RXPB_HDR_PEREGRINE_insig13))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_PEREGRINE_insig13) >> B_DLRX_RXPB_HDR_PEREGRINE_insig13))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig13 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig13));    \
+		(*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig13 + offset)) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig13) & M_DLRX_RXPB_HDR_PEREGRINE_insig13);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig13));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_PEREGRINE_insig13) & M_DLRX_RXPB_HDR_PEREGRINE_insig13);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_PEREGRINE_insig13 + offset)) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig13)))
+
+#define DLRX_RXPB_HDR_PEREGRINE_insig13_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_PEREGRINE_insig13)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig0 0
+#define B_DLRX_RXPB_HDR_BEELINER_insig0 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig0 2
+#define M_DLRX_RXPB_HDR_BEELINER_insig0 0x00000003
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig0 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig0) >> B_DLRX_RXPB_HDR_BEELINER_insig0))
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig0) >> B_DLRX_RXPB_HDR_BEELINER_insig0))
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig0 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig0));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig0 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig0) & M_DLRX_RXPB_HDR_BEELINER_insig0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig0));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig0) & M_DLRX_RXPB_HDR_BEELINER_insig0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig0 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig0)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig0)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_mcast_bcast 0
+#define B_DLRX_RXPB_HDR_BEELINER_mcast_bcast 2
+#define W_DLRX_RXPB_HDR_BEELINER_mcast_bcast 1
+#define M_DLRX_RXPB_HDR_BEELINER_mcast_bcast 0x00000004
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_mcast_bcast + offset)) & M_DLRX_RXPB_HDR_BEELINER_mcast_bcast) >> B_DLRX_RXPB_HDR_BEELINER_mcast_bcast))
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_mcast_bcast) >> B_DLRX_RXPB_HDR_BEELINER_mcast_bcast))
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_mcast_bcast + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_mcast_bcast));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_mcast_bcast + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_mcast_bcast) & M_DLRX_RXPB_HDR_BEELINER_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_mcast_bcast));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_mcast_bcast) & M_DLRX_RXPB_HDR_BEELINER_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_mcast_bcast + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_mcast_bcast)))
+
+#define DLRX_RXPB_HDR_BEELINER_mcast_bcast_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_mcast_bcast)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig1 0
+#define B_DLRX_RXPB_HDR_BEELINER_insig1 3
+#define W_DLRX_RXPB_HDR_BEELINER_insig1 28
+#define M_DLRX_RXPB_HDR_BEELINER_insig1 0x7ffffff8
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig1 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig1) >> B_DLRX_RXPB_HDR_BEELINER_insig1))
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig1) >> B_DLRX_RXPB_HDR_BEELINER_insig1))
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig1 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig1));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig1 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig1) & M_DLRX_RXPB_HDR_BEELINER_insig1);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig1));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig1) & M_DLRX_RXPB_HDR_BEELINER_insig1);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig1 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig1)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig1_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig1)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_msdu_load_status 0
+#define B_DLRX_RXPB_HDR_BEELINER_msdu_load_status 31
+#define W_DLRX_RXPB_HDR_BEELINER_msdu_load_status 1
+#define M_DLRX_RXPB_HDR_BEELINER_msdu_load_status 0x80000000
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_load_status + offset)) & M_DLRX_RXPB_HDR_BEELINER_msdu_load_status) >> B_DLRX_RXPB_HDR_BEELINER_msdu_load_status))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_msdu_load_status) >> B_DLRX_RXPB_HDR_BEELINER_msdu_load_status))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_load_status + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_load_status));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_load_status + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_load_status) & M_DLRX_RXPB_HDR_BEELINER_msdu_load_status);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_load_status));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_load_status) & M_DLRX_RXPB_HDR_BEELINER_msdu_load_status);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_load_status + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_load_status)))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_load_status_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_load_status)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig2 1
+#define B_DLRX_RXPB_HDR_BEELINER_insig2 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig2 16
+#define M_DLRX_RXPB_HDR_BEELINER_insig2 0x0000ffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig2 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig2) >> B_DLRX_RXPB_HDR_BEELINER_insig2))
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig2) >> B_DLRX_RXPB_HDR_BEELINER_insig2))
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig2 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig2));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig2 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig2) & M_DLRX_RXPB_HDR_BEELINER_insig2);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig2));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig2) & M_DLRX_RXPB_HDR_BEELINER_insig2);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig2 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig2)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig2_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig2)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_msdu_chain_num 1
+#define B_DLRX_RXPB_HDR_BEELINER_msdu_chain_num 16
+#define W_DLRX_RXPB_HDR_BEELINER_msdu_chain_num 8
+#define M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num 0x00ff0000
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_chain_num + offset)) & M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num) >> B_DLRX_RXPB_HDR_BEELINER_msdu_chain_num))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num) >> B_DLRX_RXPB_HDR_BEELINER_msdu_chain_num))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_chain_num + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_chain_num + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_chain_num) & M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_chain_num) & M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_chain_num + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num)))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_chain_num_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_chain_num)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig3 1
+#define B_DLRX_RXPB_HDR_BEELINER_insig3 24
+#define W_DLRX_RXPB_HDR_BEELINER_insig3 8
+#define M_DLRX_RXPB_HDR_BEELINER_insig3 0xff000000
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig3 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig3) >> B_DLRX_RXPB_HDR_BEELINER_insig3))
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig3) >> B_DLRX_RXPB_HDR_BEELINER_insig3))
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig3 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig3));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig3 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig3) & M_DLRX_RXPB_HDR_BEELINER_insig3);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig3));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig3) & M_DLRX_RXPB_HDR_BEELINER_insig3);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig3 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig3)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig3_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig3)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig4 2
+#define B_DLRX_RXPB_HDR_BEELINER_insig4 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig4 16
+#define M_DLRX_RXPB_HDR_BEELINER_insig4 0x0000ffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig4 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig4) >> B_DLRX_RXPB_HDR_BEELINER_insig4))
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig4) >> B_DLRX_RXPB_HDR_BEELINER_insig4))
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig4 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig4));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig4 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig4) & M_DLRX_RXPB_HDR_BEELINER_insig4);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig4));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig4) & M_DLRX_RXPB_HDR_BEELINER_insig4);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig4 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig4)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig4_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig4)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_seqid 2
+#define B_DLRX_RXPB_HDR_BEELINER_seqid 16
+#define W_DLRX_RXPB_HDR_BEELINER_seqid 12
+#define M_DLRX_RXPB_HDR_BEELINER_seqid 0x0fff0000
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_seqid + offset)) & M_DLRX_RXPB_HDR_BEELINER_seqid) >> B_DLRX_RXPB_HDR_BEELINER_seqid))
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_seqid) >> B_DLRX_RXPB_HDR_BEELINER_seqid))
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_seqid + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_seqid));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_seqid + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_seqid) & M_DLRX_RXPB_HDR_BEELINER_seqid);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_seqid));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_seqid) & M_DLRX_RXPB_HDR_BEELINER_seqid);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_seqid + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_seqid)))
+
+#define DLRX_RXPB_HDR_BEELINER_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_seqid)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig5 2
+#define B_DLRX_RXPB_HDR_BEELINER_insig5 28
+#define W_DLRX_RXPB_HDR_BEELINER_insig5 4
+#define M_DLRX_RXPB_HDR_BEELINER_insig5 0xf0000000
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig5 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig5) >> B_DLRX_RXPB_HDR_BEELINER_insig5))
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig5) >> B_DLRX_RXPB_HDR_BEELINER_insig5))
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig5 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig5));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig5 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig5) & M_DLRX_RXPB_HDR_BEELINER_insig5);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig5));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig5) & M_DLRX_RXPB_HDR_BEELINER_insig5);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig5 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig5)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig5_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig5)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_pn_31_0 3
+#define B_DLRX_RXPB_HDR_BEELINER_pn_31_0 0
+#define W_DLRX_RXPB_HDR_BEELINER_pn_31_0 32
+#define M_DLRX_RXPB_HDR_BEELINER_pn_31_0 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_31_0 + offset)) & M_DLRX_RXPB_HDR_BEELINER_pn_31_0) >> B_DLRX_RXPB_HDR_BEELINER_pn_31_0))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_pn_31_0) >> B_DLRX_RXPB_HDR_BEELINER_pn_31_0))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_31_0 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_31_0));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_31_0 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_31_0) & M_DLRX_RXPB_HDR_BEELINER_pn_31_0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_31_0));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_31_0) & M_DLRX_RXPB_HDR_BEELINER_pn_31_0);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_31_0 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_31_0)))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_31_0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_31_0)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_pn_47_32 4
+#define B_DLRX_RXPB_HDR_BEELINER_pn_47_32 0
+#define W_DLRX_RXPB_HDR_BEELINER_pn_47_32 16
+#define M_DLRX_RXPB_HDR_BEELINER_pn_47_32 0x0000ffff
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_47_32 + offset)) & M_DLRX_RXPB_HDR_BEELINER_pn_47_32) >> B_DLRX_RXPB_HDR_BEELINER_pn_47_32))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_pn_47_32) >> B_DLRX_RXPB_HDR_BEELINER_pn_47_32))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_47_32 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_47_32));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_47_32 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_47_32) & M_DLRX_RXPB_HDR_BEELINER_pn_47_32);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_47_32));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_47_32) & M_DLRX_RXPB_HDR_BEELINER_pn_47_32);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_47_32 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_47_32)))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_47_32_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_47_32)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig6 4
+#define B_DLRX_RXPB_HDR_BEELINER_insig6 16
+#define W_DLRX_RXPB_HDR_BEELINER_insig6 16
+#define M_DLRX_RXPB_HDR_BEELINER_insig6 0xffff0000
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig6 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig6) >> B_DLRX_RXPB_HDR_BEELINER_insig6))
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig6) >> B_DLRX_RXPB_HDR_BEELINER_insig6))
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig6 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig6));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig6 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig6) & M_DLRX_RXPB_HDR_BEELINER_insig6);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig6));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig6) & M_DLRX_RXPB_HDR_BEELINER_insig6);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig6 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig6)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig6_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig6)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_msdu_len 5
+#define B_DLRX_RXPB_HDR_BEELINER_msdu_len 0
+#define W_DLRX_RXPB_HDR_BEELINER_msdu_len 14
+#define M_DLRX_RXPB_HDR_BEELINER_msdu_len 0x00003fff
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_len + offset)) & M_DLRX_RXPB_HDR_BEELINER_msdu_len) >> B_DLRX_RXPB_HDR_BEELINER_msdu_len))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_msdu_len) >> B_DLRX_RXPB_HDR_BEELINER_msdu_len))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_len + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_len));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_len + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_len) & M_DLRX_RXPB_HDR_BEELINER_msdu_len);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_len));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_msdu_len) & M_DLRX_RXPB_HDR_BEELINER_msdu_len);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_msdu_len + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_len)))
+
+#define DLRX_RXPB_HDR_BEELINER_msdu_len_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_msdu_len)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig7 5
+#define B_DLRX_RXPB_HDR_BEELINER_insig7 14
+#define W_DLRX_RXPB_HDR_BEELINER_insig7 18
+#define M_DLRX_RXPB_HDR_BEELINER_insig7 0xffffc000
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig7 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig7) >> B_DLRX_RXPB_HDR_BEELINER_insig7))
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig7) >> B_DLRX_RXPB_HDR_BEELINER_insig7))
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig7 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig7));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig7 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig7) & M_DLRX_RXPB_HDR_BEELINER_insig7);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig7));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig7) & M_DLRX_RXPB_HDR_BEELINER_insig7);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig7 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig7)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig7_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig7)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig8 6
+#define B_DLRX_RXPB_HDR_BEELINER_insig8 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig8 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig8 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig8 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig8) >> B_DLRX_RXPB_HDR_BEELINER_insig8))
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig8) >> B_DLRX_RXPB_HDR_BEELINER_insig8))
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig8 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig8));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig8 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig8) & M_DLRX_RXPB_HDR_BEELINER_insig8);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig8));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig8) & M_DLRX_RXPB_HDR_BEELINER_insig8);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig8 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig8)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig8_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig8)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig9 7
+#define B_DLRX_RXPB_HDR_BEELINER_insig9 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig9 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig9 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig9 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig9) >> B_DLRX_RXPB_HDR_BEELINER_insig9))
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig9) >> B_DLRX_RXPB_HDR_BEELINER_insig9))
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig9 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig9));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig9 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig9) & M_DLRX_RXPB_HDR_BEELINER_insig9);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig9));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig9) & M_DLRX_RXPB_HDR_BEELINER_insig9);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig9 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig9)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig9_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig9)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig10 8
+#define B_DLRX_RXPB_HDR_BEELINER_insig10 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig10 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig10 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig10 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig10) >> B_DLRX_RXPB_HDR_BEELINER_insig10))
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig10) >> B_DLRX_RXPB_HDR_BEELINER_insig10))
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig10 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig10));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig10 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig10) & M_DLRX_RXPB_HDR_BEELINER_insig10);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig10));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig10) & M_DLRX_RXPB_HDR_BEELINER_insig10);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig10 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig10)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig10_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig10)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig11 9
+#define B_DLRX_RXPB_HDR_BEELINER_insig11 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig11 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig11 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig11 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig11) >> B_DLRX_RXPB_HDR_BEELINER_insig11))
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig11) >> B_DLRX_RXPB_HDR_BEELINER_insig11))
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig11 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig11));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig11 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig11) & M_DLRX_RXPB_HDR_BEELINER_insig11);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig11));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig11) & M_DLRX_RXPB_HDR_BEELINER_insig11);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig11 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig11)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig11_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig11)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig12 10
+#define B_DLRX_RXPB_HDR_BEELINER_insig12 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig12 16
+#define M_DLRX_RXPB_HDR_BEELINER_insig12 0x0000ffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig12 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig12) >> B_DLRX_RXPB_HDR_BEELINER_insig12))
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig12) >> B_DLRX_RXPB_HDR_BEELINER_insig12))
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig12 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig12));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig12 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig12) & M_DLRX_RXPB_HDR_BEELINER_insig12);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig12));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig12) & M_DLRX_RXPB_HDR_BEELINER_insig12);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig12 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig12)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig12_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig12)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_pn_63_48 10
+#define B_DLRX_RXPB_HDR_BEELINER_pn_63_48 16
+#define W_DLRX_RXPB_HDR_BEELINER_pn_63_48 16
+#define M_DLRX_RXPB_HDR_BEELINER_pn_63_48 0xffff0000
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_63_48 + offset)) & M_DLRX_RXPB_HDR_BEELINER_pn_63_48) >> B_DLRX_RXPB_HDR_BEELINER_pn_63_48))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_pn_63_48) >> B_DLRX_RXPB_HDR_BEELINER_pn_63_48))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_63_48 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_63_48));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_63_48 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_63_48) & M_DLRX_RXPB_HDR_BEELINER_pn_63_48);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_63_48));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_63_48) & M_DLRX_RXPB_HDR_BEELINER_pn_63_48);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_63_48 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_63_48)))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_63_48_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_63_48)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_pn_95_64 11
+#define B_DLRX_RXPB_HDR_BEELINER_pn_95_64 0
+#define W_DLRX_RXPB_HDR_BEELINER_pn_95_64 32
+#define M_DLRX_RXPB_HDR_BEELINER_pn_95_64 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_95_64 + offset)) & M_DLRX_RXPB_HDR_BEELINER_pn_95_64) >> B_DLRX_RXPB_HDR_BEELINER_pn_95_64))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_pn_95_64) >> B_DLRX_RXPB_HDR_BEELINER_pn_95_64))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_95_64 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_95_64));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_95_64 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_95_64) & M_DLRX_RXPB_HDR_BEELINER_pn_95_64);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_95_64));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_95_64) & M_DLRX_RXPB_HDR_BEELINER_pn_95_64);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_95_64 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_95_64)))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_95_64_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_95_64)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_pn_127_96 12
+#define B_DLRX_RXPB_HDR_BEELINER_pn_127_96 0
+#define W_DLRX_RXPB_HDR_BEELINER_pn_127_96 32
+#define M_DLRX_RXPB_HDR_BEELINER_pn_127_96 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_127_96 + offset)) & M_DLRX_RXPB_HDR_BEELINER_pn_127_96) >> B_DLRX_RXPB_HDR_BEELINER_pn_127_96))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_pn_127_96) >> B_DLRX_RXPB_HDR_BEELINER_pn_127_96))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_127_96 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_127_96));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_pn_127_96 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_127_96) & M_DLRX_RXPB_HDR_BEELINER_pn_127_96);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_127_96));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_pn_127_96) & M_DLRX_RXPB_HDR_BEELINER_pn_127_96);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_pn_127_96 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_127_96)))
+
+#define DLRX_RXPB_HDR_BEELINER_pn_127_96_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_pn_127_96)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig13 13
+#define B_DLRX_RXPB_HDR_BEELINER_insig13 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig13 14
+#define M_DLRX_RXPB_HDR_BEELINER_insig13 0x00003fff
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig13 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig13) >> B_DLRX_RXPB_HDR_BEELINER_insig13))
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig13) >> B_DLRX_RXPB_HDR_BEELINER_insig13))
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig13 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig13));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig13 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig13) & M_DLRX_RXPB_HDR_BEELINER_insig13);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig13));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig13) & M_DLRX_RXPB_HDR_BEELINER_insig13);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig13 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig13)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig13_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig13)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_first_msdu 13
+#define B_DLRX_RXPB_HDR_BEELINER_first_msdu 14
+#define W_DLRX_RXPB_HDR_BEELINER_first_msdu 1
+#define M_DLRX_RXPB_HDR_BEELINER_first_msdu 0x00004000
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_first_msdu + offset)) & M_DLRX_RXPB_HDR_BEELINER_first_msdu) >> B_DLRX_RXPB_HDR_BEELINER_first_msdu))
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_first_msdu) >> B_DLRX_RXPB_HDR_BEELINER_first_msdu))
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_first_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_first_msdu));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_first_msdu + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_first_msdu) & M_DLRX_RXPB_HDR_BEELINER_first_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_first_msdu));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_first_msdu) & M_DLRX_RXPB_HDR_BEELINER_first_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_first_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_first_msdu)))
+
+#define DLRX_RXPB_HDR_BEELINER_first_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_first_msdu)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_last_msdu 13
+#define B_DLRX_RXPB_HDR_BEELINER_last_msdu 15
+#define W_DLRX_RXPB_HDR_BEELINER_last_msdu 1
+#define M_DLRX_RXPB_HDR_BEELINER_last_msdu 0x00008000
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_last_msdu + offset)) & M_DLRX_RXPB_HDR_BEELINER_last_msdu) >> B_DLRX_RXPB_HDR_BEELINER_last_msdu))
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_last_msdu) >> B_DLRX_RXPB_HDR_BEELINER_last_msdu))
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_last_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_last_msdu));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_last_msdu + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_last_msdu) & M_DLRX_RXPB_HDR_BEELINER_last_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_last_msdu));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_last_msdu) & M_DLRX_RXPB_HDR_BEELINER_last_msdu);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_last_msdu + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_last_msdu)))
+
+#define DLRX_RXPB_HDR_BEELINER_last_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_last_msdu)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig14 13
+#define B_DLRX_RXPB_HDR_BEELINER_insig14 16
+#define W_DLRX_RXPB_HDR_BEELINER_insig14 16
+#define M_DLRX_RXPB_HDR_BEELINER_insig14 0xffff0000
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig14 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig14) >> B_DLRX_RXPB_HDR_BEELINER_insig14))
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig14) >> B_DLRX_RXPB_HDR_BEELINER_insig14))
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig14 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig14));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig14 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig14) & M_DLRX_RXPB_HDR_BEELINER_insig14);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig14));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig14) & M_DLRX_RXPB_HDR_BEELINER_insig14);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig14 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig14)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig14_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig14)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig15 14
+#define B_DLRX_RXPB_HDR_BEELINER_insig15 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig15 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig15 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig15 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig15) >> B_DLRX_RXPB_HDR_BEELINER_insig15))
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig15) >> B_DLRX_RXPB_HDR_BEELINER_insig15))
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig15 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig15));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig15 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig15) & M_DLRX_RXPB_HDR_BEELINER_insig15);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig15));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig15) & M_DLRX_RXPB_HDR_BEELINER_insig15);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig15 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig15)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig15_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig15)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig16 15
+#define B_DLRX_RXPB_HDR_BEELINER_insig16 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig16 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig16 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig16 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig16) >> B_DLRX_RXPB_HDR_BEELINER_insig16))
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig16) >> B_DLRX_RXPB_HDR_BEELINER_insig16))
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig16 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig16));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig16 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig16) & M_DLRX_RXPB_HDR_BEELINER_insig16);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig16));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig16) & M_DLRX_RXPB_HDR_BEELINER_insig16);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig16 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig16)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig16_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig16)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig17 16
+#define B_DLRX_RXPB_HDR_BEELINER_insig17 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig17 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig17 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig17 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig17) >> B_DLRX_RXPB_HDR_BEELINER_insig17))
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig17) >> B_DLRX_RXPB_HDR_BEELINER_insig17))
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig17 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig17));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig17 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig17) & M_DLRX_RXPB_HDR_BEELINER_insig17);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig17));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig17) & M_DLRX_RXPB_HDR_BEELINER_insig17);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig17 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig17)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig17_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig17)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig18 17
+#define B_DLRX_RXPB_HDR_BEELINER_insig18 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig18 10
+#define M_DLRX_RXPB_HDR_BEELINER_insig18 0x000003ff
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig18 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig18) >> B_DLRX_RXPB_HDR_BEELINER_insig18))
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig18) >> B_DLRX_RXPB_HDR_BEELINER_insig18))
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig18 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig18));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig18 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig18) & M_DLRX_RXPB_HDR_BEELINER_insig18);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig18));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig18) & M_DLRX_RXPB_HDR_BEELINER_insig18);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig18 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig18)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig18_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig18)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_l3_header_padding 17
+#define B_DLRX_RXPB_HDR_BEELINER_l3_header_padding 10
+#define W_DLRX_RXPB_HDR_BEELINER_l3_header_padding 3
+#define M_DLRX_RXPB_HDR_BEELINER_l3_header_padding 0x00001c00
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_l3_header_padding + offset)) & M_DLRX_RXPB_HDR_BEELINER_l3_header_padding) >> B_DLRX_RXPB_HDR_BEELINER_l3_header_padding))
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_l3_header_padding) >> B_DLRX_RXPB_HDR_BEELINER_l3_header_padding))
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_l3_header_padding + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_l3_header_padding));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_l3_header_padding + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_l3_header_padding) & M_DLRX_RXPB_HDR_BEELINER_l3_header_padding);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_l3_header_padding));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_l3_header_padding) & M_DLRX_RXPB_HDR_BEELINER_l3_header_padding);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_l3_header_padding + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_l3_header_padding)))
+
+#define DLRX_RXPB_HDR_BEELINER_l3_header_padding_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_l3_header_padding)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig19 17
+#define B_DLRX_RXPB_HDR_BEELINER_insig19 13
+#define W_DLRX_RXPB_HDR_BEELINER_insig19 19
+#define M_DLRX_RXPB_HDR_BEELINER_insig19 0xffffe000
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig19 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig19) >> B_DLRX_RXPB_HDR_BEELINER_insig19))
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig19) >> B_DLRX_RXPB_HDR_BEELINER_insig19))
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig19 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig19));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig19 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig19) & M_DLRX_RXPB_HDR_BEELINER_insig19);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig19));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig19) & M_DLRX_RXPB_HDR_BEELINER_insig19);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig19 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig19)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig19_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig19)))
+
+#define O_DLRX_RXPB_HDR_BEELINER_insig20 18
+#define B_DLRX_RXPB_HDR_BEELINER_insig20 0
+#define W_DLRX_RXPB_HDR_BEELINER_insig20 32
+#define M_DLRX_RXPB_HDR_BEELINER_insig20 0xffffffff
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_HDR_BEELINER_insig20 + offset)) & M_DLRX_RXPB_HDR_BEELINER_insig20) >> B_DLRX_RXPB_HDR_BEELINER_insig20))
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_get_direct(dword)	((((dword) & M_DLRX_RXPB_HDR_BEELINER_insig20) >> B_DLRX_RXPB_HDR_BEELINER_insig20))
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig20 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig20));    \
+		(*(base + O_DLRX_RXPB_HDR_BEELINER_insig20 + offset)) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig20) & M_DLRX_RXPB_HDR_BEELINER_insig20);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig20));    \
+		(dword) |= ((val << B_DLRX_RXPB_HDR_BEELINER_insig20) & M_DLRX_RXPB_HDR_BEELINER_insig20);    \
+	} while (0)
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_HDR_BEELINER_insig20 + offset)) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig20)))
+
+#define DLRX_RXPB_HDR_BEELINER_insig20_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_HDR_BEELINER_insig20)))
+
+#define O_DLRX_RXPB_PMAC_HDR_fwd 0
+#define B_DLRX_RXPB_PMAC_HDR_fwd 0
+#define W_DLRX_RXPB_PMAC_HDR_fwd 1
+#define M_DLRX_RXPB_PMAC_HDR_fwd 0x00000001
+
+#define DLRX_RXPB_PMAC_HDR_fwd_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_fwd + offset)) & M_DLRX_RXPB_PMAC_HDR_fwd) >> B_DLRX_RXPB_PMAC_HDR_fwd))
+
+#define DLRX_RXPB_PMAC_HDR_fwd_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_fwd) >> B_DLRX_RXPB_PMAC_HDR_fwd))
+
+#define DLRX_RXPB_PMAC_HDR_fwd_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_fwd + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_fwd + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_fwd) & M_DLRX_RXPB_PMAC_HDR_fwd);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_fwd_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_fwd) & M_DLRX_RXPB_PMAC_HDR_fwd);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_fwd_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_fwd + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd)))
+
+#define DLRX_RXPB_PMAC_HDR_fwd_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd)))
+
+#define O_DLRX_RXPB_PMAC_HDR_discard 0
+#define B_DLRX_RXPB_PMAC_HDR_discard 1
+#define W_DLRX_RXPB_PMAC_HDR_discard 1
+#define M_DLRX_RXPB_PMAC_HDR_discard 0x00000002
+
+#define DLRX_RXPB_PMAC_HDR_discard_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_discard + offset)) & M_DLRX_RXPB_PMAC_HDR_discard) >> B_DLRX_RXPB_PMAC_HDR_discard))
+
+#define DLRX_RXPB_PMAC_HDR_discard_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_discard) >> B_DLRX_RXPB_PMAC_HDR_discard))
+
+#define DLRX_RXPB_PMAC_HDR_discard_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_discard + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_discard));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_discard + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_discard) & M_DLRX_RXPB_PMAC_HDR_discard);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_discard_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_discard));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_discard) & M_DLRX_RXPB_PMAC_HDR_discard);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_discard_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_discard + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_discard)))
+
+#define DLRX_RXPB_PMAC_HDR_discard_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_discard)))
+
+#define O_DLRX_RXPB_PMAC_HDR_rsvd0 0
+#define B_DLRX_RXPB_PMAC_HDR_rsvd0 2
+#define W_DLRX_RXPB_PMAC_HDR_rsvd0 6
+#define M_DLRX_RXPB_PMAC_HDR_rsvd0 0x000000fc
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd0 + offset)) & M_DLRX_RXPB_PMAC_HDR_rsvd0) >> B_DLRX_RXPB_PMAC_HDR_rsvd0))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_rsvd0) >> B_DLRX_RXPB_PMAC_HDR_rsvd0))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd0 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd0));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd0 + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd0) & M_DLRX_RXPB_PMAC_HDR_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd0));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd0) & M_DLRX_RXPB_PMAC_HDR_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd0 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd0)))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd0)))
+
+#define O_DLRX_RXPB_PMAC_HDR_vap 0
+#define B_DLRX_RXPB_PMAC_HDR_vap 8
+#define W_DLRX_RXPB_PMAC_HDR_vap 4
+#define M_DLRX_RXPB_PMAC_HDR_vap 0x00000f00
+
+#define DLRX_RXPB_PMAC_HDR_vap_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_vap + offset)) & M_DLRX_RXPB_PMAC_HDR_vap) >> B_DLRX_RXPB_PMAC_HDR_vap))
+
+#define DLRX_RXPB_PMAC_HDR_vap_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_vap) >> B_DLRX_RXPB_PMAC_HDR_vap))
+
+#define DLRX_RXPB_PMAC_HDR_vap_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_vap + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_vap));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_vap + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_vap) & M_DLRX_RXPB_PMAC_HDR_vap);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_vap_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_vap));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_vap) & M_DLRX_RXPB_PMAC_HDR_vap);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_vap_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_vap + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_vap)))
+
+#define DLRX_RXPB_PMAC_HDR_vap_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_vap)))
+
+#define O_DLRX_RXPB_PMAC_HDR_fwd1 0
+#define B_DLRX_RXPB_PMAC_HDR_fwd1 12
+#define W_DLRX_RXPB_PMAC_HDR_fwd1 1
+#define M_DLRX_RXPB_PMAC_HDR_fwd1 0x00001000
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_fwd1 + offset)) & M_DLRX_RXPB_PMAC_HDR_fwd1) >> B_DLRX_RXPB_PMAC_HDR_fwd1))
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_fwd1) >> B_DLRX_RXPB_PMAC_HDR_fwd1))
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_fwd1 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd1));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_fwd1 + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_fwd1) & M_DLRX_RXPB_PMAC_HDR_fwd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd1));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_fwd1) & M_DLRX_RXPB_PMAC_HDR_fwd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_fwd1 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd1)))
+
+#define DLRX_RXPB_PMAC_HDR_fwd1_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_fwd1)))
+
+#define O_DLRX_RXPB_PMAC_HDR_rsvd1 0
+#define B_DLRX_RXPB_PMAC_HDR_rsvd1 13
+#define W_DLRX_RXPB_PMAC_HDR_rsvd1 3
+#define M_DLRX_RXPB_PMAC_HDR_rsvd1 0x0000e000
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd1 + offset)) & M_DLRX_RXPB_PMAC_HDR_rsvd1) >> B_DLRX_RXPB_PMAC_HDR_rsvd1))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_rsvd1) >> B_DLRX_RXPB_PMAC_HDR_rsvd1))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd1 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd1));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd1 + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd1) & M_DLRX_RXPB_PMAC_HDR_rsvd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd1));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd1) & M_DLRX_RXPB_PMAC_HDR_rsvd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd1 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd1)))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd1_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd1)))
+
+#define O_DLRX_RXPB_PMAC_HDR_dest_int 0
+#define B_DLRX_RXPB_PMAC_HDR_dest_int 16
+#define W_DLRX_RXPB_PMAC_HDR_dest_int 4
+#define M_DLRX_RXPB_PMAC_HDR_dest_int 0x000f0000
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_dest_int + offset)) & M_DLRX_RXPB_PMAC_HDR_dest_int) >> B_DLRX_RXPB_PMAC_HDR_dest_int))
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_dest_int) >> B_DLRX_RXPB_PMAC_HDR_dest_int))
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_dest_int + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_dest_int));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_dest_int + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_dest_int) & M_DLRX_RXPB_PMAC_HDR_dest_int);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_dest_int));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_dest_int) & M_DLRX_RXPB_PMAC_HDR_dest_int);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_dest_int + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_dest_int)))
+
+#define DLRX_RXPB_PMAC_HDR_dest_int_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_dest_int)))
+
+#define O_DLRX_RXPB_PMAC_HDR_rsvd2 0
+#define B_DLRX_RXPB_PMAC_HDR_rsvd2 20
+#define W_DLRX_RXPB_PMAC_HDR_rsvd2 4
+#define M_DLRX_RXPB_PMAC_HDR_rsvd2 0x00f00000
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd2 + offset)) & M_DLRX_RXPB_PMAC_HDR_rsvd2) >> B_DLRX_RXPB_PMAC_HDR_rsvd2))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_rsvd2) >> B_DLRX_RXPB_PMAC_HDR_rsvd2))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd2 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd2));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd2 + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd2) & M_DLRX_RXPB_PMAC_HDR_rsvd2);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd2));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd2) & M_DLRX_RXPB_PMAC_HDR_rsvd2);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd2 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd2)))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd2_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd2)))
+
+#define O_DLRX_RXPB_PMAC_HDR_src_int 0
+#define B_DLRX_RXPB_PMAC_HDR_src_int 24
+#define W_DLRX_RXPB_PMAC_HDR_src_int 4
+#define M_DLRX_RXPB_PMAC_HDR_src_int 0x0f000000
+
+#define DLRX_RXPB_PMAC_HDR_src_int_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_src_int + offset)) & M_DLRX_RXPB_PMAC_HDR_src_int) >> B_DLRX_RXPB_PMAC_HDR_src_int))
+
+#define DLRX_RXPB_PMAC_HDR_src_int_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_src_int) >> B_DLRX_RXPB_PMAC_HDR_src_int))
+
+#define DLRX_RXPB_PMAC_HDR_src_int_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_src_int + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_src_int));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_src_int + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_src_int) & M_DLRX_RXPB_PMAC_HDR_src_int);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_src_int_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_src_int));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_src_int) & M_DLRX_RXPB_PMAC_HDR_src_int);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_src_int_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_src_int + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_src_int)))
+
+#define DLRX_RXPB_PMAC_HDR_src_int_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_src_int)))
+
+#define O_DLRX_RXPB_PMAC_HDR_rsvd3 0
+#define B_DLRX_RXPB_PMAC_HDR_rsvd3 28
+#define W_DLRX_RXPB_PMAC_HDR_rsvd3 4
+#define M_DLRX_RXPB_PMAC_HDR_rsvd3 0xf0000000
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd3 + offset)) & M_DLRX_RXPB_PMAC_HDR_rsvd3) >> B_DLRX_RXPB_PMAC_HDR_rsvd3))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_get_direct(dword)	((((dword) & M_DLRX_RXPB_PMAC_HDR_rsvd3) >> B_DLRX_RXPB_PMAC_HDR_rsvd3))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd3 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd3));    \
+		(*(base + O_DLRX_RXPB_PMAC_HDR_rsvd3 + offset)) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd3) & M_DLRX_RXPB_PMAC_HDR_rsvd3);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd3));    \
+		(dword) |= ((val << B_DLRX_RXPB_PMAC_HDR_rsvd3) & M_DLRX_RXPB_PMAC_HDR_rsvd3);    \
+	} while (0)
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PMAC_HDR_rsvd3 + offset)) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd3)))
+
+#define DLRX_RXPB_PMAC_HDR_rsvd3_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PMAC_HDR_rsvd3)))
+
+#define O_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte 0
+#define B_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte 0
+#define W_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte 8
+#define M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte 0x000000ff
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte + offset)) & M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte) >> B_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_get_direct(dword)	((((dword) & M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte) >> B_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte));    \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte + offset)) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte) & M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte));    \
+		(dword) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte) & M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte)))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_fw_rx_desc_byte)))
+
+#define O_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status 0
+#define B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status 8
+#define W_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status 8
+#define M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status 0x0000ff00
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status + offset)) & M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status) >> B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_get_direct(dword)	((((dword) & M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status) >> B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status));    \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status + offset)) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status) & M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status));    \
+		(dword) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status) & M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status)))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_mpdu_status_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_mpdu_status)))
+
+#define O_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 0
+#define B_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 16
+#define W_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 16
+#define M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 0xffff0000
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 + offset)) & M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0) >> B_DLRX_RXPB_WLAN_DRV_HDR_rsvd0))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_get_direct(dword)	((((dword) & M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0) >> B_DLRX_RXPB_WLAN_DRV_HDR_rsvd0))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0));    \
+		(*(base + O_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 + offset)) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_rsvd0) & M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0));    \
+		(dword) |= ((val << B_DLRX_RXPB_WLAN_DRV_HDR_rsvd0) & M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_WLAN_DRV_HDR_rsvd0 + offset)) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0)))
+
+#define DLRX_RXPB_WLAN_DRV_HDR_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_WLAN_DRV_HDR_rsvd0)))
+
+#define O_DLRX_IND_MSG_htt_hdr 0
+#define B_DLRX_IND_MSG_htt_hdr 0
+#define W_DLRX_IND_MSG_htt_hdr 32
+#define M_DLRX_IND_MSG_htt_hdr 0xffffffff
+
+#define DLRX_IND_MSG_htt_hdr_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_htt_hdr + offset)) & M_DLRX_IND_MSG_htt_hdr) >> B_DLRX_IND_MSG_htt_hdr))
+
+#define DLRX_IND_MSG_htt_hdr_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_htt_hdr) >> B_DLRX_IND_MSG_htt_hdr))
+
+#define DLRX_IND_MSG_htt_hdr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_htt_hdr + offset)) &= (~(M_DLRX_IND_MSG_htt_hdr));    \
+		(*(base + O_DLRX_IND_MSG_htt_hdr + offset)) |= ((val << B_DLRX_IND_MSG_htt_hdr) & M_DLRX_IND_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_IND_MSG_htt_hdr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_htt_hdr));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_htt_hdr) & M_DLRX_IND_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_IND_MSG_htt_hdr_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_htt_hdr + offset)) &= (~(M_DLRX_IND_MSG_htt_hdr)))
+
+#define DLRX_IND_MSG_htt_hdr_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_htt_hdr)))
+
+#define O_DLRX_IND_MSG_msg_type 2
+#define B_DLRX_IND_MSG_msg_type 0
+#define W_DLRX_IND_MSG_msg_type 8
+#define M_DLRX_IND_MSG_msg_type 0x000000ff
+
+#define DLRX_IND_MSG_msg_type_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_msg_type + offset)) & M_DLRX_IND_MSG_msg_type) >> B_DLRX_IND_MSG_msg_type))
+
+#define DLRX_IND_MSG_msg_type_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_msg_type) >> B_DLRX_IND_MSG_msg_type))
+
+#define DLRX_IND_MSG_msg_type_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_msg_type + offset)) &= (~(M_DLRX_IND_MSG_msg_type));    \
+		(*(base + O_DLRX_IND_MSG_msg_type + offset)) |= ((val << B_DLRX_IND_MSG_msg_type) & M_DLRX_IND_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_IND_MSG_msg_type_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_msg_type));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_msg_type) & M_DLRX_IND_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_IND_MSG_msg_type_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_msg_type + offset)) &= (~(M_DLRX_IND_MSG_msg_type)))
+
+#define DLRX_IND_MSG_msg_type_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_msg_type)))
+
+#define O_DLRX_IND_MSG_ext_tid 2
+#define B_DLRX_IND_MSG_ext_tid 8
+#define W_DLRX_IND_MSG_ext_tid 5
+#define M_DLRX_IND_MSG_ext_tid 0x00001f00
+
+#define DLRX_IND_MSG_ext_tid_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_ext_tid + offset)) & M_DLRX_IND_MSG_ext_tid) >> B_DLRX_IND_MSG_ext_tid))
+
+#define DLRX_IND_MSG_ext_tid_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_ext_tid) >> B_DLRX_IND_MSG_ext_tid))
+
+#define DLRX_IND_MSG_ext_tid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_ext_tid + offset)) &= (~(M_DLRX_IND_MSG_ext_tid));    \
+		(*(base + O_DLRX_IND_MSG_ext_tid + offset)) |= ((val << B_DLRX_IND_MSG_ext_tid) & M_DLRX_IND_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_ext_tid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_ext_tid));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_ext_tid) & M_DLRX_IND_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_ext_tid_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_ext_tid + offset)) &= (~(M_DLRX_IND_MSG_ext_tid)))
+
+#define DLRX_IND_MSG_ext_tid_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_ext_tid)))
+
+#define O_DLRX_IND_MSG_fv 2
+#define B_DLRX_IND_MSG_fv 13
+#define W_DLRX_IND_MSG_fv 1
+#define M_DLRX_IND_MSG_fv 0x00002000
+
+#define DLRX_IND_MSG_fv_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_fv + offset)) & M_DLRX_IND_MSG_fv) >> B_DLRX_IND_MSG_fv))
+
+#define DLRX_IND_MSG_fv_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_fv) >> B_DLRX_IND_MSG_fv))
+
+#define DLRX_IND_MSG_fv_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_fv + offset)) &= (~(M_DLRX_IND_MSG_fv));    \
+		(*(base + O_DLRX_IND_MSG_fv + offset)) |= ((val << B_DLRX_IND_MSG_fv) & M_DLRX_IND_MSG_fv);    \
+	} while (0)
+
+#define DLRX_IND_MSG_fv_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_fv));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_fv) & M_DLRX_IND_MSG_fv);    \
+	} while (0)
+
+#define DLRX_IND_MSG_fv_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_fv + offset)) &= (~(M_DLRX_IND_MSG_fv)))
+
+#define DLRX_IND_MSG_fv_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_fv)))
+
+#define O_DLRX_IND_MSG_rv 2
+#define B_DLRX_IND_MSG_rv 14
+#define W_DLRX_IND_MSG_rv 1
+#define M_DLRX_IND_MSG_rv 0x00004000
+
+#define DLRX_IND_MSG_rv_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rv + offset)) & M_DLRX_IND_MSG_rv) >> B_DLRX_IND_MSG_rv))
+
+#define DLRX_IND_MSG_rv_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rv) >> B_DLRX_IND_MSG_rv))
+
+#define DLRX_IND_MSG_rv_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rv + offset)) &= (~(M_DLRX_IND_MSG_rv));    \
+		(*(base + O_DLRX_IND_MSG_rv + offset)) |= ((val << B_DLRX_IND_MSG_rv) & M_DLRX_IND_MSG_rv);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rv_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rv));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rv) & M_DLRX_IND_MSG_rv);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rv_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rv + offset)) &= (~(M_DLRX_IND_MSG_rv)))
+
+#define DLRX_IND_MSG_rv_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rv)))
+
+#define O_DLRX_IND_MSG_rsvd0 2
+#define B_DLRX_IND_MSG_rsvd0 15
+#define W_DLRX_IND_MSG_rsvd0 1
+#define M_DLRX_IND_MSG_rsvd0 0x00008000
+
+#define DLRX_IND_MSG_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd0 + offset)) & M_DLRX_IND_MSG_rsvd0) >> B_DLRX_IND_MSG_rsvd0))
+
+#define DLRX_IND_MSG_rsvd0_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd0) >> B_DLRX_IND_MSG_rsvd0))
+
+#define DLRX_IND_MSG_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd0 + offset)) &= (~(M_DLRX_IND_MSG_rsvd0));    \
+		(*(base + O_DLRX_IND_MSG_rsvd0 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd0) & M_DLRX_IND_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd0));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd0) & M_DLRX_IND_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd0 + offset)) &= (~(M_DLRX_IND_MSG_rsvd0)))
+
+#define DLRX_IND_MSG_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd0)))
+
+#define O_DLRX_IND_MSG_peer_id 2
+#define B_DLRX_IND_MSG_peer_id 16
+#define W_DLRX_IND_MSG_peer_id 16
+#define M_DLRX_IND_MSG_peer_id 0xffff0000
+
+#define DLRX_IND_MSG_peer_id_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_peer_id + offset)) & M_DLRX_IND_MSG_peer_id) >> B_DLRX_IND_MSG_peer_id))
+
+#define DLRX_IND_MSG_peer_id_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_peer_id) >> B_DLRX_IND_MSG_peer_id))
+
+#define DLRX_IND_MSG_peer_id_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_peer_id + offset)) &= (~(M_DLRX_IND_MSG_peer_id));    \
+		(*(base + O_DLRX_IND_MSG_peer_id + offset)) |= ((val << B_DLRX_IND_MSG_peer_id) & M_DLRX_IND_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_IND_MSG_peer_id_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_peer_id));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_peer_id) & M_DLRX_IND_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_IND_MSG_peer_id_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_peer_id + offset)) &= (~(M_DLRX_IND_MSG_peer_id)))
+
+#define DLRX_IND_MSG_peer_id_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_peer_id)))
+
+#define O_DLRX_IND_MSG_flush_start_seqid 3
+#define B_DLRX_IND_MSG_flush_start_seqid 0
+#define W_DLRX_IND_MSG_flush_start_seqid 6
+#define M_DLRX_IND_MSG_flush_start_seqid 0x0000003f
+
+#define DLRX_IND_MSG_flush_start_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_flush_start_seqid + offset)) & M_DLRX_IND_MSG_flush_start_seqid) >> B_DLRX_IND_MSG_flush_start_seqid))
+
+#define DLRX_IND_MSG_flush_start_seqid_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_flush_start_seqid) >> B_DLRX_IND_MSG_flush_start_seqid))
+
+#define DLRX_IND_MSG_flush_start_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_IND_MSG_flush_start_seqid));    \
+		(*(base + O_DLRX_IND_MSG_flush_start_seqid + offset)) |= ((val << B_DLRX_IND_MSG_flush_start_seqid) & M_DLRX_IND_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_flush_start_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_flush_start_seqid));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_flush_start_seqid) & M_DLRX_IND_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_flush_start_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_IND_MSG_flush_start_seqid)))
+
+#define DLRX_IND_MSG_flush_start_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_flush_start_seqid)))
+
+#define O_DLRX_IND_MSG_flush_end_seqid 3
+#define B_DLRX_IND_MSG_flush_end_seqid 6
+#define W_DLRX_IND_MSG_flush_end_seqid 6
+#define M_DLRX_IND_MSG_flush_end_seqid 0x00000fc0
+
+#define DLRX_IND_MSG_flush_end_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_flush_end_seqid + offset)) & M_DLRX_IND_MSG_flush_end_seqid) >> B_DLRX_IND_MSG_flush_end_seqid))
+
+#define DLRX_IND_MSG_flush_end_seqid_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_flush_end_seqid) >> B_DLRX_IND_MSG_flush_end_seqid))
+
+#define DLRX_IND_MSG_flush_end_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_IND_MSG_flush_end_seqid));    \
+		(*(base + O_DLRX_IND_MSG_flush_end_seqid + offset)) |= ((val << B_DLRX_IND_MSG_flush_end_seqid) & M_DLRX_IND_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_flush_end_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_flush_end_seqid));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_flush_end_seqid) & M_DLRX_IND_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_flush_end_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_IND_MSG_flush_end_seqid)))
+
+#define DLRX_IND_MSG_flush_end_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_flush_end_seqid)))
+
+#define O_DLRX_IND_MSG_release_start_seqid 3
+#define B_DLRX_IND_MSG_release_start_seqid 12
+#define W_DLRX_IND_MSG_release_start_seqid 6
+#define M_DLRX_IND_MSG_release_start_seqid 0x0003f000
+
+#define DLRX_IND_MSG_release_start_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_release_start_seqid + offset)) & M_DLRX_IND_MSG_release_start_seqid) >> B_DLRX_IND_MSG_release_start_seqid))
+
+#define DLRX_IND_MSG_release_start_seqid_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_release_start_seqid) >> B_DLRX_IND_MSG_release_start_seqid))
+
+#define DLRX_IND_MSG_release_start_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_release_start_seqid + offset)) &= (~(M_DLRX_IND_MSG_release_start_seqid));    \
+		(*(base + O_DLRX_IND_MSG_release_start_seqid + offset)) |= ((val << B_DLRX_IND_MSG_release_start_seqid) & M_DLRX_IND_MSG_release_start_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_release_start_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_release_start_seqid));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_release_start_seqid) & M_DLRX_IND_MSG_release_start_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_release_start_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_release_start_seqid + offset)) &= (~(M_DLRX_IND_MSG_release_start_seqid)))
+
+#define DLRX_IND_MSG_release_start_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_release_start_seqid)))
+
+#define O_DLRX_IND_MSG_release_end_seqid 3
+#define B_DLRX_IND_MSG_release_end_seqid 18
+#define W_DLRX_IND_MSG_release_end_seqid 6
+#define M_DLRX_IND_MSG_release_end_seqid 0x00fc0000
+
+#define DLRX_IND_MSG_release_end_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_release_end_seqid + offset)) & M_DLRX_IND_MSG_release_end_seqid) >> B_DLRX_IND_MSG_release_end_seqid))
+
+#define DLRX_IND_MSG_release_end_seqid_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_release_end_seqid) >> B_DLRX_IND_MSG_release_end_seqid))
+
+#define DLRX_IND_MSG_release_end_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_release_end_seqid + offset)) &= (~(M_DLRX_IND_MSG_release_end_seqid));    \
+		(*(base + O_DLRX_IND_MSG_release_end_seqid + offset)) |= ((val << B_DLRX_IND_MSG_release_end_seqid) & M_DLRX_IND_MSG_release_end_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_release_end_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_release_end_seqid));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_release_end_seqid) & M_DLRX_IND_MSG_release_end_seqid);    \
+	} while (0)
+
+#define DLRX_IND_MSG_release_end_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_release_end_seqid + offset)) &= (~(M_DLRX_IND_MSG_release_end_seqid)))
+
+#define DLRX_IND_MSG_release_end_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_release_end_seqid)))
+
+#define O_DLRX_IND_MSG_mpdu_ranges_num 3
+#define B_DLRX_IND_MSG_mpdu_ranges_num 24
+#define W_DLRX_IND_MSG_mpdu_ranges_num 8
+#define M_DLRX_IND_MSG_mpdu_ranges_num 0xff000000
+
+#define DLRX_IND_MSG_mpdu_ranges_num_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_mpdu_ranges_num + offset)) & M_DLRX_IND_MSG_mpdu_ranges_num) >> B_DLRX_IND_MSG_mpdu_ranges_num))
+
+#define DLRX_IND_MSG_mpdu_ranges_num_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_mpdu_ranges_num) >> B_DLRX_IND_MSG_mpdu_ranges_num))
+
+#define DLRX_IND_MSG_mpdu_ranges_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_mpdu_ranges_num + offset)) &= (~(M_DLRX_IND_MSG_mpdu_ranges_num));    \
+		(*(base + O_DLRX_IND_MSG_mpdu_ranges_num + offset)) |= ((val << B_DLRX_IND_MSG_mpdu_ranges_num) & M_DLRX_IND_MSG_mpdu_ranges_num);    \
+	} while (0)
+
+#define DLRX_IND_MSG_mpdu_ranges_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_mpdu_ranges_num));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_mpdu_ranges_num) & M_DLRX_IND_MSG_mpdu_ranges_num);    \
+	} while (0)
+
+#define DLRX_IND_MSG_mpdu_ranges_num_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_mpdu_ranges_num + offset)) &= (~(M_DLRX_IND_MSG_mpdu_ranges_num)))
+
+#define DLRX_IND_MSG_mpdu_ranges_num_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_mpdu_ranges_num)))
+
+#define O_DLRX_IND_MSG_rsvd2 4
+#define B_DLRX_IND_MSG_rsvd2 0
+#define W_DLRX_IND_MSG_rsvd2 32
+#define M_DLRX_IND_MSG_rsvd2 0xffffffff
+
+#define DLRX_IND_MSG_rsvd2_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd2 + offset)) & M_DLRX_IND_MSG_rsvd2) >> B_DLRX_IND_MSG_rsvd2))
+
+#define DLRX_IND_MSG_rsvd2_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd2) >> B_DLRX_IND_MSG_rsvd2))
+
+#define DLRX_IND_MSG_rsvd2_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd2 + offset)) &= (~(M_DLRX_IND_MSG_rsvd2));    \
+		(*(base + O_DLRX_IND_MSG_rsvd2 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd2) & M_DLRX_IND_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd2_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd2));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd2) & M_DLRX_IND_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd2_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd2 + offset)) &= (~(M_DLRX_IND_MSG_rsvd2)))
+
+#define DLRX_IND_MSG_rsvd2_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd2)))
+
+#define O_DLRX_IND_MSG_rsvd3 5
+#define B_DLRX_IND_MSG_rsvd3 0
+#define W_DLRX_IND_MSG_rsvd3 32
+#define M_DLRX_IND_MSG_rsvd3 0xffffffff
+
+#define DLRX_IND_MSG_rsvd3_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd3 + offset)) & M_DLRX_IND_MSG_rsvd3) >> B_DLRX_IND_MSG_rsvd3))
+
+#define DLRX_IND_MSG_rsvd3_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd3) >> B_DLRX_IND_MSG_rsvd3))
+
+#define DLRX_IND_MSG_rsvd3_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd3 + offset)) &= (~(M_DLRX_IND_MSG_rsvd3));    \
+		(*(base + O_DLRX_IND_MSG_rsvd3 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd3) & M_DLRX_IND_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd3_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd3));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd3) & M_DLRX_IND_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd3_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd3 + offset)) &= (~(M_DLRX_IND_MSG_rsvd3)))
+
+#define DLRX_IND_MSG_rsvd3_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd3)))
+
+#define O_DLRX_IND_MSG_rsvd4 6
+#define B_DLRX_IND_MSG_rsvd4 0
+#define W_DLRX_IND_MSG_rsvd4 32
+#define M_DLRX_IND_MSG_rsvd4 0xffffffff
+
+#define DLRX_IND_MSG_rsvd4_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd4 + offset)) & M_DLRX_IND_MSG_rsvd4) >> B_DLRX_IND_MSG_rsvd4))
+
+#define DLRX_IND_MSG_rsvd4_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd4) >> B_DLRX_IND_MSG_rsvd4))
+
+#define DLRX_IND_MSG_rsvd4_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd4 + offset)) &= (~(M_DLRX_IND_MSG_rsvd4));    \
+		(*(base + O_DLRX_IND_MSG_rsvd4 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd4) & M_DLRX_IND_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd4_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd4));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd4) & M_DLRX_IND_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd4_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd4 + offset)) &= (~(M_DLRX_IND_MSG_rsvd4)))
+
+#define DLRX_IND_MSG_rsvd4_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd4)))
+
+#define O_DLRX_IND_MSG_rsvd5 7
+#define B_DLRX_IND_MSG_rsvd5 0
+#define W_DLRX_IND_MSG_rsvd5 32
+#define M_DLRX_IND_MSG_rsvd5 0xffffffff
+
+#define DLRX_IND_MSG_rsvd5_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd5 + offset)) & M_DLRX_IND_MSG_rsvd5) >> B_DLRX_IND_MSG_rsvd5))
+
+#define DLRX_IND_MSG_rsvd5_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd5) >> B_DLRX_IND_MSG_rsvd5))
+
+#define DLRX_IND_MSG_rsvd5_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd5 + offset)) &= (~(M_DLRX_IND_MSG_rsvd5));    \
+		(*(base + O_DLRX_IND_MSG_rsvd5 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd5) & M_DLRX_IND_MSG_rsvd5);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd5_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd5));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd5) & M_DLRX_IND_MSG_rsvd5);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd5_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd5 + offset)) &= (~(M_DLRX_IND_MSG_rsvd5)))
+
+#define DLRX_IND_MSG_rsvd5_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd5)))
+
+#define O_DLRX_IND_MSG_rsvd6 8
+#define B_DLRX_IND_MSG_rsvd6 0
+#define W_DLRX_IND_MSG_rsvd6 32
+#define M_DLRX_IND_MSG_rsvd6 0xffffffff
+
+#define DLRX_IND_MSG_rsvd6_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd6 + offset)) & M_DLRX_IND_MSG_rsvd6) >> B_DLRX_IND_MSG_rsvd6))
+
+#define DLRX_IND_MSG_rsvd6_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd6) >> B_DLRX_IND_MSG_rsvd6))
+
+#define DLRX_IND_MSG_rsvd6_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd6 + offset)) &= (~(M_DLRX_IND_MSG_rsvd6));    \
+		(*(base + O_DLRX_IND_MSG_rsvd6 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd6) & M_DLRX_IND_MSG_rsvd6);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd6_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd6));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd6) & M_DLRX_IND_MSG_rsvd6);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd6_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd6 + offset)) &= (~(M_DLRX_IND_MSG_rsvd6)))
+
+#define DLRX_IND_MSG_rsvd6_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd6)))
+
+#define O_DLRX_IND_MSG_rsvd7 9
+#define B_DLRX_IND_MSG_rsvd7 0
+#define W_DLRX_IND_MSG_rsvd7 32
+#define M_DLRX_IND_MSG_rsvd7 0xffffffff
+
+#define DLRX_IND_MSG_rsvd7_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd7 + offset)) & M_DLRX_IND_MSG_rsvd7) >> B_DLRX_IND_MSG_rsvd7))
+
+#define DLRX_IND_MSG_rsvd7_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd7) >> B_DLRX_IND_MSG_rsvd7))
+
+#define DLRX_IND_MSG_rsvd7_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd7 + offset)) &= (~(M_DLRX_IND_MSG_rsvd7));    \
+		(*(base + O_DLRX_IND_MSG_rsvd7 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd7) & M_DLRX_IND_MSG_rsvd7);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd7_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd7));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd7) & M_DLRX_IND_MSG_rsvd7);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd7_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd7 + offset)) &= (~(M_DLRX_IND_MSG_rsvd7)))
+
+#define DLRX_IND_MSG_rsvd7_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd7)))
+
+#define O_DLRX_IND_MSG_rsvd8 10
+#define B_DLRX_IND_MSG_rsvd8 0
+#define W_DLRX_IND_MSG_rsvd8 32
+#define M_DLRX_IND_MSG_rsvd8 0xffffffff
+
+#define DLRX_IND_MSG_rsvd8_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd8 + offset)) & M_DLRX_IND_MSG_rsvd8) >> B_DLRX_IND_MSG_rsvd8))
+
+#define DLRX_IND_MSG_rsvd8_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd8) >> B_DLRX_IND_MSG_rsvd8))
+
+#define DLRX_IND_MSG_rsvd8_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd8 + offset)) &= (~(M_DLRX_IND_MSG_rsvd8));    \
+		(*(base + O_DLRX_IND_MSG_rsvd8 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd8) & M_DLRX_IND_MSG_rsvd8);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd8_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd8));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd8) & M_DLRX_IND_MSG_rsvd8);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd8_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd8 + offset)) &= (~(M_DLRX_IND_MSG_rsvd8)))
+
+#define DLRX_IND_MSG_rsvd8_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd8)))
+
+#define O_DLRX_IND_MSG_rsvd9 11
+#define B_DLRX_IND_MSG_rsvd9 0
+#define W_DLRX_IND_MSG_rsvd9 32
+#define M_DLRX_IND_MSG_rsvd9 0xffffffff
+
+#define DLRX_IND_MSG_rsvd9_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd9 + offset)) & M_DLRX_IND_MSG_rsvd9) >> B_DLRX_IND_MSG_rsvd9))
+
+#define DLRX_IND_MSG_rsvd9_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd9) >> B_DLRX_IND_MSG_rsvd9))
+
+#define DLRX_IND_MSG_rsvd9_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd9 + offset)) &= (~(M_DLRX_IND_MSG_rsvd9));    \
+		(*(base + O_DLRX_IND_MSG_rsvd9 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd9) & M_DLRX_IND_MSG_rsvd9);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd9_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd9));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd9) & M_DLRX_IND_MSG_rsvd9);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd9_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd9 + offset)) &= (~(M_DLRX_IND_MSG_rsvd9)))
+
+#define DLRX_IND_MSG_rsvd9_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd9)))
+
+#define O_DLRX_IND_MSG_rsvd10 12
+#define B_DLRX_IND_MSG_rsvd10 0
+#define W_DLRX_IND_MSG_rsvd10 32
+#define M_DLRX_IND_MSG_rsvd10 0xffffffff
+
+#define DLRX_IND_MSG_rsvd10_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd10 + offset)) & M_DLRX_IND_MSG_rsvd10) >> B_DLRX_IND_MSG_rsvd10))
+
+#define DLRX_IND_MSG_rsvd10_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd10) >> B_DLRX_IND_MSG_rsvd10))
+
+#define DLRX_IND_MSG_rsvd10_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd10 + offset)) &= (~(M_DLRX_IND_MSG_rsvd10));    \
+		(*(base + O_DLRX_IND_MSG_rsvd10 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd10) & M_DLRX_IND_MSG_rsvd10);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd10_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd10));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd10) & M_DLRX_IND_MSG_rsvd10);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd10_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd10 + offset)) &= (~(M_DLRX_IND_MSG_rsvd10)))
+
+#define DLRX_IND_MSG_rsvd10_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd10)))
+
+#define O_DLRX_IND_MSG_fw_rx_desc_byte_num 13
+#define B_DLRX_IND_MSG_fw_rx_desc_byte_num 0
+#define W_DLRX_IND_MSG_fw_rx_desc_byte_num 16
+#define M_DLRX_IND_MSG_fw_rx_desc_byte_num 0x0000ffff
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_fw_rx_desc_byte_num + offset)) & M_DLRX_IND_MSG_fw_rx_desc_byte_num) >> B_DLRX_IND_MSG_fw_rx_desc_byte_num))
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_fw_rx_desc_byte_num) >> B_DLRX_IND_MSG_fw_rx_desc_byte_num))
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_fw_rx_desc_byte_num + offset)) &= (~(M_DLRX_IND_MSG_fw_rx_desc_byte_num));    \
+		(*(base + O_DLRX_IND_MSG_fw_rx_desc_byte_num + offset)) |= ((val << B_DLRX_IND_MSG_fw_rx_desc_byte_num) & M_DLRX_IND_MSG_fw_rx_desc_byte_num);    \
+	} while (0)
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_fw_rx_desc_byte_num));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_fw_rx_desc_byte_num) & M_DLRX_IND_MSG_fw_rx_desc_byte_num);    \
+	} while (0)
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_fw_rx_desc_byte_num + offset)) &= (~(M_DLRX_IND_MSG_fw_rx_desc_byte_num)))
+
+#define DLRX_IND_MSG_fw_rx_desc_byte_num_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_fw_rx_desc_byte_num)))
+
+#define O_DLRX_IND_MSG_rsvd11 13
+#define B_DLRX_IND_MSG_rsvd11 16
+#define W_DLRX_IND_MSG_rsvd11 16
+#define M_DLRX_IND_MSG_rsvd11 0xffff0000
+
+#define DLRX_IND_MSG_rsvd11_get_indirect(base, offset)	((((*(base + O_DLRX_IND_MSG_rsvd11 + offset)) & M_DLRX_IND_MSG_rsvd11) >> B_DLRX_IND_MSG_rsvd11))
+
+#define DLRX_IND_MSG_rsvd11_get_direct(dword)	((((dword) & M_DLRX_IND_MSG_rsvd11) >> B_DLRX_IND_MSG_rsvd11))
+
+#define DLRX_IND_MSG_rsvd11_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_IND_MSG_rsvd11 + offset)) &= (~(M_DLRX_IND_MSG_rsvd11));    \
+		(*(base + O_DLRX_IND_MSG_rsvd11 + offset)) |= ((val << B_DLRX_IND_MSG_rsvd11) & M_DLRX_IND_MSG_rsvd11);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd11_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_IND_MSG_rsvd11));    \
+		(dword) |= ((val << B_DLRX_IND_MSG_rsvd11) & M_DLRX_IND_MSG_rsvd11);    \
+	} while (0)
+
+#define DLRX_IND_MSG_rsvd11_clear_indirect(base, offset)	((*(base + O_DLRX_IND_MSG_rsvd11 + offset)) &= (~(M_DLRX_IND_MSG_rsvd11)))
+
+#define DLRX_IND_MSG_rsvd11_clear_direct(dword)	((dword) &= (~(M_DLRX_IND_MSG_rsvd11)))
+
+#define O_FW_RX_DESC_BYTE_discard_msdu0 0
+#define B_FW_RX_DESC_BYTE_discard_msdu0 0
+#define W_FW_RX_DESC_BYTE_discard_msdu0 1
+#define M_FW_RX_DESC_BYTE_discard_msdu0 0x00000001
+
+#define FW_RX_DESC_BYTE_discard_msdu0_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_discard_msdu0 + offset)) & M_FW_RX_DESC_BYTE_discard_msdu0) >> B_FW_RX_DESC_BYTE_discard_msdu0))
+
+#define FW_RX_DESC_BYTE_discard_msdu0_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_discard_msdu0) >> B_FW_RX_DESC_BYTE_discard_msdu0))
+
+#define FW_RX_DESC_BYTE_discard_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu0));    \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu0 + offset)) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu0) & M_FW_RX_DESC_BYTE_discard_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu0));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu0) & M_FW_RX_DESC_BYTE_discard_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu0_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_discard_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu0)))
+
+#define FW_RX_DESC_BYTE_discard_msdu0_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu0)))
+
+#define O_FW_RX_DESC_BYTE_forward_msdu0 0
+#define B_FW_RX_DESC_BYTE_forward_msdu0 1
+#define W_FW_RX_DESC_BYTE_forward_msdu0 1
+#define M_FW_RX_DESC_BYTE_forward_msdu0 0x00000002
+
+#define FW_RX_DESC_BYTE_forward_msdu0_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_forward_msdu0 + offset)) & M_FW_RX_DESC_BYTE_forward_msdu0) >> B_FW_RX_DESC_BYTE_forward_msdu0))
+
+#define FW_RX_DESC_BYTE_forward_msdu0_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_forward_msdu0) >> B_FW_RX_DESC_BYTE_forward_msdu0))
+
+#define FW_RX_DESC_BYTE_forward_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu0));    \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu0 + offset)) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu0) & M_FW_RX_DESC_BYTE_forward_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu0));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu0) & M_FW_RX_DESC_BYTE_forward_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu0_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_forward_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu0)))
+
+#define FW_RX_DESC_BYTE_forward_msdu0_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu0)))
+
+#define O_FW_RX_DESC_BYTE_rsvd1_msdu0 0
+#define B_FW_RX_DESC_BYTE_rsvd1_msdu0 2
+#define W_FW_RX_DESC_BYTE_rsvd1_msdu0 3
+#define M_FW_RX_DESC_BYTE_rsvd1_msdu0 0x0000001c
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu0 + offset)) & M_FW_RX_DESC_BYTE_rsvd1_msdu0) >> B_FW_RX_DESC_BYTE_rsvd1_msdu0))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd1_msdu0) >> B_FW_RX_DESC_BYTE_rsvd1_msdu0))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu0));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu0 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu0) & M_FW_RX_DESC_BYTE_rsvd1_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu0));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu0) & M_FW_RX_DESC_BYTE_rsvd1_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu0)))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu0_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu0)))
+
+#define O_FW_RX_DESC_BYTE_inspect_msdu0 0
+#define B_FW_RX_DESC_BYTE_inspect_msdu0 5
+#define W_FW_RX_DESC_BYTE_inspect_msdu0 1
+#define M_FW_RX_DESC_BYTE_inspect_msdu0 0x00000020
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_inspect_msdu0 + offset)) & M_FW_RX_DESC_BYTE_inspect_msdu0) >> B_FW_RX_DESC_BYTE_inspect_msdu0))
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_inspect_msdu0) >> B_FW_RX_DESC_BYTE_inspect_msdu0))
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu0));    \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu0 + offset)) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu0) & M_FW_RX_DESC_BYTE_inspect_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu0));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu0) & M_FW_RX_DESC_BYTE_inspect_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_inspect_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu0)))
+
+#define FW_RX_DESC_BYTE_inspect_msdu0_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu0)))
+
+#define O_FW_RX_DESC_BYTE_rsvd2_msdu0 0
+#define B_FW_RX_DESC_BYTE_rsvd2_msdu0 6
+#define W_FW_RX_DESC_BYTE_rsvd2_msdu0 2
+#define M_FW_RX_DESC_BYTE_rsvd2_msdu0 0x000000c0
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu0 + offset)) & M_FW_RX_DESC_BYTE_rsvd2_msdu0) >> B_FW_RX_DESC_BYTE_rsvd2_msdu0))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd2_msdu0) >> B_FW_RX_DESC_BYTE_rsvd2_msdu0))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu0));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu0 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu0) & M_FW_RX_DESC_BYTE_rsvd2_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu0));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu0) & M_FW_RX_DESC_BYTE_rsvd2_msdu0);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu0 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu0)))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu0_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu0)))
+
+#define O_FW_RX_DESC_BYTE_discard_msdu1 0
+#define B_FW_RX_DESC_BYTE_discard_msdu1 8
+#define W_FW_RX_DESC_BYTE_discard_msdu1 1
+#define M_FW_RX_DESC_BYTE_discard_msdu1 0x00000100
+
+#define FW_RX_DESC_BYTE_discard_msdu1_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_discard_msdu1 + offset)) & M_FW_RX_DESC_BYTE_discard_msdu1) >> B_FW_RX_DESC_BYTE_discard_msdu1))
+
+#define FW_RX_DESC_BYTE_discard_msdu1_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_discard_msdu1) >> B_FW_RX_DESC_BYTE_discard_msdu1))
+
+#define FW_RX_DESC_BYTE_discard_msdu1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu1));    \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu1 + offset)) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu1) & M_FW_RX_DESC_BYTE_discard_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu1));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu1) & M_FW_RX_DESC_BYTE_discard_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu1_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_discard_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu1)))
+
+#define FW_RX_DESC_BYTE_discard_msdu1_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu1)))
+
+#define O_FW_RX_DESC_BYTE_forward_msdu1 0
+#define B_FW_RX_DESC_BYTE_forward_msdu1 9
+#define W_FW_RX_DESC_BYTE_forward_msdu1 1
+#define M_FW_RX_DESC_BYTE_forward_msdu1 0x00000200
+
+#define FW_RX_DESC_BYTE_forward_msdu1_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_forward_msdu1 + offset)) & M_FW_RX_DESC_BYTE_forward_msdu1) >> B_FW_RX_DESC_BYTE_forward_msdu1))
+
+#define FW_RX_DESC_BYTE_forward_msdu1_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_forward_msdu1) >> B_FW_RX_DESC_BYTE_forward_msdu1))
+
+#define FW_RX_DESC_BYTE_forward_msdu1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu1));    \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu1 + offset)) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu1) & M_FW_RX_DESC_BYTE_forward_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu1));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu1) & M_FW_RX_DESC_BYTE_forward_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu1_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_forward_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu1)))
+
+#define FW_RX_DESC_BYTE_forward_msdu1_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu1)))
+
+#define O_FW_RX_DESC_BYTE_rsvd1_msdu1 0
+#define B_FW_RX_DESC_BYTE_rsvd1_msdu1 10
+#define W_FW_RX_DESC_BYTE_rsvd1_msdu1 3
+#define M_FW_RX_DESC_BYTE_rsvd1_msdu1 0x00001c00
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu1 + offset)) & M_FW_RX_DESC_BYTE_rsvd1_msdu1) >> B_FW_RX_DESC_BYTE_rsvd1_msdu1))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd1_msdu1) >> B_FW_RX_DESC_BYTE_rsvd1_msdu1))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu1));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu1 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu1) & M_FW_RX_DESC_BYTE_rsvd1_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu1));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu1) & M_FW_RX_DESC_BYTE_rsvd1_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu1)))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu1_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu1)))
+
+#define O_FW_RX_DESC_BYTE_inspect_msdu1 0
+#define B_FW_RX_DESC_BYTE_inspect_msdu1 13
+#define W_FW_RX_DESC_BYTE_inspect_msdu1 1
+#define M_FW_RX_DESC_BYTE_inspect_msdu1 0x00002000
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_inspect_msdu1 + offset)) & M_FW_RX_DESC_BYTE_inspect_msdu1) >> B_FW_RX_DESC_BYTE_inspect_msdu1))
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_inspect_msdu1) >> B_FW_RX_DESC_BYTE_inspect_msdu1))
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu1));    \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu1 + offset)) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu1) & M_FW_RX_DESC_BYTE_inspect_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu1));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu1) & M_FW_RX_DESC_BYTE_inspect_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_inspect_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu1)))
+
+#define FW_RX_DESC_BYTE_inspect_msdu1_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu1)))
+
+#define O_FW_RX_DESC_BYTE_rsvd2_msdu1 0
+#define B_FW_RX_DESC_BYTE_rsvd2_msdu1 14
+#define W_FW_RX_DESC_BYTE_rsvd2_msdu1 2
+#define M_FW_RX_DESC_BYTE_rsvd2_msdu1 0x0000c000
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu1 + offset)) & M_FW_RX_DESC_BYTE_rsvd2_msdu1) >> B_FW_RX_DESC_BYTE_rsvd2_msdu1))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd2_msdu1) >> B_FW_RX_DESC_BYTE_rsvd2_msdu1))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu1));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu1 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu1) & M_FW_RX_DESC_BYTE_rsvd2_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu1));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu1) & M_FW_RX_DESC_BYTE_rsvd2_msdu1);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu1 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu1)))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu1_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu1)))
+
+#define O_FW_RX_DESC_BYTE_discard_msdu2 0
+#define B_FW_RX_DESC_BYTE_discard_msdu2 16
+#define W_FW_RX_DESC_BYTE_discard_msdu2 1
+#define M_FW_RX_DESC_BYTE_discard_msdu2 0x00010000
+
+#define FW_RX_DESC_BYTE_discard_msdu2_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_discard_msdu2 + offset)) & M_FW_RX_DESC_BYTE_discard_msdu2) >> B_FW_RX_DESC_BYTE_discard_msdu2))
+
+#define FW_RX_DESC_BYTE_discard_msdu2_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_discard_msdu2) >> B_FW_RX_DESC_BYTE_discard_msdu2))
+
+#define FW_RX_DESC_BYTE_discard_msdu2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu2));    \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu2 + offset)) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu2) & M_FW_RX_DESC_BYTE_discard_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu2));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu2) & M_FW_RX_DESC_BYTE_discard_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu2_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_discard_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu2)))
+
+#define FW_RX_DESC_BYTE_discard_msdu2_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu2)))
+
+#define O_FW_RX_DESC_BYTE_forward_msdu2 0
+#define B_FW_RX_DESC_BYTE_forward_msdu2 17
+#define W_FW_RX_DESC_BYTE_forward_msdu2 1
+#define M_FW_RX_DESC_BYTE_forward_msdu2 0x00020000
+
+#define FW_RX_DESC_BYTE_forward_msdu2_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_forward_msdu2 + offset)) & M_FW_RX_DESC_BYTE_forward_msdu2) >> B_FW_RX_DESC_BYTE_forward_msdu2))
+
+#define FW_RX_DESC_BYTE_forward_msdu2_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_forward_msdu2) >> B_FW_RX_DESC_BYTE_forward_msdu2))
+
+#define FW_RX_DESC_BYTE_forward_msdu2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu2));    \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu2 + offset)) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu2) & M_FW_RX_DESC_BYTE_forward_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu2));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu2) & M_FW_RX_DESC_BYTE_forward_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu2_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_forward_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu2)))
+
+#define FW_RX_DESC_BYTE_forward_msdu2_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu2)))
+
+#define O_FW_RX_DESC_BYTE_rsvd1_msdu2 0
+#define B_FW_RX_DESC_BYTE_rsvd1_msdu2 18
+#define W_FW_RX_DESC_BYTE_rsvd1_msdu2 3
+#define M_FW_RX_DESC_BYTE_rsvd1_msdu2 0x001c0000
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu2 + offset)) & M_FW_RX_DESC_BYTE_rsvd1_msdu2) >> B_FW_RX_DESC_BYTE_rsvd1_msdu2))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd1_msdu2) >> B_FW_RX_DESC_BYTE_rsvd1_msdu2))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu2));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu2 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu2) & M_FW_RX_DESC_BYTE_rsvd1_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu2));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu2) & M_FW_RX_DESC_BYTE_rsvd1_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu2)))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu2_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu2)))
+
+#define O_FW_RX_DESC_BYTE_inspect_msdu2 0
+#define B_FW_RX_DESC_BYTE_inspect_msdu2 21
+#define W_FW_RX_DESC_BYTE_inspect_msdu2 1
+#define M_FW_RX_DESC_BYTE_inspect_msdu2 0x00200000
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_inspect_msdu2 + offset)) & M_FW_RX_DESC_BYTE_inspect_msdu2) >> B_FW_RX_DESC_BYTE_inspect_msdu2))
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_inspect_msdu2) >> B_FW_RX_DESC_BYTE_inspect_msdu2))
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu2));    \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu2 + offset)) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu2) & M_FW_RX_DESC_BYTE_inspect_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu2));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu2) & M_FW_RX_DESC_BYTE_inspect_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_inspect_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu2)))
+
+#define FW_RX_DESC_BYTE_inspect_msdu2_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu2)))
+
+#define O_FW_RX_DESC_BYTE_rsvd2_msdu2 0
+#define B_FW_RX_DESC_BYTE_rsvd2_msdu2 22
+#define W_FW_RX_DESC_BYTE_rsvd2_msdu2 2
+#define M_FW_RX_DESC_BYTE_rsvd2_msdu2 0x00c00000
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu2 + offset)) & M_FW_RX_DESC_BYTE_rsvd2_msdu2) >> B_FW_RX_DESC_BYTE_rsvd2_msdu2))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd2_msdu2) >> B_FW_RX_DESC_BYTE_rsvd2_msdu2))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu2));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu2 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu2) & M_FW_RX_DESC_BYTE_rsvd2_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu2));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu2) & M_FW_RX_DESC_BYTE_rsvd2_msdu2);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu2 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu2)))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu2_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu2)))
+
+#define O_FW_RX_DESC_BYTE_discard_msdu3 0
+#define B_FW_RX_DESC_BYTE_discard_msdu3 24
+#define W_FW_RX_DESC_BYTE_discard_msdu3 1
+#define M_FW_RX_DESC_BYTE_discard_msdu3 0x01000000
+
+#define FW_RX_DESC_BYTE_discard_msdu3_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_discard_msdu3 + offset)) & M_FW_RX_DESC_BYTE_discard_msdu3) >> B_FW_RX_DESC_BYTE_discard_msdu3))
+
+#define FW_RX_DESC_BYTE_discard_msdu3_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_discard_msdu3) >> B_FW_RX_DESC_BYTE_discard_msdu3))
+
+#define FW_RX_DESC_BYTE_discard_msdu3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu3));    \
+		(*(base + O_FW_RX_DESC_BYTE_discard_msdu3 + offset)) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu3) & M_FW_RX_DESC_BYTE_discard_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu3));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_discard_msdu3) & M_FW_RX_DESC_BYTE_discard_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_discard_msdu3_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_discard_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_discard_msdu3)))
+
+#define FW_RX_DESC_BYTE_discard_msdu3_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_discard_msdu3)))
+
+#define O_FW_RX_DESC_BYTE_forward_msdu3 0
+#define B_FW_RX_DESC_BYTE_forward_msdu3 25
+#define W_FW_RX_DESC_BYTE_forward_msdu3 1
+#define M_FW_RX_DESC_BYTE_forward_msdu3 0x02000000
+
+#define FW_RX_DESC_BYTE_forward_msdu3_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_forward_msdu3 + offset)) & M_FW_RX_DESC_BYTE_forward_msdu3) >> B_FW_RX_DESC_BYTE_forward_msdu3))
+
+#define FW_RX_DESC_BYTE_forward_msdu3_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_forward_msdu3) >> B_FW_RX_DESC_BYTE_forward_msdu3))
+
+#define FW_RX_DESC_BYTE_forward_msdu3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu3));    \
+		(*(base + O_FW_RX_DESC_BYTE_forward_msdu3 + offset)) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu3) & M_FW_RX_DESC_BYTE_forward_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu3));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_forward_msdu3) & M_FW_RX_DESC_BYTE_forward_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_forward_msdu3_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_forward_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_forward_msdu3)))
+
+#define FW_RX_DESC_BYTE_forward_msdu3_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_forward_msdu3)))
+
+#define O_FW_RX_DESC_BYTE_rsvd1_msdu3 0
+#define B_FW_RX_DESC_BYTE_rsvd1_msdu3 26
+#define W_FW_RX_DESC_BYTE_rsvd1_msdu3 3
+#define M_FW_RX_DESC_BYTE_rsvd1_msdu3 0x1c000000
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu3 + offset)) & M_FW_RX_DESC_BYTE_rsvd1_msdu3) >> B_FW_RX_DESC_BYTE_rsvd1_msdu3))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd1_msdu3) >> B_FW_RX_DESC_BYTE_rsvd1_msdu3))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu3));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu3 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu3) & M_FW_RX_DESC_BYTE_rsvd1_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu3));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd1_msdu3) & M_FW_RX_DESC_BYTE_rsvd1_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd1_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu3)))
+
+#define FW_RX_DESC_BYTE_rsvd1_msdu3_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd1_msdu3)))
+
+#define O_FW_RX_DESC_BYTE_inspect_msdu3 0
+#define B_FW_RX_DESC_BYTE_inspect_msdu3 29
+#define W_FW_RX_DESC_BYTE_inspect_msdu3 1
+#define M_FW_RX_DESC_BYTE_inspect_msdu3 0x20000000
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_inspect_msdu3 + offset)) & M_FW_RX_DESC_BYTE_inspect_msdu3) >> B_FW_RX_DESC_BYTE_inspect_msdu3))
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_inspect_msdu3) >> B_FW_RX_DESC_BYTE_inspect_msdu3))
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu3));    \
+		(*(base + O_FW_RX_DESC_BYTE_inspect_msdu3 + offset)) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu3) & M_FW_RX_DESC_BYTE_inspect_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu3));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_inspect_msdu3) & M_FW_RX_DESC_BYTE_inspect_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_inspect_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu3)))
+
+#define FW_RX_DESC_BYTE_inspect_msdu3_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_inspect_msdu3)))
+
+#define O_FW_RX_DESC_BYTE_rsvd2_msdu3 0
+#define B_FW_RX_DESC_BYTE_rsvd2_msdu3 30
+#define W_FW_RX_DESC_BYTE_rsvd2_msdu3 2
+#define M_FW_RX_DESC_BYTE_rsvd2_msdu3 0xc0000000
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_get_indirect(base, offset)	((((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu3 + offset)) & M_FW_RX_DESC_BYTE_rsvd2_msdu3) >> B_FW_RX_DESC_BYTE_rsvd2_msdu3))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_get_direct(dword)	((((dword) & M_FW_RX_DESC_BYTE_rsvd2_msdu3) >> B_FW_RX_DESC_BYTE_rsvd2_msdu3))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu3));    \
+		(*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu3 + offset)) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu3) & M_FW_RX_DESC_BYTE_rsvd2_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu3));    \
+		(dword) |= ((val << B_FW_RX_DESC_BYTE_rsvd2_msdu3) & M_FW_RX_DESC_BYTE_rsvd2_msdu3);    \
+	} while (0)
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_clear_indirect(base, offset)	((*(base + O_FW_RX_DESC_BYTE_rsvd2_msdu3 + offset)) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu3)))
+
+#define FW_RX_DESC_BYTE_rsvd2_msdu3_clear_direct(dword)	((dword) &= (~(M_FW_RX_DESC_BYTE_rsvd2_msdu3)))
+
+#define O_CTXT_MPDU_mpdu_cnt_mpdu_range0 0
+#define B_CTXT_MPDU_mpdu_cnt_mpdu_range0 0
+#define W_CTXT_MPDU_mpdu_cnt_mpdu_range0 8
+#define M_CTXT_MPDU_mpdu_cnt_mpdu_range0 0x000000ff
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_get_indirect(base, offset)	((((*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range0 + offset)) & M_CTXT_MPDU_mpdu_cnt_mpdu_range0) >> B_CTXT_MPDU_mpdu_cnt_mpdu_range0))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_get_direct(dword)	((((dword) & M_CTXT_MPDU_mpdu_cnt_mpdu_range0) >> B_CTXT_MPDU_mpdu_cnt_mpdu_range0))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range0 + offset)) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range0));    \
+		(*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range0 + offset)) |= ((val << B_CTXT_MPDU_mpdu_cnt_mpdu_range0) & M_CTXT_MPDU_mpdu_cnt_mpdu_range0);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range0));    \
+		(dword) |= ((val << B_CTXT_MPDU_mpdu_cnt_mpdu_range0) & M_CTXT_MPDU_mpdu_cnt_mpdu_range0);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_clear_indirect(base, offset)	((*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range0 + offset)) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range0)))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range0_clear_direct(dword)	((dword) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range0)))
+
+#define O_CTXT_MPDU_mpdu_status_mpdu_range0 0
+#define B_CTXT_MPDU_mpdu_status_mpdu_range0 8
+#define W_CTXT_MPDU_mpdu_status_mpdu_range0 8
+#define M_CTXT_MPDU_mpdu_status_mpdu_range0 0x0000ff00
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_get_indirect(base, offset)	((((*(base + O_CTXT_MPDU_mpdu_status_mpdu_range0 + offset)) & M_CTXT_MPDU_mpdu_status_mpdu_range0) >> B_CTXT_MPDU_mpdu_status_mpdu_range0))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_get_direct(dword)	((((dword) & M_CTXT_MPDU_mpdu_status_mpdu_range0) >> B_CTXT_MPDU_mpdu_status_mpdu_range0))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_CTXT_MPDU_mpdu_status_mpdu_range0 + offset)) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range0));    \
+		(*(base + O_CTXT_MPDU_mpdu_status_mpdu_range0 + offset)) |= ((val << B_CTXT_MPDU_mpdu_status_mpdu_range0) & M_CTXT_MPDU_mpdu_status_mpdu_range0);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range0));    \
+		(dword) |= ((val << B_CTXT_MPDU_mpdu_status_mpdu_range0) & M_CTXT_MPDU_mpdu_status_mpdu_range0);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_clear_indirect(base, offset)	((*(base + O_CTXT_MPDU_mpdu_status_mpdu_range0 + offset)) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range0)))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range0_clear_direct(dword)	((dword) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range0)))
+
+#define O_CTXT_MPDU_mpdu_cnt_mpdu_range1 0
+#define B_CTXT_MPDU_mpdu_cnt_mpdu_range1 16
+#define W_CTXT_MPDU_mpdu_cnt_mpdu_range1 8
+#define M_CTXT_MPDU_mpdu_cnt_mpdu_range1 0x00ff0000
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_get_indirect(base, offset)	((((*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range1 + offset)) & M_CTXT_MPDU_mpdu_cnt_mpdu_range1) >> B_CTXT_MPDU_mpdu_cnt_mpdu_range1))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_get_direct(dword)	((((dword) & M_CTXT_MPDU_mpdu_cnt_mpdu_range1) >> B_CTXT_MPDU_mpdu_cnt_mpdu_range1))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range1 + offset)) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range1));    \
+		(*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range1 + offset)) |= ((val << B_CTXT_MPDU_mpdu_cnt_mpdu_range1) & M_CTXT_MPDU_mpdu_cnt_mpdu_range1);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range1));    \
+		(dword) |= ((val << B_CTXT_MPDU_mpdu_cnt_mpdu_range1) & M_CTXT_MPDU_mpdu_cnt_mpdu_range1);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_clear_indirect(base, offset)	((*(base + O_CTXT_MPDU_mpdu_cnt_mpdu_range1 + offset)) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range1)))
+
+#define CTXT_MPDU_mpdu_cnt_mpdu_range1_clear_direct(dword)	((dword) &= (~(M_CTXT_MPDU_mpdu_cnt_mpdu_range1)))
+
+#define O_CTXT_MPDU_mpdu_status_mpdu_range1 0
+#define B_CTXT_MPDU_mpdu_status_mpdu_range1 24
+#define W_CTXT_MPDU_mpdu_status_mpdu_range1 8
+#define M_CTXT_MPDU_mpdu_status_mpdu_range1 0xff000000
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_get_indirect(base, offset)	((((*(base + O_CTXT_MPDU_mpdu_status_mpdu_range1 + offset)) & M_CTXT_MPDU_mpdu_status_mpdu_range1) >> B_CTXT_MPDU_mpdu_status_mpdu_range1))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_get_direct(dword)	((((dword) & M_CTXT_MPDU_mpdu_status_mpdu_range1) >> B_CTXT_MPDU_mpdu_status_mpdu_range1))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_CTXT_MPDU_mpdu_status_mpdu_range1 + offset)) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range1));    \
+		(*(base + O_CTXT_MPDU_mpdu_status_mpdu_range1 + offset)) |= ((val << B_CTXT_MPDU_mpdu_status_mpdu_range1) & M_CTXT_MPDU_mpdu_status_mpdu_range1);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range1));    \
+		(dword) |= ((val << B_CTXT_MPDU_mpdu_status_mpdu_range1) & M_CTXT_MPDU_mpdu_status_mpdu_range1);    \
+	} while (0)
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_clear_indirect(base, offset)	((*(base + O_CTXT_MPDU_mpdu_status_mpdu_range1 + offset)) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range1)))
+
+#define CTXT_MPDU_mpdu_status_mpdu_range1_clear_direct(dword)	((dword) &= (~(M_CTXT_MPDU_mpdu_status_mpdu_range1)))
+
+#define O_DLRX_FLUSH_MSG_htt_hdr 0
+#define B_DLRX_FLUSH_MSG_htt_hdr 0
+#define W_DLRX_FLUSH_MSG_htt_hdr 32
+#define M_DLRX_FLUSH_MSG_htt_hdr 0xffffffff
+
+#define DLRX_FLUSH_MSG_htt_hdr_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_htt_hdr + offset)) & M_DLRX_FLUSH_MSG_htt_hdr) >> B_DLRX_FLUSH_MSG_htt_hdr))
+
+#define DLRX_FLUSH_MSG_htt_hdr_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_htt_hdr) >> B_DLRX_FLUSH_MSG_htt_hdr))
+
+#define DLRX_FLUSH_MSG_htt_hdr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_htt_hdr + offset)) &= (~(M_DLRX_FLUSH_MSG_htt_hdr));    \
+		(*(base + O_DLRX_FLUSH_MSG_htt_hdr + offset)) |= ((val << B_DLRX_FLUSH_MSG_htt_hdr) & M_DLRX_FLUSH_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_htt_hdr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_htt_hdr));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_htt_hdr) & M_DLRX_FLUSH_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_htt_hdr_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_htt_hdr + offset)) &= (~(M_DLRX_FLUSH_MSG_htt_hdr)))
+
+#define DLRX_FLUSH_MSG_htt_hdr_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_htt_hdr)))
+
+#define O_DLRX_FLUSH_MSG_msg_type 2
+#define B_DLRX_FLUSH_MSG_msg_type 0
+#define W_DLRX_FLUSH_MSG_msg_type 8
+#define M_DLRX_FLUSH_MSG_msg_type 0x000000ff
+
+#define DLRX_FLUSH_MSG_msg_type_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_msg_type + offset)) & M_DLRX_FLUSH_MSG_msg_type) >> B_DLRX_FLUSH_MSG_msg_type))
+
+#define DLRX_FLUSH_MSG_msg_type_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_msg_type) >> B_DLRX_FLUSH_MSG_msg_type))
+
+#define DLRX_FLUSH_MSG_msg_type_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_msg_type + offset)) &= (~(M_DLRX_FLUSH_MSG_msg_type));    \
+		(*(base + O_DLRX_FLUSH_MSG_msg_type + offset)) |= ((val << B_DLRX_FLUSH_MSG_msg_type) & M_DLRX_FLUSH_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_msg_type_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_msg_type));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_msg_type) & M_DLRX_FLUSH_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_msg_type_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_msg_type + offset)) &= (~(M_DLRX_FLUSH_MSG_msg_type)))
+
+#define DLRX_FLUSH_MSG_msg_type_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_msg_type)))
+
+#define O_DLRX_FLUSH_MSG_peer_id 2
+#define B_DLRX_FLUSH_MSG_peer_id 8
+#define W_DLRX_FLUSH_MSG_peer_id 16
+#define M_DLRX_FLUSH_MSG_peer_id 0x00ffff00
+
+#define DLRX_FLUSH_MSG_peer_id_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_peer_id + offset)) & M_DLRX_FLUSH_MSG_peer_id) >> B_DLRX_FLUSH_MSG_peer_id))
+
+#define DLRX_FLUSH_MSG_peer_id_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_peer_id) >> B_DLRX_FLUSH_MSG_peer_id))
+
+#define DLRX_FLUSH_MSG_peer_id_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_peer_id + offset)) &= (~(M_DLRX_FLUSH_MSG_peer_id));    \
+		(*(base + O_DLRX_FLUSH_MSG_peer_id + offset)) |= ((val << B_DLRX_FLUSH_MSG_peer_id) & M_DLRX_FLUSH_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_peer_id_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_peer_id));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_peer_id) & M_DLRX_FLUSH_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_peer_id_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_peer_id + offset)) &= (~(M_DLRX_FLUSH_MSG_peer_id)))
+
+#define DLRX_FLUSH_MSG_peer_id_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_peer_id)))
+
+#define O_DLRX_FLUSH_MSG_ext_tid 2
+#define B_DLRX_FLUSH_MSG_ext_tid 24
+#define W_DLRX_FLUSH_MSG_ext_tid 5
+#define M_DLRX_FLUSH_MSG_ext_tid 0x1f000000
+
+#define DLRX_FLUSH_MSG_ext_tid_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_ext_tid + offset)) & M_DLRX_FLUSH_MSG_ext_tid) >> B_DLRX_FLUSH_MSG_ext_tid))
+
+#define DLRX_FLUSH_MSG_ext_tid_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_ext_tid) >> B_DLRX_FLUSH_MSG_ext_tid))
+
+#define DLRX_FLUSH_MSG_ext_tid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_ext_tid + offset)) &= (~(M_DLRX_FLUSH_MSG_ext_tid));    \
+		(*(base + O_DLRX_FLUSH_MSG_ext_tid + offset)) |= ((val << B_DLRX_FLUSH_MSG_ext_tid) & M_DLRX_FLUSH_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_ext_tid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_ext_tid));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_ext_tid) & M_DLRX_FLUSH_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_ext_tid_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_ext_tid + offset)) &= (~(M_DLRX_FLUSH_MSG_ext_tid)))
+
+#define DLRX_FLUSH_MSG_ext_tid_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_ext_tid)))
+
+#define O_DLRX_FLUSH_MSG_rsvd1 2
+#define B_DLRX_FLUSH_MSG_rsvd1 29
+#define W_DLRX_FLUSH_MSG_rsvd1 3
+#define M_DLRX_FLUSH_MSG_rsvd1 0xe0000000
+
+#define DLRX_FLUSH_MSG_rsvd1_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_rsvd1 + offset)) & M_DLRX_FLUSH_MSG_rsvd1) >> B_DLRX_FLUSH_MSG_rsvd1))
+
+#define DLRX_FLUSH_MSG_rsvd1_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_rsvd1) >> B_DLRX_FLUSH_MSG_rsvd1))
+
+#define DLRX_FLUSH_MSG_rsvd1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd1 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd1));    \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd1 + offset)) |= ((val << B_DLRX_FLUSH_MSG_rsvd1) & M_DLRX_FLUSH_MSG_rsvd1);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_rsvd1));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_rsvd1) & M_DLRX_FLUSH_MSG_rsvd1);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd1_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_rsvd1 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd1)))
+
+#define DLRX_FLUSH_MSG_rsvd1_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_rsvd1)))
+
+#define O_DLRX_FLUSH_MSG_rsvd2 3
+#define B_DLRX_FLUSH_MSG_rsvd2 0
+#define W_DLRX_FLUSH_MSG_rsvd2 8
+#define M_DLRX_FLUSH_MSG_rsvd2 0x000000ff
+
+#define DLRX_FLUSH_MSG_rsvd2_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_rsvd2 + offset)) & M_DLRX_FLUSH_MSG_rsvd2) >> B_DLRX_FLUSH_MSG_rsvd2))
+
+#define DLRX_FLUSH_MSG_rsvd2_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_rsvd2) >> B_DLRX_FLUSH_MSG_rsvd2))
+
+#define DLRX_FLUSH_MSG_rsvd2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd2 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd2));    \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd2 + offset)) |= ((val << B_DLRX_FLUSH_MSG_rsvd2) & M_DLRX_FLUSH_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_rsvd2));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_rsvd2) & M_DLRX_FLUSH_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd2_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_rsvd2 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd2)))
+
+#define DLRX_FLUSH_MSG_rsvd2_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_rsvd2)))
+
+#define O_DLRX_FLUSH_MSG_mpdu_status 3
+#define B_DLRX_FLUSH_MSG_mpdu_status 8
+#define W_DLRX_FLUSH_MSG_mpdu_status 8
+#define M_DLRX_FLUSH_MSG_mpdu_status 0x0000ff00
+
+#define DLRX_FLUSH_MSG_mpdu_status_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_mpdu_status + offset)) & M_DLRX_FLUSH_MSG_mpdu_status) >> B_DLRX_FLUSH_MSG_mpdu_status))
+
+#define DLRX_FLUSH_MSG_mpdu_status_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_mpdu_status) >> B_DLRX_FLUSH_MSG_mpdu_status))
+
+#define DLRX_FLUSH_MSG_mpdu_status_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_mpdu_status + offset)) &= (~(M_DLRX_FLUSH_MSG_mpdu_status));    \
+		(*(base + O_DLRX_FLUSH_MSG_mpdu_status + offset)) |= ((val << B_DLRX_FLUSH_MSG_mpdu_status) & M_DLRX_FLUSH_MSG_mpdu_status);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_mpdu_status_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_mpdu_status));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_mpdu_status) & M_DLRX_FLUSH_MSG_mpdu_status);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_mpdu_status_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_mpdu_status + offset)) &= (~(M_DLRX_FLUSH_MSG_mpdu_status)))
+
+#define DLRX_FLUSH_MSG_mpdu_status_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_mpdu_status)))
+
+#define O_DLRX_FLUSH_MSG_flush_start_seqid 3
+#define B_DLRX_FLUSH_MSG_flush_start_seqid 16
+#define W_DLRX_FLUSH_MSG_flush_start_seqid 6
+#define M_DLRX_FLUSH_MSG_flush_start_seqid 0x003f0000
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_flush_start_seqid + offset)) & M_DLRX_FLUSH_MSG_flush_start_seqid) >> B_DLRX_FLUSH_MSG_flush_start_seqid))
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_flush_start_seqid) >> B_DLRX_FLUSH_MSG_flush_start_seqid))
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_FLUSH_MSG_flush_start_seqid));    \
+		(*(base + O_DLRX_FLUSH_MSG_flush_start_seqid + offset)) |= ((val << B_DLRX_FLUSH_MSG_flush_start_seqid) & M_DLRX_FLUSH_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_flush_start_seqid));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_flush_start_seqid) & M_DLRX_FLUSH_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_FLUSH_MSG_flush_start_seqid)))
+
+#define DLRX_FLUSH_MSG_flush_start_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_flush_start_seqid)))
+
+#define O_DLRX_FLUSH_MSG_rsvd3 3
+#define B_DLRX_FLUSH_MSG_rsvd3 22
+#define W_DLRX_FLUSH_MSG_rsvd3 2
+#define M_DLRX_FLUSH_MSG_rsvd3 0x00c00000
+
+#define DLRX_FLUSH_MSG_rsvd3_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_rsvd3 + offset)) & M_DLRX_FLUSH_MSG_rsvd3) >> B_DLRX_FLUSH_MSG_rsvd3))
+
+#define DLRX_FLUSH_MSG_rsvd3_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_rsvd3) >> B_DLRX_FLUSH_MSG_rsvd3))
+
+#define DLRX_FLUSH_MSG_rsvd3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd3 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd3));    \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd3 + offset)) |= ((val << B_DLRX_FLUSH_MSG_rsvd3) & M_DLRX_FLUSH_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_rsvd3));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_rsvd3) & M_DLRX_FLUSH_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd3_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_rsvd3 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd3)))
+
+#define DLRX_FLUSH_MSG_rsvd3_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_rsvd3)))
+
+#define O_DLRX_FLUSH_MSG_flush_end_seqid 3
+#define B_DLRX_FLUSH_MSG_flush_end_seqid 24
+#define W_DLRX_FLUSH_MSG_flush_end_seqid 6
+#define M_DLRX_FLUSH_MSG_flush_end_seqid 0x3f000000
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_flush_end_seqid + offset)) & M_DLRX_FLUSH_MSG_flush_end_seqid) >> B_DLRX_FLUSH_MSG_flush_end_seqid))
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_flush_end_seqid) >> B_DLRX_FLUSH_MSG_flush_end_seqid))
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_FLUSH_MSG_flush_end_seqid));    \
+		(*(base + O_DLRX_FLUSH_MSG_flush_end_seqid + offset)) |= ((val << B_DLRX_FLUSH_MSG_flush_end_seqid) & M_DLRX_FLUSH_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_flush_end_seqid));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_flush_end_seqid) & M_DLRX_FLUSH_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_FLUSH_MSG_flush_end_seqid)))
+
+#define DLRX_FLUSH_MSG_flush_end_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_flush_end_seqid)))
+
+#define O_DLRX_FLUSH_MSG_rsvd4 3
+#define B_DLRX_FLUSH_MSG_rsvd4 30
+#define W_DLRX_FLUSH_MSG_rsvd4 2
+#define M_DLRX_FLUSH_MSG_rsvd4 0xc0000000
+
+#define DLRX_FLUSH_MSG_rsvd4_get_indirect(base, offset)	((((*(base + O_DLRX_FLUSH_MSG_rsvd4 + offset)) & M_DLRX_FLUSH_MSG_rsvd4) >> B_DLRX_FLUSH_MSG_rsvd4))
+
+#define DLRX_FLUSH_MSG_rsvd4_get_direct(dword)	((((dword) & M_DLRX_FLUSH_MSG_rsvd4) >> B_DLRX_FLUSH_MSG_rsvd4))
+
+#define DLRX_FLUSH_MSG_rsvd4_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd4 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd4));    \
+		(*(base + O_DLRX_FLUSH_MSG_rsvd4 + offset)) |= ((val << B_DLRX_FLUSH_MSG_rsvd4) & M_DLRX_FLUSH_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd4_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FLUSH_MSG_rsvd4));    \
+		(dword) |= ((val << B_DLRX_FLUSH_MSG_rsvd4) & M_DLRX_FLUSH_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_FLUSH_MSG_rsvd4_clear_indirect(base, offset)	((*(base + O_DLRX_FLUSH_MSG_rsvd4 + offset)) &= (~(M_DLRX_FLUSH_MSG_rsvd4)))
+
+#define DLRX_FLUSH_MSG_rsvd4_clear_direct(dword)	((dword) &= (~(M_DLRX_FLUSH_MSG_rsvd4)))
+
+#define O_DLRX_FRAG_IND_MSG_htt_hdr 0
+#define B_DLRX_FRAG_IND_MSG_htt_hdr 0
+#define W_DLRX_FRAG_IND_MSG_htt_hdr 32
+#define M_DLRX_FRAG_IND_MSG_htt_hdr 0xffffffff
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_htt_hdr + offset)) & M_DLRX_FRAG_IND_MSG_htt_hdr) >> B_DLRX_FRAG_IND_MSG_htt_hdr))
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_htt_hdr) >> B_DLRX_FRAG_IND_MSG_htt_hdr))
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_htt_hdr + offset)) &= (~(M_DLRX_FRAG_IND_MSG_htt_hdr));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_htt_hdr + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_htt_hdr) & M_DLRX_FRAG_IND_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_htt_hdr));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_htt_hdr) & M_DLRX_FRAG_IND_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_htt_hdr + offset)) &= (~(M_DLRX_FRAG_IND_MSG_htt_hdr)))
+
+#define DLRX_FRAG_IND_MSG_htt_hdr_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_htt_hdr)))
+
+#define O_DLRX_FRAG_IND_MSG_msg_type 2
+#define B_DLRX_FRAG_IND_MSG_msg_type 0
+#define W_DLRX_FRAG_IND_MSG_msg_type 8
+#define M_DLRX_FRAG_IND_MSG_msg_type 0x000000ff
+
+#define DLRX_FRAG_IND_MSG_msg_type_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_msg_type + offset)) & M_DLRX_FRAG_IND_MSG_msg_type) >> B_DLRX_FRAG_IND_MSG_msg_type))
+
+#define DLRX_FRAG_IND_MSG_msg_type_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_msg_type) >> B_DLRX_FRAG_IND_MSG_msg_type))
+
+#define DLRX_FRAG_IND_MSG_msg_type_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_msg_type + offset)) &= (~(M_DLRX_FRAG_IND_MSG_msg_type));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_msg_type + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_msg_type) & M_DLRX_FRAG_IND_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_msg_type_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_msg_type));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_msg_type) & M_DLRX_FRAG_IND_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_msg_type_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_msg_type + offset)) &= (~(M_DLRX_FRAG_IND_MSG_msg_type)))
+
+#define DLRX_FRAG_IND_MSG_msg_type_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_msg_type)))
+
+#define O_DLRX_FRAG_IND_MSG_ext_tid 2
+#define B_DLRX_FRAG_IND_MSG_ext_tid 8
+#define W_DLRX_FRAG_IND_MSG_ext_tid 5
+#define M_DLRX_FRAG_IND_MSG_ext_tid 0x00001f00
+
+#define DLRX_FRAG_IND_MSG_ext_tid_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_ext_tid + offset)) & M_DLRX_FRAG_IND_MSG_ext_tid) >> B_DLRX_FRAG_IND_MSG_ext_tid))
+
+#define DLRX_FRAG_IND_MSG_ext_tid_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_ext_tid) >> B_DLRX_FRAG_IND_MSG_ext_tid))
+
+#define DLRX_FRAG_IND_MSG_ext_tid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_ext_tid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_ext_tid));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_ext_tid + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_ext_tid) & M_DLRX_FRAG_IND_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_ext_tid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_ext_tid));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_ext_tid) & M_DLRX_FRAG_IND_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_ext_tid_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_ext_tid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_ext_tid)))
+
+#define DLRX_FRAG_IND_MSG_ext_tid_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_ext_tid)))
+
+#define O_DLRX_FRAG_IND_MSG_fv 2
+#define B_DLRX_FRAG_IND_MSG_fv 13
+#define W_DLRX_FRAG_IND_MSG_fv 1
+#define M_DLRX_FRAG_IND_MSG_fv 0x00002000
+
+#define DLRX_FRAG_IND_MSG_fv_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_fv + offset)) & M_DLRX_FRAG_IND_MSG_fv) >> B_DLRX_FRAG_IND_MSG_fv))
+
+#define DLRX_FRAG_IND_MSG_fv_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_fv) >> B_DLRX_FRAG_IND_MSG_fv))
+
+#define DLRX_FRAG_IND_MSG_fv_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_fv + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fv));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_fv + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_fv) & M_DLRX_FRAG_IND_MSG_fv);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fv_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_fv));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_fv) & M_DLRX_FRAG_IND_MSG_fv);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fv_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_fv + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fv)))
+
+#define DLRX_FRAG_IND_MSG_fv_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_fv)))
+
+#define O_DLRX_FRAG_IND_MSG_rsvd0 2
+#define B_DLRX_FRAG_IND_MSG_rsvd0 14
+#define W_DLRX_FRAG_IND_MSG_rsvd0 2
+#define M_DLRX_FRAG_IND_MSG_rsvd0 0x0000c000
+
+#define DLRX_FRAG_IND_MSG_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_rsvd0 + offset)) & M_DLRX_FRAG_IND_MSG_rsvd0) >> B_DLRX_FRAG_IND_MSG_rsvd0))
+
+#define DLRX_FRAG_IND_MSG_rsvd0_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_rsvd0) >> B_DLRX_FRAG_IND_MSG_rsvd0))
+
+#define DLRX_FRAG_IND_MSG_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd0 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd0));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd0 + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd0) & M_DLRX_FRAG_IND_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd0));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd0) & M_DLRX_FRAG_IND_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_rsvd0 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd0)))
+
+#define DLRX_FRAG_IND_MSG_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd0)))
+
+#define O_DLRX_FRAG_IND_MSG_peer_id 2
+#define B_DLRX_FRAG_IND_MSG_peer_id 16
+#define W_DLRX_FRAG_IND_MSG_peer_id 16
+#define M_DLRX_FRAG_IND_MSG_peer_id 0xffff0000
+
+#define DLRX_FRAG_IND_MSG_peer_id_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_peer_id + offset)) & M_DLRX_FRAG_IND_MSG_peer_id) >> B_DLRX_FRAG_IND_MSG_peer_id))
+
+#define DLRX_FRAG_IND_MSG_peer_id_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_peer_id) >> B_DLRX_FRAG_IND_MSG_peer_id))
+
+#define DLRX_FRAG_IND_MSG_peer_id_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_peer_id + offset)) &= (~(M_DLRX_FRAG_IND_MSG_peer_id));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_peer_id + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_peer_id) & M_DLRX_FRAG_IND_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_peer_id_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_peer_id));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_peer_id) & M_DLRX_FRAG_IND_MSG_peer_id);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_peer_id_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_peer_id + offset)) &= (~(M_DLRX_FRAG_IND_MSG_peer_id)))
+
+#define DLRX_FRAG_IND_MSG_peer_id_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_peer_id)))
+
+#define O_DLRX_FRAG_IND_MSG_flush_start_seqid 3
+#define B_DLRX_FRAG_IND_MSG_flush_start_seqid 0
+#define W_DLRX_FRAG_IND_MSG_flush_start_seqid 6
+#define M_DLRX_FRAG_IND_MSG_flush_start_seqid 0x0000003f
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_flush_start_seqid + offset)) & M_DLRX_FRAG_IND_MSG_flush_start_seqid) >> B_DLRX_FRAG_IND_MSG_flush_start_seqid))
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_flush_start_seqid) >> B_DLRX_FRAG_IND_MSG_flush_start_seqid))
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_flush_start_seqid));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_flush_start_seqid + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_flush_start_seqid) & M_DLRX_FRAG_IND_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_flush_start_seqid));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_flush_start_seqid) & M_DLRX_FRAG_IND_MSG_flush_start_seqid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_flush_start_seqid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_flush_start_seqid)))
+
+#define DLRX_FRAG_IND_MSG_flush_start_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_flush_start_seqid)))
+
+#define O_DLRX_FRAG_IND_MSG_flush_end_seqid 3
+#define B_DLRX_FRAG_IND_MSG_flush_end_seqid 6
+#define W_DLRX_FRAG_IND_MSG_flush_end_seqid 6
+#define M_DLRX_FRAG_IND_MSG_flush_end_seqid 0x00000fc0
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_flush_end_seqid + offset)) & M_DLRX_FRAG_IND_MSG_flush_end_seqid) >> B_DLRX_FRAG_IND_MSG_flush_end_seqid))
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_flush_end_seqid) >> B_DLRX_FRAG_IND_MSG_flush_end_seqid))
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_flush_end_seqid));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_flush_end_seqid + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_flush_end_seqid) & M_DLRX_FRAG_IND_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_flush_end_seqid));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_flush_end_seqid) & M_DLRX_FRAG_IND_MSG_flush_end_seqid);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_flush_end_seqid + offset)) &= (~(M_DLRX_FRAG_IND_MSG_flush_end_seqid)))
+
+#define DLRX_FRAG_IND_MSG_flush_end_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_flush_end_seqid)))
+
+#define O_DLRX_FRAG_IND_MSG_rsvd2 3
+#define B_DLRX_FRAG_IND_MSG_rsvd2 12
+#define W_DLRX_FRAG_IND_MSG_rsvd2 20
+#define M_DLRX_FRAG_IND_MSG_rsvd2 0xfffff000
+
+#define DLRX_FRAG_IND_MSG_rsvd2_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_rsvd2 + offset)) & M_DLRX_FRAG_IND_MSG_rsvd2) >> B_DLRX_FRAG_IND_MSG_rsvd2))
+
+#define DLRX_FRAG_IND_MSG_rsvd2_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_rsvd2) >> B_DLRX_FRAG_IND_MSG_rsvd2))
+
+#define DLRX_FRAG_IND_MSG_rsvd2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd2 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd2));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd2 + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd2) & M_DLRX_FRAG_IND_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd2));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd2) & M_DLRX_FRAG_IND_MSG_rsvd2);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd2_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_rsvd2 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd2)))
+
+#define DLRX_FRAG_IND_MSG_rsvd2_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd2)))
+
+#define O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num 4
+#define B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num 0
+#define W_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num 16
+#define M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num 0x0000ffff
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num + offset)) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num) >> B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num) >> B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num)))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_num)))
+
+#define O_DLRX_FRAG_IND_MSG_rsvd3 4
+#define B_DLRX_FRAG_IND_MSG_rsvd3 16
+#define W_DLRX_FRAG_IND_MSG_rsvd3 16
+#define M_DLRX_FRAG_IND_MSG_rsvd3 0xffff0000
+
+#define DLRX_FRAG_IND_MSG_rsvd3_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_rsvd3 + offset)) & M_DLRX_FRAG_IND_MSG_rsvd3) >> B_DLRX_FRAG_IND_MSG_rsvd3))
+
+#define DLRX_FRAG_IND_MSG_rsvd3_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_rsvd3) >> B_DLRX_FRAG_IND_MSG_rsvd3))
+
+#define DLRX_FRAG_IND_MSG_rsvd3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd3 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd3));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd3 + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd3) & M_DLRX_FRAG_IND_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd3));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd3) & M_DLRX_FRAG_IND_MSG_rsvd3);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd3_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_rsvd3 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd3)))
+
+#define DLRX_FRAG_IND_MSG_rsvd3_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd3)))
+
+#define O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 5
+#define B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 0
+#define W_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 8
+#define M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 0x000000ff
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 + offset)) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0) >> B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0) >> B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0) & M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0)))
+
+#define DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_fw_rx_desc_byte_msdu0)))
+
+#define O_DLRX_FRAG_IND_MSG_padding 5
+#define B_DLRX_FRAG_IND_MSG_padding 8
+#define W_DLRX_FRAG_IND_MSG_padding 24
+#define M_DLRX_FRAG_IND_MSG_padding 0xffffff00
+
+#define DLRX_FRAG_IND_MSG_padding_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_padding + offset)) & M_DLRX_FRAG_IND_MSG_padding) >> B_DLRX_FRAG_IND_MSG_padding))
+
+#define DLRX_FRAG_IND_MSG_padding_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_padding) >> B_DLRX_FRAG_IND_MSG_padding))
+
+#define DLRX_FRAG_IND_MSG_padding_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_padding + offset)) &= (~(M_DLRX_FRAG_IND_MSG_padding));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_padding + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_padding) & M_DLRX_FRAG_IND_MSG_padding);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_padding_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_padding));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_padding) & M_DLRX_FRAG_IND_MSG_padding);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_padding_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_padding + offset)) &= (~(M_DLRX_FRAG_IND_MSG_padding)))
+
+#define DLRX_FRAG_IND_MSG_padding_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_padding)))
+
+#define O_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index 6
+#define B_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index 0
+#define W_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index 12
+#define M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index 0x00000fff
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index + offset)) & M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index) >> B_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index))
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index) >> B_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index))
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index) & M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index) & M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index)))
+
+#define DLRX_FRAG_IND_MSG_rxpb_ptr_read_index_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_rxpb_ptr_read_index)))
+
+#define O_DLRX_FRAG_IND_MSG_rsvd4 6
+#define B_DLRX_FRAG_IND_MSG_rsvd4 12
+#define W_DLRX_FRAG_IND_MSG_rsvd4 20
+#define M_DLRX_FRAG_IND_MSG_rsvd4 0xfffff000
+
+#define DLRX_FRAG_IND_MSG_rsvd4_get_indirect(base, offset)	((((*(base + O_DLRX_FRAG_IND_MSG_rsvd4 + offset)) & M_DLRX_FRAG_IND_MSG_rsvd4) >> B_DLRX_FRAG_IND_MSG_rsvd4))
+
+#define DLRX_FRAG_IND_MSG_rsvd4_get_direct(dword)	((((dword) & M_DLRX_FRAG_IND_MSG_rsvd4) >> B_DLRX_FRAG_IND_MSG_rsvd4))
+
+#define DLRX_FRAG_IND_MSG_rsvd4_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd4 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd4));    \
+		(*(base + O_DLRX_FRAG_IND_MSG_rsvd4 + offset)) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd4) & M_DLRX_FRAG_IND_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd4_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd4));    \
+		(dword) |= ((val << B_DLRX_FRAG_IND_MSG_rsvd4) & M_DLRX_FRAG_IND_MSG_rsvd4);    \
+	} while (0)
+
+#define DLRX_FRAG_IND_MSG_rsvd4_clear_indirect(base, offset)	((*(base + O_DLRX_FRAG_IND_MSG_rsvd4 + offset)) &= (~(M_DLRX_FRAG_IND_MSG_rsvd4)))
+
+#define DLRX_FRAG_IND_MSG_rsvd4_clear_direct(dword)	((dword) &= (~(M_DLRX_FRAG_IND_MSG_rsvd4)))
+
+#define O_DLRX_TX_CMPL_MSG_htt_hdr 0
+#define B_DLRX_TX_CMPL_MSG_htt_hdr 0
+#define W_DLRX_TX_CMPL_MSG_htt_hdr 32
+#define M_DLRX_TX_CMPL_MSG_htt_hdr 0xffffffff
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_get_indirect(base, offset)	((((*(base + O_DLRX_TX_CMPL_MSG_htt_hdr + offset)) & M_DLRX_TX_CMPL_MSG_htt_hdr) >> B_DLRX_TX_CMPL_MSG_htt_hdr))
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_get_direct(dword)	((((dword) & M_DLRX_TX_CMPL_MSG_htt_hdr) >> B_DLRX_TX_CMPL_MSG_htt_hdr))
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_TX_CMPL_MSG_htt_hdr + offset)) &= (~(M_DLRX_TX_CMPL_MSG_htt_hdr));    \
+		(*(base + O_DLRX_TX_CMPL_MSG_htt_hdr + offset)) |= ((val << B_DLRX_TX_CMPL_MSG_htt_hdr) & M_DLRX_TX_CMPL_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_TX_CMPL_MSG_htt_hdr));    \
+		(dword) |= ((val << B_DLRX_TX_CMPL_MSG_htt_hdr) & M_DLRX_TX_CMPL_MSG_htt_hdr);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_clear_indirect(base, offset)	((*(base + O_DLRX_TX_CMPL_MSG_htt_hdr + offset)) &= (~(M_DLRX_TX_CMPL_MSG_htt_hdr)))
+
+#define DLRX_TX_CMPL_MSG_htt_hdr_clear_direct(dword)	((dword) &= (~(M_DLRX_TX_CMPL_MSG_htt_hdr)))
+
+#define O_DLRX_TX_CMPL_MSG_msg_type 2
+#define B_DLRX_TX_CMPL_MSG_msg_type 0
+#define W_DLRX_TX_CMPL_MSG_msg_type 8
+#define M_DLRX_TX_CMPL_MSG_msg_type 0x000000ff
+
+#define DLRX_TX_CMPL_MSG_msg_type_get_indirect(base, offset)	((((*(base + O_DLRX_TX_CMPL_MSG_msg_type + offset)) & M_DLRX_TX_CMPL_MSG_msg_type) >> B_DLRX_TX_CMPL_MSG_msg_type))
+
+#define DLRX_TX_CMPL_MSG_msg_type_get_direct(dword)	((((dword) & M_DLRX_TX_CMPL_MSG_msg_type) >> B_DLRX_TX_CMPL_MSG_msg_type))
+
+#define DLRX_TX_CMPL_MSG_msg_type_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_TX_CMPL_MSG_msg_type + offset)) &= (~(M_DLRX_TX_CMPL_MSG_msg_type));    \
+		(*(base + O_DLRX_TX_CMPL_MSG_msg_type + offset)) |= ((val << B_DLRX_TX_CMPL_MSG_msg_type) & M_DLRX_TX_CMPL_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_msg_type_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_TX_CMPL_MSG_msg_type));    \
+		(dword) |= ((val << B_DLRX_TX_CMPL_MSG_msg_type) & M_DLRX_TX_CMPL_MSG_msg_type);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_msg_type_clear_indirect(base, offset)	((*(base + O_DLRX_TX_CMPL_MSG_msg_type + offset)) &= (~(M_DLRX_TX_CMPL_MSG_msg_type)))
+
+#define DLRX_TX_CMPL_MSG_msg_type_clear_direct(dword)	((dword) &= (~(M_DLRX_TX_CMPL_MSG_msg_type)))
+
+#define O_DLRX_TX_CMPL_MSG_status 2
+#define B_DLRX_TX_CMPL_MSG_status 8
+#define W_DLRX_TX_CMPL_MSG_status 3
+#define M_DLRX_TX_CMPL_MSG_status 0x00000700
+
+#define DLRX_TX_CMPL_MSG_status_get_indirect(base, offset)	((((*(base + O_DLRX_TX_CMPL_MSG_status + offset)) & M_DLRX_TX_CMPL_MSG_status) >> B_DLRX_TX_CMPL_MSG_status))
+
+#define DLRX_TX_CMPL_MSG_status_get_direct(dword)	((((dword) & M_DLRX_TX_CMPL_MSG_status) >> B_DLRX_TX_CMPL_MSG_status))
+
+#define DLRX_TX_CMPL_MSG_status_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_TX_CMPL_MSG_status + offset)) &= (~(M_DLRX_TX_CMPL_MSG_status));    \
+		(*(base + O_DLRX_TX_CMPL_MSG_status + offset)) |= ((val << B_DLRX_TX_CMPL_MSG_status) & M_DLRX_TX_CMPL_MSG_status);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_status_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_TX_CMPL_MSG_status));    \
+		(dword) |= ((val << B_DLRX_TX_CMPL_MSG_status) & M_DLRX_TX_CMPL_MSG_status);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_status_clear_indirect(base, offset)	((*(base + O_DLRX_TX_CMPL_MSG_status + offset)) &= (~(M_DLRX_TX_CMPL_MSG_status)))
+
+#define DLRX_TX_CMPL_MSG_status_clear_direct(dword)	((dword) &= (~(M_DLRX_TX_CMPL_MSG_status)))
+
+#define O_DLRX_TX_CMPL_MSG_pb_ptr_rel_num 2
+#define B_DLRX_TX_CMPL_MSG_pb_ptr_rel_num 16
+#define W_DLRX_TX_CMPL_MSG_pb_ptr_rel_num 8
+#define M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num 0x00ff0000
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_get_indirect(base, offset)	((((*(base + O_DLRX_TX_CMPL_MSG_pb_ptr_rel_num + offset)) & M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num) >> B_DLRX_TX_CMPL_MSG_pb_ptr_rel_num))
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_get_direct(dword)	((((dword) & M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num) >> B_DLRX_TX_CMPL_MSG_pb_ptr_rel_num))
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_TX_CMPL_MSG_pb_ptr_rel_num + offset)) &= (~(M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num));    \
+		(*(base + O_DLRX_TX_CMPL_MSG_pb_ptr_rel_num + offset)) |= ((val << B_DLRX_TX_CMPL_MSG_pb_ptr_rel_num) & M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num));    \
+		(dword) |= ((val << B_DLRX_TX_CMPL_MSG_pb_ptr_rel_num) & M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_clear_indirect(base, offset)	((*(base + O_DLRX_TX_CMPL_MSG_pb_ptr_rel_num + offset)) &= (~(M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num)))
+
+#define DLRX_TX_CMPL_MSG_pb_ptr_rel_num_clear_direct(dword)	((dword) &= (~(M_DLRX_TX_CMPL_MSG_pb_ptr_rel_num)))
+
+#define O_DLRX_TX_CMPL_MSG_free_txpb_ptr 3
+#define B_DLRX_TX_CMPL_MSG_free_txpb_ptr 0
+#define W_DLRX_TX_CMPL_MSG_free_txpb_ptr 32
+#define M_DLRX_TX_CMPL_MSG_free_txpb_ptr 0xffffffff
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_TX_CMPL_MSG_free_txpb_ptr + offset)) & M_DLRX_TX_CMPL_MSG_free_txpb_ptr) >> B_DLRX_TX_CMPL_MSG_free_txpb_ptr))
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_get_direct(dword)	((((dword) & M_DLRX_TX_CMPL_MSG_free_txpb_ptr) >> B_DLRX_TX_CMPL_MSG_free_txpb_ptr))
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_TX_CMPL_MSG_free_txpb_ptr + offset)) &= (~(M_DLRX_TX_CMPL_MSG_free_txpb_ptr));    \
+		(*(base + O_DLRX_TX_CMPL_MSG_free_txpb_ptr + offset)) |= ((val << B_DLRX_TX_CMPL_MSG_free_txpb_ptr) & M_DLRX_TX_CMPL_MSG_free_txpb_ptr);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_TX_CMPL_MSG_free_txpb_ptr));    \
+		(dword) |= ((val << B_DLRX_TX_CMPL_MSG_free_txpb_ptr) & M_DLRX_TX_CMPL_MSG_free_txpb_ptr);    \
+	} while (0)
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_TX_CMPL_MSG_free_txpb_ptr + offset)) &= (~(M_DLRX_TX_CMPL_MSG_free_txpb_ptr)))
+
+#define DLRX_TX_CMPL_MSG_free_txpb_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_TX_CMPL_MSG_free_txpb_ptr)))
+
+#define O_DLRX_RO_MAINLIST_last_pn_dw0 0
+#define B_DLRX_RO_MAINLIST_last_pn_dw0 0
+#define W_DLRX_RO_MAINLIST_last_pn_dw0 32
+#define M_DLRX_RO_MAINLIST_last_pn_dw0 0xffffffff
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_last_pn_dw0 + offset)) & M_DLRX_RO_MAINLIST_last_pn_dw0) >> B_DLRX_RO_MAINLIST_last_pn_dw0))
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_last_pn_dw0) >> B_DLRX_RO_MAINLIST_last_pn_dw0))
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw0 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw0));    \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw0 + offset)) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw0) & M_DLRX_RO_MAINLIST_last_pn_dw0);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw0));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw0) & M_DLRX_RO_MAINLIST_last_pn_dw0);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_last_pn_dw0 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw0)))
+
+#define DLRX_RO_MAINLIST_last_pn_dw0_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw0)))
+
+#define O_DLRX_RO_MAINLIST_last_pn_dw1 1
+#define B_DLRX_RO_MAINLIST_last_pn_dw1 0
+#define W_DLRX_RO_MAINLIST_last_pn_dw1 32
+#define M_DLRX_RO_MAINLIST_last_pn_dw1 0xffffffff
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_last_pn_dw1 + offset)) & M_DLRX_RO_MAINLIST_last_pn_dw1) >> B_DLRX_RO_MAINLIST_last_pn_dw1))
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_last_pn_dw1) >> B_DLRX_RO_MAINLIST_last_pn_dw1))
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw1 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw1));    \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw1 + offset)) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw1) & M_DLRX_RO_MAINLIST_last_pn_dw1);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw1));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw1) & M_DLRX_RO_MAINLIST_last_pn_dw1);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_last_pn_dw1 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw1)))
+
+#define DLRX_RO_MAINLIST_last_pn_dw1_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw1)))
+
+#define O_DLRX_RO_MAINLIST_last_pn_dw2 2
+#define B_DLRX_RO_MAINLIST_last_pn_dw2 0
+#define W_DLRX_RO_MAINLIST_last_pn_dw2 32
+#define M_DLRX_RO_MAINLIST_last_pn_dw2 0xffffffff
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_last_pn_dw2 + offset)) & M_DLRX_RO_MAINLIST_last_pn_dw2) >> B_DLRX_RO_MAINLIST_last_pn_dw2))
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_last_pn_dw2) >> B_DLRX_RO_MAINLIST_last_pn_dw2))
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw2 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw2));    \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw2 + offset)) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw2) & M_DLRX_RO_MAINLIST_last_pn_dw2);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw2));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw2) & M_DLRX_RO_MAINLIST_last_pn_dw2);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_last_pn_dw2 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw2)))
+
+#define DLRX_RO_MAINLIST_last_pn_dw2_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw2)))
+
+#define O_DLRX_RO_MAINLIST_last_pn_dw3 3
+#define B_DLRX_RO_MAINLIST_last_pn_dw3 0
+#define W_DLRX_RO_MAINLIST_last_pn_dw3 32
+#define M_DLRX_RO_MAINLIST_last_pn_dw3 0xffffffff
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_last_pn_dw3 + offset)) & M_DLRX_RO_MAINLIST_last_pn_dw3) >> B_DLRX_RO_MAINLIST_last_pn_dw3))
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_last_pn_dw3) >> B_DLRX_RO_MAINLIST_last_pn_dw3))
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw3 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw3));    \
+		(*(base + O_DLRX_RO_MAINLIST_last_pn_dw3 + offset)) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw3) & M_DLRX_RO_MAINLIST_last_pn_dw3);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw3));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_last_pn_dw3) & M_DLRX_RO_MAINLIST_last_pn_dw3);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_last_pn_dw3 + offset)) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw3)))
+
+#define DLRX_RO_MAINLIST_last_pn_dw3_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_last_pn_dw3)))
+
+#define O_DLRX_RO_MAINLIST_first_ptr 4
+#define B_DLRX_RO_MAINLIST_first_ptr 0
+#define W_DLRX_RO_MAINLIST_first_ptr 16
+#define M_DLRX_RO_MAINLIST_first_ptr 0x0000ffff
+
+#define DLRX_RO_MAINLIST_first_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_first_ptr + offset)) & M_DLRX_RO_MAINLIST_first_ptr) >> B_DLRX_RO_MAINLIST_first_ptr))
+
+#define DLRX_RO_MAINLIST_first_ptr_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_first_ptr) >> B_DLRX_RO_MAINLIST_first_ptr))
+
+#define DLRX_RO_MAINLIST_first_ptr_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_first_ptr + offset)) &= (~(M_DLRX_RO_MAINLIST_first_ptr));    \
+		(*(base + O_DLRX_RO_MAINLIST_first_ptr + offset)) |= ((val << B_DLRX_RO_MAINLIST_first_ptr) & M_DLRX_RO_MAINLIST_first_ptr);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_first_ptr_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_first_ptr));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_first_ptr) & M_DLRX_RO_MAINLIST_first_ptr);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_first_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_first_ptr + offset)) &= (~(M_DLRX_RO_MAINLIST_first_ptr)))
+
+#define DLRX_RO_MAINLIST_first_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_first_ptr)))
+
+#define O_DLRX_RO_MAINLIST_msdu_num 4
+#define B_DLRX_RO_MAINLIST_msdu_num 16
+#define W_DLRX_RO_MAINLIST_msdu_num 15
+#define M_DLRX_RO_MAINLIST_msdu_num 0x7fff0000
+
+#define DLRX_RO_MAINLIST_msdu_num_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_msdu_num + offset)) & M_DLRX_RO_MAINLIST_msdu_num) >> B_DLRX_RO_MAINLIST_msdu_num))
+
+#define DLRX_RO_MAINLIST_msdu_num_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_msdu_num) >> B_DLRX_RO_MAINLIST_msdu_num))
+
+#define DLRX_RO_MAINLIST_msdu_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_msdu_num + offset)) &= (~(M_DLRX_RO_MAINLIST_msdu_num));    \
+		(*(base + O_DLRX_RO_MAINLIST_msdu_num + offset)) |= ((val << B_DLRX_RO_MAINLIST_msdu_num) & M_DLRX_RO_MAINLIST_msdu_num);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_msdu_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_msdu_num));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_msdu_num) & M_DLRX_RO_MAINLIST_msdu_num);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_msdu_num_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_msdu_num + offset)) &= (~(M_DLRX_RO_MAINLIST_msdu_num)))
+
+#define DLRX_RO_MAINLIST_msdu_num_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_msdu_num)))
+
+#define O_DLRX_RO_MAINLIST_mcast_bcast 4
+#define B_DLRX_RO_MAINLIST_mcast_bcast 31
+#define W_DLRX_RO_MAINLIST_mcast_bcast 1
+#define M_DLRX_RO_MAINLIST_mcast_bcast 0x80000000
+
+#define DLRX_RO_MAINLIST_mcast_bcast_get_indirect(base, offset)	((((*(base + O_DLRX_RO_MAINLIST_mcast_bcast + offset)) & M_DLRX_RO_MAINLIST_mcast_bcast) >> B_DLRX_RO_MAINLIST_mcast_bcast))
+
+#define DLRX_RO_MAINLIST_mcast_bcast_get_direct(dword)	((((dword) & M_DLRX_RO_MAINLIST_mcast_bcast) >> B_DLRX_RO_MAINLIST_mcast_bcast))
+
+#define DLRX_RO_MAINLIST_mcast_bcast_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_MAINLIST_mcast_bcast + offset)) &= (~(M_DLRX_RO_MAINLIST_mcast_bcast));    \
+		(*(base + O_DLRX_RO_MAINLIST_mcast_bcast + offset)) |= ((val << B_DLRX_RO_MAINLIST_mcast_bcast) & M_DLRX_RO_MAINLIST_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_mcast_bcast_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_MAINLIST_mcast_bcast));    \
+		(dword) |= ((val << B_DLRX_RO_MAINLIST_mcast_bcast) & M_DLRX_RO_MAINLIST_mcast_bcast);    \
+	} while (0)
+
+#define DLRX_RO_MAINLIST_mcast_bcast_clear_indirect(base, offset)	((*(base + O_DLRX_RO_MAINLIST_mcast_bcast + offset)) &= (~(M_DLRX_RO_MAINLIST_mcast_bcast)))
+
+#define DLRX_RO_MAINLIST_mcast_bcast_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_MAINLIST_mcast_bcast)))
+
+#define O_DLRX_RO_LINKLIST_pn_dw0 0
+#define B_DLRX_RO_LINKLIST_pn_dw0 0
+#define W_DLRX_RO_LINKLIST_pn_dw0 32
+#define M_DLRX_RO_LINKLIST_pn_dw0 0xffffffff
+
+#define DLRX_RO_LINKLIST_pn_dw0_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_pn_dw0 + offset)) & M_DLRX_RO_LINKLIST_pn_dw0) >> B_DLRX_RO_LINKLIST_pn_dw0))
+
+#define DLRX_RO_LINKLIST_pn_dw0_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_pn_dw0) >> B_DLRX_RO_LINKLIST_pn_dw0))
+
+#define DLRX_RO_LINKLIST_pn_dw0_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw0 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw0));    \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw0 + offset)) |= ((val << B_DLRX_RO_LINKLIST_pn_dw0) & M_DLRX_RO_LINKLIST_pn_dw0);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw0_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw0));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_pn_dw0) & M_DLRX_RO_LINKLIST_pn_dw0);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw0_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_pn_dw0 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw0)))
+
+#define DLRX_RO_LINKLIST_pn_dw0_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw0)))
+
+#define O_DLRX_RO_LINKLIST_pn_dw1 1
+#define B_DLRX_RO_LINKLIST_pn_dw1 0
+#define W_DLRX_RO_LINKLIST_pn_dw1 32
+#define M_DLRX_RO_LINKLIST_pn_dw1 0xffffffff
+
+#define DLRX_RO_LINKLIST_pn_dw1_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_pn_dw1 + offset)) & M_DLRX_RO_LINKLIST_pn_dw1) >> B_DLRX_RO_LINKLIST_pn_dw1))
+
+#define DLRX_RO_LINKLIST_pn_dw1_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_pn_dw1) >> B_DLRX_RO_LINKLIST_pn_dw1))
+
+#define DLRX_RO_LINKLIST_pn_dw1_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw1 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw1));    \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw1 + offset)) |= ((val << B_DLRX_RO_LINKLIST_pn_dw1) & M_DLRX_RO_LINKLIST_pn_dw1);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw1_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw1));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_pn_dw1) & M_DLRX_RO_LINKLIST_pn_dw1);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw1_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_pn_dw1 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw1)))
+
+#define DLRX_RO_LINKLIST_pn_dw1_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw1)))
+
+#define O_DLRX_RO_LINKLIST_pn_dw2 2
+#define B_DLRX_RO_LINKLIST_pn_dw2 0
+#define W_DLRX_RO_LINKLIST_pn_dw2 32
+#define M_DLRX_RO_LINKLIST_pn_dw2 0xffffffff
+
+#define DLRX_RO_LINKLIST_pn_dw2_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_pn_dw2 + offset)) & M_DLRX_RO_LINKLIST_pn_dw2) >> B_DLRX_RO_LINKLIST_pn_dw2))
+
+#define DLRX_RO_LINKLIST_pn_dw2_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_pn_dw2) >> B_DLRX_RO_LINKLIST_pn_dw2))
+
+#define DLRX_RO_LINKLIST_pn_dw2_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw2 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw2));    \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw2 + offset)) |= ((val << B_DLRX_RO_LINKLIST_pn_dw2) & M_DLRX_RO_LINKLIST_pn_dw2);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw2_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw2));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_pn_dw2) & M_DLRX_RO_LINKLIST_pn_dw2);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw2_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_pn_dw2 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw2)))
+
+#define DLRX_RO_LINKLIST_pn_dw2_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw2)))
+
+#define O_DLRX_RO_LINKLIST_pn_dw3 3
+#define B_DLRX_RO_LINKLIST_pn_dw3 0
+#define W_DLRX_RO_LINKLIST_pn_dw3 32
+#define M_DLRX_RO_LINKLIST_pn_dw3 0xffffffff
+
+#define DLRX_RO_LINKLIST_pn_dw3_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_pn_dw3 + offset)) & M_DLRX_RO_LINKLIST_pn_dw3) >> B_DLRX_RO_LINKLIST_pn_dw3))
+
+#define DLRX_RO_LINKLIST_pn_dw3_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_pn_dw3) >> B_DLRX_RO_LINKLIST_pn_dw3))
+
+#define DLRX_RO_LINKLIST_pn_dw3_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw3 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw3));    \
+		(*(base + O_DLRX_RO_LINKLIST_pn_dw3 + offset)) |= ((val << B_DLRX_RO_LINKLIST_pn_dw3) & M_DLRX_RO_LINKLIST_pn_dw3);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw3_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw3));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_pn_dw3) & M_DLRX_RO_LINKLIST_pn_dw3);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_pn_dw3_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_pn_dw3 + offset)) &= (~(M_DLRX_RO_LINKLIST_pn_dw3)))
+
+#define DLRX_RO_LINKLIST_pn_dw3_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_pn_dw3)))
+
+#define O_DLRX_RO_LINKLIST_msdu_len 4
+#define B_DLRX_RO_LINKLIST_msdu_len 0
+#define W_DLRX_RO_LINKLIST_msdu_len 16
+#define M_DLRX_RO_LINKLIST_msdu_len 0x0000ffff
+
+#define DLRX_RO_LINKLIST_msdu_len_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_msdu_len + offset)) & M_DLRX_RO_LINKLIST_msdu_len) >> B_DLRX_RO_LINKLIST_msdu_len))
+
+#define DLRX_RO_LINKLIST_msdu_len_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_msdu_len) >> B_DLRX_RO_LINKLIST_msdu_len))
+
+#define DLRX_RO_LINKLIST_msdu_len_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_msdu_len + offset)) &= (~(M_DLRX_RO_LINKLIST_msdu_len));    \
+		(*(base + O_DLRX_RO_LINKLIST_msdu_len + offset)) |= ((val << B_DLRX_RO_LINKLIST_msdu_len) & M_DLRX_RO_LINKLIST_msdu_len);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_msdu_len_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_msdu_len));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_msdu_len) & M_DLRX_RO_LINKLIST_msdu_len);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_msdu_len_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_msdu_len + offset)) &= (~(M_DLRX_RO_LINKLIST_msdu_len)))
+
+#define DLRX_RO_LINKLIST_msdu_len_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_msdu_len)))
+
+#define O_DLRX_RO_LINKLIST_fwd 4
+#define B_DLRX_RO_LINKLIST_fwd 16
+#define W_DLRX_RO_LINKLIST_fwd 1
+#define M_DLRX_RO_LINKLIST_fwd 0x00010000
+
+#define DLRX_RO_LINKLIST_fwd_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_fwd + offset)) & M_DLRX_RO_LINKLIST_fwd) >> B_DLRX_RO_LINKLIST_fwd))
+
+#define DLRX_RO_LINKLIST_fwd_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_fwd) >> B_DLRX_RO_LINKLIST_fwd))
+
+#define DLRX_RO_LINKLIST_fwd_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_fwd + offset)) &= (~(M_DLRX_RO_LINKLIST_fwd));    \
+		(*(base + O_DLRX_RO_LINKLIST_fwd + offset)) |= ((val << B_DLRX_RO_LINKLIST_fwd) & M_DLRX_RO_LINKLIST_fwd);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_fwd_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_fwd));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_fwd) & M_DLRX_RO_LINKLIST_fwd);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_fwd_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_fwd + offset)) &= (~(M_DLRX_RO_LINKLIST_fwd)))
+
+#define DLRX_RO_LINKLIST_fwd_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_fwd)))
+
+#define O_DLRX_RO_LINKLIST_discard 4
+#define B_DLRX_RO_LINKLIST_discard 17
+#define W_DLRX_RO_LINKLIST_discard 1
+#define M_DLRX_RO_LINKLIST_discard 0x00020000
+
+#define DLRX_RO_LINKLIST_discard_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_discard + offset)) & M_DLRX_RO_LINKLIST_discard) >> B_DLRX_RO_LINKLIST_discard))
+
+#define DLRX_RO_LINKLIST_discard_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_discard) >> B_DLRX_RO_LINKLIST_discard))
+
+#define DLRX_RO_LINKLIST_discard_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_discard + offset)) &= (~(M_DLRX_RO_LINKLIST_discard));    \
+		(*(base + O_DLRX_RO_LINKLIST_discard + offset)) |= ((val << B_DLRX_RO_LINKLIST_discard) & M_DLRX_RO_LINKLIST_discard);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_discard_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_discard));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_discard) & M_DLRX_RO_LINKLIST_discard);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_discard_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_discard + offset)) &= (~(M_DLRX_RO_LINKLIST_discard)))
+
+#define DLRX_RO_LINKLIST_discard_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_discard)))
+
+#define O_DLRX_RO_LINKLIST_inspect 4
+#define B_DLRX_RO_LINKLIST_inspect 18
+#define W_DLRX_RO_LINKLIST_inspect 1
+#define M_DLRX_RO_LINKLIST_inspect 0x00040000
+
+#define DLRX_RO_LINKLIST_inspect_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_inspect + offset)) & M_DLRX_RO_LINKLIST_inspect) >> B_DLRX_RO_LINKLIST_inspect))
+
+#define DLRX_RO_LINKLIST_inspect_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_inspect) >> B_DLRX_RO_LINKLIST_inspect))
+
+#define DLRX_RO_LINKLIST_inspect_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_inspect + offset)) &= (~(M_DLRX_RO_LINKLIST_inspect));    \
+		(*(base + O_DLRX_RO_LINKLIST_inspect + offset)) |= ((val << B_DLRX_RO_LINKLIST_inspect) & M_DLRX_RO_LINKLIST_inspect);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_inspect_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_inspect));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_inspect) & M_DLRX_RO_LINKLIST_inspect);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_inspect_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_inspect + offset)) &= (~(M_DLRX_RO_LINKLIST_inspect)))
+
+#define DLRX_RO_LINKLIST_inspect_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_inspect)))
+
+#define O_DLRX_RO_LINKLIST_rsvd0 4
+#define B_DLRX_RO_LINKLIST_rsvd0 19
+#define W_DLRX_RO_LINKLIST_rsvd0 1
+#define M_DLRX_RO_LINKLIST_rsvd0 0x00080000
+
+#define DLRX_RO_LINKLIST_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_rsvd0 + offset)) & M_DLRX_RO_LINKLIST_rsvd0) >> B_DLRX_RO_LINKLIST_rsvd0))
+
+#define DLRX_RO_LINKLIST_rsvd0_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_rsvd0) >> B_DLRX_RO_LINKLIST_rsvd0))
+
+#define DLRX_RO_LINKLIST_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_rsvd0 + offset)) &= (~(M_DLRX_RO_LINKLIST_rsvd0));    \
+		(*(base + O_DLRX_RO_LINKLIST_rsvd0 + offset)) |= ((val << B_DLRX_RO_LINKLIST_rsvd0) & M_DLRX_RO_LINKLIST_rsvd0);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_rsvd0));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_rsvd0) & M_DLRX_RO_LINKLIST_rsvd0);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_rsvd0 + offset)) &= (~(M_DLRX_RO_LINKLIST_rsvd0)))
+
+#define DLRX_RO_LINKLIST_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_rsvd0)))
+
+#define O_DLRX_RO_LINKLIST_next_ptr 4
+#define B_DLRX_RO_LINKLIST_next_ptr 20
+#define W_DLRX_RO_LINKLIST_next_ptr 12
+#define M_DLRX_RO_LINKLIST_next_ptr 0xfff00000
+
+#define DLRX_RO_LINKLIST_next_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_next_ptr + offset)) & M_DLRX_RO_LINKLIST_next_ptr) >> B_DLRX_RO_LINKLIST_next_ptr))
+
+#define DLRX_RO_LINKLIST_next_ptr_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_next_ptr) >> B_DLRX_RO_LINKLIST_next_ptr))
+
+#define DLRX_RO_LINKLIST_next_ptr_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_next_ptr + offset)) &= (~(M_DLRX_RO_LINKLIST_next_ptr));    \
+		(*(base + O_DLRX_RO_LINKLIST_next_ptr + offset)) |= ((val << B_DLRX_RO_LINKLIST_next_ptr) & M_DLRX_RO_LINKLIST_next_ptr);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_next_ptr_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_next_ptr));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_next_ptr) & M_DLRX_RO_LINKLIST_next_ptr);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_next_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_next_ptr + offset)) &= (~(M_DLRX_RO_LINKLIST_next_ptr)))
+
+#define DLRX_RO_LINKLIST_next_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_next_ptr)))
+
+#define O_DLRX_RO_LINKLIST_rxpb_ptr 5
+#define B_DLRX_RO_LINKLIST_rxpb_ptr 0
+#define W_DLRX_RO_LINKLIST_rxpb_ptr 32
+#define M_DLRX_RO_LINKLIST_rxpb_ptr 0xffffffff
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_RO_LINKLIST_rxpb_ptr + offset)) & M_DLRX_RO_LINKLIST_rxpb_ptr) >> B_DLRX_RO_LINKLIST_rxpb_ptr))
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_get_direct(dword)	((((dword) & M_DLRX_RO_LINKLIST_rxpb_ptr) >> B_DLRX_RO_LINKLIST_rxpb_ptr))
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RO_LINKLIST_rxpb_ptr + offset)) &= (~(M_DLRX_RO_LINKLIST_rxpb_ptr));    \
+		(*(base + O_DLRX_RO_LINKLIST_rxpb_ptr + offset)) |= ((val << B_DLRX_RO_LINKLIST_rxpb_ptr) & M_DLRX_RO_LINKLIST_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RO_LINKLIST_rxpb_ptr));    \
+		(dword) |= ((val << B_DLRX_RO_LINKLIST_rxpb_ptr) & M_DLRX_RO_LINKLIST_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_RO_LINKLIST_rxpb_ptr + offset)) &= (~(M_DLRX_RO_LINKLIST_rxpb_ptr)))
+
+#define DLRX_RO_LINKLIST_rxpb_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_RO_LINKLIST_rxpb_ptr)))
+
+#define O_DLRX_RXPB_PTR_REL_MSG_rsvd0 0
+#define B_DLRX_RXPB_PTR_REL_MSG_rsvd0 0
+#define W_DLRX_RXPB_PTR_REL_MSG_rsvd0 16
+#define M_DLRX_RXPB_PTR_REL_MSG_rsvd0 0x0000ffff
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd0 + offset)) & M_DLRX_RXPB_PTR_REL_MSG_rsvd0) >> B_DLRX_RXPB_PTR_REL_MSG_rsvd0))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_get_direct(dword)	((((dword) & M_DLRX_RXPB_PTR_REL_MSG_rsvd0) >> B_DLRX_RXPB_PTR_REL_MSG_rsvd0))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd0 + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd0));    \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd0 + offset)) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rsvd0) & M_DLRX_RXPB_PTR_REL_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd0));    \
+		(dword) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rsvd0) & M_DLRX_RXPB_PTR_REL_MSG_rsvd0);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd0 + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd0)))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd0)))
+
+#define O_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num 0
+#define B_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num 16
+#define W_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num 7
+#define M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num 0x007f0000
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num + offset)) & M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num) >> B_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num))
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_get_direct(dword)	((((dword) & M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num) >> B_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num))
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num));    \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num + offset)) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num) & M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num));    \
+		(dword) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num) & M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num)))
+
+#define DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_pb_ptr_rel_num)))
+
+#define O_DLRX_RXPB_PTR_REL_MSG_rsvd1 0
+#define B_DLRX_RXPB_PTR_REL_MSG_rsvd1 23
+#define W_DLRX_RXPB_PTR_REL_MSG_rsvd1 9
+#define M_DLRX_RXPB_PTR_REL_MSG_rsvd1 0xff800000
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd1 + offset)) & M_DLRX_RXPB_PTR_REL_MSG_rsvd1) >> B_DLRX_RXPB_PTR_REL_MSG_rsvd1))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_get_direct(dword)	((((dword) & M_DLRX_RXPB_PTR_REL_MSG_rsvd1) >> B_DLRX_RXPB_PTR_REL_MSG_rsvd1))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd1 + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd1));    \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd1 + offset)) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rsvd1) & M_DLRX_RXPB_PTR_REL_MSG_rsvd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd1));    \
+		(dword) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rsvd1) & M_DLRX_RXPB_PTR_REL_MSG_rsvd1);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PTR_REL_MSG_rsvd1 + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd1)))
+
+#define DLRX_RXPB_PTR_REL_MSG_rsvd1_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rsvd1)))
+
+#define O_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr 1
+#define B_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr 0
+#define W_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr 32
+#define M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr 0xffffffff
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr + offset)) & M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr) >> B_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr))
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_get_direct(dword)	((((dword) & M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr) >> B_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr))
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr));    \
+		(*(base + O_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr + offset)) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr) & M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr));    \
+		(dword) |= ((val << B_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr) & M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr + offset)) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr)))
+
+#define DLRX_RXPB_PTR_REL_MSG_rxpb_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PTR_REL_MSG_rxpb_ptr)))
+
+#define O_VAP_DATA_MIB_txpdu_low 0
+#define B_VAP_DATA_MIB_txpdu_low 0
+#define W_VAP_DATA_MIB_txpdu_low 32
+#define M_VAP_DATA_MIB_txpdu_low 0xffffffff
+
+#define VAP_DATA_MIB_txpdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txpdu_low + offset)) & M_VAP_DATA_MIB_txpdu_low) >> B_VAP_DATA_MIB_txpdu_low))
+
+#define VAP_DATA_MIB_txpdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txpdu_low) >> B_VAP_DATA_MIB_txpdu_low))
+
+#define VAP_DATA_MIB_txpdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txpdu_low + offset)) &= (~(M_VAP_DATA_MIB_txpdu_low));    \
+		(*(base + O_VAP_DATA_MIB_txpdu_low + offset)) |= ((val << B_VAP_DATA_MIB_txpdu_low) & M_VAP_DATA_MIB_txpdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txpdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txpdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txpdu_low) & M_VAP_DATA_MIB_txpdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txpdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txpdu_low + offset)) &= (~(M_VAP_DATA_MIB_txpdu_low)))
+
+#define VAP_DATA_MIB_txpdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txpdu_low)))
+
+#define O_VAP_DATA_MIB_txpdu_high 1
+#define B_VAP_DATA_MIB_txpdu_high 0
+#define W_VAP_DATA_MIB_txpdu_high 32
+#define M_VAP_DATA_MIB_txpdu_high 0xffffffff
+
+#define VAP_DATA_MIB_txpdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txpdu_high + offset)) & M_VAP_DATA_MIB_txpdu_high) >> B_VAP_DATA_MIB_txpdu_high))
+
+#define VAP_DATA_MIB_txpdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txpdu_high) >> B_VAP_DATA_MIB_txpdu_high))
+
+#define VAP_DATA_MIB_txpdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txpdu_high + offset)) &= (~(M_VAP_DATA_MIB_txpdu_high));    \
+		(*(base + O_VAP_DATA_MIB_txpdu_high + offset)) |= ((val << B_VAP_DATA_MIB_txpdu_high) & M_VAP_DATA_MIB_txpdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txpdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txpdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txpdu_high) & M_VAP_DATA_MIB_txpdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txpdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txpdu_high + offset)) &= (~(M_VAP_DATA_MIB_txpdu_high)))
+
+#define VAP_DATA_MIB_txpdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txpdu_high)))
+
+#define O_VAP_DATA_MIB_txbytes_low 2
+#define B_VAP_DATA_MIB_txbytes_low 0
+#define W_VAP_DATA_MIB_txbytes_low 32
+#define M_VAP_DATA_MIB_txbytes_low 0xffffffff
+
+#define VAP_DATA_MIB_txbytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txbytes_low + offset)) & M_VAP_DATA_MIB_txbytes_low) >> B_VAP_DATA_MIB_txbytes_low))
+
+#define VAP_DATA_MIB_txbytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txbytes_low) >> B_VAP_DATA_MIB_txbytes_low))
+
+#define VAP_DATA_MIB_txbytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txbytes_low + offset)) &= (~(M_VAP_DATA_MIB_txbytes_low));    \
+		(*(base + O_VAP_DATA_MIB_txbytes_low + offset)) |= ((val << B_VAP_DATA_MIB_txbytes_low) & M_VAP_DATA_MIB_txbytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txbytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txbytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txbytes_low) & M_VAP_DATA_MIB_txbytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txbytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txbytes_low + offset)) &= (~(M_VAP_DATA_MIB_txbytes_low)))
+
+#define VAP_DATA_MIB_txbytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txbytes_low)))
+
+#define O_VAP_DATA_MIB_txbytes_high 3
+#define B_VAP_DATA_MIB_txbytes_high 0
+#define W_VAP_DATA_MIB_txbytes_high 32
+#define M_VAP_DATA_MIB_txbytes_high 0xffffffff
+
+#define VAP_DATA_MIB_txbytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txbytes_high + offset)) & M_VAP_DATA_MIB_txbytes_high) >> B_VAP_DATA_MIB_txbytes_high))
+
+#define VAP_DATA_MIB_txbytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txbytes_high) >> B_VAP_DATA_MIB_txbytes_high))
+
+#define VAP_DATA_MIB_txbytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txbytes_high + offset)) &= (~(M_VAP_DATA_MIB_txbytes_high));    \
+		(*(base + O_VAP_DATA_MIB_txbytes_high + offset)) |= ((val << B_VAP_DATA_MIB_txbytes_high) & M_VAP_DATA_MIB_txbytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txbytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txbytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txbytes_high) & M_VAP_DATA_MIB_txbytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txbytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txbytes_high + offset)) &= (~(M_VAP_DATA_MIB_txbytes_high)))
+
+#define VAP_DATA_MIB_txbytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txbytes_high)))
+
+#define O_VAP_DATA_MIB_txdrop_low 4
+#define B_VAP_DATA_MIB_txdrop_low 0
+#define W_VAP_DATA_MIB_txdrop_low 32
+#define M_VAP_DATA_MIB_txdrop_low 0xffffffff
+
+#define VAP_DATA_MIB_txdrop_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txdrop_low + offset)) & M_VAP_DATA_MIB_txdrop_low) >> B_VAP_DATA_MIB_txdrop_low))
+
+#define VAP_DATA_MIB_txdrop_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txdrop_low) >> B_VAP_DATA_MIB_txdrop_low))
+
+#define VAP_DATA_MIB_txdrop_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txdrop_low + offset)) &= (~(M_VAP_DATA_MIB_txdrop_low));    \
+		(*(base + O_VAP_DATA_MIB_txdrop_low + offset)) |= ((val << B_VAP_DATA_MIB_txdrop_low) & M_VAP_DATA_MIB_txdrop_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txdrop_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txdrop_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txdrop_low) & M_VAP_DATA_MIB_txdrop_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txdrop_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txdrop_low + offset)) &= (~(M_VAP_DATA_MIB_txdrop_low)))
+
+#define VAP_DATA_MIB_txdrop_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txdrop_low)))
+
+#define O_VAP_DATA_MIB_txdrop_high 5
+#define B_VAP_DATA_MIB_txdrop_high 0
+#define W_VAP_DATA_MIB_txdrop_high 32
+#define M_VAP_DATA_MIB_txdrop_high 0xffffffff
+
+#define VAP_DATA_MIB_txdrop_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_txdrop_high + offset)) & M_VAP_DATA_MIB_txdrop_high) >> B_VAP_DATA_MIB_txdrop_high))
+
+#define VAP_DATA_MIB_txdrop_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_txdrop_high) >> B_VAP_DATA_MIB_txdrop_high))
+
+#define VAP_DATA_MIB_txdrop_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_txdrop_high + offset)) &= (~(M_VAP_DATA_MIB_txdrop_high));    \
+		(*(base + O_VAP_DATA_MIB_txdrop_high + offset)) |= ((val << B_VAP_DATA_MIB_txdrop_high) & M_VAP_DATA_MIB_txdrop_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txdrop_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_txdrop_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_txdrop_high) & M_VAP_DATA_MIB_txdrop_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_txdrop_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_txdrop_high + offset)) &= (~(M_VAP_DATA_MIB_txdrop_high)))
+
+#define VAP_DATA_MIB_txdrop_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_txdrop_high)))
+
+#define O_VAP_DATA_MIB_rx_fwd_pdu_low 6
+#define B_VAP_DATA_MIB_rx_fwd_pdu_low 0
+#define W_VAP_DATA_MIB_rx_fwd_pdu_low 32
+#define M_VAP_DATA_MIB_rx_fwd_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_fwd_pdu_low + offset)) & M_VAP_DATA_MIB_rx_fwd_pdu_low) >> B_VAP_DATA_MIB_rx_fwd_pdu_low))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_fwd_pdu_low) >> B_VAP_DATA_MIB_rx_fwd_pdu_low))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_fwd_pdu_low) & M_VAP_DATA_MIB_rx_fwd_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_fwd_pdu_low) & M_VAP_DATA_MIB_rx_fwd_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_fwd_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_low)))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_fwd_pdu_high 7
+#define B_VAP_DATA_MIB_rx_fwd_pdu_high 0
+#define W_VAP_DATA_MIB_rx_fwd_pdu_high 32
+#define M_VAP_DATA_MIB_rx_fwd_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_fwd_pdu_high + offset)) & M_VAP_DATA_MIB_rx_fwd_pdu_high) >> B_VAP_DATA_MIB_rx_fwd_pdu_high))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_fwd_pdu_high) >> B_VAP_DATA_MIB_rx_fwd_pdu_high))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_fwd_pdu_high) & M_VAP_DATA_MIB_rx_fwd_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_fwd_pdu_high) & M_VAP_DATA_MIB_rx_fwd_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_fwd_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_high)))
+
+#define VAP_DATA_MIB_rx_fwd_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_fwd_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_fwd_bytes_low 8
+#define B_VAP_DATA_MIB_rx_fwd_bytes_low 0
+#define W_VAP_DATA_MIB_rx_fwd_bytes_low 32
+#define M_VAP_DATA_MIB_rx_fwd_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_fwd_bytes_low + offset)) & M_VAP_DATA_MIB_rx_fwd_bytes_low) >> B_VAP_DATA_MIB_rx_fwd_bytes_low))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_fwd_bytes_low) >> B_VAP_DATA_MIB_rx_fwd_bytes_low))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_fwd_bytes_low) & M_VAP_DATA_MIB_rx_fwd_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_fwd_bytes_low) & M_VAP_DATA_MIB_rx_fwd_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_fwd_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_low)))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_fwd_bytes_high 9
+#define B_VAP_DATA_MIB_rx_fwd_bytes_high 0
+#define W_VAP_DATA_MIB_rx_fwd_bytes_high 32
+#define M_VAP_DATA_MIB_rx_fwd_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_fwd_bytes_high + offset)) & M_VAP_DATA_MIB_rx_fwd_bytes_high) >> B_VAP_DATA_MIB_rx_fwd_bytes_high))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_fwd_bytes_high) >> B_VAP_DATA_MIB_rx_fwd_bytes_high))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_fwd_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_fwd_bytes_high) & M_VAP_DATA_MIB_rx_fwd_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_fwd_bytes_high) & M_VAP_DATA_MIB_rx_fwd_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_fwd_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_high)))
+
+#define VAP_DATA_MIB_rx_fwd_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_fwd_bytes_high)))
+
+#define O_VAP_DATA_MIB_rx_inspect_pdu_low 10
+#define B_VAP_DATA_MIB_rx_inspect_pdu_low 0
+#define W_VAP_DATA_MIB_rx_inspect_pdu_low 32
+#define M_VAP_DATA_MIB_rx_inspect_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_inspect_pdu_low + offset)) & M_VAP_DATA_MIB_rx_inspect_pdu_low) >> B_VAP_DATA_MIB_rx_inspect_pdu_low))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_inspect_pdu_low) >> B_VAP_DATA_MIB_rx_inspect_pdu_low))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_inspect_pdu_low) & M_VAP_DATA_MIB_rx_inspect_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_inspect_pdu_low) & M_VAP_DATA_MIB_rx_inspect_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_inspect_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_low)))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_inspect_pdu_high 11
+#define B_VAP_DATA_MIB_rx_inspect_pdu_high 0
+#define W_VAP_DATA_MIB_rx_inspect_pdu_high 32
+#define M_VAP_DATA_MIB_rx_inspect_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_inspect_pdu_high + offset)) & M_VAP_DATA_MIB_rx_inspect_pdu_high) >> B_VAP_DATA_MIB_rx_inspect_pdu_high))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_inspect_pdu_high) >> B_VAP_DATA_MIB_rx_inspect_pdu_high))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_inspect_pdu_high) & M_VAP_DATA_MIB_rx_inspect_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_inspect_pdu_high) & M_VAP_DATA_MIB_rx_inspect_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_inspect_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_high)))
+
+#define VAP_DATA_MIB_rx_inspect_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_inspect_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_inspect_bytes_low 12
+#define B_VAP_DATA_MIB_rx_inspect_bytes_low 0
+#define W_VAP_DATA_MIB_rx_inspect_bytes_low 32
+#define M_VAP_DATA_MIB_rx_inspect_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_inspect_bytes_low + offset)) & M_VAP_DATA_MIB_rx_inspect_bytes_low) >> B_VAP_DATA_MIB_rx_inspect_bytes_low))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_inspect_bytes_low) >> B_VAP_DATA_MIB_rx_inspect_bytes_low))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_inspect_bytes_low) & M_VAP_DATA_MIB_rx_inspect_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_inspect_bytes_low) & M_VAP_DATA_MIB_rx_inspect_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_inspect_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_low)))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_inspect_bytes_high 13
+#define B_VAP_DATA_MIB_rx_inspect_bytes_high 0
+#define W_VAP_DATA_MIB_rx_inspect_bytes_high 32
+#define M_VAP_DATA_MIB_rx_inspect_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_inspect_bytes_high + offset)) & M_VAP_DATA_MIB_rx_inspect_bytes_high) >> B_VAP_DATA_MIB_rx_inspect_bytes_high))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_inspect_bytes_high) >> B_VAP_DATA_MIB_rx_inspect_bytes_high))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_inspect_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_inspect_bytes_high) & M_VAP_DATA_MIB_rx_inspect_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_inspect_bytes_high) & M_VAP_DATA_MIB_rx_inspect_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_inspect_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_high)))
+
+#define VAP_DATA_MIB_rx_inspect_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_inspect_bytes_high)))
+
+#define O_VAP_DATA_MIB_rx_discard_pdu_low 14
+#define B_VAP_DATA_MIB_rx_discard_pdu_low 0
+#define W_VAP_DATA_MIB_rx_discard_pdu_low 32
+#define M_VAP_DATA_MIB_rx_discard_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_discard_pdu_low + offset)) & M_VAP_DATA_MIB_rx_discard_pdu_low) >> B_VAP_DATA_MIB_rx_discard_pdu_low))
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_discard_pdu_low) >> B_VAP_DATA_MIB_rx_discard_pdu_low))
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_discard_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_discard_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_discard_pdu_low) & M_VAP_DATA_MIB_rx_discard_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_discard_pdu_low) & M_VAP_DATA_MIB_rx_discard_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_discard_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_low)))
+
+#define VAP_DATA_MIB_rx_discard_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_discard_pdu_high 15
+#define B_VAP_DATA_MIB_rx_discard_pdu_high 0
+#define W_VAP_DATA_MIB_rx_discard_pdu_high 32
+#define M_VAP_DATA_MIB_rx_discard_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_discard_pdu_high + offset)) & M_VAP_DATA_MIB_rx_discard_pdu_high) >> B_VAP_DATA_MIB_rx_discard_pdu_high))
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_discard_pdu_high) >> B_VAP_DATA_MIB_rx_discard_pdu_high))
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_discard_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_discard_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_discard_pdu_high) & M_VAP_DATA_MIB_rx_discard_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_discard_pdu_high) & M_VAP_DATA_MIB_rx_discard_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_discard_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_high)))
+
+#define VAP_DATA_MIB_rx_discard_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_discard_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_discard_bytes_low 16
+#define B_VAP_DATA_MIB_rx_discard_bytes_low 0
+#define W_VAP_DATA_MIB_rx_discard_bytes_low 32
+#define M_VAP_DATA_MIB_rx_discard_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_discard_bytes_low + offset)) & M_VAP_DATA_MIB_rx_discard_bytes_low) >> B_VAP_DATA_MIB_rx_discard_bytes_low))
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_discard_bytes_low) >> B_VAP_DATA_MIB_rx_discard_bytes_low))
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_discard_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_discard_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_discard_bytes_low) & M_VAP_DATA_MIB_rx_discard_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_discard_bytes_low) & M_VAP_DATA_MIB_rx_discard_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_discard_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_low)))
+
+#define VAP_DATA_MIB_rx_discard_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_discard_bytes_high 17
+#define B_VAP_DATA_MIB_rx_discard_bytes_high 0
+#define W_VAP_DATA_MIB_rx_discard_bytes_high 32
+#define M_VAP_DATA_MIB_rx_discard_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_discard_bytes_high + offset)) & M_VAP_DATA_MIB_rx_discard_bytes_high) >> B_VAP_DATA_MIB_rx_discard_bytes_high))
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_discard_bytes_high) >> B_VAP_DATA_MIB_rx_discard_bytes_high))
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_discard_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_discard_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_discard_bytes_high) & M_VAP_DATA_MIB_rx_discard_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_discard_bytes_high) & M_VAP_DATA_MIB_rx_discard_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_discard_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_high)))
+
+#define VAP_DATA_MIB_rx_discard_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_discard_bytes_high)))
+
+#define O_VAP_DATA_MIB_rx_pn_pdu_low 18
+#define B_VAP_DATA_MIB_rx_pn_pdu_low 0
+#define W_VAP_DATA_MIB_rx_pn_pdu_low 32
+#define M_VAP_DATA_MIB_rx_pn_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_pn_pdu_low + offset)) & M_VAP_DATA_MIB_rx_pn_pdu_low) >> B_VAP_DATA_MIB_rx_pn_pdu_low))
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_pn_pdu_low) >> B_VAP_DATA_MIB_rx_pn_pdu_low))
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_pn_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_pn_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_pn_pdu_low) & M_VAP_DATA_MIB_rx_pn_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_pn_pdu_low) & M_VAP_DATA_MIB_rx_pn_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_pn_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_low)))
+
+#define VAP_DATA_MIB_rx_pn_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_pn_pdu_high 19
+#define B_VAP_DATA_MIB_rx_pn_pdu_high 0
+#define W_VAP_DATA_MIB_rx_pn_pdu_high 32
+#define M_VAP_DATA_MIB_rx_pn_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_pn_pdu_high + offset)) & M_VAP_DATA_MIB_rx_pn_pdu_high) >> B_VAP_DATA_MIB_rx_pn_pdu_high))
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_pn_pdu_high) >> B_VAP_DATA_MIB_rx_pn_pdu_high))
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_pn_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_pn_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_pn_pdu_high) & M_VAP_DATA_MIB_rx_pn_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_pn_pdu_high) & M_VAP_DATA_MIB_rx_pn_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_pn_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_high)))
+
+#define VAP_DATA_MIB_rx_pn_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_pn_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_pn_bytes_low 20
+#define B_VAP_DATA_MIB_rx_pn_bytes_low 0
+#define W_VAP_DATA_MIB_rx_pn_bytes_low 32
+#define M_VAP_DATA_MIB_rx_pn_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_pn_bytes_low + offset)) & M_VAP_DATA_MIB_rx_pn_bytes_low) >> B_VAP_DATA_MIB_rx_pn_bytes_low))
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_pn_bytes_low) >> B_VAP_DATA_MIB_rx_pn_bytes_low))
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_pn_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_pn_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_pn_bytes_low) & M_VAP_DATA_MIB_rx_pn_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_pn_bytes_low) & M_VAP_DATA_MIB_rx_pn_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_pn_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_low)))
+
+#define VAP_DATA_MIB_rx_pn_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_pn_bytes_high 21
+#define B_VAP_DATA_MIB_rx_pn_bytes_high 0
+#define W_VAP_DATA_MIB_rx_pn_bytes_high 32
+#define M_VAP_DATA_MIB_rx_pn_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_pn_bytes_high + offset)) & M_VAP_DATA_MIB_rx_pn_bytes_high) >> B_VAP_DATA_MIB_rx_pn_bytes_high))
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_pn_bytes_high) >> B_VAP_DATA_MIB_rx_pn_bytes_high))
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_pn_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_pn_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_pn_bytes_high) & M_VAP_DATA_MIB_rx_pn_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_pn_bytes_high) & M_VAP_DATA_MIB_rx_pn_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_pn_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_high)))
+
+#define VAP_DATA_MIB_rx_pn_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_pn_bytes_high)))
+
+#define O_VAP_DATA_MIB_rx_drop_pdu_low 22
+#define B_VAP_DATA_MIB_rx_drop_pdu_low 0
+#define W_VAP_DATA_MIB_rx_drop_pdu_low 32
+#define M_VAP_DATA_MIB_rx_drop_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_drop_pdu_low + offset)) & M_VAP_DATA_MIB_rx_drop_pdu_low) >> B_VAP_DATA_MIB_rx_drop_pdu_low))
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_drop_pdu_low) >> B_VAP_DATA_MIB_rx_drop_pdu_low))
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_drop_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_drop_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_drop_pdu_low) & M_VAP_DATA_MIB_rx_drop_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_drop_pdu_low) & M_VAP_DATA_MIB_rx_drop_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_drop_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_low)))
+
+#define VAP_DATA_MIB_rx_drop_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_drop_pdu_high 23
+#define B_VAP_DATA_MIB_rx_drop_pdu_high 0
+#define W_VAP_DATA_MIB_rx_drop_pdu_high 32
+#define M_VAP_DATA_MIB_rx_drop_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_drop_pdu_high + offset)) & M_VAP_DATA_MIB_rx_drop_pdu_high) >> B_VAP_DATA_MIB_rx_drop_pdu_high))
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_drop_pdu_high) >> B_VAP_DATA_MIB_rx_drop_pdu_high))
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_drop_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_drop_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_drop_pdu_high) & M_VAP_DATA_MIB_rx_drop_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_drop_pdu_high) & M_VAP_DATA_MIB_rx_drop_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_drop_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_high)))
+
+#define VAP_DATA_MIB_rx_drop_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_drop_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_drop_bytes_low 24
+#define B_VAP_DATA_MIB_rx_drop_bytes_low 0
+#define W_VAP_DATA_MIB_rx_drop_bytes_low 32
+#define M_VAP_DATA_MIB_rx_drop_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_drop_bytes_low + offset)) & M_VAP_DATA_MIB_rx_drop_bytes_low) >> B_VAP_DATA_MIB_rx_drop_bytes_low))
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_drop_bytes_low) >> B_VAP_DATA_MIB_rx_drop_bytes_low))
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_drop_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_drop_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_drop_bytes_low) & M_VAP_DATA_MIB_rx_drop_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_drop_bytes_low) & M_VAP_DATA_MIB_rx_drop_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_drop_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_low)))
+
+#define VAP_DATA_MIB_rx_drop_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_drop_bytes_high 25
+#define B_VAP_DATA_MIB_rx_drop_bytes_high 0
+#define W_VAP_DATA_MIB_rx_drop_bytes_high 32
+#define M_VAP_DATA_MIB_rx_drop_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_drop_bytes_high + offset)) & M_VAP_DATA_MIB_rx_drop_bytes_high) >> B_VAP_DATA_MIB_rx_drop_bytes_high))
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_drop_bytes_high) >> B_VAP_DATA_MIB_rx_drop_bytes_high))
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_drop_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_drop_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_drop_bytes_high) & M_VAP_DATA_MIB_rx_drop_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_drop_bytes_high) & M_VAP_DATA_MIB_rx_drop_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_drop_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_high)))
+
+#define VAP_DATA_MIB_rx_drop_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_drop_bytes_high)))
+
+#define O_VAP_DATA_MIB_rx_rcv_pdu_low 26
+#define B_VAP_DATA_MIB_rx_rcv_pdu_low 0
+#define W_VAP_DATA_MIB_rx_rcv_pdu_low 32
+#define M_VAP_DATA_MIB_rx_rcv_pdu_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_rcv_pdu_low + offset)) & M_VAP_DATA_MIB_rx_rcv_pdu_low) >> B_VAP_DATA_MIB_rx_rcv_pdu_low))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_rcv_pdu_low) >> B_VAP_DATA_MIB_rx_rcv_pdu_low))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_pdu_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_rcv_pdu_low) & M_VAP_DATA_MIB_rx_rcv_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_rcv_pdu_low) & M_VAP_DATA_MIB_rx_rcv_pdu_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_rcv_pdu_low + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_low)))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_low)))
+
+#define O_VAP_DATA_MIB_rx_rcv_pdu_high 27
+#define B_VAP_DATA_MIB_rx_rcv_pdu_high 0
+#define W_VAP_DATA_MIB_rx_rcv_pdu_high 32
+#define M_VAP_DATA_MIB_rx_rcv_pdu_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_rcv_pdu_high + offset)) & M_VAP_DATA_MIB_rx_rcv_pdu_high) >> B_VAP_DATA_MIB_rx_rcv_pdu_high))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_rcv_pdu_high) >> B_VAP_DATA_MIB_rx_rcv_pdu_high))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_pdu_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_rcv_pdu_high) & M_VAP_DATA_MIB_rx_rcv_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_rcv_pdu_high) & M_VAP_DATA_MIB_rx_rcv_pdu_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_rcv_pdu_high + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_high)))
+
+#define VAP_DATA_MIB_rx_rcv_pdu_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_rcv_pdu_high)))
+
+#define O_VAP_DATA_MIB_rx_rcv_bytes_low 28
+#define B_VAP_DATA_MIB_rx_rcv_bytes_low 0
+#define W_VAP_DATA_MIB_rx_rcv_bytes_low 32
+#define M_VAP_DATA_MIB_rx_rcv_bytes_low 0xffffffff
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_rcv_bytes_low + offset)) & M_VAP_DATA_MIB_rx_rcv_bytes_low) >> B_VAP_DATA_MIB_rx_rcv_bytes_low))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_rcv_bytes_low) >> B_VAP_DATA_MIB_rx_rcv_bytes_low))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_low));    \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_bytes_low + offset)) |= ((val << B_VAP_DATA_MIB_rx_rcv_bytes_low) & M_VAP_DATA_MIB_rx_rcv_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_rcv_bytes_low) & M_VAP_DATA_MIB_rx_rcv_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_rcv_bytes_low + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_low)))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_low)))
+
+#define O_VAP_DATA_MIB_rx_rcv_bytes_high 29
+#define B_VAP_DATA_MIB_rx_rcv_bytes_high 0
+#define W_VAP_DATA_MIB_rx_rcv_bytes_high 32
+#define M_VAP_DATA_MIB_rx_rcv_bytes_high 0xffffffff
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MIB_rx_rcv_bytes_high + offset)) & M_VAP_DATA_MIB_rx_rcv_bytes_high) >> B_VAP_DATA_MIB_rx_rcv_bytes_high))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MIB_rx_rcv_bytes_high) >> B_VAP_DATA_MIB_rx_rcv_bytes_high))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_high));    \
+		(*(base + O_VAP_DATA_MIB_rx_rcv_bytes_high + offset)) |= ((val << B_VAP_DATA_MIB_rx_rcv_bytes_high) & M_VAP_DATA_MIB_rx_rcv_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MIB_rx_rcv_bytes_high) & M_VAP_DATA_MIB_rx_rcv_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MIB_rx_rcv_bytes_high + offset)) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_high)))
+
+#define VAP_DATA_MIB_rx_rcv_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MIB_rx_rcv_bytes_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_gswip_packets_low 0
+#define B_VAP_DATA_MISC_MIB_rx_gswip_packets_low 0
+#define W_VAP_DATA_MISC_MIB_rx_gswip_packets_low 32
+#define M_VAP_DATA_MISC_MIB_rx_gswip_packets_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_low + offset)) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_low) >> B_VAP_DATA_MISC_MIB_rx_gswip_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_low) >> B_VAP_DATA_MISC_MIB_rx_gswip_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_packets_low) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_packets_low) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_low)))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_gswip_packets_high 1
+#define B_VAP_DATA_MISC_MIB_rx_gswip_packets_high 0
+#define W_VAP_DATA_MISC_MIB_rx_gswip_packets_high 32
+#define M_VAP_DATA_MISC_MIB_rx_gswip_packets_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_high + offset)) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_high) >> B_VAP_DATA_MISC_MIB_rx_gswip_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_high) >> B_VAP_DATA_MISC_MIB_rx_gswip_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_packets_high) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_packets_high) & M_VAP_DATA_MISC_MIB_rx_gswip_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_high)))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_packets_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_packets_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_gswip_bytes_low 2
+#define B_VAP_DATA_MISC_MIB_rx_gswip_bytes_low 0
+#define W_VAP_DATA_MISC_MIB_rx_gswip_bytes_low 32
+#define M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_low + offset)) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_gswip_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_gswip_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_bytes_low) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_bytes_low) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low)))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_gswip_bytes_high 3
+#define B_VAP_DATA_MISC_MIB_rx_gswip_bytes_high 0
+#define W_VAP_DATA_MISC_MIB_rx_gswip_bytes_high 32
+#define M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_high + offset)) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_gswip_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_gswip_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_bytes_high) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_gswip_bytes_high) & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_gswip_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high)))
+
+#define VAP_DATA_MISC_MIB_rx_gswip_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_wlan_packets_low 4
+#define B_VAP_DATA_MISC_MIB_rx_wlan_packets_low 0
+#define W_VAP_DATA_MISC_MIB_rx_wlan_packets_low 32
+#define M_VAP_DATA_MISC_MIB_rx_wlan_packets_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_low + offset)) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_low) >> B_VAP_DATA_MISC_MIB_rx_wlan_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_low) >> B_VAP_DATA_MISC_MIB_rx_wlan_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_packets_low) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_packets_low) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_low)))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_wlan_packets_high 5
+#define B_VAP_DATA_MISC_MIB_rx_wlan_packets_high 0
+#define W_VAP_DATA_MISC_MIB_rx_wlan_packets_high 32
+#define M_VAP_DATA_MISC_MIB_rx_wlan_packets_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_high + offset)) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_high) >> B_VAP_DATA_MISC_MIB_rx_wlan_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_high) >> B_VAP_DATA_MISC_MIB_rx_wlan_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_packets_high) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_packets_high) & M_VAP_DATA_MISC_MIB_rx_wlan_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_high)))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_packets_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_packets_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_wlan_bytes_low 6
+#define B_VAP_DATA_MISC_MIB_rx_wlan_bytes_low 0
+#define W_VAP_DATA_MISC_MIB_rx_wlan_bytes_low 32
+#define M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_low + offset)) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_wlan_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_wlan_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_bytes_low) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_bytes_low) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low)))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_wlan_bytes_high 7
+#define B_VAP_DATA_MISC_MIB_rx_wlan_bytes_high 0
+#define W_VAP_DATA_MISC_MIB_rx_wlan_bytes_high 32
+#define M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_high + offset)) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_wlan_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_wlan_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_bytes_high) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_wlan_bytes_high) & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_wlan_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high)))
+
+#define VAP_DATA_MISC_MIB_rx_wlan_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low 8
+#define B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low 0
+#define W_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low 32
+#define M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low + offset)) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low)))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high 9
+#define B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high 0
+#define W_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high 32
+#define M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high + offset)) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high)))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low 10
+#define B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low 0
+#define W_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low 32
+#define M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low + offset)) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low)))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high 11
+#define B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high 0
+#define W_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high 32
+#define M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high + offset)) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high) & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high)))
+
+#define VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_forward_packets_low 12
+#define B_VAP_DATA_MISC_MIB_rx_forward_packets_low 0
+#define W_VAP_DATA_MISC_MIB_rx_forward_packets_low 32
+#define M_VAP_DATA_MISC_MIB_rx_forward_packets_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_low + offset)) & M_VAP_DATA_MISC_MIB_rx_forward_packets_low) >> B_VAP_DATA_MISC_MIB_rx_forward_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_forward_packets_low) >> B_VAP_DATA_MISC_MIB_rx_forward_packets_low))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_packets_low) & M_VAP_DATA_MISC_MIB_rx_forward_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_packets_low) & M_VAP_DATA_MISC_MIB_rx_forward_packets_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_low)))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_forward_packets_high 13
+#define B_VAP_DATA_MISC_MIB_rx_forward_packets_high 0
+#define W_VAP_DATA_MISC_MIB_rx_forward_packets_high 32
+#define M_VAP_DATA_MISC_MIB_rx_forward_packets_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_high + offset)) & M_VAP_DATA_MISC_MIB_rx_forward_packets_high) >> B_VAP_DATA_MISC_MIB_rx_forward_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_forward_packets_high) >> B_VAP_DATA_MISC_MIB_rx_forward_packets_high))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_packets_high) & M_VAP_DATA_MISC_MIB_rx_forward_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_packets_high) & M_VAP_DATA_MISC_MIB_rx_forward_packets_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_forward_packets_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_high)))
+
+#define VAP_DATA_MISC_MIB_rx_forward_packets_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_packets_high)))
+
+#define O_VAP_DATA_MISC_MIB_rx_forward_bytes_low 14
+#define B_VAP_DATA_MISC_MIB_rx_forward_bytes_low 0
+#define W_VAP_DATA_MISC_MIB_rx_forward_bytes_low 32
+#define M_VAP_DATA_MISC_MIB_rx_forward_bytes_low 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_low + offset)) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_forward_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_low) >> B_VAP_DATA_MISC_MIB_rx_forward_bytes_low))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_low));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_low + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_bytes_low) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_low));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_bytes_low) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_low);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_low + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_low)))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_low_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_low)))
+
+#define O_VAP_DATA_MISC_MIB_rx_forward_bytes_high 15
+#define B_VAP_DATA_MISC_MIB_rx_forward_bytes_high 0
+#define W_VAP_DATA_MISC_MIB_rx_forward_bytes_high 32
+#define M_VAP_DATA_MISC_MIB_rx_forward_bytes_high 0xffffffff
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_get_indirect(base, offset)	((((*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_high + offset)) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_forward_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_get_direct(dword)	((((dword) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_high) >> B_VAP_DATA_MISC_MIB_rx_forward_bytes_high))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_high));    \
+		(*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_high + offset)) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_bytes_high) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_high));    \
+		(dword) |= ((val << B_VAP_DATA_MISC_MIB_rx_forward_bytes_high) & M_VAP_DATA_MISC_MIB_rx_forward_bytes_high);    \
+	} while (0)
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_clear_indirect(base, offset)	((*(base + O_VAP_DATA_MISC_MIB_rx_forward_bytes_high + offset)) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_high)))
+
+#define VAP_DATA_MISC_MIB_rx_forward_bytes_high_clear_direct(dword)	((dword) &= (~(M_VAP_DATA_MISC_MIB_rx_forward_bytes_high)))
+
+#define O_DLRX_DATA_MIB_rx_success_mpdu 0
+#define B_DLRX_DATA_MIB_rx_success_mpdu 0
+#define W_DLRX_DATA_MIB_rx_success_mpdu 32
+#define M_DLRX_DATA_MIB_rx_success_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_success_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_success_mpdu + offset)) & M_DLRX_DATA_MIB_rx_success_mpdu) >> B_DLRX_DATA_MIB_rx_success_mpdu))
+
+#define DLRX_DATA_MIB_rx_success_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_success_mpdu) >> B_DLRX_DATA_MIB_rx_success_mpdu))
+
+#define DLRX_DATA_MIB_rx_success_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_success_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_success_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_success_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_success_mpdu) & M_DLRX_DATA_MIB_rx_success_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_success_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_success_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_success_mpdu) & M_DLRX_DATA_MIB_rx_success_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_success_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_success_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_success_mpdu)))
+
+#define DLRX_DATA_MIB_rx_success_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_success_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_success_msdu 1
+#define B_DLRX_DATA_MIB_rx_success_msdu 0
+#define W_DLRX_DATA_MIB_rx_success_msdu 32
+#define M_DLRX_DATA_MIB_rx_success_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_success_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_success_msdu + offset)) & M_DLRX_DATA_MIB_rx_success_msdu) >> B_DLRX_DATA_MIB_rx_success_msdu))
+
+#define DLRX_DATA_MIB_rx_success_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_success_msdu) >> B_DLRX_DATA_MIB_rx_success_msdu))
+
+#define DLRX_DATA_MIB_rx_success_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_success_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_success_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_success_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_success_msdu) & M_DLRX_DATA_MIB_rx_success_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_success_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_success_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_success_msdu) & M_DLRX_DATA_MIB_rx_success_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_success_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_success_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_success_msdu)))
+
+#define DLRX_DATA_MIB_rx_success_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_success_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error2_mpdu 2
+#define B_DLRX_DATA_MIB_rx_error2_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error2_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error2_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error2_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error2_mpdu) >> B_DLRX_DATA_MIB_rx_error2_mpdu))
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error2_mpdu) >> B_DLRX_DATA_MIB_rx_error2_mpdu))
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error2_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error2_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error2_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error2_mpdu) & M_DLRX_DATA_MIB_rx_error2_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error2_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error2_mpdu) & M_DLRX_DATA_MIB_rx_error2_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error2_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error2_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error2_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error2_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error2_msdu 3
+#define B_DLRX_DATA_MIB_rx_error2_msdu 0
+#define W_DLRX_DATA_MIB_rx_error2_msdu 32
+#define M_DLRX_DATA_MIB_rx_error2_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error2_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error2_msdu + offset)) & M_DLRX_DATA_MIB_rx_error2_msdu) >> B_DLRX_DATA_MIB_rx_error2_msdu))
+
+#define DLRX_DATA_MIB_rx_error2_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error2_msdu) >> B_DLRX_DATA_MIB_rx_error2_msdu))
+
+#define DLRX_DATA_MIB_rx_error2_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error2_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error2_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error2_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error2_msdu) & M_DLRX_DATA_MIB_rx_error2_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error2_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error2_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error2_msdu) & M_DLRX_DATA_MIB_rx_error2_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error2_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error2_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error2_msdu)))
+
+#define DLRX_DATA_MIB_rx_error2_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error2_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error3_mpdu 4
+#define B_DLRX_DATA_MIB_rx_error3_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error3_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error3_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error3_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error3_mpdu) >> B_DLRX_DATA_MIB_rx_error3_mpdu))
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error3_mpdu) >> B_DLRX_DATA_MIB_rx_error3_mpdu))
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error3_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error3_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error3_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error3_mpdu) & M_DLRX_DATA_MIB_rx_error3_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error3_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error3_mpdu) & M_DLRX_DATA_MIB_rx_error3_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error3_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error3_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error3_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error3_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error3_msdu 5
+#define B_DLRX_DATA_MIB_rx_error3_msdu 0
+#define W_DLRX_DATA_MIB_rx_error3_msdu 32
+#define M_DLRX_DATA_MIB_rx_error3_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error3_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error3_msdu + offset)) & M_DLRX_DATA_MIB_rx_error3_msdu) >> B_DLRX_DATA_MIB_rx_error3_msdu))
+
+#define DLRX_DATA_MIB_rx_error3_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error3_msdu) >> B_DLRX_DATA_MIB_rx_error3_msdu))
+
+#define DLRX_DATA_MIB_rx_error3_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error3_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error3_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error3_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error3_msdu) & M_DLRX_DATA_MIB_rx_error3_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error3_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error3_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error3_msdu) & M_DLRX_DATA_MIB_rx_error3_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error3_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error3_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error3_msdu)))
+
+#define DLRX_DATA_MIB_rx_error3_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error3_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error4_mpdu 6
+#define B_DLRX_DATA_MIB_rx_error4_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error4_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error4_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error4_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error4_mpdu) >> B_DLRX_DATA_MIB_rx_error4_mpdu))
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error4_mpdu) >> B_DLRX_DATA_MIB_rx_error4_mpdu))
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error4_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error4_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error4_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error4_mpdu) & M_DLRX_DATA_MIB_rx_error4_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error4_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error4_mpdu) & M_DLRX_DATA_MIB_rx_error4_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error4_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error4_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error4_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error4_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error4_msdu 7
+#define B_DLRX_DATA_MIB_rx_error4_msdu 0
+#define W_DLRX_DATA_MIB_rx_error4_msdu 32
+#define M_DLRX_DATA_MIB_rx_error4_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error4_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error4_msdu + offset)) & M_DLRX_DATA_MIB_rx_error4_msdu) >> B_DLRX_DATA_MIB_rx_error4_msdu))
+
+#define DLRX_DATA_MIB_rx_error4_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error4_msdu) >> B_DLRX_DATA_MIB_rx_error4_msdu))
+
+#define DLRX_DATA_MIB_rx_error4_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error4_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error4_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error4_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error4_msdu) & M_DLRX_DATA_MIB_rx_error4_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error4_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error4_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error4_msdu) & M_DLRX_DATA_MIB_rx_error4_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error4_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error4_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error4_msdu)))
+
+#define DLRX_DATA_MIB_rx_error4_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error4_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error5_mpdu 8
+#define B_DLRX_DATA_MIB_rx_error5_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error5_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error5_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error5_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error5_mpdu) >> B_DLRX_DATA_MIB_rx_error5_mpdu))
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error5_mpdu) >> B_DLRX_DATA_MIB_rx_error5_mpdu))
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error5_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error5_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error5_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error5_mpdu) & M_DLRX_DATA_MIB_rx_error5_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error5_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error5_mpdu) & M_DLRX_DATA_MIB_rx_error5_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error5_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error5_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error5_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error5_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error5_msdu 9
+#define B_DLRX_DATA_MIB_rx_error5_msdu 0
+#define W_DLRX_DATA_MIB_rx_error5_msdu 32
+#define M_DLRX_DATA_MIB_rx_error5_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error5_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error5_msdu + offset)) & M_DLRX_DATA_MIB_rx_error5_msdu) >> B_DLRX_DATA_MIB_rx_error5_msdu))
+
+#define DLRX_DATA_MIB_rx_error5_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error5_msdu) >> B_DLRX_DATA_MIB_rx_error5_msdu))
+
+#define DLRX_DATA_MIB_rx_error5_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error5_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error5_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error5_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error5_msdu) & M_DLRX_DATA_MIB_rx_error5_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error5_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error5_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error5_msdu) & M_DLRX_DATA_MIB_rx_error5_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error5_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error5_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error5_msdu)))
+
+#define DLRX_DATA_MIB_rx_error5_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error5_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error6_mpdu 10
+#define B_DLRX_DATA_MIB_rx_error6_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error6_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error6_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error6_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error6_mpdu) >> B_DLRX_DATA_MIB_rx_error6_mpdu))
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error6_mpdu) >> B_DLRX_DATA_MIB_rx_error6_mpdu))
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error6_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error6_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error6_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error6_mpdu) & M_DLRX_DATA_MIB_rx_error6_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error6_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error6_mpdu) & M_DLRX_DATA_MIB_rx_error6_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error6_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error6_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error6_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error6_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error6_msdu 11
+#define B_DLRX_DATA_MIB_rx_error6_msdu 0
+#define W_DLRX_DATA_MIB_rx_error6_msdu 32
+#define M_DLRX_DATA_MIB_rx_error6_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error6_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error6_msdu + offset)) & M_DLRX_DATA_MIB_rx_error6_msdu) >> B_DLRX_DATA_MIB_rx_error6_msdu))
+
+#define DLRX_DATA_MIB_rx_error6_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error6_msdu) >> B_DLRX_DATA_MIB_rx_error6_msdu))
+
+#define DLRX_DATA_MIB_rx_error6_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error6_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error6_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error6_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error6_msdu) & M_DLRX_DATA_MIB_rx_error6_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error6_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error6_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error6_msdu) & M_DLRX_DATA_MIB_rx_error6_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error6_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error6_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error6_msdu)))
+
+#define DLRX_DATA_MIB_rx_error6_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error6_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error7_mpdu 12
+#define B_DLRX_DATA_MIB_rx_error7_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error7_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error7_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error7_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error7_mpdu) >> B_DLRX_DATA_MIB_rx_error7_mpdu))
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error7_mpdu) >> B_DLRX_DATA_MIB_rx_error7_mpdu))
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error7_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error7_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error7_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error7_mpdu) & M_DLRX_DATA_MIB_rx_error7_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error7_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error7_mpdu) & M_DLRX_DATA_MIB_rx_error7_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error7_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error7_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error7_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error7_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error7_msdu 13
+#define B_DLRX_DATA_MIB_rx_error7_msdu 0
+#define W_DLRX_DATA_MIB_rx_error7_msdu 32
+#define M_DLRX_DATA_MIB_rx_error7_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error7_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error7_msdu + offset)) & M_DLRX_DATA_MIB_rx_error7_msdu) >> B_DLRX_DATA_MIB_rx_error7_msdu))
+
+#define DLRX_DATA_MIB_rx_error7_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error7_msdu) >> B_DLRX_DATA_MIB_rx_error7_msdu))
+
+#define DLRX_DATA_MIB_rx_error7_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error7_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error7_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error7_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error7_msdu) & M_DLRX_DATA_MIB_rx_error7_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error7_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error7_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error7_msdu) & M_DLRX_DATA_MIB_rx_error7_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error7_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error7_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error7_msdu)))
+
+#define DLRX_DATA_MIB_rx_error7_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error7_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error8_mpdu 14
+#define B_DLRX_DATA_MIB_rx_error8_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error8_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error8_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error8_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error8_mpdu) >> B_DLRX_DATA_MIB_rx_error8_mpdu))
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error8_mpdu) >> B_DLRX_DATA_MIB_rx_error8_mpdu))
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error8_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error8_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error8_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error8_mpdu) & M_DLRX_DATA_MIB_rx_error8_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error8_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error8_mpdu) & M_DLRX_DATA_MIB_rx_error8_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error8_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error8_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error8_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error8_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error8_msdu 15
+#define B_DLRX_DATA_MIB_rx_error8_msdu 0
+#define W_DLRX_DATA_MIB_rx_error8_msdu 32
+#define M_DLRX_DATA_MIB_rx_error8_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error8_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error8_msdu + offset)) & M_DLRX_DATA_MIB_rx_error8_msdu) >> B_DLRX_DATA_MIB_rx_error8_msdu))
+
+#define DLRX_DATA_MIB_rx_error8_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error8_msdu) >> B_DLRX_DATA_MIB_rx_error8_msdu))
+
+#define DLRX_DATA_MIB_rx_error8_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error8_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error8_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error8_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error8_msdu) & M_DLRX_DATA_MIB_rx_error8_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error8_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error8_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error8_msdu) & M_DLRX_DATA_MIB_rx_error8_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error8_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error8_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error8_msdu)))
+
+#define DLRX_DATA_MIB_rx_error8_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error8_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_error9_mpdu 16
+#define B_DLRX_DATA_MIB_rx_error9_mpdu 0
+#define W_DLRX_DATA_MIB_rx_error9_mpdu 32
+#define M_DLRX_DATA_MIB_rx_error9_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error9_mpdu + offset)) & M_DLRX_DATA_MIB_rx_error9_mpdu) >> B_DLRX_DATA_MIB_rx_error9_mpdu))
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error9_mpdu) >> B_DLRX_DATA_MIB_rx_error9_mpdu))
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error9_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error9_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error9_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error9_mpdu) & M_DLRX_DATA_MIB_rx_error9_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error9_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error9_mpdu) & M_DLRX_DATA_MIB_rx_error9_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error9_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error9_mpdu)))
+
+#define DLRX_DATA_MIB_rx_error9_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error9_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_error9_msdu 17
+#define B_DLRX_DATA_MIB_rx_error9_msdu 0
+#define W_DLRX_DATA_MIB_rx_error9_msdu 32
+#define M_DLRX_DATA_MIB_rx_error9_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_error9_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_error9_msdu + offset)) & M_DLRX_DATA_MIB_rx_error9_msdu) >> B_DLRX_DATA_MIB_rx_error9_msdu))
+
+#define DLRX_DATA_MIB_rx_error9_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_error9_msdu) >> B_DLRX_DATA_MIB_rx_error9_msdu))
+
+#define DLRX_DATA_MIB_rx_error9_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_error9_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error9_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_error9_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_error9_msdu) & M_DLRX_DATA_MIB_rx_error9_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error9_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_error9_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_error9_msdu) & M_DLRX_DATA_MIB_rx_error9_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_error9_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_error9_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_error9_msdu)))
+
+#define DLRX_DATA_MIB_rx_error9_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_error9_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_errora_mpdu 18
+#define B_DLRX_DATA_MIB_rx_errora_mpdu 0
+#define W_DLRX_DATA_MIB_rx_errora_mpdu 32
+#define M_DLRX_DATA_MIB_rx_errora_mpdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_errora_mpdu + offset)) & M_DLRX_DATA_MIB_rx_errora_mpdu) >> B_DLRX_DATA_MIB_rx_errora_mpdu))
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_errora_mpdu) >> B_DLRX_DATA_MIB_rx_errora_mpdu))
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_errora_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_errora_mpdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_errora_mpdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_errora_mpdu) & M_DLRX_DATA_MIB_rx_errora_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_errora_mpdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_errora_mpdu) & M_DLRX_DATA_MIB_rx_errora_mpdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_errora_mpdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_errora_mpdu)))
+
+#define DLRX_DATA_MIB_rx_errora_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_errora_mpdu)))
+
+#define O_DLRX_DATA_MIB_rx_errora_msdu 19
+#define B_DLRX_DATA_MIB_rx_errora_msdu 0
+#define W_DLRX_DATA_MIB_rx_errora_msdu 32
+#define M_DLRX_DATA_MIB_rx_errora_msdu 0xffffffff
+
+#define DLRX_DATA_MIB_rx_errora_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_errora_msdu + offset)) & M_DLRX_DATA_MIB_rx_errora_msdu) >> B_DLRX_DATA_MIB_rx_errora_msdu))
+
+#define DLRX_DATA_MIB_rx_errora_msdu_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_errora_msdu) >> B_DLRX_DATA_MIB_rx_errora_msdu))
+
+#define DLRX_DATA_MIB_rx_errora_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_errora_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_errora_msdu));    \
+		(*(base + O_DLRX_DATA_MIB_rx_errora_msdu + offset)) |= ((val << B_DLRX_DATA_MIB_rx_errora_msdu) & M_DLRX_DATA_MIB_rx_errora_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_errora_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_errora_msdu));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_errora_msdu) & M_DLRX_DATA_MIB_rx_errora_msdu);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_errora_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_errora_msdu + offset)) &= (~(M_DLRX_DATA_MIB_rx_errora_msdu)))
+
+#define DLRX_DATA_MIB_rx_errora_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_errora_msdu)))
+
+#define O_DLRX_DATA_MIB_rx_drop_error5 20
+#define B_DLRX_DATA_MIB_rx_drop_error5 0
+#define W_DLRX_DATA_MIB_rx_drop_error5 32
+#define M_DLRX_DATA_MIB_rx_drop_error5 0xffffffff
+
+#define DLRX_DATA_MIB_rx_drop_error5_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_drop_error5 + offset)) & M_DLRX_DATA_MIB_rx_drop_error5) >> B_DLRX_DATA_MIB_rx_drop_error5))
+
+#define DLRX_DATA_MIB_rx_drop_error5_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_drop_error5) >> B_DLRX_DATA_MIB_rx_drop_error5))
+
+#define DLRX_DATA_MIB_rx_drop_error5_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_error5 + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_error5));    \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_error5 + offset)) |= ((val << B_DLRX_DATA_MIB_rx_drop_error5) & M_DLRX_DATA_MIB_rx_drop_error5);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_error5_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_drop_error5));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_drop_error5) & M_DLRX_DATA_MIB_rx_drop_error5);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_error5_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_drop_error5 + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_error5)))
+
+#define DLRX_DATA_MIB_rx_drop_error5_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_drop_error5)))
+
+#define O_DLRX_DATA_MIB_rx_drop_ro_linklist 21
+#define B_DLRX_DATA_MIB_rx_drop_ro_linklist 0
+#define W_DLRX_DATA_MIB_rx_drop_ro_linklist 32
+#define M_DLRX_DATA_MIB_rx_drop_ro_linklist 0xffffffff
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_drop_ro_linklist + offset)) & M_DLRX_DATA_MIB_rx_drop_ro_linklist) >> B_DLRX_DATA_MIB_rx_drop_ro_linklist))
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_drop_ro_linklist) >> B_DLRX_DATA_MIB_rx_drop_ro_linklist))
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_ro_linklist + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_ro_linklist));    \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_ro_linklist + offset)) |= ((val << B_DLRX_DATA_MIB_rx_drop_ro_linklist) & M_DLRX_DATA_MIB_rx_drop_ro_linklist);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_drop_ro_linklist));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_drop_ro_linklist) & M_DLRX_DATA_MIB_rx_drop_ro_linklist);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_drop_ro_linklist + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_ro_linklist)))
+
+#define DLRX_DATA_MIB_rx_drop_ro_linklist_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_drop_ro_linklist)))
+
+#define O_DLRX_DATA_MIB_rx_drop_congestion_packets 22
+#define B_DLRX_DATA_MIB_rx_drop_congestion_packets 0
+#define W_DLRX_DATA_MIB_rx_drop_congestion_packets 32
+#define M_DLRX_DATA_MIB_rx_drop_congestion_packets 0xffffffff
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_get_indirect(base, offset)	((((*(base + O_DLRX_DATA_MIB_rx_drop_congestion_packets + offset)) & M_DLRX_DATA_MIB_rx_drop_congestion_packets) >> B_DLRX_DATA_MIB_rx_drop_congestion_packets))
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_get_direct(dword)	((((dword) & M_DLRX_DATA_MIB_rx_drop_congestion_packets) >> B_DLRX_DATA_MIB_rx_drop_congestion_packets))
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_congestion_packets + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_congestion_packets));    \
+		(*(base + O_DLRX_DATA_MIB_rx_drop_congestion_packets + offset)) |= ((val << B_DLRX_DATA_MIB_rx_drop_congestion_packets) & M_DLRX_DATA_MIB_rx_drop_congestion_packets);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DATA_MIB_rx_drop_congestion_packets));    \
+		(dword) |= ((val << B_DLRX_DATA_MIB_rx_drop_congestion_packets) & M_DLRX_DATA_MIB_rx_drop_congestion_packets);    \
+	} while (0)
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_clear_indirect(base, offset)	((*(base + O_DLRX_DATA_MIB_rx_drop_congestion_packets + offset)) &= (~(M_DLRX_DATA_MIB_rx_drop_congestion_packets)))
+
+#define DLRX_DATA_MIB_rx_drop_congestion_packets_clear_direct(dword)	((dword) &= (~(M_DLRX_DATA_MIB_rx_drop_congestion_packets)))
+
+#define O_DLRX_MSG_MIB_total_ce4_cpu_msg 0
+#define B_DLRX_MSG_MIB_total_ce4_cpu_msg 0
+#define W_DLRX_MSG_MIB_total_ce4_cpu_msg 32
+#define M_DLRX_MSG_MIB_total_ce4_cpu_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_ce4_cpu_msg + offset)) & M_DLRX_MSG_MIB_total_ce4_cpu_msg) >> B_DLRX_MSG_MIB_total_ce4_cpu_msg))
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_ce4_cpu_msg) >> B_DLRX_MSG_MIB_total_ce4_cpu_msg))
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_ce4_cpu_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_ce4_cpu_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_ce4_cpu_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_ce4_cpu_msg) & M_DLRX_MSG_MIB_total_ce4_cpu_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_ce4_cpu_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_ce4_cpu_msg) & M_DLRX_MSG_MIB_total_ce4_cpu_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_ce4_cpu_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_ce4_cpu_msg)))
+
+#define DLRX_MSG_MIB_total_ce4_cpu_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_ce4_cpu_msg)))
+
+#define O_DLRX_MSG_MIB_total_ce5_cpu_msg 1
+#define B_DLRX_MSG_MIB_total_ce5_cpu_msg 0
+#define W_DLRX_MSG_MIB_total_ce5_cpu_msg 32
+#define M_DLRX_MSG_MIB_total_ce5_cpu_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_ce5_cpu_msg + offset)) & M_DLRX_MSG_MIB_total_ce5_cpu_msg) >> B_DLRX_MSG_MIB_total_ce5_cpu_msg))
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_ce5_cpu_msg) >> B_DLRX_MSG_MIB_total_ce5_cpu_msg))
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_ce5_cpu_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_ce5_cpu_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_ce5_cpu_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_ce5_cpu_msg) & M_DLRX_MSG_MIB_total_ce5_cpu_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_ce5_cpu_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_ce5_cpu_msg) & M_DLRX_MSG_MIB_total_ce5_cpu_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_ce5_cpu_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_ce5_cpu_msg)))
+
+#define DLRX_MSG_MIB_total_ce5_cpu_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_ce5_cpu_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_ind_msg 2
+#define B_DLRX_MSG_MIB_total_rx_ind_msg 0
+#define W_DLRX_MSG_MIB_total_rx_ind_msg 32
+#define M_DLRX_MSG_MIB_total_rx_ind_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_ind_msg + offset)) & M_DLRX_MSG_MIB_total_rx_ind_msg) >> B_DLRX_MSG_MIB_total_rx_ind_msg))
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_ind_msg) >> B_DLRX_MSG_MIB_total_rx_ind_msg))
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_ind_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_ind_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_ind_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_ind_msg) & M_DLRX_MSG_MIB_total_rx_ind_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_ind_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_ind_msg) & M_DLRX_MSG_MIB_total_rx_ind_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_ind_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_ind_msg)))
+
+#define DLRX_MSG_MIB_total_rx_ind_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_ind_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_flush_msg 3
+#define B_DLRX_MSG_MIB_total_rx_flush_msg 0
+#define W_DLRX_MSG_MIB_total_rx_flush_msg 32
+#define M_DLRX_MSG_MIB_total_rx_flush_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_flush_msg + offset)) & M_DLRX_MSG_MIB_total_rx_flush_msg) >> B_DLRX_MSG_MIB_total_rx_flush_msg))
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_flush_msg) >> B_DLRX_MSG_MIB_total_rx_flush_msg))
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_flush_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_flush_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_flush_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_flush_msg) & M_DLRX_MSG_MIB_total_rx_flush_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_flush_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_flush_msg) & M_DLRX_MSG_MIB_total_rx_flush_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_flush_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_flush_msg)))
+
+#define DLRX_MSG_MIB_total_rx_flush_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_flush_msg)))
+
+#define O_DLRX_MSG_MIB_total_tx_cmp_msg 4
+#define B_DLRX_MSG_MIB_total_tx_cmp_msg 0
+#define W_DLRX_MSG_MIB_total_tx_cmp_msg 32
+#define M_DLRX_MSG_MIB_total_tx_cmp_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_tx_cmp_msg + offset)) & M_DLRX_MSG_MIB_total_tx_cmp_msg) >> B_DLRX_MSG_MIB_total_tx_cmp_msg))
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_tx_cmp_msg) >> B_DLRX_MSG_MIB_total_tx_cmp_msg))
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_tx_cmp_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_tx_cmp_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_tx_cmp_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_tx_cmp_msg) & M_DLRX_MSG_MIB_total_tx_cmp_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_tx_cmp_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_tx_cmp_msg) & M_DLRX_MSG_MIB_total_tx_cmp_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_tx_cmp_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_tx_cmp_msg)))
+
+#define DLRX_MSG_MIB_total_tx_cmp_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_tx_cmp_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_ind_wlan_msg 5
+#define B_DLRX_MSG_MIB_total_rx_ind_wlan_msg 0
+#define W_DLRX_MSG_MIB_total_rx_ind_wlan_msg 32
+#define M_DLRX_MSG_MIB_total_rx_ind_wlan_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_ind_wlan_msg + offset)) & M_DLRX_MSG_MIB_total_rx_ind_wlan_msg) >> B_DLRX_MSG_MIB_total_rx_ind_wlan_msg))
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_ind_wlan_msg) >> B_DLRX_MSG_MIB_total_rx_ind_wlan_msg))
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_ind_wlan_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_ind_wlan_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_ind_wlan_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_ind_wlan_msg) & M_DLRX_MSG_MIB_total_rx_ind_wlan_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_ind_wlan_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_ind_wlan_msg) & M_DLRX_MSG_MIB_total_rx_ind_wlan_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_ind_wlan_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_ind_wlan_msg)))
+
+#define DLRX_MSG_MIB_total_rx_ind_wlan_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_ind_wlan_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_flush_wlan_msg 6
+#define B_DLRX_MSG_MIB_total_rx_flush_wlan_msg 0
+#define W_DLRX_MSG_MIB_total_rx_flush_wlan_msg 32
+#define M_DLRX_MSG_MIB_total_rx_flush_wlan_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_flush_wlan_msg + offset)) & M_DLRX_MSG_MIB_total_rx_flush_wlan_msg) >> B_DLRX_MSG_MIB_total_rx_flush_wlan_msg))
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_flush_wlan_msg) >> B_DLRX_MSG_MIB_total_rx_flush_wlan_msg))
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_flush_wlan_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_flush_wlan_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_flush_wlan_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_flush_wlan_msg) & M_DLRX_MSG_MIB_total_rx_flush_wlan_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_flush_wlan_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_flush_wlan_msg) & M_DLRX_MSG_MIB_total_rx_flush_wlan_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_flush_wlan_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_flush_wlan_msg)))
+
+#define DLRX_MSG_MIB_total_rx_flush_wlan_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_flush_wlan_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_frag_ind_msg 7
+#define B_DLRX_MSG_MIB_total_rx_frag_ind_msg 0
+#define W_DLRX_MSG_MIB_total_rx_frag_ind_msg 32
+#define M_DLRX_MSG_MIB_total_rx_frag_ind_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_frag_ind_msg + offset)) & M_DLRX_MSG_MIB_total_rx_frag_ind_msg) >> B_DLRX_MSG_MIB_total_rx_frag_ind_msg))
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_frag_ind_msg) >> B_DLRX_MSG_MIB_total_rx_frag_ind_msg))
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_frag_ind_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_frag_ind_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_frag_ind_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_frag_ind_msg) & M_DLRX_MSG_MIB_total_rx_frag_ind_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_frag_ind_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_frag_ind_msg) & M_DLRX_MSG_MIB_total_rx_frag_ind_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_frag_ind_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_frag_ind_msg)))
+
+#define DLRX_MSG_MIB_total_rx_frag_ind_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_frag_ind_msg)))
+
+#define O_DLRX_MSG_MIB_total_rx_invalid_tid_msg 8
+#define B_DLRX_MSG_MIB_total_rx_invalid_tid_msg 0
+#define W_DLRX_MSG_MIB_total_rx_invalid_tid_msg 32
+#define M_DLRX_MSG_MIB_total_rx_invalid_tid_msg 0xffffffff
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_get_indirect(base, offset)	((((*(base + O_DLRX_MSG_MIB_total_rx_invalid_tid_msg + offset)) & M_DLRX_MSG_MIB_total_rx_invalid_tid_msg) >> B_DLRX_MSG_MIB_total_rx_invalid_tid_msg))
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_get_direct(dword)	((((dword) & M_DLRX_MSG_MIB_total_rx_invalid_tid_msg) >> B_DLRX_MSG_MIB_total_rx_invalid_tid_msg))
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MSG_MIB_total_rx_invalid_tid_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_invalid_tid_msg));    \
+		(*(base + O_DLRX_MSG_MIB_total_rx_invalid_tid_msg + offset)) |= ((val << B_DLRX_MSG_MIB_total_rx_invalid_tid_msg) & M_DLRX_MSG_MIB_total_rx_invalid_tid_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MSG_MIB_total_rx_invalid_tid_msg));    \
+		(dword) |= ((val << B_DLRX_MSG_MIB_total_rx_invalid_tid_msg) & M_DLRX_MSG_MIB_total_rx_invalid_tid_msg);    \
+	} while (0)
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_clear_indirect(base, offset)	((*(base + O_DLRX_MSG_MIB_total_rx_invalid_tid_msg + offset)) &= (~(M_DLRX_MSG_MIB_total_rx_invalid_tid_msg)))
+
+#define DLRX_MSG_MIB_total_rx_invalid_tid_msg_clear_direct(dword)	((dword) &= (~(M_DLRX_MSG_MIB_total_rx_invalid_tid_msg)))
+
+#define O_DLRX_MISC_MIB_total_chained_mpdu 0
+#define B_DLRX_MISC_MIB_total_chained_mpdu 0
+#define W_DLRX_MISC_MIB_total_chained_mpdu 32
+#define M_DLRX_MISC_MIB_total_chained_mpdu 0xffffffff
+
+#define DLRX_MISC_MIB_total_chained_mpdu_get_indirect(base, offset)	((((*(base + O_DLRX_MISC_MIB_total_chained_mpdu + offset)) & M_DLRX_MISC_MIB_total_chained_mpdu) >> B_DLRX_MISC_MIB_total_chained_mpdu))
+
+#define DLRX_MISC_MIB_total_chained_mpdu_get_direct(dword)	((((dword) & M_DLRX_MISC_MIB_total_chained_mpdu) >> B_DLRX_MISC_MIB_total_chained_mpdu))
+
+#define DLRX_MISC_MIB_total_chained_mpdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MISC_MIB_total_chained_mpdu + offset)) &= (~(M_DLRX_MISC_MIB_total_chained_mpdu));    \
+		(*(base + O_DLRX_MISC_MIB_total_chained_mpdu + offset)) |= ((val << B_DLRX_MISC_MIB_total_chained_mpdu) & M_DLRX_MISC_MIB_total_chained_mpdu);    \
+	} while (0)
+
+#define DLRX_MISC_MIB_total_chained_mpdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MISC_MIB_total_chained_mpdu));    \
+		(dword) |= ((val << B_DLRX_MISC_MIB_total_chained_mpdu) & M_DLRX_MISC_MIB_total_chained_mpdu);    \
+	} while (0)
+
+#define DLRX_MISC_MIB_total_chained_mpdu_clear_indirect(base, offset)	((*(base + O_DLRX_MISC_MIB_total_chained_mpdu + offset)) &= (~(M_DLRX_MISC_MIB_total_chained_mpdu)))
+
+#define DLRX_MISC_MIB_total_chained_mpdu_clear_direct(dword)	((dword) &= (~(M_DLRX_MISC_MIB_total_chained_mpdu)))
+
+#define O_DLRX_MISC_MIB_total_chained_msdu 1
+#define B_DLRX_MISC_MIB_total_chained_msdu 0
+#define W_DLRX_MISC_MIB_total_chained_msdu 32
+#define M_DLRX_MISC_MIB_total_chained_msdu 0xffffffff
+
+#define DLRX_MISC_MIB_total_chained_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_MISC_MIB_total_chained_msdu + offset)) & M_DLRX_MISC_MIB_total_chained_msdu) >> B_DLRX_MISC_MIB_total_chained_msdu))
+
+#define DLRX_MISC_MIB_total_chained_msdu_get_direct(dword)	((((dword) & M_DLRX_MISC_MIB_total_chained_msdu) >> B_DLRX_MISC_MIB_total_chained_msdu))
+
+#define DLRX_MISC_MIB_total_chained_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_MISC_MIB_total_chained_msdu + offset)) &= (~(M_DLRX_MISC_MIB_total_chained_msdu));    \
+		(*(base + O_DLRX_MISC_MIB_total_chained_msdu + offset)) |= ((val << B_DLRX_MISC_MIB_total_chained_msdu) & M_DLRX_MISC_MIB_total_chained_msdu);    \
+	} while (0)
+
+#define DLRX_MISC_MIB_total_chained_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_MISC_MIB_total_chained_msdu));    \
+		(dword) |= ((val << B_DLRX_MISC_MIB_total_chained_msdu) & M_DLRX_MISC_MIB_total_chained_msdu);    \
+	} while (0)
+
+#define DLRX_MISC_MIB_total_chained_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_MISC_MIB_total_chained_msdu + offset)) &= (~(M_DLRX_MISC_MIB_total_chained_msdu)))
+
+#define DLRX_MISC_MIB_total_chained_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_MISC_MIB_total_chained_msdu)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 0
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 7
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 0x0000007f
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer0)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 7
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 1
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 0x00000080
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld0)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 8
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 7
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 0x00007f00
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer1)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 15
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 1
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 0x00008000
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld1)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 16
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 7
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 0x007f0000
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer2)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 23
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 1
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 0x00800000
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld2)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 24
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 7
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 0x7f000000
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_peer3)))
+
+#define O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 0
+#define B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 31
+#define W_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 1
+#define M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 0x80000000
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 + offset)) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3) >> B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3));    \
+		(*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 + offset)) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3) & M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3 + offset)) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3)))
+
+#define DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_ID_TO_PEER_MAP_vld3)))
+
+#define O_DLRX_CFG_PEER_TO_VAP_PN_vap 0
+#define B_DLRX_CFG_PEER_TO_VAP_PN_vap 0
+#define W_DLRX_CFG_PEER_TO_VAP_PN_vap 4
+#define M_DLRX_CFG_PEER_TO_VAP_PN_vap 0x0000000f
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_vap + offset)) & M_DLRX_CFG_PEER_TO_VAP_PN_vap) >> B_DLRX_CFG_PEER_TO_VAP_PN_vap))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_TO_VAP_PN_vap) >> B_DLRX_CFG_PEER_TO_VAP_PN_vap))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_vap + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_vap));    \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_vap + offset)) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_vap) & M_DLRX_CFG_PEER_TO_VAP_PN_vap);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_vap));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_vap) & M_DLRX_CFG_PEER_TO_VAP_PN_vap);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_vap + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_vap)))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_vap_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_vap)))
+
+#define O_DLRX_CFG_PEER_TO_VAP_PN_sec_type 0
+#define B_DLRX_CFG_PEER_TO_VAP_PN_sec_type 4
+#define W_DLRX_CFG_PEER_TO_VAP_PN_sec_type 2
+#define M_DLRX_CFG_PEER_TO_VAP_PN_sec_type 0x00000030
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_sec_type + offset)) & M_DLRX_CFG_PEER_TO_VAP_PN_sec_type) >> B_DLRX_CFG_PEER_TO_VAP_PN_sec_type))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_TO_VAP_PN_sec_type) >> B_DLRX_CFG_PEER_TO_VAP_PN_sec_type))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_sec_type + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_sec_type));    \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_sec_type + offset)) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_sec_type) & M_DLRX_CFG_PEER_TO_VAP_PN_sec_type);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_sec_type));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_sec_type) & M_DLRX_CFG_PEER_TO_VAP_PN_sec_type);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_sec_type + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_sec_type)))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_sec_type_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_sec_type)))
+
+#define O_DLRX_CFG_PEER_TO_VAP_PN_acc_dis 0
+#define B_DLRX_CFG_PEER_TO_VAP_PN_acc_dis 6
+#define W_DLRX_CFG_PEER_TO_VAP_PN_acc_dis 1
+#define M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis 0x00000040
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_acc_dis + offset)) & M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis) >> B_DLRX_CFG_PEER_TO_VAP_PN_acc_dis))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis) >> B_DLRX_CFG_PEER_TO_VAP_PN_acc_dis))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_acc_dis + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis));    \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_acc_dis + offset)) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_acc_dis) & M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_acc_dis) & M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_acc_dis + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis)))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_acc_dis_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_acc_dis)))
+
+#define O_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 0
+#define B_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 7
+#define W_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 25
+#define M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 0xffffff80
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 + offset)) & M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0) >> B_DLRX_CFG_PEER_TO_VAP_PN_rsvd0))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0) >> B_DLRX_CFG_PEER_TO_VAP_PN_rsvd0))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0));    \
+		(*(base + O_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 + offset)) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_rsvd0) & M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_TO_VAP_PN_rsvd0) & M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_TO_VAP_PN_rsvd0 + offset)) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0)))
+
+#define DLRX_CFG_PEER_TO_VAP_PN_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_TO_VAP_PN_rsvd0)))
+
+#define O_DLRX_CFG_PEER_RESET_peer 0
+#define B_DLRX_CFG_PEER_RESET_peer 0
+#define W_DLRX_CFG_PEER_RESET_peer 7
+#define M_DLRX_CFG_PEER_RESET_peer 0x0000007f
+
+#define DLRX_CFG_PEER_RESET_peer_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_RESET_peer + offset)) & M_DLRX_CFG_PEER_RESET_peer) >> B_DLRX_CFG_PEER_RESET_peer))
+
+#define DLRX_CFG_PEER_RESET_peer_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_RESET_peer) >> B_DLRX_CFG_PEER_RESET_peer))
+
+#define DLRX_CFG_PEER_RESET_peer_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_RESET_peer + offset)) &= (~(M_DLRX_CFG_PEER_RESET_peer));    \
+		(*(base + O_DLRX_CFG_PEER_RESET_peer + offset)) |= ((val << B_DLRX_CFG_PEER_RESET_peer) & M_DLRX_CFG_PEER_RESET_peer);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_peer_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_RESET_peer));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_RESET_peer) & M_DLRX_CFG_PEER_RESET_peer);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_peer_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_RESET_peer + offset)) &= (~(M_DLRX_CFG_PEER_RESET_peer)))
+
+#define DLRX_CFG_PEER_RESET_peer_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_RESET_peer)))
+
+#define O_DLRX_CFG_PEER_RESET_rsvd0 0
+#define B_DLRX_CFG_PEER_RESET_rsvd0 7
+#define W_DLRX_CFG_PEER_RESET_rsvd0 24
+#define M_DLRX_CFG_PEER_RESET_rsvd0 0x7fffff80
+
+#define DLRX_CFG_PEER_RESET_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_RESET_rsvd0 + offset)) & M_DLRX_CFG_PEER_RESET_rsvd0) >> B_DLRX_CFG_PEER_RESET_rsvd0))
+
+#define DLRX_CFG_PEER_RESET_rsvd0_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_RESET_rsvd0) >> B_DLRX_CFG_PEER_RESET_rsvd0))
+
+#define DLRX_CFG_PEER_RESET_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_RESET_rsvd0 + offset)) &= (~(M_DLRX_CFG_PEER_RESET_rsvd0));    \
+		(*(base + O_DLRX_CFG_PEER_RESET_rsvd0 + offset)) |= ((val << B_DLRX_CFG_PEER_RESET_rsvd0) & M_DLRX_CFG_PEER_RESET_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_RESET_rsvd0));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_RESET_rsvd0) & M_DLRX_CFG_PEER_RESET_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_RESET_rsvd0 + offset)) &= (~(M_DLRX_CFG_PEER_RESET_rsvd0)))
+
+#define DLRX_CFG_PEER_RESET_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_RESET_rsvd0)))
+
+#define O_DLRX_CFG_PEER_RESET_req 0
+#define B_DLRX_CFG_PEER_RESET_req 31
+#define W_DLRX_CFG_PEER_RESET_req 1
+#define M_DLRX_CFG_PEER_RESET_req 0x80000000
+
+#define DLRX_CFG_PEER_RESET_req_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_PEER_RESET_req + offset)) & M_DLRX_CFG_PEER_RESET_req) >> B_DLRX_CFG_PEER_RESET_req))
+
+#define DLRX_CFG_PEER_RESET_req_get_direct(dword)	((((dword) & M_DLRX_CFG_PEER_RESET_req) >> B_DLRX_CFG_PEER_RESET_req))
+
+#define DLRX_CFG_PEER_RESET_req_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_PEER_RESET_req + offset)) &= (~(M_DLRX_CFG_PEER_RESET_req));    \
+		(*(base + O_DLRX_CFG_PEER_RESET_req + offset)) |= ((val << B_DLRX_CFG_PEER_RESET_req) & M_DLRX_CFG_PEER_RESET_req);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_req_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_PEER_RESET_req));    \
+		(dword) |= ((val << B_DLRX_CFG_PEER_RESET_req) & M_DLRX_CFG_PEER_RESET_req);    \
+	} while (0)
+
+#define DLRX_CFG_PEER_RESET_req_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_PEER_RESET_req + offset)) &= (~(M_DLRX_CFG_PEER_RESET_req)))
+
+#define DLRX_CFG_PEER_RESET_req_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_PEER_RESET_req)))
+
+#define O_DLRX_CFG_INVALID_TID_peer 0
+#define B_DLRX_CFG_INVALID_TID_peer 0
+#define W_DLRX_CFG_INVALID_TID_peer 7
+#define M_DLRX_CFG_INVALID_TID_peer 0x0000007f
+
+#define DLRX_CFG_INVALID_TID_peer_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_INVALID_TID_peer + offset)) & M_DLRX_CFG_INVALID_TID_peer) >> B_DLRX_CFG_INVALID_TID_peer))
+
+#define DLRX_CFG_INVALID_TID_peer_get_direct(dword)	((((dword) & M_DLRX_CFG_INVALID_TID_peer) >> B_DLRX_CFG_INVALID_TID_peer))
+
+#define DLRX_CFG_INVALID_TID_peer_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_INVALID_TID_peer + offset)) &= (~(M_DLRX_CFG_INVALID_TID_peer));    \
+		(*(base + O_DLRX_CFG_INVALID_TID_peer + offset)) |= ((val << B_DLRX_CFG_INVALID_TID_peer) & M_DLRX_CFG_INVALID_TID_peer);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_peer_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_INVALID_TID_peer));    \
+		(dword) |= ((val << B_DLRX_CFG_INVALID_TID_peer) & M_DLRX_CFG_INVALID_TID_peer);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_peer_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_INVALID_TID_peer + offset)) &= (~(M_DLRX_CFG_INVALID_TID_peer)))
+
+#define DLRX_CFG_INVALID_TID_peer_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_INVALID_TID_peer)))
+
+#define O_DLRX_CFG_INVALID_TID_rsvd0 0
+#define B_DLRX_CFG_INVALID_TID_rsvd0 7
+#define W_DLRX_CFG_INVALID_TID_rsvd0 24
+#define M_DLRX_CFG_INVALID_TID_rsvd0 0x7fffff80
+
+#define DLRX_CFG_INVALID_TID_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_INVALID_TID_rsvd0 + offset)) & M_DLRX_CFG_INVALID_TID_rsvd0) >> B_DLRX_CFG_INVALID_TID_rsvd0))
+
+#define DLRX_CFG_INVALID_TID_rsvd0_get_direct(dword)	((((dword) & M_DLRX_CFG_INVALID_TID_rsvd0) >> B_DLRX_CFG_INVALID_TID_rsvd0))
+
+#define DLRX_CFG_INVALID_TID_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_INVALID_TID_rsvd0 + offset)) &= (~(M_DLRX_CFG_INVALID_TID_rsvd0));    \
+		(*(base + O_DLRX_CFG_INVALID_TID_rsvd0 + offset)) |= ((val << B_DLRX_CFG_INVALID_TID_rsvd0) & M_DLRX_CFG_INVALID_TID_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_INVALID_TID_rsvd0));    \
+		(dword) |= ((val << B_DLRX_CFG_INVALID_TID_rsvd0) & M_DLRX_CFG_INVALID_TID_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_INVALID_TID_rsvd0 + offset)) &= (~(M_DLRX_CFG_INVALID_TID_rsvd0)))
+
+#define DLRX_CFG_INVALID_TID_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_INVALID_TID_rsvd0)))
+
+#define O_DLRX_CFG_INVALID_TID_req 0
+#define B_DLRX_CFG_INVALID_TID_req 31
+#define W_DLRX_CFG_INVALID_TID_req 1
+#define M_DLRX_CFG_INVALID_TID_req 0x80000000
+
+#define DLRX_CFG_INVALID_TID_req_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_INVALID_TID_req + offset)) & M_DLRX_CFG_INVALID_TID_req) >> B_DLRX_CFG_INVALID_TID_req))
+
+#define DLRX_CFG_INVALID_TID_req_get_direct(dword)	((((dword) & M_DLRX_CFG_INVALID_TID_req) >> B_DLRX_CFG_INVALID_TID_req))
+
+#define DLRX_CFG_INVALID_TID_req_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_INVALID_TID_req + offset)) &= (~(M_DLRX_CFG_INVALID_TID_req));    \
+		(*(base + O_DLRX_CFG_INVALID_TID_req + offset)) |= ((val << B_DLRX_CFG_INVALID_TID_req) & M_DLRX_CFG_INVALID_TID_req);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_req_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_INVALID_TID_req));    \
+		(dword) |= ((val << B_DLRX_CFG_INVALID_TID_req) & M_DLRX_CFG_INVALID_TID_req);    \
+	} while (0)
+
+#define DLRX_CFG_INVALID_TID_req_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_INVALID_TID_req + offset)) &= (~(M_DLRX_CFG_INVALID_TID_req)))
+
+#define DLRX_CFG_INVALID_TID_req_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_INVALID_TID_req)))
+
+#define O_DLRX_CFG_MIB_RESET_vap 0
+#define B_DLRX_CFG_MIB_RESET_vap 0
+#define W_DLRX_CFG_MIB_RESET_vap 4
+#define M_DLRX_CFG_MIB_RESET_vap 0x0000000f
+
+#define DLRX_CFG_MIB_RESET_vap_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_MIB_RESET_vap + offset)) & M_DLRX_CFG_MIB_RESET_vap) >> B_DLRX_CFG_MIB_RESET_vap))
+
+#define DLRX_CFG_MIB_RESET_vap_get_direct(dword)	((((dword) & M_DLRX_CFG_MIB_RESET_vap) >> B_DLRX_CFG_MIB_RESET_vap))
+
+#define DLRX_CFG_MIB_RESET_vap_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_MIB_RESET_vap + offset)) &= (~(M_DLRX_CFG_MIB_RESET_vap));    \
+		(*(base + O_DLRX_CFG_MIB_RESET_vap + offset)) |= ((val << B_DLRX_CFG_MIB_RESET_vap) & M_DLRX_CFG_MIB_RESET_vap);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_vap_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_MIB_RESET_vap));    \
+		(dword) |= ((val << B_DLRX_CFG_MIB_RESET_vap) & M_DLRX_CFG_MIB_RESET_vap);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_vap_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_MIB_RESET_vap + offset)) &= (~(M_DLRX_CFG_MIB_RESET_vap)))
+
+#define DLRX_CFG_MIB_RESET_vap_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_MIB_RESET_vap)))
+
+#define O_DLRX_CFG_MIB_RESET_rsvd0 0
+#define B_DLRX_CFG_MIB_RESET_rsvd0 4
+#define W_DLRX_CFG_MIB_RESET_rsvd0 26
+#define M_DLRX_CFG_MIB_RESET_rsvd0 0x3ffffff0
+
+#define DLRX_CFG_MIB_RESET_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_MIB_RESET_rsvd0 + offset)) & M_DLRX_CFG_MIB_RESET_rsvd0) >> B_DLRX_CFG_MIB_RESET_rsvd0))
+
+#define DLRX_CFG_MIB_RESET_rsvd0_get_direct(dword)	((((dword) & M_DLRX_CFG_MIB_RESET_rsvd0) >> B_DLRX_CFG_MIB_RESET_rsvd0))
+
+#define DLRX_CFG_MIB_RESET_rsvd0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_MIB_RESET_rsvd0 + offset)) &= (~(M_DLRX_CFG_MIB_RESET_rsvd0));    \
+		(*(base + O_DLRX_CFG_MIB_RESET_rsvd0 + offset)) |= ((val << B_DLRX_CFG_MIB_RESET_rsvd0) & M_DLRX_CFG_MIB_RESET_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_rsvd0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_MIB_RESET_rsvd0));    \
+		(dword) |= ((val << B_DLRX_CFG_MIB_RESET_rsvd0) & M_DLRX_CFG_MIB_RESET_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_MIB_RESET_rsvd0 + offset)) &= (~(M_DLRX_CFG_MIB_RESET_rsvd0)))
+
+#define DLRX_CFG_MIB_RESET_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_MIB_RESET_rsvd0)))
+
+#define O_DLRX_CFG_MIB_RESET_vapreq 0
+#define B_DLRX_CFG_MIB_RESET_vapreq 30
+#define W_DLRX_CFG_MIB_RESET_vapreq 1
+#define M_DLRX_CFG_MIB_RESET_vapreq 0x40000000
+
+#define DLRX_CFG_MIB_RESET_vapreq_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_MIB_RESET_vapreq + offset)) & M_DLRX_CFG_MIB_RESET_vapreq) >> B_DLRX_CFG_MIB_RESET_vapreq))
+
+#define DLRX_CFG_MIB_RESET_vapreq_get_direct(dword)	((((dword) & M_DLRX_CFG_MIB_RESET_vapreq) >> B_DLRX_CFG_MIB_RESET_vapreq))
+
+#define DLRX_CFG_MIB_RESET_vapreq_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_MIB_RESET_vapreq + offset)) &= (~(M_DLRX_CFG_MIB_RESET_vapreq));    \
+		(*(base + O_DLRX_CFG_MIB_RESET_vapreq + offset)) |= ((val << B_DLRX_CFG_MIB_RESET_vapreq) & M_DLRX_CFG_MIB_RESET_vapreq);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_vapreq_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_MIB_RESET_vapreq));    \
+		(dword) |= ((val << B_DLRX_CFG_MIB_RESET_vapreq) & M_DLRX_CFG_MIB_RESET_vapreq);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_vapreq_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_MIB_RESET_vapreq + offset)) &= (~(M_DLRX_CFG_MIB_RESET_vapreq)))
+
+#define DLRX_CFG_MIB_RESET_vapreq_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_MIB_RESET_vapreq)))
+
+#define O_DLRX_CFG_MIB_RESET_allreq 0
+#define B_DLRX_CFG_MIB_RESET_allreq 31
+#define W_DLRX_CFG_MIB_RESET_allreq 1
+#define M_DLRX_CFG_MIB_RESET_allreq 0x80000000
+
+#define DLRX_CFG_MIB_RESET_allreq_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_MIB_RESET_allreq + offset)) & M_DLRX_CFG_MIB_RESET_allreq) >> B_DLRX_CFG_MIB_RESET_allreq))
+
+#define DLRX_CFG_MIB_RESET_allreq_get_direct(dword)	((((dword) & M_DLRX_CFG_MIB_RESET_allreq) >> B_DLRX_CFG_MIB_RESET_allreq))
+
+#define DLRX_CFG_MIB_RESET_allreq_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_MIB_RESET_allreq + offset)) &= (~(M_DLRX_CFG_MIB_RESET_allreq));    \
+		(*(base + O_DLRX_CFG_MIB_RESET_allreq + offset)) |= ((val << B_DLRX_CFG_MIB_RESET_allreq) & M_DLRX_CFG_MIB_RESET_allreq);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_allreq_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_MIB_RESET_allreq));    \
+		(dword) |= ((val << B_DLRX_CFG_MIB_RESET_allreq) & M_DLRX_CFG_MIB_RESET_allreq);    \
+	} while (0)
+
+#define DLRX_CFG_MIB_RESET_allreq_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_MIB_RESET_allreq + offset)) &= (~(M_DLRX_CFG_MIB_RESET_allreq)))
+
+#define DLRX_CFG_MIB_RESET_allreq_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_MIB_RESET_allreq)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap0 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap0 0
+#define W_DLRX_CFG_VAP2INT_MAP1_vap0 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap0 0x0000000f
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap0 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap0) >> B_DLRX_CFG_VAP2INT_MAP1_vap0))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap0) >> B_DLRX_CFG_VAP2INT_MAP1_vap0))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap0 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap0));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap0 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap0) & M_DLRX_CFG_VAP2INT_MAP1_vap0);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap0));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap0) & M_DLRX_CFG_VAP2INT_MAP1_vap0);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap0 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap0)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap0)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap1 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap1 4
+#define W_DLRX_CFG_VAP2INT_MAP1_vap1 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap1 0x000000f0
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap1 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap1) >> B_DLRX_CFG_VAP2INT_MAP1_vap1))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap1) >> B_DLRX_CFG_VAP2INT_MAP1_vap1))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap1 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap1));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap1 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap1) & M_DLRX_CFG_VAP2INT_MAP1_vap1);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap1));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap1) & M_DLRX_CFG_VAP2INT_MAP1_vap1);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap1 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap1)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap1_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap1)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap2 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap2 8
+#define W_DLRX_CFG_VAP2INT_MAP1_vap2 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap2 0x00000f00
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap2 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap2) >> B_DLRX_CFG_VAP2INT_MAP1_vap2))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap2) >> B_DLRX_CFG_VAP2INT_MAP1_vap2))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap2 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap2));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap2 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap2) & M_DLRX_CFG_VAP2INT_MAP1_vap2);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap2));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap2) & M_DLRX_CFG_VAP2INT_MAP1_vap2);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap2 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap2)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap2_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap2)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap3 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap3 12
+#define W_DLRX_CFG_VAP2INT_MAP1_vap3 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap3 0x0000f000
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap3 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap3) >> B_DLRX_CFG_VAP2INT_MAP1_vap3))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap3) >> B_DLRX_CFG_VAP2INT_MAP1_vap3))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap3 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap3));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap3 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap3) & M_DLRX_CFG_VAP2INT_MAP1_vap3);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap3));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap3) & M_DLRX_CFG_VAP2INT_MAP1_vap3);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap3 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap3)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap3_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap3)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap4 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap4 16
+#define W_DLRX_CFG_VAP2INT_MAP1_vap4 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap4 0x000f0000
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap4 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap4) >> B_DLRX_CFG_VAP2INT_MAP1_vap4))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap4) >> B_DLRX_CFG_VAP2INT_MAP1_vap4))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap4 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap4));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap4 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap4) & M_DLRX_CFG_VAP2INT_MAP1_vap4);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap4));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap4) & M_DLRX_CFG_VAP2INT_MAP1_vap4);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap4 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap4)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap4_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap4)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap5 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap5 20
+#define W_DLRX_CFG_VAP2INT_MAP1_vap5 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap5 0x00f00000
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap5 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap5) >> B_DLRX_CFG_VAP2INT_MAP1_vap5))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap5) >> B_DLRX_CFG_VAP2INT_MAP1_vap5))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap5 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap5));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap5 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap5) & M_DLRX_CFG_VAP2INT_MAP1_vap5);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap5));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap5) & M_DLRX_CFG_VAP2INT_MAP1_vap5);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap5 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap5)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap5_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap5)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap6 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap6 24
+#define W_DLRX_CFG_VAP2INT_MAP1_vap6 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap6 0x0f000000
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap6 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap6) >> B_DLRX_CFG_VAP2INT_MAP1_vap6))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap6) >> B_DLRX_CFG_VAP2INT_MAP1_vap6))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap6 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap6));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap6 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap6) & M_DLRX_CFG_VAP2INT_MAP1_vap6);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap6));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap6) & M_DLRX_CFG_VAP2INT_MAP1_vap6);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap6 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap6)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap6_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap6)))
+
+#define O_DLRX_CFG_VAP2INT_MAP1_vap7 0
+#define B_DLRX_CFG_VAP2INT_MAP1_vap7 28
+#define W_DLRX_CFG_VAP2INT_MAP1_vap7 4
+#define M_DLRX_CFG_VAP2INT_MAP1_vap7 0xf0000000
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap7 + offset)) & M_DLRX_CFG_VAP2INT_MAP1_vap7) >> B_DLRX_CFG_VAP2INT_MAP1_vap7))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP1_vap7) >> B_DLRX_CFG_VAP2INT_MAP1_vap7))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap7 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap7));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP1_vap7 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap7) & M_DLRX_CFG_VAP2INT_MAP1_vap7);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap7));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP1_vap7) & M_DLRX_CFG_VAP2INT_MAP1_vap7);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP1_vap7 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap7)))
+
+#define DLRX_CFG_VAP2INT_MAP1_vap7_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP1_vap7)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap8 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap8 0
+#define W_DLRX_CFG_VAP2INT_MAP2_vap8 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap8 0x0000000f
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap8 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap8) >> B_DLRX_CFG_VAP2INT_MAP2_vap8))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap8) >> B_DLRX_CFG_VAP2INT_MAP2_vap8))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap8 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap8));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap8 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap8) & M_DLRX_CFG_VAP2INT_MAP2_vap8);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap8));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap8) & M_DLRX_CFG_VAP2INT_MAP2_vap8);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap8 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap8)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap8_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap8)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap9 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap9 4
+#define W_DLRX_CFG_VAP2INT_MAP2_vap9 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap9 0x000000f0
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap9 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap9) >> B_DLRX_CFG_VAP2INT_MAP2_vap9))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap9) >> B_DLRX_CFG_VAP2INT_MAP2_vap9))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap9 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap9));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap9 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap9) & M_DLRX_CFG_VAP2INT_MAP2_vap9);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap9));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap9) & M_DLRX_CFG_VAP2INT_MAP2_vap9);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap9 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap9)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap9_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap9)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap10 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap10 8
+#define W_DLRX_CFG_VAP2INT_MAP2_vap10 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap10 0x00000f00
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap10 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap10) >> B_DLRX_CFG_VAP2INT_MAP2_vap10))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap10) >> B_DLRX_CFG_VAP2INT_MAP2_vap10))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap10 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap10));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap10 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap10) & M_DLRX_CFG_VAP2INT_MAP2_vap10);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap10));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap10) & M_DLRX_CFG_VAP2INT_MAP2_vap10);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap10 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap10)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap10_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap10)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap11 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap11 12
+#define W_DLRX_CFG_VAP2INT_MAP2_vap11 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap11 0x0000f000
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap11 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap11) >> B_DLRX_CFG_VAP2INT_MAP2_vap11))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap11) >> B_DLRX_CFG_VAP2INT_MAP2_vap11))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap11 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap11));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap11 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap11) & M_DLRX_CFG_VAP2INT_MAP2_vap11);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap11));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap11) & M_DLRX_CFG_VAP2INT_MAP2_vap11);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap11 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap11)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap11_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap11)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap12 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap12 16
+#define W_DLRX_CFG_VAP2INT_MAP2_vap12 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap12 0x000f0000
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap12 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap12) >> B_DLRX_CFG_VAP2INT_MAP2_vap12))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap12) >> B_DLRX_CFG_VAP2INT_MAP2_vap12))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap12 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap12));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap12 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap12) & M_DLRX_CFG_VAP2INT_MAP2_vap12);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap12));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap12) & M_DLRX_CFG_VAP2INT_MAP2_vap12);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap12 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap12)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap12_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap12)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap13 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap13 20
+#define W_DLRX_CFG_VAP2INT_MAP2_vap13 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap13 0x00f00000
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap13 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap13) >> B_DLRX_CFG_VAP2INT_MAP2_vap13))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap13) >> B_DLRX_CFG_VAP2INT_MAP2_vap13))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap13 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap13));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap13 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap13) & M_DLRX_CFG_VAP2INT_MAP2_vap13);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap13));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap13) & M_DLRX_CFG_VAP2INT_MAP2_vap13);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap13 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap13)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap13_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap13)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap14 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap14 24
+#define W_DLRX_CFG_VAP2INT_MAP2_vap14 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap14 0x0f000000
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap14 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap14) >> B_DLRX_CFG_VAP2INT_MAP2_vap14))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap14) >> B_DLRX_CFG_VAP2INT_MAP2_vap14))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap14 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap14));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap14 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap14) & M_DLRX_CFG_VAP2INT_MAP2_vap14);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap14));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap14) & M_DLRX_CFG_VAP2INT_MAP2_vap14);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap14 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap14)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap14_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap14)))
+
+#define O_DLRX_CFG_VAP2INT_MAP2_vap15 0
+#define B_DLRX_CFG_VAP2INT_MAP2_vap15 28
+#define W_DLRX_CFG_VAP2INT_MAP2_vap15 4
+#define M_DLRX_CFG_VAP2INT_MAP2_vap15 0xf0000000
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap15 + offset)) & M_DLRX_CFG_VAP2INT_MAP2_vap15) >> B_DLRX_CFG_VAP2INT_MAP2_vap15))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_get_direct(dword)	((((dword) & M_DLRX_CFG_VAP2INT_MAP2_vap15) >> B_DLRX_CFG_VAP2INT_MAP2_vap15))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap15 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap15));    \
+		(*(base + O_DLRX_CFG_VAP2INT_MAP2_vap15 + offset)) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap15) & M_DLRX_CFG_VAP2INT_MAP2_vap15);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap15));    \
+		(dword) |= ((val << B_DLRX_CFG_VAP2INT_MAP2_vap15) & M_DLRX_CFG_VAP2INT_MAP2_vap15);    \
+	} while (0)
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_VAP2INT_MAP2_vap15 + offset)) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap15)))
+
+#define DLRX_CFG_VAP2INT_MAP2_vap15_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_VAP2INT_MAP2_vap15)))
+
+#define O_DLRX_RXPB_PTR_RING_rxpb_ptr 0
+#define B_DLRX_RXPB_PTR_RING_rxpb_ptr 0
+#define W_DLRX_RXPB_PTR_RING_rxpb_ptr 32
+#define M_DLRX_RXPB_PTR_RING_rxpb_ptr 0xffffffff
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_RXPB_PTR_RING_rxpb_ptr + offset)) & M_DLRX_RXPB_PTR_RING_rxpb_ptr) >> B_DLRX_RXPB_PTR_RING_rxpb_ptr))
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_get_direct(dword)	((((dword) & M_DLRX_RXPB_PTR_RING_rxpb_ptr) >> B_DLRX_RXPB_PTR_RING_rxpb_ptr))
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_RXPB_PTR_RING_rxpb_ptr + offset)) &= (~(M_DLRX_RXPB_PTR_RING_rxpb_ptr));    \
+		(*(base + O_DLRX_RXPB_PTR_RING_rxpb_ptr + offset)) |= ((val << B_DLRX_RXPB_PTR_RING_rxpb_ptr) & M_DLRX_RXPB_PTR_RING_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_RXPB_PTR_RING_rxpb_ptr));    \
+		(dword) |= ((val << B_DLRX_RXPB_PTR_RING_rxpb_ptr) & M_DLRX_RXPB_PTR_RING_rxpb_ptr);    \
+	} while (0)
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_RXPB_PTR_RING_rxpb_ptr + offset)) &= (~(M_DLRX_RXPB_PTR_RING_rxpb_ptr)))
+
+#define DLRX_RXPB_PTR_RING_rxpb_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_RXPB_PTR_RING_rxpb_ptr)))
+
+#define O_DLRX_DMA_DES_data_len 0
+#define B_DLRX_DMA_DES_data_len 0
+#define W_DLRX_DMA_DES_data_len 16
+#define M_DLRX_DMA_DES_data_len 0x0000ffff
+
+#define DLRX_DMA_DES_data_len_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_data_len + offset)) & M_DLRX_DMA_DES_data_len) >> B_DLRX_DMA_DES_data_len))
+
+#define DLRX_DMA_DES_data_len_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_data_len) >> B_DLRX_DMA_DES_data_len))
+
+#define DLRX_DMA_DES_data_len_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_data_len + offset)) &= (~(M_DLRX_DMA_DES_data_len));    \
+		(*(base + O_DLRX_DMA_DES_data_len + offset)) |= ((val << B_DLRX_DMA_DES_data_len) & M_DLRX_DMA_DES_data_len);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_len_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_data_len));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_data_len) & M_DLRX_DMA_DES_data_len);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_len_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_data_len + offset)) &= (~(M_DLRX_DMA_DES_data_len)))
+
+#define DLRX_DMA_DES_data_len_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_data_len)))
+
+#define O_DLRX_DMA_DES_byte_off 0
+#define B_DLRX_DMA_DES_byte_off 23
+#define W_DLRX_DMA_DES_byte_off 2
+#define M_DLRX_DMA_DES_byte_off 0x01800000
+
+#define DLRX_DMA_DES_byte_off_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_byte_off + offset)) & M_DLRX_DMA_DES_byte_off) >> B_DLRX_DMA_DES_byte_off))
+
+#define DLRX_DMA_DES_byte_off_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_byte_off) >> B_DLRX_DMA_DES_byte_off))
+
+#define DLRX_DMA_DES_byte_off_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_byte_off + offset)) &= (~(M_DLRX_DMA_DES_byte_off));    \
+		(*(base + O_DLRX_DMA_DES_byte_off + offset)) |= ((val << B_DLRX_DMA_DES_byte_off) & M_DLRX_DMA_DES_byte_off);    \
+	} while (0)
+
+#define DLRX_DMA_DES_byte_off_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_byte_off));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_byte_off) & M_DLRX_DMA_DES_byte_off);    \
+	} while (0)
+
+#define DLRX_DMA_DES_byte_off_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_byte_off + offset)) &= (~(M_DLRX_DMA_DES_byte_off)))
+
+#define DLRX_DMA_DES_byte_off_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_byte_off)))
+
+#define O_DLRX_DMA_DES_eop 0
+#define B_DLRX_DMA_DES_eop 28
+#define W_DLRX_DMA_DES_eop 1
+#define M_DLRX_DMA_DES_eop 0x10000000
+
+#define DLRX_DMA_DES_eop_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_eop + offset)) & M_DLRX_DMA_DES_eop) >> B_DLRX_DMA_DES_eop))
+
+#define DLRX_DMA_DES_eop_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_eop) >> B_DLRX_DMA_DES_eop))
+
+#define DLRX_DMA_DES_eop_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_eop + offset)) &= (~(M_DLRX_DMA_DES_eop));    \
+		(*(base + O_DLRX_DMA_DES_eop + offset)) |= ((val << B_DLRX_DMA_DES_eop) & M_DLRX_DMA_DES_eop);    \
+	} while (0)
+
+#define DLRX_DMA_DES_eop_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_eop));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_eop) & M_DLRX_DMA_DES_eop);    \
+	} while (0)
+
+#define DLRX_DMA_DES_eop_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_eop + offset)) &= (~(M_DLRX_DMA_DES_eop)))
+
+#define DLRX_DMA_DES_eop_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_eop)))
+
+#define O_DLRX_DMA_DES_sop 0
+#define B_DLRX_DMA_DES_sop 29
+#define W_DLRX_DMA_DES_sop 1
+#define M_DLRX_DMA_DES_sop 0x20000000
+
+#define DLRX_DMA_DES_sop_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_sop + offset)) & M_DLRX_DMA_DES_sop) >> B_DLRX_DMA_DES_sop))
+
+#define DLRX_DMA_DES_sop_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_sop) >> B_DLRX_DMA_DES_sop))
+
+#define DLRX_DMA_DES_sop_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_sop + offset)) &= (~(M_DLRX_DMA_DES_sop));    \
+		(*(base + O_DLRX_DMA_DES_sop + offset)) |= ((val << B_DLRX_DMA_DES_sop) & M_DLRX_DMA_DES_sop);    \
+	} while (0)
+
+#define DLRX_DMA_DES_sop_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_sop));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_sop) & M_DLRX_DMA_DES_sop);    \
+	} while (0)
+
+#define DLRX_DMA_DES_sop_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_sop + offset)) &= (~(M_DLRX_DMA_DES_sop)))
+
+#define DLRX_DMA_DES_sop_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_sop)))
+
+#define O_DLRX_DMA_DES_c 0
+#define B_DLRX_DMA_DES_c 30
+#define W_DLRX_DMA_DES_c 1
+#define M_DLRX_DMA_DES_c 0x40000000
+
+#define DLRX_DMA_DES_c_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_c + offset)) & M_DLRX_DMA_DES_c) >> B_DLRX_DMA_DES_c))
+
+#define DLRX_DMA_DES_c_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_c) >> B_DLRX_DMA_DES_c))
+
+#define DLRX_DMA_DES_c_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_c + offset)) &= (~(M_DLRX_DMA_DES_c));    \
+		(*(base + O_DLRX_DMA_DES_c + offset)) |= ((val << B_DLRX_DMA_DES_c) & M_DLRX_DMA_DES_c);    \
+	} while (0)
+
+#define DLRX_DMA_DES_c_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_c));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_c) & M_DLRX_DMA_DES_c);    \
+	} while (0)
+
+#define DLRX_DMA_DES_c_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_c + offset)) &= (~(M_DLRX_DMA_DES_c)))
+
+#define DLRX_DMA_DES_c_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_c)))
+
+#define O_DLRX_DMA_DES_own 0
+#define B_DLRX_DMA_DES_own 31
+#define W_DLRX_DMA_DES_own 1
+#define M_DLRX_DMA_DES_own 0x80000000
+
+#define DLRX_DMA_DES_own_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_own + offset)) & M_DLRX_DMA_DES_own) >> B_DLRX_DMA_DES_own))
+
+#define DLRX_DMA_DES_own_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_own) >> B_DLRX_DMA_DES_own))
+
+#define DLRX_DMA_DES_own_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_own + offset)) &= (~(M_DLRX_DMA_DES_own));    \
+		(*(base + O_DLRX_DMA_DES_own + offset)) |= ((val << B_DLRX_DMA_DES_own) & M_DLRX_DMA_DES_own);    \
+	} while (0)
+
+#define DLRX_DMA_DES_own_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_own));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_own) & M_DLRX_DMA_DES_own);    \
+	} while (0)
+
+#define DLRX_DMA_DES_own_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_own + offset)) &= (~(M_DLRX_DMA_DES_own)))
+
+#define DLRX_DMA_DES_own_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_own)))
+
+#define O_DLRX_DMA_DES_data_ptr_rel 1
+#define B_DLRX_DMA_DES_data_ptr_rel 0
+#define W_DLRX_DMA_DES_data_ptr_rel 1
+#define M_DLRX_DMA_DES_data_ptr_rel 0x00000001
+
+#define DLRX_DMA_DES_data_ptr_rel_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_data_ptr_rel + offset)) & M_DLRX_DMA_DES_data_ptr_rel) >> B_DLRX_DMA_DES_data_ptr_rel))
+
+#define DLRX_DMA_DES_data_ptr_rel_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_data_ptr_rel) >> B_DLRX_DMA_DES_data_ptr_rel))
+
+#define DLRX_DMA_DES_data_ptr_rel_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_data_ptr_rel + offset)) &= (~(M_DLRX_DMA_DES_data_ptr_rel));    \
+		(*(base + O_DLRX_DMA_DES_data_ptr_rel + offset)) |= ((val << B_DLRX_DMA_DES_data_ptr_rel) & M_DLRX_DMA_DES_data_ptr_rel);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_ptr_rel_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_data_ptr_rel));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_data_ptr_rel) & M_DLRX_DMA_DES_data_ptr_rel);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_ptr_rel_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_data_ptr_rel + offset)) &= (~(M_DLRX_DMA_DES_data_ptr_rel)))
+
+#define DLRX_DMA_DES_data_ptr_rel_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_data_ptr_rel)))
+
+#define O_DLRX_DMA_DES_data_ptr 1
+#define B_DLRX_DMA_DES_data_ptr 3
+#define W_DLRX_DMA_DES_data_ptr 27
+#define M_DLRX_DMA_DES_data_ptr 0x3ffffff8
+
+#define DLRX_DMA_DES_data_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_DMA_DES_data_ptr + offset)) & M_DLRX_DMA_DES_data_ptr) >> B_DLRX_DMA_DES_data_ptr))
+
+#define DLRX_DMA_DES_data_ptr_get_direct(dword)	((((dword) & M_DLRX_DMA_DES_data_ptr) >> B_DLRX_DMA_DES_data_ptr))
+
+#define DLRX_DMA_DES_data_ptr_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_DMA_DES_data_ptr + offset)) &= (~(M_DLRX_DMA_DES_data_ptr));    \
+		(*(base + O_DLRX_DMA_DES_data_ptr + offset)) |= ((val << B_DLRX_DMA_DES_data_ptr) & M_DLRX_DMA_DES_data_ptr);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_ptr_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_DMA_DES_data_ptr));    \
+		(dword) |= ((val << B_DLRX_DMA_DES_data_ptr) & M_DLRX_DMA_DES_data_ptr);    \
+	} while (0)
+
+#define DLRX_DMA_DES_data_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_DMA_DES_data_ptr + offset)) &= (~(M_DLRX_DMA_DES_data_ptr)))
+
+#define DLRX_DMA_DES_data_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_DMA_DES_data_ptr)))
+
+#define O_DLRX_CFG_CTXT_DMA_cfg_badr_dma 0
+#define B_DLRX_CFG_CTXT_DMA_cfg_badr_dma 0
+#define W_DLRX_CFG_CTXT_DMA_cfg_badr_dma 32
+#define M_DLRX_CFG_CTXT_DMA_cfg_badr_dma 0xffffffff
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_DMA_cfg_badr_dma + offset)) & M_DLRX_CFG_CTXT_DMA_cfg_badr_dma) >> B_DLRX_CFG_CTXT_DMA_cfg_badr_dma))
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_DMA_cfg_badr_dma) >> B_DLRX_CFG_CTXT_DMA_cfg_badr_dma))
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_DMA_cfg_badr_dma + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_badr_dma));    \
+		(*(base + O_DLRX_CFG_CTXT_DMA_cfg_badr_dma + offset)) |= ((val << B_DLRX_CFG_CTXT_DMA_cfg_badr_dma) & M_DLRX_CFG_CTXT_DMA_cfg_badr_dma);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_badr_dma));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_DMA_cfg_badr_dma) & M_DLRX_CFG_CTXT_DMA_cfg_badr_dma);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_DMA_cfg_badr_dma + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_badr_dma)))
+
+#define DLRX_CFG_CTXT_DMA_cfg_badr_dma_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_badr_dma)))
+
+#define O_DLRX_CFG_CTXT_DMA_cfg_num_dma 1
+#define B_DLRX_CFG_CTXT_DMA_cfg_num_dma 0
+#define W_DLRX_CFG_CTXT_DMA_cfg_num_dma 32
+#define M_DLRX_CFG_CTXT_DMA_cfg_num_dma 0xffffffff
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_DMA_cfg_num_dma + offset)) & M_DLRX_CFG_CTXT_DMA_cfg_num_dma) >> B_DLRX_CFG_CTXT_DMA_cfg_num_dma))
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_DMA_cfg_num_dma) >> B_DLRX_CFG_CTXT_DMA_cfg_num_dma))
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_DMA_cfg_num_dma + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_num_dma));    \
+		(*(base + O_DLRX_CFG_CTXT_DMA_cfg_num_dma + offset)) |= ((val << B_DLRX_CFG_CTXT_DMA_cfg_num_dma) & M_DLRX_CFG_CTXT_DMA_cfg_num_dma);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_num_dma));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_DMA_cfg_num_dma) & M_DLRX_CFG_CTXT_DMA_cfg_num_dma);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_DMA_cfg_num_dma + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_num_dma)))
+
+#define DLRX_CFG_CTXT_DMA_cfg_num_dma_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_DMA_cfg_num_dma)))
+
+#define O_DLRX_CFG_CTXT_DMA_txdes_index 2
+#define B_DLRX_CFG_CTXT_DMA_txdes_index 0
+#define W_DLRX_CFG_CTXT_DMA_txdes_index 32
+#define M_DLRX_CFG_CTXT_DMA_txdes_index 0xffffffff
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_DMA_txdes_index + offset)) & M_DLRX_CFG_CTXT_DMA_txdes_index) >> B_DLRX_CFG_CTXT_DMA_txdes_index))
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_DMA_txdes_index) >> B_DLRX_CFG_CTXT_DMA_txdes_index))
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_DMA_txdes_index + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_txdes_index));    \
+		(*(base + O_DLRX_CFG_CTXT_DMA_txdes_index + offset)) |= ((val << B_DLRX_CFG_CTXT_DMA_txdes_index) & M_DLRX_CFG_CTXT_DMA_txdes_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_DMA_txdes_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_DMA_txdes_index) & M_DLRX_CFG_CTXT_DMA_txdes_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_DMA_txdes_index + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_txdes_index)))
+
+#define DLRX_CFG_CTXT_DMA_txdes_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_DMA_txdes_index)))
+
+#define O_DLRX_CFG_CTXT_DMA_rsvd0 3
+#define B_DLRX_CFG_CTXT_DMA_rsvd0 0
+#define W_DLRX_CFG_CTXT_DMA_rsvd0 32
+#define M_DLRX_CFG_CTXT_DMA_rsvd0 0xffffffff
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_DMA_rsvd0 + offset)) & M_DLRX_CFG_CTXT_DMA_rsvd0) >> B_DLRX_CFG_CTXT_DMA_rsvd0))
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_DMA_rsvd0) >> B_DLRX_CFG_CTXT_DMA_rsvd0))
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_DMA_rsvd0 + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_rsvd0));    \
+		(*(base + O_DLRX_CFG_CTXT_DMA_rsvd0 + offset)) |= ((val << B_DLRX_CFG_CTXT_DMA_rsvd0) & M_DLRX_CFG_CTXT_DMA_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_DMA_rsvd0));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_DMA_rsvd0) & M_DLRX_CFG_CTXT_DMA_rsvd0);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_DMA_rsvd0 + offset)) &= (~(M_DLRX_CFG_CTXT_DMA_rsvd0)))
+
+#define DLRX_CFG_CTXT_DMA_rsvd0_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_DMA_rsvd0)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf 0
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_ce5buf)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf 1
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_num_ce5buf)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf 2
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_ce5buf)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf 3
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf) & M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_size_shift_ce5buf)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index 4
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_read_index)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index 5
+#define B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index 0
+#define W_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index 32
+#define M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index + offset)) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index) >> B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index) & M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index)))
+
+#define DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_cfg_badr_target_ce5_write_index)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index 6
+#define B_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index 0
+#define W_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index 32
+#define M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index + offset)) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index) >> B_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index) >> B_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index)))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_read_index)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index 7
+#define B_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index 0
+#define W_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index 32
+#define M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index + offset)) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index) >> B_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index) >> B_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index) & M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index)))
+
+#define DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_local_ce5_parsing_index)))
+
+#define O_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type 8
+#define B_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type 0
+#define W_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type 32
+#define M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type + offset)) & M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type) >> B_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type))
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type) >> B_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type))
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type) & M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type) & M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type + offset)) &= (~(M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type)))
+
+#define DLRX_CFG_CTXT_CE5BUF_ce5_msg_type_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5BUF_ce5_msg_type)))
+
+#define O_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des 0
+#define B_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des 0
+#define W_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des 32
+#define M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des + offset)) & M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des) >> B_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des) >> B_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des) & M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des) & M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des)))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_badr_ce5des)))
+
+#define O_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des 1
+#define B_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des 0
+#define W_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des 32
+#define M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des + offset)) & M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des) >> B_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des) >> B_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des) & M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des) & M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des)))
+
+#define DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_cfg_num_ce5des)))
+
+#define O_DLRX_CFG_CTXT_CE5DES_msg_len 2
+#define B_DLRX_CFG_CTXT_CE5DES_msg_len 0
+#define W_DLRX_CFG_CTXT_CE5DES_msg_len 32
+#define M_DLRX_CFG_CTXT_CE5DES_msg_len 0xffffffff
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CE5DES_msg_len + offset)) & M_DLRX_CFG_CTXT_CE5DES_msg_len) >> B_DLRX_CFG_CTXT_CE5DES_msg_len))
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CE5DES_msg_len) >> B_DLRX_CFG_CTXT_CE5DES_msg_len))
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_msg_len + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_msg_len));    \
+		(*(base + O_DLRX_CFG_CTXT_CE5DES_msg_len + offset)) |= ((val << B_DLRX_CFG_CTXT_CE5DES_msg_len) & M_DLRX_CFG_CTXT_CE5DES_msg_len);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_msg_len));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CE5DES_msg_len) & M_DLRX_CFG_CTXT_CE5DES_msg_len);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CE5DES_msg_len + offset)) &= (~(M_DLRX_CFG_CTXT_CE5DES_msg_len)))
+
+#define DLRX_CFG_CTXT_CE5DES_msg_len_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CE5DES_msg_len)))
+
+#define O_DLRX_CE5DES_FORMAT_dest_ptr 0
+#define B_DLRX_CE5DES_FORMAT_dest_ptr 0
+#define W_DLRX_CE5DES_FORMAT_dest_ptr 32
+#define M_DLRX_CE5DES_FORMAT_dest_ptr 0xffffffff
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_CE5DES_FORMAT_dest_ptr + offset)) & M_DLRX_CE5DES_FORMAT_dest_ptr) >> B_DLRX_CE5DES_FORMAT_dest_ptr))
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_get_direct(dword)	((((dword) & M_DLRX_CE5DES_FORMAT_dest_ptr) >> B_DLRX_CE5DES_FORMAT_dest_ptr))
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CE5DES_FORMAT_dest_ptr + offset)) &= (~(M_DLRX_CE5DES_FORMAT_dest_ptr));    \
+		(*(base + O_DLRX_CE5DES_FORMAT_dest_ptr + offset)) |= ((val << B_DLRX_CE5DES_FORMAT_dest_ptr) & M_DLRX_CE5DES_FORMAT_dest_ptr);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CE5DES_FORMAT_dest_ptr));    \
+		(dword) |= ((val << B_DLRX_CE5DES_FORMAT_dest_ptr) & M_DLRX_CE5DES_FORMAT_dest_ptr);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_CE5DES_FORMAT_dest_ptr + offset)) &= (~(M_DLRX_CE5DES_FORMAT_dest_ptr)))
+
+#define DLRX_CE5DES_FORMAT_dest_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_CE5DES_FORMAT_dest_ptr)))
+
+#define O_DLRX_CE5DES_FORMAT_nbytes 1
+#define B_DLRX_CE5DES_FORMAT_nbytes 0
+#define W_DLRX_CE5DES_FORMAT_nbytes 16
+#define M_DLRX_CE5DES_FORMAT_nbytes 0x0000ffff
+
+#define DLRX_CE5DES_FORMAT_nbytes_get_indirect(base, offset)	((((*(base + O_DLRX_CE5DES_FORMAT_nbytes + offset)) & M_DLRX_CE5DES_FORMAT_nbytes) >> B_DLRX_CE5DES_FORMAT_nbytes))
+
+#define DLRX_CE5DES_FORMAT_nbytes_get_direct(dword)	((((dword) & M_DLRX_CE5DES_FORMAT_nbytes) >> B_DLRX_CE5DES_FORMAT_nbytes))
+
+#define DLRX_CE5DES_FORMAT_nbytes_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CE5DES_FORMAT_nbytes + offset)) &= (~(M_DLRX_CE5DES_FORMAT_nbytes));    \
+		(*(base + O_DLRX_CE5DES_FORMAT_nbytes + offset)) |= ((val << B_DLRX_CE5DES_FORMAT_nbytes) & M_DLRX_CE5DES_FORMAT_nbytes);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_nbytes_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CE5DES_FORMAT_nbytes));    \
+		(dword) |= ((val << B_DLRX_CE5DES_FORMAT_nbytes) & M_DLRX_CE5DES_FORMAT_nbytes);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_nbytes_clear_indirect(base, offset)	((*(base + O_DLRX_CE5DES_FORMAT_nbytes + offset)) &= (~(M_DLRX_CE5DES_FORMAT_nbytes)))
+
+#define DLRX_CE5DES_FORMAT_nbytes_clear_direct(dword)	((dword) &= (~(M_DLRX_CE5DES_FORMAT_nbytes)))
+
+#define O_DLRX_CE5DES_FORMAT_gather 1
+#define B_DLRX_CE5DES_FORMAT_gather 16
+#define W_DLRX_CE5DES_FORMAT_gather 1
+#define M_DLRX_CE5DES_FORMAT_gather 0x00010000
+
+#define DLRX_CE5DES_FORMAT_gather_get_indirect(base, offset)	((((*(base + O_DLRX_CE5DES_FORMAT_gather + offset)) & M_DLRX_CE5DES_FORMAT_gather) >> B_DLRX_CE5DES_FORMAT_gather))
+
+#define DLRX_CE5DES_FORMAT_gather_get_direct(dword)	((((dword) & M_DLRX_CE5DES_FORMAT_gather) >> B_DLRX_CE5DES_FORMAT_gather))
+
+#define DLRX_CE5DES_FORMAT_gather_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CE5DES_FORMAT_gather + offset)) &= (~(M_DLRX_CE5DES_FORMAT_gather));    \
+		(*(base + O_DLRX_CE5DES_FORMAT_gather + offset)) |= ((val << B_DLRX_CE5DES_FORMAT_gather) & M_DLRX_CE5DES_FORMAT_gather);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_gather_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CE5DES_FORMAT_gather));    \
+		(dword) |= ((val << B_DLRX_CE5DES_FORMAT_gather) & M_DLRX_CE5DES_FORMAT_gather);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_gather_clear_indirect(base, offset)	((*(base + O_DLRX_CE5DES_FORMAT_gather + offset)) &= (~(M_DLRX_CE5DES_FORMAT_gather)))
+
+#define DLRX_CE5DES_FORMAT_gather_clear_direct(dword)	((dword) &= (~(M_DLRX_CE5DES_FORMAT_gather)))
+
+#define O_DLRX_CE5DES_FORMAT_byte_swap 1
+#define B_DLRX_CE5DES_FORMAT_byte_swap 17
+#define W_DLRX_CE5DES_FORMAT_byte_swap 1
+#define M_DLRX_CE5DES_FORMAT_byte_swap 0x00020000
+
+#define DLRX_CE5DES_FORMAT_byte_swap_get_indirect(base, offset)	((((*(base + O_DLRX_CE5DES_FORMAT_byte_swap + offset)) & M_DLRX_CE5DES_FORMAT_byte_swap) >> B_DLRX_CE5DES_FORMAT_byte_swap))
+
+#define DLRX_CE5DES_FORMAT_byte_swap_get_direct(dword)	((((dword) & M_DLRX_CE5DES_FORMAT_byte_swap) >> B_DLRX_CE5DES_FORMAT_byte_swap))
+
+#define DLRX_CE5DES_FORMAT_byte_swap_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CE5DES_FORMAT_byte_swap + offset)) &= (~(M_DLRX_CE5DES_FORMAT_byte_swap));    \
+		(*(base + O_DLRX_CE5DES_FORMAT_byte_swap + offset)) |= ((val << B_DLRX_CE5DES_FORMAT_byte_swap) & M_DLRX_CE5DES_FORMAT_byte_swap);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_byte_swap_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CE5DES_FORMAT_byte_swap));    \
+		(dword) |= ((val << B_DLRX_CE5DES_FORMAT_byte_swap) & M_DLRX_CE5DES_FORMAT_byte_swap);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_byte_swap_clear_indirect(base, offset)	((*(base + O_DLRX_CE5DES_FORMAT_byte_swap + offset)) &= (~(M_DLRX_CE5DES_FORMAT_byte_swap)))
+
+#define DLRX_CE5DES_FORMAT_byte_swap_clear_direct(dword)	((dword) &= (~(M_DLRX_CE5DES_FORMAT_byte_swap)))
+
+#define O_DLRX_CE5DES_FORMAT_meta_data 1
+#define B_DLRX_CE5DES_FORMAT_meta_data 18
+#define W_DLRX_CE5DES_FORMAT_meta_data 14
+#define M_DLRX_CE5DES_FORMAT_meta_data 0xfffc0000
+
+#define DLRX_CE5DES_FORMAT_meta_data_get_indirect(base, offset)	((((*(base + O_DLRX_CE5DES_FORMAT_meta_data + offset)) & M_DLRX_CE5DES_FORMAT_meta_data) >> B_DLRX_CE5DES_FORMAT_meta_data))
+
+#define DLRX_CE5DES_FORMAT_meta_data_get_direct(dword)	((((dword) & M_DLRX_CE5DES_FORMAT_meta_data) >> B_DLRX_CE5DES_FORMAT_meta_data))
+
+#define DLRX_CE5DES_FORMAT_meta_data_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CE5DES_FORMAT_meta_data + offset)) &= (~(M_DLRX_CE5DES_FORMAT_meta_data));    \
+		(*(base + O_DLRX_CE5DES_FORMAT_meta_data + offset)) |= ((val << B_DLRX_CE5DES_FORMAT_meta_data) & M_DLRX_CE5DES_FORMAT_meta_data);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_meta_data_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CE5DES_FORMAT_meta_data));    \
+		(dword) |= ((val << B_DLRX_CE5DES_FORMAT_meta_data) & M_DLRX_CE5DES_FORMAT_meta_data);    \
+	} while (0)
+
+#define DLRX_CE5DES_FORMAT_meta_data_clear_indirect(base, offset)	((*(base + O_DLRX_CE5DES_FORMAT_meta_data + offset)) &= (~(M_DLRX_CE5DES_FORMAT_meta_data)))
+
+#define DLRX_CE5DES_FORMAT_meta_data_clear_direct(dword)	((dword) &= (~(M_DLRX_CE5DES_FORMAT_meta_data)))
+
+#define O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 0
+#define B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 0
+#define W_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 32
+#define M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 0xffffffff
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 + offset)) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5));    \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 + offset)) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5 + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5)))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_badr_cpu_ce5)))
+
+#define O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 1
+#define B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 0
+#define W_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 32
+#define M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 0xffffffff
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 + offset)) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5));    \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 + offset)) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5) & M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5 + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5)))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cfg_num_cpu_ce5)))
+
+#define O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index 2
+#define B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index 0
+#define W_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index 32
+#define M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index + offset)) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index)))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_read_index)))
+
+#define O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index 3
+#define B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index 0
+#define W_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index 32
+#define M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index 0xffffffff
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index + offset)) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index));    \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index + offset)) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index)))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_write_index)))
+
+#define O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done 4
+#define B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done 0
+#define W_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done 32
+#define M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done 0xffffffff
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done + offset)) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done) >> B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done));    \
+		(*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done + offset)) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done) & M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done + offset)) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done)))
+
+#define DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_CPU_CE5DES_cpu_ce5_msg_done)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring 0
+#define B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_badr_rxpb_ptr_ring)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring 1
+#define B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_cfg_num_rxpb_ptr_ring)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index 2
+#define B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_write_index)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index 3
+#define B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index) >> B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index) & M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_RING_rxpb_ptr_read_index)))
+
+#define O_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes 0
+#define B_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes 0
+#define W_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes 32
+#define M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes + offset)) & M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes) >> B_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes) >> B_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes) & M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes) & M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes)))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_size_rxpktdes)))
+
+#define O_DLRX_CFG_CTXT_RXPB_cfg_offset_atten 1
+#define B_DLRX_CFG_CTXT_RXPB_cfg_offset_atten 0
+#define W_DLRX_CFG_CTXT_RXPB_cfg_offset_atten 32
+#define M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_cfg_offset_atten + offset)) & M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten) >> B_DLRX_CFG_CTXT_RXPB_cfg_offset_atten))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten) >> B_DLRX_CFG_CTXT_RXPB_cfg_offset_atten))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_cfg_offset_atten + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_cfg_offset_atten + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_cfg_offset_atten) & M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_cfg_offset_atten) & M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_cfg_offset_atten + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten)))
+
+#define DLRX_CFG_CTXT_RXPB_cfg_offset_atten_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_cfg_offset_atten)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist 0
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_badr_ro_linklist)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist 1
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cfg_num_ro_linklist)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist 2
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist) >> B_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist) & M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_free_num_ro_linklist)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr 3
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_ptr)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index 4
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_cur_ro_des_index)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index 5
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_prev_ro_des_index)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index 6
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_head_index)))
+
+#define O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index 7
+#define B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index 0
+#define W_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index 32
+#define M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index + offset)) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index) >> B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index) & M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index + offset)) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index)))
+
+#define DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_LINKLIST_ro_des_free_tail_index)))
+
+#define O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist 0
+#define B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist 0
+#define W_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist 32
+#define M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist + offset)) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist) >> B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist) >> B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist)))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_badr_ro_mainlist)))
+
+#define O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist 1
+#define B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist 0
+#define W_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist 32
+#define M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist + offset)) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist) >> B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist) >> B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist) & M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist)))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_cfg_num_ro_mainlist)))
+
+#define O_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr 2
+#define B_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr 0
+#define W_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr 32
+#define M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr 0xffffffff
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr + offset)) & M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr) >> B_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr) >> B_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr));    \
+		(*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr + offset)) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr) & M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr) & M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr + offset)) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr)))
+
+#define DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RO_MAINLIST_ro_mainlist_ptr)))
+
+#define O_DLRX_CTXT_MSG_mpdu_cnt 0
+#define B_DLRX_CTXT_MSG_mpdu_cnt 0
+#define W_DLRX_CTXT_MSG_mpdu_cnt 32
+#define M_DLRX_CTXT_MSG_mpdu_cnt 0xffffffff
+
+#define DLRX_CTXT_MSG_mpdu_cnt_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_mpdu_cnt + offset)) & M_DLRX_CTXT_MSG_mpdu_cnt) >> B_DLRX_CTXT_MSG_mpdu_cnt))
+
+#define DLRX_CTXT_MSG_mpdu_cnt_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_mpdu_cnt) >> B_DLRX_CTXT_MSG_mpdu_cnt))
+
+#define DLRX_CTXT_MSG_mpdu_cnt_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_cnt + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_cnt));    \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_cnt + offset)) |= ((val << B_DLRX_CTXT_MSG_mpdu_cnt) & M_DLRX_CTXT_MSG_mpdu_cnt);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_cnt_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_mpdu_cnt));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_mpdu_cnt) & M_DLRX_CTXT_MSG_mpdu_cnt);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_cnt_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_mpdu_cnt + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_cnt)))
+
+#define DLRX_CTXT_MSG_mpdu_cnt_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_mpdu_cnt)))
+
+#define O_DLRX_CTXT_MSG_mpdu_status 1
+#define B_DLRX_CTXT_MSG_mpdu_status 0
+#define W_DLRX_CTXT_MSG_mpdu_status 32
+#define M_DLRX_CTXT_MSG_mpdu_status 0xffffffff
+
+#define DLRX_CTXT_MSG_mpdu_status_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_mpdu_status + offset)) & M_DLRX_CTXT_MSG_mpdu_status) >> B_DLRX_CTXT_MSG_mpdu_status))
+
+#define DLRX_CTXT_MSG_mpdu_status_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_mpdu_status) >> B_DLRX_CTXT_MSG_mpdu_status))
+
+#define DLRX_CTXT_MSG_mpdu_status_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_status + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_status));    \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_status + offset)) |= ((val << B_DLRX_CTXT_MSG_mpdu_status) & M_DLRX_CTXT_MSG_mpdu_status);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_status_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_mpdu_status));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_mpdu_status) & M_DLRX_CTXT_MSG_mpdu_status);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_status_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_mpdu_status + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_status)))
+
+#define DLRX_CTXT_MSG_mpdu_status_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_mpdu_status)))
+
+#define O_DLRX_CTXT_MSG_mpdu_range_index 2
+#define B_DLRX_CTXT_MSG_mpdu_range_index 0
+#define W_DLRX_CTXT_MSG_mpdu_range_index 32
+#define M_DLRX_CTXT_MSG_mpdu_range_index 0xffffffff
+
+#define DLRX_CTXT_MSG_mpdu_range_index_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_mpdu_range_index + offset)) & M_DLRX_CTXT_MSG_mpdu_range_index) >> B_DLRX_CTXT_MSG_mpdu_range_index))
+
+#define DLRX_CTXT_MSG_mpdu_range_index_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_mpdu_range_index) >> B_DLRX_CTXT_MSG_mpdu_range_index))
+
+#define DLRX_CTXT_MSG_mpdu_range_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_range_index + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_range_index));    \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_range_index + offset)) |= ((val << B_DLRX_CTXT_MSG_mpdu_range_index) & M_DLRX_CTXT_MSG_mpdu_range_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_range_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_mpdu_range_index));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_mpdu_range_index) & M_DLRX_CTXT_MSG_mpdu_range_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_range_index_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_mpdu_range_index + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_range_index)))
+
+#define DLRX_CTXT_MSG_mpdu_range_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_mpdu_range_index)))
+
+#define O_DLRX_CTXT_MSG_mpdu_index 3
+#define B_DLRX_CTXT_MSG_mpdu_index 0
+#define W_DLRX_CTXT_MSG_mpdu_index 32
+#define M_DLRX_CTXT_MSG_mpdu_index 0xffffffff
+
+#define DLRX_CTXT_MSG_mpdu_index_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_mpdu_index + offset)) & M_DLRX_CTXT_MSG_mpdu_index) >> B_DLRX_CTXT_MSG_mpdu_index))
+
+#define DLRX_CTXT_MSG_mpdu_index_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_mpdu_index) >> B_DLRX_CTXT_MSG_mpdu_index))
+
+#define DLRX_CTXT_MSG_mpdu_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_index));    \
+		(*(base + O_DLRX_CTXT_MSG_mpdu_index + offset)) |= ((val << B_DLRX_CTXT_MSG_mpdu_index) & M_DLRX_CTXT_MSG_mpdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_mpdu_index));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_mpdu_index) & M_DLRX_CTXT_MSG_mpdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_mpdu_index_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_mpdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_mpdu_index)))
+
+#define DLRX_CTXT_MSG_mpdu_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_mpdu_index)))
+
+#define O_DLRX_CTXT_MSG_msdu_mpdu_index 4
+#define B_DLRX_CTXT_MSG_msdu_mpdu_index 0
+#define W_DLRX_CTXT_MSG_msdu_mpdu_index 32
+#define M_DLRX_CTXT_MSG_msdu_mpdu_index 0xffffffff
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_msdu_mpdu_index + offset)) & M_DLRX_CTXT_MSG_msdu_mpdu_index) >> B_DLRX_CTXT_MSG_msdu_mpdu_index))
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_msdu_mpdu_index) >> B_DLRX_CTXT_MSG_msdu_mpdu_index))
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_msdu_mpdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_msdu_mpdu_index));    \
+		(*(base + O_DLRX_CTXT_MSG_msdu_mpdu_index + offset)) |= ((val << B_DLRX_CTXT_MSG_msdu_mpdu_index) & M_DLRX_CTXT_MSG_msdu_mpdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_msdu_mpdu_index));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_msdu_mpdu_index) & M_DLRX_CTXT_MSG_msdu_mpdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_msdu_mpdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_msdu_mpdu_index)))
+
+#define DLRX_CTXT_MSG_msdu_mpdu_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_msdu_mpdu_index)))
+
+#define O_DLRX_CTXT_MSG_msdu_index 5
+#define B_DLRX_CTXT_MSG_msdu_index 0
+#define W_DLRX_CTXT_MSG_msdu_index 32
+#define M_DLRX_CTXT_MSG_msdu_index 0xffffffff
+
+#define DLRX_CTXT_MSG_msdu_index_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_msdu_index + offset)) & M_DLRX_CTXT_MSG_msdu_index) >> B_DLRX_CTXT_MSG_msdu_index))
+
+#define DLRX_CTXT_MSG_msdu_index_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_msdu_index) >> B_DLRX_CTXT_MSG_msdu_index))
+
+#define DLRX_CTXT_MSG_msdu_index_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_msdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_msdu_index));    \
+		(*(base + O_DLRX_CTXT_MSG_msdu_index + offset)) |= ((val << B_DLRX_CTXT_MSG_msdu_index) & M_DLRX_CTXT_MSG_msdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_msdu_index_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_msdu_index));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_msdu_index) & M_DLRX_CTXT_MSG_msdu_index);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_msdu_index_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_msdu_index + offset)) &= (~(M_DLRX_CTXT_MSG_msdu_index)))
+
+#define DLRX_CTXT_MSG_msdu_index_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_msdu_index)))
+
+#define O_DLRX_CTXT_MSG_peer 6
+#define B_DLRX_CTXT_MSG_peer 0
+#define W_DLRX_CTXT_MSG_peer 32
+#define M_DLRX_CTXT_MSG_peer 0xffffffff
+
+#define DLRX_CTXT_MSG_peer_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_peer + offset)) & M_DLRX_CTXT_MSG_peer) >> B_DLRX_CTXT_MSG_peer))
+
+#define DLRX_CTXT_MSG_peer_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_peer) >> B_DLRX_CTXT_MSG_peer))
+
+#define DLRX_CTXT_MSG_peer_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_peer + offset)) &= (~(M_DLRX_CTXT_MSG_peer));    \
+		(*(base + O_DLRX_CTXT_MSG_peer + offset)) |= ((val << B_DLRX_CTXT_MSG_peer) & M_DLRX_CTXT_MSG_peer);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_peer_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_peer));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_peer) & M_DLRX_CTXT_MSG_peer);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_peer_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_peer + offset)) &= (~(M_DLRX_CTXT_MSG_peer)))
+
+#define DLRX_CTXT_MSG_peer_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_peer)))
+
+#define O_DLRX_CTXT_MSG_ext_tid 7
+#define B_DLRX_CTXT_MSG_ext_tid 0
+#define W_DLRX_CTXT_MSG_ext_tid 32
+#define M_DLRX_CTXT_MSG_ext_tid 0xffffffff
+
+#define DLRX_CTXT_MSG_ext_tid_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_ext_tid + offset)) & M_DLRX_CTXT_MSG_ext_tid) >> B_DLRX_CTXT_MSG_ext_tid))
+
+#define DLRX_CTXT_MSG_ext_tid_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_ext_tid) >> B_DLRX_CTXT_MSG_ext_tid))
+
+#define DLRX_CTXT_MSG_ext_tid_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_ext_tid + offset)) &= (~(M_DLRX_CTXT_MSG_ext_tid));    \
+		(*(base + O_DLRX_CTXT_MSG_ext_tid + offset)) |= ((val << B_DLRX_CTXT_MSG_ext_tid) & M_DLRX_CTXT_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_tid_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_ext_tid));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_ext_tid) & M_DLRX_CTXT_MSG_ext_tid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_tid_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_ext_tid + offset)) &= (~(M_DLRX_CTXT_MSG_ext_tid)))
+
+#define DLRX_CTXT_MSG_ext_tid_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_ext_tid)))
+
+#define O_DLRX_CTXT_MSG_seqid 8
+#define B_DLRX_CTXT_MSG_seqid 0
+#define W_DLRX_CTXT_MSG_seqid 32
+#define M_DLRX_CTXT_MSG_seqid 0xffffffff
+
+#define DLRX_CTXT_MSG_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_seqid + offset)) & M_DLRX_CTXT_MSG_seqid) >> B_DLRX_CTXT_MSG_seqid))
+
+#define DLRX_CTXT_MSG_seqid_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_seqid) >> B_DLRX_CTXT_MSG_seqid))
+
+#define DLRX_CTXT_MSG_seqid_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_seqid));    \
+		(*(base + O_DLRX_CTXT_MSG_seqid + offset)) |= ((val << B_DLRX_CTXT_MSG_seqid) & M_DLRX_CTXT_MSG_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_seqid_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_seqid));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_seqid) & M_DLRX_CTXT_MSG_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_seqid)))
+
+#define DLRX_CTXT_MSG_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_seqid)))
+
+#define O_DLRX_CTXT_MSG_total_seqid 9
+#define B_DLRX_CTXT_MSG_total_seqid 0
+#define W_DLRX_CTXT_MSG_total_seqid 32
+#define M_DLRX_CTXT_MSG_total_seqid 0xffffffff
+
+#define DLRX_CTXT_MSG_total_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_total_seqid + offset)) & M_DLRX_CTXT_MSG_total_seqid) >> B_DLRX_CTXT_MSG_total_seqid))
+
+#define DLRX_CTXT_MSG_total_seqid_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_total_seqid) >> B_DLRX_CTXT_MSG_total_seqid))
+
+#define DLRX_CTXT_MSG_total_seqid_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_total_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_total_seqid));    \
+		(*(base + O_DLRX_CTXT_MSG_total_seqid + offset)) |= ((val << B_DLRX_CTXT_MSG_total_seqid) & M_DLRX_CTXT_MSG_total_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_total_seqid_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_total_seqid));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_total_seqid) & M_DLRX_CTXT_MSG_total_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_total_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_total_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_total_seqid)))
+
+#define DLRX_CTXT_MSG_total_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_total_seqid)))
+
+#define O_DLRX_CTXT_MSG_start_seqid 10
+#define B_DLRX_CTXT_MSG_start_seqid 0
+#define W_DLRX_CTXT_MSG_start_seqid 32
+#define M_DLRX_CTXT_MSG_start_seqid 0xffffffff
+
+#define DLRX_CTXT_MSG_start_seqid_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_start_seqid + offset)) & M_DLRX_CTXT_MSG_start_seqid) >> B_DLRX_CTXT_MSG_start_seqid))
+
+#define DLRX_CTXT_MSG_start_seqid_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_start_seqid) >> B_DLRX_CTXT_MSG_start_seqid))
+
+#define DLRX_CTXT_MSG_start_seqid_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_start_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_start_seqid));    \
+		(*(base + O_DLRX_CTXT_MSG_start_seqid + offset)) |= ((val << B_DLRX_CTXT_MSG_start_seqid) & M_DLRX_CTXT_MSG_start_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_start_seqid_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_start_seqid));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_start_seqid) & M_DLRX_CTXT_MSG_start_seqid);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_start_seqid_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_start_seqid + offset)) &= (~(M_DLRX_CTXT_MSG_start_seqid)))
+
+#define DLRX_CTXT_MSG_start_seqid_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_start_seqid)))
+
+#define O_DLRX_CTXT_MSG_vap 11
+#define B_DLRX_CTXT_MSG_vap 0
+#define W_DLRX_CTXT_MSG_vap 32
+#define M_DLRX_CTXT_MSG_vap 0xffffffff
+
+#define DLRX_CTXT_MSG_vap_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_vap + offset)) & M_DLRX_CTXT_MSG_vap) >> B_DLRX_CTXT_MSG_vap))
+
+#define DLRX_CTXT_MSG_vap_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_vap) >> B_DLRX_CTXT_MSG_vap))
+
+#define DLRX_CTXT_MSG_vap_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_vap + offset)) &= (~(M_DLRX_CTXT_MSG_vap));    \
+		(*(base + O_DLRX_CTXT_MSG_vap + offset)) |= ((val << B_DLRX_CTXT_MSG_vap) & M_DLRX_CTXT_MSG_vap);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_vap_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_vap));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_vap) & M_DLRX_CTXT_MSG_vap);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_vap_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_vap + offset)) &= (~(M_DLRX_CTXT_MSG_vap)))
+
+#define DLRX_CTXT_MSG_vap_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_vap)))
+
+#define O_DLRX_CTXT_MSG_sec_type 12
+#define B_DLRX_CTXT_MSG_sec_type 0
+#define W_DLRX_CTXT_MSG_sec_type 32
+#define M_DLRX_CTXT_MSG_sec_type 0xffffffff
+
+#define DLRX_CTXT_MSG_sec_type_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_sec_type + offset)) & M_DLRX_CTXT_MSG_sec_type) >> B_DLRX_CTXT_MSG_sec_type))
+
+#define DLRX_CTXT_MSG_sec_type_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_sec_type) >> B_DLRX_CTXT_MSG_sec_type))
+
+#define DLRX_CTXT_MSG_sec_type_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_sec_type + offset)) &= (~(M_DLRX_CTXT_MSG_sec_type));    \
+		(*(base + O_DLRX_CTXT_MSG_sec_type + offset)) |= ((val << B_DLRX_CTXT_MSG_sec_type) & M_DLRX_CTXT_MSG_sec_type);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_sec_type_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_sec_type));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_sec_type) & M_DLRX_CTXT_MSG_sec_type);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_sec_type_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_sec_type + offset)) &= (~(M_DLRX_CTXT_MSG_sec_type)))
+
+#define DLRX_CTXT_MSG_sec_type_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_sec_type)))
+
+#define O_DLRX_CTXT_MSG_pn_pass 13
+#define B_DLRX_CTXT_MSG_pn_pass 0
+#define W_DLRX_CTXT_MSG_pn_pass 32
+#define M_DLRX_CTXT_MSG_pn_pass 0xffffffff
+
+#define DLRX_CTXT_MSG_pn_pass_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_pn_pass + offset)) & M_DLRX_CTXT_MSG_pn_pass) >> B_DLRX_CTXT_MSG_pn_pass))
+
+#define DLRX_CTXT_MSG_pn_pass_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_pn_pass) >> B_DLRX_CTXT_MSG_pn_pass))
+
+#define DLRX_CTXT_MSG_pn_pass_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_pn_pass + offset)) &= (~(M_DLRX_CTXT_MSG_pn_pass));    \
+		(*(base + O_DLRX_CTXT_MSG_pn_pass + offset)) |= ((val << B_DLRX_CTXT_MSG_pn_pass) & M_DLRX_CTXT_MSG_pn_pass);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_pn_pass_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_pn_pass));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_pn_pass) & M_DLRX_CTXT_MSG_pn_pass);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_pn_pass_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_pn_pass + offset)) &= (~(M_DLRX_CTXT_MSG_pn_pass)))
+
+#define DLRX_CTXT_MSG_pn_pass_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_pn_pass)))
+
+#define O_DLRX_CTXT_MSG_total_msdu 14
+#define B_DLRX_CTXT_MSG_total_msdu 0
+#define W_DLRX_CTXT_MSG_total_msdu 32
+#define M_DLRX_CTXT_MSG_total_msdu 0xffffffff
+
+#define DLRX_CTXT_MSG_total_msdu_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_total_msdu + offset)) & M_DLRX_CTXT_MSG_total_msdu) >> B_DLRX_CTXT_MSG_total_msdu))
+
+#define DLRX_CTXT_MSG_total_msdu_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_total_msdu) >> B_DLRX_CTXT_MSG_total_msdu))
+
+#define DLRX_CTXT_MSG_total_msdu_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_total_msdu + offset)) &= (~(M_DLRX_CTXT_MSG_total_msdu));    \
+		(*(base + O_DLRX_CTXT_MSG_total_msdu + offset)) |= ((val << B_DLRX_CTXT_MSG_total_msdu) & M_DLRX_CTXT_MSG_total_msdu);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_total_msdu_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_total_msdu));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_total_msdu) & M_DLRX_CTXT_MSG_total_msdu);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_total_msdu_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_total_msdu + offset)) &= (~(M_DLRX_CTXT_MSG_total_msdu)))
+
+#define DLRX_CTXT_MSG_total_msdu_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_total_msdu)))
+
+#define O_DLRX_CTXT_MSG_check_rv_pending 15
+#define B_DLRX_CTXT_MSG_check_rv_pending 0
+#define W_DLRX_CTXT_MSG_check_rv_pending 32
+#define M_DLRX_CTXT_MSG_check_rv_pending 0xffffffff
+
+#define DLRX_CTXT_MSG_check_rv_pending_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_check_rv_pending + offset)) & M_DLRX_CTXT_MSG_check_rv_pending) >> B_DLRX_CTXT_MSG_check_rv_pending))
+
+#define DLRX_CTXT_MSG_check_rv_pending_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_check_rv_pending) >> B_DLRX_CTXT_MSG_check_rv_pending))
+
+#define DLRX_CTXT_MSG_check_rv_pending_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_check_rv_pending + offset)) &= (~(M_DLRX_CTXT_MSG_check_rv_pending));    \
+		(*(base + O_DLRX_CTXT_MSG_check_rv_pending + offset)) |= ((val << B_DLRX_CTXT_MSG_check_rv_pending) & M_DLRX_CTXT_MSG_check_rv_pending);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_check_rv_pending_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_check_rv_pending));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_check_rv_pending) & M_DLRX_CTXT_MSG_check_rv_pending);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_check_rv_pending_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_check_rv_pending + offset)) &= (~(M_DLRX_CTXT_MSG_check_rv_pending)))
+
+#define DLRX_CTXT_MSG_check_rv_pending_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_check_rv_pending)))
+
+#define O_DLRX_CTXT_MSG_ext_ro_mainlist_ptr 16
+#define B_DLRX_CTXT_MSG_ext_ro_mainlist_ptr 0
+#define W_DLRX_CTXT_MSG_ext_ro_mainlist_ptr 32
+#define M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr 0xffffffff
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_ext_ro_mainlist_ptr + offset)) & M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr) >> B_DLRX_CTXT_MSG_ext_ro_mainlist_ptr))
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr) >> B_DLRX_CTXT_MSG_ext_ro_mainlist_ptr))
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_ext_ro_mainlist_ptr + offset)) &= (~(M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr));    \
+		(*(base + O_DLRX_CTXT_MSG_ext_ro_mainlist_ptr + offset)) |= ((val << B_DLRX_CTXT_MSG_ext_ro_mainlist_ptr) & M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_ext_ro_mainlist_ptr) & M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_ext_ro_mainlist_ptr + offset)) &= (~(M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr)))
+
+#define DLRX_CTXT_MSG_ext_ro_mainlist_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_ext_ro_mainlist_ptr)))
+
+#define O_DLRX_CTXT_MSG_ext_msg_ptr 17
+#define B_DLRX_CTXT_MSG_ext_msg_ptr 0
+#define W_DLRX_CTXT_MSG_ext_msg_ptr 32
+#define M_DLRX_CTXT_MSG_ext_msg_ptr 0xffffffff
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_ext_msg_ptr + offset)) & M_DLRX_CTXT_MSG_ext_msg_ptr) >> B_DLRX_CTXT_MSG_ext_msg_ptr))
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_ext_msg_ptr) >> B_DLRX_CTXT_MSG_ext_msg_ptr))
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_ext_msg_ptr + offset)) &= (~(M_DLRX_CTXT_MSG_ext_msg_ptr));    \
+		(*(base + O_DLRX_CTXT_MSG_ext_msg_ptr + offset)) |= ((val << B_DLRX_CTXT_MSG_ext_msg_ptr) & M_DLRX_CTXT_MSG_ext_msg_ptr);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_ext_msg_ptr));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_ext_msg_ptr) & M_DLRX_CTXT_MSG_ext_msg_ptr);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_ext_msg_ptr + offset)) &= (~(M_DLRX_CTXT_MSG_ext_msg_ptr)))
+
+#define DLRX_CTXT_MSG_ext_msg_ptr_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_ext_msg_ptr)))
+
+#define O_DLRX_CTXT_MSG_peer_vld 18
+#define B_DLRX_CTXT_MSG_peer_vld 0
+#define W_DLRX_CTXT_MSG_peer_vld 32
+#define M_DLRX_CTXT_MSG_peer_vld 0xffffffff
+
+#define DLRX_CTXT_MSG_peer_vld_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_peer_vld + offset)) & M_DLRX_CTXT_MSG_peer_vld) >> B_DLRX_CTXT_MSG_peer_vld))
+
+#define DLRX_CTXT_MSG_peer_vld_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_peer_vld) >> B_DLRX_CTXT_MSG_peer_vld))
+
+#define DLRX_CTXT_MSG_peer_vld_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_peer_vld + offset)) &= (~(M_DLRX_CTXT_MSG_peer_vld));    \
+		(*(base + O_DLRX_CTXT_MSG_peer_vld + offset)) |= ((val << B_DLRX_CTXT_MSG_peer_vld) & M_DLRX_CTXT_MSG_peer_vld);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_peer_vld_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_peer_vld));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_peer_vld) & M_DLRX_CTXT_MSG_peer_vld);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_peer_vld_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_peer_vld + offset)) &= (~(M_DLRX_CTXT_MSG_peer_vld)))
+
+#define DLRX_CTXT_MSG_peer_vld_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_peer_vld)))
+
+#define O_DLRX_CTXT_MSG_acc_dis 19
+#define B_DLRX_CTXT_MSG_acc_dis 0
+#define W_DLRX_CTXT_MSG_acc_dis 32
+#define M_DLRX_CTXT_MSG_acc_dis 0xffffffff
+
+#define DLRX_CTXT_MSG_acc_dis_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_acc_dis + offset)) & M_DLRX_CTXT_MSG_acc_dis) >> B_DLRX_CTXT_MSG_acc_dis))
+
+#define DLRX_CTXT_MSG_acc_dis_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_acc_dis) >> B_DLRX_CTXT_MSG_acc_dis))
+
+#define DLRX_CTXT_MSG_acc_dis_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_acc_dis + offset)) &= (~(M_DLRX_CTXT_MSG_acc_dis));    \
+		(*(base + O_DLRX_CTXT_MSG_acc_dis + offset)) |= ((val << B_DLRX_CTXT_MSG_acc_dis) & M_DLRX_CTXT_MSG_acc_dis);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_acc_dis_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_acc_dis));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_acc_dis) & M_DLRX_CTXT_MSG_acc_dis);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_acc_dis_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_acc_dis + offset)) &= (~(M_DLRX_CTXT_MSG_acc_dis)))
+
+#define DLRX_CTXT_MSG_acc_dis_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_acc_dis)))
+
+#define O_DLRX_CTXT_MSG_discard 20
+#define B_DLRX_CTXT_MSG_discard 0
+#define W_DLRX_CTXT_MSG_discard 1
+#define M_DLRX_CTXT_MSG_discard 0x00000001
+
+#define DLRX_CTXT_MSG_discard_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_discard + offset)) & M_DLRX_CTXT_MSG_discard) >> B_DLRX_CTXT_MSG_discard))
+
+#define DLRX_CTXT_MSG_discard_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_discard) >> B_DLRX_CTXT_MSG_discard))
+
+#define DLRX_CTXT_MSG_discard_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_discard + offset)) &= (~(M_DLRX_CTXT_MSG_discard));    \
+		(*(base + O_DLRX_CTXT_MSG_discard + offset)) |= ((val << B_DLRX_CTXT_MSG_discard) & M_DLRX_CTXT_MSG_discard);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_discard_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_discard));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_discard) & M_DLRX_CTXT_MSG_discard);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_discard_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_discard + offset)) &= (~(M_DLRX_CTXT_MSG_discard)))
+
+#define DLRX_CTXT_MSG_discard_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_discard)))
+
+#define O_DLRX_CTXT_MSG_forward 20
+#define B_DLRX_CTXT_MSG_forward 1
+#define W_DLRX_CTXT_MSG_forward 1
+#define M_DLRX_CTXT_MSG_forward 0x00000002
+
+#define DLRX_CTXT_MSG_forward_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_forward + offset)) & M_DLRX_CTXT_MSG_forward) >> B_DLRX_CTXT_MSG_forward))
+
+#define DLRX_CTXT_MSG_forward_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_forward) >> B_DLRX_CTXT_MSG_forward))
+
+#define DLRX_CTXT_MSG_forward_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_forward + offset)) &= (~(M_DLRX_CTXT_MSG_forward));    \
+		(*(base + O_DLRX_CTXT_MSG_forward + offset)) |= ((val << B_DLRX_CTXT_MSG_forward) & M_DLRX_CTXT_MSG_forward);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_forward_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_forward));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_forward) & M_DLRX_CTXT_MSG_forward);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_forward_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_forward + offset)) &= (~(M_DLRX_CTXT_MSG_forward)))
+
+#define DLRX_CTXT_MSG_forward_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_forward)))
+
+#define O_DLRX_CTXT_MSG_inspect 20
+#define B_DLRX_CTXT_MSG_inspect 5
+#define W_DLRX_CTXT_MSG_inspect 1
+#define M_DLRX_CTXT_MSG_inspect 0x00000020
+
+#define DLRX_CTXT_MSG_inspect_get_indirect(base, offset)	((((*(base + O_DLRX_CTXT_MSG_inspect + offset)) & M_DLRX_CTXT_MSG_inspect) >> B_DLRX_CTXT_MSG_inspect))
+
+#define DLRX_CTXT_MSG_inspect_get_direct(dword)	((((dword) & M_DLRX_CTXT_MSG_inspect) >> B_DLRX_CTXT_MSG_inspect))
+
+#define DLRX_CTXT_MSG_inspect_set_indirect(base, offset, val) \
+	do {                                                              \
+		(*(base + O_DLRX_CTXT_MSG_inspect + offset)) &= (~(M_DLRX_CTXT_MSG_inspect));    \
+		(*(base + O_DLRX_CTXT_MSG_inspect + offset)) |= ((val << B_DLRX_CTXT_MSG_inspect) & M_DLRX_CTXT_MSG_inspect);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_inspect_set_direct(dword, val) \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CTXT_MSG_inspect));    \
+		(dword) |= ((val << B_DLRX_CTXT_MSG_inspect) & M_DLRX_CTXT_MSG_inspect);    \
+	} while (0)
+
+#define DLRX_CTXT_MSG_inspect_clear_indirect(base, offset)	((*(base + O_DLRX_CTXT_MSG_inspect + offset)) &= (~(M_DLRX_CTXT_MSG_inspect)))
+
+#define DLRX_CTXT_MSG_inspect_clear_direct(dword)	((dword) &= (~(M_DLRX_CTXT_MSG_inspect)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf 0
+#define B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf) >> B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf) >> B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_badr_rel_msgbuf)))
+
+#define O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf 1
+#define B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf 0
+#define W_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf 32
+#define M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf 0xffffffff
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf + offset)) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf) >> B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf) >> B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf));    \
+		(*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf + offset)) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf) & M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf + offset)) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf)))
+
+#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_cfg_num_rel_msgbuf)))
+
+#define O_DLRX_CFG_GLOBAL_dltx_enable 0
+#define B_DLRX_CFG_GLOBAL_dltx_enable 0
+#define W_DLRX_CFG_GLOBAL_dltx_enable 32
+#define M_DLRX_CFG_GLOBAL_dltx_enable 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dltx_enable_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dltx_enable + offset)) & M_DLRX_CFG_GLOBAL_dltx_enable) >> B_DLRX_CFG_GLOBAL_dltx_enable))
+
+#define DLRX_CFG_GLOBAL_dltx_enable_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dltx_enable) >> B_DLRX_CFG_GLOBAL_dltx_enable))
+
+#define DLRX_CFG_GLOBAL_dltx_enable_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dltx_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_dltx_enable));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dltx_enable + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dltx_enable) & M_DLRX_CFG_GLOBAL_dltx_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dltx_enable_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dltx_enable));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dltx_enable) & M_DLRX_CFG_GLOBAL_dltx_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dltx_enable_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dltx_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_dltx_enable)))
+
+#define DLRX_CFG_GLOBAL_dltx_enable_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dltx_enable)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_enable 1
+#define B_DLRX_CFG_GLOBAL_dlrx_enable 0
+#define W_DLRX_CFG_GLOBAL_dlrx_enable 32
+#define M_DLRX_CFG_GLOBAL_dlrx_enable 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_enable + offset)) & M_DLRX_CFG_GLOBAL_dlrx_enable) >> B_DLRX_CFG_GLOBAL_dlrx_enable))
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_enable) >> B_DLRX_CFG_GLOBAL_dlrx_enable))
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_enable));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_enable + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_enable) & M_DLRX_CFG_GLOBAL_dlrx_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_enable));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_enable) & M_DLRX_CFG_GLOBAL_dlrx_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_enable)))
+
+#define DLRX_CFG_GLOBAL_dlrx_enable_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_enable)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_pcie_base 2
+#define B_DLRX_CFG_GLOBAL_dlrx_pcie_base 0
+#define W_DLRX_CFG_GLOBAL_dlrx_pcie_base 32
+#define M_DLRX_CFG_GLOBAL_dlrx_pcie_base 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_pcie_base + offset)) & M_DLRX_CFG_GLOBAL_dlrx_pcie_base) >> B_DLRX_CFG_GLOBAL_dlrx_pcie_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_pcie_base) >> B_DLRX_CFG_GLOBAL_dlrx_pcie_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_pcie_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_pcie_base));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_pcie_base + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_pcie_base) & M_DLRX_CFG_GLOBAL_dlrx_pcie_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_pcie_base));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_pcie_base) & M_DLRX_CFG_GLOBAL_dlrx_pcie_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_pcie_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_pcie_base)))
+
+#define DLRX_CFG_GLOBAL_dlrx_pcie_base_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_pcie_base)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_ddr_base 3
+#define B_DLRX_CFG_GLOBAL_dlrx_ddr_base 0
+#define W_DLRX_CFG_GLOBAL_dlrx_ddr_base 32
+#define M_DLRX_CFG_GLOBAL_dlrx_ddr_base 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_ddr_base + offset)) & M_DLRX_CFG_GLOBAL_dlrx_ddr_base) >> B_DLRX_CFG_GLOBAL_dlrx_ddr_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_ddr_base) >> B_DLRX_CFG_GLOBAL_dlrx_ddr_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_ddr_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_ddr_base));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_ddr_base + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_ddr_base) & M_DLRX_CFG_GLOBAL_dlrx_ddr_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_ddr_base));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_ddr_base) & M_DLRX_CFG_GLOBAL_dlrx_ddr_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_ddr_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_ddr_base)))
+
+#define DLRX_CFG_GLOBAL_dlrx_ddr_base_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_ddr_base)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base 4
+#define B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base 0
+#define W_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base 32
+#define M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base + offset)) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base)))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_base)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size 5
+#define B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size 0
+#define W_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size 32
+#define M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size + offset)) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size) & M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size)))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_ctxt_max_size)))
+
+#define O_DLRX_CFG_GLOBAL_fw_ver_id 6
+#define B_DLRX_CFG_GLOBAL_fw_ver_id 0
+#define W_DLRX_CFG_GLOBAL_fw_ver_id 32
+#define M_DLRX_CFG_GLOBAL_fw_ver_id 0xffffffff
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_fw_ver_id + offset)) & M_DLRX_CFG_GLOBAL_fw_ver_id) >> B_DLRX_CFG_GLOBAL_fw_ver_id))
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_fw_ver_id) >> B_DLRX_CFG_GLOBAL_fw_ver_id))
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_fw_ver_id + offset)) &= (~(M_DLRX_CFG_GLOBAL_fw_ver_id));    \
+		(*(base + O_DLRX_CFG_GLOBAL_fw_ver_id + offset)) |= ((val << B_DLRX_CFG_GLOBAL_fw_ver_id) & M_DLRX_CFG_GLOBAL_fw_ver_id);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_fw_ver_id));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_fw_ver_id) & M_DLRX_CFG_GLOBAL_fw_ver_id);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_fw_ver_id + offset)) &= (~(M_DLRX_CFG_GLOBAL_fw_ver_id)))
+
+#define DLRX_CFG_GLOBAL_fw_ver_id_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_fw_ver_id)))
+
+#define O_DLRX_CFG_GLOBAL_fw_feature 7
+#define B_DLRX_CFG_GLOBAL_fw_feature 0
+#define W_DLRX_CFG_GLOBAL_fw_feature 32
+#define M_DLRX_CFG_GLOBAL_fw_feature 0xffffffff
+
+#define DLRX_CFG_GLOBAL_fw_feature_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_fw_feature + offset)) & M_DLRX_CFG_GLOBAL_fw_feature) >> B_DLRX_CFG_GLOBAL_fw_feature))
+
+#define DLRX_CFG_GLOBAL_fw_feature_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_fw_feature) >> B_DLRX_CFG_GLOBAL_fw_feature))
+
+#define DLRX_CFG_GLOBAL_fw_feature_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_fw_feature + offset)) &= (~(M_DLRX_CFG_GLOBAL_fw_feature));    \
+		(*(base + O_DLRX_CFG_GLOBAL_fw_feature + offset)) |= ((val << B_DLRX_CFG_GLOBAL_fw_feature) & M_DLRX_CFG_GLOBAL_fw_feature);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_fw_feature_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_fw_feature));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_fw_feature) & M_DLRX_CFG_GLOBAL_fw_feature);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_fw_feature_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_fw_feature + offset)) &= (~(M_DLRX_CFG_GLOBAL_fw_feature)))
+
+#define DLRX_CFG_GLOBAL_fw_feature_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_fw_feature)))
+
+#define O_DLRX_CFG_GLOBAL_debug_print_enable 8
+#define B_DLRX_CFG_GLOBAL_debug_print_enable 0
+#define W_DLRX_CFG_GLOBAL_debug_print_enable 32
+#define M_DLRX_CFG_GLOBAL_debug_print_enable 0xffffffff
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_debug_print_enable + offset)) & M_DLRX_CFG_GLOBAL_debug_print_enable) >> B_DLRX_CFG_GLOBAL_debug_print_enable))
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_debug_print_enable) >> B_DLRX_CFG_GLOBAL_debug_print_enable))
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_debug_print_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_debug_print_enable));    \
+		(*(base + O_DLRX_CFG_GLOBAL_debug_print_enable + offset)) |= ((val << B_DLRX_CFG_GLOBAL_debug_print_enable) & M_DLRX_CFG_GLOBAL_debug_print_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_debug_print_enable));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_debug_print_enable) & M_DLRX_CFG_GLOBAL_debug_print_enable);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_debug_print_enable + offset)) &= (~(M_DLRX_CFG_GLOBAL_debug_print_enable)))
+
+#define DLRX_CFG_GLOBAL_debug_print_enable_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_debug_print_enable)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_cfg_unload 9
+#define B_DLRX_CFG_GLOBAL_dlrx_cfg_unload 0
+#define W_DLRX_CFG_GLOBAL_dlrx_cfg_unload 32
+#define M_DLRX_CFG_GLOBAL_dlrx_cfg_unload 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_unload + offset)) & M_DLRX_CFG_GLOBAL_dlrx_cfg_unload) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_unload))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_cfg_unload) >> B_DLRX_CFG_GLOBAL_dlrx_cfg_unload))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_unload + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_unload));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_unload + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_unload) & M_DLRX_CFG_GLOBAL_dlrx_cfg_unload);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_unload));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_cfg_unload) & M_DLRX_CFG_GLOBAL_dlrx_cfg_unload);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_cfg_unload + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_unload)))
+
+#define DLRX_CFG_GLOBAL_dlrx_cfg_unload_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_cfg_unload)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_qca_hw 10
+#define B_DLRX_CFG_GLOBAL_dlrx_qca_hw 0
+#define W_DLRX_CFG_GLOBAL_dlrx_qca_hw 32
+#define M_DLRX_CFG_GLOBAL_dlrx_qca_hw 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw + offset)) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw) >> B_DLRX_CFG_GLOBAL_dlrx_qca_hw))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw) >> B_DLRX_CFG_GLOBAL_dlrx_qca_hw))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_qca_hw) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_qca_hw) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw)))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout 11
+#define B_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout 0
+#define W_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout 32
+#define M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout + offset)) & M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout) >> B_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout))
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout) >> B_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout))
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout) & M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout) & M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout)))
+
+#define DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_congestion_bit_timeout)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_timout_count_th 12
+#define B_DLRX_CFG_GLOBAL_dlrx_timout_count_th 0
+#define W_DLRX_CFG_GLOBAL_dlrx_timout_count_th 32
+#define M_DLRX_CFG_GLOBAL_dlrx_timout_count_th 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_timout_count_th + offset)) & M_DLRX_CFG_GLOBAL_dlrx_timout_count_th) >> B_DLRX_CFG_GLOBAL_dlrx_timout_count_th))
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_timout_count_th) >> B_DLRX_CFG_GLOBAL_dlrx_timout_count_th))
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_timout_count_th + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_timout_count_th));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_timout_count_th + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_timout_count_th) & M_DLRX_CFG_GLOBAL_dlrx_timout_count_th);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_timout_count_th));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_timout_count_th) & M_DLRX_CFG_GLOBAL_dlrx_timout_count_th);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_timout_count_th + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_timout_count_th)))
+
+#define DLRX_CFG_GLOBAL_dlrx_timout_count_th_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_timout_count_th)))
+
+#define O_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type 13
+#define B_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type 0
+#define W_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type 32
+#define M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type 0xffffffff
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type + offset)) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type) >> B_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_get_direct(dword)	((((dword) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type) >> B_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type));    \
+		(*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type + offset)) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type));    \
+		(dword) |= ((val << B_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type) & M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type);    \
+	} while (0)
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type + offset)) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type)))
+
+#define DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_GLOBAL_dlrx_qca_hw_sub_type)))
+
+#define O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler 0
+#define B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler 0
+#define W_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler 32
+#define M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler 0xffffffff
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler + offset)) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler) >> B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler) >> B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler + offset)) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler));    \
+		(*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler + offset)) |= ((val << B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler)&M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler)&M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler + offset)) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler)))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_handler)))
+
+#define O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count 1
+#define B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count 0
+#define W_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count 32
+#define M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count 0xffffffff
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_get_indirect(base, offset)	((((*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count + offset)) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count) >> B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_get_direct(dword)	((((dword) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count) >> B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_set_indirect(base, offset, val)    \
+	do {                                                              \
+		(*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count + offset)) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count));    \
+		(*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count + offset)) |= ((val << B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_set_direct(dword, val)    \
+	do {                                                               \
+		(dword) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count));    \
+		(dword) |= ((val << B_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count) & M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count);    \
+	} while (0)
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_clear_indirect(base, offset)	((*(base + O_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count + offset)) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count)))
+
+#define DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count_clear_direct(dword)	((dword) &= (~(M_DLRX_CFG_CTXT_PEER_HANDLER_cfg_peer_count)))
+
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_def.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_def.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_def.h
@@ -0,0 +1,504 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_DEF_H__
+#define __DLRX_FW_DEF_H__
+/* In DDR */
+#include <linux/io.h>
+#include <linux/kernel.h>
+
+#define TEST_GRX350 0
+#define OPTIMIZE_PERF 1
+extern unsigned int *ddr_base, *pcie_base, *cfg_ctxt_base;
+extern unsigned int dl_kseg0, dl_kseg1;
+
+#define DLRX_GRX330_BOARD_CFG 0
+
+#if (defined(DLRX_GRX330_BOARD_CFG) && (DLRX_GRX330_BOARD_CFG == 1))
+	/* 1 x 12 dwords */
+	#define DLRX_MSG_MIB_BASE                               \
+			(unsigned int *)(ddr_base)
+
+	/* 1 x 32 dwords */
+	#define DLRX_DATA_MIB_BASE                              \
+			(unsigned int *)(ddr_base + 0x0C)
+
+	/* 132 x 1 dwords i.e 528 x 1 bytes - - Location moved below due
+	to increase in number of peer id's */
+	/*#define DLRX_CFG_PEER_ID_TO_PEER_MAP_BASE(i)            \
+			(unsigned int *)(ddr_base + 0x2C  + i)
+			*/
+
+	/* 128x 1 dwords i.e 528 peers x 4 bytes */
+	#define DLRX_CFG_PEER_TO_VAP_PN_BASE(i)                 \
+			(unsigned int *)(ddr_base + 0xB0 + i)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_PEER_RESET_BASE                        \
+			(unsigned int *)(ddr_base + 0x130)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_INVALID_TID_BASE                       \
+			(unsigned int *)(ddr_base + 0x131)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_MIB_RESET_BASE                         \
+			(unsigned int *)(ddr_base + 0x132)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_VAP2INT_MAP1_BASE                      \
+			(unsigned int *)(ddr_base + 0x133)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_VAP2INT_MAP2_BASE                      \
+			(unsigned int *)(ddr_base + 0x134)
+
+	/* 1x16 dword */
+	#define DLRX_MISC_MIB_BASE                              \
+			(unsigned int *)(ddr_base + 0x140)
+
+	/* 1X4 dword */
+	#define DLRX_SKB_POOL_CTXT                              \
+			(unsigned int *)(ddr_base + 0x150)
+
+	/* total_size for ddr_base: 0x150 dwords */
+
+	/* 32 x 16 dwords i.e 16 x 128 bytes Note: this is in SB,
+		sharing with DLRX TX!!
+		*/
+	#define DLRX_VAP_MIB_BASE(i)                            \
+			(unsigned int *)(ddr_base + 0x200 + ((i)*32))
+
+	/* 32 x 16 dwords */
+	#define DLRX_VAP_MIB_MISC_BASE(i)                       \
+			(unsigned int *)(ddr_base + 0x400 + ((i)*32))
+
+	/* 255 * 2 DWORDS  move to SRAM */
+	/*#define DLRX_DDR_GSWIP_DMA_DESC_BASE                    \
+			(volatile unsigned int *)( ddr_base + 0x500 )
+			*/
+
+	/*255 * 2 DWORDS */
+	#define DLRX_DDR_PROTO_DMA_DESC_BASE                    \
+			(unsigned int *)(ddr_base + 0x700)
+
+	/* 128 * 2 DWORDS */
+	#define DLRX_DDR_RX_PKT_BUF_REL_MSG_BASE                \
+			(unsigned int *)(ddr_base + 0x900)
+
+	/* 4096 * 1 DWORDS */
+	#define DLRX_DDR_RX_PKT_BUF_RING_BASE                   \
+			(unsigned int *)(ddr_base + 0xa00)
+
+	/* 2048 * (64 + 4) DWORDS */
+	#define DLRX_DDR_RO_MAINLIST_BASE                       \
+			(unsigned int *)(ddr_base + 0x1a00)
+
+	/* 4096 * 6 DWORDS */
+	#define DLRX_DDR_RO_LINKLIST_BASE                       \
+			(unsigned int *)(ddr_base + 0x23a00)
+
+	/* 2 * (1 * 8) DWORDS */
+	#define DLRX_DDR_CPU_CE5_DESC_BASE                      \
+			(unsigned int *)(ddr_base + 0x29a00)
+
+	/* 2048 * 2 DWORDS (shift to SRAM) */
+	/*#define DLRX_DDR_CE5DESC_BASE                         \
+			(volatile unsigned int *)(ddr_base + 0x2a000)
+			*/
+
+	/* 264 x 1 dwords i.e 1056 x 1 bytes */
+	#define DLRX_CFG_PEER_ID_TO_PEER_MAP_BASE(i)            \
+			(unsigned int *)(ddr_base + 0x2a000 + i)
+
+	/* 2048 * 512 Bytes (2e000 -*/
+	#define DLRX_DDR_CE5BUF_BASE                            \
+			(unsigned int *)(ddr_base + 0x2e000)
+
+	/* 128*16 Dword */
+	#define DLRX_DDR_SEQ_MASK_BASE                          \
+			(unsigned int *)(ddr_base + 0x6e000)
+
+
+	/*dword? */
+
+	#define DLRX_TARGET_CE5_PEREGRINE                       0x00058800
+	#define DLRX_TARGET_CE5_BEELINER                        0x0004B400
+
+	#define DLRX_TARGET_CE5_READ_INDEX(base)                \
+			(volatile unsigned int *)(pcie_base + ((base+0x48)>>2))
+
+	/* 1 dword? */
+	#define DLRX_TARGET_CE5_WRITE_INDEX(base)               \
+			(volatile unsigned int *)(pcie_base + ((base+0x40)>>2))
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_GSWIP_DMA_BASE                    \
+			(unsigned int *)(cfg_ctxt_base)
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_WLAN_DMA_BASE                     \
+			(unsigned int *)(cfg_ctxt_base + 0x04)
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_PROT_DMA_BASE                     \
+			(unsigned int *)(cfg_ctxt_base + 0x08)
+
+	/* 1 x 12 dwords */
+	#define DLRX_CFG_CTXT_CE5BUF_BASE                       \
+			(unsigned int *)(cfg_ctxt_base + 0x0C)
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_CE5DES_BASE                       \
+			(unsigned int *)(cfg_ctxt_base + 0x18)
+
+	/* 1 x 8 dword */
+	#define DLRX_CFG_CTXT_CPU_CE5DES_BASE                   \
+			(unsigned int *)(cfg_ctxt_base + 0x1C)
+
+	/* 1 x 8 dwords */
+	#define DLRX_CFG_CTXT_RXPB_PTR_RING_BASE                \
+			(unsigned int *)(cfg_ctxt_base + 0x24)
+	/*#define DLRX_CFG_CTXT_RXPB_PTR_RING_BASE               \
+			(unsigned int *)(ddr_base + 0x158)
+			*/
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_RXPB_BASE                         \
+			(unsigned int *)(cfg_ctxt_base + 0x2C)
+
+	/* 1 x 16 dwords */
+	#define DLRX_CFG_CTXT_RO_LINKLIST_BASE                  \
+			(unsigned int *)(cfg_ctxt_base + 0x30)
+
+	/* 1 x 8 dword */
+	#define DLRX_CFG_CTXT_RO_MAINLIST_BASE                  \
+			(unsigned int *)(cfg_ctxt_base + 0x40)
+
+	/* 1 x 48 dwords */
+	#define DLRX_CTXT_MSG_BASE                              \
+			(unsigned int *)(cfg_ctxt_base + 0x48)
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_BASE          \
+			(unsigned int *)(cfg_ctxt_base + 0x78)
+
+	/* 1 x 8 dwords */
+	#define DLRX_CFG_GLOBAL_BASE                            \
+			(unsigned int *)(cfg_ctxt_base + 0x80)
+
+	/* 128 x 2 dwords i.e. 128 peers x 2 dwords */
+	#define DLRX_CFG_CTXT_PEER_HANDLER_BASE(i)              \
+			(unsigned int *)(cfg_ctxt_base + 0x90 + (i) * 2)
+
+	/* 4 x 1 dwords */
+	#define DLRX_CFG_CTXT_PEER_BITMAP_BASE(i)               \
+			(unsigned int *)(cfg_ctxt_base + 0x190 + i)
+
+	/* 255 * 2 DWORDS */
+	#define DLRX_DDR_GSWIP_DMA_DESC_BASE                    \
+			(volatile unsigned int *)(cfg_ctxt_base + 0x200)
+
+	/* 512 * 2 DWORDS (shift from  SRAM) */
+	#define DLRX_DDR_CE5DESC_BASE                           \
+			(volatile unsigned int *)(cfg_ctxt_base + 0x400)
+
+	/* total size for cfg_ctxt_base allocation: 8kbyte */
+#else
+
+	#define RX_CFG_CTXT_BUF_BASE                            cfg_ctxt_base
+	#define RX_MSG_BUF_BASE                                 ddr_base
+
+	/* 1 x 12 dwords */
+	#define DLRX_MSG_MIB_BASE                               \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE)
+
+	/* 1 x 32 dwords */
+	#define DLRX_DATA_MIB_BASE                              \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x0C)
+
+	/* 128x 1 dwords i.e 528 peers x 4 bytes */
+	#define DLRX_CFG_PEER_TO_VAP_PN_BASE(i)                 \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2C + i)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_PEER_RESET_BASE                        \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xB0)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_INVALID_TID_BASE                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xB1)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_MIB_RESET_BASE                         \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xB2)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_VAP2INT_MAP1_BASE                      \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xB3)
+
+	/* 1 x 1 dword */
+	#define DLRX_CFG_VAP2INT_MAP2_BASE                      \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xB4)
+
+	/* 1x16 dword */
+	#define DLRX_MISC_MIB_BASE                              \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xC0)
+
+	/* 1X4 dword */
+	#define DLRX_SKB_POOL_CTXT                              \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xD0)
+
+	/* 32 x 16 dwords i.e 16 x 128 bytes Note: this is in SB, sharing
+		with DLRX TX!!
+		*/
+	#define DLRX_VAP_MIB_BASE(i)                            \
+		(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0xE0 + ((i)*32))
+
+	/* 32 x 16 dwords */
+	#define DLRX_VAP_MIB_MISC_BASE(i)                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2E0 + \
+							((i)*32))
+
+	/* 255 * 2 DWORDS */
+	#define DLRX_DDR_PROTO_DMA_DESC_BASE                    \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x500)
+
+	/* 128 * 2 DWORDS */
+	#define DLRX_DDR_RX_PKT_BUF_REL_MSG_BASE                \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x700)
+
+	/* 4096 * 1 DWORDS */
+	/* TODO: Need to define this as a seperate address as
+	 KSEG1 address is not guaranteed
+	 */
+	#define DLRX_DDR_RX_PKT_BUF_RING_BASE                   \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x800)
+
+	/* 2048 * (64 + 4) DWORDS */
+	#define DLRX_DDR_RO_MAINLIST_BASE                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x1800)
+
+	/* 4096 * 6 DWORDS */
+	#define DLRX_DDR_RO_LINKLIST_BASE                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x23800)
+
+	/* 2 * (1 * 8) DWORDS */
+	#define DLRX_DDR_CPU_CE5_DESC_BASE                      \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x29800)
+
+	/* 264 x 1 dwords i.e 1056 x 1 bytes */
+	#define DLRX_CFG_PEER_ID_TO_PEER_MAP_BASE(i)            \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2a000 + i)
+
+	/* 128*16 Dword */
+	#define DLRX_DDR_SEQ_MASK_BASE                          \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2a200)
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_GSWIP_DMA_BASE                    \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa00)
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_WLAN_DMA_BASE                     \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa04)
+
+	/* 4 dword */
+	#define DLRX_CFG_CTXT_PROT_DMA_BASE                     \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa08)
+
+	/* 1 x 12 dwords */
+	#define DLRX_CFG_CTXT_CE5BUF_BASE                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa0C)
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_CE5DES_BASE                       \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa18)
+
+	/* 1 x 8 dword */
+	#define DLRX_CFG_CTXT_CPU_CE5DES_BASE                   \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa1C)
+
+	/* 1 x 8 dwords */
+	#define DLRX_CFG_CTXT_RXPB_PTR_RING_BASE                \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa24)
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_RXPB_BASE                         \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa2C)
+
+	/* 1 x 16 dwords */
+	#define DLRX_CFG_CTXT_RO_LINKLIST_BASE                  \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa30)
+
+	/* 1 x 8 dword */
+	#define DLRX_CFG_CTXT_RO_MAINLIST_BASE                  \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa40)
+
+	/* 1 x 48 dwords */
+	#define DLRX_CTXT_MSG_BASE                              \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa48)
+
+	/* 1 x 4 dwords */
+	#define DLRX_CFG_CTXT_RXPB_PTR_REL_MSGBUF_BASE          \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa78)
+
+	/* 1 x 8 dwords */
+	#define DLRX_CFG_GLOBAL_BASE                            \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa80)
+
+	/* 128 x 2 dwords i.e. 128 peers x 2 dwords */
+	#define DLRX_CFG_CTXT_PEER_HANDLER_BASE(i)              \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2aa90 + \
+							(i) * 2)
+
+	/* 4 x 1 dwords */
+	#define DLRX_CFG_CTXT_PEER_BITMAP_BASE(i)               \
+			(unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2ab90 + i)
+
+	/* 255 * 2 DWORDS  */
+	#define DLRX_DDR_GSWIP_DMA_DESC_BASE                    \
+		(volatile unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2ac00)
+
+	/* 512 * 2 DWORDS (shift from  SRAM) */
+	#define DLRX_DDR_CE5DESC_BASE                           \
+		(volatile unsigned int *)(RX_CFG_CTXT_BUF_BASE + 0x2ae00)
+
+	/* 2048 * 512 Bytes (2e000 -*/
+	#define DLRX_DDR_CE5BUF_BASE                            \
+			(unsigned int *)(RX_MSG_BUF_BASE)
+
+
+	#define DLRX_TARGET_CE5_PEREGRINE                       0x00058800
+	#define DLRX_TARGET_CE5_BEELINER                        0x0004B400
+
+	#define DLRX_TARGET_CE5_READ_INDEX(base)                \
+		(volatile unsigned int *)(pcie_base + ((base+0x48)>>2))
+
+	/* 1 dword? */
+	#define DLRX_TARGET_CE5_WRITE_INDEX(base)               \
+		(volatile unsigned int *)(pcie_base + ((base+0x40)>>2))
+#endif
+
+/* Message type */
+#define HTT_RX_IND_MSG                                  0x1
+#define HTT_RX_FLUSH_MSG                                0x2
+#define HTT_RX_FRAG_IND_MSG                             0xA
+#define HTT_TX_CMP_MSG                                  0x7
+
+/* Not actual message type, defined to identify message being sent
+	to wlan driver/cpu_ce5/cpu_ce4/invalid_tid
+	*/
+#define HTT_RX_CPU_CE4                                  0xB
+#define HTT_RX_CPU_CE5                                  0xC
+#define HTT_RX_IND_MSG_WLAN                             0xD
+#define HTT_RX_FLUSH_MSG_WLAN                           0xE
+#define HTT_RX_INVALID_TID                              0xF
+
+
+/* MPDU status */
+#define MPDU_STATUS_SUCCESS                             0x1
+#define MPDU_STATUS_FCS_ERROR                           0x2
+#define MPDU_STATUS_DUPLICATE_ERROR                     0x3
+#define MPDU_STATUS_REPLAY_ERROR                        0x4
+#define MPDU_STATUS_INVALID_PEER                        0x5
+#define MPDU_STATUS_UNAUTHORIZED_PEER                   0x6
+#define MPDU_STATUS_OUT_OF_SYNC_PEER                    0x7
+#define MPDU_STATUS_MANAGEMENT_CONTROL                  0x8
+#define MPDU_STATUS_TKIP_MIB_ERROR                      0x9
+#define MPDU_STATUS_DECRYPT_ERROR                       0xA
+#define MSDU_STATUS_ERROR_5_DROP                        0xB
+#define MSDU_STATUS_RO_LINKLIST_DROP                    0xC
+#define MSDU_STATUS_CHAIN_MSDU_DROP                     0xD
+
+/* Security Type */
+#define SEC_TYPE_DISABLE                                0x0
+#define SEC_TYPE_PN_48                                  0x1
+#define SEC_TYPE_PN_128_EVEN                            0x2
+#define SEC_TYPE_PN_128_ODD                             0x3
+
+#define NUM_PEER                                        128
+#define NUM_TID                                         16
+#define NUM_SEQ_ID                                      64
+
+/* Need to define a value for NULL_PTR as 0 is also a valid pointer */
+/* Set to 0xFFF as the next_ptr value in dlrx_ro_linklist_t is 12 bits length*/
+#define NULL_PTR                                        0xFFF
+
+#define INVALID_TID                                     31
+
+#define HTT_INVALID_PEER                                0xFFFF
+#define PHY_ADDR_MASK                                   0x1FFFFFFF
+/*
+    This is the enumeration for Special Received MPDU Status. Used by
+    \ref PPA_QCA_DL_RX_SPL_PKT_FN.
+*/
+
+/* Inspect Flag Set Rx Packet */
+#define WLAN_INSPECT_TYPE		0x1
+
+
+#define USE_CACHED_ADDR			1
+#define DRE_DBG_PRINT_ENABLE	1
+
+/*#define DBG_CACHED_ADDR		1*/
+#define HTT_RX_BUF_SIZE			1920
+#define HTT_MSG_BUF_SIZE		512
+extern void  dre_dma_map(unsigned int addr, unsigned int size);
+extern void dre_dma_unmap(unsigned int  addr, unsigned int size);
+
+#if defined(USE_CACHED_ADDR) && USE_CACHED_ADDR
+
+#define dre_dma_map(addr, size) ppa_dl_dre_dma_writeback(addr, size)
+#define dre_dma_unmap(addr, size) ppa_dl_dre_dma_invalidate(addr, size)
+#define dre_dma_wback_invalidate(addr, size) \
+	ppa_dl_dre_dma_wback_inv(addr, size)
+/* #define dre_dma_map(addr, size)		dma_cache_wback(addr, size) */
+/* #define dre_dma_unmap(addr, size)	dma_cache_inv(addr, size) */
+#else
+#define dre_dma_map(addr , size)
+#define dre_dma_unmap(addr , size)
+#define dre_dma_wback_invalidate(addr , size)
+#endif
+
+#if (defined(DLRX_GRX330_BOARD_CFG) && (DLRX_GRX330_BOARD_CFG == 1))
+#define VIR_TO_PHY(addr) CPHYSADDR(addr)
+#define UNCACHE_ADDR(addr) KSEG1ADDR(addr)
+#define CACHE_ADDR(addr)  KSEG0ADDR(addr)
+#else
+#define VIR_TO_PHY(addr) ((((unsigned int)addr)  & 0x0FFFFFFF) | 0x20000000)
+#define PHY_TO_VIRT(addr) ((addr & 0x0fffffff) | dl_kseg0)
+#define VIRT_TO_IOCU(addr) (((addr) & 0x1fffffff) | 0xC0000000)
+#define UNCACHE_ADDR(addr)  ((((uint32_t)addr) & (0x0FFFFFFF)) | dl_kseg1)
+#define CACHE_ADDR(addr)  ((((uint32_t)addr) & (0x0FFFFFFF)) | dl_kseg0)
+#endif
+
+#if defined(DBG_CACHED_ADDR) && DBG_CACHED_ADDR
+#define dre_print(fmt, arg...)  do { printk(KERN_WARNING ":%d:%s: " \
+				fmt "\n", __LINE__, __func__, ##arg); } \
+				while (0)
+#else
+#define dre_print(fmt, arg...)
+#endif
+
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_internal_def.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_internal_def.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_internal_def.h
@@ -0,0 +1,201 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_INTERNAL_H__
+#define __DLRX_FW_INTERNAL_H__
+
+
+/*      defines      */
+#define uint8_t  unsigned char
+#define uint16_t unsigned short
+#define uint32_t unsigned int
+
+/* Flag to indicate if global variables are to be used instead of #defines */
+#define USE_GLOBAL_VARIABLES      0
+/* Flag to enable/disable load unload support */
+#define DLRX_SUPPORT_UNLOAD       1
+/* Flag to enable/disable call to band steering */
+#define DL_BAND_STEERING		  1
+/* The value of 3 is set as the interface value to prevent passing
+* invalid interface value to the switch during the playout process.
+* The value could be any value between 3 to 7. Only condition is
+* source and destination interface value should be same
+*/
+#define VALID_INTERFACE_NUMBER     3
+#define CFG_OFFSET_ATTEN_IN_DWORDS 1
+
+#define CONGESTION_REG_MASK        0x40
+
+typedef enum {
+	UPDATE_MSDU_MIB,
+	UPDATE_MPDU_MIB
+} mib_msdu_mpdu_update_switch;
+
+typedef enum {
+	INSPECT_BIT_DATA,
+	ONE_PMAC_DATA,
+	TWO_PMAC_DATA
+} rx_outgoing_header_switch;
+
+typedef enum {
+	RECYCLE_RXPB_PTR,
+	NEW_RXPB_PTR,
+	RECYCLE_LL_RXPB_PTR
+} rxpb_free_ptr_type;
+
+typedef enum {
+	WRONG_PN_SEQUENCE = 1,
+	DMA_TX_CHANNEL_FULL
+} dlrx_packet_drop_reason;
+
+typedef enum {
+	RECYCLE_RXPB,
+	RELEASE_RXPB
+} dlrx_rxpb_release_type;
+
+/* Hardware Specific defines */
+#define B_DLRX_RXPB_HDR_pn_63_48  \
+	((g_qca_hw == BEELINER_BOARD) ? B_DLRX_RXPB_HDR_BEELINER_pn_63_48 : \
+	B_DLRX_RXPB_HDR_PEREGRINE_pn_63_48)
+
+#define MAX_INV_HEADER_LEN ((g_qca_hw == BEELINER_BOARD) ? \
+		((g_qca_hw_sub_type == SUBTYPE_NONE_BOARD) ? \
+		MAX_INV_BEELINER_HEADER_LEN : \
+		MAX_INV_CASCADE_HEADER_LEN) : \
+		MAX_INV_PEREGRINE_HEADER_LEN)
+
+/* Variable Definition */
+extern unsigned int global_debug_flag;
+extern unsigned int global_debug_print;
+extern unsigned int g_cfg_badr_ce5buf;
+extern unsigned int g_cfg_badr_ce5des;
+extern unsigned int g_cfg_badr_rxpb_ptr_ring;
+extern unsigned int g_cfg_badr_ro_linklist;
+extern unsigned int g_cfg_badr_ro_mainlist;
+
+#if USE_GLOBAL_VARIABLES
+extern unsigned int g_cfg_num_ce5buf;
+extern unsigned int g_cfg_size_shift_ce5buf;
+extern unsigned int g_cfg_num_rxpb_ptr_ring;
+extern unsigned int g_cfg_size_rxpktdes;
+extern unsigned int g_cfg_offset_atten;
+#endif
+
+extern unsigned int g_qca_hw;
+extern unsigned int g_qca_hw_sub_type;
+extern unsigned int g_ce5_offset;
+extern unsigned int g_congestion_timeout_num;
+extern unsigned int g_congestion_drop_flag;
+extern unsigned int *congestion_register_addr;
+
+
+
+#if USE_GLOBAL_VARIABLES
+    #define GET_NUM_CE5BUF          (g_cfg_num_ce5buf)
+    #define GET_CE5BUF_SIZE_SHIFT   (g_cfg_size_shift_ce5buf)
+    #define GET_NUM_RXPB_PTR_RING   (g_cfg_num_rxpb_ptr_ring)
+    #define GET_RXPKT_DESC_SIZE     (g_cfg_size_rxpktdes)
+    #define GET_OFFSET_ATTEN        (g_cfg_offset_atten)
+#else
+/* 2 NOTE: Make sure the values set here are same as
+* the ones set by driver in the cfg ctxt structure
+*/
+#if	DLRX_GRX330_BOARD_CFG
+#define GET_NUM_CE5BUF			(512)
+#define GET_CE5BUF_SIZE_SHIFT	(9)
+#define GET_NUM_RXPB_PTR_RING   (1024)
+#else
+#define GET_NUM_CE5BUF			(512)
+#define GET_CE5BUF_SIZE_SHIFT	(9)
+#define GET_NUM_RXPB_PTR_RING	 (1024)
+#endif
+#define GET_RXPKT_DESC_SIZE ((g_qca_hw == BEELINER_BOARD) ? \
+			((g_qca_hw_sub_type == SUBTYPE_NONE_BOARD) ? \
+			QCA_BEELINER_11AC_CFG_OFFSET_ATTEN : \
+			QCA_CASCADE_11AC_CFG_OFFSET_ATTEN) : \
+			QCA_PEREGRINE_11AC_CFG_OFFSET_ATTEN)
+#define GET_OFFSET_ATTEN (4)
+#endif
+/* Function Definition */
+/* Functions defined in DLRX_reorder_buffering_process.c */
+void dlrx_reorder_buffering_process(unsigned int *ce5_buf_ptr);
+
+/* Functions defined in DLRX_utility_fns.c */
+void dlrx_add_outgoing_data_to_rxpb_buffer(unsigned int *rxpb_buf_ptr,
+		rx_outgoing_header_switch outgoing_header_switch);
+unsigned int dlrx_get_interface_data_from_vap(unsigned int vap);
+unsigned int dlrx_get_current_rxpb_buf_ptr(void);
+unsigned int dlrx_get_ind_msg_mpdu_data_offset(unsigned int *ce5_buf_ptr);
+void dlrx_get_fw_rx_desc_byte_data(unsigned int *ce5_buf_ptr);
+void dlrx_copy_last_pn_to_mainlist(void);
+unsigned int dlrx_is_pn_check_fail(void);
+unsigned int dlrx_get_ro_ll_rxpb_ptr(void);
+unsigned int dlrx_check_congestion_status(void);
+void dlrx_generate_debug(unsigned int);
+void dlrx_print_rolist_debug_data(void);
+void dlrx_unregister_driver_fns(void);
+
+/* Functions defined in RO_list_fns.c */
+unsigned int ro_list_add_data(unsigned int *ce5_buf_ptr,
+		unsigned int *rxpb_buf_ptr);
+unsigned int ro_linklist_get_free_ro_desc(void);
+void ro_list_release_data(unsigned int ce5_buf_ptr);
+unsigned int ro_linklist_return_free_ptr(unsigned int ro_des_free_ptr);
+void ro_list_reset(unsigned int peer);
+void ro_list_reset_a_tid_seqid(unsigned int peer,
+		unsigned int ext_tid,
+		unsigned int mpdu_index,
+		unsigned int rxpb_release_type
+		);
+void ro_list_clear(void);
+
+/* Functions defined in RXPB_fns.c */
+void rxpb_write_free_buffer_to_rxpb_ptr_ring(rxpb_free_ptr_type free_ptr_type);
+#if DLRX_SUPPORT_UNLOAD
+void rxpb_find_duplicate_ptr_value(void);
+void rxpb_free_buffers_on_unload(void);
+#endif
+
+/* Functions defined in MIB_data_update.c */
+void mib_update_status_counters(mib_msdu_mpdu_update_switch switch_value,
+		unsigned int status_value);
+void mib_update_vap_dlrx_data(unsigned int msdu_length,
+		dlrx_packet_drop_reason packet_drop_reason);
+
+/* Functions defined in dlrx_playout_process.c */
+void dlrx_playout_process(unsigned int ce5_buf_ptr);
+void dlrx_send_packet_to_dma_descriptor(unsigned int ce5_buf_ptr);
+
+/* Functions defined in dlrx_drv_api_fns.c */
+unsigned int dlrx_drv_get_revision(void);
+void dlrx_drv_reset(unsigned int reset_type, unsigned int id_num);
+unsigned int *dlrx_drv_get_mib_data(unsigned int mib_type,
+		unsigned int vap_id);
+int dlrx_drv_get_cur_rxpb_ptr(unsigned int *rxpb_ptr, unsigned int *data_len);
+/* void dlrx_drv_replenish_rxpb_ptr(void); */
+/* configure the base address */
+int dlrx_drv_set_mem_base(unsigned int ddr_membase,
+		unsigned int cfg_ctxt_membase,
+		unsigned int pcie_membase);
+int dlrx_drv_set_wapi_rxpn(unsigned int peer, unsigned int *rxpn);
+void dre_drv_set_dlrx_unload(void);
+#endif
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_macro_adaptor.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_macro_adaptor.h
new file mode 100644
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_macro_adaptor.h
@@ -0,0 +1,277 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_MACRO_ADAPTOR_H_
+#define __DLRX_FW_MACRO_ADAPTOR_H_
+
+
+/* 1 NOTE: This header files only defines macros
+* for similar named elements in the specified structures.
+*/
+
+
+#include "dlrx_fw_data_structure_macro.h"
+
+#define DLRX_FORM_SET_MACRO_NAME(name1, name2, ...)		\
+	do {							\
+		if (g_qca_hw == BEELINER_BOARD) { \
+			name1##_BEELINER_##name2(__VA_ARGS__); \
+		} else {						\
+			name1##_PEREGRINE_##name2(__VA_ARGS__); \
+		} \
+	} while (0)
+
+
+#define DLRX_FORM_GET_MACRO_NAME(name1, name2, ...) \
+	((g_qca_hw == BEELINER_BOARD) ? name1##_BEELINER_##name2(__VA_ARGS__) : \
+			name1##_PEREGRINE_##name2(__VA_ARGS__))
+
+
+
+#define DLRX_RXPB_HDR_mcast_bcast_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_mcast_bcast_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_get_direct, dword)
+
+#define DLRX_RXPB_HDR_mcast_bcast_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_mcast_bcast_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_mcast_bcast_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_mcast_bcast_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, mcast_bcast_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_msdu_load_status_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_load_status_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_get_direct, dword)
+
+#define DLRX_RXPB_HDR_msdu_load_status_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_msdu_load_status_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_msdu_load_status_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_load_status_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_load_status_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_msdu_chain_num_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_chain_num_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_get_direct, dword)
+
+#define DLRX_RXPB_HDR_msdu_chain_num_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_msdu_chain_num_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_msdu_chain_num_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_chain_num_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_chain_num_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_seqid_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, seqid_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_seqid_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, seqid_get_direct, dword)
+
+#define DLRX_RXPB_HDR_seqid_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, seqid_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_seqid_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, seqid_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_seqid_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, seqid_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_seqid_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, seqid_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_pn_31_0_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_31_0_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_get_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_31_0_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_pn_31_0_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_pn_31_0_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_31_0_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_31_0_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_pn_47_32_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_47_32_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_get_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_47_32_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_pn_47_32_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_pn_47_32_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_47_32_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_47_32_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_msdu_len_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_len_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_get_direct, dword)
+
+#define DLRX_RXPB_HDR_msdu_len_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_msdu_len_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_msdu_len_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_msdu_len_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, msdu_len_clear_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_63_48_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_63_48_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_get_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_63_48_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_pn_63_48_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_pn_63_48_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_63_48_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_63_48_clear_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_95_64_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_95_64_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_get_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_95_64_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_pn_95_64_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_pn_95_64_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_95_64_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_95_64_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_pn_127_96_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_127_96_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_get_direct, dword)
+
+#define DLRX_RXPB_HDR_pn_127_96_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_pn_127_96_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_pn_127_96_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_pn_127_96_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, pn_127_96_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_first_msdu_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_first_msdu_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_get_direct, dword)
+
+#define DLRX_RXPB_HDR_first_msdu_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_first_msdu_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_first_msdu_clear_indirect(base, offset)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_first_msdu_clear_direct(dword)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, first_msdu_clear_direct, dword)
+
+
+#define DLRX_RXPB_HDR_last_msdu_get_indirect(base, offset)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_get_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_last_msdu_get_direct(dword)   \
+	DLRX_FORM_GET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_get_direct, dword)
+
+#define DLRX_RXPB_HDR_last_msdu_set_indirect(base, offset, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_set_indirect, base, offset, val)
+
+#define DLRX_RXPB_HDR_last_msdu_set_direct(dword, val)   \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_set_direct, dword, val)
+
+#define DLRX_RXPB_HDR_last_msdu_clear_indirect(base, offset) \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_clear_indirect, base, offset)
+
+#define DLRX_RXPB_HDR_last_msdu_clear_direct(dword) \
+	DLRX_FORM_SET_MACRO_NAME(DLRX_RXPB_HDR, last_msdu_clear_direct, dword)
+
+
+#endif
+
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_version.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_version.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_fw_version.h
@@ -0,0 +1,28 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_FW_VERSION_H__
+#define __DLRX_FW_VERSION_H__
+/* Version file for dlrx_fw */
+#define DRE_FW_VERSION                0x00000210
+#define DRE_FW_FEATURE                0x11AC0201
+#endif
diff --git a/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_inl_fns.h b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_inl_fns.h
new file mode 100755
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/directlink/dlrx/include/dlrx_inl_fns.h
@@ -0,0 +1,300 @@
+/*******************************************************************************
+
+  Intel DirectLink driver
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify it
+  under the terms and conditions of the GNU General Public License,
+  version 2, as published by the Free Software Foundation.
+
+  This program is distributed in the hope it will be useful, but WITHOUT
+  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+  more details.
+
+  You should have received a copy of the GNU General Public License along with
+  this program; if not, write to the Free Software Foundation, Inc.,
+  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+
+  The full GNU General Public License is included in this distribution in
+  the file called "COPYING".
+
+*******************************************************************************/
+#ifndef __DLRX_INL_FNS_H__
+#define __DLRX_INL_FNS_H__
+
+#include "dlrx_fw_data_structure_macro.h"
+#include "dlrx_fw_internal_def.h"
+
+
+/*************************************************************************
+Module:           mib_update_success_status_counters
+Description: Increment the success status counters
+Parameters: switch_value : Used to determine if msdu or mpdu counters need to
+	be updated.
+Return value :   None
+Functions called by this module: None
+Notes        : This function is made as a seperate
+			inline function to improve performance
+*************************************************************************/
+extern inline void mib_update_success_status_counters(
+	mib_msdu_mpdu_update_switch switch_value)
+{
+	unsigned int counter_value;
+	if (switch_value == UPDATE_MSDU_MIB) {
+		counter_value = DLRX_DATA_MIB_rx_success_msdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+		counter_value++;
+		DLRX_DATA_MIB_rx_success_msdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+	} else if (switch_value == UPDATE_MPDU_MIB) {
+		counter_value = DLRX_DATA_MIB_rx_success_mpdu_get_indirect(DLRX_DATA_MIB_BASE, 0);
+		counter_value++;
+		DLRX_DATA_MIB_rx_success_mpdu_set_indirect(DLRX_DATA_MIB_BASE, 0, counter_value);
+	}
+}
+
+/*************************************************************************
+Module:          mib_update_rx_ind_msg
+Description:     Increment the rx indication message mib
+Parameters:      None
+Return value :   None
+Functions called by this module: None
+Notes        :   This function is made as a seperate inline
+			function to improve performance
+************************************************************************/
+extern inline void mib_update_rx_ind_msg(void)
+{
+	unsigned int msg_mib;
+	msg_mib = DLRX_MSG_MIB_total_rx_ind_msg_get_indirect(DLRX_MSG_MIB_BASE, 0) + 1;
+	DLRX_MSG_MIB_total_rx_ind_msg_set_indirect(DLRX_MSG_MIB_BASE, 0, msg_mib);
+}
+
+/*************************************************************************
+Module:           mib_update_chained_mpdu
+Description:     Increment the total chained mpdu counters
+Parameters:     offset : Offset value into the structure
+Return value :   None
+Functions called by this module: None
+Notes:  None
+*************************************************************************/
+extern inline void mib_update_chained_mpdu(unsigned int offset)
+{
+	unsigned int mib_value;
+	mib_value = DLRX_MISC_MIB_total_chained_mpdu_get_indirect(DLRX_MISC_MIB_BASE, offset);
+	mib_value++;
+	DLRX_MISC_MIB_total_chained_mpdu_set_indirect(DLRX_MISC_MIB_BASE, offset, mib_value);
+}
+
+/******************************************************************************
+Function name: mib_update_vap_gswip_data
+Description  : Update the mib VAP GSWIP data
+Parameters   : msdu_length : msdu length
+Return value : None
+Functions called by this module:
+	None
+	Notes        : Make sure the vap is set to the correct value in the context
+	structure before calling this function. Check the notes of functions called
+	for complete list to be set in the context.
+******************************************************************************/
+extern inline void mib_update_vap_gswip_data(unsigned int msdu_length)
+{
+	unsigned int vap;
+	unsigned long long msb_byte;
+	unsigned long long lsb_byte;
+	unsigned long long pdu_data;
+	unsigned long long num_bytes_data;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_gswip_packets_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_gswip_packets_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_gswip_packets_high;
+	pdu_data = (msb_byte | lsb_byte);
+	pdu_data++;
+	VAP_DATA_MISC_MIB_rx_gswip_packets_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (pdu_data & M_VAP_DATA_MISC_MIB_rx_gswip_packets_low));
+	VAP_DATA_MISC_MIB_rx_gswip_packets_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MISC_MIB_rx_gswip_packets_high) \
+		& M_VAP_DATA_MISC_MIB_rx_gswip_packets_high));
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_gswip_bytes_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_gswip_bytes_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_gswip_bytes_high;
+	num_bytes_data = (msb_byte | lsb_byte);
+	num_bytes_data += msdu_length;
+	VAP_DATA_MISC_MIB_rx_gswip_bytes_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MISC_MIB_rx_gswip_bytes_low));
+	VAP_DATA_MISC_MIB_rx_gswip_bytes_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MISC_MIB_rx_gswip_bytes_high) \
+		& M_VAP_DATA_MISC_MIB_rx_gswip_bytes_high));
+}
+
+/******************************************************************************
+Function name: mib_update_vap_wlan_data
+Description  : Update the mib VAP WLAN data
+Parameters   : msdu_length : msdu length
+Return value : None
+Functions called by this module: None
+Notes        : Make sure the vap is set to the correct value in the context
+	structure before calling this function. Check the notes of functions
+	called for complete list to be set in the context.
+******************************************************************************/
+extern inline void mib_update_vap_wlan_data(unsigned int msdu_length)
+{
+	unsigned int vap;
+	unsigned long long msb_byte;
+	unsigned long long lsb_byte;
+	unsigned long long pdu_data;
+	unsigned long long num_bytes_data;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_wlan_packets_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_wlan_packets_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_wlan_packets_high;
+	pdu_data = (msb_byte | lsb_byte);
+	pdu_data++;
+	VAP_DATA_MISC_MIB_rx_wlan_packets_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (pdu_data & M_VAP_DATA_MISC_MIB_rx_wlan_packets_low));
+	VAP_DATA_MISC_MIB_rx_wlan_packets_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MISC_MIB_rx_wlan_packets_high) \
+														& M_VAP_DATA_MISC_MIB_rx_wlan_packets_high));
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_wlan_bytes_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_wlan_bytes_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_wlan_bytes_high;
+	num_bytes_data = (msb_byte | lsb_byte);
+	num_bytes_data += msdu_length;
+	VAP_DATA_MISC_MIB_rx_wlan_bytes_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_low));
+	VAP_DATA_MISC_MIB_rx_wlan_bytes_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MISC_MIB_rx_wlan_bytes_high) \
+	   & M_VAP_DATA_MISC_MIB_rx_wlan_bytes_high));
+}
+
+/******************************************************************************
+Function name: mib_update_vap_protocol_stack_data
+Description  : Update the mib VAP protocol stack data
+Parameters   : msdu_length : msdu length
+Return value : None
+Functions called by this module: None
+Notes        : Make sure the vap is set to the correct value in the context
+	structure before calling this function. Check the notes of functions
+	called for complete list to be set in the context.
+******************************************************************************/
+extern inline void mib_update_vap_protocol_stack_data(unsigned int msdu_length)
+{
+	unsigned int vap;
+	unsigned long long msb_byte;
+	unsigned long long lsb_byte;
+	unsigned long long pdu_data;
+	unsigned long long num_bytes_data;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high;
+	pdu_data = (msb_byte | lsb_byte);
+	pdu_data++;
+	VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (pdu_data & M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_low));
+	VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high) \
+			& M_VAP_DATA_MISC_MIB_rx_protocol_stack_packets_high));
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high;
+	num_bytes_data = (msb_byte | lsb_byte);
+	num_bytes_data += msdu_length;
+	VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_low));
+	VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high) \
+			& M_VAP_DATA_MISC_MIB_rx_protocol_stack_bytes_high));
+}
+
+/****************************************************************************
+Function name: mib_update_vap_forward_data
+Description  : Update the mib VAP forward data
+Parameters   : msdu_length : msdu length
+Return value : None
+Functions called by this module:
+	None
+Notes        : Make sure the vap is set to the correct value in the context
+	structure before calling this function. Check the notes of functions
+	called for complete list to be set in the context.
+****************************************************************************/
+extern inline void mib_update_vap_forward_data(unsigned int msdu_length)
+{
+	unsigned int vap;
+	unsigned long long msb_byte;
+	unsigned long long lsb_byte;
+	unsigned long long pdu_data;
+	unsigned long long num_bytes_data;
+
+	vap = DLRX_CTXT_MSG_vap_get_indirect(DLRX_CTXT_MSG_BASE, 0);
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_forward_packets_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_forward_packets_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_forward_packets_high;
+	pdu_data = (msb_byte | lsb_byte);
+	pdu_data++;
+	VAP_DATA_MISC_MIB_rx_forward_packets_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (pdu_data & M_VAP_DATA_MISC_MIB_rx_forward_packets_low));
+	VAP_DATA_MISC_MIB_rx_forward_packets_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((pdu_data >> W_VAP_DATA_MISC_MIB_rx_forward_packets_high) \
+		& M_VAP_DATA_MISC_MIB_rx_forward_packets_high));
+
+	lsb_byte = VAP_DATA_MISC_MIB_rx_forward_bytes_low_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = VAP_DATA_MISC_MIB_rx_forward_bytes_high_get_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0);
+	msb_byte = msb_byte << W_VAP_DATA_MISC_MIB_rx_forward_bytes_high;
+	num_bytes_data = (msb_byte | lsb_byte);
+	num_bytes_data += msdu_length;
+	VAP_DATA_MISC_MIB_rx_forward_bytes_low_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, (num_bytes_data & M_VAP_DATA_MISC_MIB_rx_forward_bytes_low));
+	VAP_DATA_MISC_MIB_rx_forward_bytes_high_set_indirect(DLRX_VAP_MIB_MISC_BASE(vap), 0, ((num_bytes_data >> W_VAP_DATA_MISC_MIB_rx_forward_bytes_high) \
+		 & M_VAP_DATA_MISC_MIB_rx_forward_bytes_high));
+}
+
+/**********************************************************************
+Module:           mib_update_chained_mpdu
+Description:     Increment the total chained mpdu counters
+Parameters:     offset : Offset value into the structure
+Return value :   None
+Functions called by this module: None
+Notes:  None
+**********************************************************************/
+extern inline void mib_update_congestion_drop_packets(void)
+{
+	unsigned int mib_value;
+	mib_value = DLRX_DATA_MIB_rx_drop_congestion_packets_get_indirect(DLRX_DATA_MIB_BASE, 0);
+	mib_value++;
+	DLRX_DATA_MIB_rx_drop_congestion_packets_set_indirect(DLRX_DATA_MIB_BASE, 0, mib_value);
+}
+
+/*****************************************************************************
+Function name: ro_list_prepare_rxpb_buf_and_add_to_ro_list
+Description  : Prepare the rxpb data and add to ro list
+Parameters   : ce5_bufptr, rxpb_buf_ptr, header_switch
+Return value : None
+Functions called by this module:
+	dlrx_add_outgoing_data_to_rxpb_buffer, ro_list_add_data
+	rxpb_write_free_buffer_to_rxpb_ptr_ring, mib_update_status_counters
+	Notes        : None
+****************************************************************************/
+extern inline void ro_list_prepare_rxpb_buf_and_add_to_ro_list(
+		unsigned int *ce5_buf_ptr,
+		unsigned int *rxpb_buf_ptr,
+		rx_outgoing_header_switch header_switch
+		)
+{
+	dlrx_add_outgoing_data_to_rxpb_buffer(rxpb_buf_ptr, header_switch);
+	if (!(ro_list_add_data(ce5_buf_ptr, rxpb_buf_ptr))) {
+		/* Drop the packet due to non availability of linklist ptr */
+		/* Not defined in spec flowchart */
+		rxpb_write_free_buffer_to_rxpb_ptr_ring(RECYCLE_RXPB_PTR);
+		mib_update_status_counters(0, MSDU_STATUS_RO_LINKLIST_DROP);
+		pr_info("Insert to ro linklist failed: Header_Switch %u\n",
+			header_switch);
+	}
+}
+
+extern inline uint8_t *dlrx_get_pmac_data_ptr(unsigned int *pmac_data_ptr, unsigned int pmac_ptr_offset)
+{
+	uint8_t *temp_pmac_ptr;
+	temp_pmac_ptr = (uint8_t *)pmac_data_ptr;
+	while (pmac_ptr_offset != 0) {
+		temp_pmac_ptr--;
+		pmac_ptr_offset--;
+	}
+	return temp_pmac_ptr;
+}
+
+#endif
+
