Common driver header files of arch/mips/lantiq/

diff --git a/.hgtags b/.hgtags
new file mode 100644
--- /dev/null
+++ b/.hgtags
@@ -0,0 +1,1 @@
+667106dd9fd5f3a084dbceab293e7f36cafe2798 tested_default_20130829T143100+08
diff --git a/arch/mips/include/asm/mach-lantiq/lantiq.h b/arch/mips/include/asm/mach-lantiq/lantiq.h
old mode 100644
new mode 100755
--- a/arch/mips/include/asm/mach-lantiq/lantiq.h
+++ b/arch/mips/include/asm/mach-lantiq/lantiq.h
@@ -4,6 +4,7 @@
  *  by the Free Software Foundation.
  *
  *  Copyright (C) 2010 John Crispin <blogic@openwrt.org>
+ *  Copyright (C) 2013 Lei Chuanhua <chuanhua.lei@lantiq.com>
  */
 #ifndef _LANTIQ_H__
 #define _LANTIQ_H__
@@ -15,6 +16,10 @@
 /* generic reg access functions */
 #define ltq_r32(reg)		__raw_readl(reg)
 #define ltq_w32(val, reg)	__raw_writel(val, reg)
+
+#define ltq_r16(reg)		__raw_readw(reg)
+#define ltq_w16(val, reg)	__raw_writew(val, reg)
+
 #define ltq_w32_mask(clear, set, reg)	\
 	ltq_w32((ltq_r32(reg) & ~(clear)) | (set), reg)
 #define ltq_r8(reg)		__raw_readb(reg)
@@ -48,6 +53,12 @@ extern struct clk *clk_get_ppe(void);
 extern unsigned char ltq_boot_select(void);
 /* find out what caused the last cpu reset */
 extern int ltq_reset_cause(void);
+extern void ltq_reset_once(unsigned int module, ulong u);
+extern void ltq_hw_reset(unsigned int module);
+
+extern unsigned int ltq_get_cpu_id(void);
+extern unsigned int ltq_get_soc_type(void);
+extern unsigned int ltq_get_soc_rev(void);
 
 #define IOPORT_RESOURCE_START	0x10000000
 #define IOPORT_RESOURCE_END	0xffffffff
diff --git a/arch/mips/include/asm/mach-lantiq/xway/lantiq_soc.h b/arch/mips/include/asm/mach-lantiq/xway/lantiq_soc.h
old mode 100644
new mode 100755
--- a/arch/mips/include/asm/mach-lantiq/xway/lantiq_soc.h
+++ b/arch/mips/include/asm/mach-lantiq/xway/lantiq_soc.h
@@ -4,6 +4,7 @@
  *  by the Free Software Foundation.
  *
  *  Copyright (C) 2010 John Crispin <blogic@openwrt.org>
+ *  Copyright (C) 2013 Lei Chuanhua <Chuanhua.lei@lantiq.com>
  */
 
 #ifndef _LTQ_XWAY_H__
@@ -36,6 +37,16 @@
 #define SOC_ID_GRX288_2		0x00D /* v1.2 */
 #define SOC_ID_GRX282_2		0x00E /* v1.2 */
 
+#define SOC_ID_ARX362		0x004
+#define SOC_ID_ARX368		0x005
+#define SOC_ID_ARX382		0x007
+#define SOC_ID_ARX388		0x008
+#define SOC_ID_URX388		0x009
+#define SOC_ID_GRX383		0x010
+#define SOC_ID_GRX369		0x011
+#define SOC_ID_GRX387		0x00F
+#define SOC_ID_GRX389		0x012
+
  /* SoC Types */
 #define SOC_TYPE_DANUBE		0x01
 #define SOC_TYPE_TWINPASS	0x02
@@ -43,6 +54,42 @@
 #define SOC_TYPE_VR9		0x04 /* v1.1 */
 #define SOC_TYPE_VR9_2		0x05 /* v1.2 */
 #define SOC_TYPE_AMAZON_SE	0x06
+#define SOC_TYPE_AR10		0x07
+#define SOC_TYPE_GRX390		0x08
+
+static inline int ltq_is_ase(void)
+{
+	return (ltq_get_soc_type() == SOC_TYPE_AMAZON_SE);
+}
+
+static inline int ltq_is_danube(void)
+{
+	return (ltq_get_soc_type() == SOC_TYPE_DANUBE);
+}
+
+static inline int ltq_is_ar9(void)
+{
+	return (ltq_get_soc_type() == SOC_TYPE_AR9);
+}
+
+static inline int ltq_is_vr9(void)
+{
+	int type = ltq_get_soc_type();
+	if ((type == SOC_TYPE_VR9) || (type == SOC_TYPE_VR9_2))
+		return 1;
+	else
+		return 0;
+}
+
+static inline int ltq_is_ar10(void)
+{
+	return (ltq_get_soc_type() == SOC_TYPE_AR10);
+}
+
+static inline int ltq_is_grx390(void)
+{
+	return (ltq_get_soc_type() == SOC_TYPE_GRX390);
+}
 
 /* BOOT_SEL - find what boot media we have */
 #define BS_EXT_ROM		0x0
@@ -59,6 +106,12 @@
 #define ltq_cgu_r32(x)		ltq_r32(ltq_cgu_membase + (x))
 extern __iomem void *ltq_cgu_membase;
 
+/* helpers used to access the rcu */
+extern void __iomem *ltq_rcu_membase;
+#define ltq_rcu_w32(x, y) 	ltq_w32((x), ltq_rcu_membase + (y))
+#define ltq_rcu_r32(x)		ltq_r32(ltq_rcu_membase + (x))
+void ltq_rcu_w32_mask(uint32_t clr, uint32_t set, uint32_t reg_off);
+
 /*
  * during early_printk no ioremap is possible
  * lets use KSEG1 instead
@@ -81,14 +134,13 @@ extern __iomem void *ltq_cgu_membase;
 /* MPS - multi processor unit (voice) */
 #define LTQ_MPS_BASE_ADDR	(KSEG1 + 0x1F107000)
 #define LTQ_MPS_CHIPID		((u32 *)(LTQ_MPS_BASE_ADDR + 0x0344))
+#define LTQ_FUSE_ID_CFG 	((u32 *)(LTQ_MPS_BASE_ADDR + 0x0350))
 
 /* allow booting xrx200 phys */
 int xrx200_gphy_boot(struct device *dev, unsigned int id, dma_addr_t dev_addr);
 
 /* request a non-gpio and set the PIO config */
 #define PMU_PPE			 BIT(13)
-extern void ltq_pmu_enable(unsigned int module);
-extern void ltq_pmu_disable(unsigned int module);
 
 /* allow the ethernet driver to load a flash mapped mac addr */
 const u8* ltq_get_eth_mac(void);
diff --git a/arch/mips/lantiq/clk.h b/arch/mips/lantiq/clk.h
old mode 100644
new mode 100755
--- a/arch/mips/lantiq/clk.h
+++ b/arch/mips/lantiq/clk.h
@@ -4,6 +4,7 @@
  *  by the Free Software Foundation.
  *
  * Copyright (C) 2010 John Crispin <blogic@openwrt.org>
+ * Copyright (C) 2013 Lei Chuanhua <Chuanhua.lei@lantiq.com>
  */
 
 #ifndef _LTQ_CLK_H__
@@ -31,13 +32,18 @@
 #define CLOCK_240M	240000000
 #define CLOCK_250M	250000000
 #define CLOCK_266M	266666666
+#define CLOCK_288M	288888888
 #define CLOCK_300M	300000000
 #define CLOCK_333M	333333333
+#define CLOCK_360M	360000000
 #define CLOCK_393M	393215332
 #define CLOCK_400M	400000000
+#define CLOCK_432M	432000000
 #define CLOCK_450M	450000000
 #define CLOCK_500M	500000000
 #define CLOCK_600M	600000000
+#define CLOCK_666M	666666666
+#define CLOCK_720M	720000000
 
 /* clock out speeds */
 #define CLOCK_32_768K	32768
@@ -58,6 +64,8 @@ struct clk {
 	unsigned long *rates;
 	unsigned int module;
 	unsigned int bits;
+	atomic_t refcount;
+	bool always_on; /* 0 -- always on or not used, 1 -- configurable */
 	unsigned long (*get_rate) (void);
 	int (*enable) (struct clk *clk);
 	void (*disable) (struct clk *clk);
@@ -80,4 +88,12 @@ extern unsigned long ltq_vr9_cpu_hz(void
 extern unsigned long ltq_vr9_fpi_hz(void);
 extern unsigned long ltq_vr9_pp32_hz(void);
 
+extern unsigned long ltq_ar10_cpu_hz(void);
+extern unsigned long ltq_ar10_fpi_hz(void);
+extern unsigned long ltq_ar10_pp32_hz(void);
+
+extern unsigned long ltq_grx390_cpu_hz(void);
+extern unsigned long ltq_grx390_fpi_hz(void);
+extern unsigned long ltq_grx390_pp32_hz(void);
+
 #endif
