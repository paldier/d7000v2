# HG changeset patch
# Parent 96c58734eba4e5123eb3a93926c07daa4d8387b1

diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -32,6 +32,7 @@
 #include <linux/hash.h>
 #include <net/rtnetlink.h>
 #include <net/xfrm.h>
+#include "../../net/bridge/br_private.h" 
 
 #define MACVLAN_HASH_SIZE	(1 << BITS_PER_BYTE)
 
@@ -180,6 +181,24 @@
 	}
 }
 
+static struct macvlan_dev *macvlan_slave_lookup(const struct macvlan_port *port )
+{
+        struct macvlan_dev *vlan;
+	struct net_bridge_port *brport;
+        int i;
+
+        for (i = 0; i < MACVLAN_HASH_SIZE; i++) {
+	      hlist_for_each_entry_rcu(vlan, &port->vlan_hash[i], hlist) {
+                  brport = br_port_get_rtnl(vlan->dev);
+                  if(brport != NULL){
+                      return vlan;
+                  }
+              }
+        }
+        return NULL;
+}
+
+
 /* called under rcu_read_lock() from netif_receive_skb */
 static rx_handler_result_t macvlan_handle_frame(struct sk_buff **pskb)
 {
@@ -234,8 +253,12 @@
 	else
 		vlan = macvlan_hash_lookup(port, eth->h_dest);
 	if (vlan == NULL)
-		return RX_HANDLER_PASS;
-
+	{
+		if(NULL == (vlan = macvlan_slave_lookup(port)))
+		{
+			return RX_HANDLER_PASS;
+		}
+	}
 	dev = vlan->dev;
 	if (unlikely(!(dev->flags & IFF_UP))) {
 		kfree_skb(skb);
