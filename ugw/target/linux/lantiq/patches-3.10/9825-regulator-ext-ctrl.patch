# HG changeset patch
# Parent 68b67b62c7a66be3f6c91d3ebc16745ab36e7dc5
imported patch 9825-TPS65273.patch

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -2778,6 +2778,85 @@ int regulator_get_current_limit(struct r
 EXPORT_SYMBOL_GPL(regulator_get_current_limit);
 
 /**
+ * regulator_enable_ext_ctrl - enable the external control of the output voltage
+ * @regulator: regulator source
+ * If the external control is disabled the output voltage is defined by 
+ * hardware.
+ * If the external control gets enabled the output voltage can be changed by 
+ * software to meet operation demands. 
+ *
+ */
+int regulator_enable_ext_ctrl(struct regulator *regulator)
+{
+	struct regulator_dev *rdev = regulator->rdev;
+	int ret;
+
+	mutex_lock(&rdev->mutex);
+
+	/* sanity check */
+	if (!rdev->desc->ops->enable_ext_ctrl) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = rdev->desc->ops->enable_ext_ctrl(rdev);
+out:
+	mutex_unlock(&rdev->mutex);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(regulator_enable_ext_ctrl);
+
+/**
+ * regulator_enable_ext_ctrl - enable the external control of the output voltage
+ * @regulator: regulator source
+ * If the external control is disabled the output voltage is defined by 
+ * hardware.
+ * If the external control gets enabled the output voltage can be changed by 
+ * software to meet operation demands. 
+ *
+ */
+int regulator_disable_ext_ctrl(struct regulator *regulator)
+{
+	struct regulator_dev *rdev = regulator->rdev;
+	int ret;
+
+	mutex_lock(&rdev->mutex);
+
+	/* sanity check */
+	if (!rdev->desc->ops->disable_ext_ctrl) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = rdev->desc->ops->disable_ext_ctrl(rdev);
+out:
+	mutex_unlock(&rdev->mutex);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(regulator_disable_ext_ctrl);
+
+int regulator_get_ext_ctrl(struct regulator *regulator)
+{
+	struct regulator_dev *rdev = regulator->rdev;
+	int ret;
+
+	mutex_lock(&rdev->mutex);
+
+	/* sanity check */
+	if (!rdev->desc->ops->get_ext_ctrl) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = rdev->desc->ops->get_ext_ctrl(rdev);
+out:
+	mutex_unlock(&rdev->mutex);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(regulator_get_ext_ctrl);
+
+
+/**
  * regulator_set_mode - set regulator operating mode
  * @regulator: regulator source
  * @mode: operating mode - one of the REGULATOR_MODE constants
diff --git a/include/linux/regulator/consumer.h b/include/linux/regulator/consumer.h
--- a/include/linux/regulator/consumer.h
+++ b/include/linux/regulator/consumer.h
@@ -178,6 +178,10 @@ int regulator_set_mode(struct regulator 
 unsigned int regulator_get_mode(struct regulator *regulator);
 int regulator_set_optimum_mode(struct regulator *regulator, int load_uA);
 
+int regulator_enable_ext_ctrl(struct regulator *regulator);
+int regulator_disable_ext_ctrl(struct regulator *regulator);
+int regulator_get_ext_ctrl(struct regulator *regulator);
+
 int regulator_allow_bypass(struct regulator *regulator, bool allow);
 
 /* regulator notifier block */
@@ -331,6 +335,17 @@ static inline int regulator_set_optimum_
 	return REGULATOR_MODE_NORMAL;
 }
 
+static inline int regulator_set_bus_mode(struct regulator *regulator,
+	int bus_mode)
+{
+	return 0;
+}
+
+static inline int regulator_get_bus_mode(struct regulator *regulator)
+{
+	return 0;
+}
+
 static inline int regulator_allow_bypass(struct regulator *regulator,
 					 bool allow)
 {
diff --git a/include/linux/regulator/driver.h b/include/linux/regulator/driver.h
--- a/include/linux/regulator/driver.h
+++ b/include/linux/regulator/driver.h
@@ -122,6 +122,12 @@ struct regulator_ops {
 	int (*set_mode) (struct regulator_dev *, unsigned int mode);
 	unsigned int (*get_mode) (struct regulator_dev *);
 
+	/* get/enable/disable external output voltage control
+	   (defined in consumer.h) */
+	int (*enable_ext_ctrl) (struct regulator_dev *);
+	int (*disable_ext_ctrl) (struct regulator_dev *);
+	int (*get_ext_ctrl) (struct regulator_dev *);
+
 	/* Time taken to enable or set voltage on the regulator */
 	int (*enable_time) (struct regulator_dev *);
 	int (*set_ramp_delay) (struct regulator_dev *, int ramp_delay);
