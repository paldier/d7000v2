Support for Lantiq runction in USBNET

--- a/drivers/net/usb/usbnet.c
+++ b/drivers/net/usb/usbnet.c
@@ -32,6 +32,11 @@
 
 // #define	DEBUG			// error path messages, extra info
 // #define	VERBOSE			// more; success messages
+#ifdef CONFIG_LTQ_PPA
+#define USBNET_PPA_DP
+#endif
+#define USBNET_NOOFFSET
+#define USBNET_EXTRAOFFSET 32
 
 #include <linux/module.h>
 #include <linux/init.h>
@@ -43,9 +48,11 @@
 #include <linux/mii.h>
 #include <linux/usb.h>
 #include <linux/usb/usbnet.h>
-#include <linux/slab.h>
-#include <linux/kernel.h>
-#include <linux/pm_runtime.h>
+#ifdef USBNET_PPA_DP
+#include <net/ppa_api.h>
+#include <net/ppa_hook.h>
+#include <net/ppa_api_directpath.h>
+#endif
 
 #define DRIVER_VERSION		"22-Aug-2005"
 
@@ -63,7 +70,7 @@
  * let the USB host controller be busy for 5msec or more before an irq
  * is required, under load.  Jumbograms change the equation.
  */
-#define RX_MAX_QUEUE_MEMORY (60 * 1518)
+#define RX_MAX_QUEUE_MEMORY (180 * 1518)
 #define	RX_QLEN(dev) (((dev)->udev->speed == USB_SPEED_HIGH) ? \
 			(RX_MAX_QUEUE_MEMORY/(dev)->rx_urb_size) : 4)
 #define	TX_QLEN(dev) (((dev)->udev->speed == USB_SPEED_HIGH) ? \
@@ -91,6 +98,143 @@
 module_param (msg_level, int, 0);
 MODULE_PARM_DESC (msg_level, "Override default message level");
 
+#ifdef USBNET_PPA_DP
+	int	usbnet_addr_monitor=0;
+	static int ppa_startup_hook = 1;
+	module_param (ppa_startup_hook, int, 0);
+	MODULE_PARM_DESC (ppa_startup_hook, "0: don't hook ppa at startup, other: do hook");
+
+	static int bridge_mode = 0;
+	static int bridge_mode_running = 0;
+	module_param (bridge_mode, int, 0);
+	MODULE_PARM_DESC (bridge_mode, "0: full NAT mode other: single NAT mode");
+
+	static char *bridge_mode_mac_addr;
+	module_param(bridge_mode_mac_addr, charp, S_IRUGO);
+	MODULE_PARM_DESC(bridge_mode_mac_addr, "MAC addr for single NAT mode");
+
+	unsigned char snat_mac[6]={0,0,0,0,0,0},snat_mac_good=0;
+
+	static u8 nibble(unsigned char c)
+	{
+		if (likely(isdigit(c)))
+			return c - '0';
+		c = toupper(c);
+		if (likely(isxdigit(c)))
+			return 10 + c - 'A';
+		return 0;
+	}
+
+
+	void check_snat_mac(const char *str)
+	{
+		if (str) {
+			unsigned	i;
+
+			for (i = 0; i < 6; i++) {
+				unsigned char num;
+
+				if ((*str == '.') || (*str == ':'))
+					str++;
+				num = nibble(*str++) << 4;
+				num |= (nibble(*str++));
+				snat_mac [i] = num;
+			}
+			if (is_valid_ether_addr(snat_mac))
+			{
+				snat_mac_good=1;
+				return ;
+			}
+		}
+		snat_mac_good=0;
+		snat_mac[0]=
+		snat_mac[1]=
+		snat_mac[2]=
+		snat_mac[3]=
+		snat_mac[4]=
+		snat_mac[5]=0;
+		return ;
+	}
+
+	PPA_DIRECTPATH_CB usbnet_ppafp_cb;
+	int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev);
+	int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev);
+	int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len);
+
+	int 		usbnet_ppadp_occupied=-1;
+
+	static int  ppafp_enable=-1;
+	module_param (ppafp_enable, int, 1);
+	MODULE_PARM_DESC (ppafp_enable, "Override default ppafp_enable");
+
+	static void register_ppadp_sub(struct net_device *net)
+	{
+		uint32_t status;
+		uint32_t if_id;
+		struct usbnet		*dev = netdev_priv(net);
+
+		if(!dev->usbnet_ppadp_on || !ppa_hook_directpath_register_dev_fn )
+		{
+			dev->usbnet_ppadp_ifid=-1;
+			return;
+		}
+		if(dev->usbnet_ppadp_ifid>=0)
+			return;
+		usbnet_ppafp_cb.stop_tx_fn=usbnet_ppafp_pause_rx;
+		usbnet_ppafp_cb.start_tx_fn=usbnet_ppafp_resume_rx;
+		usbnet_ppafp_cb.rx_fn=usbnet_ppafp_start_xmit;
+#ifdef PPA_F_DIRECTPATH_WAN
+		bridge_mode_running=0;
+		if(   bridge_mode && snat_mac_good)
+		{
+			status=ppa_hook_directpath_register_dev_fn(
+					&if_id,net,
+					&usbnet_ppafp_cb,
+					PPA_F_DIRECTPATH_REGISTER
+					| PPA_F_DIRECTPATH_ETH_IF
+//					| PPA_F_DIRECTPATH_WAN
+				);
+			if(status==PPA_SUCCESS)
+				bridge_mode_running=1;
+		}
+		else
+		{
+			status=ppa_hook_directpath_register_dev_fn(
+				&if_id,net,
+				&usbnet_ppafp_cb,
+				PPA_F_DIRECTPATH_REGISTER
+				| PPA_F_DIRECTPATH_ETH_IF
+				| PPA_F_DIRECTPATH_WAN
+				);
+		}
+#else
+		status=ppa_hook_directpath_register_dev_fn(
+				&if_id,net,
+				&usbnet_ppafp_cb,
+				PPA_F_DIRECTPATH_REGISTER
+				| PPA_F_DIRECTPATH_ETH_IF
+			);
+#endif
+		if(status==PPA_SUCCESS)
+			dev->usbnet_ppadp_ifid=if_id;
+		else
+			dev->usbnet_ppadp_ifid=-1;
+	}
+
+	static void register_ppadp(struct net_device *net)
+	{
+		struct usbnet		*dev = netdev_priv(net);
+		if(!dev->usbnet_ppadp_on || dev->usbnet_ppadp_ifid>=0 || !ppa_hook_directpath_register_dev_fn )
+			return;
+		if(in_interrupt())
+			usbnet_defer_kevent (dev, EVENT_REREG_PPA);
+		else
+			register_ppadp_sub(net);
+	}
+
+
+#endif
+
 /*-------------------------------------------------------------------------*/
 
 /* handles CDC Ethernet and many other network "bulk data" interfaces */
@@ -328,6 +472,56 @@
 		skb_queue_tail(&dev->rxq_pause, skb);
 		return;
 	}
+	#ifdef USBNET_PPA_DP
+		if(usbnet_addr_monitor)
+		{
+			unsigned char *base;
+			base=skb->data;
+			printk(KERN_INFO "usbnet_skb_return() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+					,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+					,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+					,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+					,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+			);
+		}
+		if(bridge_mode && bridge_mode_running)
+		{
+			unsigned char *base;
+			base=skb->data;
+			//Set SrcMAC=UE
+#if 1
+			*(base+6 + 0)=dev->net->dev_addr [0];
+			*(base+6 + 1)=dev->net->dev_addr [1];
+			*(base+6 + 2)=dev->net->dev_addr [2];
+			*(base+6 + 3)=dev->net->dev_addr [3];
+			*(base+6 + 4)=dev->net->dev_addr [4]+1;
+			*(base+6 + 5)=dev->net->dev_addr [5];
+#endif
+			//Set DstMAC=NAT LAN PC
+			if(*(base+0 + 0)!=0xFF)
+			{
+				*(base+0 + 0)=*(snat_mac +0);
+				*(base+0 + 1)=*(snat_mac +1);
+				*(base+0 + 2)=*(snat_mac +2);
+				*(base+0 + 3)=*(snat_mac +3);
+				*(base+0 + 4)=*(snat_mac +4);
+				*(base+0 + 5)=*(snat_mac +5);
+			}
+
+			if(usbnet_addr_monitor)
+				printk(KERN_INFO "     BRGSwap  SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+						,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+						,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+						,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+						,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+				);
+		}
+	#endif
+
+	#if 0
+		if(skb->len==1470 || skb->len==1472)
+			skb_put(skb, 4);
+	#endif
 
 	skb->protocol = eth_type_trans (skb, dev->net);
 	dev->net->stats.rx_packets++;
@@ -340,14 +534,38 @@
 	if (skb_defer_rx_timestamp(skb))
 		return;
 
+	#ifdef USBNET_PPA_DP
+		if( dev->usbnet_ppadp_on)
+		{
+			register_ppadp(dev->net);
+			if( dev->usbnet_ppadp_ifid>=0 &&
+			    ppa_hook_directpath_send_fn &&
+			    ppa_hook_get_ifid_for_netif_fn)
+			{
+				uint32_t	fpstatus;
+				skb_push(skb,ETH_HLEN);
+				skb->mac_header = skb->data;
+				fpstatus = ppa_hook_directpath_send_fn(dev->usbnet_ppadp_ifid, (PPA_BUF *)skb, skb->len, 0);
+				if(!fpstatus)
+				{
+					if(usbnet_addr_monitor) printk(KERN_INFO "     Go PPA OK\n");
+					return;
+				}
+				dev_dbg(&dev->udev->dev, "ppa_hook_directpath_send_fn status %d", fpstatus);
+				skb_pull(skb,ETH_HLEN);
+				if(usbnet_addr_monitor) printk(KERN_INFO "     Go PPA NOK %d  Try kernel\n",fpstatus);
+			}
+		}
+	#endif
 	status = netif_rx (skb);
 	if (status != NET_RX_SUCCESS)
 		netif_dbg(dev, rx_err, dev->net,
 			  "netif_rx status %d\n", status);
+	if(usbnet_addr_monitor) printk(KERN_INFO "     Go KERNEL status:%d \n",status);
 }
 EXPORT_SYMBOL_GPL(usbnet_skb_return);
 
-
+
 /*-------------------------------------------------------------------------
  *
  * Network Device Driver (peer link to "Host Device", from USB host)
@@ -422,12 +640,14 @@
  */
 void usbnet_defer_kevent (struct usbnet *dev, int work)
 {
-	set_bit (work, &dev->flags);
-	if (!schedule_work (&dev->kevent)) {
-		if (net_ratelimit())
-			netdev_err(dev->net, "kevent %d may have been dropped\n", work);
-	} else {
-		netdev_dbg(dev->net, "kevent %d scheduled\n", work);
+	if(!test_and_set_bit (work, &dev->flags))
+	{
+		if (!schedule_work (&dev->kevent)) {
+			if (net_ratelimit())
+				netdev_err(dev->net, "kevent %d may have been dropped\n", work);
+		} else {
+			netdev_dbg(dev->net, "kevent %d scheduled\n", work);
+		}
 	}
 }
 EXPORT_SYMBOL_GPL(usbnet_defer_kevent);
@@ -449,8 +669,8 @@
 		usb_free_urb(urb);
 		return -ENOLINK;
 	}
-
-	skb = __netdev_alloc_skb_ip_align(dev->net, size, flags);
+	if(size>2048)	skb = netdev_alloc_skb (dev->net,size);
+	else			skb = netdev_alloc_skb (dev->net,2048);
 	if (!skb) {
 		netif_dbg(dev, rx_err, dev->net, "no rx skb\n");
 		usbnet_defer_kevent (dev, EVENT_RX_MEMORY);
@@ -458,6 +678,19 @@
 		return -ENOMEM;
 	}
 
+#if !defined(USBNET_NOOFFSET) || defined(USBNET_EXTRAOFFSET)
+	skb_reserve (skb, 0
+	#if defined(USBNET_PPA_DP) && defined(USBNET_NOOFFSET)
+		+ ( ( dev->usbnet_ppadp_on)?0:NET_IP_ALIGN )
+	#else
+		+ NET_IP_ALIGN
+	#endif
+	#if defined(USBNET_EXTRAOFFSET)
+		+ USBNET_EXTRAOFFSET
+	#endif
+		);
+#endif
+
 	entry = (struct skb_data *) skb->cb;
 	entry->urb = urb;
 	entry->dev = dev;
@@ -545,10 +778,20 @@
 	int			urb_status = urb->status;
 	enum skb_state		state;
 
+#if 1
+	if(urb->actual_length > dev->rx_urb_size)
+	{
+//		devdbg (dev, "found larger packet size (%d) more than %d",urb->actual_length, (int)(dev->rx_urb_size));
+		dev->net->stats.rx_errors++;
+		skb_put (skb, dev->rx_urb_size);
+		goto block;
+	}
+#endif
 	skb_put (skb, urb->actual_length);
 	state = rx_done;
 	entry->urb = NULL;
 
+	register_ppadp(dev->net);
 	switch (urb_status) {
 	/* success */
 	case 0:
@@ -636,6 +879,41 @@
 }
 
 /*-------------------------------------------------------------------------*/
+
+#ifdef USBNET_PPA_DP
+	int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev)
+	{
+		struct usbnet		*net = netdev_priv(dev);
+
+		set_bit(EVENT_RX_PAUSED, &net->flags);
+
+		if (netif_msg_rx_status(net))
+			dev_dbg(&net->udev->dev, "paused rx queue enabled");
+		return PPA_SUCCESS;
+	}
+
+	int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev)
+	{
+		struct usbnet		*net = netdev_priv(dev);
+		struct sk_buff *skb;
+		int num = 0;
+
+		clear_bit(EVENT_RX_PAUSED, &net->flags);
+
+		while ((skb = skb_dequeue(&net->rxq_pause)) != NULL) {
+			usbnet_skb_return(net, skb);
+			num++;
+		}
+
+		tasklet_schedule(&net->bh);
+
+		if (netif_msg_rx_status(net))
+			dev_dbg(&net->udev->dev, "paused rx queue disabled, %d skbs requeued", num);
+		return PPA_SUCCESS;
+	}
+#endif
+
+
 void usbnet_pause_rx(struct usbnet *dev)
 {
 	set_bit(EVENT_RX_PAUSED, &dev->flags);
@@ -732,6 +1010,133 @@
 
 /*-------------------------------------------------------------------------*/
 
+#ifdef USBNET_PPA_DP
+	static ssize_t show_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "%d\n",usbnet_addr_monitor);
+	}
+
+	static ssize_t store_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		char *endp;
+		unsigned long target;
+
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==1) usbnet_addr_monitor=1;
+		else usbnet_addr_monitor=0;
+		return len;
+	}
+
+	extern struct device_attribute dev_attr_addr_monitor;
+	DEVICE_ATTR(addr_monitor, S_IRUGO|S_IWUSR, show_addr_monitor, store_addr_monitor);
+
+
+	static ssize_t show_ppa_dp(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		struct net_device *netdev = to_net_dev(dev);
+		struct usbnet     *udev = netdev_priv(netdev);
+
+		return sprintf(buf, "itf_ppadp_on:%d ppadp_ifid:%d ppadp_occupied:%d\n",
+			udev->usbnet_ppadp_on,
+			udev->usbnet_ppadp_ifid,
+			usbnet_ppadp_occupied);
+	}
+
+	static ssize_t store_ppa_dp(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		struct net_device *netdev = to_net_dev(dev);
+		struct usbnet     *udev = netdev_priv(netdev);
+		char *endp;
+		unsigned long target;
+
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==0)
+		{
+			if( udev->usbnet_ppadp_ifid >= 0)
+			{
+				uint32_t if_id;
+				if( ppa_hook_directpath_rx_stop_fn)
+					ppa_hook_directpath_rx_stop_fn(udev->usbnet_ppadp_ifid,0);
+				if(ppa_hook_directpath_register_dev_fn)
+					ppa_hook_directpath_register_dev_fn(&if_id,netdev, &usbnet_ppafp_cb, 0);
+			}
+			udev->usbnet_ppadp_ifid=-1;
+			usbnet_ppadp_occupied=0;
+			bridge_mode_running=0;
+			return len;
+		}
+		else if(target==1)
+		{
+			if(ppafp_enable &&
+			   usbnet_ppadp_occupied==0 &&
+			   udev->usbnet_ppadp_on==0)
+			{
+				udev->usbnet_ppadp_on=1;
+				usbnet_ppadp_occupied=1;
+				register_ppadp(netdev);
+			}
+			return len;
+		}
+		else
+			return -EBADMSG;
+	}
+
+	extern struct device_attribute dev_attr_ppa_dp;
+	DEVICE_ATTR(ppa_dp, S_IRUGO|S_IWUSR, show_ppa_dp, store_ppa_dp);
+
+
+	static ssize_t show_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X   %s\n"
+				,snat_mac[0],snat_mac[1],snat_mac[2],snat_mac[3],snat_mac[4],snat_mac[5]
+				,snat_mac_good?"Valid":"Invalid" );
+	}
+
+	static ssize_t store_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		check_snat_mac(buf);
+		if(!snat_mac_good) bridge_mode_running = 0;
+		return len;
+	}
+
+	static ssize_t show_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf)
+	{
+		return sprintf(buf, "bridge_mode:%d running:%d  snat_mac_good:%d\n"
+			,bridge_mode
+			,bridge_mode_running
+			,snat_mac_good);
+	}
+
+	static ssize_t store_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+	{
+		char *endp;
+		unsigned long target;
+		target = simple_strtoul(buf, &endp, 0);
+		if (endp == buf)
+			return -EBADMSG;
+		if     (target==0)
+		{
+			// TBD
+			bridge_mode=0;
+			bridge_mode_running=0;
+		}
+		else
+			bridge_mode=1;
+		return len;
+	}
+
+	extern struct device_attribute dev_attr_bridge_mode_mac_addr;
+	DEVICE_ATTR(bridge_mode_mac_addr, S_IRUGO|S_IWUSR, show_bridge_mode_mac_addr, store_bridge_mode_mac_addr);
+	extern struct device_attribute dev_attr_bridge_mode;
+	DEVICE_ATTR(bridge_mode, S_IRUGO|S_IWUSR, show_bridge_mode, store_bridge_mode);
+#endif
+/*-------------------------------------------------------------------------*/
+
+
 // precondition: never called in_interrupt
 static void usbnet_terminate_urbs(struct usbnet *dev)
 {
@@ -768,6 +1173,19 @@
 
 	clear_bit(EVENT_DEV_OPEN, &dev->flags);
 	netif_stop_queue (net);
+	#ifdef USBNET_PPA_DP
+		if( dev->usbnet_ppadp_ifid >= 0)
+		{
+			uint32_t if_id;
+			if( ppa_hook_directpath_rx_stop_fn)
+				ppa_hook_directpath_rx_stop_fn(dev->usbnet_ppadp_ifid,0);
+			if(ppa_hook_directpath_register_dev_fn)
+				ppa_hook_directpath_register_dev_fn(&if_id,net, &usbnet_ppafp_cb, 0);
+		}
+		dev->usbnet_ppadp_ifid=-1;
+//		usbnet_ppadp_occupied=0;
+		bridge_mode_running=0;
+	#endif
 
 	netif_info(dev, ifdown, dev->net,
 		   "stop stats: rx/tx %lu/%lu, errs %lu/%lu\n",
@@ -842,6 +1260,15 @@
 			   info->description);
 		goto done;
 	}
+	#ifdef USBNET_PPA_DP
+		if(ppa_startup_hook && usbnet_ppadp_occupied==-1)
+		{
+			dev->usbnet_ppadp_on =1;
+			usbnet_ppadp_occupied=1;
+		}
+		dev->usbnet_ppadp_ifid =-1;
+		register_ppadp(net);
+	#endif
 
 	// insist peer be connected
 	if (info->check_connect && (retval = info->check_connect (dev)) < 0) {
@@ -861,6 +1288,11 @@
 
 	set_bit(EVENT_DEV_OPEN, &dev->flags);
 	netif_start_queue (net);
+	#ifdef USBNET_PPA_DP
+		if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid>=0 && ppa_hook_directpath_rx_restart_fn)
+				ppa_hook_directpath_rx_restart_fn(dev->usbnet_ppadp_ifid,0);
+	#endif
+
 	netif_info(dev, ifup, dev->net,
 		   "open: enable queueing (rx %d, tx %d) mtu %d %s framing\n",
 		   (int)RX_QLEN(dev), (int)TX_QLEN(dev),
@@ -1035,6 +1467,12 @@
 		container_of(work, struct usbnet, kevent);
 	int			status;
 
+#ifdef USBNET_PPA_DP
+	if (test_bit (EVENT_REREG_PPA, &dev->flags)) {
+		clear_bit (EVENT_REREG_PPA, &dev->flags);
+		register_ppadp_sub(dev->net);
+	}
+#endif
 	/* usb_clear_halt() needs a thread context */
 	if (test_bit (EVENT_TX_HALT, &dev->flags)) {
 		unlink_urbs (dev, &dev->txq);
@@ -1053,7 +1491,13 @@
 		} else {
 			clear_bit (EVENT_TX_HALT, &dev->flags);
 			if (status != -ESHUTDOWN)
+			{
+				#ifdef USBNET_PPA_DP
+					if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid >=0 && ppa_hook_directpath_rx_restart_fn)
+						ppa_hook_directpath_rx_restart_fn(dev->usbnet_ppadp_ifid,0);
+				#endif
 				netif_wake_queue (dev->net);
+			}
 		}
 	}
 	if (test_bit (EVENT_RX_HALT, &dev->flags)) {
@@ -1169,6 +1613,10 @@
 				netif_dbg(dev, link, dev->net,
 					  "tx throttle %d\n", urb->status);
 			}
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid >=0 && ppa_hook_directpath_rx_stop_fn)
+					ppa_hook_directpath_rx_stop_fn(dev->usbnet_ppadp_ifid,0);
+			#endif
 			netif_stop_queue (dev->net);
 			break;
 		default:
@@ -1182,6 +1630,61 @@
 	(void) defer_bh(dev, skb, &dev->txq, tx_done);
 }
 
+static void tx_complete_urb (struct urb *urb)
+{
+	struct sk_buff		*skb = (struct sk_buff *) urb->context;
+	struct skb_data		*entry = (struct skb_data *) skb->cb;
+	struct usbnet		*dev = entry->dev;
+
+	if (urb->status == 0) {
+		if (!(dev->driver_info->flags & FLAG_MULTI_PACKET))
+			dev->net->stats.tx_packets++;
+		dev->net->stats.tx_bytes += entry->length;
+	} else {
+		dev->net->stats.tx_errors++;
+
+		switch (urb->status) {
+		case -EPIPE:
+			usbnet_defer_kevent (dev, EVENT_TX_HALT);
+			break;
+
+		/* software-driven interface shutdown */
+		case -ECONNRESET:		// async unlink
+		case -ESHUTDOWN:		// hardware gone
+			break;
+
+		// like rx, tx gets controller i/o faults during khubd delays
+		// and so it uses the same throttling mechanism.
+		case -EPROTO:
+		case -ETIME:
+		case -EILSEQ:
+			usb_mark_last_busy(dev->udev);
+			if (!timer_pending (&dev->delay)) {
+				mod_timer (&dev->delay,
+					jiffies + THROTTLE_JIFFIES);
+				netif_dbg(dev, link, dev->net,
+					  "tx throttle %d\n", urb->status);
+			}
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid >=0 && ppa_hook_directpath_rx_stop_fn)
+					ppa_hook_directpath_rx_stop_fn(dev->usbnet_ppadp_ifid,0);
+			#endif
+			netif_stop_queue (dev->net);
+			break;
+		default:
+			netif_dbg(dev, tx_err, dev->net,
+				  "tx err %d\n", entry->urb->status);
+			break;
+		}
+	}
+
+	kfree(urb->transfer_buffer);
+	urb->transfer_buffer=NULL;
+
+	usb_autopm_put_interface_async(dev->intf);
+	(void) defer_bh(dev, skb, &dev->txq, tx_done);
+}
+
 /*-------------------------------------------------------------------------*/
 
 void usbnet_tx_timeout (struct net_device *net)
@@ -1196,6 +1699,55 @@
 EXPORT_SYMBOL_GPL(usbnet_tx_timeout);
 
 /*-------------------------------------------------------------------------*/
+#ifdef USBNET_PPA_DP
+	int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len)
+	{
+		int pktlen;
+
+if(usbnet_addr_monitor)
+{
+	unsigned char *base;
+	base=skb->data;
+	printk(KERN_INFO "usbnet_ppafp_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+}
+
+		if ( rxif )
+		{
+if(usbnet_addr_monitor) printk(KERN_INFO "     Kicked back\n");
+			if ( netif_running(rxif) )
+			{
+				pktlen = skb->len;
+				skb->dev = rxif;
+				skb->protocol = eth_type_trans(skb, rxif);
+				if ( netif_rx(skb) == NET_RX_DROP )
+					rxif->stats.rx_dropped++;
+				else
+				{
+if(usbnet_addr_monitor) printk(KERN_INFO "     Failed drop\n");
+					rxif->stats.rx_packets++;
+					rxif->stats.rx_bytes += pktlen;
+				}
+				return 0;
+			}
+if(usbnet_addr_monitor) printk(KERN_INFO "     No run\n");
+		}
+		else if ( txif )
+		{
+			skb->dev = txif;
+			dev_queue_xmit(skb);
+if(usbnet_addr_monitor) printk(KERN_INFO "     Go Tx\n");
+			return 0;
+		}
+		dev_kfree_skb_any(skb);
+		return 0;
+	}
+#endif
+
 
 netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
 				     struct net_device *net)
@@ -1208,8 +1760,31 @@
 	unsigned long		flags;
 	int retval;
 
-	if (skb)
-		skb_tx_timestamp(skb);
+	#ifdef USBNET_PPA_DP
+if(usbnet_addr_monitor)
+{
+	unsigned char *base;
+	base=skb->data;
+	printk(KERN_INFO "usbnet_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+	);
+}
+	#endif
+
+//For UL IOP issue (Anritsu and some Live network
+#if 1
+	if(	skb->data[ETH_HLEN]==0x45
+//		&& skb->data[ETH_HLEN+9]==0x06
+	) //check if ipv4 and tcp packets
+	{
+		length = skb->data[ETH_HLEN+3];
+		if(length + ETH_HLEN < skb->len)  //check length
+			skb_trim(skb, length + ETH_HLEN);
+	}
+#endif
 
 	// some devices want funky USB-level framing, for
 	// win32 driver (usually) and/or hardware quirks
@@ -1235,8 +1810,18 @@
 	entry->dev = dev;
 	entry->length = length;
 
-	usb_fill_bulk_urb (urb, dev->udev, dev->out,
-			skb->data, skb->len, tx_complete, skb);
+	if(((unsigned int)(skb->data))&3)
+	{
+		unsigned char *nbuf;
+		nbuf=kmalloc(skb->len,GFP_KERNEL);
+		memcpy(nbuf,skb->data,skb->len);
+		dma_cache_wback_inv(nbuf,skb->len);
+		usb_fill_bulk_urb (urb, dev->udev, dev->out,
+				nbuf, skb->len, tx_complete_urb, skb);
+	}
+	else
+		usb_fill_bulk_urb (urb, dev->udev, dev->out,
+				skb->data, skb->len, tx_complete, skb);
 
 	/* don't assume the hardware handles USB_ZERO_PACKET
 	 * NOTE:  strictly conforming cdc-ether devices should expect
@@ -1259,6 +1844,7 @@
 	}
 
 	spin_lock_irqsave(&dev->txq.lock, flags);
+
 	retval = usb_autopm_get_interface_async(dev->intf);
 	if (retval < 0) {
 		spin_unlock_irqrestore(&dev->txq.lock, flags);
@@ -1279,8 +1865,16 @@
 	}
 #endif
 
+	#ifdef USBNET_PPA_DP
+		register_ppadp(dev->net);
+	#endif
+
 	switch ((retval = usb_submit_urb (urb, GFP_ATOMIC))) {
 	case -EPIPE:
+		#ifdef USBNET_PPA_DP
+			if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid >=0 && ppa_hook_directpath_rx_stop_fn)
+				ppa_hook_directpath_rx_stop_fn(dev->usbnet_ppadp_ifid,0);
+		#endif
 		netif_stop_queue (net);
 		usbnet_defer_kevent (dev, EVENT_TX_HALT);
 		usb_autopm_put_interface_async(dev->intf);
@@ -1294,7 +1888,13 @@
 		net->trans_start = jiffies;
 		__usbnet_queue_skb(&dev->txq, skb, tx_start);
 		if (dev->txq.qlen >= TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid >=0 && ppa_hook_directpath_rx_stop_fn)
+					ppa_hook_directpath_rx_stop_fn(dev->usbnet_ppadp_ifid,0);
+			#endif
 			netif_stop_queue (net);
+		}
 	}
 	spin_unlock_irqrestore (&dev->txq.lock, flags);
 
@@ -1393,7 +1993,13 @@
 				tasklet_schedule (&dev->bh);
 		}
 		if (dev->txq.qlen < TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && dev->usbnet_ppadp_ifid>=0 && ppa_hook_directpath_rx_restart_fn)
+					ppa_hook_directpath_rx_restart_fn(dev->usbnet_ppadp_ifid,0);
+			#endif
 			netif_wake_queue (dev->net);
+		}
 	}
 }
 
@@ -1425,6 +2031,16 @@
 		   dev->driver_info->description);
 
 	net = dev->net;
+
+	#ifdef USBNET_PPA_DP
+		device_remove_file(&net->dev, &dev_attr_ppa_dp);
+		device_remove_file(&net->dev, &dev_attr_addr_monitor);
+		usbnet_ppadp_occupied=(ppa_startup_hook)? -1:0;
+		device_remove_file(&net->dev, &dev_attr_bridge_mode_mac_addr);
+		device_remove_file(&net->dev, &dev_attr_bridge_mode);
+		bridge_mode_running=0;
+	#endif
+
 	unregister_netdev (net);
 
 	cancel_work_sync(&dev->kevent);
@@ -1513,7 +2129,7 @@
 	skb_queue_head_init (&dev->rxq);
 	skb_queue_head_init (&dev->txq);
 	skb_queue_head_init (&dev->done);
-	skb_queue_head_init(&dev->rxq_pause);
+	skb_queue_head_init (&dev->rxq_pause);
 	dev->bh.func = usbnet_bh;
 	dev->bh.data = (unsigned long) dev;
 	INIT_WORK (&dev->kevent, kevent);
@@ -1526,6 +2142,12 @@
 	dev->interrupt_count = 0;
 
 	dev->net = net;
+
+	#ifdef USBNET_PPA_DP
+		dev->usbnet_ppadp_on   =  0;
+		dev->usbnet_ppadp_ifid = -1;
+	#endif
+
 	strcpy (net->name, "usb%d");
 	memcpy (net->dev_addr, node_id, sizeof node_id);
 
@@ -1612,6 +2234,13 @@
 	// ok, it's ready to go.
 	usb_set_intfdata (udev, dev);
 
+	#ifdef USBNET_PPA_DP
+		device_create_file(&net->dev, &dev_attr_bridge_mode_mac_addr);
+		device_create_file(&net->dev, &dev_attr_bridge_mode);
+		device_create_file(&net->dev, &dev_attr_ppa_dp);
+		device_create_file(&net->dev, &dev_attr_addr_monitor);
+	#endif
+
 	netif_device_attach (net);
 
 	if (dev->driver_info->flags & FLAG_LINK_INTR)
--- a/include/linux/usb/usbnet.h
+++ b/include/linux/usb/usbnet.h
@@ -75,6 +75,9 @@
 #		define EVENT_NO_RUNTIME_PM	9
 #		define EVENT_RX_KILL	10
 #		define EVENT_LINK_CHANGE	11
+#		define EVENT_REREG_PPA 12
+	int usbnet_ppadp_on;
+	int usbnet_ppadp_ifid;
 };
 
 static inline struct usb_driver *driver_of(struct usb_interface *intf)
