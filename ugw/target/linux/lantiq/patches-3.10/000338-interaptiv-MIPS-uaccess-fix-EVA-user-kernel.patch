# HG changeset patch
# Parent 2fedceca80b0550c48f375384589a0307ebee3f7

diff --git a/arch/mips/include/asm/uaccess.h b/arch/mips/include/asm/uaccess.h
--- a/arch/mips/include/asm/uaccess.h
+++ b/arch/mips/include/asm/uaccess.h
@@ -76,6 +76,21 @@ extern u64 __ua_limit;
 
 #define segment_eq(a, b)	((a).seg == (b).seg)
 
+/*
+ * eva_kernel_access() - determine whether kernel memory access on an EVA system
+ *
+ * Determines whether memory accesses should be performed to kernel memory
+ * on a system using Extended Virtual Addressing (EVA).
+ *
+ * Return: true if a kernel memory access on an EVA system, else false.
+ */
+static inline bool eva_kernel_access(void)
+{
+	if (!config_enabled(CONFIG_EVA))
+		return false;
+
+	return segment_eq(get_fs(), get_ds());
+}
 
 /*
  * Is a address valid? This does a straighforward calculation rather
@@ -273,7 +288,7 @@ do {									\
 	int __gu_err;                                                   \
 	const __typeof__(*(ptr)) __user * __gu_ptr = (ptr);             \
 									\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__get_kernel_common((x), size, __gu_ptr);               \
 	else {                                                          \
 		__chk_user_ptr(ptr);                                    \
@@ -301,9 +316,9 @@ do {									\
 	int __gu_err = -EFAULT;						\
 	const __typeof__(*(ptr)) __user * __gu_ptr = (ptr);		\
 									\
-	if (segment_eq(get_fs(), KERNEL_DS)) {                          \
+	if (eva_kernel_access())                                        \
 		__get_kernel_common((x), size, __gu_ptr);               \
-	} else {                                                        \
+	else {                                                        \
 		might_fault();                                          \
 		if (likely(access_ok(VERIFY_READ,  __gu_ptr, size)))    \
 			__get_user_common((x), size, __gu_ptr);         \
@@ -468,7 +483,7 @@ do {									\
 	int __pu_err = 0;                                               \
 	const __typeof__(*(ptr)) __user * __pu_ptr = (ptr);             \
 									\
-	if (segment_eq(get_fs(), KERNEL_DS)) {                          \
+	if (eva_kernel_access()) {                                      \
 		__chk_user_ptr(__pu_ptr);                               \
 		__pu_val = (x);                                         \
 		__put_kernel_common(size, __pu_ptr);                    \
@@ -486,7 +501,7 @@ do {									\
 	int __pu_err = -EFAULT;                                         \
 	const __typeof__(*(ptr)) __user * __pu_ptr = (ptr);             \
 									\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__put_kernel_common(size, __pu_ptr);                    \
 	else {                                                          \
 		might_fault();                                          \
@@ -1014,7 +1029,7 @@ extern size_t __copy_touser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__cu_len = __invoke_copy_to_kernel(__cu_to, __cu_from, __cu_len); \
 	else {                                                          \
 		might_fault();                                                  \
@@ -1061,7 +1076,7 @@ extern size_t __copy_touser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__cu_len = __invoke_copy_to_kernel(__cu_to, __cu_from, __cu_len); \
 	else                                                            \
 		__cu_len = __invoke_copy_to_user(__cu_to, __cu_from, __cu_len); \
@@ -1077,7 +1092,7 @@ extern size_t __copy_touser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__cu_len = __invoke_copy_from_kernel_inatomic(__cu_to, __cu_from, \
 						    __cu_len);          \
 	else                                                            \
@@ -1127,7 +1142,7 @@ extern size_t __copy_touser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__cu_len = __invoke_copy_to_kernel(__cu_to, __cu_from,  \
 						 __cu_len);             \
 	else                                                            \
@@ -1307,9 +1322,14 @@ extern size_t __copy_inuser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	might_fault();							\
-	__cu_len = __invoke_copy_from_user(__cu_to, __cu_from,		\
+	if (eva_kernel_access())					\
+		__cu_len = __invoke_copy_from_kernel(__cu_to, __cu_from,\
 					   __cu_len);                   \
+	else {								\
+		might_fault();						\
+		__cu_len = __invoke_copy_from_user(__cu_to, __cu_from,	\
+					   __cu_len);                   \
+	}								\
 	__cu_len;							\
 })
 #endif
@@ -1357,7 +1377,7 @@ extern size_t __copy_inuser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (segment_eq(get_fs(), KERNEL_DS))                            \
+	if (eva_kernel_access())                                        \
 		__cu_len = __invoke_copy_from_kernel(__cu_to, __cu_from,  \
 						   __cu_len);           \
 	else                                                            \
@@ -1413,9 +1433,14 @@ extern size_t __copy_inuser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	might_fault();							\
+	if (eva_kernel_access())					\
+		__cu_len = __invoke_copy_from_kernel(__cu_to, __cu_from,\
+					   __cu_len);                   \
+	else {								\
+		might_fault();						\
 	__cu_len = __invoke_copy_in_user(__cu_to, __cu_from,          \
-					 __cu_len);                   \
+					   __cu_len);                   \
+	}								\
 	__cu_len;							\
 })
 
@@ -1428,11 +1453,16 @@ extern size_t __copy_inuser(void *__to, 
 	__cu_to = (to);							\
 	__cu_from = (from);						\
 	__cu_len = (n);							\
-	if (likely(access_ok(VERIFY_READ, __cu_from, __cu_len) &&	\
+	if (eva_kernel_access())					\
+		__cu_len = __invoke_copy_from_kernel(__cu_to, __cu_from,\
+					   __cu_len);                   \
+	else {								\
+		if (likely(access_ok(VERIFY_READ, __cu_from, __cu_len) &&\
 		   access_ok(VERIFY_WRITE, __cu_to, __cu_len))) {	\
 		might_fault();						\
 		__cu_len = __invoke_copy_in_user(__cu_to, __cu_from,  \
 						 __cu_len);           \
+		}							\
 	}								\
 	__cu_len;							\
 })
@@ -1507,20 +1537,28 @@ __strncpy_from_user(char *__to, const ch
 {
 	long res;
 
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-		"move\t$5, %2\n\t"
-		"move\t$6, %3\n\t"
-#ifndef CONFIG_EVA
-		__MODULE_JAL(__strncpy_from_kernel_nocheck_asm)
-#else
-		__MODULE_JAL(__strncpy_from_user_nocheck_asm)
-#endif
+	if (eva_kernel_access()) {
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			"move\t$6, %3\n\t"
+			__MODULE_JAL(__strncpy_from_kernel_nocheck_asm)
 		"move\t%0, $2"
 		: "=r" (res)
 		: "r" (__to), "r" (__from), "r" (__len)
 		: "$2", "$3", "$4", "$5", "$6", __UA_t0, "$31", "memory");
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			"move\t$6, %3\n\t"
+			__MODULE_JAL(__strncpy_from_user_nocheck_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (__to), "r" (__from), "r" (__len)
+			: "$2", "$3", "$4", "$5", "$6", __UA_t0, "$31", "memory");
+	}
 
 	return res;
 }
@@ -1568,7 +1606,7 @@ strncpy_from_user(char *__to, const char
 {
 	long res;
 
-	if (segment_eq(get_fs(), KERNEL_DS)) {
+	if (eva_kernel_access()) {
 		__asm__ __volatile__(
 			"move\t$4, %1\n\t"
 			"move\t$5, %2\n\t"
@@ -1578,19 +1616,18 @@ strncpy_from_user(char *__to, const char
 			: "=r" (res)
 			: "r" (__to), "r" (__from), "r" (__len)
 			: "$2", "$3", "$4", "$5", "$6", __UA_t0, "$31", "memory");
-		return res;
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			"move\t$6, %3\n\t"
+			__MODULE_JAL(__strncpy_from_user_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (__to), "r" (__from), "r" (__len)
+			: "$2", "$3", "$4", "$5", "$6", __UA_t0, "$31", "memory");
 	}
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-		"move\t$5, %2\n\t"
-		"move\t$6, %3\n\t"
-		__MODULE_JAL(__strncpy_from_user_asm)
-		"move\t%0, $2"
-		: "=r" (res)
-		: "r" (__to), "r" (__from), "r" (__len)
-		: "$2", "$3", "$4", "$5", "$6", __UA_t0, "$31", "memory");
-
 	return res;
 }
 #endif
@@ -1600,19 +1637,24 @@ static inline long __strlen_user(const c
 {
 	long res;
 
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-#ifndef CONFIG_EVA
-		__MODULE_JAL(__strlen_kernel_nocheck_asm)
-#else
-		__MODULE_JAL(__strlen_user_nocheck_asm)
-#endif
-		"move\t%0, $2"
-		: "=r" (res)
-		: "r" (s)
-		: "$2", "$4", __UA_t0, "$31");
-
+	if (eva_kernel_access()) {
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			__MODULE_JAL(__strlen_kernel_nocheck_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s)
+			: "$2", "$4", __UA_t0, "$31");
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			__MODULE_JAL(__strlen_user_nocheck_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s)
+			: "$2", "$4", __UA_t0, "$31");
+	}
 	return res;
 }
 
@@ -1634,19 +1676,24 @@ static inline long strlen_user(const cha
 {
 	long res;
 
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-#ifndef CONFIG_EVA
-		__MODULE_JAL(__strlen_kernel_asm)
-#else
-		__MODULE_JAL(__strlen_user_asm)
-#endif
-		"move\t%0, $2"
-		: "=r" (res)
-		: "r" (s)
-		: "$2", "$4", __UA_t0, "$31");
-
+	if (eva_kernel_access()) {
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			__MODULE_JAL(__strlen_kernel_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s)
+			: "$2", "$4", __UA_t0, "$31");
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			__MODULE_JAL(__strlen_user_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s)
+			: "$2", "$4", __UA_t0, "$31");
+	}
 	return res;
 }
 
@@ -1655,20 +1702,26 @@ static inline long __strnlen_user(const 
 {
 	long res;
 
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-		"move\t$5, %2\n\t"
-#ifndef CONFIG_EVA
-		__MODULE_JAL(__strnlen_kernel_nocheck_asm)
-#else
-		__MODULE_JAL(__strnlen_user_nocheck_asm)
-#endif
-		"move\t%0, $2"
-		: "=r" (res)
-		: "r" (s), "r" (n)
-		: "$2", "$4", "$5", __UA_t0, "$31");
-
+	if (eva_kernel_access()) {
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			__MODULE_JAL(__strnlen_kernel_nocheck_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s), "r" (n)
+			: "$2", "$4", "$5", __UA_t0, "$31");
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			__MODULE_JAL(__strnlen_user_nocheck_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s), "r" (n)
+			: "$2", "$4", "$5", __UA_t0, "$31");
+	}
 	return res;
 }
 
@@ -1708,7 +1761,7 @@ static inline long strnlen_user(const ch
 {
 	long res;
 
-	if (segment_eq(get_fs(), KERNEL_DS)) {
+	if (eva_kernel_access()) {
 		__asm__ __volatile__(
 			"move\t$4, %1\n\t"
 			"move\t$5, %2\n\t"
@@ -1717,18 +1770,17 @@ static inline long strnlen_user(const ch
 			: "=r" (res)
 			: "r" (s), "r" (n)
 			: "$2", "$4", "$5", __UA_t0, "$31");
-		return res;
+	} else {
+		might_fault();
+		__asm__ __volatile__(
+			"move\t$4, %1\n\t"
+			"move\t$5, %2\n\t"
+			__MODULE_JAL(__strnlen_user_asm)
+			"move\t%0, $2"
+			: "=r" (res)
+			: "r" (s), "r" (n)
+			: "$2", "$4", "$5", __UA_t0, "$31");
 	}
-	might_fault();
-	__asm__ __volatile__(
-		"move\t$4, %1\n\t"
-		"move\t$5, %2\n\t"
-		__MODULE_JAL(__strnlen_user_asm)
-		"move\t%0, $2"
-		: "=r" (res)
-		: "r" (s), "r" (n)
-		: "$2", "$4", "$5", __UA_t0, "$31");
-
 	return res;
 }
 #endif
