# HG changeset patch
# Parent 0974b2cea2b9922908addae1b56dba57e0867b05

diff --git a/include/linux/init.h b/include/linux/init.h
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@ -39,6 +39,18 @@
  * Also note, that this data cannot be "const".
  */
 
+#ifdef CONFIG_LTQ_IPQOS_EBT_OPT
+#define __ebt_optimized __section(ebt_optimized)
+#else 
+#define __ebt_optimized
+#endif
+
+#ifdef CONFIG_LTQ_IPQOS_IPT_NF_OPT
+#define __ipt_optimized __section(ipt_optimized)
+#else 
+#define __ipt_optimized
+#endif
+
 /* These are for everybody (although not all archs will actually
    discard it in modules) */
 #define __init		__section(.init.text) __cold notrace
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -281,7 +281,7 @@ void br_fdb_delete_by_port(struct net_br
 }
 
 /* No locking or refcounting, assumes caller has rcu_read_lock */
-struct net_bridge_fdb_entry *__br_fdb_get(struct net_bridge *br,
+struct net_bridge_fdb_entry * __ebt_optimized __br_fdb_get(struct net_bridge *br,
 					  const unsigned char *addr,
 					  __u16 vid)
 {
@@ -467,7 +467,7 @@ int br_fdb_insert(struct net_bridge *br,
 	return ret;
 }
 
-void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
+void __ebt_optimized br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 		   const unsigned char *addr, u16 vid)
 {
 	struct hlist_head *head = &br->hash[br_mac_hash(addr, vid)];
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -44,7 +44,7 @@ static inline unsigned int packet_length
 	return skb->len - (skb->protocol == htons(ETH_P_8021Q) ? VLAN_HLEN : 0);
 }
 
-int br_dev_queue_push_xmit(struct sk_buff *skb)
+int __ebt_optimized br_dev_queue_push_xmit(struct sk_buff *skb)
 {
 	/* ip_fragment doesn't copy the MAC header */
 	if (nf_bridge_maybe_copy_header(skb) ||
@@ -68,7 +68,7 @@ int br_dev_queue_push_xmit(struct sk_buf
 	return 0;
 }
 
-int br_forward_finish(struct sk_buff *skb)
+int __ebt_optimized br_forward_finish(struct sk_buff *skb)
 {
 #ifdef CONFIG_LANTIQ_IPQOS_MARK_SKBPRIO
 	skb_mark_priority(skb);
@@ -100,7 +100,7 @@ static void __br_deliver(const struct ne
 		br_forward_finish);
 }
 
-static void __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
+static void __ebt_optimized __br_forward(const struct net_bridge_port *to, struct sk_buff *skb)
 {
 	struct net_device *indev;
 
@@ -133,7 +133,7 @@ void br_deliver(const struct net_bridge_
 }
 
 /* called with rcu_read_lock */
-void br_forward(const struct net_bridge_port *to, struct sk_buff *skb, struct sk_buff *skb0)
+void __ebt_optimized br_forward(const struct net_bridge_port *to, struct sk_buff *skb, struct sk_buff *skb0)
 {
 	if (should_deliver(to, skb) && !(to->flags & BR_ISOLATE_MODE)) {
 		if (skb0)
@@ -187,7 +187,7 @@ out:
 }
 
 /* called under bridge lock */
-static void br_flood(struct net_bridge *br, struct sk_buff *skb,
+static void __ebt_optimized br_flood(struct net_bridge *br, struct sk_buff *skb,
 		     struct sk_buff *skb0,
 		     void (*__packet_hook)(const struct net_bridge_port *p,
 					   struct sk_buff *skb),
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -24,7 +24,7 @@
 br_should_route_hook_t __rcu *br_should_route_hook __read_mostly;
 EXPORT_SYMBOL(br_should_route_hook);
 
-static int br_pass_frame_up(struct sk_buff *skb)
+static int __ebt_optimized br_pass_frame_up(struct sk_buff *skb)
 {
 	struct net_device *indev, *brdev = BR_INPUT_SKB_CB(skb)->brdev;
 	struct net_bridge *br = netdev_priv(brdev);
@@ -57,7 +57,7 @@ static int br_pass_frame_up(struct sk_bu
 }
 
 /* note: already called with rcu_read_lock */
-int br_handle_frame_finish(struct sk_buff *skb)
+int __ebt_optimized br_handle_frame_finish(struct sk_buff *skb)
 {
 	const unsigned char *dest = eth_hdr(skb)->h_dest;
 	struct net_bridge_port *p = br_port_get_rcu(skb->dev);
@@ -158,7 +158,7 @@ static int br_handle_local_finish(struct
  * Return NULL if skb is handled
  * note: already called with rcu_read_lock
  */
-rx_handler_result_t br_handle_frame(struct sk_buff **pskb)
+rx_handler_result_t __ebt_optimized br_handle_frame(struct sk_buff **pskb)
 {
 	struct net_bridge_port *p;
 	struct sk_buff *skb = *pskb;
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -723,9 +723,10 @@ BR_HOOK(uint8_t pf, unsigned int hook, s
 	struct net_device *in, struct net_device *out,
 	int (*okfn)(struct sk_buff *))
 {
+#ifdef CONFIG_BRIDGE_NETFILTER
 	if (!br_netfilter_run_hooks())
 		return okfn(skb);
-
+#endif
 	return NF_HOOK(pf, hook, skb, in, out, okfn);
 }
 
diff --git a/net/bridge/netfilter/Kconfig b/net/bridge/netfilter/Kconfig
--- a/net/bridge/netfilter/Kconfig
+++ b/net/bridge/netfilter/Kconfig
@@ -14,6 +14,14 @@ menuconfig BRIDGE_NF_EBTABLES
 if BRIDGE_NF_EBTABLES
 
 #
+# Optimization
+#
+config LTQ_IPQOS_EBT_OPT
+	bool "LTQ Ebtables Optimizations"
+	depends on  BRIDGE && BRIDGE_NF_EBTABLES
+	help
+	  If selected, ebtables & bridge basic codes are put in same cache section.
+#
 # tables
 #
 config BRIDGE_EBT_BROUTE
@@ -35,6 +43,20 @@ config BRIDGE_EBT_T_FILTER
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config LTQ_IPQOS_BRIDGE_EBT_T_FILTER_INPUT
+	bool "ebt: filter table input hook support"
+	depends on BRIDGE_EBT_T_FILTER
+	default y
+	help
+	  Option whether you want to enable/disable ebt filter input hook.
+
+config LTQ_IPQOS_BRIDGE_EBT_T_FILTER_OUTPUT
+	bool "ebt: filter table output hook support"
+	depends on BRIDGE_EBT_T_FILTER
+	default y
+	help
+	  Option whether you want to enable/disable ebt filter output hook.
+
 config BRIDGE_EBT_T_NAT
 	tristate "ebt: nat table support"
 	help
diff --git a/net/bridge/netfilter/ebt_ip.c b/net/bridge/netfilter/ebt_ip.c
--- a/net/bridge/netfilter/ebt_ip.c
+++ b/net/bridge/netfilter/ebt_ip.c
@@ -24,7 +24,7 @@ struct tcpudphdr {
 	__be16 dst;
 };
 
-static bool
+static bool __ebt_optimized 
 ebt_ip_mt(const struct sk_buff *skb, struct xt_action_param *par)
 {
 	const struct ebt_ip_info *info = par->matchinfo;
diff --git a/net/bridge/netfilter/ebt_mark.c b/net/bridge/netfilter/ebt_mark.c
--- a/net/bridge/netfilter/ebt_mark.c
+++ b/net/bridge/netfilter/ebt_mark.c
@@ -18,7 +18,7 @@
 #include <linux/netfilter_bridge/ebtables.h>
 #include <linux/netfilter_bridge/ebt_mark_t.h>
 
-static unsigned int
+static unsigned int __ebt_optimized 
 ebt_mark_tg(struct sk_buff *skb, const struct xt_action_param *par)
 {
 	const struct ebt_mark_t_info *info = par->targinfo;
diff --git a/net/bridge/netfilter/ebt_mark_m.c b/net/bridge/netfilter/ebt_mark_m.c
--- a/net/bridge/netfilter/ebt_mark_m.c
+++ b/net/bridge/netfilter/ebt_mark_m.c
@@ -12,7 +12,7 @@
 #include <linux/netfilter_bridge/ebtables.h>
 #include <linux/netfilter_bridge/ebt_mark_m.h>
 
-static bool
+static bool __ebt_optimized 
 ebt_mark_mt(const struct sk_buff *skb, struct xt_action_param *par)
 {
 	const struct ebt_mark_m_info *info = par->matchinfo;
diff --git a/net/bridge/netfilter/ebt_vlan.c b/net/bridge/netfilter/ebt_vlan.c
--- a/net/bridge/netfilter/ebt_vlan.c
+++ b/net/bridge/netfilter/ebt_vlan.c
@@ -35,7 +35,7 @@ MODULE_LICENSE("GPL");
 #define GET_BITMASK(_BIT_MASK_) info->bitmask & _BIT_MASK_
 #define EXIT_ON_MISMATCH(_MATCH_,_MASK_) {if (!((info->_MATCH_ == _MATCH_)^!!(info->invflags & _MASK_))) return false; }
 
-static bool
+static bool __ebt_optimized 
 ebt_vlan_mt(const struct sk_buff *skb, struct xt_action_param *par)
 {
 	const struct ebt_vlan_info *info = par->matchinfo;
diff --git a/net/bridge/netfilter/ebtable_filter.c b/net/bridge/netfilter/ebtable_filter.c
--- a/net/bridge/netfilter/ebtable_filter.c
+++ b/net/bridge/netfilter/ebtable_filter.c
@@ -59,7 +59,7 @@ static const struct ebt_table frame_filt
 	.me		= THIS_MODULE,
 };
 
-static unsigned int
+static unsigned int __ebt_optimized 
 ebt_in_hook(unsigned int hook, struct sk_buff *skb, const struct net_device *in,
    const struct net_device *out, int (*okfn)(struct sk_buff *))
 {
@@ -74,6 +74,7 @@ ebt_out_hook(unsigned int hook, struct s
 }
 
 static struct nf_hook_ops ebt_ops_filter[] __read_mostly = {
+#ifdef CONFIG_LTQ_IPQOS_BRIDGE_EBT_T_FILTER_INPUT
 	{
 		.hook		= ebt_in_hook,
 		.owner		= THIS_MODULE,
@@ -81,6 +82,7 @@ static struct nf_hook_ops ebt_ops_filter
 		.hooknum	= NF_BR_LOCAL_IN,
 		.priority	= NF_BR_PRI_FILTER_BRIDGED,
 	},
+#endif
 	{
 		.hook		= ebt_in_hook,
 		.owner		= THIS_MODULE,
@@ -88,6 +90,7 @@ static struct nf_hook_ops ebt_ops_filter
 		.hooknum	= NF_BR_FORWARD,
 		.priority	= NF_BR_PRI_FILTER_BRIDGED,
 	},
+#ifdef CONFIG_LTQ_IPQOS_BRIDGE_EBT_T_FILTER_INPUT
 	{
 		.hook		= ebt_out_hook,
 		.owner		= THIS_MODULE,
@@ -95,6 +98,7 @@ static struct nf_hook_ops ebt_ops_filter
 		.hooknum	= NF_BR_LOCAL_OUT,
 		.priority	= NF_BR_PRI_FILTER_OTHER,
 	},
+#endif
 };
 
 static int __net_init frame_filter_net_init(struct net *net)
diff --git a/net/bridge/netfilter/ebtables.c b/net/bridge/netfilter/ebtables.c
--- a/net/bridge/netfilter/ebtables.c
+++ b/net/bridge/netfilter/ebtables.c
@@ -121,6 +121,16 @@ ebt_dev_check(const char *entry, const s
 	return (devname[i] != entry[i] && entry[i] != 1);
 }
 
+static inline unsigned compare_ether_addr_with_mask(const u8 *addr1, const u8 *addr2, const u8 *mask)
+{
+        const u16 *a = (const u16 *) addr1;
+        const u16 *b = (const u16 *) addr2;
+        const u16 *c = (const u16 *) mask;
+	
+        BUILD_BUG_ON(ETH_ALEN != 6);
+        return (((a[0] ^ b[0]) & mask[0]) | ((a[1] ^ b[1]) & mask[1]) | ((a[2] ^ b[2]) & mask[2])) != 0;
+}
+
 #define FWINV2(bool,invflg) ((bool) ^ !!(e->invflags & invflg))
 /* process standard matches */
 static inline int
@@ -157,18 +167,12 @@ ebt_basic_match(const struct ebt_entry *
 		return 1;
 
 	if (e->bitmask & EBT_SOURCEMAC) {
-		verdict = 0;
-		for (i = 0; i < 6; i++)
-			verdict |= (h->h_source[i] ^ e->sourcemac[i]) &
-			   e->sourcemsk[i];
+		verdict = compare_ether_addr_with_mask(h->h_source,e->sourcemac,e->sourcemsk);
 		if (FWINV2(verdict != 0, EBT_ISOURCE) )
 			return 1;
 	}
 	if (e->bitmask & EBT_DESTMAC) {
-		verdict = 0;
-		for (i = 0; i < 6; i++)
-			verdict |= (h->h_dest[i] ^ e->destmac[i]) &
-			   e->destmsk[i];
+		verdict = compare_ether_addr_with_mask(h->h_dest,e->destmac,e->destmsk);
 		if (FWINV2(verdict != 0, EBT_IDEST) )
 			return 1;
 	}
@@ -182,7 +186,7 @@ struct ebt_entry *ebt_next_entry(const s
 }
 
 /* Do some firewalling */
-unsigned int ebt_do_table (unsigned int hook, struct sk_buff *skb,
+unsigned int __ebt_optimized ebt_do_table (unsigned int hook, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out,
    struct ebt_table *table)
 {
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -104,7 +104,7 @@ static int ip_forward_finish_gso(struct 
 	return ret;
 }
 
-static int ip_forward_finish(struct sk_buff *skb)
+static int __ipt_optimized ip_forward_finish(struct sk_buff *skb)
 {
 	struct ip_options *opt	= &(IPCB(skb)->opt);
 
@@ -120,7 +120,7 @@ static int ip_forward_finish(struct sk_b
 	return dst_output(skb);
 }
 
-int ip_forward(struct sk_buff *skb)
+int __ipt_optimized ip_forward(struct sk_buff *skb)
 {
 	struct iphdr *iph;	/* Our header */
 	struct rtable *rt;	/* Route we use */
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -331,7 +331,7 @@ drop:
 int sysctl_ip_early_demux __read_mostly = 1;
 EXPORT_SYMBOL(sysctl_ip_early_demux);
 
-static int ip_rcv_finish(struct sk_buff *skb)
+static int __ipt_optimized ip_rcv_finish(struct sk_buff *skb)
 {
 	const struct iphdr *iph = ip_hdr(skb);
 	struct rtable *rt;
@@ -395,7 +395,7 @@ drop:
 /*
  * 	Main IP Receive routine.
  */
-int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
+int __ipt_optimized ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
 {
 	const struct iphdr *iph;
 	u32 len;
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -254,7 +254,7 @@ static inline int ip_skb_dst_mtu(struct 
 	       skb_dst(skb)->dev->mtu : dst_mtu(skb_dst(skb));
 }
 
-static int ip_finish_output(struct sk_buff *skb)
+static int __ipt_optimized ip_finish_output(struct sk_buff *skb)
 {
 #if defined(CONFIG_NETFILTER) && defined(CONFIG_XFRM)
 	/* Policy lookup after SNAT yielded a new policy */
@@ -275,7 +275,7 @@ static int ip_finish_output(struct sk_bu
 	}
 }
 
-int ip_mc_output(struct sk_buff *skb)
+int __ipt_optimized ip_mc_output(struct sk_buff *skb)
 {
 	struct sock *sk = skb->sk;
 	struct rtable *rt = skb_rtable(skb);
@@ -336,7 +336,7 @@ int ip_mc_output(struct sk_buff *skb)
 			    !(IPCB(skb)->flags & IPSKB_REROUTED));
 }
 
-int ip_output(struct sk_buff *skb)
+int __ipt_optimized ip_output(struct sk_buff *skb)
 {
 	struct net_device *dev = skb_dst(skb)->dev;
 
diff --git a/net/ipv4/netfilter/Kconfig b/net/ipv4/netfilter/Kconfig
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -57,6 +57,11 @@ config IP_NF_IPTABLES
 
 if IP_NF_IPTABLES
 
+config LTQ_IPQOS_IPT_NF_OPT
+	bool "optimized iptables path"
+	help
+	  Put basic routing path and iptables codes into same code section.
+	  
 # The matches.
 config IP_NF_MATCH_AH
 	tristate '"ah" match support'
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -340,7 +340,7 @@ ipt_handle_default_rule(struct ipt_entry
 }
 
 /* Returns one of the generic firewall policies, like NF_ACCEPT. */
-unsigned int
+unsigned int __ipt_optimized 
 ipt_do_table(struct sk_buff *skb,
 	     unsigned int hook,
 	     const struct net_device *in,
diff --git a/net/ipv4/netfilter/iptable_nat.c b/net/ipv4/netfilter/iptable_nat.c
--- a/net/ipv4/netfilter/iptable_nat.c
+++ b/net/ipv4/netfilter/iptable_nat.c
@@ -44,7 +44,7 @@ static unsigned int alloc_null_binding(s
 	return nf_nat_setup_info(ct, &range, HOOK2MANIP(hooknum));
 }
 
-static unsigned int nf_nat_rule_find(struct sk_buff *skb, unsigned int hooknum,
+static unsigned int __ipt_optimized nf_nat_rule_find(struct sk_buff *skb, unsigned int hooknum,
 				     const struct net_device *in,
 				     const struct net_device *out,
 				     struct nf_conn *ct)
