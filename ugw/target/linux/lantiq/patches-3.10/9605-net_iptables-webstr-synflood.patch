/*iptables patch to include webstr and synflood addons */

diff --git a/include/linux/netfilter/x_tables.h b/include/linux/netfilter/x_tables.h
--- a/include/linux/netfilter/x_tables.h
+++ b/include/linux/netfilter/x_tables.h
@@ -65,6 +65,31 @@ struct xt_mtchk_param {
 };
 
 /**
+ * struct xt_match_param - parameters for match extensions' match functions
+ *
+ * @in:		input netdevice
+ * @out:	output netdevice
+ * @match:	struct xt_match through which this function was invoked
+ * @matchinfo:	per-match data
+ * @fragoff:	packet is a fragment, this is the data offset
+ * @thoff:	position of transport header relative to skb->data
+ * @hook:	hook number given packet came from
+ * @family:	Actual NFPROTO_* through which the function is invoked
+ * 		(helpful when match->family == NFPROTO_UNSPEC)
+ * @hotdrop:	drop packet if we had inspection problems
+ */
+struct xt_match_param {
+	const struct net_device *in, *out;
+	const struct xt_match *match;
+	const void *matchinfo;
+	int fragoff;
+	unsigned int thoff;
+	unsigned int hooknum;
+	u_int8_t family;
+	bool *hotdrop;
+};
+
+/**
  * struct xt_mdtor_param - match destructor parameters
  * Fields as above.
  */
diff --git a/include/linux/netfilter_ipv4/ipt_synflood.h b/include/linux/netfilter_ipv4/ipt_synflood.h
new file mode 100644
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_synflood.h
@@ -0,0 +1,36 @@
+#ifndef _IPT_SYNFLOOD_H
+#define _IPT_SYNFLOOD_H
+
+#include <linux/param.h>
+#include <linux/types.h>
+#include <linux/netfilter/xt_limit.h>
+#define IPT_LIMIT_SCALE XT_LIMIT_SCALE
+#define ipt_rateinfo xt_rateinfo
+
+/* 1/10,000 sec period => max of 10,000/sec.  Min rate is then 429490
+   seconds, or one every 59 hours. */
+/*
+ * Keep track of up to LIST_SIZE source addresses, using a hash table of
+ * HASH_SIZE entries for faster lookups, but limiting hash collisions to
+ * HASH_MAX source addresses per the same hash value.
+ */
+#define LIST_SIZE                      0x40
+#define HASH_LOG                       7
+#define HASH_SIZE                      (1 << HASH_LOG)
+#define HASH_MAX                       0x10
+
+enum addr_type_t { DESTINATION=0, SOURCE };
+#if 0
+struct ipt_rateinfo {
+       u_int32_t avg;    /* Average secs between packets * scale */
+       u_int32_t burst;  /* Period multiplier for upper limit. */
+       u_int8_t  invert; /* Invert */
+
+       /* Used internally by the kernel */
+       u_int32_t credit;
+       u_int32_t credit_cap, cost;
+       enum addr_type_t addr_type;
+};
+#endif
+#endif /*_IPT_SYNFLOOD_H*/
+
diff --git a/include/linux/netfilter_ipv4/ipt_webstr.h b/include/linux/netfilter_ipv4/ipt_webstr.h
new file mode 100644
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_webstr.h
@@ -0,0 +1,28 @@
+#ifndef _IPT_WEBSTR_H
+#define _IPT_WEBSTR_H
+
+#define BM_MAX_NLEN 256
+#define BM_MAX_HLEN 1024
+
+#define BLK_JAVA		0x01
+#define BLK_ACTIVE		0x02
+#define BLK_COOKIE		0x04
+#define BLK_PROXY		0x08
+
+typedef char *(*proc_ipt_search) (char *, char *, int, int);
+
+struct ipt_webstr_info {
+    char string[BM_MAX_NLEN];
+    u_int16_t invert;
+    u_int16_t len;
+    u_int8_t type;
+};
+
+enum ipt_webstr_type
+{
+    IPT_WEBSTR_HOST,
+    IPT_WEBSTR_URL,
+    IPT_WEBSTR_CONTENT
+};
+
+#endif /* _IPT_WEBSTR_H */
diff --git a/net/ipv4/netfilter/Kconfig b/net/ipv4/netfilter/Kconfig
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -9,6 +9,13 @@ config NF_DEFRAG_IPV4
 	tristate
 	default n
 
+config LTQ_NF_ADDONS
+        bool 'LTQ netfilter addons'
+	default y
+        help
+          If chosen, all the additions done by LTQ to netfilters
+          could be slected. It is recommended to be alwyas on.
+
 config NF_CONNTRACK_IPV4
 	tristate "IPv4 connection tracking support (required for NAT)"
 	depends on NF_CONNTRACK
@@ -286,6 +293,18 @@ config IP_NF_SECURITY
 	 
 	  If unsure, say N.
 
+config IP_NF_MATCH_WEBSTR
+       tristate 'webstring type match support'
+       default y	
+       help
+         This allows one to filter packets based on the string they contain.
+
+config IP_NF_MATCH_SYNFLOOD
+       tristate "synflood match support"
+       depends on IP_NF_IPTABLES && LTQ_NF_ADDONS
+       help
+         Firewall support against synflood DOS attack.
+
 endif # IP_NF_IPTABLES
 
 # ARP tables
diff --git a/net/ipv4/netfilter/Makefile b/net/ipv4/netfilter/Makefile
--- a/net/ipv4/netfilter/Makefile
+++ b/net/ipv4/netfilter/Makefile
@@ -40,6 +40,8 @@ obj-$(CONFIG_IP_NF_SECURITY) += iptable_
 # matches
 obj-$(CONFIG_IP_NF_MATCH_AH) += ipt_ah.o
 obj-$(CONFIG_IP_NF_MATCH_RPFILTER) += ipt_rpfilter.o
+obj-$(CONFIG_IP_NF_MATCH_WEBSTR) += ipt_webstr.o
+obj-$(CONFIG_IP_NF_MATCH_SYNFLOOD) += ipt_synflood.o
 
 # targets
 obj-$(CONFIG_IP_NF_TARGET_CLUSTERIP) += ipt_CLUSTERIP.o
diff --git a/net/ipv4/netfilter/ipt_synflood.c b/net/ipv4/netfilter/ipt_synflood.c
new file mode 100644
--- /dev/null
+++ b/net/ipv4/netfilter/ipt_synflood.c
@@ -0,0 +1,236 @@
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_synflood.h>
+
+/*
+   To avoid underflow, we multiply by 128 (ie. you get 128 credits per
+   jiffy).  Hence a cost of 2^32-1, means one pass per 32768 seconds
+   at 1024HZ (or one every 9 hours).  A cost of 1 means 12800 passes
+   per second at 100HZ.  */
+
+#define CREDITS_PER_JIFFY 128
+/************************************************************/
+/*
+ * Information we keep per each source address.
+ */
+struct host {
+	struct host *next;		/* Next entry with the same hash */
+	unsigned long timestamp;		/* Last update time */
+	struct in_addr ip_addr;	/* Source address */
+	u_int32_t credit;			/* Total credit of addresses in the list */
+};
+
+/*
+ * State information.
+ */
+static struct repo_state{
+	spinlock_t lock;
+	struct host list[LIST_SIZE];	/* List of source addresses */
+	struct host *hash[HASH_SIZE];	/* Hash: pointers into the list */
+	int index;			/* Oldest entry to be replaced */
+#if 0
+} src_state,dst_state;
+#else
+} dst_state;
+#endif
+
+/*
+ * Convert an IP address into a hash table index.
+ */
+static inline int hashfunc(struct in_addr addr)
+{
+	unsigned int value;
+	int hash;
+
+	value = addr.s_addr;
+	hash = 0;
+	do {
+		hash ^= value;
+	} while ((value >>= HASH_LOG));
+
+	return hash & (HASH_SIZE - 1);
+}
+
+
+/* Precision saver. */
+static u_int32_t
+user2credits(u_int32_t user)
+{
+	/* If multiplying would overflow... */
+	if (user > 0xFFFFFFFF / (HZ*CREDITS_PER_JIFFY))
+		/* Divide first. */
+		return (user / IPT_LIMIT_SCALE) * HZ * CREDITS_PER_JIFFY;
+
+	return (user * HZ * CREDITS_PER_JIFFY) / IPT_LIMIT_SCALE;
+}
+
+static int
+match(const struct sk_buff *skb, const struct xt_match_param *par)
+{
+	unsigned long now;
+	struct host **head,*last,*curr;
+	int count,hash;
+	struct repo_state *state = NULL;
+	struct in_addr addr;
+
+	/* Parameters from userspace */
+	const struct ipt_rateinfo *rateinfo = par->matchinfo;
+
+	struct iphdr *ip_h;
+	/* IP header */
+	ip_h = ip_hdr(skb); //skb->nh.iph;
+
+	/* Get the source address, source & destination ports, and TCP flags */
+	addr.s_addr = ip_h->saddr;
+
+	/* We're using IP address 0.0.0.0 for a special purpose here, so don't let
+	 * them spoof us. [DHCP needs this feature - HW] */
+	if (!addr.s_addr) {
+		return 0;
+	}
+
+#if 0
+	if (rateinfo->addr_type == SOURCE) {
+		addr.s_addr = ip_h->saddr;
+		state = &src_state;
+	} else {
+		addr.s_addr = ip_h->daddr;
+		state = &dst_state;
+	}
+#else
+	addr.s_addr = ip_h->daddr;
+	state = &dst_state;
+#endif
+
+	/* Use jiffies here not to depend on someone setting the time while we're
+	 * running; we need to be careful with possible return value overflows. */
+	now = jiffies;
+
+	spin_lock(&(*state).lock);
+	
+	/* Do we know this source address already? */
+	count = 0;
+	last = NULL;
+	if ((curr = *(head = &(*state).hash[hash = hashfunc(addr)])))
+		do {
+			if (curr->ip_addr.s_addr == addr.s_addr) break;
+			count++;
+			if (curr->next) last = curr;
+		} while ((curr = curr->next));
+
+	if(curr) {
+		curr->credit += (now - xchg(&curr->timestamp, now)) * CREDITS_PER_JIFFY;
+		if (curr->credit > rateinfo->credit_cap)
+			curr->credit = rateinfo->credit_cap;
+		if(curr->credit >= rateinfo->cost) {
+			curr->credit -= rateinfo->cost;
+			goto out_match;
+		}
+		goto out_no_match;
+	}
+
+	/* Got too many source addresses with the same hash value? Then remove the
+	 * oldest one from the hash table, so that they can't take too much of our
+	 * CPU time even with carefully chosen spoofed IP addresses. */
+	if (count >= HASH_MAX && last) {
+		last->next = NULL;
+	}
+
+	/* We're going to re-use the oldest list entry, so remove it from the hash
+	 * table first (if it is really already in use, and isn't removed from the
+	 * hash table already because of the HASH_MAX check above). */
+
+	/* First, find it */
+	if ((*state).list[(*state).index].ip_addr.s_addr)
+		head = &(*state).hash[hashfunc((*state).list[(*state).index].ip_addr)];
+	else
+		head = &last;
+	last = NULL;
+	if ((curr = *head))
+	do {
+		if (curr == &(*state).list[(*state).index]) break;
+		last = curr;
+	} while ((curr = curr->next));
+
+	/* Then, remove it */
+	if (curr) {
+		if (last)
+			last->next = last->next->next;
+		else if (*head)
+			*head = (*head)->next;
+	}
+
+	/* Get our list entry */
+	curr = &(*state).list[(*state).index++];
+	if ((*state).index >= LIST_SIZE) (*state).index = 0;
+
+	/* Link it into the hash table */
+	head = &(*state).hash[hash];
+	curr->next = *head;
+	*head = curr;
+
+	/* And fill in the fields */
+	curr->timestamp = now;
+	curr->ip_addr = addr;
+	curr->credit = rateinfo->credit - rateinfo->cost;
+
+out_match:
+	spin_unlock(&(*state).lock);
+	return (1 ^ rateinfo->invert);
+out_no_match:
+	spin_unlock(&(*state).lock);
+	return (0 ^ rateinfo->invert);
+}
+
+static int
+checkentry(const struct xt_mtchk_param *par)
+{
+	struct ipt_rateinfo *r = par->matchinfo;
+	
+	/* Check for overflow. */
+	if (r->burst == 0
+	    || user2credits(r->avg * r->burst) < user2credits(r->avg)) {
+		printk("Call rusty: overflow in ipt_limit: %u/%u\n",
+		       r->avg, r->burst);
+		return 0;
+	}
+
+	/* User avg in seconds * IPT_LIMIT_SCALE: convert to jiffies *
+	   128. */
+	r->credit = user2credits(r->avg * r->burst);	 /* Credits full. */
+	r->credit_cap = user2credits(r->avg * r->burst); /* Credits full. */
+	r->cost = user2credits(r->avg);
+
+	return 1;
+}
+
+static struct xt_match ipt_synflood_reg = {
+	.list = { NULL, NULL },
+	.name       = "synflood",
+	.family = NFPROTO_IPV4,
+	.match      = match,
+	.checkentry = checkentry,
+	.matchsize = sizeof(struct ipt_rateinfo),
+	.destroy = NULL,
+	.me = THIS_MODULE,
+};
+static int __init init(void)
+{
+	if (xt_register_match(&ipt_synflood_reg))
+		return -EINVAL;
+	return 0;
+}
+
+static void __exit fini(void)
+{
+	xt_unregister_match(&ipt_synflood_reg);
+}
+
+module_init(init);
+module_exit(fini);
+MODULE_LICENSE("GPL");
+
diff --git a/net/ipv4/netfilter/ipt_webstr.c b/net/ipv4/netfilter/ipt_webstr.c
new file mode 100644
--- /dev/null
+++ b/net/ipv4/netfilter/ipt_webstr.c
@@ -0,0 +1,409 @@
+/* Kernel module to match a string into a packet.
+ *
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ * 
+ * ChangeLog
+ *	19.02.2002: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed SMP re-entrancy problem using per-cpu data areas
+ *		for the skip/shift tables.
+ *	02.05.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *		Fixed kernel panic, due to overrunning boyer moore string
+ *		tables. Also slightly tweaked heuristic for deciding what
+ * 		search algo to use.
+ * 	27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ * 		Implemented Boyer Moore Sublinear search algorithm
+ * 		alongside the existing linear search based on memcmp().
+ * 		Also a quick check to decide which method to use on a per
+ * 		packet basis.
+ */
+
+/* Kernel module to match a http header string into a packet.
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ *
+ * Description:
+ *   This is kernel module for web content inspection. It was derived from 
+ *   'string' match module, declared as above.
+ *
+ *   The module follows the Netfilter framework, called extended packet 
+ *   matching modules. 
+ */
+
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <net/sock.h>
+#include <net/tcp.h>
+#include <net/udp.h>
+#include <linux/string.h>
+/*#include <linux/ctype.h>*/
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_webstr.h>
+
+#define	isdigit(x) ((x) >= '0' && (x) <= '9')
+#define	isupper(x) (((unsigned)(x) >= 'A') && ((unsigned)(x) <= 'Z'))
+#define	islower(x) (((unsigned)(x) >= 'a') && ((unsigned)(x) <= 'z'))
+#define	isalpha(x) (isupper(x) || islower(x))
+#define	toupper(x) (isupper(x) ? (x) : (x) - 'a' + 'A')
+#define tolower(x) (isupper(x) ? ((x) - 'A' + 'a') : (x))
+
+#define split(word, wordlist, next, delim) \
+    for (next = wordlist, \
+	strncpy(word, next, sizeof(word)), \
+	word[(next=strstr(next, delim)) ? strstr(word, delim) - word : sizeof(word) - 1] = '\0', \
+	next = next ? next + sizeof(delim) - 1 : NULL ; \
+	strlen(word); \
+	next = next ? : "", \
+	strncpy(word, next, sizeof(word)), \
+	word[(next=strstr(next, delim)) ? strstr(word, delim) - word : sizeof(word) - 1] = '\0', \
+	next = next ? next + sizeof(delim) - 1 : NULL)
+
+#define BUFSIZE 	1024
+
+/* Flags for get_http_info() */
+#define HTTP_HOST	0x01
+#define HTTP_URL	0x02
+/* Flags for mangle_http_header() */
+#define HTTP_COOKIE	0x04
+#if 0
+#define SPARQ_LOG       printk
+#else
+#define SPARQ_LOG(format, args...)
+#endif
+
+typedef struct httpinfo {
+    char host[BUFSIZE + 1];
+    int hostlen;
+    char url[BUFSIZE + 1];
+    int urllen;
+} httpinfo_t;
+
+/* Return 1 for match, 0 for accept, -1 for partial. */
+static int find_pattern2(const char *data, size_t dlen,
+	const char *pattern, size_t plen,
+	char term,
+	unsigned int *numoff,
+	unsigned int *numlen)
+{
+    size_t i, j, k;
+    int state = 0;
+    *numoff = *numlen = 0;
+
+    SPARQ_LOG("%s: pattern = '%s', dlen = %u\n",__FUNCTION__, pattern, dlen);
+    if (dlen == 0)
+	return 0;
+
+    if (dlen <= plen) {	/* Short packet: try for partial? */
+	if (strnicmp(data, pattern, dlen) == 0)
+	    return -1;
+	else 
+	    return 0;
+    }
+    for (i = 0; i <= (dlen - plen); i++) {
+	/* DFA : \r\n\r\n :: 1234 */
+	if (*(data + i) == '\r') {
+	    if (!(state % 2)) state++;	/* forwarding move */
+	    else state = 0;		/* reset */
+	}
+	else if (*(data + i) == '\n') {
+	    if (state % 2) state++;
+	    else state = 0;
+	}
+	else state = 0;
+
+	if (state >= 4)
+	    break;
+
+	/* pattern compare */
+	if (memcmp(data + i, pattern, plen ) != 0)
+	    continue;
+
+	/* Here, it means patten match!! */
+	*numoff=i + plen;
+	for (j = *numoff, k = 0; data[j] != term; j++, k++)
+	    if (j > dlen) return -1 ;	/* no terminal char */
+
+	*numlen = k;
+	return 1;
+    }
+    return 0;
+}
+
+static int mangle_http_header(const struct sk_buff *skb, int flags)
+{
+	struct iphdr *iph = ip_hdr(skb);
+	struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+	unsigned char *data = (void *)tcph + tcph->doff*4;
+	unsigned int datalen = (skb)->len - (iph->ihl*4) - (tcph->doff*4);
+	int found, offset, len;
+	int ret = 0;
+
+	SPARQ_LOG("%s: seq=%u\n", __FUNCTION__, ntohl(tcph->seq));
+	/* Basic checking, is it HTTP packet? */
+	if (datalen < 10)
+		return ret;	/* Not enough length, ignore it */
+	if (memcmp(data, "GET ", sizeof("GET ") - 1) != 0 &&
+			memcmp(data, "POST ", sizeof("POST ") - 1) != 0 &&
+			memcmp(data, "HEAD ", sizeof("HEAD ") - 1) != 0)
+		return ret;	/* Pass it */
+
+	/* COOKIE modification */
+	if (flags & HTTP_COOKIE) {
+		found = find_pattern2(data, datalen, "Cookie: ",
+			sizeof("Cookie: ")-1, '\r', &offset, &len);
+		if (found) {
+			char c;
+			offset -= (sizeof("Cookie: ") - 1);
+			/* Swap the 2rd and 4th bit */
+			c = *(data + offset + 2);
+			*(data + offset + 2) = *(data + offset + 4);
+			*(data + offset + 4) = c;
+			ret++;
+		}
+	}
+
+	return ret;
+}
+
+static int get_http_info(const struct sk_buff *skb, int flags, httpinfo_t *info)
+{
+	struct iphdr *iph = ip_hdr(skb);
+	struct tcphdr *tcph = (void *)iph + iph->ihl*4;
+	unsigned char *data = (void *)tcph + tcph->doff*4;
+	unsigned int datalen = (skb)->len - (iph->ihl*4) - (tcph->doff*4);
+
+	int found, offset;
+	int hostlen, pathlen;
+	int ret = 0;
+
+	SPARQ_LOG("%s: seq=%u\n", __func__, ntohl(tcph->seq));
+
+	/* Basic checking, is it HTTP packet? */
+	if (datalen < 10)
+		return ret;	/* Not enough length, ignore it */
+	if (memcmp(data, "GET ", sizeof("GET ") - 1) != 0 &&
+			memcmp(data, "POST ", sizeof("POST ") - 1) != 0 &&
+			memcmp(data, "HEAD ", sizeof("HEAD ") - 1) != 0)
+		return ret;	/* Pass it */
+
+	if (!(flags & (HTTP_HOST | HTTP_URL)))
+		return ret;
+
+	/* find the 'Host: ' value */
+	found = find_pattern2(data, datalen, "Host: ",
+		sizeof("Host: ") - 1, '\r', &offset, &hostlen);
+	SPARQ_LOG("Host found=%d\n", found);
+
+	if (!found || !hostlen)
+		return ret;
+
+	ret++;	/* Host found, increase the return value */
+	hostlen = (hostlen < BUFSIZE) ? hostlen : BUFSIZE;
+	strncpy(info->host, data + offset, hostlen);
+	*(info->host + hostlen) = 0;		/* null-terminated */
+	info->hostlen = hostlen;
+	SPARQ_LOG("HOST=%s, hostlen=%d\n", info->host, info->hostlen);
+
+	if (!(flags & HTTP_URL))
+		return ret;
+
+	/* find the 'GET ' or 'POST ' or 'HEAD 'value */
+	found = find_pattern2(data, datalen, "GET ",
+			sizeof("GET ") - 1, '\r', &offset, &pathlen);
+	if (!found)
+		found = find_pattern2(data, datalen, "POST ",
+				sizeof("POST ") - 1, '\r', &offset, &pathlen);
+	if (!found)
+		found = find_pattern2(data, datalen, "HEAD ",
+				sizeof("HEAD ") - 1, '\r', &offset, &pathlen);
+	SPARQ_LOG("GET/POST/HEAD found=%d\n", found);
+	
+	/* ignor this field */
+	if (!found || (pathlen -= (sizeof(" HTTP/x.x") - 1)) <= 0)
+		return ret;
+
+	ret++;	/* GET/POST found, increase the return value */
+	pathlen = ((pathlen + hostlen) < BUFSIZE) ? pathlen : BUFSIZE - hostlen;
+	strncpy(info->url, info->host, hostlen);
+	strncpy(info->url + hostlen, data + offset, pathlen);
+	*(info->url + hostlen + pathlen) = 0;	/* null-terminated */
+	info->urllen = hostlen + pathlen;
+	SPARQ_LOG("URL=%s, urllen=%d\n", info->url, info->urllen);
+
+	return ret;
+}
+
+/* Linear string search based on memcmp() */
+static char *search_linear (char *needle, char *haystack, int needle_len, int haystack_len) 
+{
+	char *k = haystack + (haystack_len-needle_len);
+	char *t = haystack;
+	
+	SPARQ_LOG("%s: haystack=%s, needle=%s\n", __FUNCTION__, t, needle);
+	for(; t <= k; t++) {
+		//SPARQ_LOG("%s: haystack=%s, needle=%s\n", __FUNCTION__, t, needle);
+		if (strnicmp(t, needle, needle_len) == 0) return t;
+		//if ( memcmp(t, needle, needle_len) == 0 ) return t;
+	}
+
+	return NULL;
+}
+
+
+static int
+match(const struct sk_buff *skb, const struct xt_match_param *par)
+{
+	const struct ipt_webstr_info *info = par->matchinfo;
+	struct iphdr *ip = ip_hdr(skb); //skb->nh.iph;
+	proc_ipt_search search=search_linear;
+
+	char token[] = "<&nbsp;>";
+	char *wordlist = (char *)&info->string;
+	httpinfo_t htinfo;
+	int flags = 0;
+	int found = 0;
+	long int opt = 0;
+
+
+	if (!ip || info->len < 1)
+	    return 0;
+
+	SPARQ_LOG("\n************************************************\n"
+		"%s: type=%s\n", __FUNCTION__, (info->type == IPT_WEBSTR_URL) 
+		? "IPT_WEBSTR_URL"  : (info->type == IPT_WEBSTR_HOST) 
+		? "IPT_WEBSTR_HOST" : "IPT_WEBSTR_CONTENT" );
+	
+	/* Determine the flags value for get_http_info(), and mangle packet 
+	 * if needed. */
+	switch(info->type)
+	{
+	    case IPT_WEBSTR_URL:	/* fall through */
+		flags |= HTTP_URL;
+
+	    case IPT_WEBSTR_HOST:
+		flags |= HTTP_HOST;
+		break;
+
+	    case IPT_WEBSTR_CONTENT:
+		opt = simple_strtol(wordlist, (char **)NULL, 10);
+		SPARQ_LOG("%s: string=%s, opt=%#lx\n", __FUNCTION__, wordlist, opt);
+
+		if (opt & (BLK_JAVA | BLK_ACTIVE | BLK_PROXY))
+		    flags |= HTTP_URL;
+		if (opt & BLK_PROXY)
+		    flags |= HTTP_HOST;
+		if (opt & BLK_COOKIE)
+		    mangle_http_header(skb, HTTP_COOKIE);
+		break;
+
+	    default:
+		printk("%s: Sorry! Cannot find this match option.\n", __FILE__);
+		return 0;
+	}
+
+	/* Get the http header info */
+	if (get_http_info(skb, flags, &htinfo) < 1)
+	    return 0;
+
+	/* Check if the http header content contains the forbidden keyword */
+	if (info->type == IPT_WEBSTR_HOST || info->type == IPT_WEBSTR_URL) {
+	    int nlen = 0, hlen = 0;
+	    char needle[BUFSIZE], *haystack = NULL;
+	    char *next;
+
+	    if (info->type == IPT_WEBSTR_HOST) {
+		haystack = htinfo.host;
+		hlen = htinfo.hostlen;
+	    }
+	    else {
+		haystack = htinfo.url;
+		hlen = htinfo.urllen;
+	    }
+	    split(needle, wordlist, next, token) {
+		nlen = strlen(needle);
+		SPARQ_LOG("keyword=%s, nlen=%d, hlen=%d\n", needle, nlen, hlen);
+		if (!nlen || !hlen || nlen > hlen) continue;
+		if (search(needle, haystack, nlen, hlen) != NULL) {
+		    found = 1;
+		    break;
+		}
+	    }
+	}
+	else {		/* IPT_WEBSTR_CONTENT */
+	    int vicelen;
+
+	    if (opt & BLK_JAVA) {
+		vicelen = sizeof(".js") - 1;
+		if (strnicmp(htinfo.url + htinfo.urllen - vicelen, ".js", vicelen) == 0) {
+		    SPARQ_LOG("%s: MATCH....java\n", __FUNCTION__);
+		    found = 1;
+		    goto match_ret;
+		}
+		vicelen = sizeof(".class") - 1;
+		if (strnicmp(htinfo.url + htinfo.urllen - vicelen, ".class", vicelen) == 0) {
+		    SPARQ_LOG("%s: MATCH....java\n", __FUNCTION__);
+		    found = 1;
+		    goto match_ret;
+		}
+	    }
+	    if (opt & BLK_ACTIVE){
+		vicelen = sizeof(".ocx") - 1;
+		if (strnicmp(htinfo.url + htinfo.urllen - vicelen, ".ocx", vicelen) == 0) {
+		    SPARQ_LOG("%s: MATCH....activex\n", __FUNCTION__);
+		    found = 1;
+		    goto match_ret;
+		}
+		vicelen = sizeof(".cab") - 1;
+		if (strnicmp(htinfo.url + htinfo.urllen - vicelen, ".cab", vicelen) == 0) {
+		    SPARQ_LOG("%s: MATCH....activex\n", __FUNCTION__);
+		    found = 1;
+		    goto match_ret;
+		}
+	    }
+	    if (opt & BLK_PROXY){
+		if (strnicmp(htinfo.url + htinfo.hostlen, "http://", sizeof("http://") - 1) == 0) {
+		    SPARQ_LOG("%s: MATCH....proxy\n", __FUNCTION__);
+		    found = 1;
+		    goto match_ret;
+		}
+	    }
+	}
+
+match_ret:
+	SPARQ_LOG("%s: Verdict =======> %s \n",__FUNCTION__
+		, found ? "DROP" : "ACCEPT");
+
+	return (found ^ info->invert);
+}
+
+static int
+checkentry(const struct xt_mtchk_param *par)
+{
+	return 1;
+}
+
+static struct xt_match webstr_match = {
+	.list			= { NULL, NULL },
+	.name			= "webstr",
+	.family 		= NFPROTO_IPV4,
+	.match			= match,
+	.checkentry		= checkentry,
+	.matchsize		= sizeof(struct ipt_webstr_info),
+	.destroy		= NULL,
+	.me				= THIS_MODULE
+};
+
+static int __init init(void)
+{
+	return xt_register_match(&webstr_match);
+}
+
+static void __exit fini(void)
+{
+	xt_unregister_match(&webstr_match);
+}
+
+module_init(init);
+module_exit(fini);
