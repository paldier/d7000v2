EVA support for Lantiq HAPS/GRX500 platforms and also includes placeholder for memory model definations for EVA.

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -240,6 +240,8 @@
 	select CSRC_R4K
 	select SYS_HAS_CPU_MIPS32_R1
 	select SYS_HAS_CPU_MIPS32_R2
+	select SYS_HAS_CPU_MIPS32_R2_EVA
+	select SYS_SUPPORTS_MIPS_CMP
 	select SYS_SUPPORTS_BIG_ENDIAN
 	select SYS_SUPPORTS_32BIT_KERNEL
 	select SYS_SUPPORTS_MULTITHREADING
diff --git a/arch/mips/include/asm/mach-generic/spaces.h b/arch/mips/include/asm/mach-generic/spaces.h
--- a/arch/mips/include/asm/mach-generic/spaces.h
+++ b/arch/mips/include/asm/mach-generic/spaces.h
@@ -20,11 +20,13 @@
 #endif
 
 #ifdef CONFIG_32BIT
+#ifndef CAC_BASE
 #ifdef CONFIG_KVM_GUEST
 #define CAC_BASE		_AC(0x40000000, UL)
 #else
 #define CAC_BASE		_AC(0x80000000, UL)
 #endif
+#endif
 #ifndef IO_BASE
 #define IO_BASE			_AC(0xa0000000, UL)
 #endif
diff --git a/arch/mips/include/asm/mach-lantiq/kernel-entry-init.h b/arch/mips/include/asm/mach-lantiq/kernel-entry-init.h
new file mode 100644
--- /dev/null
+++ b/arch/mips/include/asm/mach-lantiq/kernel-entry-init.h
@@ -0,0 +1,115 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Chris Dearman (chris@mips.com)
+ * Leonid Yegoshin (yegoshin@mips.com)
+ * Copyright (C) 2012 Mips Technologies, Inc.
+ */
+#ifndef __ASM_MACH_LANTIQ_KERNEL_ENTRY_INIT_H
+#define __ASM_MACH_LANTIQ_KERNEL_ENTRY_INIT_H
+
+	.macro  eva_entry   t1  t2  t0
+	andi    \t1, 0x7    /* Config.K0 == CCA */
+	move    \t2, \t1
+	ins     \t2, \t1, 16, 3
+	li      \t0, ((MIPS_SEGCFG_MK << MIPS_SEGCFG_AM_SHIFT) |            \
+		(0 << MIPS_SEGCFG_PA_SHIFT) |                               \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) |                              \
+		(((MIPS_SEGCFG_MK << MIPS_SEGCFG_AM_SHIFT) |                \
+		(0 << MIPS_SEGCFG_PA_SHIFT) |                               \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) << 16)
+	or      \t0, \t2
+	mtc0    \t0, $5, 2
+	li      \t0, ((MIPS_SEGCFG_UK << MIPS_SEGCFG_AM_SHIFT) |            \
+		(0 << MIPS_SEGCFG_PA_SHIFT) | (2 << MIPS_SEGCFG_C_SHIFT) |  \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) |                              \
+		(((MIPS_SEGCFG_UK << MIPS_SEGCFG_AM_SHIFT) |                \
+		(0 << MIPS_SEGCFG_PA_SHIFT) |                               \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) << 16)
+	ins     \t0, \t1, 16, 3
+	mtc0    \t0, $5, 3
+	li      \t0, ((MIPS_SEGCFG_MUSUK << MIPS_SEGCFG_AM_SHIFT) |         \
+		(2 << MIPS_SEGCFG_PA_SHIFT) |                               \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) |                              \
+		(((MIPS_SEGCFG_MUSUK << MIPS_SEGCFG_AM_SHIFT) |             \
+		(0 << MIPS_SEGCFG_PA_SHIFT) |                               \
+		(1 << MIPS_SEGCFG_EU_SHIFT)) << 16)
+	or      \t0, \t2
+	mtc0    \t0, $5, 4
+	jal     mips_ihb
+
+	mfc0    \t0, $16, 5
+	li      \t2, 0x40000000      /* K bit */
+	or      \t0, \t0, \t2
+	mtc0    \t0, $16, 5
+	sync
+	jal	mips_ihb
+	.endm
+
+
+	.macro	kernel_entry_setup
+#ifdef CONFIG_EVA
+	sync
+	ehb
+
+	mfc0    t1, CP0_CONFIG
+	bgez    t1, 9f
+	mfc0	t0, CP0_CONFIG, 1
+	bgez	t0, 9f
+	mfc0	t0, CP0_CONFIG, 2
+	bgez	t0, 9f
+	mfc0	t0, CP0_CONFIG, 3
+	sll     t0, t0, 6   /* SC bit */
+	bgez    t0, 9f
+
+	eva_entry t1 t2 t0
+	PTR_LA  t0, mips_cca
+	sw      t1, 0(t0)
+	b       0f
+
+9:
+#if 0
+	/* Assume we came from YAMON... */
+	PTR_LA	v0, 0x9fc00534	/* YAMON print */
+	lw	v0, (v0)
+	move	a0, zero
+	PTR_LA  a1, nonsc_processor
+	jal	v0
+
+	PTR_LA	v0, 0x9fc00520	/* YAMON exit */
+	lw	v0, (v0)
+	li	a0, 1
+	jal	v0
+#else
+/*Actual configuration of EVA for each processor has to go here...kept above code for reference*/
+#endif
+1:	b	1b
+	nop
+
+	__INITDATA
+nonsc_processor:
+	.asciz  "Kernel requires the Segment/EVA to run\n"
+	__FINIT
+#endif /* CONFIG_EVA */
+
+0:
+	.endm
+
+/*
+ * Do SMP slave processor setup necessary before we can safely execute C code.
+ */
+	.macro	smp_slave_setup
+
+#ifdef CONFIG_EVA
+
+	sync
+	ehb
+	mfc0    t1, CP0_CONFIG
+	eva_entry   t1 t2 t0
+#endif /* CONFIG_EVA */
+
+	.endm
+
+#endif /* __ASM_MACH_LANTIQ_KERNEL_ENTRY_INIT_H */
diff --git a/arch/mips/include/asm/mach-lantiq/spaces.h b/arch/mips/include/asm/mach-lantiq/spaces.h
new file mode 100644
--- /dev/null
+++ b/arch/mips/include/asm/mach-lantiq/spaces.h
@@ -0,0 +1,54 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Author: Leonid Yegoshin (yegoshin@mips.com)
+ * Copyright (C) 2012 MIPS Technologies, Inc.
+ */
+
+#ifndef _ASM_LANTIQ_SPACES_H
+#define _ASM_LANTIQ_SPACES_H
+
+#ifdef CONFIG_EVA
+
+#define PAGE_OFFSET             _AC(0x0, UL)
+/* skip first 512MB */
+#define PHYS_OFFSET             _AC(0x20000000, UL)
+#define HIGHMEM_START           _AC(0xffff0000, UL)
+
+/*  I put INDEX_BASE here to underline the fact that in EVA mode kernel
+    may be located somethere and not in CKSEG0, so CKSEG0 may have
+    a "surprise" location and index-based CACHE may give unexpected result */
+#define INDEX_BASE      CKSEG0
+
+#define UNCAC_BASE              _AC(0xa0000000, UL)
+#define CAC_BASE	             _AC(0x0, UL)
+#define IO_BASE                 UNCAC_BASE
+
+#define KSEG
+#define KUSEG                   0x00000000
+#define KSEG0                   0x80000000
+#define KSEG3                   0xa0000000
+#define KSEG2                   0xc0000000
+#define KSEG1                   0xe0000000
+
+#define CKUSEG                  0x00000000
+#define CKSEG0                  0x80000000
+#define CKSEG3                  0xa0000000
+#define CKSEG2                  _AC(0xc0000000, UL)
+#define CKSEG1                  0xe0000000
+
+#define MAP_BASE                CKSEG2
+#define VMALLOC_START 					MAP_BASE
+#define VMALLOC_END             (MAP_BASE + _AC(0x20000000, UL) - 2*PAGE_SIZE)
+
+
+#define IO_SIZE                 _AC(0x10000000, UL)
+#define IO_SHIFT                _AC(0x10000000, UL)
+
+#endif  /* CONFIG_EVA */
+
+#include <asm/mach-generic/spaces.h>
+
+#endif /* __ASM_MALTA_SPACES_H */
diff --git a/arch/mips/lantiq/Makefile b/arch/mips/lantiq/Makefile
--- a/arch/mips/lantiq/Makefile
+++ b/arch/mips/lantiq/Makefile
@@ -4,7 +4,7 @@
 # under the terms of the GNU General Public License version 2 as published
 # by the Free Software Foundation.
 
-obj-y := irq.o clk.o prom.o
+obj-y := irq.o clk.o prom.o 
 
 obj-y += dts/
 
@@ -12,3 +12,4 @@
 
 obj-$(CONFIG_SOC_TYPE_XWAY) += xway/
 obj-$(CONFIG_SOC_FALCON) += falcon/
+obj-$(CONFIG_MIPS_CMP)+=lantiq-amon.o
diff --git a/arch/mips/lantiq/Platform b/arch/mips/lantiq/Platform
--- a/arch/mips/lantiq/Platform
+++ b/arch/mips/lantiq/Platform
@@ -4,6 +4,10 @@
 
 platform-$(CONFIG_LANTIQ)	+= lantiq/
 cflags-$(CONFIG_LANTIQ)		+= -I$(srctree)/arch/mips/include/asm/mach-lantiq
+ifndef CONFIG_EVA
 load-$(CONFIG_LANTIQ)		= 0xffffffff80002000
+else
+load-$(CONFIG_LANTIQ)   = 0xffffffff00002000
+endif
 cflags-$(CONFIG_SOC_TYPE_XWAY)	+= -I$(srctree)/arch/mips/include/asm/mach-lantiq/xway
 cflags-$(CONFIG_SOC_FALCON)	+= -I$(srctree)/arch/mips/include/asm/mach-lantiq/falcon
diff --git a/arch/mips/lantiq/lantiq-amon.c b/arch/mips/lantiq/lantiq-amon.c
new file mode 100644
--- /dev/null
+++ b/arch/mips/lantiq/lantiq-amon.c
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2007  MIPS Technologies, Inc.
+ *	All rights reserved.
+
+ *  This program is free software; you can distribute it and/or modify it
+ *  under the terms of the GNU General Public License (Version 2) as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with this program; if not, write to the Free Software Foundation, Inc.,
+ *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
+ *
+ * Arbitrary Monitor interface
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/smp.h>
+
+#include <asm/addrspace.h>
+#include <asm/mips-boards/launch.h>
+#include <asm/mipsmtregs.h>
+
+int amon_cpu_avail(int cpu)
+{
+	struct cpulaunch *launch = (struct cpulaunch *)CKSEG0ADDR(CPULAUNCH);
+
+	if (cpu < 0 || cpu >= NCPULAUNCH) {
+		pr_debug("avail: cpu%d is out of range\n", cpu);
+		return 0;
+	}
+
+	launch += cpu;
+	if (!(launch->flags & LAUNCH_FREADY)) {
+		pr_debug("avail: cpu%d is not ready\n", cpu);
+		return 0;
+	}
+	if (launch->flags & (LAUNCH_FGO|LAUNCH_FGONE)) {
+		pr_debug("avail: too late.. cpu%d is already gone\n", cpu);
+		return 0;
+	}
+
+	return 1;
+}
+
+void amon_cpu_start(int cpu,
+		    unsigned long pc, unsigned long sp,
+		    unsigned long gp, unsigned long a0)
+{
+	volatile struct cpulaunch *launch =
+		(struct cpulaunch  *)CKSEG0ADDR(CPULAUNCH);
+
+	if (!amon_cpu_avail(cpu))
+		return;
+	if (cpu == smp_processor_id()) {
+		pr_debug("launch: I am cpu%d!\n", cpu);
+		return;
+	}
+	launch += cpu;
+
+	pr_debug("launch: starting cpu%d\n", cpu);
+
+	launch->pc = pc;
+	launch->gp = gp;
+	launch->sp = sp;
+	launch->a0 = a0;
+
+	smp_wmb();		/* Target must see parameters before go */
+	launch->flags |= LAUNCH_FGO;
+	smp_wmb();		/* Target must see go before we poll  */
+
+	while ((launch->flags & LAUNCH_FGONE) == 0)
+		;
+	smp_rmb();	/* Target will be updating flags soon */
+	pr_debug("launch: cpu%d gone!\n", cpu);
+}
