/* Add/delete VC customizations --To support addition and deletion of vpi/vci */

diff --git a/include/uapi/linux/atmbr2684.h b/include/uapi/linux/atmbr2684.h
--- a/include/uapi/linux/atmbr2684.h
+++ b/include/uapi/linux/atmbr2684.h
@@ -1,9 +1,9 @@
 #ifndef _LINUX_ATMBR2684_H
 #define _LINUX_ATMBR2684_H
-
 #include <linux/types.h>
 #include <linux/atm.h>
 #include <linux/if.h>		/* For IFNAMSIZ */
+#include <linux/if_ether.h>    /* ETH_P_* Add by Henry*/
 
 /*
  * Type of media we're bridging (ethernet, token ring, etc)  Currently only
@@ -56,6 +56,7 @@ struct atm_newif_br2684 {
 	int media;		/* BR2684_MEDIA_*, flags in upper bits */
 	char ifname[IFNAMSIZ];
 	int mtu;
+	int payload;		/* bridged or routed, Add by Henry*/
 };
 
 /*
@@ -85,6 +86,8 @@ struct atm_backend_br2684 {
 	int fcs_out;		/* BR2684_FCSOUT_* */
 	int fcs_auto;		/* 1: fcs_{in,out} disabled if no FCS rx'ed */
 	int encaps;		/* BR2684_ENCAPS_* */
+    	int payload;            /* BR2684_PAYLOAD_* Add by Henry*/
+    	int has_addr;           /* 1: include HW addr */
 	int has_vpiid;		/* 1: use vpn_id - Unsupported */
 	__u8 vpn_id[7];
 	int send_padding;	/* unsupported */
diff --git a/include/uapi/linux/atmdev.h b/include/uapi/linux/atmdev.h
--- a/include/uapi/linux/atmdev.h
+++ b/include/uapi/linux/atmdev.h
@@ -98,13 +98,15 @@ struct atm_dev_stats {
 					/* set backend handler */
 #define ATM_NEWBACKENDIF _IOW('a',ATMIOC_SPECIAL+3,atm_backend_t)
 					/* use backend to make new if */
-#define ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+4,struct atm_iobuf)
+#define ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+5,struct atm_iobuf)
  					/* add party to p2mp call */
+#define ATM_DELBACKENDIF _IOW('a',ATMIOC_SPECIAL+4,atm_backend_t)
+                                       /* set backend to remove if */
 #ifdef CONFIG_COMPAT
 /* It actually takes struct sockaddr_atmsvc, not struct atm_iobuf */
-#define COMPAT_ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+4,struct compat_atm_iobuf)
+#define COMPAT_ATM_ADDPARTY  	_IOW('a', ATMIOC_SPECIAL+5,struct compat_atm_iobuf)
 #endif
-#define ATM_DROPPARTY 	_IOW('a', ATMIOC_SPECIAL+5,int)
+#define ATM_DROPPARTY 	_IOW('a', ATMIOC_SPECIAL+6,int)
 					/* drop party from p2mp call */
 
 /*
diff --git a/include/uapi/linux/if.h b/include/uapi/linux/if.h
--- a/include/uapi/linux/if.h
+++ b/include/uapi/linux/if.h
@@ -64,6 +64,7 @@
 #define IFF_MASTER_ALB	0x10		/* bonding master, balance-alb.	*/
 #define IFF_BONDING	0x20		/* bonding master or slave	*/
 #define IFF_SLAVE_NEEDARP 0x40		/* need ARPs for validation	*/
+#define IFF_BR2684     0x80            /* nas RFC2684 interface        */
 #define IFF_ISATAP	0x80		/* ISATAP interface (RFC4214)	*/
 #define IFF_MASTER_ARPMON 0x100		/* bonding master, ARP mon in use */
 #define IFF_WAN_HDLC	0x200		/* WAN HDLC device		*/
diff --git a/net/atm/br2684.c b/net/atm/br2684.c
--- a/net/atm/br2684.c
+++ b/net/atm/br2684.c
@@ -43,7 +43,10 @@ static void skb_debug(const struct sk_bu
 #endif
 }
 
+#define BR2684_LLC_LEN         3
+#define BR2684_SNAP_LEN        3
 #define BR2684_ETHERTYPE_LEN	2
+#define BR2684_PID_LEN		2
 #define BR2684_PAD_LEN		2
 
 #define LLC		0xaa, 0xaa, 0x03
@@ -354,7 +357,13 @@ static netdev_tx_t br2684_start_xmit(str
  */
 static int br2684_mac_addr(struct net_device *dev, void *p)
 {
+#ifdef CONFIG_LTQ_ATM
+       int err = 0;
+       struct sockaddr *addr = p;
+       memcpy(dev->dev_addr, addr->sa_data, dev->addr_len);
+#else
 	int err = eth_mac_addr(dev, p);
+#endif
 	if (!err)
 		BRPRIV(dev)->mac_was_set = 1;
 	return err;
@@ -514,6 +523,15 @@ static void br2684_push(struct atm_vcc *
 	ATM_SKB(skb)->vcc = atmvcc;	/* needed ? */
 	pr_debug("received packet's protocol: %x\n", ntohs(skb->protocol));
 	skb_debug(skb);
+/* Adopted from 2.4 BSP */
+       if (!(net_dev->flags & IFF_MULTICAST) && (skb->pkt_type == PACKET_MULTICAST))
+       { /* drop multicast packets */
+               struct net_device *dev = skb->dev;
+               dev->stats.rx_dropped++;
+               dev_kfree_skb(skb);
+               return;
+       }
+/*165001*/
 	/* sigh, interface is down? */
 	if (unlikely(!(net_dev->flags & IFF_UP)))
 		goto dropped;
@@ -675,6 +693,41 @@ static const struct net_device_ops br268
 	.ndo_change_mtu		= eth_change_mtu
 };
 
+static int br2684_unregvcc(struct atm_vcc *atmvcc, void __user *arg)
+{
+	int err;
+	struct br2684_vcc *brvcc;
+	struct br2684_dev *brdev;
+	struct net_device *net_dev;
+	struct atm_backend_br2684 be;
+
+	if (copy_from_user(&be, arg, sizeof be))
+		return -EFAULT;
+	/* write_lock_irq(&devs_lock); */
+	net_dev = br2684_find_dev(&be.ifspec);
+	if (net_dev == NULL) {
+		printk(KERN_ERR
+			"br2684: tried to unregister to non-existant device\n");
+		err = -ENXIO;
+		goto error;
+	}
+	brdev = BRPRIV(net_dev);
+	while (!list_empty(&brdev->brvccs)) {
+		brvcc = list_entry_brvcc(brdev->brvccs.next);
+		br2684_close_vcc(brvcc);
+	}
+	list_del(&brdev->br2684_devs);
+	/* write_unlock_irq(&devs_lock); */
+	unregister_netdev(net_dev);
+	free_netdev(net_dev);
+	atmvcc->push = NULL;
+	vcc_release_async(atmvcc, -ETIMEDOUT);
+	return 0;
+error:
+	/* write_unlock_irq(&devs_lock); */
+	return err;
+}
+
 static void br2684_setup(struct net_device *netdev)
 {
 	struct br2684_dev *brdev = BRPRIV(netdev);
@@ -742,6 +795,8 @@ static int br2684_create(void __user *ar
 		free_netdev(netdev);
 		return err;
 	}
+       /* Mark br2684 device */
+       netdev->priv_flags |= IFF_BR2684;
 
 	write_lock_irq(&devs_lock);
 
@@ -773,6 +828,7 @@ static int br2684_ioctl(struct socket *s
 	switch (cmd) {
 	case ATM_SETBACKEND:
 	case ATM_NEWBACKENDIF:
+	case ATM_DELBACKENDIF:
 		err = get_user(b, (atm_backend_t __user *) argp);
 		if (err)
 			return -EFAULT;
@@ -784,6 +840,8 @@ static int br2684_ioctl(struct socket *s
 			if (sock->state != SS_CONNECTED)
 				return -EINVAL;
 			return br2684_regvcc(atmvcc, argp);
+		} else if (cmd == ATM_DELBACKENDIF) {
+			return br2684_unregvcc(atmvcc, argp);
 		} else {
 			return br2684_create(argp);
 		}
