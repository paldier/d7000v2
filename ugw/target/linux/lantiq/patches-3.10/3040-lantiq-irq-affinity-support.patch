# HG changeset patch
# Parent 2268a1599f29bc85aa88766304b6d990f58961a3

diff --git a/arch/mips/lantiq/irq.c b/arch/mips/lantiq/irq.c
--- a/arch/mips/lantiq/irq.c
+++ b/arch/mips/lantiq/irq.c
@@ -5,6 +5,7 @@
  *
  * Copyright (C) 2010 John Crispin <blogic@openwrt.org>
  * Copyright (C) 2010 Thomas Langer <thomas.langer@lantiq.com>
+ * Copyright (C) 2013 Xiaogang Huang <xiaogang.huang@lantiq.com>
  */
 
 #include <linux/interrupt.h>
@@ -49,8 +50,8 @@
  */
 #define LTQ_ICU_EBU_IRQ		22
 
-#define ltq_icu_w32(m, x, y)	ltq_w32((x), ltq_icu_membase[m] + (y))
-#define ltq_icu_r32(m, x)	ltq_r32(ltq_icu_membase[m] + (x))
+#define ltq_icu_w32(vpe, m, x, y)	ltq_w32((x), ltq_icu_membase[vpe][m] + (y))
+#define ltq_icu_r32(vpe, m, x)		ltq_r32(ltq_icu_membase[vpe][m] + (x))
 
 #define ltq_eiu_w32(x, y)	ltq_w32((x), ltq_eiu_membase + (y))
 #define ltq_eiu_r32(x)		ltq_r32(ltq_eiu_membase + (x))
@@ -62,13 +63,43 @@
 /* we have a cascade of 8 irqs */
 #define MIPS_CPU_IRQ_CASCADE		8
 
+#define MAX_VPES 			2
+
 #if defined(CONFIG_MIPS_MT_SMP) || defined(CONFIG_MIPS_MT_SMTC)
 int gic_present;
 #endif
 
+/*
+ * Convenience Macro.  Should be somewhere generic.
+ */
+#define get_current_vpe()   \
+        ((read_c0_tcbind() >> TCBIND_CURVPE_SHIFT) & TCBIND_CURVPE)
+
+#ifdef CONFIG_SMP
+#define LOCK_VPE() \
+        local_irq_save(flags); \
+        mtflags = dmt()
+
+#define UNLOCK_VPE() \
+        emt(mtflags); \
+        local_irq_restore(flags)
+
+#define LOCK_CORE() \
+        local_irq_save(flags); \
+        mtflags = dvpe()
+
+#define UNLOCK_CORE() \
+        evpe(mtflags); \
+        local_irq_restore(flags)
+#else /* CONFIG_SMP*/
+#define LOCK_VPE()
+#define UNLOCK_VPE()
+#endif /* CONFIG_SMP */
+
 static int exin_avail;
 static struct resource ltq_eiu_irq[MAX_EIU];
-static void __iomem *ltq_icu_membase[MAX_IM];
+static void __iomem *ltq_icu_membase[MAX_VPES][MAX_IM];
+
 static void __iomem *ltq_eiu_membase;
 static struct irq_domain *ltq_domain;
 
@@ -84,9 +115,14 @@
 	u32 ier = LTQ_ICU_IM0_IER;
 	int offset = d->hwirq - MIPS_CPU_IRQ_CASCADE;
 	int im = offset / INT_NUM_IM_OFFSET;
-
-	offset %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(im, ltq_icu_r32(im, ier) & ~BIT(offset), ier);
+        int vpe = get_current_vpe();
+#ifdef CONFIG_SMP
+        unsigned long flags, mtflags;
+#endif
+        offset %= INT_NUM_IM_OFFSET;
+        LOCK_VPE();
+	ltq_icu_w32(vpe, im, ltq_icu_r32(vpe, im, ier) & ~BIT(offset), ier);
+        UNLOCK_VPE();
 }
 
 void ltq_mask_and_ack_irq(struct irq_data *d)
@@ -95,10 +131,16 @@
 	u32 isr = LTQ_ICU_IM0_ISR;
 	int offset = d->hwirq - MIPS_CPU_IRQ_CASCADE;
 	int im = offset / INT_NUM_IM_OFFSET;
+        int vpe = get_current_vpe();
+#ifdef CONFIG_SMP
+        unsigned long flags, mtflags;
+#endif
 
 	offset %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(im, ltq_icu_r32(im, ier) & ~BIT(offset), ier);
-	ltq_icu_w32(im, BIT(offset), isr);
+        LOCK_VPE();
+	ltq_icu_w32(vpe, im, ltq_icu_r32(vpe, im, ier) & ~BIT(offset), ier);
+	ltq_icu_w32(vpe, im, BIT(offset), isr);
+        UNLOCK_VPE();
 }
 EXPORT_SYMBOL(ltq_mask_and_ack_irq);
 
@@ -107,19 +149,39 @@
 	u32 isr = LTQ_ICU_IM0_ISR;
 	int offset = d->hwirq - MIPS_CPU_IRQ_CASCADE;
 	int im = offset / INT_NUM_IM_OFFSET;
+        int vpe = get_current_vpe();
+#ifdef CONFIG_SMP
+        unsigned long flags, mtflags;
+#endif
 
 	offset %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(im, BIT(offset), isr);
+        LOCK_VPE();
+	ltq_icu_w32(vpe, im, BIT(offset), isr);
+        UNLOCK_VPE();
 }
 
 void ltq_enable_irq(struct irq_data *d)
 {
 	u32 ier = LTQ_ICU_IM0_IER;
+        u32 isr = LTQ_ICU_IM0_ISR;
 	int offset = d->hwirq - MIPS_CPU_IRQ_CASCADE;
 	int im = offset / INT_NUM_IM_OFFSET;
+        int vpe = get_current_vpe();
+#ifdef CONFIG_SMP
+        unsigned long flags, mtflags;
+#endif
 
 	offset %= INT_NUM_IM_OFFSET;
-	ltq_icu_w32(im, ltq_icu_r32(im, ier) | BIT(offset), ier);
+        LOCK_VPE();
+	/* Bug fix for dummy interrupt */
+        /* if this is a EBU irq, we need to ack it or get a deadlock */
+        if ((offset == LTQ_ICU_EBU_IRQ) && (im == 0) && LTQ_EBU_PCC_ISTAT)
+                ltq_ebu_w32(ltq_ebu_r32(LTQ_EBU_PCC_ISTAT) | 0x10,
+                        LTQ_EBU_PCC_ISTAT);
+	/* Bug fix for fake interrupt */
+        ltq_icu_w32(vpe, im, BIT(offset), isr);
+	ltq_icu_w32(vpe, im, ltq_icu_r32(vpe, im, ier) | BIT(offset), ier);
+        UNLOCK_VPE();
 }
 
 static int ltq_eiu_settype(struct irq_data *d, unsigned int type)
@@ -206,6 +268,31 @@
 	}
 }
 
+#ifdef CONFIG_MIPS_MT_SMP
+static int ltq_icu_irq_set_affinity(struct irq_data *d,
+                                    const struct cpumask *cpumask, bool force)
+{
+        int cpu;
+        unsigned long flags;
+        unsigned int  mtflags;
+        u32 ier = LTQ_ICU_IM0_IER;
+        int offset = d->hwirq - MIPS_CPU_IRQ_CASCADE;
+        int im = offset / INT_NUM_IM_OFFSET;
+
+        LOCK_CORE();
+
+        for_each_online_cpu(cpu) {
+                if (!cpumask_test_cpu(cpu, cpumask))
+                	ltq_icu_w32(cpu, im, ltq_icu_r32(cpu, im, ier) & ~BIT(offset), ier);
+                else
+                	ltq_icu_w32(cpu, im, ltq_icu_r32(cpu, im, ier) | BIT(offset), ier);
+        }
+        UNLOCK_CORE();
+        return 0;
+
+}
+#endif
+
 static struct irq_chip ltq_irq_type = {
 	"icu",
 	.irq_enable = ltq_enable_irq,
@@ -214,6 +301,9 @@
 	.irq_ack = ltq_ack_irq,
 	.irq_mask = ltq_disable_irq,
 	.irq_mask_ack = ltq_mask_and_ack_irq,
+#ifdef CONFIG_MIPS_MT_SMP
+        .irq_set_affinity = ltq_icu_irq_set_affinity,
+#endif
 };
 
 static struct irq_chip ltq_eiu_type = {
@@ -232,8 +322,15 @@
 static void ltq_hw_irqdispatch(int module)
 {
 	u32 irq;
+        int vpe = get_current_vpe();
+#ifdef CONFIG_SMP
+        unsigned long flags, mtflags;
+#endif
 
-	irq = ltq_icu_r32(module, LTQ_ICU_IM0_IOSR);
+        LOCK_VPE();
+	irq = ltq_icu_r32(vpe, module, LTQ_ICU_IM0_IOSR);
+        UNLOCK_VPE();
+
 	if (irq == 0)
 		return;
 
@@ -363,23 +460,48 @@
 int __init icu_of_init(struct device_node *node, struct device_node *parent)
 {
 	struct device_node *eiu_node;
+#if defined(CONFIG_MIPS_MT_SMP)
+	struct device_node *icu1_node;
+#endif
 	struct resource res;
 	int i, ret;
 
 	for (i = 0; i < MAX_IM; i++) {
 		if (of_address_to_resource(node, i, &res))
-			panic("Failed to get icu memory range");
+			panic("Failed to get icu0 memory range");
 
 		if (request_mem_region(res.start, resource_size(&res),
 					res.name) < 0)
-			pr_err("Failed to request icu memory");
+			pr_err("Failed to request icu0 memory");
 
-		ltq_icu_membase[i] = ioremap_nocache(res.start,
+                if (of_node_cmp(node->name, "icu0") == 0) {
+			ltq_icu_membase[0][i] = ioremap_nocache(res.start,
 					resource_size(&res));
-		if (!ltq_icu_membase[i])
-			panic("Failed to remap icu memory");
+		}
+		if (!ltq_icu_membase[0][i])
+			panic("Failed to remap icu0 memory");
 	}
 
+#if defined(CONFIG_MIPS_MT_SMP)
+        icu1_node = of_find_compatible_node(NULL, NULL, "lantiq,icu1");
+        for (i = 0; i < MAX_IM; i++) {
+                if (of_address_to_resource(icu1_node, i, &res))
+                        panic("Failed to get icu1 memory range");
+
+                if (request_mem_region(res.start, resource_size(&res),
+                                        res.name) < 0)
+                        pr_err("Failed to request icu1 memory");
+
+                if (of_node_cmp(icu1_node->name, "icu1") == 0){
+                        ltq_icu_membase[1][i] = ioremap_nocache(res.start,
+                                        resource_size(&res));
+                }
+
+                if (!ltq_icu_membase[1][i])
+                        panic("Failed to remap icu1 memory");
+        }
+#endif
+
 	/* the external interrupts are optional and xway only */
 	eiu_node = of_find_compatible_node(NULL, NULL, "lantiq,eiu-xway");
 	if (eiu_node && !of_address_to_resource(eiu_node, 0, &res)) {
@@ -407,9 +529,13 @@
 	/* turn off all irqs by default */
 	for (i = 0; i < MAX_IM; i++) {
 		/* make sure all irqs are turned off by default */
-		ltq_icu_w32(i, 0, LTQ_ICU_IM0_IER);
+		ltq_icu_w32(0, i, 0, LTQ_ICU_IM0_IER);
 		/* clear all possibly pending interrupts */
-		ltq_icu_w32(i, ~0, LTQ_ICU_IM0_ISR);
+		ltq_icu_w32(0, i, ~0, LTQ_ICU_IM0_ISR);
+#if defined(CONFIG_MIPS_MT_SMP)
+                ltq_icu_w32(1, i, 0, LTQ_ICU_IM0_IER);
+                ltq_icu_w32(1, i, ~0, LTQ_ICU_IM0_ISR);
+#endif
 	}
 
 	mips_cpu_irq_init();
