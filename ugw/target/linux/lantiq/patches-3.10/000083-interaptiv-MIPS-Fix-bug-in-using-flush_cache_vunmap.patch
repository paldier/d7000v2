From 4a718060164ef27ac6287e93477b0172bb574878 Mon Sep 17 00:00:00 2001
From: Leonid Yegoshin <Leonid.Yegoshin@imgtec.com>
Date: Mon, 1 Apr 2013 18:25:39 -0700
Subject: [PATCH 083/105] MIPS: Fix bug in using flush_cache_vunmap

Actually - just workaround, until bug in free_unmap_vmap_area() is fixed.

Explanation: VMALLOC may use unmapped guard pages for some area.
And free_unmap_vmap_area() tries to flush_cache_vunmap with that page,
this of course faults in TLB refill on MIPS because there is no physical page
for this virtual address (virtual page is unmapped). Uncoherent systems only.

Workaround - flush the whole D-cache, as it was done before rework of cache
functions.

Signed-off-by: Leonid Yegoshin <Leonid.Yegoshin@imgtec.com>
Signed-off-by: Steven J. Hill <Steven.Hill@imgtec.com>
(cherry picked from commit 868588431d637347ca633d020cb3d3a4f3880f57)
---
 arch/mips/mm/c-r4k.c |   12 ++++++++++++
 1 files changed, 12 insertions(+), 0 deletions(-)

diff --git a/arch/mips/mm/c-r4k.c b/arch/mips/mm/c-r4k.c
index 082b97b..6d618cb 100644
--- a/arch/mips/mm/c-r4k.c
+++ b/arch/mips/mm/c-r4k.c
@@ -463,8 +463,13 @@ static void r4k__flush_cache_vmap(unsigned long start, unsigned long end)
 	if (cpu_has_safe_index_cacheops && size >= dcache_size) {
 		r4k_blast_dcache();
 	} else {
+/* Commented out until bug in free_unmap_vmap_area() is fixed - it calls
+   with unmapped page and address cache op does TLB refill exception
 		if (size >= (dcache_size * CACHE_CPU_LATENCY))
+ */
 			r4k_indexop_on_each_cpu(local_r4__flush_dcache, NULL);
+/* Commented out until bug in free_unmap_vmap_area() is fixed - it calls
+   with unmapped page and address cache op does TLB refill exception
 		else {
 			struct vmap_args args;
 
@@ -472,6 +477,7 @@ static void r4k__flush_cache_vmap(unsigned long start, unsigned long end)
 			args.end = end;
 			r4k_on_each_cpu(local_r4__flush_cache_vmap, (void *)&args);
 		}
+ */
 	}
 }
 
@@ -482,8 +488,13 @@ static void r4k__flush_cache_vunmap(unsigned long start, unsigned long end)
 	if (cpu_has_safe_index_cacheops && size >= dcache_size)
 		r4k_blast_dcache();
 	else {
+/* Commented out until bug in free_unmap_vmap_area() is fixed - it calls
+   with unmapped page and address cache op does TLB refill exception
 		if (size >= (dcache_size * CACHE_CPU_LATENCY))
+ */
 			r4k_indexop_on_each_cpu(local_r4__flush_dcache, NULL);
+/* Commented out until bug in free_unmap_vmap_area() is fixed - it calls
+   with unmapped page and address cache op does TLB refill exception
 		else {
 			struct vmap_args args;
 
@@ -491,6 +502,7 @@ static void r4k__flush_cache_vunmap(unsigned long start, unsigned long end)
 			args.end = end;
 			r4k_on_each_cpu(local_r4__flush_cache_vmap, (void *)&args);
 		}
+ */
 	}
 }
 
-- 
1.7.1

