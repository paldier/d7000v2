DT support for MALTA and it is malta-specific in which the DTB resides in the kernel.
This is specific to MALTA only as the DTB in built-in the vmlinux.srec.

diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -311,6 +311,7 @@
 	select PCI_GT64XXX_PCI0
 	select MIPS_MSC
 	select SWAP_IO_SPACE
+	select USE_OF
 	select SYS_HAS_CPU_MIPS32_R1
 	select SYS_HAS_CPU_MIPS32_R2
 	select SYS_HAS_CPU_MIPS32_R2_EVA
diff --git a/arch/mips/mti-malta/Makefile b/arch/mips/mti-malta/Makefile
--- a/arch/mips/mti-malta/Makefile
+++ b/arch/mips/mti-malta/Makefile
@@ -11,6 +11,8 @@
 
 obj-$(CONFIG_EARLY_PRINTK)	+= malta-console.o
 obj-$(CONFIG_PCI)		+= malta-pci.o
+obj-$(CONFIG_DTC)		+= malta-dt-setup.o
 
 # FIXME FIXME FIXME
 obj-$(CONFIG_MIPS_MT_SMTC)	+= malta-smtc.o
+obj-$(CONFIG_DTC)		+= dts/
diff --git a/arch/mips/mti-malta/dts/Makefile b/arch/mips/mti-malta/dts/Makefile
new file mode 100755
--- /dev/null
+++ b/arch/mips/mti-malta/dts/Makefile
@@ -0,0 +1,1 @@
+obj-y := Malta.dtb.o
diff --git a/arch/mips/mti-malta/dts/Malta.dts b/arch/mips/mti-malta/dts/Malta.dts
new file mode 100755
--- /dev/null
+++ b/arch/mips/mti-malta/dts/Malta.dts
@@ -0,0 +1,10 @@
+/dts-v1/;
+
+/include/ "Malta.dtsi"
+
+/ {
+	chosen {
+		bootargs-append = "console=ttyS0,115200n8r ";
+        };
+
+};
diff --git a/arch/mips/mti-malta/dts/Malta.dtsi b/arch/mips/mti-malta/dts/Malta.dtsi
new file mode 100755
--- /dev/null
+++ b/arch/mips/mti-malta/dts/Malta.dtsi
@@ -0,0 +1,20 @@
+/ {
+	#address-cells = <1>;
+	#size-cells = <1>;
+	compatible = "lantiq,xway", "lantiq,grx500";
+
+	cpus {
+		cpu@0 {
+			compatible = "mips,InterAptiv";
+		};
+		cpu@1 {
+			compatible = "mips,InterAptiv";
+		};
+		cpu@2 {
+			compatible = "mips,InterAptiv";
+		};
+		cpu@3 {
+			compatible = "mips,InterAptiv";
+		};
+	};
+};
diff --git a/arch/mips/mti-malta/malta-dt-setup.c b/arch/mips/mti-malta/malta-dt-setup.c
new file mode 100644
--- /dev/null
+++ b/arch/mips/mti-malta/malta-dt-setup.c
@@ -0,0 +1,41 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2012 MIPS Technologies, Inc.  All rights reserved.
+ */
+#include <linux/init.h>
+#include <linux/of_platform.h>
+#include <linux/of_fdt.h>
+#include <linux/bootmem.h>
+
+#include <asm/mips-boards/generic.h>
+
+void __init device_tree_init(void)
+{
+#if 0
+	unsigned long base, size;
+
+	printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+	if (!initial_boot_params)
+		return;
+
+	printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+	base = virt_to_phys((void *)initial_boot_params);
+	size = be32_to_cpu(initial_boot_params->totalsize);
+
+	printk ("[%s]:[%d] base=%lx size=%ld \n", __FUNCTION__, __LINE__, base, size);
+
+	/* Before we do anything, lets reserve the dt blob */
+	reserve_bootmem(base, size, BOOTMEM_DEFAULT);
+
+	printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+	unflatten_device_tree();
+	printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+#else
+	// printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+	unflatten_device_tree();
+	// printk ("[%s]:[%d]  \n", __FUNCTION__, __LINE__);
+#endif
+}
diff --git a/arch/mips/mti-malta/malta-init.c b/arch/mips/mti-malta/malta-init.c
--- a/arch/mips/mti-malta/malta-init.c
+++ b/arch/mips/mti-malta/malta-init.c
@@ -22,6 +22,8 @@
 #include <asm/gcmpregs.h>
 #include <asm/mips-boards/generic.h>
 #include <asm/mips-boards/malta.h>
+#include <linux/of_platform.h>
+#include <linux/of_fdt.h>
 
 static int mips_revision_corid;
 int mips_revision_sconid;
@@ -36,7 +38,8 @@
 /* MIPS System controller register base */
 unsigned long _pcictrl_msc;
 
-#ifdef CONFIG_SERIAL_8250_CONSOLE
+//#ifdef CONFIG_SERIAL_8250_CONSOLE
+#if 0
 static void __init console_config(void)
 {
 	char console_string[40];
@@ -115,10 +118,14 @@
 void __init prom_mem_check(int niocu);
 extern struct plat_smp_ops msmtc_smp_ops;
 
+extern struct boot_param_header __dtb_start;
+
 void __init prom_init(void)
 {
 	mips_display_message("LINUX");
 
+	 __dt_setup_arch(&__dtb_start);
+
 	/*
 	 * early setup of _pcictrl_bonito so that we can determine
 	 * the system controller on a CORE_EMUL board
@@ -306,7 +313,7 @@
 	fw_init_cmdline();
 	fw_meminit();
 #ifdef CONFIG_SERIAL_8250_CONSOLE
-	console_config();
+	//console_config();
 #endif
 	/* Early detection of CMP support */
 	if (gcmp_probe(GCMP_BASE_ADDR, GCMP_ADDRSPACE_SZ)) {
diff --git a/drivers/of/fdt.c b/drivers/of/fdt.c
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@ -24,7 +24,6 @@
 #endif /* CONFIG_PPC */
 
 #include <asm/page.h>
-
 char *of_fdt_get_string(struct boot_param_header *blob, u32 offset)
 {
 	return ((char *)blob) +
@@ -261,8 +260,13 @@
 		if (strcmp(pname, "name") == 0)
 			has_name = 1;
 		l = strlen(pname) + 1;
+#ifndef CONFIG_MIPS_MALTA
 		pp = unflatten_dt_alloc(&mem, sizeof(struct property),
 					__alignof__(struct property));
+#else
+		pp = unflatten_dt_alloc(&mem, sizeof(struct property)+sz,
+					__alignof__(struct property));
+#endif
 		if (allnextpp) {
 			/* We accept flattened tree phandles either in
 			 * ePAPR-style "phandle" properties, or the
@@ -281,9 +285,17 @@
 				np->phandle = be32_to_cpup((__be32 *)*p);
 			pp->name = pname;
 			pp->length = sz;
+#ifndef CONFIG_MIPS_MALTA
 			pp->value = (void *)*p;
+#else
+			pp->value = pp+1;
+#endif
 			*prev_pp = pp;
 			prev_pp = &pp->next;
+#ifdef CONFIG_MIPS_MALTA
+			memcpy(pp->value,*p, sz - 1);
+			((char *)pp->value)[sz - 1] = 0;
+#endif
 		}
 		*p = ALIGN((*p) + sz, 4);
 	}

