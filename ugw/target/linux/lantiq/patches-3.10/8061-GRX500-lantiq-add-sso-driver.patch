# HG changeset patch
# Parent 50c523363eaf4d5bad1ff4664975d0142fe9d8f0

diff --git a/drivers/leds/Kconfig b/drivers/leds/Kconfig
--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -479,6 +479,17 @@ config LEDS_BLINKM
 	  This option enables support for the BlinkM RGB LED connected
 	  through I2C. Say Y to enable support for the BlinkM LED.
 
+config LEDS_XRX500
+	bool "LED driver for XRX500 SSO Unit"
+	depends on SOC_GRX500
+	help
+	  This enables support for the Serial Shift Output Controller (SSO) unit found
+	  on XRX500 SoC. The SSO allows the SoC to drive a shift registers cascade,
+	  that can be up to 32 bit. This peripheral is aimed at driving leds.
+	  Some of the gpios/leds can be auto updated by the soc with phy status.
+	  This also acts as a GPIO controller for drivers to drive the shift register
+	  outputs.
+
 comment "LED Triggers"
 source "drivers/leds/trigger/Kconfig"
 
diff --git a/drivers/leds/Makefile b/drivers/leds/Makefile
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -53,6 +53,7 @@ obj-$(CONFIG_LEDS_RENESAS_TPU)		+= leds-
 obj-$(CONFIG_LEDS_MAX8997)		+= leds-max8997.o
 obj-$(CONFIG_LEDS_LM355x)		+= leds-lm355x.o
 obj-$(CONFIG_LEDS_BLINKM)		+= leds-blinkm.o
+obj-$(CONFIG_LEDS_XRX500)		+= leds-xrx500.o
 
 # LED SPI Drivers
 obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
diff --git a/drivers/leds/leds-xrx500-config.h b/drivers/leds/leds-xrx500-config.h
new file mode 100755
--- /dev/null
+++ b/drivers/leds/leds-xrx500-config.h
@@ -0,0 +1,127 @@
+#ifndef __LEDS_XRX500_CONFIG_H
+#define __LEDS_XRX500_CONFIG_H
+
+
+#define NUM_LEDS 32
+
+/*
+ *  Definition of Operation MASK
+ */
+/*!
+  \def XRX500_SSO_CFG_OP_UPDATE_SHADOW
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Predefined LED ON bits.
+ */
+#define XRX500_SSO_CFG_OP_UPDATE_SHADOW       0x0001
+/*!
+  \def XRX500_SSO_CFG_OP_BLINK_MASK
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Reserve the bits needed for HW blink.
+ */
+#define XRX500_SSO_CFG_OP_BLINK_MASK         0x0002
+/*!
+  \def XRX500_SSO_CFG_OP_UPDATE_CLOCK
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Select update clock source
+ */
+#define XRX500_SSO_CFG_OP_UPDATE_CLOCK        0x0004
+/*!
+  \def XRX500_SSO_CFG_OP_UPDATE_FPID
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Select the FPID value
+ */
+#define XRX500_SSO_CFG_OP_UPDATE_FPID      0x0008
+/*!
+  \def XRX500_SSO_CFG_OP_UPDATE_FCDSC
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Select the FCDSC value
+ */
+#define XRX500_SSO_CFG_OP_UPDATE_FCDSC      0x0010
+/*!
+  \def XRX500_SSO_CFG_OP_UPDATE_GPTD
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Select the GPTD value
+ */
+#define XRX500_SSO_CFG_OP_UPDATE_GPTD      0x0020
+/*!
+  \def XRX500_SSO_CFG_OP_BLINK_RATE
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Blink rate can be different from update rate for LEDs 0-23
+ */
+#define XRX500_SSO_CFG_OP_BLINK_RATE      0x0040
+/*!
+  \def XRX500_SSO_CFG_OP_INDIVIDUAL_BLINK_SOURCE
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Blink rate can be unique for each of the LEDs from 24-31
+ */
+#define XRX500_SSO_CFG_OP_INDIVIDUAL_BLINK_SOURCE      0x0080
+/*!
+  \def XRX500_SSO_CFG_OP_BLINK_SOURCE_0_23
+  \brief field "operation_mask" of struct "xrx500_sso_config_param" - Blink rate for leds 0-23, if the blink rate has to be different from update rate
+ */
+#define XRX500_SSO_CFG_OP_BLINK_SOURCE_0_23             0x0100
+
+enum xrx500_sso_CON1_us
+{
+	LED_CON1_UPDATE_SRC_SW = 0,
+	LED_CON1_UPDATE_SRC_GPTD2,
+	LED_CON1_UPDATE_SRC_FPID,
+};
+
+enum xrx500_sso_H8_us
+{
+	LED_H8_UPDATE_SRC_FPID = 0,
+	LED_H8_UPDATE_SRC_GPTD,
+	LED_H8_UPDATE_SRC_VIM,
+};
+
+enum xrx500_sso_fsc_divider 
+{
+	LED_FSC_2HZ = 0,
+	LED_FSC_4HZ,
+	LED_FSC_8HZ,
+	LED_FSC_10HZ,
+};
+
+enum xrx500_sso_gptd_divider
+{
+	LED_GPTD_50HZ = 0,
+	LED_GPTD_100HZ,
+	LED_GPTD_200HZ,
+	LED_GPTD_250HZ,
+};
+
+/*!
+  \struct xrx500_sso_ledc_config_param
+  \brief Structure used for configure LED Controller (Serial Out).
+ */
+struct xrx500_sso_config_param 
+{
+	unsigned long   operation_mask;         /*!< input, Select operations to be performed */
+	unsigned long   blink_mask;             /*!< input, LEDs to set blink mode */
+	unsigned long   update_clock;           /*!< input, Select the source of update clock, 0 - Software, 1 - GPT, 2 - FPI */
+	unsigned long   fpid;                   /*!< input, If FPI, set the frequency*/
+	unsigned long   gptd;                   /*!< input, If GPTD, set the frequency*/
+	unsigned long   fcdsc;                  /*!< input, FPI is the source of shift clock, set the divider */
+	unsigned long   shadow;                  /*!< input, LEDs to set value */
+	unsigned long   is_blink_rate_diff;      /*!< input, set if the blink rate is different from update rate for leds 0:23*/
+	enum xrx500_sso_H8_us blink_rate_source_0[8];   /*!<blink rate source for LEDS 24-31*/
+	enum xrx500_sso_H8_us blink_rate_source_1;   /*!<blink rate source for LEDS 0-23*/
+};
+
+static struct xrx500_sso_config_param g_board_xrx500_sso_hw_config = {
+	.operation_mask         = XRX500_SSO_CFG_OP_UPDATE_SHADOW | XRX500_SSO_CFG_OP_BLINK_MASK 
+				| XRX500_SSO_CFG_OP_UPDATE_CLOCK | XRX500_SSO_CFG_OP_UPDATE_FPID | XRX500_SSO_CFG_OP_UPDATE_FCDSC | XRX500_SSO_CFG_OP_UPDATE_GPTD
+				| XRX500_SSO_CFG_OP_BLINK_RATE | XRX500_SSO_CFG_OP_INDIVIDUAL_BLINK_SOURCE | XRX500_SSO_CFG_OP_BLINK_SOURCE_0_23 ,
+	.shadow		    = 0x0,
+	.blink_mask             = 0xff002000,
+	.update_clock           = LED_CON1_UPDATE_SRC_GPTD2,
+	.fpid                   = 3,
+	.fcdsc                  = 2,
+	.gptd					= 0,
+	.is_blink_rate_diff     = 0,
+	.blink_rate_source_0     = {
+				LED_H8_UPDATE_SRC_GPTD,
+				LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+					LED_H8_UPDATE_SRC_GPTD,
+			      },
+	.blink_rate_source_1 = LED_H8_UPDATE_SRC_FPID
+};
+#endif
diff --git a/drivers/leds/leds-xrx500.c b/drivers/leds/leds-xrx500.c
new file mode 100755
--- /dev/null
+++ b/drivers/leds/leds-xrx500.c
@@ -0,0 +1,662 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2014 Kavitha  Subramanian <s.kavitha.EE@lantiq.com>
+ *
+ */
+
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+#include <linux/mutex.h>
+#include <linux/gpio.h>
+#include <linux/leds.h>
+#include <linux/io.h>
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <lantiq_soc.h>
+#include "leds-xrx500-config.h"
+
+/*
+* The Serial Shift Output (SSO) is found on MIPS based Lantiq xrx500 socs.
+*It is a peripheral controller used to drive external shift register
+*cascades. At most 4 groups of 8 bits can be driven.
+*/
+
+/* control register 0 */
+#define XRX500_SSO_CON0		0x2B0
+/* control register 1 */
+#define XRX500_SSO_CON1		0x2B4
+/* data register 0 */
+#define XRX500_SSO_CPU0		0x2B8
+/* data register 1 */
+#define XRX500_SSO_CPU1		0x2BC
+/* access register */
+#define XRX500_SSO_AR		0x2C0
+/* control register 2 */
+#define XRX500_SSO_CON2		0x2C4
+/* control register 3 */
+#define XRX500_SSO_CON3		0x2C8
+
+/*blink control*/
+#define XRX500_SSO_BLINK_H8_0    0x0
+#define XRX500_SSO_BLINK_H8_1    0x4
+#define XRX500_SSO_BLINK_SOURCE_SHIFT 22
+/*Dutycycle register*/
+#define XRX500_SSO_DUTYCYCLE_BASE      0x8
+#define XRX500_SSO_DUTYCYCLE_OFFSET    0x4
+
+/* software or hardware update select bit */
+#define XRX500_SSO_CON_SWU	BIT(31)
+
+/* Blink rate select bit */
+#define XRX500_SSO_BLINK_RATE	BIT(30)
+
+/* clock source for update */
+#define XRX500_SSO_UPD_SHIFT	30
+#define XRX500_SSO_UPD_MASK	0x3
+
+
+/* FPID */
+#define XRX500_SSO_FPID_SHIFT	23
+#define XRX500_SSO_FPID_MASK	0x3
+
+/* FCDSE */
+#define XRX500_SSO_FCDSC_SHIFT	20
+#define XRX500_SSO_FCDSC_MASK	0x3
+
+/* GPTD */
+#define XRX500_SSO_GPTD_SHIFT	25
+#define XRX500_SSO_GPTD_MASK	0x3
+
+/*PHY control*/
+#define XRX500_SSO_PHY_MASK     0x7
+#define XRX500_SSO_LD0_MASK	0x1F
+#define XRX500_SSO_LD1_MASK     0x1F00
+#define XRX500_SSO_LD2_MASK     0x1F0000
+
+#define XRX500_SSO_LD0_SHIFT	0
+#define XRX500_SSO_LD1_SHIFT	8
+#define XRX500_SSO_LD2_SHIFT	16
+
+#define XRX500_SSO_PHY6_SHIFT_FACTOR	0
+#define XRX500_SSO_PHY2_SHIFT_FACTOR	1
+#define XRX500_SSO_PHY3_SHIFT_FACTOR	2
+#define XRX500_SSO_PHY4_SHIFT_FACTOR    3
+#define XRX500_SSO_PHY5_SHIFT_FACTOR    4
+
+#define XRX500_SSO_LD0_PATTERN(phy6, phy2, phy3, phy4, phy5) \
+						(((phy6 & BIT(0))\
+						| ((phy2 & BIT(0)) << 1)\
+						| ((phy3 & BIT(0)) << 2)\
+						|((phy4 & BIT(0)) << 3)\
+						|((phy5 & BIT(0)) << 4)\
+						) << XRX500_SSO_LD0_SHIFT)
+#define XRX500_SSO_LD1_PATTERN(phy6, phy2, phy3, phy4, phy5) \
+					(((phy6 & BIT(1))\
+					| ((phy2 & BIT(1)) << 1)\
+					| ((phy3 & BIT(1)) << 2)\
+					| ((phy4 & BIT(1)) << 3)\
+					| ((phy5 & BIT(1)) << 4)\
+					) << XRX500_SSO_LD1_SHIFT)
+#define XRX500_SSO_LD2_PATTERN(phy6, phy2, phy3, phy4, phy5) \
+					(((phy6 & BIT(2))\
+					| ((phy2 & BIT(2)) << 1)\
+					| ((phy3 & BIT(2)) << 2)\
+					| ((phy4 & BIT(2)) << 3)\
+					| ((phy5 & BIT(2)) << 4)\
+					) << XRX500_SSO_LD2_SHIFT)
+
+/*WLAN control*/
+#define XRX500_SSO_WLAN_MASK	0x3F
+#define XRX500_SSO_W1_W2_W3_MASK	0xE0
+#define XRX500_SSO_W4_W5_W6_MASK	0xE000
+
+#define XRX500_SSO_W1_W2_W3_SHIFT	5
+#define XRX500_SSO_W4_W5_W6_SHIFT	13
+
+#define XRX500_SSO_W1_W2_W3_PATTERN(wlan)	\
+	((wlan & 0x3) << XRX500_SSO_W1_W2_W3_SHIFT)
+#define XRX500_SSO_W4_W5_W6_PATTERN(wlan)	\
+	((wlan & 0x38) << XRX500_SSO_W4_W5_W6_SHIFT)
+
+/*SSO has 3 groups of 8 bits */
+#define XRX500_SSO_GROUP0		BIT(0)
+#define XRX500_SSO_GROUP1		BIT(1)
+#define XRX500_SSO_GROUP2		BIT(2)
+#define XRX500_SSO_GROUP3		BIT(3)
+#define XRX500_SSO_GROUP_MASK		(0xF)
+
+/* Edge configuration bits */
+#define XRX500_SSO_FALLING	BIT(26)
+#define XRX500_SSO_EDGE_MASK	BIT(26)
+
+/*Dutycycle configuration bit*/
+#define XRX500_SSO_DUTYCYCLE(led)	\
+	(XRX500_SSO_DUTYCYCLE_BASE + (led * XRX500_SSO_DUTYCYCLE_OFFSET))
+
+#define xrx500_sso_r32(m, reg)		__raw_readl(m + reg)
+#define xrx500_sso_w32(m, val, reg)	__raw_writel(val, m + reg)
+#define xrx500_sso_w32_mask(m, clear, set, reg) \
+		ltq_w32((ltq_r32(m + reg) & ~(clear)) | (set), \
+		m + reg)
+struct xrx500_sso_freq_table {
+	u32 value;
+	u32 range_start;
+	u32 range_end;
+};
+
+struct xrx500_sso {
+	struct gpio_chip gc;
+	void __iomem *virt;
+	u32 edge;	/* rising or falling edge triggered shift register */
+	u32 shadow;	/* shadow the shift registers state */
+	u8 groups;	/* we can drive 1 groups of 8bit each */
+	u8 phy2;	/* 3 bits can be driven by phy2 */
+	u8 phy3;	/* 3 bits can be driven by phy3 */
+	u8 phy4;	/* 3 bits can be driven by phy4 */
+	u8 phy5;	/* 3 bits can be driven by phy5 */
+	u8 phy6;	/* 3 bits can be driven by phy6 */
+	u8 upd;	/* 2 bits for update source*/
+	u32 blink_mask;
+	u32 blink_rate;
+	u32 blink_source_24_31[8];
+	u32 blink_source_0_23;
+	u8 wlan;	/*6 bits for WLAN*/
+	u8 reserved;	/* mask out the hw driven bits in gpio_request */
+};
+
+struct xrx500_sso_led {
+	struct led_classdev     device;             /*!< LED device */
+	const char *name;
+	const char *default_trigger;
+	unsigned	phys_id;
+	unsigned	active_low:1;
+	unsigned	retain_state_suspended:1;
+	unsigned	default_state:2;
+	struct work_struct work;
+	u8 new_level;
+	u8 can_sleep;
+	u8 blinking;
+};
+
+static struct xrx500_sso_freq_table fpid_table[] = {
+	{0, 251, 500},
+	{1, 126, 250},
+	{2, 101, 125},
+	{3, 1, 100}
+};
+
+static struct xrx500_sso_freq_table gptd_table[] = {
+	{0, 11, 20},
+	{1, 6, 10},
+	{2, 5, 5},
+	{3, 1, 4}
+};
+
+static struct xrx500_sso *g_chip;
+static struct xrx500_sso_led g_xrx500_sso_led_config[NUM_LEDS];
+
+/**
+ * xrx500_sso_set() - gpio_chip->set - set gpios.
+ * @gc:     Pointer to gpio_chip device structure.
+ * @gpio:   GPIO signal number.
+ * @val:    Value to be written to specified signal.
+ *
+ * Set the shadow value and call ltq_ebu_apply.
+ */
+static void xrx500_sso_set(struct gpio_chip *gc, unsigned gpio, int val)
+{
+	struct xrx500_sso *chip =
+		container_of(gc, struct xrx500_sso, gc);
+	/*normal LED ON/OFF*/
+	pr_debug(" %s shadow 0x%x gpio %d val %d\r\n", __func__,
+		chip->shadow, gpio, val);
+	if (val)
+		chip->shadow |= BIT(gpio);
+	else
+		chip->shadow &= ~BIT(gpio);
+	xrx500_sso_w32(chip->virt, chip->shadow, XRX500_SSO_CPU0);
+	xrx500_sso_w32(chip->virt, val, XRX500_SSO_DUTYCYCLE(gpio));
+	xrx500_sso_w32_mask(chip->virt, 0, XRX500_SSO_CON_SWU, XRX500_SSO_CON0);
+
+}
+/**
+ * xrx_sso_dir_out() - gpio_chip->dir_out - set gpio direction.
+ * @gc:     Pointer to gpio_chip device structure.
+ * @gpio:   GPIO signal number.
+ * @val:    Value to be written to specified signal.
+ *
+ * Same as xrx500_sso_set, always returns 0.
+ */
+static int xrx500_sso_dir_out(struct gpio_chip *gc, unsigned gpio, int val)
+{
+	xrx500_sso_set(gc, gpio, val);
+	return 0;
+}
+
+/**
+ * xrx500_sso_request() - gpio_chip->request
+ * @gc:     Pointer to gpio_chip device structure.
+ * @gpio:   GPIO signal number.
+ *
+ * We mask out the HW driven pins
+ */
+static int xrx500_sso_request(struct gpio_chip *gc, unsigned gpio)
+{
+	struct xrx500_sso *chip =
+		container_of(gc, struct xrx500_sso, gc);
+
+	if (/*(gpio < 15) && */(chip->reserved & BIT(gpio))) {
+		dev_err(gc->dev, "GPIO %d is driven by hardware\n", gpio);
+		return -ENODEV;
+	}
+	if ((BIT(gpio) & chip->blink_mask) == BIT(gpio)) {
+		/*Its a blink masked gpio, so check the US*/
+		if (chip->upd == LED_CON1_UPDATE_SRC_SW) {
+			/*throw a warning, the update source is sw*/
+			dev_err(gc->dev,
+			"GPIO %d configure the update source to be FPID or GPTD\n",
+			gpio);
+		}
+	}
+	return 0;
+}
+
+#define find_range(delay_on, delay_off, table, value) \
+for (j = 0; j < 4; j++) { \
+	if ( \
+	(delay_on >= table[j].range_start && delay_on <= table[j].range_end) \
+	|| \
+	(delay_off >= table[j].range_start && delay_off <= table[j].range_end)) { \
+		value = j; \
+		break;\
+	} \
+} \
+
+/* LED Related Code */
+static void xrx500_sso_program_delay(
+	int phys_id,
+	unsigned long delay_on,
+	unsigned long delay_off) {
+
+	int j = 0, k = 0;
+	int value = 0;
+	/*program the individual programmable rate if
+	proper range is found or fallback to default values*/
+	if (!g_chip->blink_rate) {
+		if (g_chip->upd == LED_CON1_UPDATE_SRC_FPID) {
+			find_range(delay_on, delay_off, fpid_table, value);
+			pr_debug("delay %d %d value from table %d %d\r\n",
+			delay_on, delay_off, value, fpid_table[value].value);
+			xrx500_sso_w32_mask(g_chip->virt,
+			XRX500_SSO_FPID_MASK << XRX500_SSO_FPID_SHIFT,
+			fpid_table[value].value << XRX500_SSO_FPID_SHIFT,
+			XRX500_SSO_CON1);
+		} else if (g_chip->upd == LED_CON1_UPDATE_SRC_GPTD2) {
+			find_range(delay_on, delay_off, gptd_table, value);
+			pr_debug("delay %d %d value from table %d %d\r\n",
+			delay_on, delay_off,
+			value, gptd_table[value].value);
+			xrx500_sso_w32_mask(g_chip->virt,
+			XRX500_SSO_GPTD_MASK << XRX500_SSO_GPTD_SHIFT,
+			gptd_table[value].value << XRX500_SSO_GPTD_SHIFT,
+			XRX500_SSO_CON1);
+		}
+		return;
+	}
+	if ((phys_id >= 24) && (phys_id <= 31)) {
+		k = phys_id - 24;
+		if (g_chip->blink_source_24_31[k] == LED_H8_UPDATE_SRC_FPID) {
+			find_range(delay_on, delay_off, fpid_table, value);
+			xrx500_sso_w32_mask(g_chip->virt, 0x3 << ((k%5) * 6),
+			fpid_table[value].value << ((k%5) * 6),
+			((phys_id < 29) ? XRX500_SSO_BLINK_H8_0 : XRX500_SSO_BLINK_H8_1));
+		} else if (g_chip->blink_source_24_31[k] == LED_H8_UPDATE_SRC_GPTD) {
+			find_range(delay_on, delay_off, gptd_table, value);
+			xrx500_sso_w32_mask(g_chip->virt, 0x3 << (((k%5) * 6) + 2),
+			gptd_table[value].value << (((k%5) * 6) + 2),
+			((phys_id < 29) ? XRX500_SSO_BLINK_H8_0 : XRX500_SSO_BLINK_H8_1));
+		}
+	} else if ((phys_id >= 0) && (phys_id <= 23)) {
+		k = 3;
+		if (g_chip->blink_source_0_23 == LED_H8_UPDATE_SRC_FPID) {
+			find_range(delay_on, delay_off, fpid_table, value);
+			xrx500_sso_w32_mask(g_chip->virt, 0x3 << (k * 6), fpid_table[value].value << (k * 6), XRX500_SSO_BLINK_H8_1);
+		} else if (g_chip->blink_source_0_23 == LED_H8_UPDATE_SRC_GPTD) {
+			find_range(delay_on, delay_off, gptd_table, value);
+			xrx500_sso_w32_mask(g_chip->virt, 0x3 << ((k * 6) + 2), gptd_table[value].value << ((k * 6) + 2), XRX500_SSO_BLINK_H8_1);
+		}
+	}
+}
+static int xrx500_sso_led_blink_set(struct led_classdev *device,
+				unsigned long *delay_on,
+				unsigned long *delay_off)
+
+{
+	struct xrx500_sso_led *led = (struct xrx500_sso_led *) device;
+	u32 reg;
+	if ((BIT(led->phys_id) & g_chip->blink_mask) == BIT(led->phys_id)) {
+		reg = xrx500_sso_r32(g_chip->virt, XRX500_SSO_CON2);
+		reg |= BIT(led->phys_id);
+		xrx500_sso_program_delay(led->phys_id, *delay_on, *delay_off);
+		xrx500_sso_w32(g_chip->virt, reg, XRX500_SSO_CON2);
+		led->blinking = 1;
+		return 0;
+	} else{
+		pr_err("blink mask not enable\r\n");
+		return -1;
+	}
+}
+
+static void ledc_brightness_set(struct led_classdev *device, enum led_brightness value)
+{
+	u32 reg;
+	struct xrx500_sso_led *led = (struct xrx500_sso_led *) device;
+
+	xrx500_sso_w32(g_chip->virt, value, XRX500_SSO_DUTYCYCLE(led->phys_id));
+	/*normal LED ON/OFF*/
+	if (led->blinking && (value == 0)) {
+			reg = xrx500_sso_r32(g_chip->virt, XRX500_SSO_CON2);
+			reg &= ~BIT(led->phys_id);
+			xrx500_sso_w32(g_chip->virt, reg, XRX500_SSO_CON2);
+			led->blinking = 0;
+	}
+	if (!led->blinking) {
+		if (value)
+			g_chip->shadow |= BIT(led->phys_id);
+		else
+			g_chip->shadow &= ~BIT(led->phys_id);
+		xrx500_sso_w32(g_chip->virt, g_chip->shadow, XRX500_SSO_CPU0);
+		if (g_chip->upd == LED_CON1_UPDATE_SRC_SW)
+			xrx500_sso_w32_mask(g_chip->virt, 0, XRX500_SSO_CON_SWU, XRX500_SSO_CON0);
+	}
+}
+
+/* Code to create from OpenFirmware platform devices */
+static int gpio_leds_create_of(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node, *child;
+	int count, ret, i = 0;
+
+	/* count LEDs in this device, so we know how much to allocate */
+	count = of_get_child_count(np);
+	if (!count)
+		return -ENODEV;
+
+	for_each_child_of_node(np, child) {
+		struct xrx500_sso_led *led_dat = &g_xrx500_sso_led_config[i];
+		led_dat->device.name = of_get_property(child, "label",
+						     NULL) ? : child->name;
+		pr_debug("name %s\r\n", led_dat->device.name);
+		led_dat->device.default_trigger = of_get_property(child,
+						"linux,default-trigger", NULL);
+		of_property_read_u32(child, "max-brightness",
+				     &led_dat->device.max_brightness);
+
+		of_property_read_u32(child, "reg", &led_dat->phys_id);
+		led_dat->device.brightness_set = ledc_brightness_set;
+		led_dat->device.blink_set = xrx500_sso_led_blink_set;
+		led_dat->device.brightness = LED_OFF;
+		led_dat->device.flags |= LED_CORE_SUSPENDRESUME;
+		if ((led_classdev_register(&pdev->dev, &led_dat->device)) != 0)
+			return -ENODEV;
+		else
+			pr_debug("classdev registered successfully\r\n");
+
+		i++;
+	}
+
+	return 0;
+}
+
+static int sso_led_init(struct platform_device *pdev)
+{
+	struct pinctrl *pinctrl;
+
+	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(pinctrl))
+		dev_warn(&pdev->dev,
+			"pins are not configured from the driver\n");
+
+	gpio_leds_create_of(pdev);
+
+	return 0;
+}
+
+/**
+ * xrx500_sso_hw_init() - Configure the SSO unit and enable the clock gate
+ * @virt: pointer to the remapped register range
+ */
+static int xrx500_sso_hw_init(struct xrx500_sso *chip, struct xrx500_sso_config_param *param)
+{
+	u32 i  = 0;
+	struct clk *test_clk;
+	int ret = 0;
+	/* sane defaults */
+	xrx500_sso_w32(chip->virt, 0, XRX500_SSO_AR);
+	xrx500_sso_w32(chip->virt, 0, XRX500_SSO_CPU0);
+	xrx500_sso_w32(chip->virt, 0, XRX500_SSO_CPU1);
+	xrx500_sso_w32(chip->virt, 0, XRX500_SSO_CON1);
+
+	/* apply edge trigger settings for the shift register */
+	xrx500_sso_w32_mask(chip->virt, XRX500_SSO_EDGE_MASK,
+				chip->edge, XRX500_SSO_CON0);
+
+	/* apply led group settings */
+	xrx500_sso_w32_mask(chip->virt, XRX500_SSO_GROUP_MASK,
+				chip->groups, XRX500_SSO_CON1);
+
+	/* tell the hardware which pins are controlled by the PHY*/
+	xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_LD0_MASK << XRX500_SSO_LD0_SHIFT,
+		XRX500_SSO_LD0_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5),
+		XRX500_SSO_CON3);
+	 xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_LD1_MASK << XRX500_SSO_LD1_SHIFT,
+		XRX500_SSO_LD1_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5),
+		XRX500_SSO_CON3);
+	 xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_LD2_MASK << XRX500_SSO_LD2_SHIFT,
+		XRX500_SSO_LD2_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5),
+		XRX500_SSO_CON3);
+	/* tell the hardware which pins are controlled by the WLAN*/
+	xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_W1_W2_W3_MASK << XRX500_SSO_W1_W2_W3_SHIFT,
+		XRX500_SSO_W1_W2_W3_PATTERN(chip->wlan),
+		XRX500_SSO_CON3);
+	 xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_W4_W5_W6_MASK << XRX500_SSO_W4_W5_W6_SHIFT,
+		XRX500_SSO_W4_W5_W6_PATTERN(chip->wlan),
+		XRX500_SSO_CON3);
+
+
+	/* mask out the hw driven bits in gpio_request */
+	chip->reserved  = XRX500_SSO_LD0_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5)
+			| XRX500_SSO_LD1_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5)
+			| XRX500_SSO_LD2_PATTERN(chip->phy6, chip->phy2, chip->phy3, chip->phy4, chip->phy5);
+	/*WLAN pins are mapped to SOUT4 as per the registers specification*/
+	if (chip->wlan)
+		chip->reserved |= (1 << 4);
+	if (param == NULL)
+		return 0;
+
+	if (param->operation_mask & XRX500_SSO_CFG_OP_UPDATE_SHADOW) {
+		/* store the shadow value if one was passed by the config */
+		chip->shadow = param->shadow;
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_BLINK_MASK) {
+		/* store the blink mask value if one was passed by the config */
+		chip->blink_mask = param->blink_mask;
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_UPDATE_CLOCK) {
+		chip->upd = param->update_clock;
+		xrx500_sso_w32_mask(chip->virt,
+			XRX500_SSO_UPD_MASK << XRX500_SSO_UPD_SHIFT,
+			chip->upd << XRX500_SSO_UPD_SHIFT, XRX500_SSO_CON1);
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_UPDATE_FCDSC) {
+		xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_FCDSC_MASK << XRX500_SSO_FCDSC_SHIFT,
+		param->fcdsc << XRX500_SSO_FCDSC_SHIFT, XRX500_SSO_CON1);
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_UPDATE_FPID) {
+		xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_FPID_MASK << XRX500_SSO_FPID_SHIFT,
+			param->fpid << XRX500_SSO_FPID_SHIFT, XRX500_SSO_CON1);
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_UPDATE_GPTD) {
+		xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_GPTD_MASK << XRX500_SSO_GPTD_SHIFT,
+			param->gptd << XRX500_SSO_GPTD_SHIFT, XRX500_SSO_CON1);
+	}
+	if (param->operation_mask & XRX500_SSO_CFG_OP_BLINK_RATE) {
+		chip->blink_rate = param->is_blink_rate_diff;
+		xrx500_sso_w32_mask(chip->virt,
+		XRX500_SSO_BLINK_RATE, XRX500_SSO_BLINK_RATE, XRX500_SSO_CON0);
+	}
+	/*program the individual blinking source for leds 24:31*/
+	if (param->operation_mask & XRX500_SSO_CFG_OP_INDIVIDUAL_BLINK_SOURCE) {
+		for (i = 0; i < 8; i++) {
+			chip->blink_source_24_31[i] = param->blink_rate_source_0[i];
+			xrx500_sso_w32_mask(chip->virt,
+			0x3 << (((i%5) * 6) + 4),
+			chip->blink_source_24_31[i] << (((i%5) * 6) + 4),
+			((i < 5) ? XRX500_SSO_BLINK_H8_0 : XRX500_SSO_BLINK_H8_1));
+		}
+	}
+	/*program the blinking source for leds 0:23*/
+	if (param->operation_mask & XRX500_SSO_CFG_OP_BLINK_SOURCE_0_23) {
+			chip->blink_source_0_23 = param->blink_rate_source_1;
+			xrx500_sso_w32_mask(chip->virt,
+			0x3 << XRX500_SSO_BLINK_SOURCE_SHIFT,
+			chip->blink_source_0_23 << XRX500_SSO_BLINK_SOURCE_SHIFT,
+			XRX500_SSO_BLINK_H8_1);
+	}
+	test_clk = clk_get_sys("16b00000.gptu", "timer2a");
+	if (IS_ERR(test_clk)) {
+		pr_err("Failed to get clock timer2a\r\n");
+		return -ENOENT;
+	} else {
+			clk_set_rate(test_clk, 32258);
+			ret = clk_enable(test_clk);
+			if (ret) {
+				pr_err("%s enable failed\r\n", __func__);
+				clk_set_rate(test_clk, 0);
+			}
+	}
+	return 0;
+}
+static int xrx500_sso_probe(struct platform_device *pdev)
+{
+	struct resource *res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	const __be32 *groups, *phy, *wlan;
+	struct clk *clk;
+	int ret = 0;
+	struct xrx500_sso_config_param config = g_board_xrx500_sso_hw_config;
+
+	if (!res) {
+		dev_err(&pdev->dev, "failed to request SSO resource\n");
+		return -ENOENT;
+	}
+
+	g_chip = devm_kzalloc(&pdev->dev, sizeof(*g_chip), GFP_KERNEL);
+	if (!g_chip)
+		return -ENOMEM;
+
+	g_chip->virt = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(g_chip->virt))
+		return PTR_ERR(g_chip->virt);
+
+	g_chip->gc.dev = &pdev->dev;
+	g_chip->gc.label = "sso-xrx500";
+	g_chip->gc.direction_output = xrx500_sso_dir_out;
+	g_chip->gc.set = xrx500_sso_set;
+	g_chip->gc.request = xrx500_sso_request;
+	g_chip->gc.base = -1;
+	g_chip->gc.owner = THIS_MODULE;
+
+
+
+	/* find out which gpio groups should be enabled */
+	groups = of_get_property(pdev->dev.of_node, "lantiq,groups", NULL);
+	if (groups)
+		g_chip->groups = be32_to_cpu(*groups) & XRX500_SSO_GROUP_MASK;
+	else
+		g_chip->groups = XRX500_SSO_GROUP0;
+	g_chip->gc.ngpio = fls(g_chip->groups) * 8;
+	if (of_machine_is_compatible("lantiq,gpio-sso-xrx500")) {
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy2", NULL);
+		if (phy)
+			g_chip->phy2 = be32_to_cpu(*phy) & XRX500_SSO_PHY_MASK;
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy3", NULL);
+		if (phy)
+			g_chip->phy3 = be32_to_cpu(*phy) & XRX500_SSO_PHY_MASK;
+
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy4", NULL);
+		if (phy)
+			g_chip->phy4 = be32_to_cpu(*phy) & XRX500_SSO_PHY_MASK;
+
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy5", NULL);
+		if (phy)
+			g_chip->phy5 = be32_to_cpu(*phy) & XRX500_SSO_PHY_MASK;
+
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy6", NULL);
+		if (phy)
+			g_chip->phy6 = be32_to_cpu(*phy) & XRX500_SSO_PHY_MASK;
+		wlan = of_get_property(pdev->dev.of_node, "lantiq,wlan", NULL);
+		if (wlan)
+			g_chip->wlan = be32_to_cpu(*wlan) & XRX500_SSO_WLAN_MASK;
+	}
+
+	/* check which edge trigger we should use, default to a falling edge */
+	if (!of_find_property(pdev->dev.of_node, "lantiq,rising", NULL))
+		g_chip->edge = XRX500_SSO_FALLING;
+
+	clk = clk_get(&pdev->dev, NULL);
+	if (IS_ERR(clk)) {
+		dev_err(&pdev->dev, "Failed to get clock\n");
+		return PTR_ERR(clk);
+	}
+	clk_enable(clk);
+
+	ret = xrx500_sso_hw_init(g_chip, &config);
+	if (!ret)
+		ret = gpiochip_add(&g_chip->gc);
+
+	sso_led_init(pdev);
+	platform_set_drvdata(pdev, g_chip);
+	if (!ret)
+		dev_info(&pdev->dev, "Init done\n");
+
+	return ret;
+}
+
+static const struct of_device_id xrx500_sso_match[] = {
+	{ .compatible = "lantiq,gpio-sso-xrx500" },
+	{},
+};
+
+static struct platform_driver xrx500_sso_driver = {
+	.probe = xrx500_sso_probe,
+	.driver = {
+		.name = "gpio-sso-xrx500",
+		.owner = THIS_MODULE,
+		.of_match_table = xrx500_sso_match,
+	},
+};
+#if 0
+int __init xrx500_sso_init(void)
+{
+	return platform_driver_register(&xrx500_sso_driver);
+}
+
+core_initcall_sync(xrx500_sso_init);
+#else
+module_platform_driver(xrx500_sso_driver);
+#endif
