# HG changeset patch
# Parent 5a8aec1091990702e1abf41a051343e2160cb796
imported patch 3051-MIPS-lantiq-ina219.patch

diff --git a/drivers/hwmon/ina2xx.c b/drivers/hwmon/ina2xx.c
--- a/drivers/hwmon/ina2xx.c
+++ b/drivers/hwmon/ina2xx.c
@@ -34,6 +34,7 @@
 #include <linux/hwmon.h>
 #include <linux/hwmon-sysfs.h>
 #include <linux/jiffies.h>
+#include <linux/of.h>
 
 #include <linux/platform_data/ina2xx.h>
 
@@ -43,6 +44,7 @@
 #define INA2XX_BUS_VOLTAGE		0x02 /* readonly */
 #define INA2XX_POWER			0x03 /* readonly */
 #define INA2XX_CURRENT			0x04 /* readonly */
+#define INA2XX_RAILNAME			0x14 /* readonly */
 #define INA2XX_CALIBRATION		0x05
 
 /* INA226 register definitions */
@@ -64,6 +66,8 @@
 /* worst case is 68.10 ms (~14.6Hz, ina219) */
 #define INA2XX_CONVERSION_RATE		15
 
+#define RAIL_NAME_MAX_LENGTH		20
+
 enum ina2xx_ids { ina219, ina226 };
 
 struct ina2xx_config {
@@ -78,6 +82,7 @@ struct ina2xx_config {
 
 struct ina2xx_data {
 	struct device *hwmon_dev;
+	char rail_name[RAIL_NAME_MAX_LENGTH];
 	const struct ina2xx_config *config;
 
 	struct mutex update_lock;
@@ -163,6 +168,12 @@ static int ina2xx_get_value(struct ina2x
 		/* signed register, LSB=1mA (selected), in mA */
 		val = (s16)data->regs[reg];
 		break;
+	case INA2XX_CALIBRATION:
+		val = data->regs[reg];
+		break;
+	case INA2XX_CONFIG:
+		val = data->regs[reg];
+		break;
 	default:
 		/* programmer goofed */
 		WARN_ON_ONCE(1);
@@ -173,6 +184,27 @@ static int ina2xx_get_value(struct ina2x
 	return val;
 }
 
+static int ina2xx_set_value(struct i2c_client *client, struct ina2xx_data *data,
+				u8 reg, int val)
+{
+	switch (reg) {
+	case INA2XX_CALIBRATION:
+		data->regs[reg] = val;
+		i2c_smbus_write_word_swapped(client, INA2XX_CALIBRATION, val);
+		break;
+	case INA2XX_CONFIG:
+		data->regs[reg] = val;
+		i2c_smbus_write_word_swapped(client, INA2XX_CONFIG, val);
+		break;
+	default:
+		/* programmer goofed */
+		WARN_ON_ONCE(1);
+		val = 0;
+		break;
+	}
+	return 0;
+}
+
 static ssize_t ina2xx_show_value(struct device *dev,
 				 struct device_attribute *da, char *buf)
 {
@@ -182,8 +214,38 @@ static ssize_t ina2xx_show_value(struct 
 	if (IS_ERR(data))
 		return PTR_ERR(data);
 
-	return snprintf(buf, PAGE_SIZE, "%d\n",
+	if (attr->index == INA2XX_RAILNAME) {
+		return snprintf(buf, PAGE_SIZE, "%s\n", data->rail_name);
+	} else if (attr->index == INA2XX_CONFIG) {
+		return snprintf(buf, PAGE_SIZE, "0x%x\n",
 			ina2xx_get_value(data, attr->index));
+	} else {
+		return snprintf(buf, PAGE_SIZE, "%d\n",
+			ina2xx_get_value(data, attr->index));
+	}
+}
+
+static ssize_t ina2xx_store_value(struct device *dev,
+				struct device_attribute *da, const char *buf,
+				size_t count)
+{
+	long val;
+	int err;
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct ina2xx_data *data = i2c_get_clientdata(client);
+
+	err = kstrtol(buf, 0, &val);
+	if (err)
+		return err;
+
+	if (attr->index == INA2XX_CALIBRATION)
+		ina2xx_set_value(client, data, attr->index, (int)val);
+
+	if (attr->index == INA2XX_CONFIG)
+		ina2xx_set_value(client, data, attr->index, (int)val);
+
+	return count;
 }
 
 /* shunt voltage */
@@ -202,12 +264,27 @@ static SENSOR_DEVICE_ATTR(curr1_input, S
 static SENSOR_DEVICE_ATTR(power1_input, S_IRUGO, ina2xx_show_value, NULL,
 			  INA2XX_POWER);
 
+/* rail name */
+static SENSOR_DEVICE_ATTR(rail_name, S_IRUGO, ina2xx_show_value, NULL,
+			  INA2XX_RAILNAME);
+
+/* calibration register */
+static SENSOR_DEVICE_ATTR(cal_reg, S_IWUSR | S_IRUGO, ina2xx_show_value,
+			  ina2xx_store_value, INA2XX_CALIBRATION);
+
+/* configuration register */
+static SENSOR_DEVICE_ATTR(config_reg, S_IWUSR | S_IRUGO, ina2xx_show_value,
+			  ina2xx_store_value, INA2XX_CONFIG);
+
 /* pointers to created device attributes */
 static struct attribute *ina2xx_attributes[] = {
 	&sensor_dev_attr_in0_input.dev_attr.attr,
 	&sensor_dev_attr_in1_input.dev_attr.attr,
 	&sensor_dev_attr_curr1_input.dev_attr.attr,
 	&sensor_dev_attr_power1_input.dev_attr.attr,
+	&sensor_dev_attr_rail_name.dev_attr.attr,
+	&sensor_dev_attr_cal_reg.dev_attr.attr,
+	&sensor_dev_attr_config_reg.dev_attr.attr,
 	NULL,
 };
 
@@ -222,6 +299,8 @@ static int ina2xx_probe(struct i2c_clien
 	struct ina2xx_data *data;
 	struct ina2xx_platform_data *pdata;
 	int ret;
+	u32 val, cal_factor;
+	const char *railname = NULL;
 	long shunt = 10000; /* default shunt value 10mOhms */
 
 	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_WORD_DATA))
@@ -235,11 +314,21 @@ static int ina2xx_probe(struct i2c_clien
 		pdata =
 		  (struct ina2xx_platform_data *)client->dev.platform_data;
 		shunt = pdata->shunt_uohms;
+	} else if (!of_property_read_u32(client->dev.of_node,
+						"shunt-resistor", &val)) {
+		shunt = val;
 	}
 
 	if (shunt <= 0)
 		return -ENODEV;
 
+	data->rail_name[0] = '\0'; /* init rail_name */
+	if (!of_property_read_string(client->dev.of_node,
+						"rail-name", &railname)) {
+		strncpy(data->rail_name, railname, RAIL_NAME_MAX_LENGTH);
+		data->rail_name[RAIL_NAME_MAX_LENGTH - 1] = '\0';
+	}
+
 	/* set the device type */
 	data->kind = id->driver_data;
 	data->config = &ina2xx_config[data->kind];
@@ -247,10 +336,16 @@ static int ina2xx_probe(struct i2c_clien
 	/* device configuration */
 	i2c_smbus_write_word_swapped(client, INA2XX_CONFIG,
 				     data->config->config_default);
+
+	cal_factor = data->config->calibration_factor;
+	if (!of_property_read_u32(client->dev.of_node,
+					"calibration-factor", &val)) {
+		cal_factor = val;
+	}
 	/* set current LSB to 1mA, shunt is in uOhms */
 	/* (equation 13 in datasheet) */
 	i2c_smbus_write_word_swapped(client, INA2XX_CALIBRATION,
-				     data->config->calibration_factor / shunt);
+					cal_factor / shunt);
 
 	i2c_set_clientdata(client, data);
 	mutex_init(&data->update_lock);
@@ -265,8 +360,8 @@ static int ina2xx_probe(struct i2c_clien
 		goto out_err_hwmon;
 	}
 
-	dev_info(&client->dev, "power monitor %s (Rshunt = %li uOhm)\n",
-		 id->name, shunt);
+	dev_info(&client->dev, "power monitor: %s, railname:  %s, "
+			"Rshunt: %li uOhm\n", id->name, railname, shunt);
 
 	return 0;
 
