--- /dev/null
+++ b/arch/mips/include/asm/mach-lantiq/falcon/sysctrl.h
@@ -0,0 +1,60 @@
+/*
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ *
+ * Copyright (C) 2010 Thomas Langer, Lantiq Deutschland
+ */
+
+#ifndef __FALCON_SYSCTRL_H
+#define __FALCON_SYSCTRL_H
+
+#include <falcon/lantiq_soc.h>
+
+static inline void sys1_hw_activate(u32 mask)
+{ ltq_sysctl_activate(SYSCTL_SYS1, mask); }
+static inline void sys1_hw_deactivate(u32 mask)
+{ ltq_sysctl_deactivate(SYSCTL_SYS1, mask); }
+static inline void sys1_hw_clk_enable(u32 mask)
+{ ltq_sysctl_clken(SYSCTL_SYS1, mask); }
+static inline void sys1_hw_clk_disable(u32 mask)
+{ ltq_sysctl_clkdis(SYSCTL_SYS1, mask); }
+static inline void sys1_hw_activate_or_reboot(u32 mask)
+{ ltq_sysctl_reboot(SYSCTL_SYS1, mask); }
+
+static inline void sys_eth_hw_activate(u32 mask)
+{ ltq_sysctl_activate(SYSCTL_SYSETH, mask); }
+static inline void sys_eth_hw_deactivate(u32 mask)
+{ ltq_sysctl_deactivate(SYSCTL_SYSETH, mask); }
+static inline void sys_eth_hw_clk_enable(u32 mask)
+{ ltq_sysctl_clken(SYSCTL_SYSETH, mask); }
+static inline void sys_eth_hw_clk_disable(u32 mask)
+{ ltq_sysctl_clkdis(SYSCTL_SYSETH, mask); }
+static inline void sys_eth_hw_activate_or_reboot(u32 mask)
+{ ltq_sysctl_reboot(SYSCTL_SYSETH, mask); }
+
+static inline void sys_gpe_hw_activate(u32 mask)
+{ ltq_sysctl_activate(SYSCTL_SYSGPE, mask); }
+static inline void sys_gpe_hw_deactivate(u32 mask)
+{ ltq_sysctl_deactivate(SYSCTL_SYSGPE, mask); }
+static inline void sys_gpe_hw_clk_enable(u32 mask)
+{ ltq_sysctl_clken(SYSCTL_SYSGPE, mask); }
+static inline void sys_gpe_hw_clk_disable(u32 mask)
+{ ltq_sysctl_clkdis(SYSCTL_SYSGPE, mask); }
+static inline void sys_gpe_hw_activate_or_reboot(u32 mask)
+{ ltq_sysctl_reboot(SYSCTL_SYSGPE, mask); }
+static inline int sys_gpe_hw_is_activated(u32 mask)
+{ return 1; }
+
+#endif /* __FALCON_SYSCTRL_H */
--- a/arch/mips/lantiq/falcon/sysctrl.c
+++ b/arch/mips/lantiq/falcon/sysctrl.c
@@ -262,3 +262,44 @@ void __init ltq_soc_init(void)
 	clkdev_add_sys("1e100c00.serial", SYSCTL_SYS1, ACTS_ASC0_ACT);
 	clkdev_add_sys("1e200000.i2c", SYSCTL_SYS1, ACTS_I2C_ACT);
 }
+
+
+/*
+ * for compatibility to external drivers from Lantiq
+ * see arch/mips/include/asm/mach-lantiq/falcon/sysctrl.h
+ */
+
+void ltq_sysctl_activate(int module, unsigned int mask)
+{
+	struct clk clk = { .module = module, .bits = mask };
+	sysctl_activate(&clk);
+}
+EXPORT_SYMBOL(ltq_sysctl_activate);
+
+void ltq_sysctl_deactivate(int module, unsigned int mask)
+{
+	struct clk clk = { .module = module, .bits = mask };
+	sysctl_deactivate(&clk);
+}
+EXPORT_SYMBOL(ltq_sysctl_deactivate);
+
+void ltq_sysctl_clken(int module, unsigned int mask)
+{
+	struct clk clk = { .module = module, .bits = mask };
+	sysctl_clken(&clk);
+}
+EXPORT_SYMBOL(ltq_sysctl_clken);
+
+void ltq_sysctl_clkdis(int module, unsigned int mask)
+{
+	struct clk clk = { .module = module, .bits = mask };
+	sysctl_clkdis(&clk);
+}
+EXPORT_SYMBOL(ltq_sysctl_clkdis);
+
+void ltq_sysctl_reboot(int module, unsigned int mask)
+{
+	struct clk clk = { .module = module, .bits = mask };
+	sysctl_reboot(&clk);
+}
+EXPORT_SYMBOL(ltq_sysctl_reboot);
--- a/arch/mips/include/asm/mach-lantiq/falcon/lantiq_soc.h
+++ b/arch/mips/include/asm/mach-lantiq/falcon/lantiq_soc.h
@@ -41,6 +41,11 @@
 #define SYSCTL_SYS1		0
 #define SYSCTL_SYSETH		1
 #define SYSCTL_SYSGPE		2
+extern void ltq_sysctl_activate(int module, unsigned int mask);
+extern void ltq_sysctl_deactivate(int module, unsigned int mask);
+extern void ltq_sysctl_clken(int module, unsigned int mask);
+extern void ltq_sysctl_clkdis(int module, unsigned int mask);
+extern void ltq_sysctl_reboot(int module, unsigned int mask);
 
 /* BOOT_SEL - find what boot media we have */
 #define BS_FLASH		0x1
