# HG changeset patch
# Parent c82542d504c14cbf2169ac26fb218549d29c862d

diff --git a/drivers/gpio/gpio-stp-xway.c b/drivers/gpio/gpio-stp-xway.c
--- a/drivers/gpio/gpio-stp-xway.c
+++ b/drivers/gpio/gpio-stp-xway.c
@@ -53,14 +53,21 @@
 #define XWAY_STP_UPD_FPI	BIT(31)
 #define XWAY_STP_UPD_MASK	(BIT(31) | BIT(30))
 
+#define XWAY_STP_FPID_VALUE	BIT(23)|BIT(24)
+#define XWAY_STP_FPID_MASK	(BIT(23) | BIT(24)| BIT(25)| BIT(26)| BIT(27))
+
+#define XWAY_STP_FPIS_VALUE	BIT(21)
+#define XWAY_STP_FPIS_MASK	(BIT(20) | BIT(21))
 /* let the adsl core drive the 2 LSBs */
 #define XWAY_STP_ADSL_SHIFT	24
 #define XWAY_STP_ADSL_MASK	0x3
 
 /* 2 groups of 3 bits can be driven by the phys */
-#define XWAY_STP_PHY_MASK	0x3
+#define XWAY_STP_PHY_MASK	0x7
 #define XWAY_STP_PHY1_SHIFT	27
-#define XWAY_STP_PHY2_SHIFT	15
+#define XWAY_STP_PHY2_SHIFT	3
+#define XWAY_STP_PHY3_SHIFT	6
+#define XWAY_STP_PHY4_SHIFT	15
 
 /* STP has 3 groups of 8 bits */
 #define XWAY_STP_GROUP0		BIT(0)
@@ -87,6 +94,8 @@
 	u8 dsl;		/* the 2 LSBs can be driven by the dsl core */
 	u8 phy1;	/* 3 bits can be driven by phy1 */
 	u8 phy2;	/* 3 bits can be driven by phy2 */
+	u8 phy3;	/* 3 bits can be driven by phy3 */
+	u8 phy4;	/* 3 bits can be driven by phy4 */
 	u8 reserved;	/* mask out the hw driven bits in gpio_request */
 };
 
@@ -108,7 +117,9 @@
 	else
 		chip->shadow &= ~BIT(gpio);
 	xway_stp_w32(chip->virt, chip->shadow, XWAY_STP_CPU0);
-	xway_stp_w32_mask(chip->virt, 0, XWAY_STP_CON_SWU, XWAY_STP_CON0);
+	if(!chip->reserved){
+		xway_stp_w32_mask(chip->virt, 0, XWAY_STP_CON_SWU, XWAY_STP_CON0);
+	}
 }
 
 /**
@@ -183,16 +194,35 @@
 			chip->phy2 << XWAY_STP_PHY2_SHIFT,
 			XWAY_STP_CON1);
 
+	if (of_machine_is_compatible("lantiq,grx390")  
+	    || of_machine_is_compatible("lantiq,ar10") ) {
+		xway_stp_w32_mask(chip->virt,
+				XWAY_STP_PHY_MASK << XWAY_STP_PHY3_SHIFT,
+				chip->phy3 << XWAY_STP_PHY3_SHIFT,
+				XWAY_STP_CON1);
+	}	
+	if (of_machine_is_compatible("lantiq,grx390")) {
+		xway_stp_w32_mask(chip->virt,
+				XWAY_STP_PHY_MASK << XWAY_STP_PHY4_SHIFT,
+				chip->phy4 << XWAY_STP_PHY4_SHIFT,
+				XWAY_STP_CON1);
+	}
+
 	/* mask out the hw driven bits in gpio_request */
-	chip->reserved = (chip->phy2 << 5) | (chip->phy1 << 2) | chip->dsl;
+	chip->reserved = (chip->phy4 << 11) | (chip->phy3 << 8) | (chip->phy2 << 5) | (chip->phy1 << 2) | chip->dsl;
 
 	/*
 	 * if we have pins that are driven by hw, we need to tell the stp what
 	 * clock to use as a timer.
 	 */
-	if (chip->reserved)
+	if (chip->reserved){
 		xway_stp_w32_mask(chip->virt, XWAY_STP_UPD_MASK,
 			XWAY_STP_UPD_FPI, XWAY_STP_CON1);
+		xway_stp_w32_mask(chip->virt, XWAY_STP_FPID_MASK,
+			XWAY_STP_FPID_VALUE, XWAY_STP_CON1);
+		xway_stp_w32_mask(chip->virt, XWAY_STP_FPIS_MASK,
+			XWAY_STP_FPIS_VALUE, XWAY_STP_CON1);
+	}
 
 	return 0;
 }
@@ -245,17 +275,24 @@
 		chip->dsl = be32_to_cpu(*dsl) & XWAY_STP_ADSL_MASK;
 
 	/* find out which gpios are controlled by the phys */
-	if (of_machine_is_compatible("lantiq,ar9") ||
-			of_machine_is_compatible("lantiq,gr9") ||
-			of_machine_is_compatible("lantiq,vr9")) {
-		phy = of_get_property(pdev->dev.of_node, "lantiq,phy1", NULL);
+	phy = of_get_property(pdev->dev.of_node, "lantiq,phy1", NULL);
+	if (phy)
+		chip->phy1 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
+	phy = of_get_property(pdev->dev.of_node, "lantiq,phy2", NULL);
+	if (phy)
+		chip->phy2 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
+
+	if (of_machine_is_compatible("lantiq,grx390")  
+		|| of_machine_is_compatible("lantiq,ar10") ) {
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy3", NULL);
 		if (phy)
-			chip->phy1 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
-		phy = of_get_property(pdev->dev.of_node, "lantiq,phy2", NULL);
+			chip->phy3 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
+	}
+	if (of_machine_is_compatible("lantiq,grx390")) {
+		phy = of_get_property(pdev->dev.of_node, "lantiq,phy4", NULL);
 		if (phy)
-			chip->phy2 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
+			chip->phy4 = be32_to_cpu(*phy) & XWAY_STP_PHY_MASK;
 	}
-
 	/* check which edge trigger we should use, default to a falling edge */
 	if (!of_find_property(pdev->dev.of_node, "lantiq,rising", NULL))
 		chip->edge = XWAY_STP_FALLING;
