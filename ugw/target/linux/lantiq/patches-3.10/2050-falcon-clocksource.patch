--- /dev/null
+++ b/arch/mips/lantiq/falcon/gptc_reg.h
@@ -0,0 +1,287 @@
+/******************************************************************************
+
+                               Copyright (c) 2012
+                            Lantiq Deutschland GmbH
+
+  For licensing information, see the file 'LICENSE' in the root folder of
+  this software module.
+
+******************************************************************************/
+
+#ifndef _gptc_reg_h
+#define _gptc_reg_h
+
+/** \addtogroup GPTC_REGISTER
+   @{
+*/
+/* access macros */
+#define gptc_r32(reg) reg_r32(&gptc->reg)
+#define gptc_w32(val, reg) reg_w32(val, &gptc->reg)
+#define gptc_w32_mask(clear, set, reg) reg_w32_mask(clear, set, &gptc->reg)
+#define gptc_r32_table(reg, idx) reg_r32_table(gptc->reg, idx)
+#define gptc_w32_table(val, reg, idx) reg_w32_table(val, gptc->reg, idx)
+#define gptc_w32_table_mask(clear, set, reg, idx) reg_w32_table_mask(clear, set, gptc->reg, idx)
+#define gptc_adr_table(reg, idx) adr_table(gptc->reg, idx)
+
+#define GPTC_MAX_TIMER_COUNTER	6
+
+/** GPTC register structure */
+struct gpon_reg_gptc
+{
+	/** Clock Control Register */
+	unsigned int clc; /* 0x00000000 */
+	/** Reserved */
+	unsigned int res_0; /* 0x00000004 */
+	/** GPTC ID Register */
+	unsigned int id; /* 0x00000008 */
+	/** Reserved */
+	unsigned int res_1; /* 0x0000000C */
+	struct {
+		/** Control Register CON Timer/Counter */
+		unsigned int con[2]; /* 0x00000010 */
+		/** Run Register RUN Timer/Counter */
+		unsigned int run[2]; /* 0x00000018 */
+		/** Reload Register RELOAD Timer/Counter */
+		unsigned int reload[2]; /* 0x00000020 */
+		/** Count Register COUNT Timer/Counter */
+		unsigned int count[2]; /* 0x00000028 */
+	} tc[GPTC_MAX_TIMER_COUNTER];
+
+	/** Reserved */
+	unsigned int res_2[9]; /* 0x00000070 */
+	/** IRN Interrupt Enable Register
+	    This register contains the enable (or mask) bits for the interrupts.
+	    Disabled interrupts are not visible in the IRNCR register and are not
+	    signalled via the interrupt line towards the controller. */
+	unsigned int irnen; /* 0x000000F4 */
+	/** IRN Interrupt Control Register
+	    A write operation directly effects the interrupts.
+	    This can be used to trigger events under software control for testing
+	    purposes. A read operation returns the unmasked interrupt events. */
+	unsigned int irnicr; /* 0x000000F8 */
+	/** IRN Capture Register
+	    This register shows the currently active interrupt events masked with
+	    the corresponding enable bits of the IRNEN register.
+	    The interrupts can be acknowledged by a write operation. */
+	unsigned int irncr; /* 0x000000FC */
+};
+
+
+/* Fields of "Clock Control Register" */
+/** Clock Divider for Sleep Mode
+    Depending on the hardware configuration, this dividermay or may not be implemented. If not implemented, it behaves thesame as reserved bits */
+#define GPTC_CLC_SMC_MASK 0x00FF0000
+/** field offset */
+#define GPTC_CLC_SMC_OFFSET 16
+/** Clock Divider for Normal Run Mode
+    Values larger than 1 divide the bus clock frequencyby the given value to obtain the kernel clock */
+#define GPTC_CLC_RMC_MASK 0x0000FF00
+/** field offset */
+#define GPTC_CLC_RMC_OFFSET 8
+/** A value of 0 means, that the peripheral is disabled. */
+#define GPTC_CLC_RMC_DISRMC 0x00000000
+/** A value of 1 means, that the peripheral kernel runs at the sameclock as the bus. */
+#define GPTC_CLC_RMC_ENRMC 0x00000100
+/** Fast Shut-Off Enable Bit */
+#define GPTC_CLC_FSOE 0x00000020
+/** Suspend Bit Write Enable for OCDS
+    Reading returns 0 for this bit. */
+#define GPTC_CLC_SBWE 0x00000010
+/** External Request Disable */
+#define GPTC_CLC_EDIS 0x00000008
+/** Suspend Enable Bit for OCDS */
+#define GPTC_CLC_SPEN 0x00000004
+/** Disable Status Bit
+    Bit DISS can be modified only by writing to bitDISR */
+#define GPTC_CLC_DISS 0x00000002
+/** Disable Request Bit */
+#define GPTC_CLC_DISR 0x00000001
+
+/* Fields of "GPTC ID Register" */
+/** Module ID
+    Module Identification Number (59H for GPTC). */
+#define GPTC_ID_ID_MASK 0x0000FF00
+/** field offset */
+#define GPTC_ID_ID_OFFSET 8
+/** Configuration
+    Gives the number of timer/counter blocks in the GPTC */
+#define GPTC_ID_CFG_MASK 0x000000E0
+/** field offset */
+#define GPTC_ID_CFG_OFFSET 5
+/** Revision
+    Hardware revision number (01H .. 1FH). */
+#define GPTC_ID_REV_MASK 0x0000001F
+/** field offset */
+#define GPTC_ID_REV_OFFSET 0
+
+/* Fields of "Control Register CON Timer/Counter" */
+/** Input Synchronization Specification */
+#define GPTC_CON_SYNC 0x00000100
+/** Count Edge Specification */
+#define GPTC_CON_EDGE_MASK 0x000000C0
+/** field offset */
+#define GPTC_CON_EDGE_OFFSET 6
+/** Input Inversion Specification */
+#define GPTC_CON_INV 0x00000020
+/** Extended Mode Specification (only Timer_A) */
+#define GPTC_CON_A_EXT 0x00000010
+/** Stopping Specification */
+#define GPTC_CON_STP 0x00000008
+/** Working Mode Specification */
+#define GPTC_CON_CNT 0x00000004
+/** Counting Direction Specification */
+#define GPTC_CON_DIR 0x00000002
+/** Count Enable Specification */
+#define GPTC_CON_EN 0x00000001
+
+/* Fields of "Run Register RUN Timer/Counter" */
+/** Reload when starting */
+#define GPTC_RUN_RL 0x00000004
+/** Clear Enable */
+#define GPTC_RUN_CEN 0x00000002
+/** Set enable */
+#define GPTC_RUN_SEN 0x00000001
+
+/* Fields of "Reload Register RELOAD Timer/Counter" */
+/** Upper Reload part for Timer/Counter */
+#define GPTC_RELOAD_HIGH_MASK 0xFFFF0000
+/** field offset */
+#define GPTC_RELOAD_HIGH_OFFSET 16
+/** Lower Reload part for Timer/Counter */
+#define GPTC_RELOAD_LOW_MASK 0x0000FFFF
+/** field offset */
+#define GPTC_RELOAD_LOW_OFFSET 0
+
+/* Fields of "Count Register COUNT Timer/Counter" */
+/** Upper Reload part for Timer/Counter */
+#define GPTC_COUNT_HIGH_MASK 0xFFFF0000
+/** field offset */
+#define GPTC_COUNT_HIGH_OFFSET 16
+/** Lower Reload part for Timer/Counter */
+#define GPTC_COUNT_LOW_MASK 0x0000FFFF
+/** field offset */
+#define GPTC_COUNT_LOW_OFFSET 0
+
+/* Fields of "IRN Interrupt Enable Register" */
+/** Timer/Counter 3B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC3B 0x00000020
+/* Disable
+#define GPTC_IRNEN_TC3B_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC3B_EN 0x00000020
+/** Timer/Counter 3A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC3A 0x00000010
+/* Disable
+#define GPTC_IRNEN_TC3A_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC3A_EN 0x00000010
+/** Timer/Counter 2B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC2B 0x00000008
+/* Disable
+#define GPTC_IRNEN_TC2B_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC2B_EN 0x00000008
+/** Timer/Counter 2A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC2A 0x00000004
+/* Disable
+#define GPTC_IRNEN_TC2A_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC2A_EN 0x00000004
+/** Timer/Counter 1B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC1B 0x00000002
+/* Disable
+#define GPTC_IRNEN_TC1B_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC1B_EN 0x00000002
+/** Timer/Counter 1A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNEN_TC1A 0x00000001
+/* Disable
+#define GPTC_IRNEN_TC1A_DIS 0x00000000 */
+/** Enable */
+#define GPTC_IRNEN_TC1A_EN 0x00000001
+
+/* Fields of "IRN Interrupt Control Register" */
+/** Timer/Counter 3B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC3B 0x00000020
+/** Timer/Counter 3A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC3A 0x00000010
+/** Timer/Counter 2B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC2B 0x00000008
+/** Timer/Counter 2A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC2A 0x00000004
+/** Timer/Counter 1B Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC1B 0x00000002
+/** Timer/Counter 1A Interrupt Request
+    Description of the bit: see IRNCR register */
+#define GPTC_IRNICR_TC1A 0x00000001
+
+/* Fields of "IRN Capture Register" */
+/** Timer/Counter 3B Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC3B 0x00000020
+/* Nothing
+#define GPTC_IRNCR_TC3B_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC3B_INTACK 0x00000020
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC3B_INTOCC 0x00000020
+/** Timer/Counter 3A Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC3A 0x00000010
+/* Nothing
+#define GPTC_IRNCR_TC3A_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC3A_INTACK 0x00000010
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC3A_INTOCC 0x00000010
+/** Timer/Counter 2B Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC2B 0x00000008
+/* Nothing
+#define GPTC_IRNCR_TC2B_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC2B_INTACK 0x00000008
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC2B_INTOCC 0x00000008
+/** Timer/Counter 2A Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC2A 0x00000004
+/* Nothing
+#define GPTC_IRNCR_TC2A_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC2A_INTACK 0x00000004
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC2A_INTOCC 0x00000004
+/** Timer/Counter 1B Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC1B 0x00000002
+/* Nothing
+#define GPTC_IRNCR_TC1B_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC1B_INTACK 0x00000002
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC1B_INTOCC 0x00000002
+/** Timer/Counter 1A Interrupt Request
+    This bit is edge-sensitive. This bit is a direct interrupt. */
+#define GPTC_IRNCR_TC1A 0x00000001
+/* Nothing
+#define GPTC_IRNCR_TC1A_NULL 0x00000000 */
+/** Write: Acknowledge the interrupt. */
+#define GPTC_IRNCR_TC1A_INTACK 0x00000001
+/** Read: Interrupt occurred. */
+#define GPTC_IRNCR_TC1A_INTOCC 0x00000001
+
+/*! @} */ /* GPTC_REGISTER */
+
+#endif /* _gptc_reg_h */
--- /dev/null
+++ b/arch/mips/lantiq/falcon/timer.c
@@ -0,0 +1,348 @@
+/*
+ *  Copyright (C) 2012 Thomas Langer <thomas.langer@lantiq.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+*/
+
+#include <linux/delay.h>
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/clocksource.h>
+#include <linux/device.h>
+
+#include <asm/addrspace.h>
+#include <asm/io.h>
+#include <asm/time.h>
+
+#include <lantiq.h>
+#include <falcon/lantiq_soc.h>
+
+#include <falcon/falcon_irq.h>
+#include <falcon/sysctrl.h>
+
+#include "../clk.h"
+
+#include "gptc_reg.h"
+
+/* mapping to linux hw-accessor routines */
+#define reg_r32(reg)			__raw_readl(reg)
+#define reg_w32(val, reg)		__raw_writel(val, reg)
+#define reg_w32_mask(clear, set, reg)	reg_w32((reg_r32(reg) & ~(clear)) | (set), reg)
+
+#define ACTS_GPTC 0x04000000
+
+/* Voice FW uses TIMER 0A! */
+#define CLOCKSOURCE_TIMER	2
+#define CLOCKEVENT_TIMER	4
+
+/** address range for gptc
+    0x1E100E00--0x1E100EFF */
+#define GPON_GPTC_BASE		0x1E100E00
+#define GPON_GPTC_END		0x1E100EFF
+#define GPON_GPTC_SIZE		0x00000100
+
+static struct gpon_reg_gptc * gptc;
+
+/* helper routines for GPTC timers */
+
+static inline unsigned int lq_get_irq_nr(unsigned int timer)
+{
+	irq_hw_number_t irq = FALCON_IRQ_GPTC_TC1A + timer;
+	return irq_create_mapping(NULL, irq);
+}
+
+static inline void lq_set_reload(unsigned int timer, unsigned int reload)
+{
+	gptc_w32(reload, tc[timer>>1].reload[timer&1]);
+}
+
+static inline void lq_start_timer(unsigned int timer)
+{
+	gptc_w32(GPTC_RUN_RL|GPTC_RUN_SEN, tc[timer>>1].run[timer&1]);
+}
+
+static inline void lq_stop_and_clear_timer(unsigned int timer)
+{
+	gptc_w32(GPTC_RUN_RL|GPTC_RUN_CEN, tc[timer>>1].run[timer&1]);
+}
+
+static int lq_setup_timer(unsigned int timer, unsigned int reload, int is_32_bit,
+	int is_cyclic, int is_inverse, int is_dir_up, int counter, int use_irq)
+{
+	u32 con_reg = 0;
+
+	pr_devel("lq_setup_timer(%d, 0x%08X, %d-bit, %s%s%s%s, %suse irq)\n",
+		timer, reload, is_32_bit?32:16,
+		is_cyclic?"cylic ":"one shot ",
+		is_inverse?"inv ":"",
+		is_dir_up?"up ":"down ",
+		counter?"counter":"timer",
+		use_irq?"":"don't ");
+
+	if (is_32_bit) {
+		if ((timer & 1) == 1)
+			return -EINVAL;
+		con_reg |= GPTC_CON_A_EXT;
+	} else {
+		reload &= 0xFFFF;
+	}
+	if (is_inverse)
+		con_reg |= GPTC_CON_INV;
+	if (is_dir_up)
+		con_reg |= GPTC_CON_DIR;
+	if (!is_cyclic)
+		con_reg |= GPTC_CON_STP;
+
+	/* always disable irq first */
+	gptc_w32_mask(1<<timer, 0, irnen);
+	gptc_w32(con_reg, tc[timer>>1].con[timer&1]);
+	lq_set_reload(timer, reload);
+	if (use_irq)
+		gptc_w32_mask(0, 1<<timer, irnen);
+
+	return 0;
+}
+
+/* not 0 means "clock disable" feature is activated in HW */
+static int falcon_timer_clkdis = 0;
+
+/*
+ * ClockSource related definitions and routines
+ */
+struct falcon_clocksource {
+	struct clocksource cs;
+	u32 __iomem *cntreg;
+};
+
+static cycle_t falcon_cs_read(struct clocksource *cs)
+{
+	struct falcon_clocksource *falcon_cs =
+		container_of(cs, struct falcon_clocksource, cs);
+	return __raw_readl(falcon_cs->cntreg);
+}
+
+static struct falcon_clocksource falcon_clocksource = {
+	.cs = {
+		.name		= "FALCON",
+		.rating		= 300,
+		.read		= falcon_cs_read,
+		.mask		= CLOCKSOURCE_MASK(32),
+		.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+	},
+};
+
+static unsigned long get_fpi_hz(void)
+{
+	return clk_get_rate(clk_get_fpi());
+
+}
+
+static void __init falcon_clocksource_init(unsigned int timer)
+{
+	falcon_clocksource.cntreg =
+		&(gptc->tc[timer>>1].count[timer&1]);
+	lq_setup_timer(timer, 0, 1, 1, 0, 1, 0, 0);
+	lq_start_timer(timer);
+	clocksource_register_hz(&falcon_clocksource.cs, get_fpi_hz());
+}
+
+/*
+ * ClockEvent related definitions and routines
+ */
+struct falcon_clockevent {
+	struct clock_event_device cd;
+	unsigned int timer;
+	enum clock_event_mode mode;
+};
+
+static void falcon_set_mode(enum clock_event_mode mode,
+			    struct clock_event_device *evt)
+{
+	struct falcon_clockevent *cd =
+		container_of(evt, struct falcon_clockevent, cd);
+
+	cd->mode = mode;
+	switch (mode) {
+#if 0
+	case CLOCK_EVT_MODE_ONESHOT:
+	case CLOCK_EVT_MODE_PERIODIC:
+		ltq_sysctl_sleep_enable(0, 0);
+		break;
+#endif
+	case CLOCK_EVT_MODE_SHUTDOWN:
+		ltq_sysctl_sleep_enable(1, 1);
+		break;
+	default:
+		break;
+	}
+}
+
+static int falcon_set_next_event(unsigned long delta,
+				 struct clock_event_device *evt)
+{
+	struct falcon_clockevent *cd =
+		container_of(evt, struct falcon_clockevent, cd);
+	unsigned int timer = cd->timer;
+
+	lq_stop_and_clear_timer(timer);
+	lq_set_reload(timer, delta);
+	lq_start_timer(timer);
+	gptc_w32_mask(0, 1<<timer, irnen); /* enable interrupt */
+
+	return 0;
+}
+
+static struct falcon_clockevent falcon_clockevent = {
+	.cd = {
+		.name		= "FALCON_CLK_EVT",
+		.features	= CLOCK_EVT_FEAT_ONESHOT,
+		.rating		= 500,
+		.set_mode	= falcon_set_mode,
+		.set_next_event	= falcon_set_next_event,
+	},
+	.mode = CLOCK_EVT_MODE_UNUSED,
+};
+
+static irqreturn_t falcon_timer_interrupt(int irq, void *dev_id)
+{
+	struct falcon_clockevent *falcon_cd = dev_id;
+	struct clock_event_device *cd = &falcon_cd->cd;
+	unsigned int timer = falcon_cd->timer;
+
+	gptc_w32_mask(1<<timer, 0, irnen); /* disable interrupt */
+	gptc_w32(1 << timer, irncr);	/* ack interrupt */
+
+	cd->event_handler(cd);
+	return IRQ_HANDLED;
+}
+
+static struct irqaction falcon_timer_irq = {
+	.handler	= falcon_timer_interrupt,
+	.flags		= IRQF_DISABLED | IRQF_PERCPU | IRQF_TIMER,
+	.name		= "falcon_timer",
+	.dev_id		= &falcon_clockevent,
+};
+
+static void __init falcon_clockevent_init(unsigned int timer)
+{
+	struct clock_event_device *cd = &falcon_clockevent.cd;
+
+	lq_stop_and_clear_timer(timer);
+	falcon_clockevent.timer = timer;
+
+	/* use cyclic timer here, 32bit-timer have problems with automatic stop! */
+	lq_setup_timer(timer, 0x7FFFFFFF, 1, 1, 0, 0, 0, 1);
+
+	clockevent_set_clock(cd, get_fpi_hz());
+	cd->max_delta_ns = clockevent_delta2ns(0xFFFFFFFF, cd);
+	cd->min_delta_ns = clockevent_delta2ns(1, cd);
+	cd->irq = lq_get_irq_nr(timer);
+	cd->cpumask = cpumask_of(0),
+	clockevents_register_device(cd);
+	setup_irq(cd->irq, &falcon_timer_irq);
+	pr_info("clockevent device %s with timer %d, irq %d\n",
+		cd->name, timer, cd->irq);
+	pr_devel("\tmult=0x%X shift=%u\n", cd->mult, cd->shift);
+}
+
+/*
+ * sysfs interface
+ */
+static struct class falcon_timer_class = {
+	.name		= "falcon_timer",
+};
+
+static ssize_t falcon_timer_clkdis_show(struct class *class,
+					struct class_attribute *attr,
+					char *buf)
+{
+	return sprintf(buf, "%d\n", falcon_timer_clkdis);
+}
+
+static ssize_t
+falcon_timer_clkdis_store(struct class *class,
+			  struct class_attribute *attr,
+			  const char *buf,
+			  size_t count)
+{
+	int clkdis = simple_strtol(buf, NULL, 10);
+	if (clkdis <= 0)
+		clkdis = 0;
+	else
+		clkdis = 1;
+
+	switch (falcon_clockevent.mode) {
+	case CLOCK_EVT_MODE_ONESHOT:
+	case CLOCK_EVT_MODE_PERIODIC:
+		if (clkdis)
+			ltq_sysctl_sleep_enable(0, 0);
+		else
+			ltq_sysctl_sleep_enable(1, 1);
+		falcon_timer_clkdis = clkdis;
+		return count;
+	default:
+		return 0;
+	}
+}
+
+static CLASS_ATTR(clkdis, 0644, falcon_timer_clkdis_show,
+				falcon_timer_clkdis_store);
+
+static int __init falcon_timer_sysfs_init(void)
+{
+	int error;
+
+	error = class_register(&falcon_timer_class);
+	if (error) {
+		pr_err("%s: class_register failed\n", __func__);
+		return error;
+	}
+	error = class_create_file(&falcon_timer_class, &class_attr_clkdis);
+	if (error) {
+		pr_err("%s: class_create_file failed\n", __func__);
+		class_unregister(&falcon_timer_class);
+	}
+	return error;
+}
+
+/*
+ * timer module init
+ */
+static int __init falcon_timer_init(void)
+{
+	u32 id;
+
+	pr_info("FALC(tm) ON clock driver\n");
+
+	sys1_hw_activate(ACTS_GPTC);
+
+	if (request_mem_region(GPON_GPTC_BASE, GPON_GPTC_SIZE, "GPTC") < 0) {
+		pr_crit("Failed to request GPTC memory\n");
+		return -ENXIO;
+	}
+
+	gptc = ioremap_nocache(GPON_GPTC_BASE, GPON_GPTC_SIZE);
+	if (!gptc) {
+		release_mem_region(GPON_GPTC_BASE, GPON_GPTC_SIZE);
+		return -ENXIO;
+	}
+	id = gptc_r32(id);
+	pr_devel("GPTC HW V%d with %d*2 Timer\n",
+		id & GPTC_ID_REV_MASK,
+		(id & GPTC_ID_CFG_MASK) >> GPTC_ID_CFG_OFFSET);
+
+	/* enable GPTC module by setting prescaler to 1 */
+	gptc_w32(GPTC_CLC_RMC_ENRMC, clc);
+
+	falcon_clocksource_init(CLOCKSOURCE_TIMER);
+	falcon_clockevent_init(CLOCKEVENT_TIMER);
+
+	falcon_timer_sysfs_init();
+
+	return 0;
+}
+
+arch_initcall(falcon_timer_init);
--- a/arch/mips/lantiq/falcon/Makefile
+++ b/arch/mips/lantiq/falcon/Makefile
@@ -1,2 +1,3 @@
 obj-y := prom.o reset.o sysctrl.o
+obj-y += timer.o
 obj-y += addon-easy98000.o dev-leds-easy98000-cpld.o
--- a/arch/mips/lantiq/falcon/sysctrl.c
+++ b/arch/mips/lantiq/falcon/sysctrl.c
@@ -17,6 +17,9 @@
 
 #include "../clk.h"
 
+
+/* Sleep Configuration Register */
+#define SYS1_SCFG		0x00b0
 /* infrastructure control register */
 #define SYS1_INFRAC		0x00bc
 /* Configuration fuses for drivers and pll */
@@ -47,6 +50,11 @@
 /* clock divider bit */
 #define CPU0CC_CPUDIV		0x0001
 
+/* Enable XBAR Clockoff When All XBAR masters Clockoff */
+#define SCFG_XBAR	0x00010000
+/* CPU0 Clockoff On Sleep */
+#define SCFG_CPU0	0x00000001
+
 /* Activation Status Register */
 #define ACTS_ASC0_ACT	0x00001000
 #define ACTS_ASC1_ACT	0x00000800
@@ -303,3 +311,20 @@ void ltq_sysctl_reboot(int module, unsig
 	sysctl_reboot(&clk);
 }
 EXPORT_SYMBOL(ltq_sysctl_reboot);
+
+void ltq_sysctl_sleep_enable(int cpu0, int xbar)
+{
+	u32 val = 0;
+
+	if (xbar)
+		val |= SCFG_XBAR | SCFG_CPU0;
+
+	if (cpu0)
+		val |= SCFG_CPU0;
+
+	sysctl_w32_mask(SYSCTL_SYS1,
+			SCFG_CPU0 | SCFG_XBAR,
+			val,
+			SYS1_SCFG);
+}
+EXPORT_SYMBOL(ltq_sysctl_sleep_enable);
--- a/arch/mips/include/asm/mach-lantiq/falcon/sysctrl.h
+++ b/arch/mips/include/asm/mach-lantiq/falcon/sysctrl.h
@@ -57,4 +57,6 @@ static inline void sys_gpe_hw_activate_o
 static inline int sys_gpe_hw_is_activated(u32 mask)
 { return 1; }
 
+void ltq_sysctl_sleep_enable(int cpu0, int xbar);
+
 #endif /* __FALCON_SYSCTRL_H */
