From 8e6b679105e254d417cc3a02bd88b9deed68c8c4 Mon Sep 17 00:00:00 2001
From: Nagaraj S <sivasankaranx.nagaraj@intel.com>
Date: Mon, 23 Nov 2015 21:29:14 -0800
Subject: [PATCH] OS:Removing 30sec timeout and waiting forever to get RPC
 message from ARM

IssueID: HSD (243836)
IssueType: Change Request
Symptom: The problem RPC timeout was 30 sec to get
       message from ARM.So the change request is to
       increased the time out to forever to get message from ARM.
RootCause: ARM test mode may take more time to send message to ATOM.
       So increasing 30 sec timeout to forever.
Resolution: Removed 30 sec timeout and implemented completion method
       to block the rpc_ifconfig app call to get RPC message.
Test: Tested RPC wait time using ARM test image
Reviewers: Brett.
ReviewID: 112275

Change-Id: Ic0b1f153497b92d93f73e7a4dea27b47fcdb0e72
---
 drivers/misc/ce_mailbox.c |   41 +++++++++--------------------------------
 1 file changed, 9 insertions(+), 32 deletions(-)

diff --git a/drivers/misc/ce_mailbox.c b/drivers/misc/ce_mailbox.c
index 9f6509c..1db47be 100644
--- a/drivers/misc/ce_mailbox.c
+++ b/drivers/misc/ce_mailbox.c
@@ -42,13 +42,13 @@
 #include <linux/delay.h>
 #include <linux/ce_mailbox.h>
 #include <linux/hw_mailbox.h>
-#include <linux/delay.h>
+#include <linux/completion.h>
 
 static struct proc_dir_entry   *mbx_proc_dir;
 static struct npcpu_appcpu_mbx_user    mbx_usr_info;
 struct npcpu_rpc_info rpc_info;
-volatile bool is_mbx_received_callback_from_NPCPU = false;
 bool glob_mbx_is_initialized = false;
+struct completion cmd_done;
 #define NPCPU_IP_START_BYTE 0
 #define APPCPU_IP_START_BYTE 4
 #define NETMASK_START_BYTE 8
@@ -56,8 +56,8 @@ bool glob_mbx_is_initialized = false;
 #define MAX_NO_BYTE 4
 #define BYTE_SIZE 8
 
-/* 30 seconds max delay */
-#define MBX_MAX_POLLING_DELAY          (msecs_to_jiffies(30000))
+/* delay macro for future use.*/
+//#define MBX_MAX_POLLING_DELAY          (msecs_to_jiffies(30000))
 
 /* Translate IP address */
 #define NIPQUAD(addr) \
@@ -89,14 +89,6 @@ static unsigned int get_4bytevalue_fromIndex( Uint8 *dataBuf, int index){
         return ret;
 }
 
-static void set_callback_received_from_npcpu(bool iscallback_recived){
-        is_mbx_received_callback_from_NPCPU = iscallback_recived;
-}
-
-static bool get_callback_received_from_npcpu(){
-        return is_mbx_received_callback_from_NPCPU;
-}
-
 
 static int  ce_mailbox_receive_msg(hw_mbox_Masters_e commander,
                                                                                 Uint8 *dataBuf, Uint32 dataLen,
@@ -113,7 +105,7 @@ static int  ce_mailbox_receive_msg(hw_mbox_Masters_e commander,
         printk("CE_MAILBOX: App cpu ip%u.%u.%u.%u\n",NIPQUAD(mbx_usr_info.parameter.appcpu_ipv4_addr));
         printk("CE_MAILBOX: Netmask %u.%u.%u.%u\n",NIPQUAD(mbx_usr_info.parameter.netmask));
         ce_mailbox_send_reply_ack();
-        set_callback_received_from_npcpu(true);
+        complete(&cmd_done);
         return 0;
 }
 
@@ -168,24 +160,12 @@ static int mbx_close(struct inode *inode, struct file *filp)
         printk(KERN_DEBUG "CE_MAILBOX: npcpu_appcpu_mbx driver close ref %d\n", --ref);
         return 0;
 }
-/* Polloing on specivec callback from mailbox - max timeout is 4 sec */
+/* Polloing on specivec callback from mailbox - max wait forever to get RPC info from ARM  */
 static int mbx_wait_till_ready()
 {
-        unsigned long timeout = jiffies + MBX_MAX_POLLING_DELAY;
-         do{
-                if(!(get_callback_received_from_npcpu())) {
-                     continue;
-                } else {
-                     return 0;  /* Normal exit */
-                }
-
-         }while(time_after(timeout, jiffies));
-
-         printk( "*****************************************************************\n" );
-        printk( "*** CE_MAILBOX: mbx_wait_till_ready Wait for callback msg Fail on timeout     **\n" );
-        printk( "*****************************************************************\n" );
-
-        return 1;
+        init_completion(&cmd_done);
+        wait_for_completion_interruptible(&cmd_done);
+        return 0;
 }
 
  /* * npcpu_appcpu_mbx_receive_callback
@@ -204,7 +184,6 @@ long npcpu_appcpu_mbx_receive_specific_callback()
                 printk("CE_MAILBOX: APPCPU-NPCPU MBX is stuck - ce_mailbox_receive_msg from NPCPU is NOT arrived\n" );
                 return -ENOSYS;
         }
-        printk( "CE_MAILBOX: GOT callback from NPCPU \n" );
          return 0;
 }
 
@@ -348,7 +327,6 @@ static int  ce_mailbox_init(void)
                    printk("CE_MAILBOX: ERROR - %s initialization- can not create proc fs\n",CE_MAILBOX_DEVICE_NAME);
 
         glob_mbx_is_initialized = true;
-        set_callback_received_from_npcpu(false);
         printk(KERN_INFO "CE_MAILBOX: Intel(R) NPCPU <-> APPCPU CE Mailbox Device Driver built on %s @ %s\n", __DATE__, __TIME__);
         return 0;
 }
@@ -357,7 +335,6 @@ static void __exit ce_mailbox_exit(void)
 {
            remove_mbx_proc(mbx_proc_dir);
          glob_mbx_is_initialized = false;
-         set_callback_received_from_npcpu(false);
          printk(KERN_INFO "CE_MAILBOX: Intel(R) NPCPU <-> APPCPU CE Mailbox Device Driver removed\n");
 }
 module_init(ce_mailbox_init);
-- 
1.7.9.5

