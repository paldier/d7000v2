# HG changeset patch
# Parent 2ce9f0b4511def071fdbfdc50cd7e3f10367b6aa

diff --git a/include/linux/avalanche/generic/avalanche_pp_api.h b/include/linux/avalanche/generic/avalanche_pp_api.h
--- a/include/linux/avalanche/generic/avalanche_pp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pp_api.h
@@ -372,7 +372,7 @@ typedef struct // former TI_PP_QOS_CLST_
     Uint16                      egr_congst_thrsh_packets2; /* Egress Congestion Pkts Threshold 2 */
     Uint16                      egr_congst_thrsh_packets3; /* Egress Congestion Pkts Threshold 3 */
     Uint16                      egr_congst_thrsh_packets4; /* Egress Congestion Pkts Threshold 4 */
-
+	Uint8						shaperClusters[4];
 }
 AVALANCHE_PP_QOS_CLST_CFG_t;
 
diff --git a/include/linux/avalanche/generic/pp_qos_p7.h b/include/linux/avalanche/generic/pp_qos_p7.h
--- a/include/linux/avalanche/generic/pp_qos_p7.h
+++ b/include/linux/avalanche/generic/pp_qos_p7.h
@@ -84,7 +84,10 @@
 #define PP_QOS_MAX_CLUSTER_INDEX     (PP_QOS_MAX_CLUSTERS - 1)
 
 #define PP_QOS_Q_REALTIME_FLAG       (1<<0)
-#define PP_QOS_Q_NO_QOS_FLAG         (1<<1)
+#define PP_QOS_Q_DROP_EXCESSIVE_FLAG (1<<1)
+#define PP_QOS_Q_QDA_DISABLE_FLAG    (1<<2)
+#define PP_QOS_Q_LIMITED_FLAG        (1<<3)
+#define PP_QOS_Q_NO_QOS_FLAG         (1<<4)
 
 
 #define PP_QOS_ITERATION_TICK_USEC   (25)
@@ -99,7 +102,7 @@
 #define PP_QOS_FW_CLST_BLK_BASE_PHY  (0xF3E12200)
 
 /* Rate(in Mbps) * 1M) / iteration per second / 8(bits in byte) */
-#define PP_QOS_MEGA_BIT_PER_SEC_TO_IT_CREDIT_BYTES(x)    ((Uint32)(((Uint64)(x * 1000 * 1000)) / PP_QOS_ITERATION_PER_SECOND / 8 ))
+#define PP_QOS_MEGA_BIT_PER_SEC_TO_IT_CREDIT_BYTES(x)    ((Uint32)(((Uint64)(x * 1000 * 1000)) / PP_QOS_ITERATION_PER_SECOND / 8 ))
 #define PP_QOS_PPS_TO_IT_CREDIT_PACKETS(x)               ((Uint16)(x / PP_QOS_ITERATION_PER_SECOND))
 
 /************************************************/
@@ -141,6 +144,18 @@ typedef struct
 }
 PP_QOS_PROFILE_t;
 
+typedef struct
+{
+    Uint8             pid_id;
+    Uint8             num_of_priorities;          /* Number of priorities */
+    Uint32            egress_port_queue;          /* Egress queue number */
+    Uint32            egress_queue_depth_packets; /* Egress queue depth (packets) */
+    Uint32            egress_queue_depth_bytes;   /* Egress queue depth (bytes) */
+    Uint32            port_rate_limit_Mbps;       /* Rate limit (in Mbps)*/
+    Uint32            port_pps_limit;             /* PPS limit */
+}
+PP_QOS_PORT_SHAPER_t;
+
 /* QoS manager statistics */
 typedef struct
 {
@@ -152,6 +167,8 @@ typedef struct
     Uint8    private_queues_free_pool_cnt[AVALANCHE_PP_MAX_PID];
     Uint32   clusters_starvation_shared;
     Uint32   queues_starvation_shared;
+    Uint32   shapers_starvation;
+    Uint32   active_shapers;
 }
 PP_QOS_DB_Counters_t;
 
@@ -202,8 +219,13 @@ typedef struct
     Uint16                      egr_congst_thrsh_pkts3;     /* Egress Congestion Threshold Packets point 2  */
     Uint16                      egr_congst_thrsh_pkts4;     /* Egress Congestion Threshold Packets point 1  */
 
-    Uint32                      w14;                        /* Reserved */
-    Uint32                      w15;                        /* Reserved */
+    Uint16                      last_qda_cmd_pkt;
+    Uint16                      last_qda_cmd_bytes;
+
+    Uint8                       shaper_clst3;
+    Uint8                       shaper_clst2;
+    Uint8                       shaper_clst1;
+    Uint8                       shaper_clst0;
 
 }
 PP_QOS_FW_CLST_CFG_t;
@@ -313,7 +335,40 @@ PP_QOS_MGR_RET_e pp_qos_enable_psm(void)
  *  Returns PP_QOS_RC_SUCCESS if pass.
  */
 PP_QOS_MGR_RET_e pp_qos_disable_psm(void);
-
+/**
+ *  pp_qos_set_port_shaper - Config QoS shaper
+ *  @port_shaper: Port shaper configuration
+ *  @shaper_id: Pointer to return the new shaper ID
+ *  @shaper_in_q: Pointer to return the new ingress queues
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_set_port_shaper(PP_QOS_PORT_SHAPER_t * port_shaper, Uint8 * shaper_id, Uint8 * shaper_in_q);
+/**
+ *  pp_qos_free_port_shaper - Free/Delete QoS shaper
+ *  @shaper_id: Shaper ID
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_free_port_shaper(Uint8 shaper_id);
+/**
+ *  pp_qos_shaper_is_active - Check if shaper is active
+ *  @shaper_id: Shaper ID
+ *  @is_active: Pointer to return if active or not
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_shaper_is_active(Uint8 shaper_id, Bool *is_active);
+/**
+ *  pp_qos_get_port_shaper_cluster_config - Get the port shaper
+ *  cluster configuration
+ *  @shaper_id: Shaper ID
+ *  @clst_cfg: Pointer to return the cluster configuration
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_port_shaper_cluster_config(Uint8 shaper_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg);
+PP_QOS_MGR_RET_e pp_qos_set_port_shaper_cluster_config(Uint8 shaper_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg);
 
 /**************/
 /* Cluster    */
@@ -474,6 +529,7 @@ PP_QOS_MGR_RET_e pp_qos_free_queue(Uint8
  *  Returns PP_QOS_RC_SUCCESS if pass.
  */
 PP_QOS_MGR_RET_e pp_qos_get_queue_config(Uint8 phy_queue_id, AVALANCHE_PP_QOS_QUEUE_t *queue_cfg);
+PP_QOS_MGR_RET_e pp_qos_change_queue_it_credits(Uint8 phy_queue_id, Uint32 pkt_credit, Uint32 bytes_credit);
 /**
  *  pp_qos_modify_active_queue - Modify properties for an active
  *  queue
@@ -507,6 +563,16 @@ PP_QOS_MGR_RET_e pp_qos_inc_session_cnt_
  */
 PP_QOS_MGR_RET_e pp_qos_dec_session_cnt_for_queue(Uint8 phy_queue_id);
 
+/**
+ *  pp_qos_set_queue_shaper - Limit queue to fixed rate (in
+ *  MegaBitPerSec)
+ *  @phy_queue_id: Queue ID
+ *  @rate_in_mega_bits: Rate in MegaBitPerSec
+ * 
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_set_queue_shaper(Uint8 phy_queue_id, Uint32 rate_in_mega_bits);
+
 /**************/
 /* VPID       */
 /**************/
diff --git a/include/linux/avalanche/puma7/synopsys_gbe_interface.h b/include/linux/avalanche/puma7/synopsys_gbe_interface.h
--- a/include/linux/avalanche/puma7/synopsys_gbe_interface.h
+++ b/include/linux/avalanche/puma7/synopsys_gbe_interface.h
@@ -40,7 +40,9 @@ typedef enum{
     DWC_ETH_QOS_INTEL_PRIVATE_CMD_START = 50,
     DWC_ETH_QOS_MUX_SET_CMD = DWC_ETH_QOS_INTEL_PRIVATE_CMD_START,
     DWC_ETH_QOS_MUX_GET_CMD,
-    DWC_ETH_QOS_MUX_SET_GBE_DBG_PRINT,
+    DWC_ETH_QOS_SET_GBE_DBG_PRINT,
+    DWC_ETH_QOS_UPDATE_LINK_STATUS_CHANGE,
+    DWC_ETH_QOS_SET_LINK_STATUS_CHANGE_DBG_PRINT_MODE,
     DWC_ETH_QOS_INTEL_PRIVATE_CMD_END
 }DWC_ETH_QOS_CMDS;
 
@@ -52,6 +54,13 @@ typedef enum
     DBG_PRINT_BOTH = DBG_PRINT_RX | DBG_PRINT_TX
 }e_print_dbg;
 
+typedef enum
+{
+    DBG_LINK_STATUS_FLAGS_NONE           = 0x00,
+    DBG_LINK_STATUS_FLAGS_CLI_CMD        = 0x01,
+    DBG_LINK_STATUS_FLAGS_IGNORE_TIMER   = 0x10,
+}e_link_status_flags;
+
 #define PRINT_DBG_PRINT_MODE(print_mode)\
         ((print_mode) == DBG_PRINT_NONE ? "Off" :\
         ((print_mode) == DBG_PRINT_RX   ? "Rx"  :\
@@ -64,18 +73,20 @@ typedef enum
  * sharing info through ioctl
  * */
 struct ifr_data_struct {
-	unsigned int flags;
-	unsigned int qInx; /* dma channel no to be configured */
-	unsigned int cmd;
+    unsigned int flags;
+    unsigned int qInx; /* dma channel no to be configured */
+    unsigned int cmd;
     unsigned int mdioNum;
     unsigned int param;
-	unsigned int context_setup;
-	unsigned int connected_speed;
-	unsigned int rwk_filter_values[DWC_ETH_QOS_RWK_FILTER_LENGTH];
-	unsigned int rwk_filter_length;
-	int command_error;
-	int test_done;
-	void *ptr;
+    unsigned int context_setup;
+    unsigned int connected_speed;
+    unsigned int connected_duplex;
+    char         devName[VPID_IF_NAME_SIZE];
+    unsigned int rwk_filter_values[DWC_ETH_QOS_RWK_FILTER_LENGTH];
+    unsigned int rwk_filter_length;
+    int command_error;
+    int test_done;
+    void *ptr;
 };
 
 #define NSGMII0_NAME         "nsgmii0"
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1498,7 +1498,7 @@ struct net_device {
     int (*qos_setup_hook)   (struct net_device *dev_p);
     int (*qos_shutdown_hook)(struct net_device *dev_p);
     int (*qos_select_hook)  (struct sk_buff    *skb);
-    void (*qos_get_params_hook)  (struct net_device *dev, Uint16 *egressQ, Uint32 *rate);
+    void (*qos_get_params_hook)  (struct net_device *dev, Uint16 *egressQ, Uint32 *rate, Uint32 *shaper);
     int devInstance;
 #endif
 	/* phy device may attach itself for hardware timestamping */
