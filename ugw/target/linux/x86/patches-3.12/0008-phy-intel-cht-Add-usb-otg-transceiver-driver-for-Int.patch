From 8db0c15d9953a13e7c5b66c0b04751d72213fab9 Mon Sep 17 00:00:00 2001
From: "Wu, Hao" <hao.wu@intel.com>
Date: Thu, 7 Aug 2014 15:35:01 +0800
Subject: [PATCH] phy-intel-cht: Add usb otg transceiver driver for Intel
 CherryTrail Platform

In Intel CherryTrail Platform, same USB PHY shared by XHCI host controller and
dwc3 device controller, and controlled by a mux. This patch implements one phy
driver for the dual role switch function:
- Follows the otg fsm to implement a simple dual role otg state machine.
    other otg features like SRP/HNP/ADP are not supported.
- Receives ID OTG events and trigger state transisition.
    e.g In Cherrytrail-T, ID events are detected and sent from smb347 charger
    driver.
- Implements host and gadget mode start/stop functions
    for otg_host_start, switching PHY mux to host using XHCI vendor defined
    extended capability interface.
- Add some sysfs interfaces for debugging purpose.
 echo 1 or 0 to vbus_evt to trigger VBUS ON /OFF event for device mode.
 echo 1 or 0 to otg_id to trigger ID float/grounded event.
 cat cht_otg_state to show current state machine status.

Change-Id: Ifbc2fcee6ff58ca9915e29929d595efe3937bb05
Signed-off-by: Wu, Hao <hao.wu@intel.com>
---
 drivers/usb/phy/Kconfig         |    9 +
 drivers/usb/phy/Makefile        |    1 +
 drivers/usb/phy/phy-intel-cht.c |  521 +++++++++++++++++++++++++++++++++++++++
 drivers/usb/phy/phy-intel-cht.h |   30 +++
 4 files changed, 561 insertions(+)
 create mode 100644 drivers/usb/phy/phy-intel-cht.c
 create mode 100644 drivers/usb/phy/phy-intel-cht.h

diff --git a/drivers/usb/phy/Kconfig b/drivers/usb/phy/Kconfig
index d5589f9..cb9c2f6 100644
--- a/drivers/usb/phy/Kconfig
+++ b/drivers/usb/phy/Kconfig
@@ -228,4 +228,13 @@ config USB_ULPI_VIEWPORT
 	  Provides read/write operations to the ULPI phy register set for
 	  controllers with a viewport register (e.g. Chipidea/ARC controllers).
 
+config INTEL_CHT_PHY
+	bool "Intel CherryTrail OTG Transceiver Driver"
+	depends on USB_OTG_FSM
+	select USB_OTG
+	select USB_PHY
+	help
+	  Enable this to support Intel USB OTG transceiver for CherryTrail/Broxton
+          platforms.
+
 endmenu
diff --git a/drivers/usb/phy/Makefile b/drivers/usb/phy/Makefile
index 2135e85..08e9fe5 100644
--- a/drivers/usb/phy/Makefile
+++ b/drivers/usb/phy/Makefile
@@ -31,3 +31,4 @@ obj-$(CONFIG_USB_MXS_PHY)		+= phy-mxs-usb.o
 obj-$(CONFIG_USB_RCAR_PHY)		+= phy-rcar-usb.o
 obj-$(CONFIG_USB_ULPI)			+= phy-ulpi.o
 obj-$(CONFIG_USB_ULPI_VIEWPORT)		+= phy-ulpi-viewport.o
+obj-$(CONFIG_INTEL_CHT_PHY)		+= phy-intel-cht.o
diff --git a/drivers/usb/phy/phy-intel-cht.c b/drivers/usb/phy/phy-intel-cht.c
new file mode 100644
index 0000000..a7998e4
--- /dev/null
+++ b/drivers/usb/phy/phy-intel-cht.c
@@ -0,0 +1,521 @@
+/*
+ * Intel CherryTrail USB OTG transceiver driver
+ *
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * Author: Wu, Hao
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program;
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/timer.h>
+#include <linux/usb.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/hcd.h>
+
+#include "../host/xhci.h"
+#include "../host/xhci-intel-cap.h"
+
+#include "phy-intel-cht.h"
+
+#define DRIVER_VERSION "Rev. 0.5"
+#define DRIVER_AUTHOR "Hao Wu"
+#define DRIVER_DESC "Intel CherryTrail USB OTG Transceiver Driver"
+#define DRIVER_INFO DRIVER_DESC " " DRIVER_VERSION
+
+static const char driver_name[] = "intel-cht-otg";
+
+static struct cht_otg *cht_otg_dev;
+
+static int cht_otg_set_id_mux(struct cht_otg *otg_dev, int id)
+{
+	struct usb_bus *host = otg_dev->phy.otg->host;
+	struct usb_gadget *gadget = otg_dev->phy.otg->gadget;
+	struct usb_hcd *hcd;
+	struct xhci_hcd *xhci;
+
+	if (!host || !gadget || !gadget->dev.parent)
+		return -ENODEV;
+
+	hcd = bus_to_hcd(host);
+	xhci = hcd_to_xhci(hcd);
+
+	/* make sure host and device are in D0, when do phy transition */
+	pm_runtime_get_sync(host->controller);
+	pm_runtime_get_sync(gadget->dev.parent);
+
+	xhci_intel_phy_mux_switch(xhci, id);
+
+	pm_runtime_put(gadget->dev.parent);
+	pm_runtime_put(host->controller);
+
+	return 0;
+}
+
+static int cht_otg_start_host(struct otg_fsm *fsm, int on)
+{
+	struct usb_otg *otg = fsm->otg;
+	struct cht_otg *otg_dev = container_of(otg->phy, struct cht_otg, phy);
+	int retval;
+
+	dev_dbg(otg->phy->dev, "%s --->\n", __func__);
+
+	if (!otg->host)
+		return -ENODEV;
+
+	/* Just switch the mux to host path */
+	retval = cht_otg_set_id_mux(otg_dev, !on);
+
+	dev_dbg(otg->phy->dev, "%s <---\n", __func__);
+
+	return retval;
+}
+
+/* SRP / HNP / ADP are not supported, only simple dual role function
+ * start gadget function is not implemented as controller will take
+ * care itself per VBUS event */
+static struct otg_fsm_ops cht_otg_ops = {
+	.start_host = cht_otg_start_host,
+};
+
+static int cht_otg_set_power(struct usb_phy *phy, unsigned mA)
+{
+	dev_dbg(phy->dev, "%s --->\n", __func__);
+
+	if (!cht_otg_dev)
+		return -ENODEV;
+
+	if (phy->state != OTG_STATE_B_PERIPHERAL)
+		dev_err(phy->dev, "ERR: Draw %d mA in state %s\n",
+			mA, usb_otg_state_string(cht_otg_dev->phy.state));
+
+	/* Notify other drivers that device enumerated or not.
+	 * e.g It is needed by some charger driver, to set
+	 * charging current for SDP case */
+	atomic_notifier_call_chain(&cht_otg_dev->phy.notifier,
+					USB_EVENT_ENUMERATED, &mA);
+	dev_info(phy->dev, "Draw %d mA\n", mA);
+
+	dev_dbg(phy->dev, "%s <---\n", __func__);
+
+	return 0;
+}
+
+/*
+ * Called by initialization code of host driver. Register host
+ * controller to the OTG.
+ */
+static int cht_otg_set_host(struct usb_otg *otg, struct usb_bus *host)
+{
+	struct cht_otg *otg_dev;
+
+	if (!otg || !host)
+		return -ENODEV;
+
+	otg_dev = container_of(otg->phy, struct cht_otg, phy);
+	if (otg_dev != cht_otg_dev)
+		return -EINVAL;
+
+	otg->host = host;
+
+	/* once host registered, then kick statemachine to move
+	 * to A_HOST if id is grounded */
+	otg_dev->fsm.a_bus_drop = 0;
+	otg_dev->fsm.a_bus_req = 1;
+
+	otg_statemachine(&otg_dev->fsm);
+
+	return 0;
+}
+
+/*
+ * Called by initialization code of udc. Register udc to OTG.
+ */
+static int cht_otg_set_peripheral(struct usb_otg *otg,
+					struct usb_gadget *gadget)
+{
+	struct cht_otg *otg_dev;
+
+	if (!otg || !gadget)
+		return -ENODEV;
+
+	otg_dev = container_of(otg->phy, struct cht_otg, phy);
+	if (otg_dev != cht_otg_dev)
+		return -EINVAL;
+
+	otg->gadget = gadget;
+
+	otg_dev->fsm.b_bus_req = 1;
+
+	/* kick statemachine */
+	otg_statemachine(&otg_dev->fsm);
+
+	return 0;
+}
+
+static int cht_otg_start(struct platform_device *pdev)
+{
+	struct cht_otg *otg_dev;
+	struct usb_phy *phy_dev;
+	struct otg_fsm *fsm;
+
+	phy_dev = usb_get_phy(USB_PHY_TYPE_USB2);
+	if (!phy_dev)
+		return -ENODEV;
+
+	otg_dev = container_of(phy_dev, struct cht_otg, phy);
+	fsm = &otg_dev->fsm;
+
+	/* Initialize the state machine structure with default values */
+	phy_dev->state = OTG_STATE_UNDEFINED;
+	fsm->otg = otg_dev->phy.otg;
+	mutex_init(&fsm->lock);
+
+	fsm->id = 1;
+	otg_statemachine(fsm);
+
+	dev_dbg(&pdev->dev, "initial ID pin set to %d\n", fsm->id);
+
+	return 0;
+}
+
+static void cht_otg_stop(struct platform_device *pdev)
+{
+	if (!cht_otg_dev)
+		return;
+
+	if (cht_otg_dev->regs)
+		iounmap(cht_otg_dev->regs);
+}
+
+static int cht_otg_handle_notification(struct notifier_block *nb,
+				unsigned long event, void *data)
+{
+	int state, val;
+
+	if (!cht_otg_dev)
+		return NOTIFY_BAD;
+
+	if (data != NULL)
+		val = *(int *)data;
+	else
+		val = 1;
+
+	switch (event) {
+	/* USB_EVENT_VBUS: vbus valid event */
+	case USB_EVENT_VBUS:
+		dev_info(cht_otg_dev->phy.dev, "USB_EVENT_VBUS vbus valid\n");
+		if (val)
+			cht_otg_dev->fsm.b_sess_vld = 1;
+		else
+			cht_otg_dev->fsm.b_sess_vld = 0;
+		schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	/* USB_EVENT_ID: id was grounded */
+	case USB_EVENT_ID:
+		dev_info(cht_otg_dev->phy.dev, "USB_EVENT_ID id ground\n");
+		cht_otg_dev->fsm.id = 0;
+		schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	/* USB_EVENT_NONE: no events or cable disconnected */
+	case USB_EVENT_NONE:
+		dev_info(cht_otg_dev->phy.dev,
+					"USB_EVENT_NONE cable disconnected\n");
+		if (cht_otg_dev->fsm.id == 0)
+			cht_otg_dev->fsm.id = 1;
+		else
+			dev_err(cht_otg_dev->phy.dev, "why USB_EVENT_NONE?\n");
+		schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	default:
+		dev_info(cht_otg_dev->phy.dev, "unknown notification\n");
+		state = NOTIFY_DONE;
+		break;
+	}
+
+	return state;
+}
+
+static void cht_otg_fsm_work(struct work_struct *work)
+{
+	if (!cht_otg_dev)
+		return;
+
+	otg_statemachine(&cht_otg_dev->fsm);
+}
+
+static ssize_t show_cht_otg_state(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct otg_fsm *fsm = &cht_otg_dev->fsm;
+	char *next = buf;
+	unsigned size = PAGE_SIZE;
+	int t;
+
+	mutex_lock(&fsm->lock);
+
+	/* OTG state */
+	t = scnprintf(next, size,
+		      "OTG state: %s\n\n",
+		      usb_otg_state_string(cht_otg_dev->phy.state));
+	size -= t;
+	next += t;
+
+	/* State Machine Variables */
+	t = scnprintf(next, size,
+			"a_bus_req: %d\n"
+			"b_bus_req: %d\n"
+			"a_bus_resume: %d\n"
+			"a_bus_suspend: %d\n"
+			"a_conn: %d\n"
+			"a_sess_vld: %d\n"
+			"a_srp_det: %d\n"
+			"a_vbus_vld: %d\n"
+			"b_bus_resume: %d\n"
+			"b_bus_suspend: %d\n"
+			"b_conn: %d\n"
+			"b_se0_srp: %d\n"
+			"b_ssend_srp: %d\n"
+			"b_sess_vld: %d\n"
+			"id: %d\n",
+			fsm->a_bus_req,
+			fsm->b_bus_req,
+			fsm->a_bus_resume,
+			fsm->a_bus_suspend,
+			fsm->a_conn,
+			fsm->a_sess_vld,
+			fsm->a_srp_det,
+			fsm->a_vbus_vld,
+			fsm->b_bus_resume,
+			fsm->b_bus_suspend,
+			fsm->b_conn,
+			fsm->b_se0_srp,
+			fsm->b_ssend_srp,
+			fsm->b_sess_vld,
+			fsm->id);
+
+	size -= t;
+	next += t;
+
+	mutex_unlock(&fsm->lock);
+
+	return PAGE_SIZE - size;
+}
+
+static DEVICE_ATTR(cht_otg_state, S_IRUGO, show_cht_otg_state, NULL);
+
+static ssize_t store_vbus_evt(struct device *_dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct otg_fsm *fsm;
+	int val;
+
+	if (!cht_otg_dev)
+		return -EINVAL;
+
+	fsm = &cht_otg_dev->fsm;
+
+	if (count != 2)
+		return -EINVAL;
+
+	switch (buf[0]) {
+	case '1':
+		dev_info(cht_otg_dev->phy.dev, "VBUS = 1\n");
+		val = 1;
+		atomic_notifier_call_chain(&cht_otg_dev->phy.notifier,
+			USB_EVENT_VBUS, &val);
+		return count;
+	case '0':
+		dev_info(cht_otg_dev->phy.dev, "VBUS = 0\n");
+		val = 0;
+		atomic_notifier_call_chain(&cht_otg_dev->phy.notifier,
+			USB_EVENT_VBUS, &val);
+		return count;
+	default:
+		return -EINVAL;
+	}
+	return count;
+}
+static DEVICE_ATTR(vbus_evt, S_IWUSR|S_IWGRP, NULL, store_vbus_evt);
+
+static ssize_t store_otg_id(struct device *_dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct otg_fsm *fsm;
+
+	if (!cht_otg_dev)
+		return -EINVAL;
+
+	fsm = &cht_otg_dev->fsm;
+
+	if (count != 2)
+		return -EINVAL;
+
+	switch (buf[0]) {
+	case '0':
+	case 'a':
+	case 'A':
+		dev_info(cht_otg_dev->phy.dev, "ID = 0\n");
+		fsm->id = 0;
+		otg_statemachine(fsm);
+		return count;
+	case '1':
+	case 'b':
+	case 'B':
+		dev_info(cht_otg_dev->phy.dev, "ID = 1\n");
+		fsm->id = 1;
+		otg_statemachine(fsm);
+		return count;
+	default:
+		return -EINVAL;
+	}
+
+	return count;
+}
+static DEVICE_ATTR(otg_id, S_IWUSR|S_IWGRP, NULL, store_otg_id);
+
+static int cht_otg_probe(struct platform_device *pdev)
+{
+	struct cht_otg *cht_otg;
+	int status;
+
+	cht_otg = kzalloc(sizeof(struct cht_otg), GFP_KERNEL);
+	if (!cht_otg) {
+		dev_err(&pdev->dev, "Failed to alloc cht_otg structure\n");
+		return -ENOMEM;
+	}
+
+	cht_otg->phy.otg = kzalloc(sizeof(struct usb_otg), GFP_KERNEL);
+	if (!cht_otg->phy.otg) {
+		kfree(cht_otg);
+		return -ENOMEM;
+	}
+
+	/* Set OTG state machine operations */
+	cht_otg->fsm.ops = &cht_otg_ops;
+
+	/* initialize the otg and phy structure */
+	cht_otg->phy.label = DRIVER_DESC;
+	cht_otg->phy.dev = &pdev->dev;
+	cht_otg->phy.set_power = cht_otg_set_power;
+
+	cht_otg->phy.otg->phy = &cht_otg->phy;
+	cht_otg->phy.otg->set_host = cht_otg_set_host;
+	cht_otg->phy.otg->set_peripheral = cht_otg_set_peripheral;
+
+	/* No support for ADP, HNP and SRP */
+	cht_otg->phy.otg->start_hnp = NULL;
+	cht_otg->phy.otg->start_srp = NULL;
+
+	ATOMIC_INIT_NOTIFIER_HEAD(&cht_otg->phy.notifier);
+
+	cht_otg->nb.notifier_call = cht_otg_handle_notification;
+	usb_register_notifier(&cht_otg->phy, &cht_otg->nb);
+
+	INIT_WORK(&cht_otg->fsm_work, cht_otg_fsm_work);
+
+	cht_otg_dev = cht_otg;
+
+	status = usb_add_phy(&cht_otg_dev->phy, USB_PHY_TYPE_USB2);
+	if (status) {
+		dev_err(&pdev->dev, "failed to add cht otg usb phy\n");
+		goto err1;
+	}
+
+	/* init otg-fsm */
+	status = cht_otg_start(pdev);
+	if (status) {
+		dev_err(&pdev->dev, "failed to add cht otg usb phy\n");
+		goto err2;
+	}
+
+	status = device_create_file(&pdev->dev, &dev_attr_cht_otg_state);
+	if (status) {
+		dev_err(&pdev->dev, "failed to create fsm sysfs attribute\n");
+		goto err2;
+	}
+
+	status = device_create_file(&pdev->dev, &dev_attr_vbus_evt);
+	if (status) {
+		dev_err(&pdev->dev, "failed to create vbus sysfs attribute\n");
+		goto err3;
+	}
+
+	status = device_create_file(&pdev->dev, &dev_attr_otg_id);
+	if (status) {
+		dev_err(&pdev->dev, "failed to create id sysfs attribute\n");
+		goto err4;
+	}
+
+	return 0;
+
+err4:
+	device_remove_file(&pdev->dev, &dev_attr_vbus_evt);
+err3:
+	device_remove_file(&pdev->dev, &dev_attr_cht_otg_state);
+err2:
+	cht_otg_stop(pdev);
+	usb_remove_phy(&cht_otg_dev->phy);
+err1:
+	kfree(cht_otg->phy.otg);
+	kfree(cht_otg);
+	return status;
+}
+
+static int cht_otg_remove(struct platform_device *pdev)
+{
+	device_remove_file(&pdev->dev, &dev_attr_otg_id);
+	device_remove_file(&pdev->dev, &dev_attr_vbus_evt);
+	device_remove_file(&pdev->dev, &dev_attr_cht_otg_state);
+
+	cht_otg_stop(pdev);
+	usb_remove_phy(&cht_otg_dev->phy);
+
+	kfree(cht_otg_dev->phy.otg);
+	kfree(cht_otg_dev);
+
+	return 0;
+}
+
+struct platform_driver intel_cht_otg_driver = {
+	.probe = cht_otg_probe,
+	.remove = cht_otg_remove,
+	.driver = {
+		.name = driver_name,
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init cht_otg_phy_init(void)
+{
+	return platform_driver_register(&intel_cht_otg_driver);
+}
+subsys_initcall(cht_otg_phy_init);
+
+static void __exit cht_otg_phy_exit(void)
+{
+	platform_driver_unregister(&intel_cht_otg_driver);
+}
+module_exit(cht_otg_phy_exit);
+
+MODULE_DESCRIPTION(DRIVER_INFO);
+MODULE_AUTHOR(DRIVER_AUTHOR);
+MODULE_LICENSE("GPL");
diff --git a/drivers/usb/phy/phy-intel-cht.h b/drivers/usb/phy/phy-intel-cht.h
new file mode 100644
index 0000000..a80c6c0
--- /dev/null
+++ b/drivers/usb/phy/phy-intel-cht.h
@@ -0,0 +1,30 @@
+/*
+ * Intel CherryTrail USB OTG Transceiver driver
+ *
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the  GNU General Public License along
+ * with this program; if not, write  to the Free Software Foundation, Inc.,
+ * 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/usb/otg-fsm.h>
+#include <linux/usb/otg.h>
+
+struct cht_otg {
+	struct usb_phy phy;
+	struct otg_fsm fsm;
+	struct notifier_block nb;
+	struct work_struct fsm_work;
+	void __iomem *regs;
+};
-- 
1.7.9.5

