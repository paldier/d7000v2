From b83670abe8a6021424709cae6e5514a5c69538b0 Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Wed, 9 Mar 2016 13:31:35 -0700
Subject: [PATCH] 	Title: Puma Thermal configuration 	IssueID:
 JIRA# CPM-266 	System Impact: There are certain thermal
 configuration setting based on the thermal 	
 throttling algorithm selected by BIOS. Driver should not
 touch them. 	Resolution: Removing the code that touches
 some of those setting so that the BIOS setting 	
 prevails. 	ReviewID: CCID-129939

---
 drivers/thermal/puma_thermal.c |   80 ++++++++++++++++++----------------------
 1 file changed, 35 insertions(+), 45 deletions(-)

diff --git a/drivers/thermal/puma_thermal.c b/drivers/thermal/puma_thermal.c
index 2733d4e..0d3a191 100644
--- a/drivers/thermal/puma_thermal.c
+++ b/drivers/thermal/puma_thermal.c
@@ -84,9 +84,7 @@
 
 #define TJMAX_CODE		      0x7F
 
-/* Default hysteresis values in C */
-#define DEFAULT_H2C_HYST	   2
-#define DEFAULT_TM2_TIMEOUT   9
+/* Max hysteresis values in C */
 #define MAX_HYST		         7
 
 #define PUMA_MSR_THERM_INT       0x19B
@@ -148,7 +146,7 @@ struct thermal_soc_data {
 struct puma_thermal_mmio {
    unsigned long region1_base;
    unsigned long region1_size;
-   void __iomem *reg_base; 
+   volatile void __iomem *reg_base; 
 };
 
 static const struct pci_device_id puma_thermal_pci_tbl[] = {
@@ -207,24 +205,14 @@ static int puma_get_tj_max(u32 *tj_max)
 
 static int puma_configure_dts(void)
 {
-	volatile u32 eax, edx;
+   u32 eax, edx;
    int ret;
   /*
-   * Set default H2C Hysteresis B[8:10] H2C Hyst 
-   * Enable CPU DTS averaging, set TM2 timeout 
    * Enable the SOC DTS 
    * Enable low to high and high to low trip interrupt for both cores 
    */
    
-	if((ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG1, &eax, &edx)) < 0) {
-      pr_err("PUMA read MSR_THERM_CFG1 failed: %d\n", ret);
-   } else if((ret = wrmsr_safe_on_cpu(0, MSR_THERM_CFG1, ((eax & ~(0x7 << 8)) | (DEFAULT_H2C_HYST << 8)), edx)) < 0) {
-      pr_err("PUMA write MSR_THERM_CFG1 failed: %d\n", ret);
-   } else if((ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG2, &eax, &edx)) < 0) {
-      pr_err("PUMA read MSR_THERM_CFG2 failed: %d\n", ret);
-   } else if((ret = wrmsr_safe_on_cpu(0, MSR_THERM_CFG2, ((eax & ~0x2) | (DEFAULT_TM2_TIMEOUT << 12)), edx)) < 0) {
-      pr_err("PUMA write MSR_THERM_CFG2 failed: %d\n", ret);
-   } else if((ret = puma_write_punit_reg(DTS_ENABLE_REG, DTS_ENABLE)) < 0) {
+   if((ret = puma_write_punit_reg(DTS_ENABLE_REG, DTS_ENABLE)) < 0) {
       pr_err("PUMA Failed to enable SOC DTS: %d\n", ret);
    } else if((ret = rdmsr_safe_on_cpu(0, PUMA_MSR_THERM_INT, &eax, &edx)) < 0) {
       pr_err("PUMA read PUMA_MSR_THERM_INT failed for CPU 0: %d\n", ret);
@@ -242,18 +230,18 @@ static int puma_configure_dts(void)
 static int puma_show_trip_hyst(struct thermal_zone_device *tzd,
 				int trip, long *hyst)
 {
-	u32 eax, edx;
+   u32 eax, edx;
    int ret;
-	struct thermal_device_info *td_info = tzd->devdata;
+   struct thermal_device_info *td_info = tzd->devdata;
 
-	/* Hysteresis is only supported for trip point 0 */
-	if (trip != 0) {
+   /* Hysteresis is only supported for trip point 0 */
+   if (trip != 0) {
       return -EINVAL;
-	}
+   }
 
-	mutex_lock(&td_info->lock);
+   mutex_lock(&td_info->lock);
 
-	ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG1, &eax, &edx);
+   ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG1, &eax, &edx);
    if(ret == 0) {
       /* B[8:10] H2C Hyst, for trip 0. Report hysteresis in mC */
       *hyst = ((eax >> 8) & 0x7) * 1000;
@@ -261,26 +249,26 @@ static int puma_show_trip_hyst(struct thermal_zone_device *tzd,
       pr_err("PUMA read MSR_THERM_CFG1 failed: %d\n", ret);
    }
 
-	mutex_unlock(&td_info->lock);
-	return ret;
+   mutex_unlock(&td_info->lock);
+   return ret;
 }
 
 static int puma_store_trip_hyst(struct thermal_zone_device *tzd,
 				int trip, long hyst)
 {
-	volatile u32 eax, edx;
+   u32 eax, edx;
    int ret;
-	struct thermal_device_info *td_info = tzd->devdata;
+   struct thermal_device_info *td_info = tzd->devdata;
 
-	/* Convert from mC to C */
-	hyst /= 1000;
+   /* Convert from mC to C */
+   hyst /= 1000;
 
-	if (trip != 0 || hyst < 0 || hyst > MAX_HYST)
-		return -EINVAL;
+   if (trip != 0 || hyst < 0 || hyst > MAX_HYST)
+      return -EINVAL;
 
-	mutex_lock(&td_info->lock);
+   mutex_lock(&td_info->lock);
 
-	ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG1, &eax, &edx);
+   ret = rdmsr_safe_on_cpu(0, MSR_THERM_CFG1, &eax, &edx);
    if(ret == 0) {
       /* B[8:10] H2C Hyst */
       eax = (eax & ~(0x7 << 8)) | (hyst << 8);
@@ -291,14 +279,14 @@ static int puma_store_trip_hyst(struct thermal_zone_device *tzd,
       pr_err("PUMA read MSR_THERM_CFG1 failed: %d\n", ret);
    }
 
-	mutex_unlock(&td_info->lock);
-	return ret;
+   mutex_unlock(&td_info->lock);
+   return ret;
 }
 
 static int puma_read_cpu_temp(unsigned int cpu, long *temp)
 {
    int ret = 0;
-   volatile u32 eax, edx;
+   u32 eax, edx;
    int term_valid_range;
    
    /* get valid range */
@@ -477,9 +465,9 @@ static int puma_show_trip_temp(struct thermal_zone_device *tzd,
 static int puma_store_trip_temp(struct thermal_zone_device *tzd,
 				int trip, long trip_temp)
 {
-	volatile u32 aux_trip, thermal_trip_trig, thermal_event_int, aux = 0;
-   volatile u32 eax, edx;
-   int ret = 0;
+   u32 aux_trip, thermal_trip_trig, thermal_event_int, aux = 0;
+   u32 eax, edx;
+   int ret = 0, i;
    unsigned int TE_AUX[] = {TE_AUX0, TE_AUX1, TE_AUX2, TE_AUX3};
    struct thermal_device_info *td_info = tzd->devdata;
 
@@ -491,12 +479,14 @@ static int puma_store_trip_temp(struct thermal_zone_device *tzd,
             trip_temp = (puma_tjmax_temp - trip_temp)/1000;
             trip_temp = trip_temp & 0x7F;
             aux_trip = trip_temp << 16;
-            if((ret = rdmsr_safe_on_cpu(1, PUMA_MSR_THERM_INT, &eax, &edx)) < 0) {
-               pr_err("PUMA read PUMA_MSR_THERM_INT failed: %d\n", ret);
-            } else {
-               eax = eax & ~(0x7F << 16);
-               if((ret = wrmsr_safe_on_cpu(1, PUMA_MSR_THERM_INT, (eax | aux_trip), edx)) < 0) {
+            for(i = 0; i < PUMA_CPU_CORES; i++) {
+               if((ret = rdmsr_safe_on_cpu(i, PUMA_MSR_THERM_INT, &eax, &edx)) < 0) {
                   pr_err("PUMA read PUMA_MSR_THERM_INT failed: %d\n", ret);
+               } else {
+                  eax = eax & ~(0x7F << 16);
+                  if((ret = wrmsr_safe_on_cpu(i, PUMA_MSR_THERM_INT, (eax | aux_trip), edx)) < 0) {
+                     pr_err("PUMA read PUMA_MSR_THERM_INT failed: %d\n", ret);
+                  }
                }
             }
          } else {
@@ -664,7 +654,7 @@ static void puma_thermal_do_wq(struct work_struct *twq)
 {
    struct thermal_soc_data *data = container_of(twq, struct thermal_soc_data, twq);
    unsigned int i;
-   volatile u32 eax, edx;
+   u32 eax, edx;
 
    data->cpu_therm_status = 0;
    for(i = 0; i < PUMA_CPU_CORES; i++) {
-- 
1.7.9.5

