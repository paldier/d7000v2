From 60a0a5e640d77c80b6307c5f8fe1ecd2d090f535 Mon Sep 17 00:00:00 2001
From: tzahiste <tzahi.stern@intel.com>
Date: Mon, 4 Apr 2016 08:48:42 +0300
Subject: [PATCH] Align_headers_between_ARM_and_ATOM

Signed-off-by: tzahiste <tzahi.stern@intel.com>
---
 include/linux/avalanche/generic/_tistdtypes.h      |   20 +++++---
 .../linux/avalanche/generic/avalanche_pdsp_api.h   |   12 +++--
 include/linux/avalanche/generic/avalanche_pp_api.h |   21 ++++-----
 include/linux/avalanche/generic/pal.h              |    7 +++
 include/linux/avalanche/generic/pal_defs.h         |    4 ++
 include/linux/avalanche/generic/pal_os.h           |    4 +-
 include/linux/avalanche/generic/pal_osMem_inline.h |    4 +-
 include/linux/avalanche/generic/pal_sys.h          |   48 ++++++++++++++++++++
 8 files changed, 93 insertions(+), 27 deletions(-)

--- a/include/linux/avalanche/generic/_tistdtypes.h
+++ b/include/linux/avalanche/generic/_tistdtypes.h
@@ -31,7 +31,10 @@
 
 */
 
+#ifndef CONFIG_ARM_AVALANCHE_SOC /*AP-CPU*/
 #include <linux/types.h>
+#endif
+
 /** \file   _tistdtypes.h
     \brief  TI Standard defines for primitive "C" types only
 
@@ -59,10 +62,12 @@
  * \enum Bool - Boolean Type
  */
 
-typedef bool            Bool;
+typedef enum 
+{
+    False = 0,
+    True = 1
+} Bool;
 
-#define True true
-#define False false
 
 typedef int             Int;    /**< Signed base integer quanity */
 typedef unsigned int    Uns;    /**< This is depricated support only */
@@ -74,15 +79,16 @@ typedef void*           Ptr;    /**< Arb
 
 /* Signed integer definitions (64bit, 32bit, 16bit, 8bit) follow... */ 
 typedef long long       Int64; 
-typedef int32_t         Int32;
+typedef int             Int32;
 typedef short           Int16;
 typedef signed char     Int8; 
 
 /* Unsigned integer definitions (64bit, 32bit, 16bit, 8bit) follow... */ 
-typedef unsigned long long  Uint64;
-typedef uint32_t            Uint32;
-typedef uint8_t             Uint8;
+typedef unsigned long long  Uint64; 
+
+typedef unsigned int        Uint32;
 typedef unsigned short      Uint16;
+typedef unsigned char       Uint8;
 
 
 /*@}*/
--- a/include/linux/avalanche/generic/avalanche_pdsp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pdsp_api.h
@@ -65,15 +65,19 @@
 
 #ifdef CONFIG_ARM_AVALANCHE_SOC
 #include <asm-arm/arch-avalanche/generic/_tistdtypes.h>
-#else
+#ifndef __KERNEL__
+#include <puma_autoconf.h>
+#endif
+#else /* NP- CPU */
+#ifdef __KERNEL__
 #include <linux/avalanche/puma7/puma7_defs.h>
 #include <linux/avalanche/generic/_tistdtypes.h>
+#else
+#include "_tistdtypes.h"
+#endif
 #endif
 #include <linux/ioctl.h>
 
-#ifndef __KERNEL__
-#include <puma_autoconf.h>
-#endif
 
 #if PUMA7_OR_NEWER_SOC_TYPE
     #define AVALANCHE_PDSP_H_PUMA7
--- a/include/linux/avalanche/generic/avalanche_pp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pp_api.h
@@ -29,28 +29,18 @@
 
 #ifndef     _AVALANCHE_PP_H
 #define     _AVALANCHE_PP_H
-#ifndef CONFIG_ARM_AVALANCHE_SOC
-#include <linux/avalanche/generic/_tistdtypes.h>
-#else
+#ifdef CONFIG_ARM_AVALANCHE_SOC
 #include <asm-arm/arch-avalanche/generic/_tistdtypes.h>
-#endif
 
 #ifdef __KERNEL__
 
-#ifndef CONFIG_ARM_AVALANCHE_SOC
-#include <linux/avalanche/puma7/puma7_defs.h>
-#endif
 #if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 #include <asm-arm/arch-avalanche/puma6/puma6_cppi_prv.h>
 #endif
 
 #if PUMA7_SOC_TYPE
-#ifndef CONFIG_ARM_AVALANCHE_SOC
-#include <linux/avalanche/puma7/puma7_cppi.h>
-#else
 #include <asm-arm/arch-avalanche/puma7/puma7_cppi.h>
 #endif
-#endif
 
 #else
 #include <puma_autoconf.h>
@@ -60,7 +50,16 @@
 #ifdef PUMA7_SOC_TYPE
 #include <puma7_cppi_prv.h>
 #endif
+#endif
 
+#else /* AP-CPU */
+#ifdef __KERNEL__
+#include <linux/avalanche/generic/_tistdtypes.h>
+#include <linux/avalanche/puma7/puma7_defs.h>
+#include <linux/avalanche/puma7/puma7_cppi.h>
+#else
+#include "_tistdtypes.h"
+#endif
 #endif
 
 #include <linux/ioctl.h>
--- a/include/linux/avalanche/generic/pal.h
+++ b/include/linux/avalanche/generic/pal.h
@@ -82,8 +82,15 @@
 #define _PAL_H_
 
 #include "pal_defs.h"   /* Platform definitions - basic types - includes "_tistdtypes.h" */
+#ifdef CONFIG_ARM_AVALANCHE_SOC
+#include "pformCfg.h"   /* Platform specific file - includes SOC specific header */
+#include "csl_defs.h"   /* CSL definitions - basic types and macros */
+#include "pal_os.h"     /* PAL OS interfaces file - includes selected OS abstraction headers */
+#include "pal_sys.h"    /* Platform System Interfaces file */
+#else /* AP-CPU*/
 #include <linux/avalanche/puma7/puma7.h>
 #include <linux/avalanche/generic/avalanche_intd.h>
 #include <linux/avalanche/generic/avalanche_intc.h>
 #include <linux/avalanche/generic/pal_sys.h>
+#endif
 #endif /* _PAL_H_ */
--- a/include/linux/avalanche/generic/pal_defs.h
+++ b/include/linux/avalanche/generic/pal_defs.h
@@ -83,7 +83,11 @@
 
 /* Import the TI standard primitive "C" types defines */
 #include "_tistdtypes.h"
+#ifdef CONFIG_ARM_AVALANCHE_SOC
+#ifdef __KERNEL__
 #include <linux/spinlock.h>
+#endif
+#endif
 
 /**
  * \defgroup PALDefines PAL Defines
--- a/include/linux/avalanche/generic/pal_os.h
+++ b/include/linux/avalanche/generic/pal_os.h
@@ -85,7 +85,7 @@
 
 #ifdef CONFIG_ARM_AVALANCHE_SOC
 #include "pal_osCfg.h"
-#else
+#else /*AP-CPU*/
 #include "linux/avalanche/generic/pal_osCfg.h"
 #endif
 
@@ -136,7 +136,7 @@
 #ifdef PAL_INCLUDE_OSMEM
 #ifdef CONFIG_ARM_AVALANCHE_SOC
 #include "pal_osMem.h"          /* OsMEM Services */
-#else
+#else /*AP-CPU*/
 #include "linux/avalanche/generic/pal_osMem.h"          /* OsMEM Services */
 #endif
 #endif /* PAL_INCLUDE_OSMEM */
--- a/include/linux/avalanche/generic/pal_osMem_inline.h
+++ b/include/linux/avalanche/generic/pal_osMem_inline.h
@@ -88,7 +88,7 @@
 #include <linux/slab.h>
 #include <linux/mm.h>
 #include <asm/memory.h>
-#else
+#else /*AP-CPU*/
 #include "linux/avalanche/generic/pal_os.h"
 #include "linux/avalanche/generic/pal_defs.h"
 #include <asm/page.h>
@@ -236,12 +236,10 @@ PAL_INLINE Uint32 PAL_osMemVirt2Phy (Ptr
 {
     return (Uint32) __virt_to_phys((Uint32)virtAddress);
 }
-#endif
 
 /**
  * \brief PAL OS Memory Physical To Virtual
  */
-#ifdef CONFIG_ARM_AVALANCHE_SOC
 PAL_INLINE Ptr PAL_osMemPhy2Virt (Uint32 phyAddress)
 {
 
--- a/include/linux/avalanche/generic/pal_sys.h
+++ b/include/linux/avalanche/generic/pal_sys.h
@@ -205,6 +205,32 @@ typedef enum
     GPIO_PIN_HIGH
 }PAL_SYS_GPIO_PIN_POLARITY_T;
 
+#ifdef CONFIG_ARM_AVALANCHE_SOC
+INT32 PAL_sysGpioInBit(UINT32 gpio_pin);
+INT32 PAL_sysGpioOutBit(UINT32 gpio_pin, INT32 value);
+#if (PUMA7_OR_NEWER_SOC_TYPE)
+INT32 PAL_sysGpioSetStatus(UINT32 gpio_pin, PAL_SYS_GPIO_PIN_STATUS_T status);
+INT32 PAL_sysGpioGetStatus(UINT32 gpio_pin);
+INT32 PAL_sysGpioSetPolarity(UINT32 gpio_pin, PAL_SYS_GPIO_PIN_POLARITY_T polarity);
+INT32 PAL_sysGpioResetAVB(void);
+INT32 PAL_sysGpioAVBconfig(UINT32 gpio_pin);
+INT32 PAL_sysGpioGetAVBcounterValue(void);
+#endif
+#if  defined (CONFIG_MACH_PUMA5)
+INT32 PAL_sysGpioCtrl(UINT32 gpio_pin, PAL_SYS_GPIO_PIN_MODE_T pin_mode, PAL_SYS_GPIO_PIN_DIRECTION_T pin_direction);
+INT32 PAL_sysGpioOutValue(UINT32 out_val, UINT32 out_mask,UINT32 reg_index);
+#else
+PAL_SYS_GPIO_PIN_DIRECTION_T PAL_sysGpioCtrlGetDir(UINT32 gpio_pin);
+INT32 PAL_sysGpioCtrlSetDir(UINT32 gpio_pin, PAL_SYS_GPIO_PIN_DIRECTION_T pin_direction);
+#endif
+/*****************************************************************************
+ * CLKC Control
+ *****************************************************************************/
+
+void PAL_sysClkcInit(void* param);
+int PAL_sysClkcSetFreq(PAL_SYS_CLKC_ID_T clk_id, unsigned int output_freq);
+int PAL_sysClkcGetFreq(PAL_SYS_CLKC_ID_T clk_id);
+#endif
 /*****************************************************************************
  * MISC
  *****************************************************************************/
@@ -227,4 +253,26 @@ PAL_Result PAL_sysProbeAndPrep(Uint32 ve
 PAL_Result avalanche_device_prepare(Uint32 module_id, Uint32 base_addr, BOARD_ID board_variant, void *param);
 #endif
 
+#ifdef CONFIG_ARM_AVALANCHE_SOC
+/*****************************************************************************
+ * CACHE
+ *****************************************************************************/
+
+int PAL_sysCacheInvalidate(PAL_OsMemAddrSpace addrSpace,
+                             void *mem_start_ptr,
+                             unsigned int num_bytes);
+
+int PAL_sysCacheFlush(PAL_OsMemAddrSpace addrSpace,
+                        	void *mem_start_ptr,
+                        	unsigned int num_bytes);
+
+int PAL_sysCacheFlushAndInvalidate(PAL_OsMemAddrSpace addrSpace,
+                             void *mem_start_ptr,
+                             unsigned int num_bytes);
+#if defined (CONFIG_MACH_PUMA5)
+#include <asm-arm/arch-avalanche/generic/pal_sysPsc.h>
+#endif
+#include "pal_sysWdtimer.h"
+#include "pal_sysTimer16.h"
+#endif
 #endif
