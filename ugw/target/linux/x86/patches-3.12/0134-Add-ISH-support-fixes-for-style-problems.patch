From 9d42c9eb9fb6235c51fff0e5dc6d26d95087e2ab Mon Sep 17 00:00:00 2001
From: Daniel Drubin <daniel.drubin@intel.com>
Date: Sun, 9 Nov 2014 02:16:20 +0200
Subject: [PATCH] Add ISH support: fixes for style problems

Change-Id: Ia8d1936f266ddd5e9427fc9bbebc5f51817c24e9
Signed-off-by: Daniel Drubin <ddrubin@intel.com>
Issue: IMINAN-8348
Signed-off-by: Fabien Marotte <fabien.marotte@intel.com>
(cherry picked from commit d0c454d206fca4a0fefb0a9893613929969be0c0)
---
 drivers/misc/heci/heci-hid-client.c  |    8 ++++----
 drivers/misc/heci/heci_dev.h         |   10 +++++-----
 drivers/misc/heci/hid-strings-def.h  |    4 ++--
 drivers/misc/heci/hw-ish.c           |   14 +++++++-------
 drivers/misc/heci/init.c             |   25 +++++++++++++++----------
 drivers/misc/heci/pci-ish.c          |   20 ++++++++++----------
 include/linux/hid-sensor-ids.h       |    2 +-
 include/linux/senscol/senscol-core.h |    4 ++--
 8 files changed, 46 insertions(+), 41 deletions(-)

diff --git a/drivers/misc/heci/heci-hid-client.c b/drivers/misc/heci/heci-hid-client.c
index f568ffa..52dccfc 100644
--- a/drivers/misc/heci/heci-hid-client.c
+++ b/drivers/misc/heci/heci-hid-client.c
@@ -553,12 +553,12 @@ static int __init ish_init(void)
 	/* 7/7/2014: in order to not stick Android boot, from here & below needs to run in work queue and here we should return rv */
 	/****************************************************************/
 	workqueue_for_init = create_workqueue("workqueue_for_init");
-        INIT_WORK(&my_work, workqueue_init_function);
-        queue_work(workqueue_for_init, &my_work);
+	INIT_WORK(&my_work, workqueue_init_function);
+	queue_work(workqueue_for_init, &my_work);
 
-        ISH_DBG_PRINT(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
+	ISH_DBG_PRINT(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
         g_ish_print_log(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
-	
+
 	return rv;
 	/****************************************************************/
 
diff --git a/drivers/misc/heci/heci_dev.h b/drivers/misc/heci/heci_dev.h
index a188f6e..09b5847 100644
--- a/drivers/misc/heci/heci_dev.h
+++ b/drivers/misc/heci/heci_dev.h
@@ -129,7 +129,7 @@ struct heci_hw_ops {
 	int  (*hw_start) (struct heci_device *dev);
 	void (*hw_config) (struct heci_device *dev);
 	int (*write)(struct heci_device *dev, struct heci_msg_hdr *hdr, unsigned char *buf);
-	int (*write_ex)(struct heci_device *dev, struct heci_msg_hdr *hdr, void *msg, void(*ipc_send_compl)(void *),void *ipc_send_compl_prm);
+	int (*write_ex)(struct heci_device *dev, struct heci_msg_hdr *hdr, void *msg, void(*ipc_send_compl)(void *), void *ipc_send_compl_prm);
 	int (*read)(struct heci_device *dev, unsigned char *buffer, unsigned long buffer_length);
 };
 
@@ -186,9 +186,9 @@ struct heci_device {
 	/* FIFO for output IPC messages. Includes also HECI/IPC header to be supplied in DRBL (first dword) */
 	unsigned char	wr_msg_fifo[IPC_TX_FIFO_SIZE * IPC_FULL_MSG_SIZE];
 #endif
-	/* 
+	/*
 	 * Control info for IPC messages HECI/IPC sending FIFO - list with inline data buffer
-	 * This structure will be filled with parameters submitted by the caller glue layer 
+	 * This structure will be filled with parameters submitted by the caller glue layer
 	 * 'buf' may be pointing to the external buffer or to 'inline_data'
 	 * 'offset' will be initialized to 0 by submitting
 	 *
@@ -199,7 +199,7 @@ struct heci_device {
 	 *
 	 * (!) We can work on FIFO list or cyclic FIFO in an array
 	 */
-	
+
 	struct wr_msg_ctl_info wr_processing_list_head, wr_free_list_head;
 	spinlock_t	wr_processing_spinlock;		/* For both processing and free lists */
 /*
@@ -230,7 +230,7 @@ struct heci_device {
 
 	const struct heci_hw_ops *ops;
 
-	size_t	mtu;	
+	size_t	mtu;
 	char hw[0] __aligned(sizeof(void *));
 };
 
diff --git a/drivers/misc/heci/hid-strings-def.h b/drivers/misc/heci/hid-strings-def.h
index e1fd92e..0916f99 100644
--- a/drivers/misc/heci/hid-strings-def.h
+++ b/drivers/misc/heci/hid-strings-def.h
@@ -20,7 +20,7 @@
 static const struct sensor_map {
 	unsigned code;
 	char *msg;
-} code_msg_arr[] = { 
+} code_msg_arr[] = {
 	{0x01,	"type_collection"},
 	{0x10,	"category_biometric"},
 	{0x11,	"type_biometric_presence"},
@@ -508,7 +508,7 @@ static const struct sensor_map {
 	{0,	0}
 };
 
-static const char* modifiers[16] = {"none", "chg_sensitivity_abs", "max", "min", "accuracy", "resolution", "thres_high", "thres_low",
+static const char *modifiers[16] = {"none", "chg_sensitivity_abs", "max", "min", "accuracy", "resolution", "thres_high", "thres_low",
 	"calibration_offset", "calibration_multiplier", "report_interval", "freq_max", "period_max", "chg_sensitivity_percent_range",
 	"chg_sensitivity_percent_rel", "custom"};
 
diff --git a/drivers/misc/heci/hw-ish.c b/drivers/misc/heci/hw-ish.c
index e04b8bd..2fb9e4b 100644
--- a/drivers/misc/heci/hw-ish.c
+++ b/drivers/misc/heci/hw-ish.c
@@ -37,7 +37,7 @@ void g_ish_print_log(char *format, ...);
 
 int write_ipc_from_queue(struct heci_device *dev);
 static int	ipc_send_mng_msg(struct heci_device *dev, uint32_t msg_code, void *msg, size_t size);
-static int	ipc_send_heci_msg(struct heci_device *dev, struct heci_msg_hdr *hdr, void *msg, void(*ipc_send_compl)(void *),void *ipc_send_compl_prm);
+static int	ipc_send_heci_msg(struct heci_device *dev, struct heci_msg_hdr *hdr, void *msg, void(*ipc_send_compl)(void *), void *ipc_send_compl_prm);
 static u32 ish_read_hdr(const struct heci_device *dev);
 
 /**
@@ -165,7 +165,7 @@ void ish_intr_disable(struct heci_device *dev)
 }
 
 void heci_hbm_dispatch(struct heci_device *dev, struct heci_bus_message *hdr);
-	
+
 /*
  * BH processing work function (instead of thread handler)
  */
@@ -197,7 +197,7 @@ static void	bh_hbm_work_fn(struct work_struct *work)
  * RETURN VALUE:	negative -  fail (means free links list is empty, or msg too long)
  *			0 -  succeed
  */
-static int write_ipc_to_queue(struct heci_device *dev, void(*ipc_send_compl)(void *),void *ipc_send_compl_prm, unsigned char *msg, int length)
+static int write_ipc_to_queue(struct heci_device *dev, void(*ipc_send_compl)(void *), void *ipc_send_compl_prm, unsigned char *msg, int length)
 {
 	struct wr_msg_ctl_info *ipc_link;
 	unsigned long   flags;
@@ -234,7 +234,7 @@ static int write_ipc_to_queue(struct heci_device *dev, void(*ipc_send_compl)(voi
 int write_ipc_from_queue(struct heci_device *dev)
 {
 	u32	doorbell_val;
-	unsigned long length;	
+	unsigned long length;
 	unsigned long rem;
 	u32	*r_buf;
 	int i;
@@ -354,7 +354,7 @@ static void	fw_reset_work_fn(struct work_struct *unused)
 		heci_dev->hbm_state = HECI_HBM_START;
 		heci_hbm_start_req(heci_dev);
 		ISH_DBG_PRINT(KERN_ALERT "%s(): after heci_hbm_start_req()\n", __func__);
-	
+
 	} else
 		printk(KERN_ERR "[heci-ish]: FW reset failed (%d)\n", rv);
 }
@@ -650,8 +650,8 @@ static int ish_write(struct heci_device *dev, struct heci_msg_hdr *header, unsig
 	u32 doorbell_val;
 
 	doorbell_val = IPC_BUILD_HEADER(header->length + sizeof(struct heci_msg_hdr), IPC_PROTOCOL_HECI, 1);
-	memcpy(ipc_msg, (char*)&doorbell_val, sizeof(u32));
-	memcpy(ipc_msg + sizeof(u32), (char*)header, sizeof(struct heci_msg_hdr));
+	memcpy(ipc_msg, (char *)&doorbell_val, sizeof(u32));
+	memcpy(ipc_msg + sizeof(u32), (char *)header, sizeof(struct heci_msg_hdr));
 	memcpy(ipc_msg + sizeof(u32) + sizeof(struct heci_msg_hdr), buf, header->length);
 
 	return write_ipc_to_queue(dev, NULL, NULL, ipc_msg, sizeof(u32) + sizeof(struct heci_msg_hdr) + header->length);
diff --git a/drivers/misc/heci/init.c b/drivers/misc/heci/init.c
index 7f7999f..bbc8635 100644
--- a/drivers/misc/heci/init.c
+++ b/drivers/misc/heci/init.c
@@ -26,19 +26,24 @@
 
 const char *heci_dev_state_str(int state)
 {
-#define HECI_DEV_STATE(state) case HECI_DEV_##state: return #state
 	switch (state) {
-	HECI_DEV_STATE(INITIALIZING);
-	HECI_DEV_STATE(INIT_CLIENTS);
-	HECI_DEV_STATE(ENABLED);
-	HECI_DEV_STATE(RESETTING);
-	HECI_DEV_STATE(DISABLED);
-	HECI_DEV_STATE(POWER_DOWN);
-	HECI_DEV_STATE(POWER_UP);
+	case HECI_DEV_INITIALIZING:
+		return	"INITIALIZING";
+	case HECI_DEV_INIT_CLIENTS:
+		return	"INIT_CLIENTS";
+	case HECI_DEV_ENABLED:
+		return	"ENABLED";
+	case HECI_DEV_RESETTING:
+		return	"RESETTING";
+	case HECI_DEV_DISABLED:
+		return	"DISABLED";
+	case HECI_DEV_POWER_DOWN:
+		return	"POWER_DOWN";
+	case HECI_DEV_POWER_UP:
+		return	"POWER_UP";
 	default:
 		return "unkown";
 	}
-#undef HECI_DEV_STATE
 }
 EXPORT_SYMBOL(heci_dev_state_str);
 
@@ -111,7 +116,7 @@ int heci_start(struct heci_device *dev)
 	if (dev->recvd_hw_ready)
 		goto	reset_done;
 	dev_err(&dev->pdev->dev, "[heci-ish] %s(): Timed out waiting for FW-initiated reset\n", __func__);
-#if 1 
+#if 1
 	goto	err; /* DEBUGDEBUGDEBUG: raise timeout for FW-initiated reset to 10 s and don't sent host-initiated reset flow */
 #endif
 	/* DEBUGDEBUGDEBUG: Below code until 'reset_done:' is defunct */
diff --git a/drivers/misc/heci/pci-ish.c b/drivers/misc/heci/pci-ish.c
index c795539..e2dc4ae 100644
--- a/drivers/misc/heci/pci-ish.c
+++ b/drivers/misc/heci/pci-ish.c
@@ -123,7 +123,7 @@ static ssize_t ishdbg_read(struct file *file, char __user *ubuf, size_t length,
 
 	if (resp_buf_read)
 		return	0;	/* EOF */
-	copy_len = (length > strlen(dbg_resp_buf))? strlen(dbg_resp_buf) : length;
+	copy_len = (length > strlen(dbg_resp_buf)) ? strlen(dbg_resp_buf) : length;
 	rv = copy_to_user(ubuf, dbg_resp_buf, copy_len);
 	if (rv)
 		return  -EINVAL;
@@ -144,7 +144,7 @@ static ssize_t ishdbg_write(struct file *file, const char __user *ubuf, size_t l
 	rv = copy_from_user(dbg_req_buf, ubuf, length);
 	if (rv)
 		return  -EINVAL;
-        if (sscanf(dbg_req_buf, "%s ", cmd) != 1) {
+	if (sscanf(dbg_req_buf, "%s ", cmd) != 1) {
 		printk(KERN_ERR "[ish-dbg]) sscanf failed\n");
 		return  -EINVAL;
 	}
@@ -163,13 +163,12 @@ static ssize_t ishdbg_write(struct file *file, const char __user *ubuf, size_t l
 		}
 		cur_index = 0;
 		for (i = 0; i < count; i++) {
-			reg_data = (volatile uint32_t *)((char*)hw_dbg->mem_addr + addr + i*4);
+			reg_data = (volatile uint32_t *)((char *)hw_dbg->mem_addr + addr + i*4);
 			cur_index += sprintf(dbg_resp_buf + cur_index, "%08X ", *reg_data);
 		}
 		cur_index += sprintf(dbg_resp_buf + cur_index, "\n");
 		resp_buf_read = 0;
-	}
-	else if (!strcmp(cmd, "e")) {
+	} else if (!strcmp(cmd, "e")) {
 		/* Enter values e <addr> <value> */
 		if (sscanf_match != 2) {
 			printk(KERN_ERR "[ish-dbg] sscanf failed, sscanfMatch = %d\n", sscanf_match);
@@ -179,11 +178,11 @@ static ssize_t ishdbg_write(struct file *file, const char __user *ubuf, size_t l
 			printk(KERN_ERR "[ish-dbg] address isn't aligned to 4 bytes\n");
 			return -EINVAL;
 		}
-		reg_data = (volatile uint32_t *)((char*)hw_dbg->mem_addr + addr);
+		reg_data = (volatile uint32_t *)((char *)hw_dbg->mem_addr + addr);
 		*reg_data = count;
 		sprintf(dbg_resp_buf, "OK\n");
 		resp_buf_read = 0;
-        }
+	}
 
 	return  length;
 }
@@ -311,7 +310,8 @@ static ssize_t ish_read_log(struct heci_device *dev, char *buf, size_t size)
 	i = (i-1) % PRINT_BUFFER_SIZE;
 
 	/* read from tail to last '\n' before i */
-	for (;dev->log_buffer[i] != '\n';i = (i-1) % PRINT_BUFFER_SIZE);
+	for (; dev->log_buffer[i] != '\n'; i = (i-1) % PRINT_BUFFER_SIZE)
+		;
 
 	if (dev->log_tail < i) {
 		memcpy(buf, dev->log_buffer + dev->log_tail, i - dev->log_tail + 1);
@@ -444,7 +444,7 @@ void workqueue_init_function(struct work_struct *work)
 	int err;
 
 	ISH_DBG_PRINT(KERN_ALERT "[pci driver] %s() in workqueue func, continue initialization process\n", __func__);
-	
+
 	pci_set_drvdata(dev->pdev, dev);
 /*	dev_dbg(&dev->pdev->dev, "heci: after pci_set_drvdata\n");*/
 
@@ -563,7 +563,7 @@ static int ish_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	ishdbg_misc_device.parent = &pdev->dev;
 	rv = misc_register(&ishdbg_misc_device);
 	if (rv)
-		dev_err(&pdev->dev, "error starting ISH debugger (misc_register failed): %d\n", rv);	
+		dev_err(&pdev->dev, "error starting ISH debugger (misc_register failed): %d\n", rv);
 	hw_dbg = hw;
 #endif
 
diff --git a/include/linux/hid-sensor-ids.h b/include/linux/hid-sensor-ids.h
index 8676875..5dcf3d0 100644
--- a/include/linux/hid-sensor-ids.h
+++ b/include/linux/hid-sensor-ids.h
@@ -436,7 +436,7 @@
 #define HID_USAGE_SENSOR_EVENT_MIN_REACHED_ENUM                                         0x08
 #define HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_UPWARD_ENUM 0x200009
 #define HID_USAGE_SENSOR_EVENT_HIGH_THESHOLD_CROSS_ABOVE_ENUM   HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_UPWARD_ENUM
-#define HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_DOWNWARD_ENUM 0x200A0x
+#define HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_DOWNWARD_ENUM 0x200A00
 #define HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_BELOW_ENUM  HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_DOWNWARD_ENUM
 #define HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_UPWARD_ENUM                          0x0B
 #define HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_ABOVE_ENUM   HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_UPWARD_ENUM
diff --git a/include/linux/senscol/senscol-core.h b/include/linux/senscol/senscol-core.h
index a123705..11bac8e 100644
--- a/include/linux/senscol/senscol-core.h
+++ b/include/linux/senscol/senscol-core.h
@@ -104,10 +104,10 @@ struct senscol_sample {
  */
 struct senscol_impl {
 	/* Get property value, will return NULL on failure */
-	int	(*get_sens_property)(struct sensor_def *sensor, const struct sens_property* prop, char *value, size_t val_buf_size);
+	int	(*get_sens_property)(struct sensor_def *sensor, const struct sens_property *prop, char *value, size_t val_buf_size);
 
 	/* Set property value */
-	int	(*set_sens_property)(struct sensor_def *sensor, const struct sens_property* prop, const char *value);
+	int	(*set_sens_property)(struct sensor_def *sensor, const struct sens_property *prop, const char *value);
 
 	/* Get sample */
 	int	(*get_sample)(struct sensor_def *sensor, void *sample_buf, size_t sample_buf_size);
-- 
1.7.9.5

