From 168abf65c8ad193ddfe83c361353a82684ea5277 Mon Sep 17 00:00:00 2001
From: Marco A Vital Yep <marco.a.vital.yep@intel.com>
Date: Wed, 9 Dec 2015 15:52:02 -0700
Subject: [PATCH]     Title: Fixed VLAN filter configuration and set rate     
       to 5Gbps by default in GbE driver.     Issue:
 <HSD:244827> <HSD:244719>     IssueType: Bug    
 Description: Changed VLAN filter configuration to calculate
                  the CRC32 on the 16 bits of the VLAN tag. 
                 Set default rate configuration to 5Gbps
 when                  the Atom GMAC is connected to the ARM
 GMAC.     Reviewers: N/A

---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c    |   94 ++++----
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c    |   17 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c   |    6 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c    |  235 +++++++++++---------
 .../net/ethernet/synopsys/DWC_ETH_QOS_yheader.h    |    6 +-
 .../net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h    |   12 +-
 6 files changed, 194 insertions(+), 176 deletions(-)

diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
index cbd654b..1035465 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -663,13 +663,6 @@ static INT config_vlan_filtering(INT filter_enb_dis,
   if (perfect_hash_filtering)
     MAC_VLANTR_VL_UdfWr(0x1);
 
-  /* By default enable MAC to calculate vlan hash on
-   * only 12-bits of received VLAN tag (ie only on
-   * VLAN id and ignore priority and other fields)
-   * */
-  if (perfect_hash_filtering)
-	  MAC_VLANTR_ETV_UdfWr(0x1);
-
   return Y_SUCCESS;
 }
 
@@ -2942,53 +2935,46 @@ static INT enable_dma_interrupts(UINT qInx)
 }
 
 
-/*!
-* \brief This sequence is used to configure the MAC registers for
-* GMII-1000Mbps speed
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-
-static INT set_gmii_speed(void)
-{
-
-	MAC_MCR_PS_UdfWr(0);
-	MAC_MCR_FES_UdfWr(0);
-
-	return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure the MAC registers for
-* MII-10Mpbs speed
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-
-static INT set_mii_speed_10(void)
-{
-
-	MAC_MCR_PS_UdfWr(0x1);
-	MAC_MCR_FES_UdfWr(0);
-
-	return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure the MAC registers for
-* MII-100Mpbs speed
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-
-static INT set_mii_speed_100(void)
+static int set_speed(struct DWC_ETH_QOS_prv_data *pdata, unsigned int speed)
 {
+	UINT mac_ps = 0, mac_fes = 0, reg_val = 0;
+	switch(speed) {
+		case 10:
+			pdata->pcs_speed = SPEED_10;
+			pdata->rate = GCR5_PHY_SPEED_10M;
+			mac_ps = 1;
+		break;
+		case 100:
+			pdata->pcs_speed = SPEED_100;
+			pdata->rate = GCR5_PHY_SPEED_100M;
+			mac_ps = 1;
+			mac_fes = 1;
+		break;
+		case 1000:
+			pdata->pcs_speed = SPEED_1000;
+			pdata->rate = GCR5_PHY_SPEED_1G;
+		break;
+		case 2500:
+			pdata->pcs_speed = SPEED_1000;
+			pdata->rate = GCR5_PHY_SPEED_2_5G;
+		break;
+		case 5000:
+			pdata->pcs_speed = SPEED_1000;
+			pdata->rate = GCR5_PHY_SPEED_5G;
+		break;
+		default:
+			printk(KERN_ALERT "Invalid speed value (%u)!\n", speed);
+			return -Y_FAILURE;
+	}
+	reg_val = GBE_REG_RD(pdata->gbe_base, GBE_GCR5_OFF);
+	SET_VAR32_BITS(reg_val, pdata->rate,
+		GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
 
-	MAC_MCR_PS_UdfWr(0x1);
-	MAC_MCR_FES_UdfWr(0x1);
+	// Configure MAC register
+	MAC_MCR_PS_UdfWr(mac_ps);
+	MAC_MCR_FES_UdfWr(mac_fes);
+	// Configure GBE top register
+	GBE_REG_WR(pdata->gbe_base, GBE_GCR5_OFF, reg_val);
 
 	return Y_SUCCESS;
 }
@@ -4666,9 +4652,7 @@ void DWC_ETH_QOS_init_function_ptrs_dev(struct hw_if_struct *hw_if)
 	hw_if->read_phy_regs = read_phy_regs;
 	hw_if->set_full_duplex = set_full_duplex;
 	hw_if->set_half_duplex = set_half_duplex;
-	hw_if->set_mii_speed_100 = set_mii_speed_100;
-	hw_if->set_mii_speed_10 = set_mii_speed_10;
-	hw_if->set_gmii_speed = set_gmii_speed;
+	hw_if->set_speed = set_speed;
 	/* for PMT */
 	hw_if->start_dma_rx = start_dma_rx;
 	hw_if->stop_dma_rx = stop_dma_rx;
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
index d5b9e0a..aaa18bb 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -570,7 +570,6 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 			MAC_PCS_RgRd(varMAC_PCS);
 			printk(KERN_ALERT "RGMII/SMII interrupt: MAC_PCS = %#lx\n", varMAC_PCS);
 			if ((varMAC_PCS & 0x80000) == 0x80000) {
-				unsigned int reg_val = 0;
 				pdata->pcs_link = 1;
 				netif_carrier_on(dev);
 				if ((varMAC_PCS & 0x10000) == 0x10000) {
@@ -581,21 +580,13 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 					hw_if->set_half_duplex();
 				}
 
-				reg_val = GBE_REG_RD(pdata->gbe_base, GBE_GCR5_OFF);
 				if ((varMAC_PCS & 0x60000) == 0x0) {
-					SET_VAR32_BITS(reg_val, 2, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
-					pdata->pcs_speed = SPEED_10;
-					hw_if->set_mii_speed_10();
+					hw_if->set_speed(pdata, 10);
 				} else if ((varMAC_PCS & 0x60000) == 0x20000) {
-					SET_VAR32_BITS(reg_val, 3, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
-					pdata->pcs_speed = SPEED_100;
-					hw_if->set_mii_speed_100();
+					hw_if->set_speed(pdata, 100);
 				} else if ((varMAC_PCS & 0x60000) == 0x40000) {
-					SET_VAR32_BITS(reg_val, 0, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
-					pdata->pcs_speed = SPEED_1000;
-					hw_if->set_gmii_speed();
+					hw_if->set_speed(pdata, 1000);
 				}
-				GBE_REG_WR(pdata->gbe_base, GBE_GCR5_OFF, reg_val);
 				printk(KERN_ALERT "Link is UP:%dMbps & %s duplex\n",
 					pdata->pcs_speed, pdata->pcs_duplex ? "Full" : "Half");
 			} else {
@@ -1521,7 +1512,7 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 #ifndef DWC_ETH_QOS_CONFIG_PGTEST
 	if (pdata->mux_cfg == GMCR_GMAC5_TO_GMAC4) {
 		hw_if->set_full_duplex();
-		hw_if->set_gmii_speed();
+		hw_if->set_speed(pdata, 5000);
 		netif_tx_start_all_queues(dev);
 	} else if (pdata->phydev) {
 		netif_tx_start_all_queues(dev);
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
index 7ca9e1b..ba7bb8c 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -392,13 +392,13 @@ static void DWC_ETH_QOS_adjust_link(struct net_device *dev)
 			new_state = 1;
 			switch (phydev->speed) {
 			case SPEED_1000:
-				hw_if->set_gmii_speed();
+				hw_if->set_speed(pdata, 1000);
 				break;
 			case SPEED_100:
-				hw_if->set_mii_speed_100();
+				hw_if->set_speed(pdata, 100);
 				break;
 			case SPEED_10:
-				hw_if->set_mii_speed_10();
+				hw_if->set_speed(pdata, 10);
 				break;
 			}
 			pdata->speed = phydev->speed;
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
index 2bad1d4..d197166 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -41,101 +41,135 @@
 static int DWC_ETH_QOS_init_general_gbe(void __iomem **gbe_base,
    unsigned int *mux_cfg)
 {
-   int ret = 1;
-   netss_dev_info_t gbe_mmio;
-   void __iomem *reg_base = NULL, *btcfg = NULL;
-   DBGPR("[GBE] Initializing General registers\n");
-   if (!netss_driver_ready()) {
-      printk(KERN_ALERT "[GBE] NetSS not ready!\n");
-   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio)) {
-      printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
-   } else {
-      unsigned int reg_val, reg_cfg;
-      DBGPR("[GBE] mem_iobase = 0x%08x, mem_iosize = 0x%08x\n",
-         (unsigned int)gbe_mmio.base,(unsigned int)gbe_mmio.size);
-      reg_base = (void __iomem *)ioremap_nocache(gbe_mmio.base, gbe_mmio.size);
-      btcfg = (void __iomem *)ioremap_nocache(BOOT_CONFIG_BASE_ADDR, BOOT_CONFIG_SIZE);
-      reg_val = GBE_REG_RD(btcfg, BCFG2SSX_GBEM_CFG_OFF);
-      iounmap(btcfg);
-      DBGPR("[GBE] bcfg2ssx_gbem_cfg = 0x%08x\n", reg_val);
-      GET_VAR32_BITS(reg_val, reg_cfg, GBEM_SNOOPED_WIDTH, GBEM_SNOOPED_OFF);
-      if (!reg_cfg) {
-         printk(KERN_ALERT "[GBE] Snooped bit not set in BootConfig!\n");
-         iounmap(reg_base);
-      } else {
-         // Disable GMAC5 core
-         reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
-         SET_VAR32_BITS(reg_val, 0, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
-         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
-
-         // Enable GMAC5 endianess converter
-         reg_val = GBE_REG_RD(reg_base, GBE_GVBECR_OFF);
-         SET_VAR32_BITS(reg_val, 1, GMAC5_END_CONV_WIDTH, GMAC5_END_CONV_OFF);
-         GBE_REG_WR(reg_base, GBE_GVBECR_OFF, reg_val);
-
-         // Enable GMAC5 hardware interrupts
-         reg_val = GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF);
-         SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
-         GBE_REG_WR(reg_base, GBE_ATOM_HIE_OFF, reg_val);
-
-         // Enable GMAC5 level interrupts
-         reg_val = GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF);
-         SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
-         GBE_REG_WR(reg_base, GBE_ATOM_ELS_OFF, reg_val);
-
-         // GMAC5 CONFIGURATION STARTS
-         reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
-         // Start soft reset
-         SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
-         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
-         msleep(1);
-         // Stop soft reset bit
-         SET_VAR32_BITS(reg_val, 1, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
-         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
-
-         // Read GBE MUX configuration
-         reg_cfg = GBE_REG_RD(reg_base, GBE_GMCR_OFF);
-         GET_VAR32_BITS(reg_cfg, *mux_cfg, GMCR_GMAC25_WIDTH, GMCR_GMAC25_OFF);
-
-         if (*mux_cfg == GMCR_GMAC5_TO_PHY) {
-            DBGPR("[GBE] GMAC5 to PHY!\n");
-            // Set RGMII PHY config
-            SET_VAR32_BITS(reg_val, 1, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
-         } else if (*mux_cfg == GMCR_GMAC5_TO_GMAC4) {
-            DBGPR("[GBE] GMAC5 to GMAC4!\n");
-            // Set GMII PHY config
-            SET_VAR32_BITS(reg_val, 0, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
-         } else {
-            DBGPR("[GBE] GMAC5 is not connected!\n");
-         }
-         // Default PHY speed is 1G (0), it can be changed here, if required
-         //SET_VAR32_BITS(reg_val, 0, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
-         // Set endianess (LE)
-         SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_ENDIANESS_OFF);
-         // Write configuration
-         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
-
-         // Enable GMAC5 core
-         SET_VAR32_BITS(reg_val, 1, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
-         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
-
-         DBGPR("[GBE] Dump registers:\n");
-         DBGPR("[GBE]    GBE_GCR5       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GCR5_OFF));
-         DBGPR("[GBE]    GBE_GMCR       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GMCR_OFF));
-         DBGPR("[GBE]    GBE_GVBECR     = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GVBECR_OFF));
-         DBGPR("[GBE]    GBE_GSRH       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRH_OFF));
-         DBGPR("[GBE]    GBE_GSRL       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRL_OFF));
-         DBGPR("[GBE]    GBE_ATOM_HIE   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF));
-         DBGPR("[GBE]    GBE_ATOM_SWI   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_SWI_OFF));
-         DBGPR("[GBE]    GBE_ATOM_ELS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF));
-         DBGPR("[GBE]    GBE_ATOM_IMV   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMV_OFF));
-         DBGPR("[GBE]    GBE_ATOM_IRS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IRS_OFF));
-         DBGPR("[GBE]    GBE_ATOM_IMS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMS_OFF));
-         *gbe_base = reg_base;
-         ret = 0;
-      }
-   }
-   return ret;
+	int ret = 1;
+	netss_dev_info_t gbe_mmio;
+	void __iomem *reg_base = NULL, *btcfg = NULL;
+	DBGPR("[GBE] Initializing General registers\n");
+	if (!netss_driver_ready()) {
+		printk(KERN_ALERT "[GBE] NetSS not ready!\n");
+	} else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio)) {
+		printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
+	} else {
+		unsigned int reg_val, reg_cfg;
+		DBGPR("[GBE] mem_iobase = 0x%08x, mem_iosize = 0x%08x\n",
+			(unsigned int)gbe_mmio.base,(unsigned int)gbe_mmio.size);
+		reg_base = (void __iomem *)ioremap_nocache(gbe_mmio.base, gbe_mmio.size);
+		btcfg = (void __iomem *)ioremap_nocache(BOOT_CONFIG_BASE_ADDR, BOOT_CONFIG_SIZE);
+		reg_val = GBE_REG_RD(btcfg, BCFG2SSX_GBEM_CFG_OFF);
+		iounmap(btcfg);
+		DBGPR("[GBE] bcfg2ssx_gbem_cfg = 0x%08x\n", reg_val);
+		GET_VAR32_BITS(reg_val, reg_cfg, GBEM_SNOOPED_WIDTH, GBEM_SNOOPED_OFF);
+		if (!reg_cfg) {
+			printk(KERN_ALERT "[GBE] Snooped bit not set in BootConfig!\n");
+			iounmap(reg_base);
+		} else {
+			// Disable GMAC5 core
+			reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
+			SET_VAR32_BITS(reg_val, 0, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
+			GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+			// Enable GMAC5 endianess converter
+			reg_val = GBE_REG_RD(reg_base, GBE_GVBECR_OFF);
+			SET_VAR32_BITS(reg_val, 1, GMAC5_END_CONV_WIDTH, GMAC5_END_CONV_OFF);
+			GBE_REG_WR(reg_base, GBE_GVBECR_OFF, reg_val);
+
+			// Enable GMAC5 hardware interrupts
+			reg_val = GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF);
+			SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
+			GBE_REG_WR(reg_base, GBE_ATOM_HIE_OFF, reg_val);
+
+			// Enable GMAC5 level interrupts
+			reg_val = GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF);
+			SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
+			GBE_REG_WR(reg_base, GBE_ATOM_ELS_OFF, reg_val);
+
+			// GMAC5 CONFIGURATION STARTS
+			reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
+			// Start soft reset
+			SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
+			GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+			msleep(1);
+			// Stop soft reset bit
+			SET_VAR32_BITS(reg_val, 1, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
+			GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+			// Read GBE MUX configuration
+			reg_cfg = GBE_REG_RD(reg_base, GBE_GMCR_OFF);
+			GET_VAR32_BITS(reg_cfg, *mux_cfg, GMCR_GMAC25_WIDTH, GMCR_GMAC25_OFF);
+
+			if (*mux_cfg == GMCR_GMAC5_TO_PHY) {
+				DBGPR("[GBE] GMAC5 to PHY!\n");
+				// Set RGMII PHY config
+				SET_VAR32_BITS(reg_val, 1, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
+				// Set PHY speed to 1G
+				SET_VAR32_BITS(reg_val, GCR5_PHY_SPEED_1G,
+					GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
+			} else if (*mux_cfg == GMCR_GMAC5_TO_GMAC4) {
+				DBGPR("[GBE] GMAC5 to GMAC4!\n");
+				// Set GMII PHY config
+				SET_VAR32_BITS(reg_val, 0, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
+				// Set PHY speed to 5G
+				SET_VAR32_BITS(reg_val, GCR5_PHY_SPEED_5G,
+					GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
+			} else {
+				DBGPR("[GBE] GMAC5 is not connected!\n");
+			}
+			// Set endianess (LE)
+			SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_ENDIANESS_OFF);
+			// Write configuration
+			GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+			// Enable GMAC5 core
+			SET_VAR32_BITS(reg_val, 1, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
+			GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+			DBGPR("[GBE] Dump registers:\n");
+			DBGPR("[GBE]    GBE_GCR5       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GCR5_OFF));
+			DBGPR("[GBE]    GBE_GMCR       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GMCR_OFF));
+			DBGPR("[GBE]    GBE_GVBECR     = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GVBECR_OFF));
+			DBGPR("[GBE]    GBE_GSRH       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRH_OFF));
+			DBGPR("[GBE]    GBE_GSRL       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRL_OFF));
+			DBGPR("[GBE]    GBE_ATOM_HIE   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF));
+			DBGPR("[GBE]    GBE_ATOM_SWI   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_SWI_OFF));
+			DBGPR("[GBE]    GBE_ATOM_ELS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF));
+			DBGPR("[GBE]    GBE_ATOM_IMV   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMV_OFF));
+			DBGPR("[GBE]    GBE_ATOM_IRS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IRS_OFF));
+			DBGPR("[GBE]    GBE_ATOM_IMS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMS_OFF));
+			*gbe_base = reg_base;
+			ret = 0;
+		}
+	}
+	return ret;
+}
+
+static ssize_t DWC_ETH_QOS_gbe_speed_show(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = NULL;
+	pdata = container_of(attr, struct DWC_ETH_QOS_prv_data, dev_attr);
+	return sprintf(buf, "%d\n", pdata->rate);
+}
+
+static ssize_t DWC_ETH_QOS_gbe_speed_store(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int value = simple_strtoul(buf, NULL, 0);
+	struct DWC_ETH_QOS_prv_data *pdata = NULL;
+	pdata = container_of(attr, struct DWC_ETH_QOS_prv_data, dev_attr);
+	pdata->hw_if.set_speed(pdata, value);
+	return count;
+}
+
+static void DWC_ETH_QOS_create_gbe_sysfs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct device_attribute *dev_attr = &pdata->dev_attr;
+	dev_attr->show = DWC_ETH_QOS_gbe_speed_show;
+	dev_attr->store = DWC_ETH_QOS_gbe_speed_store;
+	dev_attr->attr.mode = 0644;
+	dev_attr->attr.name = "rate";
+	if (device_create_file(&pdata->dev->dev, dev_attr)) {
+		printk(KERN_ALERT "[GBE] Error creating sysfs attribute!\n");
+	}
 }
 
 static UCHAR dev_addr[6] = {0, 0x55, 0x7b, 0xb5, 0x7d, 0xf7};
@@ -228,8 +262,8 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 	tx_q_count = get_tx_queue_count();
 	rx_q_count = get_rx_queue_count();
 
-	dev = alloc_etherdev_mqs(sizeof(struct DWC_ETH_QOS_prv_data),
-				tx_q_count, rx_q_count);
+	dev = alloc_netdev_mqs(sizeof(struct DWC_ETH_QOS_prv_data), "gmac5",
+				ether_setup, tx_q_count, rx_q_count);
 	if (dev == NULL) {
 		printk(KERN_ALERT "%s:Unable to alloc new net device\n",
 		    DEV_NAME);
@@ -252,11 +286,9 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 
 	pci_set_drvdata(pdev, dev);
 	pdata->pdev = pdev;
-
 	pdata->dev = dev;
 	pdata->tx_queue_cnt = tx_q_count;
 	pdata->rx_queue_cnt = rx_q_count;
-
 	pdata->gbe_base = gbe_base;
 	pdata->mux_cfg = gbe_mux_cfg;
 
@@ -376,14 +408,15 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 		    DEV_NAME);
 		goto err_out_netdev_failed;
 	}
-
-	DBGPR("<-- DWC_ETH_QOS_probe\n");
+	DWC_ETH_QOS_create_gbe_sysfs(pdata);
 
 	if (pdata->hw_feat.pcs_sel) {
 		netif_carrier_off(dev);
 		printk(KERN_ALERT "carrier off till LINK is up\n");
 	}
 
+	DBGPR("<-- DWC_ETH_QOS_probe\n");
+
 	return 0;
 
  err_out_netdev_failed:
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
index 0f79e0a..e302af5 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -626,9 +626,7 @@ struct hw_if_struct {
 	INT(*write_phy_regs) (INT, INT, INT);
 	INT(*set_full_duplex) (VOID);
 	INT(*set_half_duplex) (VOID);
-	INT(*set_mii_speed_100) (VOID);
-	INT(*set_mii_speed_10) (VOID);
-	INT(*set_gmii_speed) (VOID);
+	INT(*set_speed) (struct DWC_ETH_QOS_prv_data *, UINT speed);
 	/* for PMT */
 	INT(*start_dma_rx) (UINT);
 	INT(*stop_dma_rx) (UINT);
@@ -1352,6 +1350,8 @@ struct DWC_ETH_QOS_prv_data {
 
 	void __iomem *gbe_base;
 	e_GBE_mux_config mux_cfg;
+	unsigned int rate;
+	struct device_attribute dev_attr;
 #ifdef GBE_POLLING
 	struct hrtimer gbe_timer;
 #endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
index 26ac9f2..e5a081c 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
@@ -37909,7 +37909,8 @@
 #define GBE_ATOM_IRS_OFF   (GBE_GEN_ATOM_IC_OFF + 0x10) // Interrupt Status Register
 #define GBE_ATOM_IMS_OFF   (GBE_GEN_ATOM_IC_OFF + 0x14) // Interrupt Masked Status Register
 
-/* GMAC5 Configuration Register offsets */
+
+/* GMAC5 Configuration Register */
 #define GCR5_ENABLE_OFF       ( 31 )   // 1 - Enabled; 0 - Disabled
 #define GCR5_PHY_CFG_OFF      ( 29 )   // 00 - GMII; 01 - RGMII; 10 - SGMII
 #define GCR5_ENDIANESS_OFF    ( 28 )   // 0 - LE; 1 - BE
@@ -37923,18 +37924,27 @@
 #define GCR5_PHY_SPEED_WIDTH  ( 3 )
 #define GCR5_RESET_WIDTH      ( 1 )
 
+#define GCR5_PHY_SPEED_10M    ( 2 )
+#define GCR5_PHY_SPEED_100M   ( 3 )
+#define GCR5_PHY_SPEED_1G     ( 0 )
+#define GCR5_PHY_SPEED_2_5G   ( 1 )
+#define GCR5_PHY_SPEED_5G     ( 4 )
+
+/* GBE VBUS Endian Convert Register */
 #define GMAC5_END_CONV_OFF    ( 18 )
 #define GMAC5_INTC_OFF        ( 7 )
 
 #define GMAC5_END_CONV_WIDTH  ( 1 )
 #define GMAC5_INTC_WIDTH      ( 1 )
 
+/* GBE Mux Config Register */
 #define GMCR_GMAC25_OFF       ( 30 )
 #define GMCR_GMAC25_WIDTH     ( 2 )
 
 #define GMCR_GMAC5_TO_GMAC4   ( 0x0 )
 #define GMCR_GMAC5_TO_PHY     ( 0x2 )
 
+/* Boot Config Register */
 #define BCFG2SSX_GBEM_CFG_OFF ( 0x34 )
 
 #define GBEM_SNOOPED_OFF      ( 15 )
-- 
1.7.9.5

