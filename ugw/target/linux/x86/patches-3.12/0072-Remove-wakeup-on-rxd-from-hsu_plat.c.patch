From eb54474801850eb4ec005734ea9ef0fc58265a0c Mon Sep 17 00:00:00 2001
From: "Brett T. Warden" <brett.t.warden@intel.com>
Date: Thu, 16 Apr 2015 15:43:39 -0700
Subject: [PATCH] Remove wakeup-on-rxd from hsu_plat.c

Wakeup-on-rxd implementation in HSU driver relies heavily on GPIO
changes, and we don't need it right now.

Removing the following functions:
wakeup_irq()
cht_hw_set_rts()
cht_hsu_hw_suspend()
cht_hsu_hw_resume()

Removing the following fields from the port config:
.hw_set_rts
.hw_suspend
.hw_resume

Signed-off-by: Brett T. Warden <brett.t.warden@intel.com>
---
 drivers/tty/serial/hsu/hsu_plat.c |  128 -------------------------------------
 1 file changed, 128 deletions(-)

diff --git a/drivers/tty/serial/hsu/hsu_plat.c b/drivers/tty/serial/hsu/hsu_plat.c
index c3de178..0e3d175 100644
--- a/drivers/tty/serial/hsu/hsu_plat.c
+++ b/drivers/tty/serial/hsu/hsu_plat.c
@@ -31,131 +31,6 @@ enum {
 	hsu_chv,
 };
 
-static irqreturn_t wakeup_irq(int irq, void *data)
-{
-	struct uart_hsu_port *up = data;
-	struct hsu_port_cfg *cfg = up->port_cfg;
-	struct hsu_port_pin_cfg *pin_cfg = &cfg->pin_cfg;
-
-	set_bit(flag_active, &up->flags);
-	if (cfg->hw_set_rts && pin_cfg->wake_src == rxd_wake)
-		cfg->hw_set_rts(up, 1);
-	pm_runtime_get(up->dev);
-	pm_runtime_put(up->dev);
-
-	return IRQ_HANDLED;
-}
-
-int cht_hw_set_rts(struct uart_hsu_port *up, int value)
-{
-	struct hsu_port_pin_cfg *pin_cfg = &up->port_cfg->pin_cfg;
-	struct gpio_desc *gpio;
-
-	if (!pin_cfg || pin_cfg->wake_src == no_wake)
-		return 0;
-
-	if (value) {
-		if (!pin_cfg->rts_gpio) {
-			gpio = devm_gpiod_get_index(up->dev, "hsu_rts",
-					hsu_rts_idx);
-			if (!IS_ERR(gpio))
-				pin_cfg->rts_gpio = desc_to_gpio(gpio);
-		}
-
-		if (pin_cfg->rts_gpio) {
-			gpio_direction_output(pin_cfg->rts_gpio, 1);
-			if (!in_interrupt())
-				usleep_range(up->byte_delay,
-						up->byte_delay + 1);
-		}
-	} else
-		if (pin_cfg->rts_gpio) {
-			gpio_free(pin_cfg->rts_gpio);
-			pin_cfg->rts_gpio = 0;
-		}
-
-	return 0;
-}
-
-int cht_hsu_hw_suspend(struct uart_hsu_port *up)
-{
-	struct hsu_port_pin_cfg *pin_cfg = &up->port_cfg->pin_cfg;
-	struct gpio_desc *gpio;
-	int ret;
-
-	if (!pin_cfg || pin_cfg->wake_src == no_wake)
-		return 0;
-
-	switch (pin_cfg->wake_src) {
-	case rxd_wake:
-		if (!pin_cfg->rx_gpio) {
-			gpio = devm_gpiod_get_index(up->dev, "hsu_rxd",
-					hsu_rxd_idx);
-			if (!IS_ERR(gpio))
-				pin_cfg->rx_gpio = desc_to_gpio(gpio);
-		}
-		pin_cfg->wake_gpio = pin_cfg->rx_gpio;
-		break;
-	case cts_wake:
-		if (!pin_cfg->cts_gpio) {
-			gpio = devm_gpiod_get_index(up->dev, "hsu_cts",
-					hsu_cts_idx);
-			if (!IS_ERR(gpio))
-				pin_cfg->cts_gpio = desc_to_gpio(gpio);
-		}
-		pin_cfg->wake_gpio = pin_cfg->cts_gpio;
-		break;
-	default:
-		pin_cfg->wake_gpio = -1;
-		break;
-	}
-	dev_dbg(up->dev, "wake_gpio=%d\n", pin_cfg->wake_gpio);
-
-	if (pin_cfg->wake_gpio != -1) {
-		gpio_direction_input(pin_cfg->wake_gpio);
-		ret = request_irq(gpio_to_irq(pin_cfg->wake_gpio), wakeup_irq,
-				IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING,
-				"hsu_wake_irq", up);
-		if (ret)
-			dev_err(up->dev, "failed to register 'hsu_wake_irq'\n");
-
-		if (pin_cfg->rts_gpio && pin_cfg->wake_src == rxd_wake)
-			gpio_direction_output(pin_cfg->rts_gpio, 0);
-	}
-
-	return 0;
-}
-
-int cht_hsu_hw_resume(struct uart_hsu_port *up)
-{
-	struct hsu_port_pin_cfg *pin_cfg = &up->port_cfg->pin_cfg;
-
-	if (!pin_cfg || pin_cfg->wake_src == no_wake)
-		return 0;
-
-	if (pin_cfg->wake_gpio != -1) {
-		free_irq(gpio_to_irq(pin_cfg->wake_gpio), up);
-		pin_cfg->wake_gpio = -1;
-	}
-
-	switch (pin_cfg->wake_src) {
-	case rxd_wake:
-		if (pin_cfg->rx_gpio) {
-			gpio_free(pin_cfg->rx_gpio);
-			pin_cfg->rx_gpio = 0;
-		}
-		break;
-	case cts_wake:
-		if (pin_cfg->cts_gpio) {
-			gpio_free(pin_cfg->cts_gpio);
-			pin_cfg->cts_gpio = 0;
-		}
-		break;
-	}
-
-	return 0;
-}
-
 void cht_hsu_reset(void __iomem *addr)
 {
 	writel(0, addr + CHT_HSU_RESET);
@@ -224,9 +99,6 @@ static struct hsu_port_cfg hsu_port_cfgs[] = {
 		.pin_cfg = {
 			.wake_src = no_wake,
 		},
-		.hw_set_rts = cht_hw_set_rts,
-		.hw_suspend = cht_hsu_hw_suspend,
-		.hw_resume = cht_hsu_hw_resume,
 		.hw_reset = cht_hsu_reset,
 		.get_uartclk = cht_hsu_get_uartclk,
 		.set_clk = cht_hsu_set_clk,
-- 
1.7.9.5

