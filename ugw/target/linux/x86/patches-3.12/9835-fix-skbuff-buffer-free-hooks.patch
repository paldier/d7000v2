# HG changeset patch
# Parent b32160a0f552c7df8025525103e5edfcd8de20ea
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2986,8 +2986,9 @@ static inline unsigned int skb_gso_netwo
 
 #if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
 struct skb_buf_manager_cb {
-    bool (*is_bm_skb)(struct sk_buff *skb);
-    int  (*bm_free_skb)(struct sk_buff *skb);
+	bool (*is_bm_skb)(struct sk_buff *skb);
+	int  (*bm_free_skb)(struct sk_buff *skb);
+	void (*bm_clear_skb)(struct sk_buff *skb);
 };
 
 int skb_register_buf_manager(struct skb_buf_manager_cb *cb);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -638,15 +638,15 @@ static void skb_clone_fraglist(struct sk
 static void skb_free_head(struct sk_buff *skb)
 {
 #if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
-    if (bm_cb.is_bm_skb && bm_cb.is_bm_skb(skb)) {
-            bm_cb.bm_free_skb(skb);
-            return;
-    }
+	if (bm_cb.is_bm_skb && bm_cb.is_bm_skb(skb)) {
+		bm_cb.bm_free_skb(skb);
+		return;
+	}
 #endif
-    if (skb->head_frag)
-        put_page(virt_to_head_page(skb->head));
-    else
-        kfree(skb->head);
+	if (skb->head_frag)
+		put_page(virt_to_head_page(skb->head));
+	else
+		kfree(skb->head);
 }
 
 static void skb_release_data(struct sk_buff *skb)
@@ -1346,6 +1346,11 @@ int pskb_expand_head(struct sk_buff *skb
 	skb->hdr_len  = 0;
 	skb->nohdr    = 0;
 	atomic_set(&skb_shinfo(skb)->dataref, 1);
+
+#if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
+	if (bm_cb.is_bm_skb && bm_cb.is_bm_skb(skb))
+		bm_cb.bm_clear_skb(skb);
+#endif
 	return 0;
 
 nofrags:
@@ -3850,21 +3855,21 @@ EXPORT_SYMBOL_GPL(skb_gso_transport_segl
 #if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
 int skb_register_buf_manager(struct skb_buf_manager_cb *cb)
 {
-    if (bm_cb.is_bm_skb) {
-        pr_err("buffer manager already registered\n");
-        return 1;
-        }
-
-    pr_info("skb buffer manager registered\n");
-    memcpy(&bm_cb, cb, sizeof(bm_cb));
-    return 0;
+	if (bm_cb.is_bm_skb) {
+		pr_err("buffer manager already registered\n");
+		return 1;
+	}
+
+	pr_info("skb buffer manager registered\n");
+	memcpy(&bm_cb, cb, sizeof(bm_cb));
+	return 0;
 }
 EXPORT_SYMBOL_GPL(skb_register_buf_manager);
 
 int skb_unregister_buf_manager(void)
 {
-    pr_info("skb buffer manager unregistered\n");
-    memset(&bm_cb, 0, sizeof(bm_cb));
+	pr_info("skb buffer manager unregistered\n");
+	memset(&bm_cb, 0, sizeof(bm_cb));
 }
 EXPORT_SYMBOL_GPL(skb_unregister_buf_manager);
 
