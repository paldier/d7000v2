From 25f2b5f751245c01470f1790e366412bc3522c8d Mon Sep 17 00:00:00 2001
From: "Wu, Hao" <hao.wu@intel.com>
Date: Tue, 30 Dec 2014 19:51:12 +0800
Subject: [PATCH] dwc3: HACK: trigger runtime resume in complete function

During the process from S3 -> S0 resume (dwc3 is in runtime
suspended state),  if VBUS event comes before resume early
function, then it will invoke runtime get when runtime pm is
still disabled for S3, and runtime enable function invoked
in device resume early function only change the flags, will
not trigger anything else, so there is no chance to get runtime
state back to active even usage count is not zero.
The problem here is after attached to PC host, dwc3 pci device
still in D3 state as no active kid, device mode is not working.
One workaround method is to trigger it manually in complete
function, but it should only be a HACK.

Change-Id: I3aa4c076e3fdeaef7ace7486ceb169bf5b28fe90
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-14920
Signed-off-by: Wu, Hao <hao.wu@intel.com>
(cherry picked from commit 79b079a3f40e2e33642aa6e092e2927ed3bfa53d)

Signed-off-by: Brett T. Warden <brett.t.warden@intel.com>
---
 drivers/usb/dwc3/core.c |    9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index d9c8c31..33957b1 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -1040,9 +1040,18 @@ static int dwc3_resume(struct device *dev)
 	return dwc3_resume_common(dev);
 }
 
+static void dwc3_complete(struct device *dev)
+{
+	/* HACK: in S3->S0 resume process, trigger runtime resume to avoid
+	 * missing events during the time that runtime pm is disabled */
+	pm_runtime_get(dev);
+	pm_runtime_put(dev);
+}
+
 static const struct dev_pm_ops dwc3_dev_pm_ops = {
 	SET_SYSTEM_SLEEP_PM_OPS(dwc3_suspend, dwc3_resume)
 	SET_RUNTIME_PM_OPS(dwc3_runtime_suspend, dwc3_runtime_resume, NULL)
+	.complete = dwc3_complete,
 };
 
 #define DWC3_PM_OPS	&(dwc3_dev_pm_ops)
-- 
1.7.9.5

