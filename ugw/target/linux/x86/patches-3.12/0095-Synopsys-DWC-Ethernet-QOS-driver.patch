From dddb59c702840d24690a38b8e602686643594a2a Mon Sep 17 00:00:00 2001
From: Marco A Vital Yep <marco.a.vital.yep@intel.com>
Date: Tue, 26 May 2015 15:46:36 -0700
Subject: [PATCH] Synopsys DWC Ethernet QOS driver

---
 drivers/net/ethernet/Kconfig                       |    1 +
 drivers/net/ethernet/Makefile                      |    1 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c    | 3769 ++
 .../synopsys/DWC_ETH_QOS_debug_operation.c         |28746 +++++++++++++
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c   | 1351 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.h   |   87 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c    | 4796 +++
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c    | 6493 +++
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.h    |  138 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_eee.c    |  461 +
 .../net/ethernet/synopsys/DWC_ETH_QOS_ethtool.c    |  953 +
 .../net/ethernet/synopsys/DWC_ETH_QOS_ethtool.h    |   62 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c   |  625 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c    |  629 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.h    |   52 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c | 1471 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h |   67 +
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_ptp.c    |  327 +
 .../net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h    |  506 +
 .../net/ethernet/synopsys/DWC_ETH_QOS_yheader.h    | 1407 +
 .../net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h    |44108 ++++++++++++++++++++
 drivers/net/ethernet/synopsys/Kconfig              |   30 +
 drivers/net/ethernet/synopsys/Makefile             |   46 +
 23 files changed, 96126 insertions(+)
 mode change 100644 => 100755 drivers/net/ethernet/Kconfig
 mode change 100644 => 100755 drivers/net/ethernet/Makefile
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_debug_operation.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_eee.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_ptp.c
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
 create mode 100755 drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
 create mode 100755 drivers/net/ethernet/synopsys/Kconfig
 create mode 100755 drivers/net/ethernet/synopsys/Makefile

diff --git a/drivers/net/ethernet/Kconfig b/drivers/net/ethernet/Kconfig
old mode 100644
new mode 100755
index 506b024..64e8189
--- a/drivers/net/ethernet/Kconfig
+++ b/drivers/net/ethernet/Kconfig
@@ -157,6 +157,7 @@ source "drivers/net/ethernet/sgi/Kconfig"
 source "drivers/net/ethernet/smsc/Kconfig"
 source "drivers/net/ethernet/stmicro/Kconfig"
 source "drivers/net/ethernet/sun/Kconfig"
+source "drivers/net/ethernet/synopsys/Kconfig"
 source "drivers/net/ethernet/tehuti/Kconfig"
 source "drivers/net/ethernet/ti/Kconfig"
 source "drivers/net/ethernet/tile/Kconfig"
diff --git a/drivers/net/ethernet/Makefile b/drivers/net/ethernet/Makefile
old mode 100644
new mode 100755
index c0b8789..72d6823
--- a/drivers/net/ethernet/Makefile
+++ b/drivers/net/ethernet/Makefile
@@ -68,6 +68,7 @@ obj-$(CONFIG_NET_VENDOR_SGI) += sgi/
 obj-$(CONFIG_NET_VENDOR_SMSC) += smsc/
 obj-$(CONFIG_NET_VENDOR_STMICRO) += stmicro/
 obj-$(CONFIG_NET_VENDOR_SUN) += sun/
+obj-$(CONFIG_DWC_QOS) += synopsys/
 obj-$(CONFIG_NET_VENDOR_TEHUTI) += tehuti/
 obj-$(CONFIG_NET_VENDOR_TI) += ti/
 obj-$(CONFIG_TILE_NET) += tile/
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
new file mode 100755
index 0000000..9ea340f
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
@@ -0,0 +1,3769 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <time.h>
+/* for socket programming */
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <linux/if.h>		/* for struct ifreq */
+#include <linux/sockios.h>	/* for IOCTL no */
+#include <linux/ethtool.h>
+
+
+#include "DWC_ETH_QOS_yapphdr.h"
+
+static unsigned int tx_queue_count = 1;
+static unsigned int rx_queue_count = 1;
+static unsigned int connected_speed = SPEED_100;
+
+static char *exe_name;
+static char *if_name;
+static int print_all;
+
+static int open_socket(char *ifname)
+{
+	int sockfd;
+
+	sockfd = socket(PF_INET, SOCK_STREAM, 0);
+	return sockfd;
+}
+
+static void close_socket(int sockfd)
+{
+	close(sockfd);
+}
+
+unsigned int wakeup_filter_config[] = {
+	/* for filter 0 CRC is computed on 0 - 7 bytes from offset */
+	0x000000ff,
+
+	/* for filter 1 CRC is computed on 0 - 7 bytes from offset */
+	0x000000ff,
+
+	/* for filter 2 CRC is computed on 0 - 7 bytes from offset */
+	0x000000ff,
+
+	/* for filter 3 CRC is computed on 0 - 31 bytes from offset */
+	0x000000ff,
+
+	/* filter 0, 1 independently enabled and would apply for
+	 * unicast packet only filter 3, 2 combined as,
+	 * "Filter-3 pattern AND NOT Filter-2 pattern" */
+	0x03050101,
+
+	/* filter 3, 2, 1 and 0 offset is 50, 58, 66, 74 bytes
+	 * from start */
+	0x4a423a32,
+
+	/* pattern for filter 1 and 0, "0x55", "11", repeated 8 times */
+	0xe7b77eed,
+
+	/* pattern for filter 3 and 4, "0x44", "33", repeated 8 times */
+	0x9b8a5506,
+};
+
+int populate_filter_frames(struct ifr_data_struct *data)
+{
+	int i;
+
+	for (i = 0; i < DWC_ETH_QOS_RWK_FILTER_LENGTH; i++)
+		data->rwk_filter_values[i] = wakeup_filter_config[i];
+
+	data->rwk_filter_length = DWC_ETH_QOS_RWK_FILTER_LENGTH;
+
+	return 0;
+}
+
+static int DWC_ETH_QOS_get_rx_qcnt(int sockfd, char *ifname)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_GET_RX_QCNT;
+	data.qInx = 0;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Rx queue count is %d\n", data.qInx);
+
+	return data.qInx;
+}
+
+static int DWC_ETH_QOS_get_tx_qcnt(int sockfd, char *ifname)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_GET_TX_QCNT;
+	data.qInx = 0;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Tx queue count is %d\n", data.qInx);
+
+	return data.qInx;
+}
+
+static int DWC_ETH_QOS_get_connected_speed(int sockfd, char *ifname)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_GET_CONNECTED_SPEED;
+	data.qInx = 0;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Connected speed is %dMBps\n", data.connected_speed);
+
+	return data.connected_speed;
+}
+
+static unsigned int DWC_ETH_QOS_get_dcb_queue_weights(unsigned int dcb_algorithm,
+		unsigned int percent_weight, unsigned int max_frame_size)
+{
+	unsigned int weight = 0;
+
+	switch (dcb_algorithm) {
+	case eDWC_ETH_QOS_DCB_WRR:
+		weight = percent_weight;
+		break;
+
+	case eDWC_ETH_QOS_DCB_DWRR:
+		weight = (percent_weight * max_frame_size);
+		break;
+
+	case eDWC_ETH_QOS_DCB_WFQ:
+		weight = (DWC_ETH_QOS_MAX_WFQ_WEIGHT/(percent_weight+1));
+		break;
+
+	case eDWC_ETH_QOS_DCB_SP:
+		/* queue weights are ignored with this algorithm */
+		break;
+	}
+
+	return weight;
+}
+
+static unsigned int get_idle_slope(unsigned char bw)
+{
+	unsigned int multiplier = 1;
+	unsigned int idle_slope = 0;
+
+	if (connected_speed == SPEED_1000)
+		multiplier = 2;
+
+	/*
+	 * idleslope = ((bandwidth/100) * (4 [for MII] or 8 [for GMII])) * 1024
+	 * 1024 is multiplied for normalizing the calculated value
+	 */
+	idle_slope = (((4 * multiplier * bw) * 1024)/100);
+
+	return idle_slope;
+}
+
+static unsigned int get_send_slope(unsigned char bw)
+{
+	unsigned int multiplier = 1;
+	unsigned int send_slope = 0;
+
+	if (connected_speed == SPEED_1000)
+		multiplier = 2;
+
+	/*
+	 * sendslope = (((100 - bandwidth)/100) * (4 [for MII] or 8 [for GMII])) * 1024
+	 * 1024 is multiplied for normalizing the calculated value
+	 * OR
+	 * sendslope = (1024 * (4 [for MII] or 8 [for GMII]) - idle_slope)
+	 */
+	send_slope = (((4 * multiplier * (100 - bw)) * 1024)/100);
+
+	return send_slope;
+}
+
+static unsigned int get_hi_credit(unsigned char bw)
+{
+	unsigned int hi_credit = 0;
+
+	hi_credit = (((DWC_ETH_QOS_MAX_INT_FRAME_SIZE * bw)/100) * 1024);
+
+	return hi_credit;
+}
+
+static unsigned int get_low_credit(unsigned char bw)
+{
+	unsigned int low_credit = 0;
+
+	low_credit = (((DWC_ETH_QOS_MAX_INT_FRAME_SIZE * (100 - bw))/100) * 1024);
+
+	return low_credit;
+}
+
+static int powerup_device(int sockfd, char *ifname, char *parameter)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	if (strcmp("magic", parameter) == 0)
+		data.cmd = DWC_ETH_QOS_POWERUP_MAGIC_CMD;
+	else if (strcmp("remote_wakeup", parameter) == 0)
+		data.cmd = DWC_ETH_QOS_POWERUP_REMOTE_WAKEUP_CMD;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+	data.qInx = 0; /* Not used */
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for %s\n",
+			    parameter);
+			break;
+		case DWC_ETH_QOS_CONFIG_FAIL:
+			printf("Powerup already done\n");
+			break;
+		}
+	} else
+		printf("Got the device out of power down mode for '%s'\n",
+		       parameter);
+
+	return ret;
+}
+
+static int powerdown_device(int sockfd, char *ifname, char *parameter)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+	char *str = NULL;
+
+	if (strcmp("magic", parameter) == 0) {
+		str = "magic";
+		data.cmd = DWC_ETH_QOS_POWERDOWN_MAGIC_CMD;
+	} else if (strcmp("remote_wakeup", parameter) == 0) {
+		str = "remote wakeup";
+		data.cmd = DWC_ETH_QOS_POWERDOWN_REMOTE_WAKEUP_CMD;
+		populate_filter_frames(&data);
+	}
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+	data.qInx = 0; /* Not used */
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for %s\n", str);
+			break;
+		case DWC_ETH_QOS_CONFIG_FAIL:
+			printf("Powerdown already done\n");
+			break;
+		}
+	} else {
+		printf("Put the device in power down mode\n");
+		printf("Device will now power up on manual 'powerup' with"\
+		    " '%s' or on receiving a %s packet\n",
+		     parameter, str);
+	}
+
+	return ret;
+}
+
+static int config_rx_threshold(int sockfd, char *ifname, char *argv1,
+				char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_RX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case 32:
+		data.flags = DWC_ETH_QOS_RX_THRESHOLD_32;
+		break;
+	case 64:
+		data.flags = DWC_ETH_QOS_RX_THRESHOLD_64;
+		break;
+	case 96:
+		data.flags = DWC_ETH_QOS_RX_THRESHOLD_96;
+		break;
+	case 128:
+		data.flags = DWC_ETH_QOS_RX_THRESHOLD_128;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_RX_THRESHOLD_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured RX threshold to %d bytes\n",
+		       option);
+
+	return ret;
+}
+
+static int config_tx_threshold(int sockfd, char *ifname, char *argv1,
+				char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_TX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case 32:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_32;
+		break;
+	case 64:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_64;
+		break;
+	case 96:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_96;
+		break;
+	case 128:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_128;
+		break;
+	case 192:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_192;
+		break;
+	case 256:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_256;
+		break;
+	case 384:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_384;
+		break;
+	case 512:
+		data.flags = DWC_ETH_QOS_TX_THRESHOLD_512;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_TX_THRESHOLD_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured TX threshold to %d bytes\n",
+		       option);
+
+	return ret;
+}
+
+static int config_rsf(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_RX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_RSF_DISABLE;
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_RSF_ENABLE;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_RSF_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully %s Receive Store and Forward Mode\n",
+		       (option ? "ENABLED" : "DISABLED"));
+
+	return ret;
+}
+
+static int config_tsf(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_TX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_TSF_DISABLE;
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_TSF_ENABLE;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_TSF_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully %s Transmit Store and Forward Mode\n",
+		       (option ? "ENABLED" : "DISABLED"));
+
+	return ret;
+}
+
+static int config_osf(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_TX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_OSF_DISABLE;
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_OSF_ENABLE;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_OSF_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully %s Transmit Operate on Second Frame Mode\n",
+		     (option ? "ENABLED" : "DISABLED"));
+
+	return ret;
+}
+
+static int config_incrx_incr(int sockfd, char *ifname, char *argv)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv);
+	int ret = 0;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_INCRX_ENABLE;
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_INCR_ENABLE;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_INCR_INCRX_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device in %s mode\n",
+		       option ? "INCRX" : "INCR");
+
+	return ret;
+}
+
+static int config_rx_pbl(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_RX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case DWC_ETH_QOS_PBL_1:
+	case DWC_ETH_QOS_PBL_2:
+	case DWC_ETH_QOS_PBL_4:
+	case DWC_ETH_QOS_PBL_8:
+	case DWC_ETH_QOS_PBL_16:
+	case DWC_ETH_QOS_PBL_32:
+	case DWC_ETH_QOS_PBL_64:
+	case DWC_ETH_QOS_PBL_128:
+	case DWC_ETH_QOS_PBL_256:
+		data.flags = option;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_RX_PBL_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured RX PBL to %d\n", option);
+
+	return ret;
+}
+
+static int config_tx_pbl(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	unsigned int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+
+	if ((qInx > DWC_ETH_QOS_MAX_TX_QUEUE_CNT) || (qInx < 0)) {
+		printf("Invalid channel no %d\n", qInx);
+		return -1;
+	}
+
+	switch (option) {
+	case DWC_ETH_QOS_PBL_1:
+	case DWC_ETH_QOS_PBL_2:
+	case DWC_ETH_QOS_PBL_4:
+	case DWC_ETH_QOS_PBL_8:
+	case DWC_ETH_QOS_PBL_16:
+	case DWC_ETH_QOS_PBL_32:
+	case DWC_ETH_QOS_PBL_64:
+	case DWC_ETH_QOS_PBL_128:
+	case DWC_ETH_QOS_PBL_256:
+		data.flags = option;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_TX_PBL_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured TX PBL to %d\n", option);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int rx_outer_vlan_strip(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_RX_NO_VLAN_STRIP;
+		string = "not to strip outer RX VLAN Tag";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_PASS;
+		string = "strip outer RX VLAN Tag if it passes VLAN filter";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_FAIL;
+		string = "strip outer RX VLAN Tag if it fail VLAN filter";
+		break;
+	case 3:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS;
+		string = "strip outer RX VLAN Tag always";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_RX_OUTER_VLAN_STRIPPING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device to %s\n", string);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int rx_inner_vlan_strip(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_RX_NO_VLAN_STRIP;
+		string = "not to strip inner RX VLAN Tag";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_PASS;
+		string = "strip inner RX VLAN Tag if it passes VLAN filter";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_FAIL;
+		string = "strip inner RX VLAN Tag if it fail VLAN filter";
+		break;
+	case 3:
+		data.flags = DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS;
+		string = "strip inner RX VLAN Tag always";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_RX_INNER_VLAN_STRIPPING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device to %s\n", string);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int tx_vlan_ctrl_via_desc(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_NONE;
+		string = "not TX VLAN Tag deletion, insertion or replacement";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_DELETE;
+		string = "TX VLAN Tag deletion";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_INSERT;
+		string = "TX VLAN Tag insertion";
+		break;
+	case 3:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_REPLACE;
+		string = "TX VLAN Tag replacement";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_TX_VLAN_DESC_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device to"\
+			" (per packet based) %s\n", string);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int tx_vlan_ctrl_via_reg(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int qInx = atoi(argv1);
+	int option = atoi(argv2);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_NONE;
+		string = "not TX VLAN Tag deletion, insertion or replacement";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_DELETE;
+		string = "TX VLAN Tag deletion";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_INSERT;
+		string = "TX VLAN Tag insertion";
+		break;
+	case 3:
+		data.flags = DWC_ETH_QOS_TX_VLAN_TAG_REPLACE;
+		string = "TX VLAN Tag replacement";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_TX_VLAN_REG_CMD;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully configured device to (register based) %s\n",
+		     string);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int sa0_ctrl_via_desc(int sockfd, char *ifname, char *argv)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_SA0_NONE;
+		string = "Do not include the source address with value given"\
+			" in the MAC Address 0 reg";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_SA0_DESC_INSERT;
+		string = "Include/Insert the source address with the value"\
+			" given in the MAC Address 0 reg";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_SA0_DESC_REPLACE;
+		string = "Replace the source address with the value given in"\
+			" the MAC Address 0 reg";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_SA0_DESC_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device to"\
+			" (per packet based) %s\n", string);
+
+	return ret;
+}
+
+static int sa1_ctrl_via_desc(int sockfd, char *ifname, char *argv)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_SA1_NONE;
+		string = "Do not include the source address with value given"\
+			" in the MAC Address 1 reg";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_SA1_DESC_INSERT;
+		string = "Include/Insert the source address with value given"\
+			" in the MAC Address 1 reg";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_SA1_DESC_REPLACE;
+		string = "Replace the source address with value given in the"\
+			" MAC Address 1 reg";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_SA1_DESC_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured device to"\
+			" (per packet based) %s\n", string);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int sa0_ctrl_via_reg(int sockfd, char *ifname, char *argv)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_SA0_NONE;
+		string = "Do not include the source address with value given"\
+			" in the MAC Address 0 reg";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_SA0_REG_INSERT;
+		string = "Include/Insert the source address with the value"\
+			" given in the MAC Address 0 reg";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_SA0_REG_REPLACE;
+		string = "Replace the source address with the value given in"\
+			" the MAC Address 0 reg";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_SA0_REG_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully configured device to (register based) %s\n",
+		     string);
+
+	return ret;
+}
+
+static int sa1_ctrl_via_reg(int sockfd, char *ifname, char *argv)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv);
+	int ret = 0;
+	char *string = NULL;
+
+	switch (option) {
+	case 0:
+		data.flags = DWC_ETH_QOS_SA1_NONE;
+		string = "Do not include the source address with value given"\
+			" in the MAC Address 1 reg";
+		break;
+	case 1:
+		data.flags = DWC_ETH_QOS_SA1_REG_INSERT;
+		string = "Include/Insert the source address with value given"\
+			" in the MAC Address 1 reg";
+		break;
+	case 2:
+		data.flags = DWC_ETH_QOS_SA1_REG_REPLACE;
+		string = "Replace the source address with value given in the"\
+			" MAC Address 1 reg";
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_SA1_REG_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully configured device to (register based) %s\n",
+		     string);
+
+	return ret;
+}
+
+static int program_dcb_algorithm(int sockfd, char *ifname, char *argv1,
+		char *argv2, char *argv3, char *argv4)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_dcb_algorithm dcb_struct;
+	int qInx = atoi(argv1);
+	int algo = atoi(argv2);
+	int percent_weight = atoi(argv3);
+	int max_frame_size = atoi(argv4);
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_DCB_ALGORITHM;
+	data.qInx = qInx;
+	dcb_struct.qInx = qInx;
+	dcb_struct.algorithm = algo;
+	dcb_struct.weight = DWC_ETH_QOS_get_dcb_queue_weights(algo, percent_weight, max_frame_size);
+	dcb_struct.op_mode = eDWC_ETH_QOS_QDCB;
+	data.ptr = &dcb_struct;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Configured DCB Algorithm parameters successfully\n");
+
+	return ret;
+}
+
+static int program_avb_algorithm(int sockfd, char *ifname, char *argv1,
+		char *argv2, char *argv3, char *argv4)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_avb_algorithm avb_struct;
+	int qInx = atoi(argv1);
+	int algo = atoi(argv2);
+	int bw = atoi(argv3);
+	int cc = atoi(argv4);
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_AVB_ALGORITHM;
+	data.qInx = qInx;
+	avb_struct.qInx = qInx;
+	avb_struct.algorithm = algo;
+	avb_struct.cc = cc;
+	avb_struct.idle_slope = get_idle_slope(bw);
+	avb_struct.send_slope = get_send_slope(bw);
+	avb_struct.hi_credit = get_hi_credit(bw);
+	avb_struct.low_credit = get_low_credit(bw);
+	avb_struct.op_mode = eDWC_ETH_QOS_QAVB;
+	data.ptr = &avb_struct;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Configured AVB Algorithm parameters successfully\n");
+
+	return ret;
+}
+
+static int setup_context_descriptor(int sockfd, char *ifname, char *argv1, char *argv2)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int qInx = atoi(argv1);
+	int setup = atoi(argv2);
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_SETUP_CONTEXT_DESCRIPTOR;
+	data.context_setup = setup;
+	data.qInx = qInx;
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Context descriptor configuration changed\n");
+
+	return ret;
+}
+
+static int config_rx_split_hdr(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	if (option)
+		data.flags = DWC_ETH_QOS_RX_SPLIT_HDR_ENABLE;
+	else
+		data.flags = DWC_ETH_QOS_RX_SPLIT_HDR_DISABLE;
+
+	data.cmd = DWC_ETH_QOS_RX_SPLIT_HDR_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for Split header\n");
+			break;
+		case DWC_ETH_QOS_CONFIG_FAIL:
+			printf("Rx Split header mode is already %s\n",
+				(option ? "enabled" : "disable"));
+			break;
+		}
+	}
+	else
+		printf("Successfully %s Rx Split header mode\n",
+			(option ? "enabled" : "disabled"));
+
+	return ret;
+}
+
+static int config_l3_l4_filter(int sockfd, char *ifname,
+			char *enable_disable)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(enable_disable);
+	int ret = 0;
+
+	if (option)
+		data.flags = DWC_ETH_QOS_L3_L4_FILTER_ENABLE;
+	else
+		data.flags = DWC_ETH_QOS_L3_L4_FILTER_DISABLE;
+
+	data.cmd = DWC_ETH_QOS_L3_L4_FILTER_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for L3/L4 filtering\n");
+			break;
+		case DWC_ETH_QOS_CONFIG_FAIL:
+			printf("L3/L4 filtering is already %s\n",
+				(option ? "ENABLED" : "DISABLED"));
+			break;
+		}
+	}
+	else
+		printf("Successfully %s L3/L4 filtering\n",
+			(option ? "ENABLED" : "DISABLED"));
+
+	return ret;
+}
+
+static int check_for_valid_ipv4_addr(char *ip)
+{
+	int i = 0, ret = 0;
+	char *token = NULL;
+
+	token = strtok(ip, ".");
+	if (token) {
+		while(1) {
+			token = strtok(NULL, ".");
+			if (!token) {
+				break;
+			}
+			i++;
+		}
+	}
+
+	if (i != 3)
+		ret = -1;
+
+	return ret;
+}
+
+static int check_for_valid_ipv6_addr(char *ip)
+{
+	int i = 0, ret = 0;
+	char *token = NULL;
+
+	token = strtok(ip, ":");
+	if (token) {
+		while(1) {
+			token = strtok(NULL, ":");
+			if (!token) {
+				break;
+			}
+			i++;
+		}
+	}
+
+	if (i != 7)
+		ret = -1;
+
+	return ret;
+}
+
+static int config_ipv4_filters(int sockfd, char *ifname,
+				char *filter_no,
+				char *src_dst_addr_match,
+				char *enable_disable,
+				char *perfect_inverse_match,
+				char *ip)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_l3_l4_filter l3_filter;
+	char *tmp;
+	int ret = 0;
+
+	data.flags = atoi(enable_disable);
+	data.cmd = DWC_ETH_QOS_IPV4_FILTERING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	l3_filter.filter_no = atoi(filter_no);
+	if (l3_filter.filter_no < 0 || l3_filter.filter_no > 7) {
+		printf("Filter number should be between 0 to 7\n");
+		return -1;
+	}
+
+	l3_filter.src_dst_addr_match = atoi(src_dst_addr_match);
+	l3_filter.filter_enb_dis = atoi(enable_disable);
+	if (l3_filter.filter_enb_dis) {
+		l3_filter.perfect_inverse_match = atoi(perfect_inverse_match);
+
+		if (!strcmp(ip, "0")) {
+			memset(l3_filter.ip4_addr, 0, sizeof(l3_filter.ip4_addr));
+		} else {
+			tmp = strdup(ip);
+			ret = check_for_valid_ipv4_addr(tmp);
+			if (!ret) {
+			  l3_filter.ip4_addr[0] = strtol(strtok(ip, "."), NULL, 10);
+			  l3_filter.ip4_addr[1] = strtol(strtok(NULL, "."), NULL, 10);
+			  l3_filter.ip4_addr[2] = strtol(strtok(NULL, "."), NULL, 10);
+			  l3_filter.ip4_addr[3] = strtol(strtok(NULL, "."), NULL, 10);
+			} else {
+				printf("ERROR: Specify correct IPv4 addr(eq - 10.144.134.108)\n");
+				return ret;
+			}
+		}
+	} else {
+		l3_filter.perfect_inverse_match = 0;
+		memset(l3_filter.ip4_addr, 0, sizeof(l3_filter.ip4_addr));
+	}
+	data.ptr = &l3_filter;
+
+	printf("%d.%d.%d.%d\n", l3_filter.ip4_addr[0], l3_filter.ip4_addr[1],
+		l3_filter.ip4_addr[2], l3_filter.ip4_addr[3]);
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for IPv4 addr filtering\n");
+			break;
+		default:
+			printf("IPv4(L3) filtering is failed\n");
+			break;
+		}
+	} else
+		printf("Successfully %s IPv4 %s %s addressing filtering on %d filter\n",
+			(l3_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+			(l3_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+			(l3_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+			l3_filter.filter_no);
+
+	return ret;
+}
+
+static int config_ipv6_filters(int sockfd, char *ifname,
+				char *filter_no,
+				char *src_dst_addr_match,
+				char *enable_disable,
+				char *perfect_inverse_match,
+				char *ip)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_l3_l4_filter l3_filter;
+	char *tmp;
+	int ret = 0;
+
+	data.flags = atoi(enable_disable);
+	data.cmd = DWC_ETH_QOS_IPV6_FILTERING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	l3_filter.filter_no = atoi(filter_no);
+	if (l3_filter.filter_no < 0 || l3_filter.filter_no > 7) {
+		printf("Filter number should be between 0 to 7\n");
+		return -1;
+	}
+
+	l3_filter.src_dst_addr_match = atoi(src_dst_addr_match);
+	l3_filter.filter_enb_dis = atoi(enable_disable);
+	if (l3_filter.filter_enb_dis) {
+		l3_filter.perfect_inverse_match = atoi(perfect_inverse_match);
+
+		if (!strcmp(ip, "0")) {
+			memset(l3_filter.ip6_addr, 0, sizeof(l3_filter.ip6_addr));
+		} else {
+			tmp = strdup(ip);
+			ret = check_for_valid_ipv6_addr(tmp);
+			if (!ret) {
+			  l3_filter.ip6_addr[0] = strtol(strtok(ip, ":"), NULL, 16);
+			  l3_filter.ip6_addr[1] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[2] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[3] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[4] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[5] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[6] = strtol(strtok(NULL, ":"), NULL, 16);
+			  l3_filter.ip6_addr[7] = strtol(strtok(NULL, ":"), NULL, 16);
+			} else {
+				printf("ERROR: Specify correct IPv6 addr(eq - fe80:0:0:0:f2de:f1ff:fe58:de16)\n");
+				return ret;
+			}
+		}
+	} else {
+		l3_filter.perfect_inverse_match = 0;
+		memset(l3_filter.ip6_addr, 0, sizeof(l3_filter.ip6_addr));
+	}
+	data.ptr = &l3_filter;
+
+	printf("%#x:%#x:%#x:%#x:%#x:%#x:%#x:%#x\n",
+		l3_filter.ip6_addr[0], l3_filter.ip6_addr[1],
+		l3_filter.ip6_addr[2], l3_filter.ip6_addr[3],
+		l3_filter.ip6_addr[4], l3_filter.ip6_addr[5],
+		l3_filter.ip6_addr[6], l3_filter.ip6_addr[7]);
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for IPv6 addr filtering\n");
+			break;
+		default:
+			printf("IPv6(L3) filtering is failed\n");
+			break;
+		}
+	} else
+		printf("Successfully %s IPv6 %s %s addressing filtering on %d filter\n",
+			(l3_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+			(l3_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+			(l3_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+			l3_filter.filter_no);
+
+	return ret;
+}
+
+static int config_l4_filters(int sockfd, char *ifname,
+				char *udp_tcp,
+				char *filter_no,
+				char *src_dst_addr_match,
+				char *enable_disable,
+				char *perfect_inverse_match,
+				char *port)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_l3_l4_filter l4_filter;
+	int ret = 0;
+
+	data.flags = atoi(enable_disable);
+	if (!strcmp(udp_tcp, "udp_filter"))
+		data.cmd = DWC_ETH_QOS_UDP_FILTERING_CMD;
+	else
+		data.cmd = DWC_ETH_QOS_TCP_FILTERING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	l4_filter.filter_no = atoi(filter_no);
+	l4_filter.src_dst_addr_match = atoi(src_dst_addr_match);
+	l4_filter.filter_enb_dis = atoi(enable_disable);
+	if (l4_filter.filter_enb_dis) {
+		l4_filter.perfect_inverse_match = atoi(perfect_inverse_match);
+
+		if (!strcmp(port, "0")) {
+			l4_filter.port_no = 0;
+		} else {
+			l4_filter.port_no = atoi(port);
+		}
+	} else {
+		l4_filter.perfect_inverse_match = 0;
+		l4_filter.port_no = 0;
+	}
+	data.ptr = &l4_filter;
+
+	printf("%d\n", l4_filter.port_no);
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for UDP port filtering\n");
+			break;
+		default:
+			printf("UPD(L4) filtering is failed\n");
+			break;
+		}
+	} else
+		printf("Successfully %s %s %s %s port filtering on %d filter\n",
+			(l4_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+			(data.cmd == DWC_ETH_QOS_UDP_FILTERING_CMD ? "UDP" : "TCP"),
+			(l4_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+			(l4_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+			l4_filter.filter_no);
+
+	return ret;
+}
+
+static int config_vlan_filters(int sockfd, char *ifname,
+				char *enable_disable,
+				char *perfect_hash_filtering,
+				char *perfect_inverse_match)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_vlan_filter vlan_filter;
+	int ret = 0;
+
+	data.flags = atoi(enable_disable);
+	data.cmd = DWC_ETH_QOS_VLAN_FILTERING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	vlan_filter.filter_enb_dis = atoi(enable_disable);
+	if (vlan_filter.filter_enb_dis) {
+		vlan_filter.perfect_hash = atoi(perfect_hash_filtering);
+		vlan_filter.perfect_inverse_match =
+				atoi(perfect_inverse_match);
+	} else {
+		vlan_filter.perfect_hash = 0;
+		vlan_filter.perfect_inverse_match = 0;
+	}
+	data.ptr = &vlan_filter;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for VLAN filtering\n");
+			break;
+		default:
+			printf("VLAN filtering is failed\n");
+			break;
+		}
+	} else
+		printf("Successfully %s VLAN %s filtering and %s matching\n",
+			(vlan_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+			(vlan_filter.perfect_hash ? "HASH" : "PERFECT"),
+			(vlan_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"));
+	return ret;
+}
+
+
+static int config_arp_offload(int sockfd, char *ifname, char *enable_disable)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(enable_disable);
+	struct DWC_ETH_QOS_arp_offload arp_offload;
+	char *ip_addr;
+	struct sockaddr_in *addr = NULL;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	/* Get IP addr of our interface */
+	if (ioctl(sockfd, SIOCGIFADDR, &ifr) < 0) {
+	  printf("failed to get IP address of %s\n", ifname);
+	  ret = -1;
+	  goto get_ip_addr_failed;
+	}
+	addr = ((struct sockaddr_in *)&ifr.ifr_addr);
+	ip_addr = inet_ntoa(addr->sin_addr);
+	printf("IP addr to be programmed in MAC_ARP_Addr reg is %s\n",
+	    ip_addr);
+
+	arp_offload.ip_addr[0] = strtol(strtok(ip_addr, "."), NULL, 10);
+	arp_offload.ip_addr[1] = strtol(strtok(NULL, "."), NULL, 10);
+	arp_offload.ip_addr[2] = strtol(strtok(NULL, "."), NULL, 10);
+	arp_offload.ip_addr[3] = strtol(strtok(NULL, "."), NULL, 10);
+
+	data.flags = option;
+	data.cmd = DWC_ETH_QOS_ARP_OFFLOAD_CMD;
+	data.qInx = 0; /* Not used */
+	ifr.ifr_ifru.ifru_data = &data;
+	data.ptr = &arp_offload;
+
+	printf("arp_offload.ip_addr = %d.%d.%d.%d\n", arp_offload.ip_addr[0],
+	    arp_offload.ip_addr[1], arp_offload.ip_addr[2],
+	    arp_offload.ip_addr[3]);
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for ARP Offloading\n");
+			break;
+		default:
+			printf("ARP Offload configuration failed\n");
+			break;
+		}
+	} else
+		printf("Successfully %s ARP Offload\n",
+		    (option ? "ENABLED" : "DISABLED"));
+
+get_ip_addr_failed:
+	return ret;
+}
+
+
+static int config_l2_da_filtering(int sockfd, char *ifname,
+				  char *perfect_hash,
+				  char *perfect_inverse_match)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	struct DWC_ETH_QOS_l2_da_filter l2_da_filter;
+	int ret = 0;
+
+	data.cmd = DWC_ETH_QOS_L2_DA_FILTERING_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	l2_da_filter.perfect_hash = atoi(perfect_hash);
+	l2_da_filter.perfect_inverse_match = atoi(perfect_inverse_match);
+	data.ptr = &l2_da_filter;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_NO_HW_SUPPORT:
+			printf("No hardware support present for L2 %s filtering\n",
+				(l2_da_filter.perfect_hash ? "HASH" : "PERFECT"));
+			break;
+		default:
+			printf("L2 filtering mode selection failed\n");
+			break;
+		}
+	} else
+		printf("Successfully selected L2 %s filtering and %s DA matching\n",
+			(l2_da_filter.perfect_hash ? "HASH" : "PERFECT"),
+			(l2_da_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"));
+
+get_ip_addr_failed:
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int config_axi_pbl(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	switch (option) {
+	case 4:
+		data.flags = DWC_ETH_QOS_AXI_PBL_4;
+		break;
+	case 8:
+		data.flags = DWC_ETH_QOS_AXI_PBL_8;
+		break;
+	case 16:
+		data.flags = DWC_ETH_QOS_AXI_PBL_16;
+		break;
+	case 32:
+		data.flags = DWC_ETH_QOS_AXI_PBL_32;
+		break;
+	case 64:
+		data.flags = DWC_ETH_QOS_AXI_PBL_64;
+		break;
+	case 128:
+		data.flags = DWC_ETH_QOS_AXI_PBL_128;
+		break;
+	case 256:
+		data.flags = DWC_ETH_QOS_AXI_PBL_256;
+		break;
+	default:
+		printf("Invalid option %d\n", option);
+		return -1;
+	}
+
+	data.cmd = DWC_ETH_QOS_AXI_PBL_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured AXI PBL to %d\n", option);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int config_axi_worl(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	if ((option > DWC_ETH_QOS_MAX_AXI_WORL) || (option < 0)) {
+		printf("Invalid axi_worl value %d\n", option);
+		return -1;
+	}
+
+	data.flags = (option -1);
+	data.cmd = DWC_ETH_QOS_AXI_WORL_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured AXI WORL to %d\n", option);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int config_axi_rorl(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	if ((option > DWC_ETH_QOS_MAX_AXI_RORL) || (option < 0)) {
+		printf("Invalid axi_rorl value %d\n", option);
+		return -1;
+	}
+
+	data.flags = (option -1);
+	data.cmd = DWC_ETH_QOS_AXI_RORL_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf("Successfully configured AXI RORL to %d\n", option);
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int config_loopback_mode(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	if (option)
+		data.flags = DWC_ETH_QOS_MAC_LOOPBACK_ENABLE;
+	else
+		data.flags = DWC_ETH_QOS_MAC_LOOPBACK_DISABLE;
+
+	data.cmd = DWC_ETH_QOS_MAC_LOOPBACK_MODE_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0) {
+		printf("IOCTL Error\n");
+		switch (data.command_error) {
+		case DWC_ETH_QOS_CONFIG_FAIL:
+			printf("mac loopback mode is already %s\n",
+				(option ? "enabled" : "disable"));
+			break;
+		}
+	}
+	else
+		printf("Successfully %s mac loopback mode\n\n",
+			(option ? "enabled" : "disabled"));
+
+	if (option)
+		printf("WARNING: Please disable the mac loopback after the testing\n"
+			   "         else it will interrupt the normal operation.\n");
+
+	return ret;
+}
+
+/* return 0 on success and -ve on failure */
+static int config_pfc(int sockfd, char *ifname, char *argv1)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int option = atoi(argv1);
+	int ret = 0;
+
+	if (option)
+		data.flags = DWC_ETH_QOS_PFC_ENABLE;
+	else
+		data.flags = DWC_ETH_QOS_PFC_DISABLE;
+
+	data.cmd = DWC_ETH_QOS_PFC_CMD;
+	data.qInx = 0; /* Not used */
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret == DWC_ETH_QOS_NO_HW_SUPPORT)
+		printf("No HW support present for PFC(Priority Based Flow Control)\n");
+	else
+		printf("Successfully %s PFC(Priority Based Flow Control)\n",
+			(option ? "enabled" : "disabled"));
+
+	return ret;
+}
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+
+/* Initialize default parameters for Channel 0, 1 and 2.
+ */
+static void DWC_ETH_QOS_init_default_pg(struct DWC_ETH_QOS_pg_user_input *pg_params)
+{
+	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
+	unsigned int qInx;
+	unsigned int bandwidth = 100/tx_queue_count;
+
+	/* duration of experiment is 5 Sec by default */
+	pg_params->duration_of_exp = 5;
+	pg_params->dma_ch_en = 1;
+
+	pg_params->ch_tx_rx_arb_scheme = 0;
+	pg_params->ch_use_tx_high_prio = 0;
+	pg_params->ch_tx_rx_prio_ratio = 0;
+	pg_params->dma_tx_arb_algo = eDWC_ETH_QOS_DMA_TX_WRR;
+	pg_params->queue_dcb_algorithm = eDWC_ETH_QOS_DCB_WRR;
+
+	/* configure Channel qInx to DWC_ETH_QOS_QUEUE_CNT */
+	for (qInx = 0; qInx < tx_queue_count; qInx++) {
+		memset(&pg_user_ch_input[qInx], 0, sizeof(struct DWC_ETH_QOS_pg_user_ch_input));
+
+		pg_params->dma_ch_en |= (0x1 << qInx);
+		if (qInx == 0) {
+			pg_user_ch_input[qInx].ch_arb_weight = 0;
+			pg_user_ch_input[qInx].ch_fr_size = 1500;
+			pg_user_ch_input[qInx].ch_bw_alloc = bandwidth;
+
+			/* AVB can't be used on queue-0 */
+			pg_user_ch_input[qInx].ch_operating_mode = eDWC_ETH_QOS_QDCB;
+			pg_user_ch_input[qInx].ch_CreditControl = 0;
+
+			/* slot facility not available for 0
+			 * do not change below values */
+			pg_user_ch_input[qInx].ch_tx_desc_slot_no_start = 0;
+			pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip = 0;
+			pg_user_ch_input[qInx].ch_AvgBits = 0;
+			pg_user_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
+			pg_user_ch_input[qInx].ch_use_slot_no_check = 0;
+			pg_user_ch_input[qInx].ch_use_adv_slot_no_check = 0;
+			pg_user_ch_input[qInx].ch_slot_count_to_use = 0;
+
+			/* debug parameters */
+			pg_user_ch_input[qInx].ch_max_tx_frame_cnt = 255;
+			pg_user_ch_input[qInx].ch_debug_mode = 0;
+
+		} else {
+			pg_user_ch_input[qInx].ch_arb_weight = 0;
+			pg_user_ch_input[qInx].ch_fr_size = 1500;
+			pg_user_ch_input[qInx].ch_bw_alloc = bandwidth;
+
+			pg_user_ch_input[qInx].ch_operating_mode = eDWC_ETH_QOS_QDCB;
+			pg_user_ch_input[qInx].ch_CreditControl = 0;
+			pg_user_ch_input[qInx].ch_avb_algorithm = eDWC_ETH_QOS_AVB_CBS;
+
+			pg_user_ch_input[qInx].ch_tx_desc_slot_no_start = 0;
+			pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip = 0;
+			pg_user_ch_input[qInx].ch_AvgBits = 0;
+			pg_user_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
+			pg_user_ch_input[qInx].ch_use_slot_no_check = 0;
+			pg_user_ch_input[qInx].ch_use_adv_slot_no_check = 0;
+			pg_user_ch_input[qInx].ch_slot_count_to_use = 0;
+
+			/* debug parameters */
+			pg_user_ch_input[qInx].ch_max_tx_frame_cnt = 255;
+			pg_user_ch_input[qInx].ch_debug_mode = 0;
+		}
+	}
+}
+
+static void DWC_ETH_QOS_calculate_slope(struct DWC_ETH_QOS_PGStruct *pg_struct,
+		struct DWC_ETH_QOS_pg_ch_input *pg_ch_input, unsigned int qInx)
+{
+	unsigned int multiplier = 1;
+
+	if (connected_speed == SPEED_1000)
+		multiplier = 2;
+
+	pg_ch_input[qInx].ch_IdleSlope = get_idle_slope(pg_ch_input[qInx].ch_bw);
+	pg_ch_input[qInx].ch_SendSlope = get_send_slope(pg_ch_input[qInx].ch_bw);
+
+	pg_ch_input[qInx].ch_HiCredit = get_hi_credit(pg_ch_input[qInx].ch_bw);
+	pg_ch_input[qInx].ch_LoCredit = get_low_credit(pg_ch_input[qInx].ch_bw);
+
+	return;
+}
+
+static void DWC_ETH_QOS_calculate_queue_weight(struct DWC_ETH_QOS_PGStruct *pg_struct,
+		struct DWC_ETH_QOS_pg_ch_input *pg_ch_input,
+		unsigned int max_frame_size,
+		unsigned int qInx)
+{
+	pg_ch_input[qInx].ch_queue_weight =
+		DWC_ETH_QOS_get_dcb_queue_weights(pg_struct->queue_dcb_algorithm,
+			pg_ch_input[qInx].ch_bw, max_frame_size);
+
+	return;
+}
+
+/*
+ * Copies Channel parameters from pg user struct to pg kernel struct.
+ */
+static void DWC_ETH_QOS_populate_pg_struct(struct DWC_ETH_QOS_pg_user_input *pg_params,
+					struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	unsigned int qInx, channel_enable = 0, max_frame_size = 0;
+
+	pg_struct->ch_SelMask = pg_params->dma_ch_en;
+	pg_struct->DurationOfExp = pg_params->duration_of_exp;
+
+	pg_struct->PrioTagForAV = 5; /* Priority of Ch2 */
+
+	pg_struct->ch_tx_rx_arb_scheme = pg_params->ch_tx_rx_arb_scheme;
+	pg_struct->ch_use_tx_high_prio = pg_params->ch_use_tx_high_prio;
+	pg_struct->ch_tx_rx_prio_ratio = pg_params->ch_tx_rx_prio_ratio;
+	pg_struct->dma_tx_arb_algo = pg_params->dma_tx_arb_algo;
+	pg_struct->queue_dcb_algorithm = pg_params->queue_dcb_algorithm;
+
+	channel_enable = pg_params->dma_ch_en;
+	max_frame_size = pg_user_ch_input[0].ch_fr_size;
+	for (qInx = 0; qInx < tx_queue_count; qInx++) {
+		if (pg_user_ch_input[0].ch_fr_size > max_frame_size)
+			max_frame_size = pg_user_ch_input[0].ch_fr_size;
+	}
+
+	for (qInx = 0; qInx < tx_queue_count; qInx++) {
+		/* updating parameters only if channel is enabled */
+		if (channel_enable & (1 << qInx)) {
+			/* copy Channel qInx parameters */
+			pg_ch_input[qInx].ch_arb_weight = pg_user_ch_input[qInx].ch_arb_weight;
+			pg_ch_input[qInx].ch_bw = pg_user_ch_input[qInx].ch_bw_alloc;
+
+			DWC_ETH_QOS_calculate_queue_weight(pg_struct, pg_ch_input, max_frame_size, qInx);
+
+			pg_ch_input[qInx].ch_frame_size = pg_user_ch_input[qInx].ch_fr_size;
+			pg_ch_input[qInx].ch_debug_mode = pg_user_ch_input[qInx].ch_debug_mode;
+			pg_ch_input[qInx].ch_max_tx_frame_cnt = pg_user_ch_input[qInx].ch_max_tx_frame_cnt;
+			pg_ch_input[qInx].ch_operating_mode = pg_user_ch_input[qInx].ch_operating_mode;
+			pg_ch_input[qInx].ch_AvgBits = pg_user_ch_input[qInx].ch_AvgBits;
+			pg_ch_input[qInx].ch_AvgBits_interrupt_count =
+				pg_user_ch_input[qInx].ch_AvgBits_interrupt_count;
+
+			pg_ch_input[qInx].ch_avb_algorithm = pg_user_ch_input[qInx].ch_avb_algorithm;
+			pg_ch_input[qInx].ch_CreditControl = pg_user_ch_input[qInx].ch_CreditControl;
+
+			DWC_ETH_QOS_calculate_slope(pg_struct, pg_ch_input, qInx);
+
+			pg_ch_input[qInx].ch_EnableSlotCheck = pg_user_ch_input[qInx].ch_use_slot_no_check;
+			pg_ch_input[qInx].ch_EnableAdvSlotCheck = pg_user_ch_input[qInx].ch_use_adv_slot_no_check;
+			pg_ch_input[qInx].ch_SlotCount = pg_user_ch_input[qInx].ch_slot_count_to_use;
+			pg_ch_input[qInx].ch_tx_desc_slot_no_start = pg_user_ch_input[qInx].ch_tx_desc_slot_no_start;
+			pg_ch_input[qInx].ch_tx_desc_slot_no_skip = pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip;
+
+			pg_ch_input[qInx].ch_FramecountTx = 0;
+			pg_ch_input[qInx].ch_FramecountRx = 0;
+		}
+		else {
+			pg_ch_input[qInx].ch_bw = 0;
+		}
+	}
+}
+
+static int DWC_ETH_QOS_send_pg_param_to_driver(int sockfd, char *ifname,
+						struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	data.cmd = DWC_ETH_QOS_PG_TEST;
+	data.flags = DWC_ETH_QOS_PG_SET_CONFIG;
+	data.ptr = pg_struct;
+	data.qInx = 0;
+
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully configured PG parameters\n");
+
+	return ret;
+}
+
+static int DWC_ETH_QOS_config_hw_for_pg_test(int sockfd, char *ifname)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	data.cmd = DWC_ETH_QOS_PG_TEST;
+	data.flags = DWC_ETH_QOS_PG_CONFIG_HW;
+	data.ptr = NULL;
+	data.qInx = 0;
+
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully configured the HW for Test\n");
+
+	return ret;
+}
+
+static int DWC_ETH_QOS_run_pg_test(int sockfd, char *ifname,
+				struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	data.cmd = DWC_ETH_QOS_PG_TEST;
+	data.flags = DWC_ETH_QOS_PG_RUN_TEST;
+	data.ptr = pg_struct;
+	data.qInx = 0;
+
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("PG Test Started\n");
+
+	return ret;
+}
+
+static int DWC_ETH_QOS_check_test_done(int sockfd, char *ifname)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	data.cmd = DWC_ETH_QOS_PG_TEST;
+	data.flags = DWC_ETH_QOS_PG_TEST_DONE;
+	data.qInx = 0;
+
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		ret = data.test_done;
+
+	return ret;
+}
+
+static int DWC_ETH_QOS_get_pg_result_from_hw(int sockfd, char *ifname,
+				struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct ifreq ifr;
+	struct ifr_data_struct data;
+	int ret = 0;
+
+	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
+	data.cmd = DWC_ETH_QOS_PG_TEST;
+	data.flags = DWC_ETH_QOS_PG_GET_RESULT;
+	data.ptr = pg_struct;
+	data.qInx = 0;
+
+	ifr.ifr_ifru.ifru_data = &data;
+
+	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
+	if (ret < 0)
+		printf("IOCTL Error\n");
+	else
+		printf
+		    ("Successfully Retrieved PG Results\n");
+
+	return ret;
+}
+
+
+static void DWC_ETH_QOS_process_ch_params(struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input,
+					int user_input,
+					int ch_no)
+{
+	char user_string[10];
+
+	switch(user_input) {
+	case 00:
+		printf("(%d00) Channel %d Frame size in bytes (only payload)          : %04d\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_fr_size);
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input > 48) && (user_input <= 1500))
+			pg_user_ch_input[ch_no].ch_fr_size = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 01:
+		printf("(%d01) Channel %d Bandwidth Allocation                        : %02d%%\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_bw_alloc);
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input > 0) && (user_input <= 75))
+			pg_user_ch_input[ch_no].ch_bw_alloc = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 02:
+		printf("(%d02) Channel %d Enable Slot Number Check  <1/0>             : %s\n",
+			ch_no, ch_no,
+			(pg_user_ch_input[ch_no].ch_use_slot_no_check ? "YES" : "NO"));
+		printf("     [0 - Disable slot number check]\n");
+		printf("     [1 - Enable slot number check]\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 0) || (user_input == 1))
+			pg_user_ch_input[ch_no].ch_use_slot_no_check = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 03:
+		printf("(%d03) Channel %d Enabled advance Slot check <1/0>            : %s\n",
+			ch_no, ch_no,
+			(pg_user_ch_input[ch_no].ch_use_adv_slot_no_check ? "YES" : "NO"));
+		printf("     [0 - Disable advance slot number check]\n");
+		printf("     [1 - Enable advance slot number check]\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 0) || (user_input == 1))
+			pg_user_ch_input[ch_no].ch_use_adv_slot_no_check = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 04:
+		printf("(%d04) Channel %d Slot Counter for AVB Reporting <1/2/4/8/16> : %01d\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_slot_count_to_use);
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 1) || (user_input == 2) || (user_input == 4) ||
+		    (user_input == 8) || (user_input == 16))
+			pg_user_ch_input[ch_no].ch_slot_count_to_use = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 05:
+		printf("(%d05a) Channel %d AVB algorithm <0/1>         : %s\n",
+			ch_no, ch_no,
+			(pg_user_ch_input[ch_no].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
+			"Strict Priority" : "Credit Based Shaper"));
+		printf("     [0 - Strict Priority Algorithm]\n");
+		printf("     [1 - Credit Shaper Algorithm]\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 0) || (user_input == 1)) {
+			pg_user_ch_input[ch_no].ch_avb_algorithm = user_input;
+		}
+		else
+			printf("Invalid input\n");
+
+		printf("(%d05b) Channel %d Uses Credit Control <0/1>        : %s\n",
+			ch_no, ch_no,
+			(pg_user_ch_input[ch_no].ch_CreditControl ? "YES" : "NO"));
+		printf("     [0 - No Credit Control]\n");
+		printf("     [1 - Enforce Credit Control]\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 0) || (user_input == 1)) {
+			pg_user_ch_input[ch_no].ch_CreditControl = user_input;
+		}
+		else
+			printf("Invalid input\n");
+		break;
+	case 06:
+		printf("(%d06) Channel %d Tx Desc Starting Slot No <0 .. 15>          : %01x\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_tx_desc_slot_no_start);
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input >= 0) && (user_input <= 15))
+			pg_user_ch_input[ch_no].ch_tx_desc_slot_no_start = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 07:
+		printf("(%d07) Channel %d Tx Desc Slot No Skip count <0 .. 15>        : %01x\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_tx_desc_slot_no_skip);
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input >= 0) && (user_input <= 15))
+			pg_user_ch_input[ch_no].ch_tx_desc_slot_no_skip = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case  8:
+		printf("(%d08) Channel %d Arbitration Weight        <0,1,2,3,4,5,6,7> : %01x\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_arb_weight);
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input >= 0) && (user_input <= 7))
+			pg_user_ch_input[ch_no].ch_arb_weight = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 9:
+		printf("(%d09) Channel %d Operating mode                              : %01x\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_operating_mode);
+		printf("        <0-Not enabled, 1-AVB, 2-DCB, 3-Generic>\n");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input >= 0) && (user_input <= 3))
+			pg_user_ch_input[ch_no].ch_operating_mode = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 10:
+		printf("(%d10) Channel %d enable debug mode                          : %d\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_debug_mode);
+		printf("        <0 - disable debug mode, 1 - enable debug mode>\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if ((user_input == 0) || (user_input == 1))
+			pg_user_ch_input[ch_no].ch_debug_mode = user_input;
+		else
+			printf("Invalid input\n");
+		break;
+	case 11:
+		printf("(%d11) Channel %d maximum Tx packet count                   : %d\n",
+			ch_no, ch_no, pg_user_ch_input[ch_no].ch_max_tx_frame_cnt);
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		pg_user_ch_input[ch_no].ch_max_tx_frame_cnt = user_input;
+		break;
+	default:
+		printf("Invalid Option\n");
+	}
+}
+
+static void DWC_ETH_QOS_get_pg_params(struct DWC_ETH_QOS_pg_user_input *pg_params)
+{
+	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
+	char user_string[10];
+	int user_input = 0;
+	int i;
+	int input_limit;
+
+	do {
+		system("clear");
+
+		printf("--------------------------------------------------\n");
+		printf("Select the Options Below:\n");
+		printf("--------------------------------------------------\n");
+
+		printf("(1000) Duration to run the Experiment(seconds)               : %02d\n\n",
+			pg_params->duration_of_exp);
+		printf("(1001) DMA Channel Enable                                    : %#02x\n\n",
+			pg_params->dma_ch_en);
+		printf("(1002) DMA Tx and Rx Priority Scheme(0/1)                    : %01d\n",
+			pg_params->ch_tx_rx_arb_scheme);
+		printf("     [0 - Weighted Round Robin, 1 - Fixed Priority]\n");
+		printf("(1003) DMA Tx has High Priority over Rx(0/1)                 : %01d\n",
+			pg_params->ch_use_tx_high_prio);
+		printf("     [0 - Rx has High Priority, 1 - Tx has High Priority]\n");
+		printf("(1004) DMA Tx and Rx Priority Ratio                          : %01d\n",
+			pg_params->ch_tx_rx_prio_ratio);
+		printf("     [Tx:Rx or Rx:Tx, 0=> 1:1, 1=>2:1, 2=>3:1, 3=>4:1\n"
+		       "                      4=> 5:1, 5=>6:1, 6=>7:1, 7=>8:1]\n");
+		printf("(1005) DMA Transmit Arbitration algorithm                    : %01d\n",
+				pg_params->dma_tx_arb_algo);
+		printf("     [0 - Fixed priority\n");
+		printf("      1 - WSP (Weighted strict priority)\n");
+		printf("      2 - WRR (Weighted Round Robin]\n");
+		printf("(1006) MTL DCB algorithm                                     : %01d\n",
+			pg_params->queue_dcb_algorithm);
+		printf("     [0 - WRR  (Weighted Round Robin)\n"
+		       "      1 - WFQ  (Weighted Fair Queuing)\n"
+		       "      2 - DWRR (Deficit Weighted Round Robin)\n"
+		       "      3 - SP   (Strict Priority)]\n");
+
+		for (i = 0; i < tx_queue_count; i++) {
+			printf("\n");
+			printf("(%d00) Channel %d Frame size in bytes (only payload)          : %04d\n",
+				i, i, pg_user_ch_input[i].ch_fr_size);
+			printf("(%d01) Channel %d Bandwidth Allocation                        : %02d%%\n",
+				i, i, pg_user_ch_input[i].ch_bw_alloc);
+			printf("(%d02) Channel %d Enable Slot Number Check                    : %s\n",
+				i, i, pg_user_ch_input[i].ch_use_slot_no_check ? "YES" : "NO");
+			printf("(%d03) Channel %d Enable advance Slot slot check              : %s\n",
+				i, i, (pg_user_ch_input[i].ch_use_adv_slot_no_check ? "YES" : "NO"));
+			printf("(%d04) Channel %d Slot Counter for AVB Reporting              : %01d\n",
+				i, i, pg_user_ch_input[i].ch_slot_count_to_use);
+			printf("(%d05) Channel %d AVB Algorithm                               : %s\n",
+				i, i, (pg_user_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
+				"Strict Priority" : "Credit Based Shaper"));
+			printf("       Channel %d Uses Credit Control(0/1)                    : %s\n",
+				i, (pg_user_ch_input[i].ch_CreditControl ? "YES" : "NO"));
+			printf("(%d06) Channel %d Tx Desc Starting Slot No <0 .. 15>          : %01x\n",
+				i, i, pg_user_ch_input[i].ch_tx_desc_slot_no_start);
+			printf("(%d07) Channel %d Tx Desc Slot No Skip count <0 .. 15>        : %01x\n",
+				i, i, pg_user_ch_input[i].ch_tx_desc_slot_no_skip);
+			printf("(%d08) Channel %d Arbitration Weight   <1,2,3,4,5,6,7,8>      : %01x\n",
+				i, i, pg_user_ch_input[i].ch_arb_weight);
+			printf("(%d09) Channel %d Operating mode                              : %01x\n",
+				i, i, pg_user_ch_input[i].ch_operating_mode);
+			printf("        <0-Not enabled, 1-AVB, 2-DCB, 3-Generic>\n");
+			printf("(%d10) Channel %d enable debug mode                           : %s\n",
+				i, i, (pg_user_ch_input[i].ch_debug_mode ? "YES" : "NO"));
+			printf("(%d11) Channel %d maximum Tx packet limit                     : %d\n",
+				i, i, pg_user_ch_input[i].ch_max_tx_frame_cnt);
+			printf("\n");
+		}
+		printf("\n");
+		printf("(9999) To quit this menu\n\n");
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		/*0 - 99 for Q0, 100 to 199 for Q1,, etc, hence input limit is number of queues * 100. */
+		input_limit = tx_queue_count * 100;
+
+		if (user_input == 1000) {
+			printf("(1000) Duration to run the Experiment (Seconds) <1 ... 200>   :%02d\n\n",
+				pg_params->duration_of_exp);
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input > 0) && (user_input <= 200))
+				pg_params->duration_of_exp = user_input;
+		}
+		else if (user_input == 1001) {
+			printf("(1001) DMA Channel Enabled                                    :%#02x\n\n",
+				pg_params->dma_ch_en);
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if (user_input < (1 << tx_queue_count))
+				pg_params->dma_ch_en = user_input;
+			else
+				printf("Device supports only %d channels/queues\n",
+						tx_queue_count);
+		}
+		else if (user_input == 1002) {
+			printf("(1002) DMA Tx and Rx Priority Scheme <0/1>                    : %01d\n",
+				pg_params->ch_tx_rx_arb_scheme);
+			printf("     [0 - Weighted Round Robin, 1 - Strict Priority]\n");
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input == 0) || (user_input == 1))
+				pg_params->ch_tx_rx_arb_scheme = user_input;
+			else
+				printf("Invalid input\n");
+		}
+		else if (user_input == 1003) {
+			printf("(1003) DMA Tx has High Priority over Rx <0/1>                 : %01d\n",
+				pg_params->ch_use_tx_high_prio);
+			printf("     [0 - Rx has High Priority, 1 - Tx has High Priority]\n");
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input == 0) || (user_input == 1))
+				pg_params->ch_use_tx_high_prio = user_input;
+			else
+				printf("Invalid input\n");
+		}
+		else if (user_input == 1004) {
+			printf("(1004) DMA Tx and Rx Priority Ratio  <0/1/2/3>                : %01d\n",
+				pg_params->ch_tx_rx_prio_ratio);
+			printf("     [Tx:Rx or Rx:Tx, 0=> 1:1, 1=>2:1, 2=>3:1, 3=>4:1\n"
+			     "                      4=> 5:1, 5=>6:1, 6=>7:1, 7=>8:1]\n");
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input >= 0) && (user_input <= 3))
+				pg_params->ch_tx_rx_prio_ratio = user_input;
+			else
+				printf("Invalid input\n");
+		}
+		else if (user_input == 1005) {
+			printf("(1005) DMA Transmit Arbitration algorithm                    : %01d\n",
+					pg_params->dma_tx_arb_algo);
+			printf("     [0 - Fixed priority\n");
+			printf("      1 - WSP (Weighted strict priority)\n");
+			printf("      2 - WRR (Weighted Round Robin]\n");
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input >= 0) && (user_input <= 2))
+				pg_params->dma_tx_arb_algo = user_input;
+			else
+				printf("Invalid input\n");
+		}
+		else if (user_input == 1006) {
+			printf("(1006) MTL DCB algorithm                                      : %01d\n",
+				pg_params->queue_dcb_algorithm);
+			printf("     [0 - WRR  (Weighted Round Robin)\n"
+						 "      1 - WFQ  (Weighted Fair Queuing)\n"
+						 "      2 - DWRR (Deficit Weighted Round Robin)\n"
+						 "      3 - SP   (Strict Priority)]\n");
+			printf("Your Option here::");
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if ((user_input >= 0) && (user_input <= 3))
+				pg_params->queue_dcb_algorithm = user_input;
+			else
+				printf("Invalid input\n");
+		}
+		else if ((user_input >= 0) && (user_input <= 99)
+				&& (user_input < input_limit)) { /* ch 0 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+					user_input, 0);
+		}
+		else if ((user_input >= 100) && (user_input <= 199)
+				&& (user_input < input_limit)) { /* ch 1 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+					(user_input - 100), 1);
+		}
+		else if ((user_input >= 200) && (user_input <= 299)
+				&& (user_input < input_limit)) { /* ch 2 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 200), 2);
+		}
+		else if ((user_input >= 300) && (user_input <= 399)
+				&& (user_input < input_limit)) { /* ch 3 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 300), 3);
+		}
+		else if ((user_input >= 400) && (user_input <= 499)
+				&& (user_input < input_limit)) { /* ch 4 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 400), 4);
+		}
+		else if ((user_input >= 500) && (user_input <= 599)
+				&& (user_input < input_limit)) { /* ch 5 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 500), 5);
+		}
+		else if ((user_input >= 600) && (user_input <= 699)
+				&& (user_input < input_limit)) { /* ch 6 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 600), 6);
+		}
+		else if ((user_input >= 700) && (user_input <= 799)
+				&& (user_input < input_limit)) { /* ch 7 parameter */
+			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
+				(user_input - 700), 7);
+		}
+	} while (user_input != 9999);
+}
+
+static void DWC_ETH_QOS_gen_pg_report_in_file(struct DWC_ETH_QOS_pg_user_input *pg_params,
+					struct DWC_ETH_QOS_PGStruct *pg_struct, FILE *fp)
+{
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	char user_string[10], *string;
+	int user_input = 0;
+	int i, display_avb_algo = 0, display_dcb_algo;
+	unsigned long totalbytes = 0, totalbits = 0, time = pg_params->duration_of_exp;
+	float ch_bw = 0, total_ch_bw = 0, total_nonav_bw = 0;
+	char *space = "                                                  ";
+
+	if (fp == stdout)
+		system("clear");
+
+	fprintf(fp, "===================================================================\n");
+
+	display_avb_algo = 0;
+	for (i = 0; i < tx_queue_count; i++) {
+		if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
+			display_avb_algo = 1;
+			break;
+		}
+	}
+	display_dcb_algo = 0;
+	for (i = 0; i < tx_queue_count; i++) {
+		if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
+			display_dcb_algo = 1;
+			break;
+		}
+	}
+
+	fprintf(fp, "Duration Of The Experiment (Seconds)       : %02d\n",
+		pg_params->duration_of_exp);
+	fprintf(fp, "DMA Channel Enabled                        : %#02x\n",
+		pg_params->dma_ch_en);
+	fprintf(fp, "Tx:Rx Prio Scheme                          : %s\n",
+		pg_params->ch_tx_rx_arb_scheme ? "SP" : "RR");
+	fprintf(fp, "Tx has High Prio over Rx                   : %s\n",
+		pg_params->ch_use_tx_high_prio ? "YES" : "NO");
+	fprintf(fp, "Tx:Rx Prio Ratio (for RR)                  : %01d\n",
+		pg_params->ch_tx_rx_prio_ratio);
+	fprintf(fp, "DMA Transmit Arbitration algorithm         : %01d\n",
+			pg_params->dma_tx_arb_algo);
+	if (display_dcb_algo) {
+		fprintf(fp, "MTL DCB algorithm                          : ");
+		switch (pg_params->queue_dcb_algorithm) {
+			case eDWC_ETH_QOS_DCB_WRR:
+				fprintf(fp, "WRR (Weighted Round Robin)\n");
+				break;
+			case eDWC_ETH_QOS_DCB_WFQ:
+				fprintf(fp, "WFQ (Weighted Fair Queuing)\n");
+				break;
+			case eDWC_ETH_QOS_DCB_DWRR:
+				fprintf(fp, "DWRR (Deficit Weighted Round Robin)\n");
+				break;
+			case eDWC_ETH_QOS_DCB_SP:
+				fprintf(fp, "SP (Strict Priority)\n");
+				break;
+		}
+	}
+
+	fprintf(fp, "\n");
+	fprintf(fp, "-------------------------------------------------------------------\n");
+	fprintf(fp, "Parameters\n");
+	fprintf(fp, "-------------------------------------------------------------------\n");
+
+	fprintf(fp, "Ch Operating mode\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		switch (pg_ch_input[i].ch_operating_mode) {
+		case eDWC_ETH_QOS_QAVB:
+			string = "Audio Video Bridging";
+			break;
+		case eDWC_ETH_QOS_QDCB:
+			string = "Data Centric Bridging";
+			break;
+		case eDWC_ETH_QOS_QGENERIC:
+			string = "Non DCB (Generic)";
+			break;
+		case eDWC_ETH_QOS_QDISABLED:
+			string = "Queue operating disabled";
+			break;
+		}
+		fprintf(fp, "%s[CH%d]  %s\n",
+			space, i, string);
+	}
+
+	fprintf(fp, "Ch Prio Weights [DMA]\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %01d\n",
+			space, i, pg_ch_input[i].ch_arb_weight);
+	}
+
+	fprintf(fp, "Queue Weights [MTL]\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %03d\n",
+			space, i, pg_ch_input[i].ch_queue_weight);
+	}
+
+	fprintf(fp, "Slot Number Check Enabled ?\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %s\n",
+			space, i, pg_ch_input[i].ch_EnableSlotCheck ? "YES" : "NO");
+	}
+
+	fprintf(fp, "Adv Slot Number Check Enabled ?\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %s\n",
+			space, i, pg_ch_input[i].ch_EnableAdvSlotCheck ? "YES" : "NO");
+	}
+
+	fprintf(fp, "Slot Counter for Avg bit Report\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %01d\n",
+			space, i, pg_ch_input[i].ch_SlotCount);
+	}
+
+	fprintf(fp, "Ch Avb Bits\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %lu\n",
+			space, i, pg_ch_input[i].ch_AvgBits);
+	}
+
+	fprintf(fp, "Ch Avb Bits Interrupt count\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %lu\n",
+			space, i, pg_ch_input[i].ch_AvgBits_interrupt_count);
+	}
+
+	if (display_avb_algo) {
+		fprintf(fp, "Ch AVB Algorithm\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %s\n", space, i,
+						(pg_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP) ?
+						"Strict Priority" : "Credit Based Shaper");
+		}
+
+		fprintf(fp, "Ch uses Credit Control ?\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %s\n",
+						space, i, pg_ch_input[i].ch_CreditControl ? "YES" : "NO");
+		}
+
+		fprintf(fp, "Ch Idle Slope\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %#08x\n",
+						space, i, pg_ch_input[i].ch_IdleSlope);
+		}
+
+		fprintf(fp, "Ch Send Slope\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %#08x\n",
+						space, i, pg_ch_input[i].ch_SendSlope);
+		}
+
+		fprintf(fp, "Ch High Credit\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %#08x\n",
+						space, i, pg_ch_input[i].ch_HiCredit);
+		}
+
+		fprintf(fp, "Ch Low Credit\n");
+		for (i = 0; i < tx_queue_count; i++) {
+			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				fprintf(fp, "%s[CH%d]  %#08x\n",
+						space, i, pg_ch_input[i].ch_LoCredit);
+		}
+	}
+
+	/* required only for debugging */
+	fprintf(fp, "Debug mode\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %s\n",
+			space, i, (pg_ch_input[i].ch_debug_mode ? "YES" : "NO"));
+	}
+
+	/* required only for debugging */
+	fprintf(fp, "Maximum Tx packet limit for debug mode\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %d\n",
+			space, i, pg_ch_input[i].ch_max_tx_frame_cnt);
+	}
+
+	fprintf(fp, "Frame size\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %03d\n",
+			space, i, pg_ch_input[i].ch_frame_size);
+	}
+
+	fprintf(fp, "Ch Tx Frame Count\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %ld\n",
+			space, i, pg_ch_input[i].ch_FramecountTx);
+	}
+
+	fprintf(fp, "Ch Rx Frame Count\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %ld\n",
+			space, i, pg_ch_input[i].ch_FramecountRx);
+	}
+
+	fprintf(fp, "Band Width Allocation\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		fprintf(fp, "%s[CH%d]  %03d%%\n",
+			space, i, pg_ch_input[i].ch_bw);
+	}
+	total_nonav_bw = 0;
+	for (i = 0; i < tx_queue_count; i++) {
+		if (pg_ch_input[i].ch_operating_mode != eDWC_ETH_QOS_QAVB)
+			total_nonav_bw += pg_ch_input[i].ch_bw;
+	}
+	if (total_nonav_bw < 25)
+		printf("WARNING: Total bandwidth for Non-AVB queues has gone below 25%%\n\n");
+
+	fprintf(fp, "Ch BW utilization Achieved (based on Tx)\n");
+	/* total = add_up(queue-rx-frames-count x queue-frame-size)
+	 * individual-queue = ((queue-rx-frame-count x queue-frame-size) x 100) / total */
+	totalbytes = 0;
+	for (i = 0; i < tx_queue_count; i++) {
+		totalbytes += (pg_ch_input[i].ch_FramecountTx * pg_ch_input[i].ch_frame_size);
+	}
+	for (i = 0; i < tx_queue_count; i++) {
+		ch_bw = (pg_ch_input[i].ch_FramecountTx * pg_ch_input[i].ch_frame_size);
+		if (ch_bw)
+			ch_bw = (float)((ch_bw * 100)/totalbytes);
+		fprintf(fp, "%s[CH%d]  %3.2F%%\n",
+			space, i, ch_bw);
+	}
+
+	fprintf(fp, "Ch BW utilization Achieved (based on Rx)\n");
+	/* total = add_up(queue-rx-frames-count x queue-frame-size)
+	 * individual-queue = ((queue-rx-frame-count x queue-frame-size) x 100) / total */
+	totalbytes = 0;
+	for (i = 0; i < rx_queue_count; i++) {
+		totalbytes += (pg_ch_input[i].ch_FramecountRx * pg_ch_input[i].ch_frame_size);
+	}
+	for (i = 0; i < rx_queue_count; i++) {
+		ch_bw = (pg_ch_input[i].ch_FramecountRx * pg_ch_input[i].ch_frame_size);
+		if (ch_bw)
+			ch_bw = (float)((ch_bw * 100)/totalbytes);
+		fprintf(fp, "%s[CH%d]  %3.2F%%\n",
+			space, i, ch_bw);
+	}
+
+	fprintf(fp, "Ch BW utilization Achieved on Tx in Mbps\n");
+	for (i = 0; i < tx_queue_count; i++) {
+		ch_bw = (pg_ch_input[i].ch_FramecountTx * (pg_ch_input[i].ch_frame_size + 8 + 4) * 8);
+		if (ch_bw)
+			ch_bw = (float)((ch_bw/time)/(1024*1024));
+		fprintf(fp, "%s[CH%d]  %3.2F Mbps\n",
+			space, i, ch_bw);
+		total_ch_bw += ch_bw;
+	}
+	fprintf(fp, "%s----------------\n", space);
+	fprintf(fp, "%sTotal %3.2F Mbps\n", space, total_ch_bw);
+
+	fprintf(fp, "===================================================================\n");
+	fprintf(fp, "\n");
+
+	if (fp == stdout) {
+		printf("Enter 99 to return to main menu::");
+		do {
+			fscanf(stdin, "%s", user_string);
+			sscanf(user_string, "%d", &user_input);
+			if (user_input != 99)
+				printf("Invalid option %d\n", user_input);
+		} while(user_input != 99);
+	}
+}
+
+
+static void DWC_ETH_QOS_gen_pg_report(struct DWC_ETH_QOS_pg_user_input *pg_params,
+					struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+#ifdef PGTEST_LOGFILE
+	FILE *fp = NULL;
+	time_t mytime;
+	struct tm *mytm;
+	char file_name[64], time_str[3][8], date_str[2][8];
+#endif
+
+	DWC_ETH_QOS_gen_pg_report_in_file(pg_params, pg_struct, stdout);
+
+#ifdef PGTEST_LOGFILE
+
+	/* log in file */
+	mytime = time(NULL);
+	mytm = localtime(&mytime);
+	if (!mytm) {
+		printf("Error in fetching system time\n");
+		printf("No log file will be created\n");
+		return;
+	}
+
+	sprintf(time_str[0], "%d", (mytm->tm_hour % 12));
+	sprintf(time_str[1], "%d", mytm->tm_min);
+	sprintf(time_str[2], "%d", mytm->tm_sec);
+	switch (mytm->tm_mon) {
+		case 0: sprintf(date_str[0], "Jan"); break;
+		case 1: sprintf(date_str[0], "Feb"); break;
+		case 2: sprintf(date_str[0], "Mar"); break;
+		case 3: sprintf(date_str[0], "Apr"); break;
+		case 4: sprintf(date_str[0], "May"); break;
+		case 5: sprintf(date_str[0], "June"); break;
+		case 6: sprintf(date_str[0], "Jul"); break;
+		case 7: sprintf(date_str[0], "Aug"); break;
+		case 8: sprintf(date_str[0], "Sep"); break;
+		case 9: sprintf(date_str[0], "Oct"); break;
+		case 10: sprintf(date_str[0], "Nov"); break;
+		case 11: sprintf(date_str[0], "Dec"); break;
+	}
+	sprintf(date_str[1], "%d", mytm->tm_mday);
+	sprintf(file_name, "pgtest_%s_%s_%s_%s_%s.log",
+			date_str[0], date_str[1], time_str[0], time_str[1], time_str[2]);
+
+	fp = fopen(file_name, "w+");
+	if (fp == NULL) {
+		printf("Error in file open\n");
+		printf("No log file will be created\n");
+		return;
+	}
+	fprintf(fp, "Report generated on %s %s, %s:%s:%s\n\n",
+			date_str[0], date_str[1], time_str[0], time_str[1], time_str[2]);
+	DWC_ETH_QOS_gen_pg_report_in_file(pg_params, pg_struct, fp);
+	fclose(fp);
+#endif
+
+	return;
+}
+
+static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	char user_string[10];
+	int user_input = 0;
+	int i;
+
+	system("clear");
+	printf("ch_SelMask                          = %#02x\n",
+		pg_struct->ch_SelMask);
+	printf("DurationOfExp                       = %02d\n",
+		pg_struct->DurationOfExp);
+	printf("PrioTagForAV                        = %#02x\n",
+		pg_struct->PrioTagForAV);
+	printf("ch_tx_rx_arb_scheme                 = %s\n",
+		pg_struct->ch_tx_rx_arb_scheme ? "SP" : "RR");
+	printf("ch_use_tx_high_prio                 = %01d\n",
+		pg_struct->ch_use_tx_high_prio);
+	printf("ch_tx_rx_prio_ratio                 = %01d\n",
+		pg_struct->ch_tx_rx_prio_ratio);
+
+	for (i = 0; i < tx_queue_count; i++) {
+		printf("\n");
+		printf("Ch%d ch_arb_weight                  = %01d\n",
+			i, pg_ch_input[i].ch_arb_weight);
+		printf("Ch%d ch_bw                          = %03d%%\n",
+			i, pg_ch_input[i].ch_bw);
+		printf("Ch%d ch_queue_weight                = %03d\n",
+			i, pg_ch_input[i].ch_queue_weight);
+		printf("Ch%d ch_frame_size                  = %03d\n",
+			i, pg_ch_input[i].ch_frame_size);
+		printf("Ch%d ch_EnableSlotCheck             = %s\n",
+			i, pg_ch_input[i].ch_EnableSlotCheck ? "YES" : "NO");
+		printf("Ch%d ch_EnableAdvSlotCheck          = %s\n",
+			i, pg_ch_input[i].ch_EnableAdvSlotCheck ? "YES" : "NO");
+		printf("Ch%d ch_avb_algorithm               = %s\n",
+			i, ((pg_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP) ?
+				"Strict Priority" : "Credit Based Shaper"));
+		printf("Ch%d ch_SlotCount                   = %01d\n",
+			i, pg_ch_input[i].ch_SlotCount);
+		printf("Ch%d ch_CreditControl               = %s\n",
+			i, pg_ch_input[i].ch_CreditControl ? "YES" : "NO");
+		printf("Ch%d ch_SendSlope                   = %#08x\n",
+			i, pg_ch_input[i].ch_SendSlope);
+		printf("Ch%d ch_IdleSlope                   = %#08x\n",
+			i, pg_ch_input[i].ch_IdleSlope);
+		printf("Ch%d ch_HiCredit                    = %#08x\n",
+			i, pg_ch_input[i].ch_HiCredit);
+		printf("Ch%d ch_LoCredit                    = %#08x\n",
+			i, pg_ch_input[i].ch_LoCredit);
+		printf("Ch%d ch_FramecountTx                = %ld\n",
+			i, pg_ch_input[i].ch_FramecountTx);
+		printf("Ch%d ch_FramecountRx                = %ld\n",
+			i, pg_ch_input[i].ch_FramecountRx);
+		printf("Ch%d ch_tx_desc_slot_no_start       = %#01x\n",
+			i, pg_ch_input[i].ch_tx_desc_slot_no_start);
+		printf("Ch%d ch_tx_desc_slot_no_skip        = %#01x\n",
+			i, pg_ch_input[i].ch_tx_desc_slot_no_skip);
+	}
+
+	printf("\n");
+	printf("Enter 99 to return to main menu::");
+	do {
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+		if (user_input != 99)
+			printf("Invalid option %d\n", user_input);
+	} while(user_input != 99);
+}
+
+static int DWC_ETH_QOS_reset_run_parameters(struct DWC_ETH_QOS_PGStruct *pg_struct)
+{
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	unsigned int qInx = 0;
+
+	sleep(1);
+	for (qInx = 0; qInx < tx_queue_count; qInx++) {
+		pg_ch_input[qInx].ch_FramecountTx = 0;
+		pg_ch_input[qInx].ch_AvgBits = 0;
+		pg_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
+		pg_ch_input[qInx].tx_interrupts = 0;
+		pg_ch_input[qInx].interrupt_prints = 0;
+	}
+
+	for (qInx = 0; qInx < rx_queue_count; qInx++) {
+		pg_ch_input[qInx].ch_FramecountRx = 0;
+	}
+
+	return 0;
+}
+
+static int DWC_ETH_QOS_display_progress(int sockfd, char *ifname,
+		struct DWC_ETH_QOS_PGStruct *pg_struct,
+		struct DWC_ETH_QOS_pg_user_input *pg_params)
+{
+	int test_run = 1, total_seconds = 0;
+	int dots = 3, user_input, i, blinker = 0;
+	char user_string[10];
+
+	printf("\n");
+	do {
+		/* print progress */
+		printf("[%3dsecs] ", total_seconds);
+		blinker = (total_seconds % dots);
+		for (i = 0; i < dots; i++) {
+			if (i <= blinker)
+				printf(".");
+			else
+				printf(" ");
+		}
+		fflush(stdout);
+
+		/* wait!! */
+		sleep(1);
+
+		/* clear display for next progress update */
+		printf("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b");
+		for (i = 0; i < dots; i++) {
+			printf("\b");
+		}
+		fflush(stdout);
+		total_seconds++;
+
+		/* check for test complete */
+		test_run = DWC_ETH_QOS_check_test_done(sockfd, ifname);
+	} while (test_run);
+
+	printf("\n");
+	printf("RUN HAS COMPLETED\n");
+	printf("\n");
+	printf("Enter any number to view the run results::");
+	fscanf(stdin, "%s", user_string);
+	sscanf(user_string, "%d", &user_input);
+
+	DWC_ETH_QOS_get_pg_result_from_hw(sockfd, ifname, pg_struct);
+	DWC_ETH_QOS_gen_pg_report(pg_params, pg_struct);
+
+	return 0;
+}
+
+/* returun 0 success and -ve number on failure */
+static int DWC_ETH_QOS_pg_test(int sockfd, char *ifname)
+{
+	struct DWC_ETH_QOS_pg_user_input pg_params;
+	struct DWC_ETH_QOS_PGStruct pg_struct;
+	char user_string[10];
+	int user_input = 0;
+
+	if (tx_queue_count <= 0 || rx_queue_count <= 0) {
+		printf("ERROR: Tx/Rx Queue count is zero\n");
+		return -1;
+	}
+
+	DWC_ETH_QOS_init_default_pg(&pg_params);
+	DWC_ETH_QOS_populate_pg_struct(&pg_params, &pg_struct);
+	DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
+	DWC_ETH_QOS_config_hw_for_pg_test(sockfd, ifname);
+
+	printf("You are about to start PG Testing....\n");
+	do {
+		system("clear");
+		printf("--------------------------------------------\n");
+		printf("Select the Option Below:\n");
+		printf("--------------------------------------------\n");
+
+		printf("(01) Show/Get the PG Parameters\n");
+		printf("(02) Send Parameters to Driver\n");
+		printf("(03) Configure HW for PG Test\n");
+		printf("(04) Run PG test\n");
+		printf("(05) Show PG Test Reports\n");
+		printf("(06) Print PG Structure\n");
+		printf("(99) To quit this menu\n\n");
+
+		printf("Your Option here::");
+		fscanf(stdin, "%s", user_string);
+		sscanf(user_string, "%d", &user_input);
+
+		switch (user_input) {
+		case 01:
+			DWC_ETH_QOS_get_pg_params(&pg_params);
+			DWC_ETH_QOS_populate_pg_struct(&pg_params, &pg_struct);
+			break;
+		case 02:
+			DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
+			break;
+		case 03:
+			DWC_ETH_QOS_config_hw_for_pg_test(sockfd, ifname);
+			break;
+		case 04:
+			/* reset selected PG parameters in app and kernel before run */
+			DWC_ETH_QOS_reset_run_parameters(&pg_struct);
+			DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
+			DWC_ETH_QOS_run_pg_test(sockfd, ifname, &pg_struct);
+			DWC_ETH_QOS_display_progress(sockfd, ifname, &pg_struct, &pg_params);
+			break;
+		case 05:
+			DWC_ETH_QOS_get_pg_result_from_hw(sockfd, ifname, &pg_struct);
+			DWC_ETH_QOS_gen_pg_report(&pg_params, &pg_struct);
+			break;
+		case 06:
+			DWC_ETH_QOS_print_pg_struct(&pg_struct);
+			break;
+		case 99:
+			printf("Exiting....\n");
+			break;
+		default:
+			printf("Sorry, wrong input....\n");
+		}
+	} while(user_input != 99);
+
+	return 0;
+}
+
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+void usage_common(char *cmd)
+{
+	if (print_all) {
+		fprintf(stderr, "  %s",cmd);
+	} else {
+		fprintf(stderr, "\n  %s %s %s <parameters>\n\n", exe_name,
+				(if_name ? if_name : "<interface_name>"),
+				(cmd ? cmd : "<command>"));
+		fprintf(stderr, "  supported parameters ::\n");
+	}
+}
+
+void usage_qInx()
+{
+	if (!print_all)
+		fprintf(stderr, "<qInx> is DMA channel number, it can be 0, "
+				"1, 2, 3, 4, 5, 6, and 7\n\n");
+}
+
+void usage_rxoutervlanstrip()
+{
+	usage_common("rxoutervlanstrip");
+	fprintf(stderr,
+			"  <0|1|2|3>\n"
+			"     [0 - don't strip, 1 - strip if VLAN filter pass,\n"
+			"      2 - strip if VLAN filter fail, 3 - strip always]\n"
+			"\n");
+}
+
+void usage_rxinnervlanstrip()
+{
+	usage_common("rxinnervlanstrip");
+	fprintf(stderr,
+			"  <0|1|2|3>\n"
+			"     [0 - don't strip, 1 - strip if VLAN filter pass,\n"
+			"      2 - strip if VLAN filter fail, 3 - strip always]\n"
+			"\n");
+}
+
+void usage_txvlan_desc()
+{
+	usage_common("txvlan_desc");
+	fprintf(stderr,
+			"  <qInx> <0|1|2|3>\n"
+			"     [0 - No deletion/insertion/replacement, 1 - deletion,\n"
+			"      2 - insertion 3 - replacement]\n"
+			"\n");
+}
+
+void usage_txvlan_reg()
+{
+	usage_common("txvlan_reg");
+	fprintf(stderr,
+			"  <qInx> <0|1|2|3>\n"
+			"     [0 - No deletion/insertion/replacement, 1 - deletion,\n"
+			"      2 - insertion 3 - replacement]\n"
+			"\n");
+}
+
+void usage_sa0_desc()
+{
+	usage_common("sa0_desc");
+	fprintf(stderr,
+			"  <0|1|2>\n"
+			"     [0 - Do not include source address,\n"
+			"      1 - include/insert source address,\n"
+			"      2 - replace the source address]\n"
+			"\n");
+}
+
+void usage_sa1_desc()
+{
+	usage_common("sa1_desc");
+	fprintf(stderr,
+			"  <0|1|2>\n"
+			"     [0 - Do not include source address,\n"
+			"      1 - include/insert source address,\n"
+			"      2 - replace the source address]\n"
+			"\n");
+}
+
+void usage_sa0_reg()
+{
+	usage_common("sa0_reg");
+	fprintf(stderr,
+			"  <0|1|2>\n"
+			"     [0 - Do not include source address,\n"
+			"      1 - include/insert source address,\n"
+			"      2 - replace the source address]\n"
+			"\n");
+}
+
+void usage_sa1_reg()
+{
+	usage_common("sa1_reg");
+	fprintf(stderr,
+			"  <0|1|2>\n"
+			"      [0 - Do not include source address,\n"
+			"       1 - include/insert source address,\n"
+			"       2 - replace the source address]\n"
+			"\n");
+}
+
+void usage_powerup()
+{
+	usage_common("powerup");
+	fprintf(stderr,
+			"  <magic|remote_wakeup>\n"
+			"      [Gets the device out of powerdown mode (Allowed only if h/w supports\n"
+			"       wake up on magic packet or remote wakeup)]\n"
+			"\n");
+}
+
+void usage_powerdown()
+{
+	usage_common("powerdown");
+	fprintf(stderr,
+			"   <magic|remote_wakeup>\n"
+			"     [Puts the device in powerdown mode. Device will powerup on manual 'powerup'\n"
+			"      or on receiving magic packet/remote wakeup packet (Allowed only if\n"
+			"      h/w supports wake up on magic packet or remote wakeup)]\n"
+			"\n");
+}
+
+void usage_rx_threshold()
+{
+	usage_common("rx_threshold");
+	fprintf(stderr,
+			"  <qInx> <32|64|96|128> Bytes [To configure RX FIFO Threshold]\n"
+			"\n");
+}
+
+void usage_tx_threshold()
+{
+	usage_common("tx_threshold");
+	fprintf(stderr,
+			"   <qInx> <32|64|96|128|192|256|384|512> Bytes [To configure TX FIFO Threshold]\n"
+			"\n");
+}
+
+void usage_rsf()
+{
+	usage_common("rsf");
+	fprintf(stderr,
+			"  <qInx> <0|1> [0 - disable Receive Store and Forward Mode,\n"
+			"                1 - enable Receive Store and Forward Mode]\n"
+			"\n");
+}
+
+void usage_tsf()
+{
+	usage_common("tsf");
+	fprintf(stderr,
+			"  <qInx> <0|1> [0 - disable Transmit Store and Forward Mode,\n"
+			"                1 - enable Transmit Store and Forward Mode]\n"
+			"\n");
+}
+
+void usage_osf()
+{
+	usage_common("osf");
+	fprintf(stderr,
+			"  <qInx> <0|1> [0 - disable Transmit DMA to Operate on Second Frame,\n"
+			"                1 - enable Transmit DMA to Operate on Second Frame]\n"
+			"\n");
+}
+
+void usage_incrx_incr()
+{
+	usage_common("incrx_incr");
+	fprintf(stderr,
+			"  <0|1> [0 - select INCRX mode, 1 - select INCR mode]\n"
+			"\n");
+}
+
+void usage_axi_pbl()
+{
+	usage_common("axi_pbl");
+	fprintf(stderr,
+			"  <4|8|16|32|64|128|256> [To configure AXI PBL]\n"
+			"\n");
+}
+
+void usage_axi_worl()
+{
+	usage_common("axi_worl");
+	fprintf(stderr,
+			"  <1 to 31> [To configure AXI Maximum Write Outstanding Request Limit]\n"
+			"\n");
+}
+
+void usage_axi_rorl()
+{
+	usage_common("axi_rorl");
+	fprintf(stderr,
+			"  <1 to 31> [To configure AXI Maximum Read Outstanding Request Limit]\n"
+			"\n");
+}
+
+void usage_rx_pbl()
+{
+	usage_common("rx_pbl");
+	fprintf(stderr,
+			"  <qInx> <1|2|4|8|16|32|128|256> [To configre RX DMA PBL]\n"
+			"\n");
+}
+
+void usage_tx_pbl()
+{
+	usage_common("tx_pbl");
+	fprintf(stderr,
+			"  <qInx> <1|2|4|8|16|32|128|256> [To configre TX DMA PBL]\n"
+			"\n");
+}
+
+void usage_context()
+{
+	usage_common("context");
+	fprintf(stderr,
+			"  <qInx> <0|1>\n"
+			"          [1 to setup a context descriptor with every normal descriptor\n"
+			"           0 to set context descriptor only when VLAN ID Changes]\n"
+			"\n");
+}
+
+void usage_queue_count()
+{
+	usage_common("queue_count");
+	fprintf(stderr,
+			"  [Displays number of Tx and Rx Queues/Channels supported by hardware]\n"
+			"\n");
+}
+
+void usage_dcb()
+{
+	usage_common("dcb");
+	fprintf(stderr,
+			"  <qInx> <algorithm_value> <weights> <max-frame-size>\n"
+			"            [algorithm_value\n"
+			"      		  0 - WRR (Weighted Round Robin)\n"
+			"      		  1 - WFQ (Weighted Fair Queuing)\n"
+			"      		  2 - DWRR (Deficit Weighted Round Robin)\n"
+			"      		  3 - SP (Strict Priority)\n"
+			"      	      weights - value in terms of percentage of BW to be allocated\n"
+			"             max-frame-size - maximum frame size]\n"
+			"             NOTE:\n"
+			"		\"max-frame-size\" is applicable for DWRR only\n"
+			"               \"weigths\" are ignored for SP\n"
+			"\n");
+}
+
+void usage_avb()
+{
+	usage_common("avb");
+	fprintf(stderr,
+			"  <qInx> <algorithm_value> <BW> <credit_control>\n"
+			"             [algorithm value\n"
+			"      		  0 - SP (Strict Priority)\n"
+			"      		  1 - CBS (Credit Based Shaper)\n"
+			"      	      BW - value in terms of percentage of BW to be allocated\n"
+			"      	      credit_control\n"
+			"                 0 - disabled credit_control\n"
+			"                 1 - enabled credit_control]\n"
+			"             NOTE:\n"
+			"		\"credit_control\" is applicable for CBS only\n"
+			"\n");
+}
+
+void usage_pgtest()
+{
+	usage_common("pgtest");
+	fprintf(stderr, "\n\n");
+}
+
+void usage_split_hdr()
+{
+	usage_common("split_hdr");
+	fprintf(stderr,
+			"  <0|1>\n"
+			"            [0 - disable split header, 1 - enable split header]\n"
+			"\n");
+}
+
+void usage_l3_l4_filter()
+{
+	usage_common("l3_l4_filter");
+	fprintf(stderr,
+			"  <0/1>\n"
+			"           [0 - disable l3/l4 filtering, 1 - enable l3/l4 filtering]\n"
+			"\n");
+}
+
+void usage_ip4_filter()
+{
+	usage_common("ip4_filter");
+	fprintf(stderr,
+			"  <filter_no> <src/dst addr> <enable/disable> <perfect/inverse> <ip>\n"
+			"             [filter_no - 0, 1, 2, 3, 4, 5, 6, or 7\n"
+			"              src/dst addr\n"
+			"                0 - src addr match, 1 - dst addr match\n"
+			"              enable/disable\n"
+			"                0 - to disable filter, 1 - to enable filter\n"
+			"              perfect/inverse\n"
+			"                0 - perfect match, 1 - inverse match\n"
+			"              ip - IP address(eq-192.168.1.10)]\n"
+			"\n");
+}
+
+void usage_ip6_filter()
+{
+	usage_common("ip6_filter");
+	fprintf(stderr,
+			"  <filter_no> <src/dst addr> <enable/disable> <perfect/inverse> <ip>\n"
+			"             [filter_no - 0, 1, 2, 3, 4, 5, 6, or 7\n"
+			"              src/dst addr\n"
+			"                0 - src addr match, 1 - dst addr match\n"
+			"              enable/disable\n"
+			"                0 - to disable filter, 1 - to enable filter\n"
+			"              perfect/inverse\n"
+			"                0 - perfect match, 1 - inverse match\n"
+			"              ip - IP address(eq - fe80:0:0:0:f2de:f1ff:fe58:de16)]\n"
+			"\n");
+}
+
+void usage_udp_filter()
+{
+	usage_common("udp_filter");
+	fprintf(stderr,
+			"  <filter_no> <src/dst port> <enable/disable> <perfect/inverse> <port_no>\n"
+			"             [filter_no - 0, 1, 2, 3, 4, 5, 6, or 7\n"
+			"              src/dst port\n"
+			"                0 - src port match, 1 - dst port match\n"
+			"              enable/disable\n"
+			"                0 - to disable filter, 1 - to enable filter\n"
+			"              perfect/inverse\n"
+			"                0 - perfect match, 1 - inverse match\n"
+			"              port_no - port number to be matched]\n"
+			"\n");
+}
+
+void usage_tcp_filter()
+{
+	usage_common("tcp_filter");
+	fprintf(stderr,
+			"  <filter_no> <src/dst port> <enable/disable> <perfect/inverse> <port_no>\n"
+			"             [filter_no - 0, 1, 2, 3, 4, 5, 6, or 7\n"
+			"              src/dst port\n"
+			"                0 - src port match, 1 - dst port match\n"
+			"              enable/disable\n"
+			"                0 - to disable filter, 1 - to enable filter\n"
+			"              perfect/inverse\n"
+			"                0 - perfect match, 1 - inverse match\n"
+			"              port_no - port number to be matched]\n"
+			"\n");
+}
+
+void usage_vlan_filter()
+{
+	usage_common("vlan_filter");
+	fprintf(stderr,
+			"  <enable/disable> <perfect/hash filtering> <perfect/inverse matching>\n"
+			"              [enable/disable\n"
+			"                 0 - to disable, 1 - to enable VLAN filtering\n"
+			"               perfect/hash filtering\n"
+			"                 0 - perfect filtering, 1 - hash filtering\n"
+			"               perfect/inverse matching\n"
+			"                 0 - perfect matching, 1 - inverse matching]\n"
+			"\n");
+}
+
+void usage_l2_da_filter()
+{
+	usage_common("l2_da_filter");
+	fprintf(stderr,
+			"  <perfect/hash filtering> <perfect/inverse match>\n"
+			"            [perfect/hash filtering\n"
+			"               0 - perfect filtering, 1 - hash filtering]\n"
+			"             perfect/inverse matching\n"
+			"               0 - perfect matching, 1 - inverse matching]\n"
+			"\n");
+}
+
+void usage_arp()
+{
+	usage_common("arp");
+	fprintf(stderr,
+			"  <enable/disable>\n"
+			"              [enable/disable\n"
+			"                0 - to disable, 1 - to enable]\n"
+			"\n");
+}
+
+void usage_mac_lb()
+{
+	usage_common("mac_lb");
+	fprintf(stderr,
+			"  <0|1>\n"
+			"            [0 - to disable mac loopback, 1 - to enable mac loopback]\n\n"
+			"            WARNING: Please disable the mac loopback after the testing\n"
+			"                     else it will interrupt the normal operation.\n"
+			"\n");
+}
+
+void usage_pfc()
+{
+	usage_common("pfc");
+	fprintf(stderr,
+			"  <enable|disable>\n"
+			"     [enable/disable\n"
+			"         0 - to disable, 1 - to enable]\n"
+			"\n");
+}
+
+void print_all_usage()
+{
+	fprintf(stderr,
+			"\nUsage:\n"
+			"  %s <interface_name> <command> <parameters>\n\n",exe_name);
+	print_all = 1;
+	usage_qInx();
+	usage_rxoutervlanstrip();
+	usage_rxinnervlanstrip();
+	usage_txvlan_desc();
+	usage_txvlan_reg();
+	usage_sa0_desc();
+	usage_sa1_desc();
+	usage_sa0_reg();
+	usage_sa1_reg();
+	usage_powerup();
+	usage_powerdown();
+	usage_rx_threshold();
+	usage_tx_threshold();
+	usage_rsf();
+	usage_tsf();
+	usage_osf();
+	usage_incrx_incr();
+	usage_axi_pbl();
+	usage_axi_worl();
+	usage_axi_rorl();
+	usage_rx_pbl();
+	usage_tx_pbl();
+	usage_context();
+	usage_queue_count();
+	usage_dcb();
+	usage_avb();
+	usage_pgtest();
+	usage_split_hdr();
+	usage_l3_l4_filter();
+	usage_ip4_filter();
+	usage_ip6_filter();
+	usage_udp_filter();
+	usage_tcp_filter();
+	usage_vlan_filter();
+	usage_l2_da_filter();
+	usage_arp();
+	usage_mac_lb();
+	usage_pfc();
+	print_all = 0;
+}
+
+main(int argc, char *argv[])
+{
+	int ret = 0;
+	int sockfd;
+
+	exe_name = strdup(argv[0]);
+
+	if (argc >= 3) {
+		sockfd = open_socket(argv[1]);
+		if_name = strdup(argv[1]);
+		if (sockfd < 0) {
+			printf("unable to open %s socket\n", argv[1]);
+			return sockfd;
+		}
+
+		tx_queue_count = DWC_ETH_QOS_get_tx_qcnt(sockfd, argv[1]);
+		rx_queue_count = DWC_ETH_QOS_get_rx_qcnt(sockfd, argv[1]);
+		connected_speed = DWC_ETH_QOS_get_connected_speed(sockfd, argv[1]);
+
+		if (0 == strcmp(argv[2], "powerdown")) {
+			if (argc < 4) {
+				usage_powerdown();
+				goto argc_failed;
+			}
+			ret = powerdown_device(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "powerup")) {
+			if (argc < 4) {
+				usage_powerup();
+				goto argc_failed;
+			}
+			ret = powerup_device(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "rx_threshold")) {
+			if (argc < 5) {
+				usage_rx_threshold();
+				goto argc_failed;
+			}
+			ret = config_rx_threshold(sockfd, argv[1], argv[3],
+					argv[4]);
+		} else if (0 == strcmp(argv[2], "tx_threshold")) {
+			if (argc < 5) {
+				usage_tx_threshold();
+				goto argc_failed;
+			}
+			ret = config_tx_threshold(sockfd, argv[1], argv[3],
+					argv[4]);
+		} else if (0 == strcmp(argv[2], "rsf")) {
+			if (argc < 5) {
+				usage_rsf();
+				goto argc_failed;
+			}
+			ret = config_rsf(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "tsf")) {
+			if (argc < 5) {
+				usage_tsf();
+				goto argc_failed;
+			}
+			ret = config_tsf(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "osf")) {
+			if (argc < 5) {
+				usage_osf();
+				goto argc_failed;
+			}
+			ret = config_osf(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "incrx_incr")) {
+			if (argc < 4) {
+				usage_incrx_incr();
+				goto argc_failed;
+			}
+			ret = config_incrx_incr(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "rx_pbl")) {
+			if (argc < 5) {
+				usage_rx_pbl();
+				goto argc_failed;
+			}
+			ret = config_rx_pbl(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "tx_pbl")) {
+			if (argc < 5) {
+				usage_tx_pbl();
+				goto argc_failed;
+			}
+			ret = config_tx_pbl(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "rxoutervlanstrip")) {
+			if (argc < 4) {
+				usage_rxoutervlanstrip();
+				goto argc_failed;
+			}
+			ret = rx_outer_vlan_strip(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "rxinnervlanstrip")) {
+			if (argc < 4) {
+				usage_rxinnervlanstrip();
+				goto argc_failed;
+			}
+			ret = rx_inner_vlan_strip(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "txvlan_desc")) {
+			if (argc < 5) {
+				usage_txvlan_desc();
+				goto argc_failed;
+			}
+			ret = tx_vlan_ctrl_via_desc(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "txvlan_reg")) {
+			if (argc < 5) {
+				usage_txvlan_reg();
+				goto argc_failed;
+			}
+			ret = tx_vlan_ctrl_via_reg(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "sa0_desc")) {
+			if (argc < 4) {
+				usage_sa0_desc();
+				goto argc_failed;
+			}
+			ret = sa0_ctrl_via_desc(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "sa1_desc")) {
+			if (argc < 4) {
+				usage_sa1_desc();
+				goto argc_failed;
+			}
+			ret = sa1_ctrl_via_desc(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "sa0_reg")) {
+			if (argc < 4) {
+				usage_sa0_reg();
+				goto argc_failed;
+			}
+			ret = sa0_ctrl_via_reg(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "sa1_reg")) {
+			if (argc < 4) {
+				usage_sa1_reg();
+				goto argc_failed;
+			}
+			ret = sa1_ctrl_via_reg(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "queue_count")) {
+			DWC_ETH_QOS_get_rx_qcnt(sockfd, argv[1]);
+			DWC_ETH_QOS_get_tx_qcnt(sockfd, argv[1]);
+		} else if (0 == strcmp(argv[2], "context")) {
+			if (argc < 5) {
+				usage_context();
+				goto argc_failed;
+			}
+			ret = setup_context_descriptor(sockfd, argv[1], argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "dcb")) {
+			if (argc < 7) {
+				usage_dcb();
+				goto argc_failed;
+			}
+			ret = program_dcb_algorithm(sockfd, argv[1], argv[3], argv[4],
+					argv[5], argv[6]);
+		} else if (0 == strcmp(argv[2], "avb")) {
+			if (argc < 7) {
+				usage_avb();
+				goto argc_failed;
+			}
+			ret = program_avb_algorithm(sockfd, argv[1], argv[3],
+					argv[4], argv[5], argv[6]);
+		}
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+		else if (0 == strcmp(argv[2], "pgtest")) {
+			ret = DWC_ETH_QOS_pg_test(sockfd, argv[1]);
+		}
+#endif /* DWC_ETH_QOS_CONFIG_PGTEST */
+		else if (0 == strcmp(argv[2], "split_hdr")) {
+			if (argc < 4) {
+				usage_split_hdr();
+				goto argc_failed;
+			}
+			ret = config_rx_split_hdr(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "l3_l4_filter")) {
+			if (argc < 4) {
+				usage_l3_l4_filter();
+				goto argc_failed;
+			}
+			ret = config_l3_l4_filter(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "ip4_filter")) {
+			if (argc < 5) {
+				usage_ip4_filter();
+				goto argc_failed;
+			}
+			if (!strcmp(argv[5], "1")) {
+				if (argc != 8) {
+					usage_ip4_filter();
+					goto argc_failed;
+				}
+
+				ret = config_ipv4_filters(sockfd, argv[1],
+					argv[3], argv[4], argv[5], argv[6],
+					argv[7]);
+			} else {
+				ret = config_ipv4_filters(sockfd, argv[1],
+					argv[3], argv[4], argv[5], NULL, NULL);
+			}
+		} else if (0 == strcmp(argv[2], "ip6_filter")) {
+			if (argc < 5) {
+				usage_ip6_filter();
+				goto argc_failed;
+			}
+			if (!strcmp(argv[5], "1")) {
+				if (argc != 8) {
+					usage_ip6_filter();
+					goto argc_failed;
+				}
+
+				ret = config_ipv6_filters(sockfd, argv[1],
+					argv[3], argv[4], argv[5],
+					argv[6], argv[7]);
+			} else {
+				ret = config_ipv6_filters(sockfd, argv[1],
+					argv[3], argv[4], argv[5], NULL, NULL);
+			}
+		} else if ((0 == strcmp(argv[2], "udp_filter") ||
+			 (0 == strcmp(argv[2], "tcp_filter")))) {
+			if (argc < 5) {
+				if (0 == strcmp(argv[2], "tcp_filter"))
+					usage_tcp_filter();
+				else
+					usage_udp_filter();
+				goto argc_failed;
+			}
+			if (!strcmp(argv[5], "1")) {
+				if (argc != 8) {
+					if (0 == strcmp(argv[2], "tcp_filter"))
+						usage_tcp_filter();
+					else
+						usage_udp_filter();
+					goto argc_failed;
+				}
+
+				ret = config_l4_filters(sockfd, argv[1],
+					argv[2], argv[3], argv[4], argv[5],
+					argv[6], argv[7]);
+			} else {
+				ret = config_l4_filters(sockfd, argv[1],
+					argv[2], argv[3], argv[4], argv[5],
+					NULL, NULL);
+			}
+		} else if (0 == strcmp(argv[2], "vlan_filter")) {
+			if (argc < 4) {
+				usage_vlan_filter();
+				goto argc_failed;
+			}
+			if (!strcmp(argv[3], "1")) {
+				if (argc != 6) {
+					usage_vlan_filter();
+					goto argc_failed;
+				}
+
+				ret = config_vlan_filters(sockfd, argv[1],
+					argv[3], argv[4], argv[5]);
+			} else {
+				ret = config_vlan_filters(sockfd, argv[1],
+					argv[3], NULL, NULL);
+			}
+		} else if (0 == strcmp(argv[2], "l2_da_filter")) {
+			if (argc < 5) {
+				usage_l2_da_filter();
+				goto argc_failed;
+			}
+
+			ret = config_l2_da_filtering(sockfd, argv[1],
+					 argv[3], argv[4]);
+		} else if (0 == strcmp(argv[2], "arp")) {
+			if (argc < 4) {
+				usage_arp();
+				goto argc_failed;
+			}
+
+			ret = config_arp_offload(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "axi_pbl")) {
+			if (argc < 4) {
+				usage_axi_pbl();
+				goto argc_failed;
+			}
+
+			ret = config_axi_pbl(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "axi_worl")) {
+			if (argc < 4) {
+				usage_axi_worl();
+				goto argc_failed;
+			}
+
+			ret = config_axi_worl(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "axi_rorl")) {
+			if (argc < 4) {
+				usage_axi_rorl();
+				goto argc_failed;
+			}
+
+			ret = config_axi_rorl(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "mac_lb")) {
+			if (argc < 4) {
+				usage_mac_lb();
+				goto argc_failed;
+			}
+
+			ret = config_loopback_mode(sockfd, argv[1], argv[3]);
+		} else if (0 == strcmp(argv[2], "pfc")) {
+			if (argc < 4) {
+				usage_pfc();
+				goto argc_failed;
+			}
+
+			ret = config_pfc(sockfd, argv[1], argv[3]);
+		} else {
+			print_all_usage();
+		}
+
+		close_socket(sockfd);
+
+	} else {
+		print_all_usage();
+	}
+
+	return ret;
+
+argc_failed:
+	printf("PLEASE SPECIFY CORRECT NUMBER OF ARGUMENTS\n");
+	close_socket(sockfd);
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_debug_operation.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_debug_operation.c
new file mode 100755
index 0000000..0d30c03
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_debug_operation.c
@@ -0,0 +1,28746 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#include <linux/fs.h>
+#include <linux/debugfs.h>
+#include "DWC_ETH_QOS_yheader.h"
+
+extern ULONG dwc_eth_qos_pci_base_addr;
+
+#include "DWC_ETH_QOS_yregacc.h"
+
+#define DEBUGFS_MAX_SIZE 100
+static char debugfs_buf[DEBUGFS_MAX_SIZE];
+
+struct DWC_ETH_QOS_prv_data *pdata;
+
+/*
+ * This structure hold information about the /debug file
+ */
+static struct dentry *dir;
+
+/* Variables used to store the register value. */
+static unsigned int REGISTERS_val;
+static unsigned int MAC_MA32_127LR127_val;
+static unsigned int MAC_MA32_127LR126_val;
+static unsigned int MAC_MA32_127LR125_val;
+static unsigned int MAC_MA32_127LR124_val;
+static unsigned int MAC_MA32_127LR123_val;
+static unsigned int MAC_MA32_127LR122_val;
+static unsigned int MAC_MA32_127LR121_val;
+static unsigned int MAC_MA32_127LR120_val;
+static unsigned int MAC_MA32_127LR119_val;
+static unsigned int MAC_MA32_127LR118_val;
+static unsigned int MAC_MA32_127LR117_val;
+static unsigned int MAC_MA32_127LR116_val;
+static unsigned int MAC_MA32_127LR115_val;
+static unsigned int MAC_MA32_127LR114_val;
+static unsigned int MAC_MA32_127LR113_val;
+static unsigned int MAC_MA32_127LR112_val;
+static unsigned int MAC_MA32_127LR111_val;
+static unsigned int MAC_MA32_127LR110_val;
+static unsigned int MAC_MA32_127LR109_val;
+static unsigned int MAC_MA32_127LR108_val;
+static unsigned int MAC_MA32_127LR107_val;
+static unsigned int MAC_MA32_127LR106_val;
+static unsigned int MAC_MA32_127LR105_val;
+static unsigned int MAC_MA32_127LR104_val;
+static unsigned int MAC_MA32_127LR103_val;
+static unsigned int MAC_MA32_127LR102_val;
+static unsigned int MAC_MA32_127LR101_val;
+static unsigned int MAC_MA32_127LR100_val;
+static unsigned int MAC_MA32_127LR99_val;
+static unsigned int MAC_MA32_127LR98_val;
+static unsigned int MAC_MA32_127LR97_val;
+static unsigned int MAC_MA32_127LR96_val;
+static unsigned int MAC_MA32_127LR95_val;
+static unsigned int MAC_MA32_127LR94_val;
+static unsigned int MAC_MA32_127LR93_val;
+static unsigned int MAC_MA32_127LR92_val;
+static unsigned int MAC_MA32_127LR91_val;
+static unsigned int MAC_MA32_127LR90_val;
+static unsigned int MAC_MA32_127LR89_val;
+static unsigned int MAC_MA32_127LR88_val;
+static unsigned int MAC_MA32_127LR87_val;
+static unsigned int MAC_MA32_127LR86_val;
+static unsigned int MAC_MA32_127LR85_val;
+static unsigned int MAC_MA32_127LR84_val;
+static unsigned int MAC_MA32_127LR83_val;
+static unsigned int MAC_MA32_127LR82_val;
+static unsigned int MAC_MA32_127LR81_val;
+static unsigned int MAC_MA32_127LR80_val;
+static unsigned int MAC_MA32_127LR79_val;
+static unsigned int MAC_MA32_127LR78_val;
+static unsigned int MAC_MA32_127LR77_val;
+static unsigned int MAC_MA32_127LR76_val;
+static unsigned int MAC_MA32_127LR75_val;
+static unsigned int MAC_MA32_127LR74_val;
+static unsigned int MAC_MA32_127LR73_val;
+static unsigned int MAC_MA32_127LR72_val;
+static unsigned int MAC_MA32_127LR71_val;
+static unsigned int MAC_MA32_127LR70_val;
+static unsigned int MAC_MA32_127LR69_val;
+static unsigned int MAC_MA32_127LR68_val;
+static unsigned int MAC_MA32_127LR67_val;
+static unsigned int MAC_MA32_127LR66_val;
+static unsigned int MAC_MA32_127LR65_val;
+static unsigned int MAC_MA32_127LR64_val;
+static unsigned int MAC_MA32_127LR63_val;
+static unsigned int MAC_MA32_127LR62_val;
+static unsigned int MAC_MA32_127LR61_val;
+static unsigned int MAC_MA32_127LR60_val;
+static unsigned int MAC_MA32_127LR59_val;
+static unsigned int MAC_MA32_127LR58_val;
+static unsigned int MAC_MA32_127LR57_val;
+static unsigned int MAC_MA32_127LR56_val;
+static unsigned int MAC_MA32_127LR55_val;
+static unsigned int MAC_MA32_127LR54_val;
+static unsigned int MAC_MA32_127LR53_val;
+static unsigned int MAC_MA32_127LR52_val;
+static unsigned int MAC_MA32_127LR51_val;
+static unsigned int MAC_MA32_127LR50_val;
+static unsigned int MAC_MA32_127LR49_val;
+static unsigned int MAC_MA32_127LR48_val;
+static unsigned int MAC_MA32_127LR47_val;
+static unsigned int MAC_MA32_127LR46_val;
+static unsigned int MAC_MA32_127LR45_val;
+static unsigned int MAC_MA32_127LR44_val;
+static unsigned int MAC_MA32_127LR43_val;
+static unsigned int MAC_MA32_127LR42_val;
+static unsigned int MAC_MA32_127LR41_val;
+static unsigned int MAC_MA32_127LR40_val;
+static unsigned int MAC_MA32_127LR39_val;
+static unsigned int MAC_MA32_127LR38_val;
+static unsigned int MAC_MA32_127LR37_val;
+static unsigned int MAC_MA32_127LR36_val;
+static unsigned int MAC_MA32_127LR35_val;
+static unsigned int MAC_MA32_127LR34_val;
+static unsigned int MAC_MA32_127LR33_val;
+static unsigned int MAC_MA32_127LR32_val;
+static unsigned int MAC_MA32_127HR127_val;
+static unsigned int MAC_MA32_127HR126_val;
+static unsigned int MAC_MA32_127HR125_val;
+static unsigned int MAC_MA32_127HR124_val;
+static unsigned int MAC_MA32_127HR123_val;
+static unsigned int MAC_MA32_127HR122_val;
+static unsigned int MAC_MA32_127HR121_val;
+static unsigned int MAC_MA32_127HR120_val;
+static unsigned int MAC_MA32_127HR119_val;
+static unsigned int MAC_MA32_127HR118_val;
+static unsigned int MAC_MA32_127HR117_val;
+static unsigned int MAC_MA32_127HR116_val;
+static unsigned int MAC_MA32_127HR115_val;
+static unsigned int MAC_MA32_127HR114_val;
+static unsigned int MAC_MA32_127HR113_val;
+static unsigned int MAC_MA32_127HR112_val;
+static unsigned int MAC_MA32_127HR111_val;
+static unsigned int MAC_MA32_127HR110_val;
+static unsigned int MAC_MA32_127HR109_val;
+static unsigned int MAC_MA32_127HR108_val;
+static unsigned int MAC_MA32_127HR107_val;
+static unsigned int MAC_MA32_127HR106_val;
+static unsigned int MAC_MA32_127HR105_val;
+static unsigned int MAC_MA32_127HR104_val;
+static unsigned int MAC_MA32_127HR103_val;
+static unsigned int MAC_MA32_127HR102_val;
+static unsigned int MAC_MA32_127HR101_val;
+static unsigned int MAC_MA32_127HR100_val;
+static unsigned int MAC_MA32_127HR99_val;
+static unsigned int MAC_MA32_127HR98_val;
+static unsigned int MAC_MA32_127HR97_val;
+static unsigned int MAC_MA32_127HR96_val;
+static unsigned int MAC_MA32_127HR95_val;
+static unsigned int MAC_MA32_127HR94_val;
+static unsigned int MAC_MA32_127HR93_val;
+static unsigned int MAC_MA32_127HR92_val;
+static unsigned int MAC_MA32_127HR91_val;
+static unsigned int MAC_MA32_127HR90_val;
+static unsigned int MAC_MA32_127HR89_val;
+static unsigned int MAC_MA32_127HR88_val;
+static unsigned int MAC_MA32_127HR87_val;
+static unsigned int MAC_MA32_127HR86_val;
+static unsigned int MAC_MA32_127HR85_val;
+static unsigned int MAC_MA32_127HR84_val;
+static unsigned int MAC_MA32_127HR83_val;
+static unsigned int MAC_MA32_127HR82_val;
+static unsigned int MAC_MA32_127HR81_val;
+static unsigned int MAC_MA32_127HR80_val;
+static unsigned int MAC_MA32_127HR79_val;
+static unsigned int MAC_MA32_127HR78_val;
+static unsigned int MAC_MA32_127HR77_val;
+static unsigned int MAC_MA32_127HR76_val;
+static unsigned int MAC_MA32_127HR75_val;
+static unsigned int MAC_MA32_127HR74_val;
+static unsigned int MAC_MA32_127HR73_val;
+static unsigned int MAC_MA32_127HR72_val;
+static unsigned int MAC_MA32_127HR71_val;
+static unsigned int MAC_MA32_127HR70_val;
+static unsigned int MAC_MA32_127HR69_val;
+static unsigned int MAC_MA32_127HR68_val;
+static unsigned int MAC_MA32_127HR67_val;
+static unsigned int MAC_MA32_127HR66_val;
+static unsigned int MAC_MA32_127HR65_val;
+static unsigned int MAC_MA32_127HR64_val;
+static unsigned int MAC_MA32_127HR63_val;
+static unsigned int MAC_MA32_127HR62_val;
+static unsigned int MAC_MA32_127HR61_val;
+static unsigned int MAC_MA32_127HR60_val;
+static unsigned int MAC_MA32_127HR59_val;
+static unsigned int MAC_MA32_127HR58_val;
+static unsigned int MAC_MA32_127HR57_val;
+static unsigned int MAC_MA32_127HR56_val;
+static unsigned int MAC_MA32_127HR55_val;
+static unsigned int MAC_MA32_127HR54_val;
+static unsigned int MAC_MA32_127HR53_val;
+static unsigned int MAC_MA32_127HR52_val;
+static unsigned int MAC_MA32_127HR51_val;
+static unsigned int MAC_MA32_127HR50_val;
+static unsigned int MAC_MA32_127HR49_val;
+static unsigned int MAC_MA32_127HR48_val;
+static unsigned int MAC_MA32_127HR47_val;
+static unsigned int MAC_MA32_127HR46_val;
+static unsigned int MAC_MA32_127HR45_val;
+static unsigned int MAC_MA32_127HR44_val;
+static unsigned int MAC_MA32_127HR43_val;
+static unsigned int MAC_MA32_127HR42_val;
+static unsigned int MAC_MA32_127HR41_val;
+static unsigned int MAC_MA32_127HR40_val;
+static unsigned int MAC_MA32_127HR39_val;
+static unsigned int MAC_MA32_127HR38_val;
+static unsigned int MAC_MA32_127HR37_val;
+static unsigned int MAC_MA32_127HR36_val;
+static unsigned int MAC_MA32_127HR35_val;
+static unsigned int MAC_MA32_127HR34_val;
+static unsigned int MAC_MA32_127HR33_val;
+static unsigned int MAC_MA32_127HR32_val;
+static unsigned int MAC_MA1_31LR31_val;
+static unsigned int MAC_MA1_31LR30_val;
+static unsigned int MAC_MA1_31LR29_val;
+static unsigned int MAC_MA1_31LR28_val;
+static unsigned int MAC_MA1_31LR27_val;
+static unsigned int MAC_MA1_31LR26_val;
+static unsigned int MAC_MA1_31LR25_val;
+static unsigned int MAC_MA1_31LR24_val;
+static unsigned int MAC_MA1_31LR23_val;
+static unsigned int MAC_MA1_31LR22_val;
+static unsigned int MAC_MA1_31LR21_val;
+static unsigned int MAC_MA1_31LR20_val;
+static unsigned int MAC_MA1_31LR19_val;
+static unsigned int MAC_MA1_31LR18_val;
+static unsigned int MAC_MA1_31LR17_val;
+static unsigned int MAC_MA1_31LR16_val;
+static unsigned int MAC_MA1_31LR15_val;
+static unsigned int MAC_MA1_31LR14_val;
+static unsigned int MAC_MA1_31LR13_val;
+static unsigned int MAC_MA1_31LR12_val;
+static unsigned int MAC_MA1_31LR11_val;
+static unsigned int MAC_MA1_31LR10_val;
+static unsigned int MAC_MA1_31LR9_val;
+static unsigned int MAC_MA1_31LR8_val;
+static unsigned int MAC_MA1_31LR7_val;
+static unsigned int MAC_MA1_31LR6_val;
+static unsigned int MAC_MA1_31LR5_val;
+static unsigned int MAC_MA1_31LR4_val;
+static unsigned int MAC_MA1_31LR3_val;
+static unsigned int MAC_MA1_31LR2_val;
+static unsigned int MAC_MA1_31LR1_val;
+static unsigned int MAC_MA1_31HR31_val;
+static unsigned int MAC_MA1_31HR30_val;
+static unsigned int MAC_MA1_31HR29_val;
+static unsigned int MAC_MA1_31HR28_val;
+static unsigned int MAC_MA1_31HR27_val;
+static unsigned int MAC_MA1_31HR26_val;
+static unsigned int MAC_MA1_31HR25_val;
+static unsigned int MAC_MA1_31HR24_val;
+static unsigned int MAC_MA1_31HR23_val;
+static unsigned int MAC_MA1_31HR22_val;
+static unsigned int MAC_MA1_31HR21_val;
+static unsigned int MAC_MA1_31HR20_val;
+static unsigned int MAC_MA1_31HR19_val;
+static unsigned int MAC_MA1_31HR18_val;
+static unsigned int MAC_MA1_31HR17_val;
+static unsigned int MAC_MA1_31HR16_val;
+static unsigned int MAC_MA1_31HR15_val;
+static unsigned int MAC_MA1_31HR14_val;
+static unsigned int MAC_MA1_31HR13_val;
+static unsigned int MAC_MA1_31HR12_val;
+static unsigned int MAC_MA1_31HR11_val;
+static unsigned int MAC_MA1_31HR10_val;
+static unsigned int MAC_MA1_31HR9_val;
+static unsigned int MAC_MA1_31HR8_val;
+static unsigned int MAC_MA1_31HR7_val;
+static unsigned int MAC_MA1_31HR6_val;
+static unsigned int MAC_MA1_31HR5_val;
+static unsigned int MAC_MA1_31HR4_val;
+static unsigned int MAC_MA1_31HR3_val;
+static unsigned int MAC_MA1_31HR2_val;
+static unsigned int MAC_MA1_31HR1_val;
+static unsigned int MAC_ARPA_val;
+static unsigned int MAC_L3A3R7_val;
+static unsigned int MAC_L3A3R6_val;
+static unsigned int MAC_L3A3R5_val;
+static unsigned int MAC_L3A3R4_val;
+static unsigned int MAC_L3A3R3_val;
+static unsigned int MAC_L3A3R2_val;
+static unsigned int MAC_L3A3R1_val;
+static unsigned int MAC_L3A3R0_val;
+static unsigned int MAC_L3A2R7_val;
+static unsigned int MAC_L3A2R6_val;
+static unsigned int MAC_L3A2R5_val;
+static unsigned int MAC_L3A2R4_val;
+static unsigned int MAC_L3A2R3_val;
+static unsigned int MAC_L3A2R2_val;
+static unsigned int MAC_L3A2R1_val;
+static unsigned int MAC_L3A2R0_val;
+static unsigned int MAC_L3A1R7_val;
+static unsigned int MAC_L3A1R6_val;
+static unsigned int MAC_L3A1R5_val;
+static unsigned int MAC_L3A1R4_val;
+static unsigned int MAC_L3A1R3_val;
+static unsigned int MAC_L3A1R2_val;
+static unsigned int MAC_L3A1R1_val;
+static unsigned int MAC_L3A1R0_val;
+static unsigned int MAC_L3A0R7_val;
+static unsigned int MAC_L3A0R6_val;
+static unsigned int MAC_L3A0R5_val;
+static unsigned int MAC_L3A0R4_val;
+static unsigned int MAC_L3A0R3_val;
+static unsigned int MAC_L3A0R2_val;
+static unsigned int MAC_L3A0R1_val;
+static unsigned int MAC_L3A0R0_val;
+static unsigned int MAC_L4AR7_val;
+static unsigned int MAC_L4AR6_val;
+static unsigned int MAC_L4AR5_val;
+static unsigned int MAC_L4AR4_val;
+static unsigned int MAC_L4AR3_val;
+static unsigned int MAC_L4AR2_val;
+static unsigned int MAC_L4AR1_val;
+static unsigned int MAC_L4AR0_val;
+static unsigned int MAC_L3L4CR7_val;
+static unsigned int MAC_L3L4CR6_val;
+static unsigned int MAC_L3L4CR5_val;
+static unsigned int MAC_L3L4CR4_val;
+static unsigned int MAC_L3L4CR3_val;
+static unsigned int MAC_L3L4CR2_val;
+static unsigned int MAC_L3L4CR1_val;
+static unsigned int MAC_L3L4CR0_val;
+static unsigned int MAC_GPIOS_val;
+static unsigned int MAC_PCS_val;
+static unsigned int MAC_TES_val;
+static unsigned int MAC_AE_val;
+static unsigned int MAC_ALPA_val;
+static unsigned int MAC_AAD_val;
+static unsigned int MAC_ANS_val;
+static unsigned int MAC_ANC_val;
+static unsigned int MAC_LPC_val;
+static unsigned int MAC_LPS_val;
+static unsigned int MAC_PPS_WIDTH3_val;
+static unsigned int MAC_PPS_WIDTH2_val;
+static unsigned int MAC_PPS_WIDTH1_val;
+static unsigned int MAC_PPS_WIDTH0_val;
+static unsigned int MAC_PPS_INTVAL3_val;
+static unsigned int MAC_PPS_INTVAL2_val;
+static unsigned int MAC_PPS_INTVAL1_val;
+static unsigned int MAC_PPS_INTVAL0_val;
+static unsigned int MAC_PPS_TTNS3_val;
+static unsigned int MAC_PPS_TTNS2_val;
+static unsigned int MAC_PPS_TTNS1_val;
+static unsigned int MAC_PPS_TTNS0_val;
+static unsigned int MAC_PPS_TTS3_val;
+static unsigned int MAC_PPS_TTS2_val;
+static unsigned int MAC_PPS_TTS1_val;
+static unsigned int MAC_PPS_TTS0_val;
+static unsigned int MAC_PPSC_val;
+static unsigned int MAC_TEAC_val;
+static unsigned int MAC_TIAC_val;
+static unsigned int MAC_ATS_val;
+static unsigned int MAC_ATN_val;
+static unsigned int MAC_AC_val;
+static unsigned int MAC_TTN_val;
+static unsigned int MAC_TTSN_val;
+static unsigned int MAC_TSR_val;
+static unsigned int MAC_STHWR_val;
+static unsigned int MAC_TAR_val;
+static unsigned int MAC_STNSUR_val;
+static unsigned int MAC_STSUR_val;
+static unsigned int MAC_STNSR_val;
+static unsigned int MAC_STSR_val;
+static unsigned int MAC_SSIR_val;
+static unsigned int MAC_TCR_val;
+static unsigned int MTL_DSR_val;
+static unsigned int MAC_RWPFFR_val;
+static unsigned int MAC_RTSR_val;
+static unsigned int MTL_IER_val;
+static unsigned int MTL_QRCR7_val;
+static unsigned int MTL_QRCR6_val;
+static unsigned int MTL_QRCR5_val;
+static unsigned int MTL_QRCR4_val;
+static unsigned int MTL_QRCR3_val;
+static unsigned int MTL_QRCR2_val;
+static unsigned int MTL_QRCR1_val;
+static unsigned int MTL_QRDR7_val;
+static unsigned int MTL_QRDR6_val;
+static unsigned int MTL_QRDR5_val;
+static unsigned int MTL_QRDR4_val;
+static unsigned int MTL_QRDR3_val;
+static unsigned int MTL_QRDR2_val;
+static unsigned int MTL_QRDR1_val;
+static unsigned int MTL_QOCR7_val;
+static unsigned int MTL_QOCR6_val;
+static unsigned int MTL_QOCR5_val;
+static unsigned int MTL_QOCR4_val;
+static unsigned int MTL_QOCR3_val;
+static unsigned int MTL_QOCR2_val;
+static unsigned int MTL_QOCR1_val;
+static unsigned int MTL_QROMR7_val;
+static unsigned int MTL_QROMR6_val;
+static unsigned int MTL_QROMR5_val;
+static unsigned int MTL_QROMR4_val;
+static unsigned int MTL_QROMR3_val;
+static unsigned int MTL_QROMR2_val;
+static unsigned int MTL_QROMR1_val;
+static unsigned int MTL_QLCR7_val;
+static unsigned int MTL_QLCR6_val;
+static unsigned int MTL_QLCR5_val;
+static unsigned int MTL_QLCR4_val;
+static unsigned int MTL_QLCR3_val;
+static unsigned int MTL_QLCR2_val;
+static unsigned int MTL_QLCR1_val;
+static unsigned int MTL_QHCR7_val;
+static unsigned int MTL_QHCR6_val;
+static unsigned int MTL_QHCR5_val;
+static unsigned int MTL_QHCR4_val;
+static unsigned int MTL_QHCR3_val;
+static unsigned int MTL_QHCR2_val;
+static unsigned int MTL_QHCR1_val;
+static unsigned int MTL_QSSCR7_val;
+static unsigned int MTL_QSSCR6_val;
+static unsigned int MTL_QSSCR5_val;
+static unsigned int MTL_QSSCR4_val;
+static unsigned int MTL_QSSCR3_val;
+static unsigned int MTL_QSSCR2_val;
+static unsigned int MTL_QSSCR1_val;
+static unsigned int MTL_QW7_val;
+static unsigned int MTL_QW6_val;
+static unsigned int MTL_QW5_val;
+static unsigned int MTL_QW4_val;
+static unsigned int MTL_QW3_val;
+static unsigned int MTL_QW2_val;
+static unsigned int MTL_QW1_val;
+static unsigned int MTL_QESR7_val;
+static unsigned int MTL_QESR6_val;
+static unsigned int MTL_QESR5_val;
+static unsigned int MTL_QESR4_val;
+static unsigned int MTL_QESR3_val;
+static unsigned int MTL_QESR2_val;
+static unsigned int MTL_QESR1_val;
+static unsigned int MTL_QECR7_val;
+static unsigned int MTL_QECR6_val;
+static unsigned int MTL_QECR5_val;
+static unsigned int MTL_QECR4_val;
+static unsigned int MTL_QECR3_val;
+static unsigned int MTL_QECR2_val;
+static unsigned int MTL_QECR1_val;
+static unsigned int MTL_QTDR7_val;
+static unsigned int MTL_QTDR6_val;
+static unsigned int MTL_QTDR5_val;
+static unsigned int MTL_QTDR4_val;
+static unsigned int MTL_QTDR3_val;
+static unsigned int MTL_QTDR2_val;
+static unsigned int MTL_QTDR1_val;
+static unsigned int MTL_QUCR7_val;
+static unsigned int MTL_QUCR6_val;
+static unsigned int MTL_QUCR5_val;
+static unsigned int MTL_QUCR4_val;
+static unsigned int MTL_QUCR3_val;
+static unsigned int MTL_QUCR2_val;
+static unsigned int MTL_QUCR1_val;
+static unsigned int MTL_QTOMR7_val;
+static unsigned int MTL_QTOMR6_val;
+static unsigned int MTL_QTOMR5_val;
+static unsigned int MTL_QTOMR4_val;
+static unsigned int MTL_QTOMR3_val;
+static unsigned int MTL_QTOMR2_val;
+static unsigned int MTL_QTOMR1_val;
+static unsigned int MAC_PMTCSR_val;
+static unsigned int MMC_RXICMP_ERR_OCTETS_val;
+static unsigned int MMC_RXICMP_GD_OCTETS_val;
+static unsigned int MMC_RXTCP_ERR_OCTETS_val;
+static unsigned int MMC_RXTCP_GD_OCTETS_val;
+static unsigned int MMC_RXUDP_ERR_OCTETS_val;
+static unsigned int MMC_RXUDP_GD_OCTETS_val;
+static unsigned int MMC_RXIPV6_NOPAY_OCTETS_val;
+static unsigned int MMC_RXIPV6_HDRERR_OCTETS_val;
+static unsigned int MMC_RXIPV6_GD_OCTETS_val;
+static unsigned int MMC_RXIPV4_UDSBL_OCTETS_val;
+static unsigned int MMC_RXIPV4_FRAG_OCTETS_val;
+static unsigned int MMC_RXIPV4_NOPAY_OCTETS_val;
+static unsigned int MMC_RXIPV4_HDRERR_OCTETS_val;
+static unsigned int MMC_RXIPV4_GD_OCTETS_val;
+static unsigned int MMC_RXICMP_ERR_PKTS_val;
+static unsigned int MMC_RXICMP_GD_PKTS_val;
+static unsigned int MMC_RXTCP_ERR_PKTS_val;
+static unsigned int MMC_RXTCP_GD_PKTS_val;
+static unsigned int MMC_RXUDP_ERR_PKTS_val;
+static unsigned int MMC_RXUDP_GD_PKTS_val;
+static unsigned int MMC_RXIPV6_NOPAY_PKTS_val;
+static unsigned int MMC_RXIPV6_HDRERR_PKTS_val;
+static unsigned int MMC_RXIPV6_GD_PKTS_val;
+static unsigned int MMC_RXIPV4_UBSBL_PKTS_val;
+static unsigned int MMC_RXIPV4_FRAG_PKTS_val;
+static unsigned int MMC_RXIPV4_NOPAY_PKTS_val;
+static unsigned int MMC_RXIPV4_HDRERR_PKTS_val;
+static unsigned int MMC_RXIPV4_GD_PKTS_val;
+static unsigned int MMC_RXCTRLPACKETS_G_val;
+static unsigned int MMC_RXRCVERROR_val;
+static unsigned int MMC_RXWATCHDOGERROR_val;
+static unsigned int MMC_RXVLANPACKETS_GB_val;
+static unsigned int MMC_RXFIFOOVERFLOW_val;
+static unsigned int MMC_RXPAUSEPACKETS_val;
+static unsigned int MMC_RXOUTOFRANGETYPE_val;
+static unsigned int MMC_RXLENGTHERROR_val;
+static unsigned int MMC_RXUNICASTPACKETS_G_val;
+static unsigned int MMC_RX1024TOMAXOCTETS_GB_val;
+static unsigned int MMC_RX512TO1023OCTETS_GB_val;
+static unsigned int MMC_RX256TO511OCTETS_GB_val;
+static unsigned int MMC_RX128TO255OCTETS_GB_val;
+static unsigned int MMC_RX65TO127OCTETS_GB_val;
+static unsigned int MMC_RX64OCTETS_GB_val;
+static unsigned int MMC_RXOVERSIZE_G_val;
+static unsigned int MMC_RXUNDERSIZE_G_val;
+static unsigned int MMC_RXJABBERERROR_val;
+static unsigned int MMC_RXRUNTERROR_val;
+static unsigned int MMC_RXALIGNMENTERROR_val;
+static unsigned int MMC_RXCRCERROR_val;
+static unsigned int MMC_RXMULTICASTPACKETS_G_val;
+static unsigned int MMC_RXBROADCASTPACKETS_G_val;
+static unsigned int MMC_RXOCTETCOUNT_G_val;
+static unsigned int MMC_RXOCTETCOUNT_GB_val;
+static unsigned int MMC_RXPACKETCOUNT_GB_val;
+static unsigned int MMC_TXOVERSIZE_G_val;
+static unsigned int MMC_TXVLANPACKETS_G_val;
+static unsigned int MMC_TXPAUSEPACKETS_val;
+static unsigned int MMC_TXEXCESSDEF_val;
+static unsigned int MMC_TXPACKETSCOUNT_G_val;
+static unsigned int MMC_TXOCTETCOUNT_G_val;
+static unsigned int MMC_TXCARRIERERROR_val;
+static unsigned int MMC_TXEXESSCOL_val;
+static unsigned int MMC_TXLATECOL_val;
+static unsigned int MMC_TXDEFERRED_val;
+static unsigned int MMC_TXMULTICOL_G_val;
+static unsigned int MMC_TXSINGLECOL_G_val;
+static unsigned int MMC_TXUNDERFLOWERROR_val;
+static unsigned int MMC_TXBROADCASTPACKETS_GB_val;
+static unsigned int MMC_TXMULTICASTPACKETS_GB_val;
+static unsigned int MMC_TXUNICASTPACKETS_GB_val;
+static unsigned int MMC_TX1024TOMAXOCTETS_GB_val;
+static unsigned int MMC_TX512TO1023OCTETS_GB_val;
+static unsigned int MMC_TX256TO511OCTETS_GB_val;
+static unsigned int MMC_TX128TO255OCTETS_GB_val;
+static unsigned int MMC_TX65TO127OCTETS_GB_val;
+static unsigned int MMC_TX64OCTETS_GB_val;
+static unsigned int MMC_TXMULTICASTPACKETS_G_val;
+static unsigned int MMC_TXBROADCASTPACKETS_G_val;
+static unsigned int MMC_TXPACKETCOUNT_GB_val;
+static unsigned int MMC_TXOCTETCOUNT_GB_val;
+static unsigned int MMC_IPC_INTR_RX_val;
+static unsigned int MMC_IPC_INTR_MASK_RX_val;
+static unsigned int MMC_INTR_MASK_TX_val;
+static unsigned int MMC_INTR_MASK_RX_val;
+static unsigned int MMC_INTR_TX_val;
+static unsigned int MMC_INTR_RX_val;
+static unsigned int MMC_CNTRL_val;
+static unsigned int MAC_MA1LR_val;
+static unsigned int MAC_MA1HR_val;
+static unsigned int MAC_MA0LR_val;
+static unsigned int MAC_MA0HR_val;
+static unsigned int MAC_GPIOR_val;
+static unsigned int MAC_GMIIDR_val;
+static unsigned int MAC_GMIIAR_val;
+static unsigned int MAC_HFR2_val;
+static unsigned int MAC_HFR1_val;
+static unsigned int MAC_HFR0_val;
+static unsigned int MAC_MDR_val;
+static unsigned int MAC_VR_val;
+static unsigned int MAC_HTR7_val;
+static unsigned int MAC_HTR6_val;
+static unsigned int MAC_HTR5_val;
+static unsigned int MAC_HTR4_val;
+static unsigned int MAC_HTR3_val;
+static unsigned int MAC_HTR2_val;
+static unsigned int MAC_HTR1_val;
+static unsigned int MAC_HTR0_val;
+static unsigned int DMA_RIWTR7_val;
+static unsigned int DMA_RIWTR6_val;
+static unsigned int DMA_RIWTR5_val;
+static unsigned int DMA_RIWTR4_val;
+static unsigned int DMA_RIWTR3_val;
+static unsigned int DMA_RIWTR2_val;
+static unsigned int DMA_RIWTR1_val;
+static unsigned int DMA_RIWTR0_val;
+static unsigned int DMA_RDRLR7_val;
+static unsigned int DMA_RDRLR6_val;
+static unsigned int DMA_RDRLR5_val;
+static unsigned int DMA_RDRLR4_val;
+static unsigned int DMA_RDRLR3_val;
+static unsigned int DMA_RDRLR2_val;
+static unsigned int DMA_RDRLR1_val;
+static unsigned int DMA_RDRLR0_val;
+static unsigned int DMA_TDRLR7_val;
+static unsigned int DMA_TDRLR6_val;
+static unsigned int DMA_TDRLR5_val;
+static unsigned int DMA_TDRLR4_val;
+static unsigned int DMA_TDRLR3_val;
+static unsigned int DMA_TDRLR2_val;
+static unsigned int DMA_TDRLR1_val;
+static unsigned int DMA_TDRLR0_val;
+static unsigned int DMA_RDTP_RPDR7_val;
+static unsigned int DMA_RDTP_RPDR6_val;
+static unsigned int DMA_RDTP_RPDR5_val;
+static unsigned int DMA_RDTP_RPDR4_val;
+static unsigned int DMA_RDTP_RPDR3_val;
+static unsigned int DMA_RDTP_RPDR2_val;
+static unsigned int DMA_RDTP_RPDR1_val;
+static unsigned int DMA_RDTP_RPDR0_val;
+static unsigned int DMA_TDTP_TPDR7_val;
+static unsigned int DMA_TDTP_TPDR6_val;
+static unsigned int DMA_TDTP_TPDR5_val;
+static unsigned int DMA_TDTP_TPDR4_val;
+static unsigned int DMA_TDTP_TPDR3_val;
+static unsigned int DMA_TDTP_TPDR2_val;
+static unsigned int DMA_TDTP_TPDR1_val;
+static unsigned int DMA_TDTP_TPDR0_val;
+static unsigned int DMA_RDLAR7_val;
+static unsigned int DMA_RDLAR6_val;
+static unsigned int DMA_RDLAR5_val;
+static unsigned int DMA_RDLAR4_val;
+static unsigned int DMA_RDLAR3_val;
+static unsigned int DMA_RDLAR2_val;
+static unsigned int DMA_RDLAR1_val;
+static unsigned int DMA_RDLAR0_val;
+static unsigned int DMA_TDLAR7_val;
+static unsigned int DMA_TDLAR6_val;
+static unsigned int DMA_TDLAR5_val;
+static unsigned int DMA_TDLAR4_val;
+static unsigned int DMA_TDLAR3_val;
+static unsigned int DMA_TDLAR2_val;
+static unsigned int DMA_TDLAR1_val;
+static unsigned int DMA_TDLAR0_val;
+static unsigned int DMA_IER7_val;
+static unsigned int DMA_IER6_val;
+static unsigned int DMA_IER5_val;
+static unsigned int DMA_IER4_val;
+static unsigned int DMA_IER3_val;
+static unsigned int DMA_IER2_val;
+static unsigned int DMA_IER1_val;
+static unsigned int DMA_IER0_val;
+static unsigned int MAC_IMR_val;
+static unsigned int MAC_ISR_val;
+static unsigned int MTL_ISR_val;
+static unsigned int DMA_SR7_val;
+static unsigned int DMA_SR6_val;
+static unsigned int DMA_SR5_val;
+static unsigned int DMA_SR4_val;
+static unsigned int DMA_SR3_val;
+static unsigned int DMA_SR2_val;
+static unsigned int DMA_SR1_val;
+static unsigned int DMA_SR0_val;
+static unsigned int DMA_ISR_val;
+static unsigned int DMA_DSR2_val;
+static unsigned int DMA_DSR1_val;
+static unsigned int DMA_DSR0_val;
+static unsigned int MTL_Q0RDR_val;
+static unsigned int MTL_Q0ESR_val;
+static unsigned int MTL_Q0TDR_val;
+static unsigned int DMA_CHRBAR7_val;
+static unsigned int DMA_CHRBAR6_val;
+static unsigned int DMA_CHRBAR5_val;
+static unsigned int DMA_CHRBAR4_val;
+static unsigned int DMA_CHRBAR3_val;
+static unsigned int DMA_CHRBAR2_val;
+static unsigned int DMA_CHRBAR1_val;
+static unsigned int DMA_CHRBAR0_val;
+static unsigned int DMA_CHTBAR7_val;
+static unsigned int DMA_CHTBAR6_val;
+static unsigned int DMA_CHTBAR5_val;
+static unsigned int DMA_CHTBAR4_val;
+static unsigned int DMA_CHTBAR3_val;
+static unsigned int DMA_CHTBAR2_val;
+static unsigned int DMA_CHTBAR1_val;
+static unsigned int DMA_CHTBAR0_val;
+static unsigned int DMA_CHRDR7_val;
+static unsigned int DMA_CHRDR6_val;
+static unsigned int DMA_CHRDR5_val;
+static unsigned int DMA_CHRDR4_val;
+static unsigned int DMA_CHRDR3_val;
+static unsigned int DMA_CHRDR2_val;
+static unsigned int DMA_CHRDR1_val;
+static unsigned int DMA_CHRDR0_val;
+static unsigned int DMA_CHTDR7_val;
+static unsigned int DMA_CHTDR6_val;
+static unsigned int DMA_CHTDR5_val;
+static unsigned int DMA_CHTDR4_val;
+static unsigned int DMA_CHTDR3_val;
+static unsigned int DMA_CHTDR2_val;
+static unsigned int DMA_CHTDR1_val;
+static unsigned int DMA_CHTDR0_val;
+static unsigned int DMA_SFCSR7_val;
+static unsigned int DMA_SFCSR6_val;
+static unsigned int DMA_SFCSR5_val;
+static unsigned int DMA_SFCSR4_val;
+static unsigned int DMA_SFCSR3_val;
+static unsigned int DMA_SFCSR2_val;
+static unsigned int DMA_SFCSR1_val;
+static unsigned int DMA_SFCSR0_val;
+static unsigned int MAC_IVLANTIRR_val;
+static unsigned int MAC_VLANTIRR_val;
+static unsigned int MAC_VLANHTR_val;
+static unsigned int MAC_VLANTR_val;
+static unsigned int DMA_SBUS_val;
+static unsigned int DMA_BMR_val;
+static unsigned int MTL_Q0RCR_val;
+static unsigned int MTL_Q0OCR_val;
+static unsigned int MTL_Q0ROMR_val;
+static unsigned int MTL_Q0QR_val;
+static unsigned int MTL_Q0ECR_val;
+static unsigned int MTL_Q0UCR_val;
+static unsigned int MTL_Q0TOMR_val;
+static unsigned int MTL_RQDCM1R_val;
+static unsigned int MTL_RQDCM0R_val;
+static unsigned int MTL_FDDR_val;
+static unsigned int MTL_FDACS_val;
+static unsigned int MTL_OMR_val;
+static unsigned int MAC_RQC3R_val;
+static unsigned int MAC_RQC2R_val;
+static unsigned int MAC_RQC1R_val;
+static unsigned int MAC_RQC0R_val;
+static unsigned int MAC_TQPM1R_val;
+static unsigned int MAC_TQPM0R_val;
+static unsigned int MAC_RFCR_val;
+static unsigned int MAC_QTFCR7_val;
+static unsigned int MAC_QTFCR6_val;
+static unsigned int MAC_QTFCR5_val;
+static unsigned int MAC_QTFCR4_val;
+static unsigned int MAC_QTFCR3_val;
+static unsigned int MAC_QTFCR2_val;
+static unsigned int MAC_QTFCR1_val;
+static unsigned int MAC_Q0TFCR_val;
+static unsigned int DMA_AXI4CR7_val;
+static unsigned int DMA_AXI4CR6_val;
+static unsigned int DMA_AXI4CR5_val;
+static unsigned int DMA_AXI4CR4_val;
+static unsigned int DMA_AXI4CR3_val;
+static unsigned int DMA_AXI4CR2_val;
+static unsigned int DMA_AXI4CR1_val;
+static unsigned int DMA_AXI4CR0_val;
+static unsigned int DMA_RCR7_val;
+static unsigned int DMA_RCR6_val;
+static unsigned int DMA_RCR5_val;
+static unsigned int DMA_RCR4_val;
+static unsigned int DMA_RCR3_val;
+static unsigned int DMA_RCR2_val;
+static unsigned int DMA_RCR1_val;
+static unsigned int DMA_RCR0_val;
+static unsigned int DMA_TCR7_val;
+static unsigned int DMA_TCR6_val;
+static unsigned int DMA_TCR5_val;
+static unsigned int DMA_TCR4_val;
+static unsigned int DMA_TCR3_val;
+static unsigned int DMA_TCR2_val;
+static unsigned int DMA_TCR1_val;
+static unsigned int DMA_TCR0_val;
+static unsigned int DMA_CR7_val;
+static unsigned int DMA_CR6_val;
+static unsigned int DMA_CR5_val;
+static unsigned int DMA_CR4_val;
+static unsigned int DMA_CR3_val;
+static unsigned int DMA_CR2_val;
+static unsigned int DMA_CR1_val;
+static unsigned int DMA_CR0_val;
+static unsigned int MAC_WTR_val;
+static unsigned int MAC_MPFR_val;
+static unsigned int MAC_MECR_val;
+static unsigned int MAC_MCR_val;
+
+/* For MII/GMII register read/write */
+static unsigned int MII_BMCR_REG_val;
+static unsigned int MII_BMSR_REG_val;
+static unsigned int MII_PHYSID1_REG_val;
+static unsigned int MII_PHYSID2_REG_val;
+static unsigned int MII_ADVERTISE_REG_val;
+static unsigned int MII_LPA_REG_val;
+static unsigned int MII_EXPANSION_REG_val;
+static unsigned int AUTO_NEGO_NP_REG_val;
+static unsigned int MII_ESTATUS_REG_val;
+static unsigned int MII_CTRL1000_REG_val;
+static unsigned int MII_STAT1000_REG_val;
+static unsigned int PHY_CTL_REG_val;
+static unsigned int PHY_STS_REG_val;
+
+/* For controlling properties/features of the device */
+static unsigned int feature_drop_tx_pktburstcnt_val = 1;
+
+/* for mq */
+static unsigned int qInx_val;
+
+void DWC_ETH_QOS_get_pdata(struct DWC_ETH_QOS_prv_data *prv_pdata)
+{
+	pdata = prv_pdata;
+}
+
+/*!
+* \brief API extract the reg name from the buffer.
+*
+* \details This function extracts the register name from the command line 
+* argument passed to the file belonging to type debugfs.
+* 
+* @param[in]  regname: An empty char pointer.
+* @param[in]  buffer: It contains command line input reg name & value.
+* @param[in]  buffer_size: buffer size. 
+* 
+* \return  void
+*/
+
+void get_reg_name(char *regname, char *buffer, unsigned long buffer_size)
+{
+	int i = 0, j = 0;
+	unsigned long cnt = buffer_size;
+
+	DBGPR("--> get_reg_name\n");
+
+	while (cnt > 0) {
+		if ((buffer[j] == '\t') || (buffer[j]) == ' ') {
+			break;
+		} else {
+			regname[i] = buffer[j];
+			i++;
+		}
+		j++;
+		cnt--;
+	}
+	regname[i] = '\0';
+
+	DBGPR("<-- get_reg_name\n");
+	return;
+}
+
+/*!
+* \brief API extract the reg value from the buffer.
+*
+* \details This function extracts the value to be written into the register 
+* from the command line argument passed to the debug file.
+* 
+* @param[in]  value: An empty char pointer.
+* @param[in]  buffer: It contains command line input reg name & value.
+* @param[in]  buffer_size: buffer size. 
+* 
+* \return  void
+*/
+
+void get_reg_value(char *value, char *buffer, unsigned long buffer_size)
+{
+	int i = 0, j = 0;
+	int cnt = buffer_size;
+	bool value_present = 0;
+
+	DBGPR("--> get_reg_value\n");
+
+	while (cnt) {
+		if ((buffer[j] == ' ') || (buffer[j] == '\t')) {
+			value_present = 1;
+		}
+
+		if (value_present == 1 && (buffer[j] != ' ')
+		    && (buffer[j] != '\t')) {
+			value[i] = buffer[j];
+			i++;
+		}
+		j++;
+		cnt--;
+	}
+	value[i] = '\0';
+
+	DBGPR("<-- get_reg_value\n");
+	return;
+}
+
+/*! 
+*  \brief  API to write the reg value to specified register. 
+*
+* \details This function extracts the value to be written into the register 
+* from the command line argument passed to the file belonging to the debugfs.
+*
+* @param[in]  file: debug file pointer.
+* @param[in]  buf: It contains command line input reg name & value.
+* @param[in]  count: contains buffer size. 
+* @param[in]  ppos: offset value. 
+*
+* \retval  0 on Success. 
+* \retval  error number on Failure.
+*/
+
+static ssize_t DWC_ETH_QOS_write(struct file *file, const char __user * buf,
+				 size_t count, loff_t * ppos)
+{
+	int ret = 0;
+	char regName[50];
+	char regValue[25];
+	unsigned long integer_value;
+	char *end_ptr;
+
+	DBGPR("--> DWC_ETH_QOS_write\n");
+
+	if (count > DEBUGFS_MAX_SIZE)
+		return -EINVAL;
+
+	if (copy_from_user(debugfs_buf, buf, count)) {
+		ret = -1;
+	} else {
+		get_reg_name(regName, debugfs_buf, count);
+		get_reg_value(regValue, debugfs_buf, count);
+		ret = count;
+
+		integer_value = simple_strtoul(regValue, (char **)&end_ptr, 16);
+		if ((*end_ptr != '\0') && (*end_ptr != '\n')) {
+			printk(KERN_ERR
+			       "Invalid value specified for register write");
+			return -EINVAL;
+		}
+
+		if (!strcmp(regName, "MAC_MA32_127LR127")) {
+			MAC_MA32_127LR_RgWr(127, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR126")) {
+			MAC_MA32_127LR_RgWr(126, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR125")) {
+			MAC_MA32_127LR_RgWr(125, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR124")) {
+			MAC_MA32_127LR_RgWr(124, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR123")) {
+			MAC_MA32_127LR_RgWr(123, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR122")) {
+			MAC_MA32_127LR_RgWr(122, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR121")) {
+			MAC_MA32_127LR_RgWr(121, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR120")) {
+			MAC_MA32_127LR_RgWr(120, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR119")) {
+			MAC_MA32_127LR_RgWr(119, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR118")) {
+			MAC_MA32_127LR_RgWr(118, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR117")) {
+			MAC_MA32_127LR_RgWr(117, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR116")) {
+			MAC_MA32_127LR_RgWr(116, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR115")) {
+			MAC_MA32_127LR_RgWr(115, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR114")) {
+			MAC_MA32_127LR_RgWr(114, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR113")) {
+			MAC_MA32_127LR_RgWr(113, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR112")) {
+			MAC_MA32_127LR_RgWr(112, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR111")) {
+			MAC_MA32_127LR_RgWr(111, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR110")) {
+			MAC_MA32_127LR_RgWr(110, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR109")) {
+			MAC_MA32_127LR_RgWr(109, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR108")) {
+			MAC_MA32_127LR_RgWr(108, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR107")) {
+			MAC_MA32_127LR_RgWr(107, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR106")) {
+			MAC_MA32_127LR_RgWr(106, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR105")) {
+			MAC_MA32_127LR_RgWr(105, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR104")) {
+			MAC_MA32_127LR_RgWr(104, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR103")) {
+			MAC_MA32_127LR_RgWr(103, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR102")) {
+			MAC_MA32_127LR_RgWr(102, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR101")) {
+			MAC_MA32_127LR_RgWr(101, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR100")) {
+			MAC_MA32_127LR_RgWr(100, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR99")) {
+			MAC_MA32_127LR_RgWr(99, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR98")) {
+			MAC_MA32_127LR_RgWr(98, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR97")) {
+			MAC_MA32_127LR_RgWr(97, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR96")) {
+			MAC_MA32_127LR_RgWr(96, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR95")) {
+			MAC_MA32_127LR_RgWr(95, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR94")) {
+			MAC_MA32_127LR_RgWr(94, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR93")) {
+			MAC_MA32_127LR_RgWr(93, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR92")) {
+			MAC_MA32_127LR_RgWr(92, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR91")) {
+			MAC_MA32_127LR_RgWr(91, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR90")) {
+			MAC_MA32_127LR_RgWr(90, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR89")) {
+			MAC_MA32_127LR_RgWr(89, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR88")) {
+			MAC_MA32_127LR_RgWr(88, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR87")) {
+			MAC_MA32_127LR_RgWr(87, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR86")) {
+			MAC_MA32_127LR_RgWr(86, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR85")) {
+			MAC_MA32_127LR_RgWr(85, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR84")) {
+			MAC_MA32_127LR_RgWr(84, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR83")) {
+			MAC_MA32_127LR_RgWr(83, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR82")) {
+			MAC_MA32_127LR_RgWr(82, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR81")) {
+			MAC_MA32_127LR_RgWr(81, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR80")) {
+			MAC_MA32_127LR_RgWr(80, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR79")) {
+			MAC_MA32_127LR_RgWr(79, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR78")) {
+			MAC_MA32_127LR_RgWr(78, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR77")) {
+			MAC_MA32_127LR_RgWr(77, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR76")) {
+			MAC_MA32_127LR_RgWr(76, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR75")) {
+			MAC_MA32_127LR_RgWr(75, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR74")) {
+			MAC_MA32_127LR_RgWr(74, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR73")) {
+			MAC_MA32_127LR_RgWr(73, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR72")) {
+			MAC_MA32_127LR_RgWr(72, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR71")) {
+			MAC_MA32_127LR_RgWr(71, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR70")) {
+			MAC_MA32_127LR_RgWr(70, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR69")) {
+			MAC_MA32_127LR_RgWr(69, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR68")) {
+			MAC_MA32_127LR_RgWr(68, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR67")) {
+			MAC_MA32_127LR_RgWr(67, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR66")) {
+			MAC_MA32_127LR_RgWr(66, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR65")) {
+			MAC_MA32_127LR_RgWr(65, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR64")) {
+			MAC_MA32_127LR_RgWr(64, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR63")) {
+			MAC_MA32_127LR_RgWr(63, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR62")) {
+			MAC_MA32_127LR_RgWr(62, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR61")) {
+			MAC_MA32_127LR_RgWr(61, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR60")) {
+			MAC_MA32_127LR_RgWr(60, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR59")) {
+			MAC_MA32_127LR_RgWr(59, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR58")) {
+			MAC_MA32_127LR_RgWr(58, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR57")) {
+			MAC_MA32_127LR_RgWr(57, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR56")) {
+			MAC_MA32_127LR_RgWr(56, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR55")) {
+			MAC_MA32_127LR_RgWr(55, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR54")) {
+			MAC_MA32_127LR_RgWr(54, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR53")) {
+			MAC_MA32_127LR_RgWr(53, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR52")) {
+			MAC_MA32_127LR_RgWr(52, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR51")) {
+			MAC_MA32_127LR_RgWr(51, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR50")) {
+			MAC_MA32_127LR_RgWr(50, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR49")) {
+			MAC_MA32_127LR_RgWr(49, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR48")) {
+			MAC_MA32_127LR_RgWr(48, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR47")) {
+			MAC_MA32_127LR_RgWr(47, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR46")) {
+			MAC_MA32_127LR_RgWr(46, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR45")) {
+			MAC_MA32_127LR_RgWr(45, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR44")) {
+			MAC_MA32_127LR_RgWr(44, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR43")) {
+			MAC_MA32_127LR_RgWr(43, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR42")) {
+			MAC_MA32_127LR_RgWr(42, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR41")) {
+			MAC_MA32_127LR_RgWr(41, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR40")) {
+			MAC_MA32_127LR_RgWr(40, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR39")) {
+			MAC_MA32_127LR_RgWr(39, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR38")) {
+			MAC_MA32_127LR_RgWr(38, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR37")) {
+			MAC_MA32_127LR_RgWr(37, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR36")) {
+			MAC_MA32_127LR_RgWr(36, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR35")) {
+			MAC_MA32_127LR_RgWr(35, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR34")) {
+			MAC_MA32_127LR_RgWr(34, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR33")) {
+			MAC_MA32_127LR_RgWr(33, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127LR32")) {
+			MAC_MA32_127LR_RgWr(32, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR127")) {
+			MAC_MA32_127HR_RgWr(127, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR126")) {
+			MAC_MA32_127HR_RgWr(126, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR125")) {
+			MAC_MA32_127HR_RgWr(125, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR124")) {
+			MAC_MA32_127HR_RgWr(124, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR123")) {
+			MAC_MA32_127HR_RgWr(123, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR122")) {
+			MAC_MA32_127HR_RgWr(122, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR121")) {
+			MAC_MA32_127HR_RgWr(121, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR120")) {
+			MAC_MA32_127HR_RgWr(120, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR119")) {
+			MAC_MA32_127HR_RgWr(119, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR118")) {
+			MAC_MA32_127HR_RgWr(118, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR117")) {
+			MAC_MA32_127HR_RgWr(117, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR116")) {
+			MAC_MA32_127HR_RgWr(116, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR115")) {
+			MAC_MA32_127HR_RgWr(115, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR114")) {
+			MAC_MA32_127HR_RgWr(114, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR113")) {
+			MAC_MA32_127HR_RgWr(113, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR112")) {
+			MAC_MA32_127HR_RgWr(112, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR111")) {
+			MAC_MA32_127HR_RgWr(111, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR110")) {
+			MAC_MA32_127HR_RgWr(110, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR109")) {
+			MAC_MA32_127HR_RgWr(109, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR108")) {
+			MAC_MA32_127HR_RgWr(108, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR107")) {
+			MAC_MA32_127HR_RgWr(107, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR106")) {
+			MAC_MA32_127HR_RgWr(106, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR105")) {
+			MAC_MA32_127HR_RgWr(105, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR104")) {
+			MAC_MA32_127HR_RgWr(104, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR103")) {
+			MAC_MA32_127HR_RgWr(103, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR102")) {
+			MAC_MA32_127HR_RgWr(102, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR101")) {
+			MAC_MA32_127HR_RgWr(101, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR100")) {
+			MAC_MA32_127HR_RgWr(100, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR99")) {
+			MAC_MA32_127HR_RgWr(99, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR98")) {
+			MAC_MA32_127HR_RgWr(98, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR97")) {
+			MAC_MA32_127HR_RgWr(97, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR96")) {
+			MAC_MA32_127HR_RgWr(96, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR95")) {
+			MAC_MA32_127HR_RgWr(95, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR94")) {
+			MAC_MA32_127HR_RgWr(94, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR93")) {
+			MAC_MA32_127HR_RgWr(93, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR92")) {
+			MAC_MA32_127HR_RgWr(92, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR91")) {
+			MAC_MA32_127HR_RgWr(91, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR90")) {
+			MAC_MA32_127HR_RgWr(90, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR89")) {
+			MAC_MA32_127HR_RgWr(89, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR88")) {
+			MAC_MA32_127HR_RgWr(88, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR87")) {
+			MAC_MA32_127HR_RgWr(87, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR86")) {
+			MAC_MA32_127HR_RgWr(86, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR85")) {
+			MAC_MA32_127HR_RgWr(85, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR84")) {
+			MAC_MA32_127HR_RgWr(84, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR83")) {
+			MAC_MA32_127HR_RgWr(83, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR82")) {
+			MAC_MA32_127HR_RgWr(82, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR81")) {
+			MAC_MA32_127HR_RgWr(81, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR80")) {
+			MAC_MA32_127HR_RgWr(80, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR79")) {
+			MAC_MA32_127HR_RgWr(79, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR78")) {
+			MAC_MA32_127HR_RgWr(78, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR77")) {
+			MAC_MA32_127HR_RgWr(77, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR76")) {
+			MAC_MA32_127HR_RgWr(76, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR75")) {
+			MAC_MA32_127HR_RgWr(75, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR74")) {
+			MAC_MA32_127HR_RgWr(74, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR73")) {
+			MAC_MA32_127HR_RgWr(73, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR72")) {
+			MAC_MA32_127HR_RgWr(72, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR71")) {
+			MAC_MA32_127HR_RgWr(71, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR70")) {
+			MAC_MA32_127HR_RgWr(70, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR69")) {
+			MAC_MA32_127HR_RgWr(69, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR68")) {
+			MAC_MA32_127HR_RgWr(68, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR67")) {
+			MAC_MA32_127HR_RgWr(67, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR66")) {
+			MAC_MA32_127HR_RgWr(66, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR65")) {
+			MAC_MA32_127HR_RgWr(65, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR64")) {
+			MAC_MA32_127HR_RgWr(64, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR63")) {
+			MAC_MA32_127HR_RgWr(63, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR62")) {
+			MAC_MA32_127HR_RgWr(62, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR61")) {
+			MAC_MA32_127HR_RgWr(61, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR60")) {
+			MAC_MA32_127HR_RgWr(60, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR59")) {
+			MAC_MA32_127HR_RgWr(59, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR58")) {
+			MAC_MA32_127HR_RgWr(58, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR57")) {
+			MAC_MA32_127HR_RgWr(57, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR56")) {
+			MAC_MA32_127HR_RgWr(56, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR55")) {
+			MAC_MA32_127HR_RgWr(55, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR54")) {
+			MAC_MA32_127HR_RgWr(54, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR53")) {
+			MAC_MA32_127HR_RgWr(53, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR52")) {
+			MAC_MA32_127HR_RgWr(52, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR51")) {
+			MAC_MA32_127HR_RgWr(51, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR50")) {
+			MAC_MA32_127HR_RgWr(50, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR49")) {
+			MAC_MA32_127HR_RgWr(49, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR48")) {
+			MAC_MA32_127HR_RgWr(48, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR47")) {
+			MAC_MA32_127HR_RgWr(47, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR46")) {
+			MAC_MA32_127HR_RgWr(46, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR45")) {
+			MAC_MA32_127HR_RgWr(45, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR44")) {
+			MAC_MA32_127HR_RgWr(44, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR43")) {
+			MAC_MA32_127HR_RgWr(43, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR42")) {
+			MAC_MA32_127HR_RgWr(42, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR41")) {
+			MAC_MA32_127HR_RgWr(41, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR40")) {
+			MAC_MA32_127HR_RgWr(40, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR39")) {
+			MAC_MA32_127HR_RgWr(39, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR38")) {
+			MAC_MA32_127HR_RgWr(38, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR37")) {
+			MAC_MA32_127HR_RgWr(37, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR36")) {
+			MAC_MA32_127HR_RgWr(36, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR35")) {
+			MAC_MA32_127HR_RgWr(35, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR34")) {
+			MAC_MA32_127HR_RgWr(34, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR33")) {
+			MAC_MA32_127HR_RgWr(33, integer_value);
+		} else if (!strcmp(regName, "MAC_MA32_127HR32")) {
+			MAC_MA32_127HR_RgWr(32, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR31")) {
+			MAC_MA1_31LR_RgWr(31, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR30")) {
+			MAC_MA1_31LR_RgWr(30, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR29")) {
+			MAC_MA1_31LR_RgWr(29, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR28")) {
+			MAC_MA1_31LR_RgWr(28, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR27")) {
+			MAC_MA1_31LR_RgWr(27, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR26")) {
+			MAC_MA1_31LR_RgWr(26, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR25")) {
+			MAC_MA1_31LR_RgWr(25, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR24")) {
+			MAC_MA1_31LR_RgWr(24, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR23")) {
+			MAC_MA1_31LR_RgWr(23, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR22")) {
+			MAC_MA1_31LR_RgWr(22, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR21")) {
+			MAC_MA1_31LR_RgWr(21, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR20")) {
+			MAC_MA1_31LR_RgWr(20, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR19")) {
+			MAC_MA1_31LR_RgWr(19, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR18")) {
+			MAC_MA1_31LR_RgWr(18, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR17")) {
+			MAC_MA1_31LR_RgWr(17, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR16")) {
+			MAC_MA1_31LR_RgWr(16, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR15")) {
+			MAC_MA1_31LR_RgWr(15, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR14")) {
+			MAC_MA1_31LR_RgWr(14, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR13")) {
+			MAC_MA1_31LR_RgWr(13, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR12")) {
+			MAC_MA1_31LR_RgWr(12, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR11")) {
+			MAC_MA1_31LR_RgWr(11, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR10")) {
+			MAC_MA1_31LR_RgWr(10, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR9")) {
+			MAC_MA1_31LR_RgWr(9, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR8")) {
+			MAC_MA1_31LR_RgWr(8, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR7")) {
+			MAC_MA1_31LR_RgWr(7, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR6")) {
+			MAC_MA1_31LR_RgWr(6, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR5")) {
+			MAC_MA1_31LR_RgWr(5, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR4")) {
+			MAC_MA1_31LR_RgWr(4, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR3")) {
+			MAC_MA1_31LR_RgWr(3, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR2")) {
+			MAC_MA1_31LR_RgWr(2, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31LR1")) {
+			MAC_MA1_31LR_RgWr(1, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR31")) {
+			MAC_MA1_31HR_RgWr(31, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR30")) {
+			MAC_MA1_31HR_RgWr(30, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR29")) {
+			MAC_MA1_31HR_RgWr(29, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR28")) {
+			MAC_MA1_31HR_RgWr(28, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR27")) {
+			MAC_MA1_31HR_RgWr(27, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR26")) {
+			MAC_MA1_31HR_RgWr(26, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR25")) {
+			MAC_MA1_31HR_RgWr(25, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR24")) {
+			MAC_MA1_31HR_RgWr(24, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR23")) {
+			MAC_MA1_31HR_RgWr(23, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR22")) {
+			MAC_MA1_31HR_RgWr(22, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR21")) {
+			MAC_MA1_31HR_RgWr(21, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR20")) {
+			MAC_MA1_31HR_RgWr(20, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR19")) {
+			MAC_MA1_31HR_RgWr(19, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR18")) {
+			MAC_MA1_31HR_RgWr(18, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR17")) {
+			MAC_MA1_31HR_RgWr(17, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR16")) {
+			MAC_MA1_31HR_RgWr(16, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR15")) {
+			MAC_MA1_31HR_RgWr(15, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR14")) {
+			MAC_MA1_31HR_RgWr(14, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR13")) {
+			MAC_MA1_31HR_RgWr(13, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR12")) {
+			MAC_MA1_31HR_RgWr(12, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR11")) {
+			MAC_MA1_31HR_RgWr(11, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR10")) {
+			MAC_MA1_31HR_RgWr(10, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR9")) {
+			MAC_MA1_31HR_RgWr(9, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR8")) {
+			MAC_MA1_31HR_RgWr(8, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR7")) {
+			MAC_MA1_31HR_RgWr(7, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR6")) {
+			MAC_MA1_31HR_RgWr(6, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR5")) {
+			MAC_MA1_31HR_RgWr(5, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR4")) {
+			MAC_MA1_31HR_RgWr(4, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR3")) {
+			MAC_MA1_31HR_RgWr(3, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR2")) {
+			MAC_MA1_31HR_RgWr(2, integer_value);
+		} else if (!strcmp(regName, "MAC_MA1_31HR1")) {
+			MAC_MA1_31HR_RgWr(1, integer_value);
+		} else if (!strcmp(regName, "MAC_ARPA")) {
+			MAC_ARPA_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R7")) {
+			MAC_L3A3R7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R6")) {
+			MAC_L3A3R6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R5")) {
+			MAC_L3A3R5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R4")) {
+			MAC_L3A3R4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R3")) {
+			MAC_L3A3R3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R2")) {
+			MAC_L3A3R2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R1")) {
+			MAC_L3A3R1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A3R0")) {
+			MAC_L3A3R0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R7")) {
+			MAC_L3A2R7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R6")) {
+			MAC_L3A2R6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R5")) {
+			MAC_L3A2R5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R4")) {
+			MAC_L3A2R4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R3")) {
+			MAC_L3A2R3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R2")) {
+			MAC_L3A2R2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R1")) {
+			MAC_L3A2R1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A2R0")) {
+			MAC_L3A2R0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R7")) {
+			MAC_L3A1R7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R6")) {
+			MAC_L3A1R6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R5")) {
+			MAC_L3A1R5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R4")) {
+			MAC_L3A1R4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R3")) {
+			MAC_L3A1R3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R2")) {
+			MAC_L3A1R2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R1")) {
+			MAC_L3A1R1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A1R0")) {
+			MAC_L3A1R0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R7")) {
+			MAC_L3A0R7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R6")) {
+			MAC_L3A0R6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R5")) {
+			MAC_L3A0R5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R4")) {
+			MAC_L3A0R4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R3")) {
+			MAC_L3A0R3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R2")) {
+			MAC_L3A0R2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R1")) {
+			MAC_L3A0R1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3A0R0")) {
+			MAC_L3A0R0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR7")) {
+			MAC_L4AR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR6")) {
+			MAC_L4AR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR5")) {
+			MAC_L4AR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR4")) {
+			MAC_L4AR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR3")) {
+			MAC_L4AR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR2")) {
+			MAC_L4AR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR1")) {
+			MAC_L4AR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L4AR0")) {
+			MAC_L4AR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR7")) {
+			MAC_L3L4CR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR6")) {
+			MAC_L3L4CR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR5")) {
+			MAC_L3L4CR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR4")) {
+			MAC_L3L4CR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR3")) {
+			MAC_L3L4CR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR2")) {
+			MAC_L3L4CR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR1")) {
+			MAC_L3L4CR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_L3L4CR0")) {
+			MAC_L3L4CR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_GPIOS")) {
+			MAC_GPIOS_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PCS")) {
+			MAC_PCS_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TES")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_TES : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_AE")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_AE : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_ALPA")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_ALPA : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_AAD")) {
+			MAC_AAD_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_ANS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_ANS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_ANC")) {
+			MAC_ANC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_LPC")) {
+			MAC_LPC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_LPS")) {
+			MAC_LPS_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_WIDTH3")) {
+			MAC_PPS_WIDTH3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_WIDTH2")) {
+			MAC_PPS_WIDTH2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_WIDTH1")) {
+			MAC_PPS_WIDTH1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_WIDTH0")) {
+			MAC_PPS_WIDTH0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_INTVAL3")) {
+			MAC_PPS_INTVAL3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_INTVAL2")) {
+			MAC_PPS_INTVAL2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_INTVAL1")) {
+			MAC_PPS_INTVAL1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_INTVAL0")) {
+			MAC_PPS_INTVAL0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTNS3")) {
+			MAC_PPS_TTNS3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTNS2")) {
+			MAC_PPS_TTNS2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTNS1")) {
+			MAC_PPS_TTNS1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTNS0")) {
+			MAC_PPS_TTNS0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTS3")) {
+			MAC_PPS_TTS3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTS2")) {
+			MAC_PPS_TTS2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTS1")) {
+			MAC_PPS_TTS1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPS_TTS0")) {
+			MAC_PPS_TTS0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PPSC")) {
+			MAC_PPSC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TEAC")) {
+			MAC_TEAC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TIAC")) {
+			MAC_TIAC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_ATS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_ATS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_ATN")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_ATN : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_AC")) {
+			MAC_AC_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TTN")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_TTN : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_TTSN")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_TTSN : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_TSR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_TSR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_STHWR")) {
+			MAC_STHWR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TAR")) {
+			MAC_TAR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_STNSUR")) {
+			MAC_STNSUR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_STSUR")) {
+			MAC_STSUR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_STNSR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_STNSR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_STSR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_STSR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_SSIR")) {
+			MAC_SSIR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TCR")) {
+			MAC_TCR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_DSR")) {
+			MTL_DSR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RWPFFR")) {
+			MAC_RWPFFR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RTSR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_RTSR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_IER")) {
+			MTL_IER_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR7")) {
+			MTL_QRCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR6")) {
+			MTL_QRCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR5")) {
+			MTL_QRCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR4")) {
+			MTL_QRCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR3")) {
+			MTL_QRCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR2")) {
+			MTL_QRCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRCR1")) {
+			MTL_QRCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QRDR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QRDR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QRDR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QOCR7")) {
+			MTL_QOCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR6")) {
+			MTL_QOCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR5")) {
+			MTL_QOCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR4")) {
+			MTL_QOCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR3")) {
+			MTL_QOCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR2")) {
+			MTL_QOCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QOCR1")) {
+			MTL_QOCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR7")) {
+			MTL_QROMR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR6")) {
+			MTL_QROMR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR5")) {
+			MTL_QROMR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR4")) {
+			MTL_QROMR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR3")) {
+			MTL_QROMR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR2")) {
+			MTL_QROMR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QROMR1")) {
+			MTL_QROMR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR7")) {
+			MTL_QLCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR6")) {
+			MTL_QLCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR5")) {
+			MTL_QLCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR4")) {
+			MTL_QLCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR3")) {
+			MTL_QLCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR2")) {
+			MTL_QLCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QLCR1")) {
+			MTL_QLCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR7")) {
+			MTL_QHCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR6")) {
+			MTL_QHCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR5")) {
+			MTL_QHCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR4")) {
+			MTL_QHCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR3")) {
+			MTL_QHCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR2")) {
+			MTL_QHCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QHCR1")) {
+			MTL_QHCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR7")) {
+			MTL_QSSCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR6")) {
+			MTL_QSSCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR5")) {
+			MTL_QSSCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR4")) {
+			MTL_QSSCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR3")) {
+			MTL_QSSCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR2")) {
+			MTL_QSSCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QSSCR1")) {
+			MTL_QSSCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW7")) {
+			MTL_QW7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW6")) {
+			MTL_QW6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW5")) {
+			MTL_QW5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW4")) {
+			MTL_QW4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW3")) {
+			MTL_QW3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW2")) {
+			MTL_QW2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QW1")) {
+			MTL_QW1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QESR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QESR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QESR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QECR7")) {
+			MTL_QECR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR6")) {
+			MTL_QECR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR5")) {
+			MTL_QECR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR4")) {
+			MTL_QECR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR3")) {
+			MTL_QECR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR2")) {
+			MTL_QECR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QECR1")) {
+			MTL_QECR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTDR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QTDR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_QTDR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_QUCR7")) {
+			MTL_QUCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR6")) {
+			MTL_QUCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR5")) {
+			MTL_QUCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR4")) {
+			MTL_QUCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR3")) {
+			MTL_QUCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR2")) {
+			MTL_QUCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QUCR1")) {
+			MTL_QUCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR7")) {
+			MTL_QTOMR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR6")) {
+			MTL_QTOMR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR5")) {
+			MTL_QTOMR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR4")) {
+			MTL_QTOMR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR3")) {
+			MTL_QTOMR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR2")) {
+			MTL_QTOMR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_QTOMR1")) {
+			MTL_QTOMR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_PMTCSR")) {
+			MAC_PMTCSR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_RXICMP_ERR_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXICMP_ERR_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXICMP_GD_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXICMP_GD_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXTCP_ERR_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXTCP_ERR_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXTCP_GD_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXTCP_GD_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUDP_ERR_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUDP_ERR_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUDP_GD_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUDP_GD_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_NOPAY_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_NOPAY_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_HDRERR_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_HDRERR_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_GD_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_GD_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_UDSBL_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_UDSBL_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_FRAG_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_FRAG_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_NOPAY_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_NOPAY_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_HDRERR_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_HDRERR_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_GD_OCTETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_GD_OCTETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXICMP_ERR_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXICMP_ERR_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXICMP_GD_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXICMP_GD_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXTCP_ERR_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXTCP_ERR_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXTCP_GD_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXTCP_GD_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUDP_ERR_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUDP_ERR_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUDP_GD_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUDP_GD_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_NOPAY_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_NOPAY_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_HDRERR_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_HDRERR_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV6_GD_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV6_GD_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_UBSBL_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_UBSBL_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_FRAG_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_FRAG_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_NOPAY_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_NOPAY_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_HDRERR_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_HDRERR_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXIPV4_GD_PKTS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXIPV4_GD_PKTS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXCTRLPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXCTRLPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXRCVERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXRCVERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXWATCHDOGERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXWATCHDOGERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXVLANPACKETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXVLANPACKETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXFIFOOVERFLOW")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXFIFOOVERFLOW : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXPAUSEPACKETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXPAUSEPACKETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXOUTOFRANGETYPE")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXOUTOFRANGETYPE : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXLENGTHERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXLENGTHERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUNICASTPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUNICASTPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX1024TOMAXOCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX1024TOMAXOCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX512TO1023OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX512TO1023OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX256TO511OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX256TO511OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX128TO255OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX128TO255OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX65TO127OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX65TO127OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RX64OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RX64OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXOVERSIZE_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXOVERSIZE_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXUNDERSIZE_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXUNDERSIZE_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXJABBERERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXJABBERERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXRUNTERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXRUNTERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXALIGNMENTERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXALIGNMENTERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXCRCERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXCRCERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXMULTICASTPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXMULTICASTPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXBROADCASTPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXBROADCASTPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXOCTETCOUNT_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXOCTETCOUNT_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXOCTETCOUNT_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXOCTETCOUNT_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_RXPACKETCOUNT_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_RXPACKETCOUNT_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXOVERSIZE_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXOVERSIZE_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXVLANPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXVLANPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXPAUSEPACKETS")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXPAUSEPACKETS : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXEXCESSDEF")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXEXCESSDEF : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXPACKETSCOUNT_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXPACKETSCOUNT_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXOCTETCOUNT_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXOCTETCOUNT_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXCARRIERERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXCARRIERERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXEXESSCOL")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXEXESSCOL : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXLATECOL")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXLATECOL : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXDEFERRED")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXDEFERRED : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXMULTICOL_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXMULTICOL_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXSINGLECOL_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXSINGLECOL_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXUNDERFLOWERROR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXUNDERFLOWERROR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXBROADCASTPACKETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXBROADCASTPACKETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXMULTICASTPACKETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXMULTICASTPACKETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXUNICASTPACKETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXUNICASTPACKETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX1024TOMAXOCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX1024TOMAXOCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX512TO1023OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX512TO1023OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX256TO511OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX256TO511OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX128TO255OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX128TO255OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX65TO127OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX65TO127OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TX64OCTETS_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TX64OCTETS_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXMULTICASTPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXMULTICASTPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXBROADCASTPACKETS_G")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXBROADCASTPACKETS_G : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXPACKETCOUNT_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXPACKETCOUNT_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_TXOCTETCOUNT_GB")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_TXOCTETCOUNT_GB : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_IPC_INTR_RX")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MMC_IPC_INTR_RX : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MMC_IPC_INTR_MASK_RX")) {
+			MMC_IPC_INTR_MASK_RX_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_INTR_MASK_TX")) {
+			MMC_INTR_MASK_TX_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_INTR_MASK_RX")) {
+			MMC_INTR_MASK_RX_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_INTR_TX")) {
+			MMC_INTR_TX_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_INTR_RX")) {
+			MMC_INTR_RX_RgWr(integer_value);
+		} else if (!strcmp(regName, "MMC_CNTRL")) {
+			MMC_CNTRL_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MA1LR")) {
+			MAC_MA1LR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MA1HR")) {
+			MAC_MA1HR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MA0LR")) {
+			MAC_MA0LR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MA0HR")) {
+			MAC_MA0HR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_GPIOR")) {
+			MAC_GPIOR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_GMIIDR")) {
+			MAC_GMIIDR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_GMIIAR")) {
+			MAC_GMIIAR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HFR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_HFR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_HFR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_HFR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_HFR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_HFR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_MDR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_MDR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_VR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_VR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MAC_HTR7")) {
+			MAC_HTR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR6")) {
+			MAC_HTR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR5")) {
+			MAC_HTR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR4")) {
+			MAC_HTR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR3")) {
+			MAC_HTR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR2")) {
+			MAC_HTR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR1")) {
+			MAC_HTR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_HTR0")) {
+			MAC_HTR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR7")) {
+			DMA_RIWTR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR6")) {
+			DMA_RIWTR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR5")) {
+			DMA_RIWTR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR4")) {
+			DMA_RIWTR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR3")) {
+			DMA_RIWTR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR2")) {
+			DMA_RIWTR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR1")) {
+			DMA_RIWTR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RIWTR0")) {
+			DMA_RIWTR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR7")) {
+			DMA_RDRLR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR6")) {
+			DMA_RDRLR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR5")) {
+			DMA_RDRLR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR4")) {
+			DMA_RDRLR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR3")) {
+			DMA_RDRLR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR2")) {
+			DMA_RDRLR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR1")) {
+			DMA_RDRLR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDRLR0")) {
+			DMA_RDRLR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR7")) {
+			DMA_TDRLR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR6")) {
+			DMA_TDRLR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR5")) {
+			DMA_TDRLR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR4")) {
+			DMA_TDRLR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR3")) {
+			DMA_TDRLR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR2")) {
+			DMA_TDRLR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR1")) {
+			DMA_TDRLR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDRLR0")) {
+			DMA_TDRLR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR7")) {
+			DMA_RDTP_RPDR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR6")) {
+			DMA_RDTP_RPDR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR5")) {
+			DMA_RDTP_RPDR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR4")) {
+			DMA_RDTP_RPDR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR3")) {
+			DMA_RDTP_RPDR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR2")) {
+			DMA_RDTP_RPDR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR1")) {
+			DMA_RDTP_RPDR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDTP_RPDR0")) {
+			DMA_RDTP_RPDR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR7")) {
+			DMA_TDTP_TPDR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR6")) {
+			DMA_TDTP_TPDR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR5")) {
+			DMA_TDTP_TPDR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR4")) {
+			DMA_TDTP_TPDR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR3")) {
+			DMA_TDTP_TPDR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR2")) {
+			DMA_TDTP_TPDR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR1")) {
+			DMA_TDTP_TPDR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDTP_TPDR0")) {
+			DMA_TDTP_TPDR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR7")) {
+			DMA_RDLAR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR6")) {
+			DMA_RDLAR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR5")) {
+			DMA_RDLAR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR4")) {
+			DMA_RDLAR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR3")) {
+			DMA_RDLAR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR2")) {
+			DMA_RDLAR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR1")) {
+			DMA_RDLAR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RDLAR0")) {
+			DMA_RDLAR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR7")) {
+			DMA_TDLAR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR6")) {
+			DMA_TDLAR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR5")) {
+			DMA_TDLAR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR4")) {
+			DMA_TDLAR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR3")) {
+			DMA_TDLAR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR2")) {
+			DMA_TDLAR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR1")) {
+			DMA_TDLAR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TDLAR0")) {
+			DMA_TDLAR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER7")) {
+			DMA_IER7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER6")) {
+			DMA_IER6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER5")) {
+			DMA_IER5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER4")) {
+			DMA_IER4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER3")) {
+			DMA_IER3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER2")) {
+			DMA_IER2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER1")) {
+			DMA_IER1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_IER0")) {
+			DMA_IER0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_IMR")) {
+			MAC_IMR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_ISR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MAC_ISR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_ISR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_ISR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_SR7")) {
+			DMA_SR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR6")) {
+			DMA_SR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR5")) {
+			DMA_SR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR4")) {
+			DMA_SR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR3")) {
+			DMA_SR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR2")) {
+			DMA_SR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR1")) {
+			DMA_SR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SR0")) {
+			DMA_SR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_ISR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_ISR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_DSR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_DSR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_DSR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_DSR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_DSR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_DSR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_Q0RDR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_Q0RDR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_Q0ESR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_Q0ESR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_Q0TDR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_Q0TDR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRBAR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRBAR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTBAR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTBAR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHRDR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHRDR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR7")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR7 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR6")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR6 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR5")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR5 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR4")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR4 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR3")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR3 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR2")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR2 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR1")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR1 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_CHTDR0")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation DMA_CHTDR0 : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "DMA_SFCSR7")) {
+			DMA_SFCSR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR6")) {
+			DMA_SFCSR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR5")) {
+			DMA_SFCSR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR4")) {
+			DMA_SFCSR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR3")) {
+			DMA_SFCSR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR2")) {
+			DMA_SFCSR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR1")) {
+			DMA_SFCSR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SFCSR0")) {
+			DMA_SFCSR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_IVLANTIRR")) {
+			MAC_IVLANTIRR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_VLANTIRR")) {
+			MAC_VLANTIRR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_VLANHTR")) {
+			MAC_VLANHTR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_VLANTR")) {
+			MAC_VLANTR_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_SBUS")) {
+			DMA_SBUS_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_BMR")) {
+			DMA_BMR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0RCR")) {
+			MTL_Q0RCR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0OCR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_Q0OCR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_Q0ROMR")) {
+			MTL_Q0ROMR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0QR")) {
+			MTL_Q0QR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0ECR")) {
+			MTL_Q0ECR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0UCR")) {
+			MTL_Q0UCR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_Q0TOMR")) {
+			MTL_Q0TOMR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_RQDCM1R")) {
+			MTL_RQDCM1R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_RQDCM0R")) {
+			MTL_RQDCM0R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_FDDR")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MTL_FDDR : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MTL_FDACS")) {
+			MTL_FDACS_RgWr(integer_value);
+		} else if (!strcmp(regName, "MTL_OMR")) {
+			MTL_OMR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RQC3R")) {
+			MAC_RQC3R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RQC2R")) {
+			MAC_RQC2R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RQC1R")) {
+			MAC_RQC1R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RQC0R")) {
+			MAC_RQC0R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TQPM1R")) {
+			MAC_TQPM1R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_TQPM0R")) {
+			MAC_TQPM0R_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_RFCR")) {
+			MAC_RFCR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR7")) {
+			MAC_QTFCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR6")) {
+			MAC_QTFCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR5")) {
+			MAC_QTFCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR4")) {
+			MAC_QTFCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR3")) {
+			MAC_QTFCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR2")) {
+			MAC_QTFCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_QTFCR1")) {
+			MAC_QTFCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_Q0TFCR")) {
+			MAC_Q0TFCR_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR7")) {
+			DMA_AXI4CR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR6")) {
+			DMA_AXI4CR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR5")) {
+			DMA_AXI4CR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR4")) {
+			DMA_AXI4CR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR3")) {
+			DMA_AXI4CR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR2")) {
+			DMA_AXI4CR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR1")) {
+			DMA_AXI4CR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_AXI4CR0")) {
+			DMA_AXI4CR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR7")) {
+			DMA_RCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR6")) {
+			DMA_RCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR5")) {
+			DMA_RCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR4")) {
+			DMA_RCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR3")) {
+			DMA_RCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR2")) {
+			DMA_RCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR1")) {
+			DMA_RCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_RCR0")) {
+			DMA_RCR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR7")) {
+			DMA_TCR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR6")) {
+			DMA_TCR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR5")) {
+			DMA_TCR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR4")) {
+			DMA_TCR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR3")) {
+			DMA_TCR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR2")) {
+			DMA_TCR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR1")) {
+			DMA_TCR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_TCR0")) {
+			DMA_TCR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR7")) {
+			DMA_CR7_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR6")) {
+			DMA_CR6_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR5")) {
+			DMA_CR5_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR4")) {
+			DMA_CR4_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR3")) {
+			DMA_CR3_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR2")) {
+			DMA_CR2_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR1")) {
+			DMA_CR1_RgWr(integer_value);
+		} else if (!strcmp(regName, "DMA_CR0")) {
+			DMA_CR0_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_WTR")) {
+			MAC_WTR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MPFR")) {
+			MAC_MPFR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MECR")) {
+			MAC_MECR_RgWr(integer_value);
+		} else if (!strcmp(regName, "MAC_MCR")) {
+			MAC_MCR_RgWr(integer_value);
+		}
+		/* For MII/GMII register read */
+		else if (!strcmp(regName, "MII_BMCR_REG")) {
+			DWC_ETH_QOS_mdio_write_direct(pdata,
+						      pdata->phyaddr,
+						      MII_BMCR,
+						      (int)integer_value);
+		} else if (!strcmp(regName, "MII_BMSR_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_BMSR_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MII_PHYSID1_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_PHYSID1_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MII_PHYSID2_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_PHYSID2_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MII_ADVERTISE_REG")) {
+			DWC_ETH_QOS_mdio_write_direct(pdata,
+						      pdata->phyaddr,
+						      MII_ADVERTISE,
+						      (int)integer_value);
+		} else if (!strcmp(regName, "MII_LPA_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_LPA_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MII_EXPANSION_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_EXPANSION_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "AUTO_NEGO_NP_REG")) {
+			DWC_ETH_QOS_mdio_write_direct(pdata,
+						      pdata->phyaddr,
+						      DWC_ETH_QOS_AUTO_NEGO_NP,
+						      (int)integer_value);
+		} else if (!strcmp(regName, "MII_ESTATUS_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_ESTATUS_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "MII_CTRL1000_REG")) {
+			DWC_ETH_QOS_mdio_write_direct(pdata,
+						      pdata->phyaddr,
+						      MII_CTRL1000,
+						      (int)integer_value);
+		} else if (!strcmp(regName, "MII_STAT1000_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation MII_STAT1000_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "PHY_CTL_REG")) {
+			DWC_ETH_QOS_mdio_write_direct(pdata,
+						      pdata->phyaddr,
+						      DWC_ETH_QOS_PHY_CTL,
+						      (int)integer_value);
+		} else if (!strcmp(regName, "PHY_STS_REG")) {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation PHY_STS_REG : ReadOnly Register");
+			ret = -EFAULT;
+		} else if (!strcmp(regName, "feature_drop_tx_pktburstcnt")) {
+			feature_drop_tx_pktburstcnt_val = (int)integer_value;
+			if (feature_drop_tx_pktburstcnt_val == 0) {
+				feature_drop_tx_pktburstcnt_val++;
+				printk(KERN_ALERT
+				       "Drop Tx frame count should be a positive non-zero number only\n");
+			}
+			pdata->drop_tx_pktburstcnt =
+			    feature_drop_tx_pktburstcnt_val;
+		} else if (!strcmp(regName, "qInx")) {
+			qInx_val = (int)integer_value;
+			if (qInx_val != 0
+			    && ((qInx_val < 0)
+				|| (qInx_val > (DWC_ETH_QOS_QUEUE_CNT - 1)))) {
+				qInx_val = 0;
+				printk(KERN_ALERT "Invalid queue number\n");
+				ret = -EFAULT;
+			}
+		} else {
+			printk(KERN_ALERT
+			       "Could not complete Write Operation to Register. Register not found.\n");
+			ret = -EFAULT;
+		}
+	}
+
+	DBGPR("<-- DWC_ETH_QOS_write\n");
+
+	return ret;
+}
+
+static ssize_t registers_write(struct file *file, const char __user * buf,
+			       size_t count, loff_t * ppos)
+{
+	DBGPR("--> registers_write\n");
+	printk(KERN_INFO
+	       "Specify the correct file name for write operation: write error\n");
+	DBGPR("<-- registers_write\n");
+
+	return -1;
+}
+
+static ssize_t registers_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	char *debug_buf = NULL;
+
+	DBGPR("--> registers_read\n");
+
+	MAC_MA32_127LR_RgRd(127, MAC_MA32_127LR127_val);
+	MAC_MA32_127LR_RgRd(126, MAC_MA32_127LR126_val);
+	MAC_MA32_127LR_RgRd(125, MAC_MA32_127LR125_val);
+	MAC_MA32_127LR_RgRd(124, MAC_MA32_127LR124_val);
+	MAC_MA32_127LR_RgRd(123, MAC_MA32_127LR123_val);
+	MAC_MA32_127LR_RgRd(122, MAC_MA32_127LR122_val);
+	MAC_MA32_127LR_RgRd(121, MAC_MA32_127LR121_val);
+	MAC_MA32_127LR_RgRd(120, MAC_MA32_127LR120_val);
+	MAC_MA32_127LR_RgRd(119, MAC_MA32_127LR119_val);
+	MAC_MA32_127LR_RgRd(118, MAC_MA32_127LR118_val);
+	MAC_MA32_127LR_RgRd(117, MAC_MA32_127LR117_val);
+	MAC_MA32_127LR_RgRd(116, MAC_MA32_127LR116_val);
+	MAC_MA32_127LR_RgRd(115, MAC_MA32_127LR115_val);
+	MAC_MA32_127LR_RgRd(114, MAC_MA32_127LR114_val);
+	MAC_MA32_127LR_RgRd(113, MAC_MA32_127LR113_val);
+	MAC_MA32_127LR_RgRd(112, MAC_MA32_127LR112_val);
+	MAC_MA32_127LR_RgRd(111, MAC_MA32_127LR111_val);
+	MAC_MA32_127LR_RgRd(110, MAC_MA32_127LR110_val);
+	MAC_MA32_127LR_RgRd(109, MAC_MA32_127LR109_val);
+	MAC_MA32_127LR_RgRd(108, MAC_MA32_127LR108_val);
+	MAC_MA32_127LR_RgRd(107, MAC_MA32_127LR107_val);
+	MAC_MA32_127LR_RgRd(106, MAC_MA32_127LR106_val);
+	MAC_MA32_127LR_RgRd(105, MAC_MA32_127LR105_val);
+	MAC_MA32_127LR_RgRd(104, MAC_MA32_127LR104_val);
+	MAC_MA32_127LR_RgRd(103, MAC_MA32_127LR103_val);
+	MAC_MA32_127LR_RgRd(102, MAC_MA32_127LR102_val);
+	MAC_MA32_127LR_RgRd(101, MAC_MA32_127LR101_val);
+	MAC_MA32_127LR_RgRd(100, MAC_MA32_127LR100_val);
+	MAC_MA32_127LR_RgRd(99, MAC_MA32_127LR99_val);
+	MAC_MA32_127LR_RgRd(98, MAC_MA32_127LR98_val);
+	MAC_MA32_127LR_RgRd(97, MAC_MA32_127LR97_val);
+	MAC_MA32_127LR_RgRd(96, MAC_MA32_127LR96_val);
+	MAC_MA32_127LR_RgRd(95, MAC_MA32_127LR95_val);
+	MAC_MA32_127LR_RgRd(94, MAC_MA32_127LR94_val);
+	MAC_MA32_127LR_RgRd(93, MAC_MA32_127LR93_val);
+	MAC_MA32_127LR_RgRd(92, MAC_MA32_127LR92_val);
+	MAC_MA32_127LR_RgRd(91, MAC_MA32_127LR91_val);
+	MAC_MA32_127LR_RgRd(90, MAC_MA32_127LR90_val);
+	MAC_MA32_127LR_RgRd(89, MAC_MA32_127LR89_val);
+	MAC_MA32_127LR_RgRd(88, MAC_MA32_127LR88_val);
+	MAC_MA32_127LR_RgRd(87, MAC_MA32_127LR87_val);
+	MAC_MA32_127LR_RgRd(86, MAC_MA32_127LR86_val);
+	MAC_MA32_127LR_RgRd(85, MAC_MA32_127LR85_val);
+	MAC_MA32_127LR_RgRd(84, MAC_MA32_127LR84_val);
+	MAC_MA32_127LR_RgRd(83, MAC_MA32_127LR83_val);
+	MAC_MA32_127LR_RgRd(82, MAC_MA32_127LR82_val);
+	MAC_MA32_127LR_RgRd(81, MAC_MA32_127LR81_val);
+	MAC_MA32_127LR_RgRd(80, MAC_MA32_127LR80_val);
+	MAC_MA32_127LR_RgRd(79, MAC_MA32_127LR79_val);
+	MAC_MA32_127LR_RgRd(78, MAC_MA32_127LR78_val);
+	MAC_MA32_127LR_RgRd(77, MAC_MA32_127LR77_val);
+	MAC_MA32_127LR_RgRd(76, MAC_MA32_127LR76_val);
+	MAC_MA32_127LR_RgRd(75, MAC_MA32_127LR75_val);
+	MAC_MA32_127LR_RgRd(74, MAC_MA32_127LR74_val);
+	MAC_MA32_127LR_RgRd(73, MAC_MA32_127LR73_val);
+	MAC_MA32_127LR_RgRd(72, MAC_MA32_127LR72_val);
+	MAC_MA32_127LR_RgRd(71, MAC_MA32_127LR71_val);
+	MAC_MA32_127LR_RgRd(70, MAC_MA32_127LR70_val);
+	MAC_MA32_127LR_RgRd(69, MAC_MA32_127LR69_val);
+	MAC_MA32_127LR_RgRd(68, MAC_MA32_127LR68_val);
+	MAC_MA32_127LR_RgRd(67, MAC_MA32_127LR67_val);
+	MAC_MA32_127LR_RgRd(66, MAC_MA32_127LR66_val);
+	MAC_MA32_127LR_RgRd(65, MAC_MA32_127LR65_val);
+	MAC_MA32_127LR_RgRd(64, MAC_MA32_127LR64_val);
+	MAC_MA32_127LR_RgRd(63, MAC_MA32_127LR63_val);
+	MAC_MA32_127LR_RgRd(62, MAC_MA32_127LR62_val);
+	MAC_MA32_127LR_RgRd(61, MAC_MA32_127LR61_val);
+	MAC_MA32_127LR_RgRd(60, MAC_MA32_127LR60_val);
+	MAC_MA32_127LR_RgRd(59, MAC_MA32_127LR59_val);
+	MAC_MA32_127LR_RgRd(58, MAC_MA32_127LR58_val);
+	MAC_MA32_127LR_RgRd(57, MAC_MA32_127LR57_val);
+	MAC_MA32_127LR_RgRd(56, MAC_MA32_127LR56_val);
+	MAC_MA32_127LR_RgRd(55, MAC_MA32_127LR55_val);
+	MAC_MA32_127LR_RgRd(54, MAC_MA32_127LR54_val);
+	MAC_MA32_127LR_RgRd(53, MAC_MA32_127LR53_val);
+	MAC_MA32_127LR_RgRd(52, MAC_MA32_127LR52_val);
+	MAC_MA32_127LR_RgRd(51, MAC_MA32_127LR51_val);
+	MAC_MA32_127LR_RgRd(50, MAC_MA32_127LR50_val);
+	MAC_MA32_127LR_RgRd(49, MAC_MA32_127LR49_val);
+	MAC_MA32_127LR_RgRd(48, MAC_MA32_127LR48_val);
+	MAC_MA32_127LR_RgRd(47, MAC_MA32_127LR47_val);
+	MAC_MA32_127LR_RgRd(46, MAC_MA32_127LR46_val);
+	MAC_MA32_127LR_RgRd(45, MAC_MA32_127LR45_val);
+	MAC_MA32_127LR_RgRd(44, MAC_MA32_127LR44_val);
+	MAC_MA32_127LR_RgRd(43, MAC_MA32_127LR43_val);
+	MAC_MA32_127LR_RgRd(42, MAC_MA32_127LR42_val);
+	MAC_MA32_127LR_RgRd(41, MAC_MA32_127LR41_val);
+	MAC_MA32_127LR_RgRd(40, MAC_MA32_127LR40_val);
+	MAC_MA32_127LR_RgRd(39, MAC_MA32_127LR39_val);
+	MAC_MA32_127LR_RgRd(38, MAC_MA32_127LR38_val);
+	MAC_MA32_127LR_RgRd(37, MAC_MA32_127LR37_val);
+	MAC_MA32_127LR_RgRd(36, MAC_MA32_127LR36_val);
+	MAC_MA32_127LR_RgRd(35, MAC_MA32_127LR35_val);
+	MAC_MA32_127LR_RgRd(34, MAC_MA32_127LR34_val);
+	MAC_MA32_127LR_RgRd(33, MAC_MA32_127LR33_val);
+	MAC_MA32_127LR_RgRd(32, MAC_MA32_127LR32_val);
+	MAC_MA32_127HR_RgRd(127, MAC_MA32_127HR127_val);
+	MAC_MA32_127HR_RgRd(126, MAC_MA32_127HR126_val);
+	MAC_MA32_127HR_RgRd(125, MAC_MA32_127HR125_val);
+	MAC_MA32_127HR_RgRd(124, MAC_MA32_127HR124_val);
+	MAC_MA32_127HR_RgRd(123, MAC_MA32_127HR123_val);
+	MAC_MA32_127HR_RgRd(122, MAC_MA32_127HR122_val);
+	MAC_MA32_127HR_RgRd(121, MAC_MA32_127HR121_val);
+	MAC_MA32_127HR_RgRd(120, MAC_MA32_127HR120_val);
+	MAC_MA32_127HR_RgRd(119, MAC_MA32_127HR119_val);
+	MAC_MA32_127HR_RgRd(118, MAC_MA32_127HR118_val);
+	MAC_MA32_127HR_RgRd(117, MAC_MA32_127HR117_val);
+	MAC_MA32_127HR_RgRd(116, MAC_MA32_127HR116_val);
+	MAC_MA32_127HR_RgRd(115, MAC_MA32_127HR115_val);
+	MAC_MA32_127HR_RgRd(114, MAC_MA32_127HR114_val);
+	MAC_MA32_127HR_RgRd(113, MAC_MA32_127HR113_val);
+	MAC_MA32_127HR_RgRd(112, MAC_MA32_127HR112_val);
+	MAC_MA32_127HR_RgRd(111, MAC_MA32_127HR111_val);
+	MAC_MA32_127HR_RgRd(110, MAC_MA32_127HR110_val);
+	MAC_MA32_127HR_RgRd(109, MAC_MA32_127HR109_val);
+	MAC_MA32_127HR_RgRd(108, MAC_MA32_127HR108_val);
+	MAC_MA32_127HR_RgRd(107, MAC_MA32_127HR107_val);
+	MAC_MA32_127HR_RgRd(106, MAC_MA32_127HR106_val);
+	MAC_MA32_127HR_RgRd(105, MAC_MA32_127HR105_val);
+	MAC_MA32_127HR_RgRd(104, MAC_MA32_127HR104_val);
+	MAC_MA32_127HR_RgRd(103, MAC_MA32_127HR103_val);
+	MAC_MA32_127HR_RgRd(102, MAC_MA32_127HR102_val);
+	MAC_MA32_127HR_RgRd(101, MAC_MA32_127HR101_val);
+	MAC_MA32_127HR_RgRd(100, MAC_MA32_127HR100_val);
+	MAC_MA32_127HR_RgRd(99, MAC_MA32_127HR99_val);
+	MAC_MA32_127HR_RgRd(98, MAC_MA32_127HR98_val);
+	MAC_MA32_127HR_RgRd(97, MAC_MA32_127HR97_val);
+	MAC_MA32_127HR_RgRd(96, MAC_MA32_127HR96_val);
+	MAC_MA32_127HR_RgRd(95, MAC_MA32_127HR95_val);
+	MAC_MA32_127HR_RgRd(94, MAC_MA32_127HR94_val);
+	MAC_MA32_127HR_RgRd(93, MAC_MA32_127HR93_val);
+	MAC_MA32_127HR_RgRd(92, MAC_MA32_127HR92_val);
+	MAC_MA32_127HR_RgRd(91, MAC_MA32_127HR91_val);
+	MAC_MA32_127HR_RgRd(90, MAC_MA32_127HR90_val);
+	MAC_MA32_127HR_RgRd(89, MAC_MA32_127HR89_val);
+	MAC_MA32_127HR_RgRd(88, MAC_MA32_127HR88_val);
+	MAC_MA32_127HR_RgRd(87, MAC_MA32_127HR87_val);
+	MAC_MA32_127HR_RgRd(86, MAC_MA32_127HR86_val);
+	MAC_MA32_127HR_RgRd(85, MAC_MA32_127HR85_val);
+	MAC_MA32_127HR_RgRd(84, MAC_MA32_127HR84_val);
+	MAC_MA32_127HR_RgRd(83, MAC_MA32_127HR83_val);
+	MAC_MA32_127HR_RgRd(82, MAC_MA32_127HR82_val);
+	MAC_MA32_127HR_RgRd(81, MAC_MA32_127HR81_val);
+	MAC_MA32_127HR_RgRd(80, MAC_MA32_127HR80_val);
+	MAC_MA32_127HR_RgRd(79, MAC_MA32_127HR79_val);
+	MAC_MA32_127HR_RgRd(78, MAC_MA32_127HR78_val);
+	MAC_MA32_127HR_RgRd(77, MAC_MA32_127HR77_val);
+	MAC_MA32_127HR_RgRd(76, MAC_MA32_127HR76_val);
+	MAC_MA32_127HR_RgRd(75, MAC_MA32_127HR75_val);
+	MAC_MA32_127HR_RgRd(74, MAC_MA32_127HR74_val);
+	MAC_MA32_127HR_RgRd(73, MAC_MA32_127HR73_val);
+	MAC_MA32_127HR_RgRd(72, MAC_MA32_127HR72_val);
+	MAC_MA32_127HR_RgRd(71, MAC_MA32_127HR71_val);
+	MAC_MA32_127HR_RgRd(70, MAC_MA32_127HR70_val);
+	MAC_MA32_127HR_RgRd(69, MAC_MA32_127HR69_val);
+	MAC_MA32_127HR_RgRd(68, MAC_MA32_127HR68_val);
+	MAC_MA32_127HR_RgRd(67, MAC_MA32_127HR67_val);
+	MAC_MA32_127HR_RgRd(66, MAC_MA32_127HR66_val);
+	MAC_MA32_127HR_RgRd(65, MAC_MA32_127HR65_val);
+	MAC_MA32_127HR_RgRd(64, MAC_MA32_127HR64_val);
+	MAC_MA32_127HR_RgRd(63, MAC_MA32_127HR63_val);
+	MAC_MA32_127HR_RgRd(62, MAC_MA32_127HR62_val);
+	MAC_MA32_127HR_RgRd(61, MAC_MA32_127HR61_val);
+	MAC_MA32_127HR_RgRd(60, MAC_MA32_127HR60_val);
+	MAC_MA32_127HR_RgRd(59, MAC_MA32_127HR59_val);
+	MAC_MA32_127HR_RgRd(58, MAC_MA32_127HR58_val);
+	MAC_MA32_127HR_RgRd(57, MAC_MA32_127HR57_val);
+	MAC_MA32_127HR_RgRd(56, MAC_MA32_127HR56_val);
+	MAC_MA32_127HR_RgRd(55, MAC_MA32_127HR55_val);
+	MAC_MA32_127HR_RgRd(54, MAC_MA32_127HR54_val);
+	MAC_MA32_127HR_RgRd(53, MAC_MA32_127HR53_val);
+	MAC_MA32_127HR_RgRd(52, MAC_MA32_127HR52_val);
+	MAC_MA32_127HR_RgRd(51, MAC_MA32_127HR51_val);
+	MAC_MA32_127HR_RgRd(50, MAC_MA32_127HR50_val);
+	MAC_MA32_127HR_RgRd(49, MAC_MA32_127HR49_val);
+	MAC_MA32_127HR_RgRd(48, MAC_MA32_127HR48_val);
+	MAC_MA32_127HR_RgRd(47, MAC_MA32_127HR47_val);
+	MAC_MA32_127HR_RgRd(46, MAC_MA32_127HR46_val);
+	MAC_MA32_127HR_RgRd(45, MAC_MA32_127HR45_val);
+	MAC_MA32_127HR_RgRd(44, MAC_MA32_127HR44_val);
+	MAC_MA32_127HR_RgRd(43, MAC_MA32_127HR43_val);
+	MAC_MA32_127HR_RgRd(42, MAC_MA32_127HR42_val);
+	MAC_MA32_127HR_RgRd(41, MAC_MA32_127HR41_val);
+	MAC_MA32_127HR_RgRd(40, MAC_MA32_127HR40_val);
+	MAC_MA32_127HR_RgRd(39, MAC_MA32_127HR39_val);
+	MAC_MA32_127HR_RgRd(38, MAC_MA32_127HR38_val);
+	MAC_MA32_127HR_RgRd(37, MAC_MA32_127HR37_val);
+	MAC_MA32_127HR_RgRd(36, MAC_MA32_127HR36_val);
+	MAC_MA32_127HR_RgRd(35, MAC_MA32_127HR35_val);
+	MAC_MA32_127HR_RgRd(34, MAC_MA32_127HR34_val);
+	MAC_MA32_127HR_RgRd(33, MAC_MA32_127HR33_val);
+	MAC_MA32_127HR_RgRd(32, MAC_MA32_127HR32_val);
+	MAC_MA1_31LR_RgRd(31, MAC_MA1_31LR31_val);
+	MAC_MA1_31LR_RgRd(30, MAC_MA1_31LR30_val);
+	MAC_MA1_31LR_RgRd(29, MAC_MA1_31LR29_val);
+	MAC_MA1_31LR_RgRd(28, MAC_MA1_31LR28_val);
+	MAC_MA1_31LR_RgRd(27, MAC_MA1_31LR27_val);
+	MAC_MA1_31LR_RgRd(26, MAC_MA1_31LR26_val);
+	MAC_MA1_31LR_RgRd(25, MAC_MA1_31LR25_val);
+	MAC_MA1_31LR_RgRd(24, MAC_MA1_31LR24_val);
+	MAC_MA1_31LR_RgRd(23, MAC_MA1_31LR23_val);
+	MAC_MA1_31LR_RgRd(22, MAC_MA1_31LR22_val);
+	MAC_MA1_31LR_RgRd(21, MAC_MA1_31LR21_val);
+	MAC_MA1_31LR_RgRd(20, MAC_MA1_31LR20_val);
+	MAC_MA1_31LR_RgRd(19, MAC_MA1_31LR19_val);
+	MAC_MA1_31LR_RgRd(18, MAC_MA1_31LR18_val);
+	MAC_MA1_31LR_RgRd(17, MAC_MA1_31LR17_val);
+	MAC_MA1_31LR_RgRd(16, MAC_MA1_31LR16_val);
+	MAC_MA1_31LR_RgRd(15, MAC_MA1_31LR15_val);
+	MAC_MA1_31LR_RgRd(14, MAC_MA1_31LR14_val);
+	MAC_MA1_31LR_RgRd(13, MAC_MA1_31LR13_val);
+	MAC_MA1_31LR_RgRd(12, MAC_MA1_31LR12_val);
+	MAC_MA1_31LR_RgRd(11, MAC_MA1_31LR11_val);
+	MAC_MA1_31LR_RgRd(10, MAC_MA1_31LR10_val);
+	MAC_MA1_31LR_RgRd(9, MAC_MA1_31LR9_val);
+	MAC_MA1_31LR_RgRd(8, MAC_MA1_31LR8_val);
+	MAC_MA1_31LR_RgRd(7, MAC_MA1_31LR7_val);
+	MAC_MA1_31LR_RgRd(6, MAC_MA1_31LR6_val);
+	MAC_MA1_31LR_RgRd(5, MAC_MA1_31LR5_val);
+	MAC_MA1_31LR_RgRd(4, MAC_MA1_31LR4_val);
+	MAC_MA1_31LR_RgRd(3, MAC_MA1_31LR3_val);
+	MAC_MA1_31LR_RgRd(2, MAC_MA1_31LR2_val);
+	MAC_MA1_31LR_RgRd(1, MAC_MA1_31LR1_val);
+	MAC_MA1_31HR_RgRd(31, MAC_MA1_31HR31_val);
+	MAC_MA1_31HR_RgRd(30, MAC_MA1_31HR30_val);
+	MAC_MA1_31HR_RgRd(29, MAC_MA1_31HR29_val);
+	MAC_MA1_31HR_RgRd(28, MAC_MA1_31HR28_val);
+	MAC_MA1_31HR_RgRd(27, MAC_MA1_31HR27_val);
+	MAC_MA1_31HR_RgRd(26, MAC_MA1_31HR26_val);
+	MAC_MA1_31HR_RgRd(25, MAC_MA1_31HR25_val);
+	MAC_MA1_31HR_RgRd(24, MAC_MA1_31HR24_val);
+	MAC_MA1_31HR_RgRd(23, MAC_MA1_31HR23_val);
+	MAC_MA1_31HR_RgRd(22, MAC_MA1_31HR22_val);
+	MAC_MA1_31HR_RgRd(21, MAC_MA1_31HR21_val);
+	MAC_MA1_31HR_RgRd(20, MAC_MA1_31HR20_val);
+	MAC_MA1_31HR_RgRd(19, MAC_MA1_31HR19_val);
+	MAC_MA1_31HR_RgRd(18, MAC_MA1_31HR18_val);
+	MAC_MA1_31HR_RgRd(17, MAC_MA1_31HR17_val);
+	MAC_MA1_31HR_RgRd(16, MAC_MA1_31HR16_val);
+	MAC_MA1_31HR_RgRd(15, MAC_MA1_31HR15_val);
+	MAC_MA1_31HR_RgRd(14, MAC_MA1_31HR14_val);
+	MAC_MA1_31HR_RgRd(13, MAC_MA1_31HR13_val);
+	MAC_MA1_31HR_RgRd(12, MAC_MA1_31HR12_val);
+	MAC_MA1_31HR_RgRd(11, MAC_MA1_31HR11_val);
+	MAC_MA1_31HR_RgRd(10, MAC_MA1_31HR10_val);
+	MAC_MA1_31HR_RgRd(9, MAC_MA1_31HR9_val);
+	MAC_MA1_31HR_RgRd(8, MAC_MA1_31HR8_val);
+	MAC_MA1_31HR_RgRd(7, MAC_MA1_31HR7_val);
+	MAC_MA1_31HR_RgRd(6, MAC_MA1_31HR6_val);
+	MAC_MA1_31HR_RgRd(5, MAC_MA1_31HR5_val);
+	MAC_MA1_31HR_RgRd(4, MAC_MA1_31HR4_val);
+	MAC_MA1_31HR_RgRd(3, MAC_MA1_31HR3_val);
+	MAC_MA1_31HR_RgRd(2, MAC_MA1_31HR2_val);
+	MAC_MA1_31HR_RgRd(1, MAC_MA1_31HR1_val);
+	MAC_ARPA_RgRd(MAC_ARPA_val);
+	MAC_L3A3R7_RgRd(MAC_L3A3R7_val);
+	MAC_L3A3R6_RgRd(MAC_L3A3R6_val);
+	MAC_L3A3R5_RgRd(MAC_L3A3R5_val);
+	MAC_L3A3R4_RgRd(MAC_L3A3R4_val);
+	MAC_L3A3R3_RgRd(MAC_L3A3R3_val);
+	MAC_L3A3R2_RgRd(MAC_L3A3R2_val);
+	MAC_L3A3R1_RgRd(MAC_L3A3R1_val);
+	MAC_L3A3R0_RgRd(MAC_L3A3R0_val);
+	MAC_L3A2R7_RgRd(MAC_L3A2R7_val);
+	MAC_L3A2R6_RgRd(MAC_L3A2R6_val);
+	MAC_L3A2R5_RgRd(MAC_L3A2R5_val);
+	MAC_L3A2R4_RgRd(MAC_L3A2R4_val);
+	MAC_L3A2R3_RgRd(MAC_L3A2R3_val);
+	MAC_L3A2R2_RgRd(MAC_L3A2R2_val);
+	MAC_L3A2R1_RgRd(MAC_L3A2R1_val);
+	MAC_L3A2R0_RgRd(MAC_L3A2R0_val);
+	MAC_L3A1R7_RgRd(MAC_L3A1R7_val);
+	MAC_L3A1R6_RgRd(MAC_L3A1R6_val);
+	MAC_L3A1R5_RgRd(MAC_L3A1R5_val);
+	MAC_L3A1R4_RgRd(MAC_L3A1R4_val);
+	MAC_L3A1R3_RgRd(MAC_L3A1R3_val);
+	MAC_L3A1R2_RgRd(MAC_L3A1R2_val);
+	MAC_L3A1R1_RgRd(MAC_L3A1R1_val);
+	MAC_L3A1R0_RgRd(MAC_L3A1R0_val);
+	MAC_L3A0R7_RgRd(MAC_L3A0R7_val);
+	MAC_L3A0R6_RgRd(MAC_L3A0R6_val);
+	MAC_L3A0R5_RgRd(MAC_L3A0R5_val);
+	MAC_L3A0R4_RgRd(MAC_L3A0R4_val);
+	MAC_L3A0R3_RgRd(MAC_L3A0R3_val);
+	MAC_L3A0R2_RgRd(MAC_L3A0R2_val);
+	MAC_L3A0R1_RgRd(MAC_L3A0R1_val);
+	MAC_L3A0R0_RgRd(MAC_L3A0R0_val);
+	MAC_L4AR7_RgRd(MAC_L4AR7_val);
+	MAC_L4AR6_RgRd(MAC_L4AR6_val);
+	MAC_L4AR5_RgRd(MAC_L4AR5_val);
+	MAC_L4AR4_RgRd(MAC_L4AR4_val);
+	MAC_L4AR3_RgRd(MAC_L4AR3_val);
+	MAC_L4AR2_RgRd(MAC_L4AR2_val);
+	MAC_L4AR1_RgRd(MAC_L4AR1_val);
+	MAC_L4AR0_RgRd(MAC_L4AR0_val);
+	MAC_L3L4CR7_RgRd(MAC_L3L4CR7_val);
+	MAC_L3L4CR6_RgRd(MAC_L3L4CR6_val);
+	MAC_L3L4CR5_RgRd(MAC_L3L4CR5_val);
+	MAC_L3L4CR4_RgRd(MAC_L3L4CR4_val);
+	MAC_L3L4CR3_RgRd(MAC_L3L4CR3_val);
+	MAC_L3L4CR2_RgRd(MAC_L3L4CR2_val);
+	MAC_L3L4CR1_RgRd(MAC_L3L4CR1_val);
+	MAC_L3L4CR0_RgRd(MAC_L3L4CR0_val);
+	MAC_GPIOS_RgRd(MAC_GPIOS_val);
+	MAC_PCS_RgRd(MAC_PCS_val);
+	MAC_TES_RgRd(MAC_TES_val);
+	MAC_AE_RgRd(MAC_AE_val);
+	MAC_ALPA_RgRd(MAC_ALPA_val);
+	MAC_AAD_RgRd(MAC_AAD_val);
+	MAC_ANS_RgRd(MAC_ANS_val);
+	MAC_ANC_RgRd(MAC_ANC_val);
+	MAC_LPC_RgRd(MAC_LPC_val);
+	MAC_LPS_RgRd(MAC_LPS_val);
+	MAC_PPS_WIDTH3_RgRd(MAC_PPS_WIDTH3_val);
+	MAC_PPS_WIDTH2_RgRd(MAC_PPS_WIDTH2_val);
+	MAC_PPS_WIDTH1_RgRd(MAC_PPS_WIDTH1_val);
+	MAC_PPS_WIDTH0_RgRd(MAC_PPS_WIDTH0_val);
+	MAC_PPS_INTVAL3_RgRd(MAC_PPS_INTVAL3_val);
+	MAC_PPS_INTVAL2_RgRd(MAC_PPS_INTVAL2_val);
+	MAC_PPS_INTVAL1_RgRd(MAC_PPS_INTVAL1_val);
+	MAC_PPS_INTVAL0_RgRd(MAC_PPS_INTVAL0_val);
+	MAC_PPS_TTNS3_RgRd(MAC_PPS_TTNS3_val);
+	MAC_PPS_TTNS2_RgRd(MAC_PPS_TTNS2_val);
+	MAC_PPS_TTNS1_RgRd(MAC_PPS_TTNS1_val);
+	MAC_PPS_TTNS0_RgRd(MAC_PPS_TTNS0_val);
+	MAC_PPS_TTS3_RgRd(MAC_PPS_TTS3_val);
+	MAC_PPS_TTS2_RgRd(MAC_PPS_TTS2_val);
+	MAC_PPS_TTS1_RgRd(MAC_PPS_TTS1_val);
+	MAC_PPS_TTS0_RgRd(MAC_PPS_TTS0_val);
+	MAC_PPSC_RgRd(MAC_PPSC_val);
+	MAC_TEAC_RgRd(MAC_TEAC_val);
+	MAC_TIAC_RgRd(MAC_TIAC_val);
+	MAC_ATS_RgRd(MAC_ATS_val);
+	MAC_ATN_RgRd(MAC_ATN_val);
+	MAC_AC_RgRd(MAC_AC_val);
+	MAC_TTN_RgRd(MAC_TTN_val);
+	MAC_TTSN_RgRd(MAC_TTSN_val);
+	MAC_TSR_RgRd(MAC_TSR_val);
+	MAC_STHWR_RgRd(MAC_STHWR_val);
+	MAC_TAR_RgRd(MAC_TAR_val);
+	MAC_STNSUR_RgRd(MAC_STNSUR_val);
+	MAC_STSUR_RgRd(MAC_STSUR_val);
+	MAC_STNSR_RgRd(MAC_STNSR_val);
+	MAC_STSR_RgRd(MAC_STSR_val);
+	MAC_SSIR_RgRd(MAC_SSIR_val);
+	MAC_TCR_RgRd(MAC_TCR_val);
+	MTL_DSR_RgRd(MTL_DSR_val);
+	MAC_RWPFFR_RgRd(MAC_RWPFFR_val);
+	MAC_RTSR_RgRd(MAC_RTSR_val);
+	MTL_IER_RgRd(MTL_IER_val);
+	MTL_QRCR7_RgRd(MTL_QRCR7_val);
+	MTL_QRCR6_RgRd(MTL_QRCR6_val);
+	MTL_QRCR5_RgRd(MTL_QRCR5_val);
+	MTL_QRCR4_RgRd(MTL_QRCR4_val);
+	MTL_QRCR3_RgRd(MTL_QRCR3_val);
+	MTL_QRCR2_RgRd(MTL_QRCR2_val);
+	MTL_QRCR1_RgRd(MTL_QRCR1_val);
+	MTL_QRDR7_RgRd(MTL_QRDR7_val);
+	MTL_QRDR6_RgRd(MTL_QRDR6_val);
+	MTL_QRDR5_RgRd(MTL_QRDR5_val);
+	MTL_QRDR4_RgRd(MTL_QRDR4_val);
+	MTL_QRDR3_RgRd(MTL_QRDR3_val);
+	MTL_QRDR2_RgRd(MTL_QRDR2_val);
+	MTL_QRDR1_RgRd(MTL_QRDR1_val);
+	MTL_QOCR7_RgRd(MTL_QOCR7_val);
+	MTL_QOCR6_RgRd(MTL_QOCR6_val);
+	MTL_QOCR5_RgRd(MTL_QOCR5_val);
+	MTL_QOCR4_RgRd(MTL_QOCR4_val);
+	MTL_QOCR3_RgRd(MTL_QOCR3_val);
+	MTL_QOCR2_RgRd(MTL_QOCR2_val);
+	MTL_QOCR1_RgRd(MTL_QOCR1_val);
+	MTL_QROMR7_RgRd(MTL_QROMR7_val);
+	MTL_QROMR6_RgRd(MTL_QROMR6_val);
+	MTL_QROMR5_RgRd(MTL_QROMR5_val);
+	MTL_QROMR4_RgRd(MTL_QROMR4_val);
+	MTL_QROMR3_RgRd(MTL_QROMR3_val);
+	MTL_QROMR2_RgRd(MTL_QROMR2_val);
+	MTL_QROMR1_RgRd(MTL_QROMR1_val);
+	MTL_QLCR7_RgRd(MTL_QLCR7_val);
+	MTL_QLCR6_RgRd(MTL_QLCR6_val);
+	MTL_QLCR5_RgRd(MTL_QLCR5_val);
+	MTL_QLCR4_RgRd(MTL_QLCR4_val);
+	MTL_QLCR3_RgRd(MTL_QLCR3_val);
+	MTL_QLCR2_RgRd(MTL_QLCR2_val);
+	MTL_QLCR1_RgRd(MTL_QLCR1_val);
+	MTL_QHCR7_RgRd(MTL_QHCR7_val);
+	MTL_QHCR6_RgRd(MTL_QHCR6_val);
+	MTL_QHCR5_RgRd(MTL_QHCR5_val);
+	MTL_QHCR4_RgRd(MTL_QHCR4_val);
+	MTL_QHCR3_RgRd(MTL_QHCR3_val);
+	MTL_QHCR2_RgRd(MTL_QHCR2_val);
+	MTL_QHCR1_RgRd(MTL_QHCR1_val);
+	MTL_QSSCR7_RgRd(MTL_QSSCR7_val);
+	MTL_QSSCR6_RgRd(MTL_QSSCR6_val);
+	MTL_QSSCR5_RgRd(MTL_QSSCR5_val);
+	MTL_QSSCR4_RgRd(MTL_QSSCR4_val);
+	MTL_QSSCR3_RgRd(MTL_QSSCR3_val);
+	MTL_QSSCR2_RgRd(MTL_QSSCR2_val);
+	MTL_QSSCR1_RgRd(MTL_QSSCR1_val);
+	MTL_QW7_RgRd(MTL_QW7_val);
+	MTL_QW6_RgRd(MTL_QW6_val);
+	MTL_QW5_RgRd(MTL_QW5_val);
+	MTL_QW4_RgRd(MTL_QW4_val);
+	MTL_QW3_RgRd(MTL_QW3_val);
+	MTL_QW2_RgRd(MTL_QW2_val);
+	MTL_QW1_RgRd(MTL_QW1_val);
+	MTL_QESR7_RgRd(MTL_QESR7_val);
+	MTL_QESR6_RgRd(MTL_QESR6_val);
+	MTL_QESR5_RgRd(MTL_QESR5_val);
+	MTL_QESR4_RgRd(MTL_QESR4_val);
+	MTL_QESR3_RgRd(MTL_QESR3_val);
+	MTL_QESR2_RgRd(MTL_QESR2_val);
+	MTL_QESR1_RgRd(MTL_QESR1_val);
+	MTL_QECR7_RgRd(MTL_QECR7_val);
+	MTL_QECR6_RgRd(MTL_QECR6_val);
+	MTL_QECR5_RgRd(MTL_QECR5_val);
+	MTL_QECR4_RgRd(MTL_QECR4_val);
+	MTL_QECR3_RgRd(MTL_QECR3_val);
+	MTL_QECR2_RgRd(MTL_QECR2_val);
+	MTL_QECR1_RgRd(MTL_QECR1_val);
+	MTL_QTDR7_RgRd(MTL_QTDR7_val);
+	MTL_QTDR6_RgRd(MTL_QTDR6_val);
+	MTL_QTDR5_RgRd(MTL_QTDR5_val);
+	MTL_QTDR4_RgRd(MTL_QTDR4_val);
+	MTL_QTDR3_RgRd(MTL_QTDR3_val);
+	MTL_QTDR2_RgRd(MTL_QTDR2_val);
+	MTL_QTDR1_RgRd(MTL_QTDR1_val);
+	MTL_QUCR7_RgRd(MTL_QUCR7_val);
+	MTL_QUCR6_RgRd(MTL_QUCR6_val);
+	MTL_QUCR5_RgRd(MTL_QUCR5_val);
+	MTL_QUCR4_RgRd(MTL_QUCR4_val);
+	MTL_QUCR3_RgRd(MTL_QUCR3_val);
+	MTL_QUCR2_RgRd(MTL_QUCR2_val);
+	MTL_QUCR1_RgRd(MTL_QUCR1_val);
+	MTL_QTOMR7_RgRd(MTL_QTOMR7_val);
+	MTL_QTOMR6_RgRd(MTL_QTOMR6_val);
+	MTL_QTOMR5_RgRd(MTL_QTOMR5_val);
+	MTL_QTOMR4_RgRd(MTL_QTOMR4_val);
+	MTL_QTOMR3_RgRd(MTL_QTOMR3_val);
+	MTL_QTOMR2_RgRd(MTL_QTOMR2_val);
+	MTL_QTOMR1_RgRd(MTL_QTOMR1_val);
+	MAC_PMTCSR_RgRd(MAC_PMTCSR_val);
+	if (pdata->hw_feat.mmc_sel) {
+		MMC_RXICMP_ERR_OCTETS_RgRd(MMC_RXICMP_ERR_OCTETS_val);
+		MMC_RXICMP_GD_OCTETS_RgRd(MMC_RXICMP_GD_OCTETS_val);
+		MMC_RXTCP_ERR_OCTETS_RgRd(MMC_RXTCP_ERR_OCTETS_val);
+		MMC_RXTCP_GD_OCTETS_RgRd(MMC_RXTCP_GD_OCTETS_val);
+		MMC_RXUDP_ERR_OCTETS_RgRd(MMC_RXUDP_ERR_OCTETS_val);
+		MMC_RXUDP_GD_OCTETS_RgRd(MMC_RXUDP_GD_OCTETS_val);
+		MMC_RXIPV6_NOPAY_OCTETS_RgRd(MMC_RXIPV6_NOPAY_OCTETS_val);
+		MMC_RXIPV6_HDRERR_OCTETS_RgRd(MMC_RXIPV6_HDRERR_OCTETS_val);
+		MMC_RXIPV6_GD_OCTETS_RgRd(MMC_RXIPV6_GD_OCTETS_val);
+		MMC_RXIPV4_UDSBL_OCTETS_RgRd(MMC_RXIPV4_UDSBL_OCTETS_val);
+		MMC_RXIPV4_FRAG_OCTETS_RgRd(MMC_RXIPV4_FRAG_OCTETS_val);
+		MMC_RXIPV4_NOPAY_OCTETS_RgRd(MMC_RXIPV4_NOPAY_OCTETS_val);
+		MMC_RXIPV4_HDRERR_OCTETS_RgRd(MMC_RXIPV4_HDRERR_OCTETS_val);
+		MMC_RXIPV4_GD_OCTETS_RgRd(MMC_RXIPV4_GD_OCTETS_val);
+		MMC_RXICMP_ERR_PKTS_RgRd(MMC_RXICMP_ERR_PKTS_val);
+		MMC_RXICMP_GD_PKTS_RgRd(MMC_RXICMP_GD_PKTS_val);
+		MMC_RXTCP_ERR_PKTS_RgRd(MMC_RXTCP_ERR_PKTS_val);
+		MMC_RXTCP_GD_PKTS_RgRd(MMC_RXTCP_GD_PKTS_val);
+		MMC_RXUDP_ERR_PKTS_RgRd(MMC_RXUDP_ERR_PKTS_val);
+		MMC_RXUDP_GD_PKTS_RgRd(MMC_RXUDP_GD_PKTS_val);
+		MMC_RXIPV6_NOPAY_PKTS_RgRd(MMC_RXIPV6_NOPAY_PKTS_val);
+		MMC_RXIPV6_HDRERR_PKTS_RgRd(MMC_RXIPV6_HDRERR_PKTS_val);
+		MMC_RXIPV6_GD_PKTS_RgRd(MMC_RXIPV6_GD_PKTS_val);
+		MMC_RXIPV4_UBSBL_PKTS_RgRd(MMC_RXIPV4_UBSBL_PKTS_val);
+		MMC_RXIPV4_FRAG_PKTS_RgRd(MMC_RXIPV4_FRAG_PKTS_val);
+		MMC_RXIPV4_NOPAY_PKTS_RgRd(MMC_RXIPV4_NOPAY_PKTS_val);
+		MMC_RXIPV4_HDRERR_PKTS_RgRd(MMC_RXIPV4_HDRERR_PKTS_val);
+		MMC_RXIPV4_GD_PKTS_RgRd(MMC_RXIPV4_GD_PKTS_val);
+		MMC_RXCTRLPACKETS_G_RgRd(MMC_RXCTRLPACKETS_G_val);
+		MMC_RXRCVERROR_RgRd(MMC_RXRCVERROR_val);
+		MMC_RXWATCHDOGERROR_RgRd(MMC_RXWATCHDOGERROR_val);
+		MMC_RXVLANPACKETS_GB_RgRd(MMC_RXVLANPACKETS_GB_val);
+		MMC_RXFIFOOVERFLOW_RgRd(MMC_RXFIFOOVERFLOW_val);
+		MMC_RXPAUSEPACKETS_RgRd(MMC_RXPAUSEPACKETS_val);
+		MMC_RXOUTOFRANGETYPE_RgRd(MMC_RXOUTOFRANGETYPE_val);
+		MMC_RXLENGTHERROR_RgRd(MMC_RXLENGTHERROR_val);
+		MMC_RXUNICASTPACKETS_G_RgRd(MMC_RXUNICASTPACKETS_G_val);
+		MMC_RX1024TOMAXOCTETS_GB_RgRd(MMC_RX1024TOMAXOCTETS_GB_val);
+		MMC_RX512TO1023OCTETS_GB_RgRd(MMC_RX512TO1023OCTETS_GB_val);
+		MMC_RX256TO511OCTETS_GB_RgRd(MMC_RX256TO511OCTETS_GB_val);
+		MMC_RX128TO255OCTETS_GB_RgRd(MMC_RX128TO255OCTETS_GB_val);
+		MMC_RX65TO127OCTETS_GB_RgRd(MMC_RX65TO127OCTETS_GB_val);
+		MMC_RX64OCTETS_GB_RgRd(MMC_RX64OCTETS_GB_val);
+		MMC_RXOVERSIZE_G_RgRd(MMC_RXOVERSIZE_G_val);
+		MMC_RXUNDERSIZE_G_RgRd(MMC_RXUNDERSIZE_G_val);
+		MMC_RXJABBERERROR_RgRd(MMC_RXJABBERERROR_val);
+		MMC_RXRUNTERROR_RgRd(MMC_RXRUNTERROR_val);
+		MMC_RXALIGNMENTERROR_RgRd(MMC_RXALIGNMENTERROR_val);
+		MMC_RXCRCERROR_RgRd(MMC_RXCRCERROR_val);
+		MMC_RXMULTICASTPACKETS_G_RgRd(MMC_RXMULTICASTPACKETS_G_val);
+		MMC_RXBROADCASTPACKETS_G_RgRd(MMC_RXBROADCASTPACKETS_G_val);
+		MMC_RXOCTETCOUNT_G_RgRd(MMC_RXOCTETCOUNT_G_val);
+		MMC_RXOCTETCOUNT_GB_RgRd(MMC_RXOCTETCOUNT_GB_val);
+		MMC_RXPACKETCOUNT_GB_RgRd(MMC_RXPACKETCOUNT_GB_val);
+		MMC_TXOVERSIZE_G_RgRd(MMC_TXOVERSIZE_G_val);
+		MMC_TXVLANPACKETS_G_RgRd(MMC_TXVLANPACKETS_G_val);
+		MMC_TXPAUSEPACKETS_RgRd(MMC_TXPAUSEPACKETS_val);
+		MMC_TXEXCESSDEF_RgRd(MMC_TXEXCESSDEF_val);
+		MMC_TXPACKETSCOUNT_G_RgRd(MMC_TXPACKETSCOUNT_G_val);
+		MMC_TXOCTETCOUNT_G_RgRd(MMC_TXOCTETCOUNT_G_val);
+		MMC_TXCARRIERERROR_RgRd(MMC_TXCARRIERERROR_val);
+		MMC_TXEXESSCOL_RgRd(MMC_TXEXESSCOL_val);
+		MMC_TXLATECOL_RgRd(MMC_TXLATECOL_val);
+		MMC_TXDEFERRED_RgRd(MMC_TXDEFERRED_val);
+		MMC_TXMULTICOL_G_RgRd(MMC_TXMULTICOL_G_val);
+		MMC_TXSINGLECOL_G_RgRd(MMC_TXSINGLECOL_G_val);
+		MMC_TXUNDERFLOWERROR_RgRd(MMC_TXUNDERFLOWERROR_val);
+		MMC_TXBROADCASTPACKETS_GB_RgRd(MMC_TXBROADCASTPACKETS_GB_val);
+		MMC_TXMULTICASTPACKETS_GB_RgRd(MMC_TXMULTICASTPACKETS_GB_val);
+		MMC_TXUNICASTPACKETS_GB_RgRd(MMC_TXUNICASTPACKETS_GB_val);
+		MMC_TX1024TOMAXOCTETS_GB_RgRd(MMC_TX1024TOMAXOCTETS_GB_val);
+		MMC_TX512TO1023OCTETS_GB_RgRd(MMC_TX512TO1023OCTETS_GB_val);
+		MMC_TX256TO511OCTETS_GB_RgRd(MMC_TX256TO511OCTETS_GB_val);
+		MMC_TX128TO255OCTETS_GB_RgRd(MMC_TX128TO255OCTETS_GB_val);
+		MMC_TX65TO127OCTETS_GB_RgRd(MMC_TX65TO127OCTETS_GB_val);
+		MMC_TX64OCTETS_GB_RgRd(MMC_TX64OCTETS_GB_val);
+		MMC_TXMULTICASTPACKETS_G_RgRd(MMC_TXMULTICASTPACKETS_G_val);
+		MMC_TXBROADCASTPACKETS_G_RgRd(MMC_TXBROADCASTPACKETS_G_val);
+		MMC_TXPACKETCOUNT_GB_RgRd(MMC_TXPACKETCOUNT_GB_val);
+		MMC_TXOCTETCOUNT_GB_RgRd(MMC_TXOCTETCOUNT_GB_val);
+		MMC_IPC_INTR_RX_RgRd(MMC_IPC_INTR_RX_val);
+		MMC_IPC_INTR_MASK_RX_RgRd(MMC_IPC_INTR_MASK_RX_val);
+		MMC_INTR_MASK_TX_RgRd(MMC_INTR_MASK_TX_val);
+		MMC_INTR_MASK_RX_RgRd(MMC_INTR_MASK_RX_val);
+		MMC_INTR_TX_RgRd(MMC_INTR_TX_val);
+		MMC_INTR_RX_RgRd(MMC_INTR_RX_val);
+		MMC_CNTRL_RgRd(MMC_CNTRL_val);
+	}
+	MAC_MA1LR_RgRd(MAC_MA1LR_val);
+	MAC_MA1HR_RgRd(MAC_MA1HR_val);
+	MAC_MA0LR_RgRd(MAC_MA0LR_val);
+	MAC_MA0HR_RgRd(MAC_MA0HR_val);
+	MAC_GPIOR_RgRd(MAC_GPIOR_val);
+	MAC_GMIIDR_RgRd(MAC_GMIIDR_val);
+	MAC_GMIIAR_RgRd(MAC_GMIIAR_val);
+	MAC_HFR2_RgRd(MAC_HFR2_val);
+	MAC_HFR1_RgRd(MAC_HFR1_val);
+	MAC_HFR0_RgRd(MAC_HFR0_val);
+	MAC_MDR_RgRd(MAC_MDR_val);
+	MAC_VR_RgRd(MAC_VR_val);
+	MAC_HTR7_RgRd(MAC_HTR7_val);
+	MAC_HTR6_RgRd(MAC_HTR6_val);
+	MAC_HTR5_RgRd(MAC_HTR5_val);
+	MAC_HTR4_RgRd(MAC_HTR4_val);
+	MAC_HTR3_RgRd(MAC_HTR3_val);
+	MAC_HTR2_RgRd(MAC_HTR2_val);
+	MAC_HTR1_RgRd(MAC_HTR1_val);
+	MAC_HTR0_RgRd(MAC_HTR0_val);
+	DMA_RIWTR7_RgRd(DMA_RIWTR7_val);
+	DMA_RIWTR6_RgRd(DMA_RIWTR6_val);
+	DMA_RIWTR5_RgRd(DMA_RIWTR5_val);
+	DMA_RIWTR4_RgRd(DMA_RIWTR4_val);
+	DMA_RIWTR3_RgRd(DMA_RIWTR3_val);
+	DMA_RIWTR2_RgRd(DMA_RIWTR2_val);
+	DMA_RIWTR1_RgRd(DMA_RIWTR1_val);
+	DMA_RIWTR0_RgRd(DMA_RIWTR0_val);
+	DMA_RDRLR7_RgRd(DMA_RDRLR7_val);
+	DMA_RDRLR6_RgRd(DMA_RDRLR6_val);
+	DMA_RDRLR5_RgRd(DMA_RDRLR5_val);
+	DMA_RDRLR4_RgRd(DMA_RDRLR4_val);
+	DMA_RDRLR3_RgRd(DMA_RDRLR3_val);
+	DMA_RDRLR2_RgRd(DMA_RDRLR2_val);
+	DMA_RDRLR1_RgRd(DMA_RDRLR1_val);
+	DMA_RDRLR0_RgRd(DMA_RDRLR0_val);
+	DMA_TDRLR7_RgRd(DMA_TDRLR7_val);
+	DMA_TDRLR6_RgRd(DMA_TDRLR6_val);
+	DMA_TDRLR5_RgRd(DMA_TDRLR5_val);
+	DMA_TDRLR4_RgRd(DMA_TDRLR4_val);
+	DMA_TDRLR3_RgRd(DMA_TDRLR3_val);
+	DMA_TDRLR2_RgRd(DMA_TDRLR2_val);
+	DMA_TDRLR1_RgRd(DMA_TDRLR1_val);
+	DMA_TDRLR0_RgRd(DMA_TDRLR0_val);
+	DMA_RDTP_RPDR7_RgRd(DMA_RDTP_RPDR7_val);
+	DMA_RDTP_RPDR6_RgRd(DMA_RDTP_RPDR6_val);
+	DMA_RDTP_RPDR5_RgRd(DMA_RDTP_RPDR5_val);
+	DMA_RDTP_RPDR4_RgRd(DMA_RDTP_RPDR4_val);
+	DMA_RDTP_RPDR3_RgRd(DMA_RDTP_RPDR3_val);
+	DMA_RDTP_RPDR2_RgRd(DMA_RDTP_RPDR2_val);
+	DMA_RDTP_RPDR1_RgRd(DMA_RDTP_RPDR1_val);
+	DMA_RDTP_RPDR0_RgRd(DMA_RDTP_RPDR0_val);
+	DMA_TDTP_TPDR7_RgRd(DMA_TDTP_TPDR7_val);
+	DMA_TDTP_TPDR6_RgRd(DMA_TDTP_TPDR6_val);
+	DMA_TDTP_TPDR5_RgRd(DMA_TDTP_TPDR5_val);
+	DMA_TDTP_TPDR4_RgRd(DMA_TDTP_TPDR4_val);
+	DMA_TDTP_TPDR3_RgRd(DMA_TDTP_TPDR3_val);
+	DMA_TDTP_TPDR2_RgRd(DMA_TDTP_TPDR2_val);
+	DMA_TDTP_TPDR1_RgRd(DMA_TDTP_TPDR1_val);
+	DMA_TDTP_TPDR0_RgRd(DMA_TDTP_TPDR0_val);
+	DMA_RDLAR7_RgRd(DMA_RDLAR7_val);
+	DMA_RDLAR6_RgRd(DMA_RDLAR6_val);
+	DMA_RDLAR5_RgRd(DMA_RDLAR5_val);
+	DMA_RDLAR4_RgRd(DMA_RDLAR4_val);
+	DMA_RDLAR3_RgRd(DMA_RDLAR3_val);
+	DMA_RDLAR2_RgRd(DMA_RDLAR2_val);
+	DMA_RDLAR1_RgRd(DMA_RDLAR1_val);
+	DMA_RDLAR0_RgRd(DMA_RDLAR0_val);
+	DMA_TDLAR7_RgRd(DMA_TDLAR7_val);
+	DMA_TDLAR6_RgRd(DMA_TDLAR6_val);
+	DMA_TDLAR5_RgRd(DMA_TDLAR5_val);
+	DMA_TDLAR4_RgRd(DMA_TDLAR4_val);
+	DMA_TDLAR3_RgRd(DMA_TDLAR3_val);
+	DMA_TDLAR2_RgRd(DMA_TDLAR2_val);
+	DMA_TDLAR1_RgRd(DMA_TDLAR1_val);
+	DMA_TDLAR0_RgRd(DMA_TDLAR0_val);
+	DMA_IER7_RgRd(DMA_IER7_val);
+	DMA_IER6_RgRd(DMA_IER6_val);
+	DMA_IER5_RgRd(DMA_IER5_val);
+	DMA_IER4_RgRd(DMA_IER4_val);
+	DMA_IER3_RgRd(DMA_IER3_val);
+	DMA_IER2_RgRd(DMA_IER2_val);
+	DMA_IER1_RgRd(DMA_IER1_val);
+	DMA_IER0_RgRd(DMA_IER0_val);
+	MAC_IMR_RgRd(MAC_IMR_val);
+	MAC_ISR_RgRd(MAC_ISR_val);
+	MTL_ISR_RgRd(MTL_ISR_val);
+	DMA_SR7_RgRd(DMA_SR7_val);
+	DMA_SR6_RgRd(DMA_SR6_val);
+	DMA_SR5_RgRd(DMA_SR5_val);
+	DMA_SR4_RgRd(DMA_SR4_val);
+	DMA_SR3_RgRd(DMA_SR3_val);
+	DMA_SR2_RgRd(DMA_SR2_val);
+	DMA_SR1_RgRd(DMA_SR1_val);
+	DMA_SR0_RgRd(DMA_SR0_val);
+	DMA_ISR_RgRd(DMA_ISR_val);
+	DMA_DSR2_RgRd(DMA_DSR2_val);
+	DMA_DSR1_RgRd(DMA_DSR1_val);
+	DMA_DSR0_RgRd(DMA_DSR0_val);
+	MTL_Q0RDR_RgRd(MTL_Q0RDR_val);
+	MTL_Q0ESR_RgRd(MTL_Q0ESR_val);
+	MTL_Q0TDR_RgRd(MTL_Q0TDR_val);
+	DMA_CHRBAR7_RgRd(DMA_CHRBAR7_val);
+	DMA_CHRBAR6_RgRd(DMA_CHRBAR6_val);
+	DMA_CHRBAR5_RgRd(DMA_CHRBAR5_val);
+	DMA_CHRBAR4_RgRd(DMA_CHRBAR4_val);
+	DMA_CHRBAR3_RgRd(DMA_CHRBAR3_val);
+	DMA_CHRBAR2_RgRd(DMA_CHRBAR2_val);
+	DMA_CHRBAR1_RgRd(DMA_CHRBAR1_val);
+	DMA_CHRBAR0_RgRd(DMA_CHRBAR0_val);
+	DMA_CHTBAR7_RgRd(DMA_CHTBAR7_val);
+	DMA_CHTBAR6_RgRd(DMA_CHTBAR6_val);
+	DMA_CHTBAR5_RgRd(DMA_CHTBAR5_val);
+	DMA_CHTBAR4_RgRd(DMA_CHTBAR4_val);
+	DMA_CHTBAR3_RgRd(DMA_CHTBAR3_val);
+	DMA_CHTBAR2_RgRd(DMA_CHTBAR2_val);
+	DMA_CHTBAR1_RgRd(DMA_CHTBAR1_val);
+	DMA_CHTBAR0_RgRd(DMA_CHTBAR0_val);
+	DMA_CHRDR7_RgRd(DMA_CHRDR7_val);
+	DMA_CHRDR6_RgRd(DMA_CHRDR6_val);
+	DMA_CHRDR5_RgRd(DMA_CHRDR5_val);
+	DMA_CHRDR4_RgRd(DMA_CHRDR4_val);
+	DMA_CHRDR3_RgRd(DMA_CHRDR3_val);
+	DMA_CHRDR2_RgRd(DMA_CHRDR2_val);
+	DMA_CHRDR1_RgRd(DMA_CHRDR1_val);
+	DMA_CHRDR0_RgRd(DMA_CHRDR0_val);
+	DMA_CHTDR7_RgRd(DMA_CHTDR7_val);
+	DMA_CHTDR6_RgRd(DMA_CHTDR6_val);
+	DMA_CHTDR5_RgRd(DMA_CHTDR5_val);
+	DMA_CHTDR4_RgRd(DMA_CHTDR4_val);
+	DMA_CHTDR3_RgRd(DMA_CHTDR3_val);
+	DMA_CHTDR2_RgRd(DMA_CHTDR2_val);
+	DMA_CHTDR1_RgRd(DMA_CHTDR1_val);
+	DMA_CHTDR0_RgRd(DMA_CHTDR0_val);
+	DMA_SFCSR7_RgRd(DMA_SFCSR7_val);
+	DMA_SFCSR6_RgRd(DMA_SFCSR6_val);
+	DMA_SFCSR5_RgRd(DMA_SFCSR5_val);
+	DMA_SFCSR4_RgRd(DMA_SFCSR4_val);
+	DMA_SFCSR3_RgRd(DMA_SFCSR3_val);
+	DMA_SFCSR2_RgRd(DMA_SFCSR2_val);
+	DMA_SFCSR1_RgRd(DMA_SFCSR1_val);
+	DMA_SFCSR0_RgRd(DMA_SFCSR0_val);
+	MAC_IVLANTIRR_RgRd(MAC_IVLANTIRR_val);
+	MAC_VLANTIRR_RgRd(MAC_VLANTIRR_val);
+	MAC_VLANHTR_RgRd(MAC_VLANHTR_val);
+	MAC_VLANTR_RgRd(MAC_VLANTR_val);
+	DMA_SBUS_RgRd(DMA_SBUS_val);
+	DMA_BMR_RgRd(DMA_BMR_val);
+	MTL_Q0RCR_RgRd(MTL_Q0RCR_val);
+	MTL_Q0OCR_RgRd(MTL_Q0OCR_val);
+	MTL_Q0ROMR_RgRd(MTL_Q0ROMR_val);
+	MTL_Q0QR_RgRd(MTL_Q0QR_val);
+	MTL_Q0ECR_RgRd(MTL_Q0ECR_val);
+	MTL_Q0UCR_RgRd(MTL_Q0UCR_val);
+	MTL_Q0TOMR_RgRd(MTL_Q0TOMR_val);
+	MTL_RQDCM1R_RgRd(MTL_RQDCM1R_val);
+	MTL_RQDCM0R_RgRd(MTL_RQDCM0R_val);
+	MTL_FDDR_RgRd(MTL_FDDR_val);
+	MTL_FDACS_RgRd(MTL_FDACS_val);
+	MTL_OMR_RgRd(MTL_OMR_val);
+	MAC_RQC3R_RgRd(MAC_RQC3R_val);
+	MAC_RQC2R_RgRd(MAC_RQC2R_val);
+	MAC_RQC1R_RgRd(MAC_RQC1R_val);
+	MAC_RQC0R_RgRd(MAC_RQC0R_val);
+	MAC_TQPM1R_RgRd(MAC_TQPM1R_val);
+	MAC_TQPM0R_RgRd(MAC_TQPM0R_val);
+	MAC_RFCR_RgRd(MAC_RFCR_val);
+	MAC_QTFCR7_RgRd(MAC_QTFCR7_val);
+	MAC_QTFCR6_RgRd(MAC_QTFCR6_val);
+	MAC_QTFCR5_RgRd(MAC_QTFCR5_val);
+	MAC_QTFCR4_RgRd(MAC_QTFCR4_val);
+	MAC_QTFCR3_RgRd(MAC_QTFCR3_val);
+	MAC_QTFCR2_RgRd(MAC_QTFCR2_val);
+	MAC_QTFCR1_RgRd(MAC_QTFCR1_val);
+	MAC_Q0TFCR_RgRd(MAC_Q0TFCR_val);
+	DMA_AXI4CR7_RgRd(DMA_AXI4CR7_val);
+	DMA_AXI4CR6_RgRd(DMA_AXI4CR6_val);
+	DMA_AXI4CR5_RgRd(DMA_AXI4CR5_val);
+	DMA_AXI4CR4_RgRd(DMA_AXI4CR4_val);
+	DMA_AXI4CR3_RgRd(DMA_AXI4CR3_val);
+	DMA_AXI4CR2_RgRd(DMA_AXI4CR2_val);
+	DMA_AXI4CR1_RgRd(DMA_AXI4CR1_val);
+	DMA_AXI4CR0_RgRd(DMA_AXI4CR0_val);
+	DMA_RCR7_RgRd(DMA_RCR7_val);
+	DMA_RCR6_RgRd(DMA_RCR6_val);
+	DMA_RCR5_RgRd(DMA_RCR5_val);
+	DMA_RCR4_RgRd(DMA_RCR4_val);
+	DMA_RCR3_RgRd(DMA_RCR3_val);
+	DMA_RCR2_RgRd(DMA_RCR2_val);
+	DMA_RCR1_RgRd(DMA_RCR1_val);
+	DMA_RCR0_RgRd(DMA_RCR0_val);
+	DMA_TCR7_RgRd(DMA_TCR7_val);
+	DMA_TCR6_RgRd(DMA_TCR6_val);
+	DMA_TCR5_RgRd(DMA_TCR5_val);
+	DMA_TCR4_RgRd(DMA_TCR4_val);
+	DMA_TCR3_RgRd(DMA_TCR3_val);
+	DMA_TCR2_RgRd(DMA_TCR2_val);
+	DMA_TCR1_RgRd(DMA_TCR1_val);
+	DMA_TCR0_RgRd(DMA_TCR0_val);
+	DMA_CR7_RgRd(DMA_CR7_val);
+	DMA_CR6_RgRd(DMA_CR6_val);
+	DMA_CR5_RgRd(DMA_CR5_val);
+	DMA_CR4_RgRd(DMA_CR4_val);
+	DMA_CR3_RgRd(DMA_CR3_val);
+	DMA_CR2_RgRd(DMA_CR2_val);
+	DMA_CR1_RgRd(DMA_CR1_val);
+	DMA_CR0_RgRd(DMA_CR0_val);
+	MAC_WTR_RgRd(MAC_WTR_val);
+	MAC_MPFR_RgRd(MAC_MPFR_val);
+	MAC_MECR_RgRd(MAC_MECR_val);
+	MAC_MCR_RgRd(MAC_MCR_val);
+	/* For MII/GMII register read */
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMCR,
+				     &MII_BMCR_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMSR,
+				     &MII_BMSR_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID1,
+				     &MII_PHYSID1_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID2,
+				     &MII_PHYSID2_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ADVERTISE,
+				     &MII_ADVERTISE_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_LPA,
+				     &MII_LPA_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_EXPANSION,
+				     &MII_EXPANSION_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+				     DWC_ETH_QOS_AUTO_NEGO_NP,
+				     &AUTO_NEGO_NP_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ESTATUS,
+				     &MII_ESTATUS_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_CTRL1000,
+				     &MII_CTRL1000_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_STAT1000,
+				     &MII_STAT1000_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_CTL,
+				     &PHY_CTL_REG_val);
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_STS,
+				     &PHY_STS_REG_val);
+
+	debug_buf = (char *)kmalloc(26820, GFP_KERNEL);
+
+	sprintf(debug_buf,
+		"MAC_MA32_127LR127            :%#x\n"
+		"MAC_MA32_127LR126            :%#x\n"
+		"MAC_MA32_127LR125            :%#x\n"
+		"MAC_MA32_127LR124            :%#x\n"
+		"MAC_MA32_127LR123            :%#x\n"
+		"MAC_MA32_127LR122            :%#x\n"
+		"MAC_MA32_127LR121            :%#x\n"
+		"MAC_MA32_127LR120            :%#x\n"
+		"MAC_MA32_127LR119            :%#x\n"
+		"MAC_MA32_127LR118            :%#x\n"
+		"MAC_MA32_127LR117            :%#x\n"
+		"MAC_MA32_127LR116            :%#x\n"
+		"MAC_MA32_127LR115            :%#x\n"
+		"MAC_MA32_127LR114            :%#x\n"
+		"MAC_MA32_127LR113            :%#x\n"
+		"MAC_MA32_127LR112            :%#x\n"
+		"MAC_MA32_127LR111            :%#x\n"
+		"MAC_MA32_127LR110            :%#x\n"
+		"MAC_MA32_127LR109            :%#x\n"
+		"MAC_MA32_127LR108            :%#x\n"
+		"MAC_MA32_127LR107            :%#x\n"
+		"MAC_MA32_127LR106            :%#x\n"
+		"MAC_MA32_127LR105            :%#x\n"
+		"MAC_MA32_127LR104            :%#x\n"
+		"MAC_MA32_127LR103            :%#x\n"
+		"MAC_MA32_127LR102            :%#x\n"
+		"MAC_MA32_127LR101            :%#x\n"
+		"MAC_MA32_127LR100            :%#x\n"
+		"MAC_MA32_127LR99            :%#x\n"
+		"MAC_MA32_127LR98            :%#x\n"
+		"MAC_MA32_127LR97            :%#x\n"
+		"MAC_MA32_127LR96            :%#x\n"
+		"MAC_MA32_127LR95            :%#x\n"
+		"MAC_MA32_127LR94            :%#x\n"
+		"MAC_MA32_127LR93            :%#x\n"
+		"MAC_MA32_127LR92            :%#x\n"
+		"MAC_MA32_127LR91            :%#x\n"
+		"MAC_MA32_127LR90            :%#x\n"
+		"MAC_MA32_127LR89            :%#x\n"
+		"MAC_MA32_127LR88            :%#x\n"
+		"MAC_MA32_127LR87            :%#x\n"
+		"MAC_MA32_127LR86            :%#x\n"
+		"MAC_MA32_127LR85            :%#x\n"
+		"MAC_MA32_127LR84            :%#x\n"
+		"MAC_MA32_127LR83            :%#x\n"
+		"MAC_MA32_127LR82            :%#x\n"
+		"MAC_MA32_127LR81            :%#x\n"
+		"MAC_MA32_127LR80            :%#x\n"
+		"MAC_MA32_127LR79            :%#x\n"
+		"MAC_MA32_127LR78            :%#x\n"
+		"MAC_MA32_127LR77            :%#x\n"
+		"MAC_MA32_127LR76            :%#x\n"
+		"MAC_MA32_127LR75            :%#x\n"
+		"MAC_MA32_127LR74            :%#x\n"
+		"MAC_MA32_127LR73            :%#x\n"
+		"MAC_MA32_127LR72            :%#x\n"
+		"MAC_MA32_127LR71            :%#x\n"
+		"MAC_MA32_127LR70            :%#x\n"
+		"MAC_MA32_127LR69            :%#x\n"
+		"MAC_MA32_127LR68            :%#x\n"
+		"MAC_MA32_127LR67            :%#x\n"
+		"MAC_MA32_127LR66            :%#x\n"
+		"MAC_MA32_127LR65            :%#x\n"
+		"MAC_MA32_127LR64            :%#x\n"
+		"MAC_MA32_127LR63            :%#x\n"
+		"MAC_MA32_127LR62            :%#x\n"
+		"MAC_MA32_127LR61            :%#x\n"
+		"MAC_MA32_127LR60            :%#x\n"
+		"MAC_MA32_127LR59            :%#x\n"
+		"MAC_MA32_127LR58            :%#x\n"
+		"MAC_MA32_127LR57            :%#x\n"
+		"MAC_MA32_127LR56            :%#x\n"
+		"MAC_MA32_127LR55            :%#x\n"
+		"MAC_MA32_127LR54            :%#x\n"
+		"MAC_MA32_127LR53            :%#x\n"
+		"MAC_MA32_127LR52            :%#x\n"
+		"MAC_MA32_127LR51            :%#x\n"
+		"MAC_MA32_127LR50            :%#x\n"
+		"MAC_MA32_127LR49            :%#x\n"
+		"MAC_MA32_127LR48            :%#x\n"
+		"MAC_MA32_127LR47            :%#x\n"
+		"MAC_MA32_127LR46            :%#x\n"
+		"MAC_MA32_127LR45            :%#x\n"
+		"MAC_MA32_127LR44            :%#x\n"
+		"MAC_MA32_127LR43            :%#x\n"
+		"MAC_MA32_127LR42            :%#x\n"
+		"MAC_MA32_127LR41            :%#x\n"
+		"MAC_MA32_127LR40            :%#x\n"
+		"MAC_MA32_127LR39            :%#x\n"
+		"MAC_MA32_127LR38            :%#x\n"
+		"MAC_MA32_127LR37            :%#x\n"
+		"MAC_MA32_127LR36            :%#x\n"
+		"MAC_MA32_127LR35            :%#x\n"
+		"MAC_MA32_127LR34            :%#x\n"
+		"MAC_MA32_127LR33            :%#x\n"
+		"MAC_MA32_127LR32            :%#x\n"
+		"MAC_MA32_127HR127            :%#x\n"
+		"MAC_MA32_127HR126            :%#x\n"
+		"MAC_MA32_127HR125            :%#x\n"
+		"MAC_MA32_127HR124            :%#x\n"
+		"MAC_MA32_127HR123            :%#x\n"
+		"MAC_MA32_127HR122            :%#x\n"
+		"MAC_MA32_127HR121            :%#x\n"
+		"MAC_MA32_127HR120            :%#x\n"
+		"MAC_MA32_127HR119            :%#x\n"
+		"MAC_MA32_127HR118            :%#x\n"
+		"MAC_MA32_127HR117            :%#x\n"
+		"MAC_MA32_127HR116            :%#x\n"
+		"MAC_MA32_127HR115            :%#x\n"
+		"MAC_MA32_127HR114            :%#x\n"
+		"MAC_MA32_127HR113            :%#x\n"
+		"MAC_MA32_127HR112            :%#x\n"
+		"MAC_MA32_127HR111            :%#x\n"
+		"MAC_MA32_127HR110            :%#x\n"
+		"MAC_MA32_127HR109            :%#x\n"
+		"MAC_MA32_127HR108            :%#x\n"
+		"MAC_MA32_127HR107            :%#x\n"
+		"MAC_MA32_127HR106            :%#x\n"
+		"MAC_MA32_127HR105            :%#x\n"
+		"MAC_MA32_127HR104            :%#x\n"
+		"MAC_MA32_127HR103            :%#x\n"
+		"MAC_MA32_127HR102            :%#x\n"
+		"MAC_MA32_127HR101            :%#x\n"
+		"MAC_MA32_127HR100            :%#x\n"
+		"MAC_MA32_127HR99            :%#x\n"
+		"MAC_MA32_127HR98            :%#x\n"
+		"MAC_MA32_127HR97            :%#x\n"
+		"MAC_MA32_127HR96            :%#x\n"
+		"MAC_MA32_127HR95            :%#x\n"
+		"MAC_MA32_127HR94            :%#x\n"
+		"MAC_MA32_127HR93            :%#x\n"
+		"MAC_MA32_127HR92            :%#x\n"
+		"MAC_MA32_127HR91            :%#x\n"
+		"MAC_MA32_127HR90            :%#x\n"
+		"MAC_MA32_127HR89            :%#x\n"
+		"MAC_MA32_127HR88            :%#x\n"
+		"MAC_MA32_127HR87            :%#x\n"
+		"MAC_MA32_127HR86            :%#x\n"
+		"MAC_MA32_127HR85            :%#x\n"
+		"MAC_MA32_127HR84            :%#x\n"
+		"MAC_MA32_127HR83            :%#x\n"
+		"MAC_MA32_127HR82            :%#x\n"
+		"MAC_MA32_127HR81            :%#x\n"
+		"MAC_MA32_127HR80            :%#x\n"
+		"MAC_MA32_127HR79            :%#x\n"
+		"MAC_MA32_127HR78            :%#x\n"
+		"MAC_MA32_127HR77            :%#x\n"
+		"MAC_MA32_127HR76            :%#x\n"
+		"MAC_MA32_127HR75            :%#x\n"
+		"MAC_MA32_127HR74            :%#x\n"
+		"MAC_MA32_127HR73            :%#x\n"
+		"MAC_MA32_127HR72            :%#x\n"
+		"MAC_MA32_127HR71            :%#x\n"
+		"MAC_MA32_127HR70            :%#x\n"
+		"MAC_MA32_127HR69            :%#x\n"
+		"MAC_MA32_127HR68            :%#x\n"
+		"MAC_MA32_127HR67            :%#x\n"
+		"MAC_MA32_127HR66            :%#x\n"
+		"MAC_MA32_127HR65            :%#x\n"
+		"MAC_MA32_127HR64            :%#x\n"
+		"MAC_MA32_127HR63            :%#x\n"
+		"MAC_MA32_127HR62            :%#x\n"
+		"MAC_MA32_127HR61            :%#x\n"
+		"MAC_MA32_127HR60            :%#x\n"
+		"MAC_MA32_127HR59            :%#x\n"
+		"MAC_MA32_127HR58            :%#x\n"
+		"MAC_MA32_127HR57            :%#x\n"
+		"MAC_MA32_127HR56            :%#x\n"
+		"MAC_MA32_127HR55            :%#x\n"
+		"MAC_MA32_127HR54            :%#x\n"
+		"MAC_MA32_127HR53            :%#x\n"
+		"MAC_MA32_127HR52            :%#x\n"
+		"MAC_MA32_127HR51            :%#x\n"
+		"MAC_MA32_127HR50            :%#x\n"
+		"MAC_MA32_127HR49            :%#x\n"
+		"MAC_MA32_127HR48            :%#x\n"
+		"MAC_MA32_127HR47            :%#x\n"
+		"MAC_MA32_127HR46            :%#x\n"
+		"MAC_MA32_127HR45            :%#x\n"
+		"MAC_MA32_127HR44            :%#x\n"
+		"MAC_MA32_127HR43            :%#x\n"
+		"MAC_MA32_127HR42            :%#x\n"
+		"MAC_MA32_127HR41            :%#x\n"
+		"MAC_MA32_127HR40            :%#x\n"
+		"MAC_MA32_127HR39            :%#x\n"
+		"MAC_MA32_127HR38            :%#x\n"
+		"MAC_MA32_127HR37            :%#x\n"
+		"MAC_MA32_127HR36            :%#x\n"
+		"MAC_MA32_127HR35            :%#x\n"
+		"MAC_MA32_127HR34            :%#x\n"
+		"MAC_MA32_127HR33            :%#x\n"
+		"MAC_MA32_127HR32            :%#x\n"
+		"MAC_MA1_31LR31              :%#x\n"
+		"MAC_MA1_31LR30              :%#x\n"
+		"MAC_MA1_31LR29              :%#x\n"
+		"MAC_MA1_31LR28              :%#x\n"
+		"MAC_MA1_31LR27              :%#x\n"
+		"MAC_MA1_31LR26              :%#x\n"
+		"MAC_MA1_31LR25              :%#x\n"
+		"MAC_MA1_31LR24              :%#x\n"
+		"MAC_MA1_31LR23              :%#x\n"
+		"MAC_MA1_31LR22              :%#x\n"
+		"MAC_MA1_31LR21              :%#x\n"
+		"MAC_MA1_31LR20              :%#x\n"
+		"MAC_MA1_31LR19              :%#x\n"
+		"MAC_MA1_31LR18              :%#x\n"
+		"MAC_MA1_31LR17              :%#x\n"
+		"MAC_MA1_31LR16              :%#x\n"
+		"MAC_MA1_31LR15              :%#x\n"
+		"MAC_MA1_31LR14              :%#x\n"
+		"MAC_MA1_31LR13              :%#x\n"
+		"MAC_MA1_31LR12              :%#x\n"
+		"MAC_MA1_31LR11              :%#x\n"
+		"MAC_MA1_31LR10              :%#x\n"
+		"MAC_MA1_31LR9              :%#x\n"
+		"MAC_MA1_31LR8              :%#x\n"
+		"MAC_MA1_31LR7              :%#x\n"
+		"MAC_MA1_31LR6              :%#x\n"
+		"MAC_MA1_31LR5              :%#x\n"
+		"MAC_MA1_31LR4              :%#x\n"
+		"MAC_MA1_31LR3              :%#x\n"
+		"MAC_MA1_31LR2              :%#x\n"
+		"MAC_MA1_31LR1              :%#x\n"
+		"MAC_MA1_31HR31              :%#x\n"
+		"MAC_MA1_31HR30              :%#x\n"
+		"MAC_MA1_31HR29              :%#x\n"
+		"MAC_MA1_31HR28              :%#x\n"
+		"MAC_MA1_31HR27              :%#x\n"
+		"MAC_MA1_31HR26              :%#x\n"
+		"MAC_MA1_31HR25              :%#x\n"
+		"MAC_MA1_31HR24              :%#x\n"
+		"MAC_MA1_31HR23              :%#x\n"
+		"MAC_MA1_31HR22              :%#x\n"
+		"MAC_MA1_31HR21              :%#x\n"
+		"MAC_MA1_31HR20              :%#x\n"
+		"MAC_MA1_31HR19              :%#x\n"
+		"MAC_MA1_31HR18              :%#x\n"
+		"MAC_MA1_31HR17              :%#x\n"
+		"MAC_MA1_31HR16              :%#x\n"
+		"MAC_MA1_31HR15              :%#x\n"
+		"MAC_MA1_31HR14              :%#x\n"
+		"MAC_MA1_31HR13              :%#x\n"
+		"MAC_MA1_31HR12              :%#x\n"
+		"MAC_MA1_31HR11              :%#x\n"
+		"MAC_MA1_31HR10              :%#x\n"
+		"MAC_MA1_31HR9              :%#x\n"
+		"MAC_MA1_31HR8              :%#x\n"
+		"MAC_MA1_31HR7              :%#x\n"
+		"MAC_MA1_31HR6              :%#x\n"
+		"MAC_MA1_31HR5              :%#x\n"
+		"MAC_MA1_31HR4              :%#x\n"
+		"MAC_MA1_31HR3              :%#x\n"
+		"MAC_MA1_31HR2              :%#x\n"
+		"MAC_MA1_31HR1              :%#x\n"
+		"MAC_ARPA                   :%#x\n"
+		"MAC_L3A3R7                 :%#x\n"
+		"MAC_L3A3R6                 :%#x\n"
+		"MAC_L3A3R5                 :%#x\n"
+		"MAC_L3A3R4                 :%#x\n"
+		"MAC_L3A3R3                 :%#x\n"
+		"MAC_L3A3R2                 :%#x\n"
+		"MAC_L3A3R1                 :%#x\n"
+		"MAC_L3A3R0                 :%#x\n"
+		"MAC_L3A2R7                 :%#x\n"
+		"MAC_L3A2R6                 :%#x\n"
+		"MAC_L3A2R5                 :%#x\n"
+		"MAC_L3A2R4                 :%#x\n"
+		"MAC_L3A2R3                 :%#x\n"
+		"MAC_L3A2R2                 :%#x\n"
+		"MAC_L3A2R1                 :%#x\n"
+		"MAC_L3A2R0                 :%#x\n"
+		"MAC_L3A1R7                 :%#x\n"
+		"MAC_L3A1R6                 :%#x\n"
+		"MAC_L3A1R5                 :%#x\n"
+		"MAC_L3A1R4                 :%#x\n"
+		"MAC_L3A1R3                 :%#x\n"
+		"MAC_L3A1R2                 :%#x\n"
+		"MAC_L3A1R1                 :%#x\n"
+		"MAC_L3A1R0                 :%#x\n"
+		"MAC_L3A0R7                 :%#x\n"
+		"MAC_L3A0R6                 :%#x\n"
+		"MAC_L3A0R5                 :%#x\n"
+		"MAC_L3A0R4                 :%#x\n"
+		"MAC_L3A0R3                 :%#x\n"
+		"MAC_L3A0R2                 :%#x\n"
+		"MAC_L3A0R1                 :%#x\n"
+		"MAC_L3A0R0                 :%#x\n"
+		"MAC_L4AR7                 :%#x\n"
+		"MAC_L4AR6                 :%#x\n"
+		"MAC_L4AR5                 :%#x\n"
+		"MAC_L4AR4                 :%#x\n"
+		"MAC_L4AR3                 :%#x\n"
+		"MAC_L4AR2                 :%#x\n"
+		"MAC_L4AR1                 :%#x\n"
+		"MAC_L4AR0                 :%#x\n"
+		"MAC_L3L4CR7                :%#x\n"
+		"MAC_L3L4CR6                :%#x\n"
+		"MAC_L3L4CR5                :%#x\n"
+		"MAC_L3L4CR4                :%#x\n"
+		"MAC_L3L4CR3                :%#x\n"
+		"MAC_L3L4CR2                :%#x\n"
+		"MAC_L3L4CR1                :%#x\n"
+		"MAC_L3L4CR0                :%#x\n"
+		"MAC_GPIOS                  :%#x\n"
+		"MAC_PCS                    :%#x\n"
+		"MAC_TES                    :%#x\n"
+		"MAC_AE                     :%#x\n"
+		"MAC_ALPA                   :%#x\n"
+		"MAC_AAD                    :%#x\n"
+		"MAC_ANS                    :%#x\n"
+		"MAC_ANC                    :%#x\n"
+		"MAC_LPC                    :%#x\n"
+		"MAC_LPS                    :%#x\n"
+		"MAC_PPS_WIDTH3             :%#x\n"
+		"MAC_PPS_WIDTH2             :%#x\n"
+		"MAC_PPS_WIDTH1             :%#x\n"
+		"MAC_PPS_WIDTH0             :%#x\n"
+		"MAC_PPS_INTVAL3            :%#x\n"
+		"MAC_PPS_INTVAL2            :%#x\n"
+		"MAC_PPS_INTVAL1            :%#x\n"
+		"MAC_PPS_INTVAL0            :%#x\n"
+		"MAC_PPS_TTNS3              :%#x\n"
+		"MAC_PPS_TTNS2              :%#x\n"
+		"MAC_PPS_TTNS1              :%#x\n"
+		"MAC_PPS_TTNS0              :%#x\n"
+		"MAC_PPS_TTS3               :%#x\n"
+		"MAC_PPS_TTS2               :%#x\n"
+		"MAC_PPS_TTS1               :%#x\n"
+		"MAC_PPS_TTS0               :%#x\n"
+		"MAC_PPSC                   :%#x\n"
+		"MAC_TEAC                   :%#x\n"
+		"MAC_TIAC                   :%#x\n"
+		"MAC_ATS                    :%#x\n"
+		"MAC_ATN                    :%#x\n"
+		"MAC_AC                     :%#x\n"
+		"MAC_TTN                    :%#x\n"
+		"MAC_TTSN                   :%#x\n"
+		"MAC_TSR                    :%#x\n"
+		"MAC_STHWR                  :%#x\n"
+		"MAC_TAR                    :%#x\n"
+		"MAC_STNSUR                 :%#x\n"
+		"MAC_STSUR                  :%#x\n"
+		"MAC_STNSR                  :%#x\n"
+		"MAC_STSR                   :%#x\n"
+		"MAC_SSIR                   :%#x\n"
+		"MAC_TCR                    :%#x\n"
+		"MTL_DSR                    :%#x\n"
+		"MAC_RWPFFR                 :%#x\n"
+		"MAC_RTSR                   :%#x\n"
+		"MTL_IER                    :%#x\n"
+		"MTL_QRCR7                  :%#x\n"
+		"MTL_QRCR6                  :%#x\n"
+		"MTL_QRCR5                  :%#x\n"
+		"MTL_QRCR4                  :%#x\n"
+		"MTL_QRCR3                  :%#x\n"
+		"MTL_QRCR2                  :%#x\n"
+		"MTL_QRCR1                  :%#x\n"
+		"MTL_QRDR7                  :%#x\n"
+		"MTL_QRDR6                  :%#x\n"
+		"MTL_QRDR5                  :%#x\n"
+		"MTL_QRDR4                  :%#x\n"
+		"MTL_QRDR3                  :%#x\n"
+		"MTL_QRDR2                  :%#x\n"
+		"MTL_QRDR1                  :%#x\n"
+		"MTL_QOCR7                  :%#x\n"
+		"MTL_QOCR6                  :%#x\n"
+		"MTL_QOCR5                  :%#x\n"
+		"MTL_QOCR4                  :%#x\n"
+		"MTL_QOCR3                  :%#x\n"
+		"MTL_QOCR2                  :%#x\n"
+		"MTL_QOCR1                  :%#x\n"
+		"MTL_QROMR7                 :%#x\n"
+		"MTL_QROMR6                 :%#x\n"
+		"MTL_QROMR5                 :%#x\n"
+		"MTL_QROMR4                 :%#x\n"
+		"MTL_QROMR3                 :%#x\n"
+		"MTL_QROMR2                 :%#x\n"
+		"MTL_QROMR1                 :%#x\n"
+		"MTL_QLCR7                  :%#x\n"
+		"MTL_QLCR6                  :%#x\n"
+		"MTL_QLCR5                  :%#x\n"
+		"MTL_QLCR4                  :%#x\n"
+		"MTL_QLCR3                  :%#x\n"
+		"MTL_QLCR2                  :%#x\n"
+		"MTL_QLCR1                  :%#x\n"
+		"MTL_QHCR7                  :%#x\n"
+		"MTL_QHCR6                  :%#x\n"
+		"MTL_QHCR5                  :%#x\n"
+		"MTL_QHCR4                  :%#x\n"
+		"MTL_QHCR3                  :%#x\n"
+		"MTL_QHCR2                  :%#x\n"
+		"MTL_QHCR1                  :%#x\n"
+		"MTL_QSSCR7                 :%#x\n"
+		"MTL_QSSCR6                 :%#x\n"
+		"MTL_QSSCR5                 :%#x\n"
+		"MTL_QSSCR4                 :%#x\n"
+		"MTL_QSSCR3                 :%#x\n"
+		"MTL_QSSCR2                 :%#x\n"
+		"MTL_QSSCR1                 :%#x\n"
+		"MTL_QW7                    :%#x\n"
+		"MTL_QW6                    :%#x\n"
+		"MTL_QW5                    :%#x\n"
+		"MTL_QW4                    :%#x\n"
+		"MTL_QW3                    :%#x\n"
+		"MTL_QW2                    :%#x\n"
+		"MTL_QW1                    :%#x\n"
+		"MTL_QESR7                  :%#x\n"
+		"MTL_QESR6                  :%#x\n"
+		"MTL_QESR5                  :%#x\n"
+		"MTL_QESR4                  :%#x\n"
+		"MTL_QESR3                  :%#x\n"
+		"MTL_QESR2                  :%#x\n"
+		"MTL_QESR1                  :%#x\n"
+		"MTL_QECR7                  :%#x\n"
+		"MTL_QECR6                  :%#x\n"
+		"MTL_QECR5                  :%#x\n"
+		"MTL_QECR4                  :%#x\n"
+		"MTL_QECR3                  :%#x\n"
+		"MTL_QECR2                  :%#x\n"
+		"MTL_QECR1                  :%#x\n"
+		"MTL_QTDR7                  :%#x\n"
+		"MTL_QTDR6                  :%#x\n"
+		"MTL_QTDR5                  :%#x\n"
+		"MTL_QTDR4                  :%#x\n"
+		"MTL_QTDR3                  :%#x\n"
+		"MTL_QTDR2                  :%#x\n"
+		"MTL_QTDR1                  :%#x\n"
+		"MTL_QUCR7                  :%#x\n"
+		"MTL_QUCR6                  :%#x\n"
+		"MTL_QUCR5                  :%#x\n"
+		"MTL_QUCR4                  :%#x\n"
+		"MTL_QUCR3                  :%#x\n"
+		"MTL_QUCR2                  :%#x\n"
+		"MTL_QUCR1                  :%#x\n"
+		"MTL_QTOMR7                 :%#x\n"
+		"MTL_QTOMR6                 :%#x\n"
+		"MTL_QTOMR5                 :%#x\n"
+		"MTL_QTOMR4                 :%#x\n"
+		"MTL_QTOMR3                 :%#x\n"
+		"MTL_QTOMR2                 :%#x\n"
+		"MTL_QTOMR1                 :%#x\n"
+		"MAC_PMTCSR                 :%#x\n"
+		"MMC_RXICMP_ERR_OCTETS      :%#x\n"
+		"MMC_RXICMP_GD_OCTETS       :%#x\n"
+		"MMC_RXTCP_ERR_OCTETS       :%#x\n"
+		"MMC_RXTCP_GD_OCTETS        :%#x\n"
+		"MMC_RXUDP_ERR_OCTETS       :%#x\n"
+		"MMC_RXUDP_GD_OCTETS        :%#x\n"
+		"MMC_RXIPV6_NOPAY_OCTETS    :%#x\n"
+		"MMC_RXIPV6_HDRERR_OCTETS   :%#x\n"
+		"MMC_RXIPV6_GD_OCTETS       :%#x\n"
+		"MMC_RXIPV4_UDSBL_OCTETS    :%#x\n"
+		"MMC_RXIPV4_FRAG_OCTETS     :%#x\n"
+		"MMC_RXIPV4_NOPAY_OCTETS    :%#x\n"
+		"MMC_RXIPV4_HDRERR_OCTETS   :%#x\n"
+		"MMC_RXIPV4_GD_OCTETS       :%#x\n"
+		"MMC_RXICMP_ERR_PKTS        :%#x\n"
+		"MMC_RXICMP_GD_PKTS         :%#x\n"
+		"MMC_RXTCP_ERR_PKTS         :%#x\n"
+		"MMC_RXTCP_GD_PKTS          :%#x\n"
+		"MMC_RXUDP_ERR_PKTS         :%#x\n"
+		"MMC_RXUDP_GD_PKTS          :%#x\n"
+		"MMC_RXIPV6_NOPAY_PKTS      :%#x\n"
+		"MMC_RXIPV6_HDRERR_PKTS     :%#x\n"
+		"MMC_RXIPV6_GD_PKTS         :%#x\n"
+		"MMC_RXIPV4_UBSBL_PKTS      :%#x\n"
+		"MMC_RXIPV4_FRAG_PKTS       :%#x\n"
+		"MMC_RXIPV4_NOPAY_PKTS      :%#x\n"
+		"MMC_RXIPV4_HDRERR_PKTS     :%#x\n"
+		"MMC_RXIPV4_GD_PKTS         :%#x\n"
+		"MMC_RXCTRLPACKETS_G        :%#x\n"
+		"MMC_RXRCVERROR             :%#x\n"
+		"MMC_RXWATCHDOGERROR        :%#x\n"
+		"MMC_RXVLANPACKETS_GB       :%#x\n"
+		"MMC_RXFIFOOVERFLOW         :%#x\n"
+		"MMC_RXPAUSEPACKETS         :%#x\n"
+		"MMC_RXOUTOFRANGETYPE       :%#x\n"
+		"MMC_RXLENGTHERROR          :%#x\n"
+		"MMC_RXUNICASTPACKETS_G     :%#x\n"
+		"MMC_RX1024TOMAXOCTETS_GB   :%#x\n"
+		"MMC_RX512TO1023OCTETS_GB   :%#x\n"
+		"MMC_RX256TO511OCTETS_GB    :%#x\n"
+		"MMC_RX128TO255OCTETS_GB    :%#x\n"
+		"MMC_RX65TO127OCTETS_GB     :%#x\n"
+		"MMC_RX64OCTETS_GB          :%#x\n"
+		"MMC_RXOVERSIZE_G           :%#x\n"
+		"MMC_RXUNDERSIZE_G          :%#x\n"
+		"MMC_RXJABBERERROR          :%#x\n"
+		"MMC_RXRUNTERROR            :%#x\n"
+		"MMC_RXALIGNMENTERROR       :%#x\n"
+		"MMC_RXCRCERROR             :%#x\n"
+		"MMC_RXMULTICASTPACKETS_G   :%#x\n"
+		"MMC_RXBROADCASTPACKETS_G   :%#x\n"
+		"MMC_RXOCTETCOUNT_G         :%#x\n"
+		"MMC_RXOCTETCOUNT_GB        :%#x\n"
+		"MMC_RXPACKETCOUNT_GB       :%#x\n"
+		"MMC_TXOVERSIZE_G           :%#x\n"
+		"MMC_TXVLANPACKETS_G        :%#x\n"
+		"MMC_TXPAUSEPACKETS         :%#x\n"
+		"MMC_TXEXCESSDEF            :%#x\n"
+		"MMC_TXPACKETSCOUNT_G       :%#x\n"
+		"MMC_TXOCTETCOUNT_G         :%#x\n"
+		"MMC_TXCARRIERERROR         :%#x\n"
+		"MMC_TXEXESSCOL             :%#x\n"
+		"MMC_TXLATECOL              :%#x\n"
+		"MMC_TXDEFERRED             :%#x\n"
+		"MMC_TXMULTICOL_G           :%#x\n"
+		"MMC_TXSINGLECOL_G          :%#x\n"
+		"MMC_TXUNDERFLOWERROR       :%#x\n"
+		"MMC_TXBROADCASTPACKETS_GB  :%#x\n"
+		"MMC_TXMULTICASTPACKETS_GB  :%#x\n"
+		"MMC_TXUNICASTPACKETS_GB    :%#x\n"
+		"MMC_TX1024TOMAXOCTETS_GB   :%#x\n"
+		"MMC_TX512TO1023OCTETS_GB   :%#x\n"
+		"MMC_TX256TO511OCTETS_GB    :%#x\n"
+		"MMC_TX128TO255OCTETS_GB    :%#x\n"
+		"MMC_TX65TO127OCTETS_GB     :%#x\n"
+		"MMC_TX64OCTETS_GB          :%#x\n"
+		"MMC_TXMULTICASTPACKETS_G   :%#x\n"
+		"MMC_TXBROADCASTPACKETS_G   :%#x\n"
+		"MMC_TXPACKETCOUNT_GB       :%#x\n"
+		"MMC_TXOCTETCOUNT_GB        :%#x\n"
+		"MMC_IPC_INTR_RX            :%#x\n"
+		"MMC_IPC_INTR_MASK_RX       :%#x\n"
+		"MMC_INTR_MASK_TX           :%#x\n"
+		"MMC_INTR_MASK_RX           :%#x\n"
+		"MMC_INTR_TX                :%#x\n"
+		"MMC_INTR_RX                :%#x\n"
+		"MMC_CNTRL                  :%#x\n"
+		"MAC_MA1LR                  :%#x\n"
+		"MAC_MA1HR                  :%#x\n"
+		"MAC_MA0LR                  :%#x\n"
+		"MAC_MA0HR                  :%#x\n"
+		"MAC_GPIOR                  :%#x\n"
+		"MAC_GMIIDR                 :%#x\n"
+		"MAC_GMIIAR                 :%#x\n"
+		"MAC_HFR2                   :%#x\n"
+		"MAC_HFR1                   :%#x\n"
+		"MAC_HFR0                   :%#x\n"
+		"MAC_MDR                    :%#x\n"
+		"MAC_VR                     :%#x\n"
+		"MAC_HTR7                   :%#x\n"
+		"MAC_HTR6                   :%#x\n"
+		"MAC_HTR5                   :%#x\n"
+		"MAC_HTR4                   :%#x\n"
+		"MAC_HTR3                   :%#x\n"
+		"MAC_HTR2                   :%#x\n"
+		"MAC_HTR1                   :%#x\n"
+		"MAC_HTR0                   :%#x\n"
+		"DMA_RIWTR7                 :%#x\n"
+		"DMA_RIWTR6                 :%#x\n"
+		"DMA_RIWTR5                 :%#x\n"
+		"DMA_RIWTR4                 :%#x\n"
+		"DMA_RIWTR3                 :%#x\n"
+		"DMA_RIWTR2                 :%#x\n"
+		"DMA_RIWTR1                 :%#x\n"
+		"DMA_RIWTR0                 :%#x\n"
+		"DMA_RDRLR7                 :%#x\n"
+		"DMA_RDRLR6                 :%#x\n"
+		"DMA_RDRLR5                 :%#x\n"
+		"DMA_RDRLR4                 :%#x\n"
+		"DMA_RDRLR3                 :%#x\n"
+		"DMA_RDRLR2                 :%#x\n"
+		"DMA_RDRLR1                 :%#x\n"
+		"DMA_RDRLR0                 :%#x\n"
+		"DMA_TDRLR7                 :%#x\n"
+		"DMA_TDRLR6                 :%#x\n"
+		"DMA_TDRLR5                 :%#x\n"
+		"DMA_TDRLR4                 :%#x\n"
+		"DMA_TDRLR3                 :%#x\n"
+		"DMA_TDRLR2                 :%#x\n"
+		"DMA_TDRLR1                 :%#x\n"
+		"DMA_TDRLR0                 :%#x\n"
+		"DMA_RDTP_RPDR7             :%#x\n"
+		"DMA_RDTP_RPDR6             :%#x\n"
+		"DMA_RDTP_RPDR5             :%#x\n"
+		"DMA_RDTP_RPDR4             :%#x\n"
+		"DMA_RDTP_RPDR3             :%#x\n"
+		"DMA_RDTP_RPDR2             :%#x\n"
+		"DMA_RDTP_RPDR1             :%#x\n"
+		"DMA_RDTP_RPDR0             :%#x\n"
+		"DMA_TDTP_TPDR7             :%#x\n"
+		"DMA_TDTP_TPDR6             :%#x\n"
+		"DMA_TDTP_TPDR5             :%#x\n"
+		"DMA_TDTP_TPDR4             :%#x\n"
+		"DMA_TDTP_TPDR3             :%#x\n"
+		"DMA_TDTP_TPDR2             :%#x\n"
+		"DMA_TDTP_TPDR1             :%#x\n"
+		"DMA_TDTP_TPDR0             :%#x\n"
+		"DMA_RDLAR7                 :%#x\n"
+		"DMA_RDLAR6                 :%#x\n"
+		"DMA_RDLAR5                 :%#x\n"
+		"DMA_RDLAR4                 :%#x\n"
+		"DMA_RDLAR3                 :%#x\n"
+		"DMA_RDLAR2                 :%#x\n"
+		"DMA_RDLAR1                 :%#x\n"
+		"DMA_RDLAR0                 :%#x\n"
+		"DMA_TDLAR7                 :%#x\n"
+		"DMA_TDLAR6                 :%#x\n"
+		"DMA_TDLAR5                 :%#x\n"
+		"DMA_TDLAR4                 :%#x\n"
+		"DMA_TDLAR3                 :%#x\n"
+		"DMA_TDLAR2                 :%#x\n"
+		"DMA_TDLAR1                 :%#x\n"
+		"DMA_TDLAR0                 :%#x\n"
+		"DMA_IER7                   :%#x\n"
+		"DMA_IER6                   :%#x\n"
+		"DMA_IER5                   :%#x\n"
+		"DMA_IER4                   :%#x\n"
+		"DMA_IER3                   :%#x\n"
+		"DMA_IER2                   :%#x\n"
+		"DMA_IER1                   :%#x\n"
+		"DMA_IER0                   :%#x\n"
+		"MAC_IMR                    :%#x\n"
+		"MAC_ISR                    :%#x\n"
+		"MTL_ISR                    :%#x\n"
+		"DMA_SR7                    :%#x\n"
+		"DMA_SR6                    :%#x\n"
+		"DMA_SR5                    :%#x\n"
+		"DMA_SR4                    :%#x\n"
+		"DMA_SR3                    :%#x\n"
+		"DMA_SR2                    :%#x\n"
+		"DMA_SR1                    :%#x\n"
+		"DMA_SR0                    :%#x\n"
+		"DMA_ISR                    :%#x\n"
+		"DMA_DSR2                   :%#x\n"
+		"DMA_DSR1                   :%#x\n"
+		"DMA_DSR0                   :%#x\n"
+		"MTL_Q0RDR                  :%#x\n"
+		"MTL_Q0ESR                  :%#x\n"
+		"MTL_Q0TDR                  :%#x\n"
+		"DMA_CHRBAR7                :%#x\n"
+		"DMA_CHRBAR6                :%#x\n"
+		"DMA_CHRBAR5                :%#x\n"
+		"DMA_CHRBAR4                :%#x\n"
+		"DMA_CHRBAR3                :%#x\n"
+		"DMA_CHRBAR2                :%#x\n"
+		"DMA_CHRBAR1                :%#x\n"
+		"DMA_CHRBAR0                :%#x\n"
+		"DMA_CHTBAR7                :%#x\n"
+		"DMA_CHTBAR6                :%#x\n"
+		"DMA_CHTBAR5                :%#x\n"
+		"DMA_CHTBAR4                :%#x\n"
+		"DMA_CHTBAR3                :%#x\n"
+		"DMA_CHTBAR2                :%#x\n"
+		"DMA_CHTBAR1                :%#x\n"
+		"DMA_CHTBAR0                :%#x\n"
+		"DMA_CHRDR7                 :%#x\n"
+		"DMA_CHRDR6                 :%#x\n"
+		"DMA_CHRDR5                 :%#x\n"
+		"DMA_CHRDR4                 :%#x\n"
+		"DMA_CHRDR3                 :%#x\n"
+		"DMA_CHRDR2                 :%#x\n"
+		"DMA_CHRDR1                 :%#x\n"
+		"DMA_CHRDR0                 :%#x\n"
+		"DMA_CHTDR7                 :%#x\n"
+		"DMA_CHTDR6                 :%#x\n"
+		"DMA_CHTDR5                 :%#x\n"
+		"DMA_CHTDR4                 :%#x\n"
+		"DMA_CHTDR3                 :%#x\n"
+		"DMA_CHTDR2                 :%#x\n"
+		"DMA_CHTDR1                 :%#x\n"
+		"DMA_CHTDR0                 :%#x\n"
+		"DMA_SFCSR7                 :%#x\n"
+		"DMA_SFCSR6                 :%#x\n"
+		"DMA_SFCSR5                 :%#x\n"
+		"DMA_SFCSR4                 :%#x\n"
+		"DMA_SFCSR3                 :%#x\n"
+		"DMA_SFCSR2                 :%#x\n"
+		"DMA_SFCSR1                 :%#x\n"
+		"DMA_SFCSR0                 :%#x\n"
+		"MAC_IVLANTIRR              :%#x\n"
+		"MAC_VLANTIRR               :%#x\n"
+		"MAC_VLANHTR                :%#x\n"
+		"MAC_VLANTR                 :%#x\n"
+		"DMA_SBUS                   :%#x\n"
+		"DMA_BMR                    :%#x\n"
+		"MTL_Q0RCR                  :%#x\n"
+		"MTL_Q0OCR                  :%#x\n"
+		"MTL_Q0ROMR                 :%#x\n"
+		"MTL_Q0QR                   :%#x\n"
+		"MTL_Q0ECR                  :%#x\n"
+		"MTL_Q0UCR                  :%#x\n"
+		"MTL_Q0TOMR                 :%#x\n"
+		"MTL_RQDCM1R                :%#x\n"
+		"MTL_RQDCM0R                :%#x\n"
+		"MTL_FDDR                   :%#x\n"
+		"MTL_FDACS                  :%#x\n"
+		"MTL_OMR                    :%#x\n"
+		"MAC_RQC3R                  :%#x\n"
+		"MAC_RQC2R                  :%#x\n"
+		"MAC_RQC1R                  :%#x\n"
+		"MAC_RQC0R                  :%#x\n"
+		"MAC_TQPM1R                 :%#x\n"
+		"MAC_TQPM0R                 :%#x\n"
+		"MAC_RFCR                   :%#x\n"
+		"MAC_QTFCR7                 :%#x\n"
+		"MAC_QTFCR6                 :%#x\n"
+		"MAC_QTFCR5                 :%#x\n"
+		"MAC_QTFCR4                 :%#x\n"
+		"MAC_QTFCR3                 :%#x\n"
+		"MAC_QTFCR2                 :%#x\n"
+		"MAC_QTFCR1                 :%#x\n"
+		"MAC_Q0TFCR                 :%#x\n"
+		"DMA_AXI4CR7                :%#x\n"
+		"DMA_AXI4CR6                :%#x\n"
+		"DMA_AXI4CR5                :%#x\n"
+		"DMA_AXI4CR4                :%#x\n"
+		"DMA_AXI4CR3                :%#x\n"
+		"DMA_AXI4CR2                :%#x\n"
+		"DMA_AXI4CR1                :%#x\n"
+		"DMA_AXI4CR0                :%#x\n"
+		"DMA_RCR7                   :%#x\n"
+		"DMA_RCR6                   :%#x\n"
+		"DMA_RCR5                   :%#x\n"
+		"DMA_RCR4                   :%#x\n"
+		"DMA_RCR3                   :%#x\n"
+		"DMA_RCR2                   :%#x\n"
+		"DMA_RCR1                   :%#x\n"
+		"DMA_RCR0                   :%#x\n"
+		"DMA_TCR7                   :%#x\n"
+		"DMA_TCR6                   :%#x\n"
+		"DMA_TCR5                   :%#x\n"
+		"DMA_TCR4                   :%#x\n"
+		"DMA_TCR3                   :%#x\n"
+		"DMA_TCR2                   :%#x\n"
+		"DMA_TCR1                   :%#x\n"
+		"DMA_TCR0                   :%#x\n"
+		"DMA_CR7                    :%#x\n"
+		"DMA_CR6                    :%#x\n"
+		"DMA_CR5                    :%#x\n"
+		"DMA_CR4                    :%#x\n"
+		"DMA_CR3                    :%#x\n"
+		"DMA_CR2                    :%#x\n"
+		"DMA_CR1                    :%#x\n"
+		"DMA_CR0                    :%#x\n"
+		"MAC_WTR                    :%#x\n"
+		"MAC_MPFR                   :%#x\n"
+		"MAC_MECR                   :%#x\n"
+		"MAC_MCR                    :%#x\n"
+		"\nMII/GMII Registers\n\n"
+		"Phy Control Reg(Basic Mode Control Reg)   : %#x\n"
+		"Phy Status Reg(Basic Mode Status Reg)     : %#x\n"
+		"Phy Id (PHYS ID 1)                        : %#x\n"
+		"Phy Id (PHYS ID 2)                        : %#x\n"
+		"Auto-nego Adv (Advertisement Control Reg) : %#x\n"
+		"Auto-nego Lap (Link Partner Ability Reg)  : %#x\n"
+		"Auto-nego Exp (Extension Reg)             : %#x\n"
+		"Auto-nego Np                              : %#x\n"
+		"Extended Status Reg                       : %#x\n"
+		"1000 Ctl Reg (1000BASE-T Control Reg)     : %#x\n"
+		"1000 Sts Reg (1000BASE-T Status)          : %#x\n"
+		"PHY Ctl Reg                               : %#x\n"
+		"PHY Sts Reg                               : %#x\n"
+		"\n IP Features/Properties\n\n"
+		"feature_drop_tx_pktburstcnt		   : %#x\n",
+		MAC_MA32_127LR127_val,
+		MAC_MA32_127LR126_val,
+		MAC_MA32_127LR125_val,
+		MAC_MA32_127LR124_val,
+		MAC_MA32_127LR123_val,
+		MAC_MA32_127LR122_val,
+		MAC_MA32_127LR121_val,
+		MAC_MA32_127LR120_val,
+		MAC_MA32_127LR119_val,
+		MAC_MA32_127LR118_val,
+		MAC_MA32_127LR117_val,
+		MAC_MA32_127LR116_val,
+		MAC_MA32_127LR115_val,
+		MAC_MA32_127LR114_val,
+		MAC_MA32_127LR113_val,
+		MAC_MA32_127LR112_val,
+		MAC_MA32_127LR111_val,
+		MAC_MA32_127LR110_val,
+		MAC_MA32_127LR109_val,
+		MAC_MA32_127LR108_val,
+		MAC_MA32_127LR107_val,
+		MAC_MA32_127LR106_val,
+		MAC_MA32_127LR105_val,
+		MAC_MA32_127LR104_val,
+		MAC_MA32_127LR103_val,
+		MAC_MA32_127LR102_val,
+		MAC_MA32_127LR101_val,
+		MAC_MA32_127LR100_val,
+		MAC_MA32_127LR99_val,
+		MAC_MA32_127LR98_val,
+		MAC_MA32_127LR97_val,
+		MAC_MA32_127LR96_val,
+		MAC_MA32_127LR95_val,
+		MAC_MA32_127LR94_val,
+		MAC_MA32_127LR93_val,
+		MAC_MA32_127LR92_val,
+		MAC_MA32_127LR91_val,
+		MAC_MA32_127LR90_val,
+		MAC_MA32_127LR89_val,
+		MAC_MA32_127LR88_val,
+		MAC_MA32_127LR87_val,
+		MAC_MA32_127LR86_val,
+		MAC_MA32_127LR85_val,
+		MAC_MA32_127LR84_val,
+		MAC_MA32_127LR83_val,
+		MAC_MA32_127LR82_val,
+		MAC_MA32_127LR81_val,
+		MAC_MA32_127LR80_val,
+		MAC_MA32_127LR79_val,
+		MAC_MA32_127LR78_val,
+		MAC_MA32_127LR77_val,
+		MAC_MA32_127LR76_val,
+		MAC_MA32_127LR75_val,
+		MAC_MA32_127LR74_val,
+		MAC_MA32_127LR73_val,
+		MAC_MA32_127LR72_val,
+		MAC_MA32_127LR71_val,
+		MAC_MA32_127LR70_val,
+		MAC_MA32_127LR69_val,
+		MAC_MA32_127LR68_val,
+		MAC_MA32_127LR67_val,
+		MAC_MA32_127LR66_val,
+		MAC_MA32_127LR65_val,
+		MAC_MA32_127LR64_val,
+		MAC_MA32_127LR63_val,
+		MAC_MA32_127LR62_val,
+		MAC_MA32_127LR61_val,
+		MAC_MA32_127LR60_val,
+		MAC_MA32_127LR59_val,
+		MAC_MA32_127LR58_val,
+		MAC_MA32_127LR57_val,
+		MAC_MA32_127LR56_val,
+		MAC_MA32_127LR55_val,
+		MAC_MA32_127LR54_val,
+		MAC_MA32_127LR53_val,
+		MAC_MA32_127LR52_val,
+		MAC_MA32_127LR51_val,
+		MAC_MA32_127LR50_val,
+		MAC_MA32_127LR49_val,
+		MAC_MA32_127LR48_val,
+		MAC_MA32_127LR47_val,
+		MAC_MA32_127LR46_val,
+		MAC_MA32_127LR45_val,
+		MAC_MA32_127LR44_val,
+		MAC_MA32_127LR43_val,
+		MAC_MA32_127LR42_val,
+		MAC_MA32_127LR41_val,
+		MAC_MA32_127LR40_val,
+		MAC_MA32_127LR39_val,
+		MAC_MA32_127LR38_val,
+		MAC_MA32_127LR37_val,
+		MAC_MA32_127LR36_val,
+		MAC_MA32_127LR35_val,
+		MAC_MA32_127LR34_val,
+		MAC_MA32_127LR33_val,
+		MAC_MA32_127LR32_val,
+		MAC_MA32_127HR127_val,
+		MAC_MA32_127HR126_val,
+		MAC_MA32_127HR125_val,
+		MAC_MA32_127HR124_val,
+		MAC_MA32_127HR123_val,
+		MAC_MA32_127HR122_val,
+		MAC_MA32_127HR121_val,
+		MAC_MA32_127HR120_val,
+		MAC_MA32_127HR119_val,
+		MAC_MA32_127HR118_val,
+		MAC_MA32_127HR117_val,
+		MAC_MA32_127HR116_val,
+		MAC_MA32_127HR115_val,
+		MAC_MA32_127HR114_val,
+		MAC_MA32_127HR113_val,
+		MAC_MA32_127HR112_val,
+		MAC_MA32_127HR111_val,
+		MAC_MA32_127HR110_val,
+		MAC_MA32_127HR109_val,
+		MAC_MA32_127HR108_val,
+		MAC_MA32_127HR107_val,
+		MAC_MA32_127HR106_val,
+		MAC_MA32_127HR105_val,
+		MAC_MA32_127HR104_val,
+		MAC_MA32_127HR103_val,
+		MAC_MA32_127HR102_val,
+		MAC_MA32_127HR101_val,
+		MAC_MA32_127HR100_val,
+		MAC_MA32_127HR99_val,
+		MAC_MA32_127HR98_val,
+		MAC_MA32_127HR97_val,
+		MAC_MA32_127HR96_val,
+		MAC_MA32_127HR95_val,
+		MAC_MA32_127HR94_val,
+		MAC_MA32_127HR93_val,
+		MAC_MA32_127HR92_val,
+		MAC_MA32_127HR91_val,
+		MAC_MA32_127HR90_val,
+		MAC_MA32_127HR89_val,
+		MAC_MA32_127HR88_val,
+		MAC_MA32_127HR87_val,
+		MAC_MA32_127HR86_val,
+		MAC_MA32_127HR85_val,
+		MAC_MA32_127HR84_val,
+		MAC_MA32_127HR83_val,
+		MAC_MA32_127HR82_val,
+		MAC_MA32_127HR81_val,
+		MAC_MA32_127HR80_val,
+		MAC_MA32_127HR79_val,
+		MAC_MA32_127HR78_val,
+		MAC_MA32_127HR77_val,
+		MAC_MA32_127HR76_val,
+		MAC_MA32_127HR75_val,
+		MAC_MA32_127HR74_val,
+		MAC_MA32_127HR73_val,
+		MAC_MA32_127HR72_val,
+		MAC_MA32_127HR71_val,
+		MAC_MA32_127HR70_val,
+		MAC_MA32_127HR69_val,
+		MAC_MA32_127HR68_val,
+		MAC_MA32_127HR67_val,
+		MAC_MA32_127HR66_val,
+		MAC_MA32_127HR65_val,
+		MAC_MA32_127HR64_val,
+		MAC_MA32_127HR63_val,
+		MAC_MA32_127HR62_val,
+		MAC_MA32_127HR61_val,
+		MAC_MA32_127HR60_val,
+		MAC_MA32_127HR59_val,
+		MAC_MA32_127HR58_val,
+		MAC_MA32_127HR57_val,
+		MAC_MA32_127HR56_val,
+		MAC_MA32_127HR55_val,
+		MAC_MA32_127HR54_val,
+		MAC_MA32_127HR53_val,
+		MAC_MA32_127HR52_val,
+		MAC_MA32_127HR51_val,
+		MAC_MA32_127HR50_val,
+		MAC_MA32_127HR49_val,
+		MAC_MA32_127HR48_val,
+		MAC_MA32_127HR47_val,
+		MAC_MA32_127HR46_val,
+		MAC_MA32_127HR45_val,
+		MAC_MA32_127HR44_val,
+		MAC_MA32_127HR43_val,
+		MAC_MA32_127HR42_val,
+		MAC_MA32_127HR41_val,
+		MAC_MA32_127HR40_val,
+		MAC_MA32_127HR39_val,
+		MAC_MA32_127HR38_val,
+		MAC_MA32_127HR37_val,
+		MAC_MA32_127HR36_val,
+		MAC_MA32_127HR35_val,
+		MAC_MA32_127HR34_val,
+		MAC_MA32_127HR33_val,
+		MAC_MA32_127HR32_val,
+		MAC_MA1_31LR31_val,
+		MAC_MA1_31LR30_val,
+		MAC_MA1_31LR29_val,
+		MAC_MA1_31LR28_val,
+		MAC_MA1_31LR27_val,
+		MAC_MA1_31LR26_val,
+		MAC_MA1_31LR25_val,
+		MAC_MA1_31LR24_val,
+		MAC_MA1_31LR23_val,
+		MAC_MA1_31LR22_val,
+		MAC_MA1_31LR21_val,
+		MAC_MA1_31LR20_val,
+		MAC_MA1_31LR19_val,
+		MAC_MA1_31LR18_val,
+		MAC_MA1_31LR17_val,
+		MAC_MA1_31LR16_val,
+		MAC_MA1_31LR15_val,
+		MAC_MA1_31LR14_val,
+		MAC_MA1_31LR13_val,
+		MAC_MA1_31LR12_val,
+		MAC_MA1_31LR11_val,
+		MAC_MA1_31LR10_val,
+		MAC_MA1_31LR9_val,
+		MAC_MA1_31LR8_val,
+		MAC_MA1_31LR7_val,
+		MAC_MA1_31LR6_val,
+		MAC_MA1_31LR5_val,
+		MAC_MA1_31LR4_val,
+		MAC_MA1_31LR3_val,
+		MAC_MA1_31LR2_val,
+		MAC_MA1_31LR1_val,
+		MAC_MA1_31HR31_val,
+		MAC_MA1_31HR30_val,
+		MAC_MA1_31HR29_val,
+		MAC_MA1_31HR28_val,
+		MAC_MA1_31HR27_val,
+		MAC_MA1_31HR26_val,
+		MAC_MA1_31HR25_val,
+		MAC_MA1_31HR24_val,
+		MAC_MA1_31HR23_val,
+		MAC_MA1_31HR22_val,
+		MAC_MA1_31HR21_val,
+		MAC_MA1_31HR20_val,
+		MAC_MA1_31HR19_val,
+		MAC_MA1_31HR18_val,
+		MAC_MA1_31HR17_val,
+		MAC_MA1_31HR16_val,
+		MAC_MA1_31HR15_val,
+		MAC_MA1_31HR14_val,
+		MAC_MA1_31HR13_val,
+		MAC_MA1_31HR12_val,
+		MAC_MA1_31HR11_val,
+		MAC_MA1_31HR10_val,
+		MAC_MA1_31HR9_val,
+		MAC_MA1_31HR8_val,
+		MAC_MA1_31HR7_val,
+		MAC_MA1_31HR6_val,
+		MAC_MA1_31HR5_val,
+		MAC_MA1_31HR4_val,
+		MAC_MA1_31HR3_val,
+		MAC_MA1_31HR2_val,
+		MAC_MA1_31HR1_val,
+		MAC_ARPA_val,
+		MAC_L3A3R7_val,
+		MAC_L3A3R6_val,
+		MAC_L3A3R5_val,
+		MAC_L3A3R4_val,
+		MAC_L3A3R3_val,
+		MAC_L3A3R2_val,
+		MAC_L3A3R1_val,
+		MAC_L3A3R0_val,
+		MAC_L3A2R7_val,
+		MAC_L3A2R6_val,
+		MAC_L3A2R5_val,
+		MAC_L3A2R4_val,
+		MAC_L3A2R3_val,
+		MAC_L3A2R2_val,
+		MAC_L3A2R1_val,
+		MAC_L3A2R0_val,
+		MAC_L3A1R7_val,
+		MAC_L3A1R6_val,
+		MAC_L3A1R5_val,
+		MAC_L3A1R4_val,
+		MAC_L3A1R3_val,
+		MAC_L3A1R2_val,
+		MAC_L3A1R1_val,
+		MAC_L3A1R0_val,
+		MAC_L3A0R7_val,
+		MAC_L3A0R6_val,
+		MAC_L3A0R5_val,
+		MAC_L3A0R4_val,
+		MAC_L3A0R3_val,
+		MAC_L3A0R2_val,
+		MAC_L3A0R1_val,
+		MAC_L3A0R0_val,
+		MAC_L4AR7_val,
+		MAC_L4AR6_val,
+		MAC_L4AR5_val,
+		MAC_L4AR4_val,
+		MAC_L4AR3_val,
+		MAC_L4AR2_val,
+		MAC_L4AR1_val,
+		MAC_L4AR0_val,
+		MAC_L3L4CR7_val,
+		MAC_L3L4CR6_val,
+		MAC_L3L4CR5_val,
+		MAC_L3L4CR4_val,
+		MAC_L3L4CR3_val,
+		MAC_L3L4CR2_val,
+		MAC_L3L4CR1_val,
+		MAC_L3L4CR0_val,
+		MAC_GPIOS_val,
+		MAC_PCS_val,
+		MAC_TES_val,
+		MAC_AE_val,
+		MAC_ALPA_val,
+		MAC_AAD_val,
+		MAC_ANS_val,
+		MAC_ANC_val,
+		MAC_LPC_val,
+		MAC_LPS_val,
+		MAC_PPS_WIDTH3_val,
+		MAC_PPS_WIDTH2_val,
+		MAC_PPS_WIDTH1_val,
+		MAC_PPS_WIDTH0_val,
+		MAC_PPS_INTVAL3_val,
+		MAC_PPS_INTVAL2_val,
+		MAC_PPS_INTVAL1_val,
+		MAC_PPS_INTVAL0_val,
+		MAC_PPS_TTNS3_val,
+		MAC_PPS_TTNS2_val,
+		MAC_PPS_TTNS1_val,
+		MAC_PPS_TTNS0_val,
+		MAC_PPS_TTS3_val,
+		MAC_PPS_TTS2_val,
+		MAC_PPS_TTS1_val,
+		MAC_PPS_TTS0_val,
+		MAC_PPSC_val,
+		MAC_TEAC_val,
+		MAC_TIAC_val,
+		MAC_ATS_val,
+		MAC_ATN_val,
+		MAC_AC_val,
+		MAC_TTN_val,
+		MAC_TTSN_val,
+		MAC_TSR_val,
+		MAC_STHWR_val,
+		MAC_TAR_val,
+		MAC_STNSUR_val,
+		MAC_STSUR_val,
+		MAC_STNSR_val,
+		MAC_STSR_val,
+		MAC_SSIR_val,
+		MAC_TCR_val,
+		MTL_DSR_val,
+		MAC_RWPFFR_val,
+		MAC_RTSR_val,
+		MTL_IER_val,
+		MTL_QRCR7_val,
+		MTL_QRCR6_val,
+		MTL_QRCR5_val,
+		MTL_QRCR4_val,
+		MTL_QRCR3_val,
+		MTL_QRCR2_val,
+		MTL_QRCR1_val,
+		MTL_QRDR7_val,
+		MTL_QRDR6_val,
+		MTL_QRDR5_val,
+		MTL_QRDR4_val,
+		MTL_QRDR3_val,
+		MTL_QRDR2_val,
+		MTL_QRDR1_val,
+		MTL_QOCR7_val,
+		MTL_QOCR6_val,
+		MTL_QOCR5_val,
+		MTL_QOCR4_val,
+		MTL_QOCR3_val,
+		MTL_QOCR2_val,
+		MTL_QOCR1_val,
+		MTL_QROMR7_val,
+		MTL_QROMR6_val,
+		MTL_QROMR5_val,
+		MTL_QROMR4_val,
+		MTL_QROMR3_val,
+		MTL_QROMR2_val,
+		MTL_QROMR1_val,
+		MTL_QLCR7_val,
+		MTL_QLCR6_val,
+		MTL_QLCR5_val,
+		MTL_QLCR4_val,
+		MTL_QLCR3_val,
+		MTL_QLCR2_val,
+		MTL_QLCR1_val,
+		MTL_QHCR7_val,
+		MTL_QHCR6_val,
+		MTL_QHCR5_val,
+		MTL_QHCR4_val,
+		MTL_QHCR3_val,
+		MTL_QHCR2_val,
+		MTL_QHCR1_val,
+		MTL_QSSCR7_val,
+		MTL_QSSCR6_val,
+		MTL_QSSCR5_val,
+		MTL_QSSCR4_val,
+		MTL_QSSCR3_val,
+		MTL_QSSCR2_val,
+		MTL_QSSCR1_val,
+		MTL_QW7_val,
+		MTL_QW6_val,
+		MTL_QW5_val,
+		MTL_QW4_val,
+		MTL_QW3_val,
+		MTL_QW2_val,
+		MTL_QW1_val,
+		MTL_QESR7_val,
+		MTL_QESR6_val,
+		MTL_QESR5_val,
+		MTL_QESR4_val,
+		MTL_QESR3_val,
+		MTL_QESR2_val,
+		MTL_QESR1_val,
+		MTL_QECR7_val,
+		MTL_QECR6_val,
+		MTL_QECR5_val,
+		MTL_QECR4_val,
+		MTL_QECR3_val,
+		MTL_QECR2_val,
+		MTL_QECR1_val,
+		MTL_QTDR7_val,
+		MTL_QTDR6_val,
+		MTL_QTDR5_val,
+		MTL_QTDR4_val,
+		MTL_QTDR3_val,
+		MTL_QTDR2_val,
+		MTL_QTDR1_val,
+		MTL_QUCR7_val,
+		MTL_QUCR6_val,
+		MTL_QUCR5_val,
+		MTL_QUCR4_val,
+		MTL_QUCR3_val,
+		MTL_QUCR2_val,
+		MTL_QUCR1_val,
+		MTL_QTOMR7_val,
+		MTL_QTOMR6_val,
+		MTL_QTOMR5_val,
+		MTL_QTOMR4_val,
+		MTL_QTOMR3_val,
+		MTL_QTOMR2_val,
+		MTL_QTOMR1_val,
+		MAC_PMTCSR_val,
+		MMC_RXICMP_ERR_OCTETS_val,
+		MMC_RXICMP_GD_OCTETS_val,
+		MMC_RXTCP_ERR_OCTETS_val,
+		MMC_RXTCP_GD_OCTETS_val,
+		MMC_RXUDP_ERR_OCTETS_val,
+		MMC_RXUDP_GD_OCTETS_val,
+		MMC_RXIPV6_NOPAY_OCTETS_val,
+		MMC_RXIPV6_HDRERR_OCTETS_val,
+		MMC_RXIPV6_GD_OCTETS_val,
+		MMC_RXIPV4_UDSBL_OCTETS_val,
+		MMC_RXIPV4_FRAG_OCTETS_val,
+		MMC_RXIPV4_NOPAY_OCTETS_val,
+		MMC_RXIPV4_HDRERR_OCTETS_val,
+		MMC_RXIPV4_GD_OCTETS_val,
+		MMC_RXICMP_ERR_PKTS_val,
+		MMC_RXICMP_GD_PKTS_val,
+		MMC_RXTCP_ERR_PKTS_val,
+		MMC_RXTCP_GD_PKTS_val,
+		MMC_RXUDP_ERR_PKTS_val,
+		MMC_RXUDP_GD_PKTS_val,
+		MMC_RXIPV6_NOPAY_PKTS_val,
+		MMC_RXIPV6_HDRERR_PKTS_val,
+		MMC_RXIPV6_GD_PKTS_val,
+		MMC_RXIPV4_UBSBL_PKTS_val,
+		MMC_RXIPV4_FRAG_PKTS_val,
+		MMC_RXIPV4_NOPAY_PKTS_val,
+		MMC_RXIPV4_HDRERR_PKTS_val,
+		MMC_RXIPV4_GD_PKTS_val,
+		MMC_RXCTRLPACKETS_G_val,
+		MMC_RXRCVERROR_val,
+		MMC_RXWATCHDOGERROR_val,
+		MMC_RXVLANPACKETS_GB_val,
+		MMC_RXFIFOOVERFLOW_val,
+		MMC_RXPAUSEPACKETS_val,
+		MMC_RXOUTOFRANGETYPE_val,
+		MMC_RXLENGTHERROR_val,
+		MMC_RXUNICASTPACKETS_G_val,
+		MMC_RX1024TOMAXOCTETS_GB_val,
+		MMC_RX512TO1023OCTETS_GB_val,
+		MMC_RX256TO511OCTETS_GB_val,
+		MMC_RX128TO255OCTETS_GB_val,
+		MMC_RX65TO127OCTETS_GB_val,
+		MMC_RX64OCTETS_GB_val,
+		MMC_RXOVERSIZE_G_val,
+		MMC_RXUNDERSIZE_G_val,
+		MMC_RXJABBERERROR_val,
+		MMC_RXRUNTERROR_val,
+		MMC_RXALIGNMENTERROR_val,
+		MMC_RXCRCERROR_val,
+		MMC_RXMULTICASTPACKETS_G_val,
+		MMC_RXBROADCASTPACKETS_G_val,
+		MMC_RXOCTETCOUNT_G_val,
+		MMC_RXOCTETCOUNT_GB_val,
+		MMC_RXPACKETCOUNT_GB_val,
+		MMC_TXOVERSIZE_G_val,
+		MMC_TXVLANPACKETS_G_val,
+		MMC_TXPAUSEPACKETS_val,
+		MMC_TXEXCESSDEF_val,
+		MMC_TXPACKETSCOUNT_G_val,
+		MMC_TXOCTETCOUNT_G_val,
+		MMC_TXCARRIERERROR_val,
+		MMC_TXEXESSCOL_val,
+		MMC_TXLATECOL_val,
+		MMC_TXDEFERRED_val,
+		MMC_TXMULTICOL_G_val,
+		MMC_TXSINGLECOL_G_val,
+		MMC_TXUNDERFLOWERROR_val,
+		MMC_TXBROADCASTPACKETS_GB_val,
+		MMC_TXMULTICASTPACKETS_GB_val,
+		MMC_TXUNICASTPACKETS_GB_val,
+		MMC_TX1024TOMAXOCTETS_GB_val,
+		MMC_TX512TO1023OCTETS_GB_val,
+		MMC_TX256TO511OCTETS_GB_val,
+		MMC_TX128TO255OCTETS_GB_val,
+		MMC_TX65TO127OCTETS_GB_val,
+		MMC_TX64OCTETS_GB_val,
+		MMC_TXMULTICASTPACKETS_G_val,
+		MMC_TXBROADCASTPACKETS_G_val,
+		MMC_TXPACKETCOUNT_GB_val,
+		MMC_TXOCTETCOUNT_GB_val,
+		MMC_IPC_INTR_RX_val,
+		MMC_IPC_INTR_MASK_RX_val,
+		MMC_INTR_MASK_TX_val,
+		MMC_INTR_MASK_RX_val,
+		MMC_INTR_TX_val,
+		MMC_INTR_RX_val,
+		MMC_CNTRL_val,
+		MAC_MA1LR_val,
+		MAC_MA1HR_val,
+		MAC_MA0LR_val,
+		MAC_MA0HR_val,
+		MAC_GPIOR_val,
+		MAC_GMIIDR_val,
+		MAC_GMIIAR_val,
+		MAC_HFR2_val,
+		MAC_HFR1_val,
+		MAC_HFR0_val,
+		MAC_MDR_val,
+		MAC_VR_val,
+		MAC_HTR7_val,
+		MAC_HTR6_val,
+		MAC_HTR5_val,
+		MAC_HTR4_val,
+		MAC_HTR3_val,
+		MAC_HTR2_val,
+		MAC_HTR1_val,
+		MAC_HTR0_val,
+		DMA_RIWTR7_val,
+		DMA_RIWTR6_val,
+		DMA_RIWTR5_val,
+		DMA_RIWTR4_val,
+		DMA_RIWTR3_val,
+		DMA_RIWTR2_val,
+		DMA_RIWTR1_val,
+		DMA_RIWTR0_val,
+		DMA_RDRLR7_val,
+		DMA_RDRLR6_val,
+		DMA_RDRLR5_val,
+		DMA_RDRLR4_val,
+		DMA_RDRLR3_val,
+		DMA_RDRLR2_val,
+		DMA_RDRLR1_val,
+		DMA_RDRLR0_val,
+		DMA_TDRLR7_val,
+		DMA_TDRLR6_val,
+		DMA_TDRLR5_val,
+		DMA_TDRLR4_val,
+		DMA_TDRLR3_val,
+		DMA_TDRLR2_val,
+		DMA_TDRLR1_val,
+		DMA_TDRLR0_val,
+		DMA_RDTP_RPDR7_val,
+		DMA_RDTP_RPDR6_val,
+		DMA_RDTP_RPDR5_val,
+		DMA_RDTP_RPDR4_val,
+		DMA_RDTP_RPDR3_val,
+		DMA_RDTP_RPDR2_val,
+		DMA_RDTP_RPDR1_val,
+		DMA_RDTP_RPDR0_val,
+		DMA_TDTP_TPDR7_val,
+		DMA_TDTP_TPDR6_val,
+		DMA_TDTP_TPDR5_val,
+		DMA_TDTP_TPDR4_val,
+		DMA_TDTP_TPDR3_val,
+		DMA_TDTP_TPDR2_val,
+		DMA_TDTP_TPDR1_val,
+		DMA_TDTP_TPDR0_val,
+		DMA_RDLAR7_val,
+		DMA_RDLAR6_val,
+		DMA_RDLAR5_val,
+		DMA_RDLAR4_val,
+		DMA_RDLAR3_val,
+		DMA_RDLAR2_val,
+		DMA_RDLAR1_val,
+		DMA_RDLAR0_val,
+		DMA_TDLAR7_val,
+		DMA_TDLAR6_val,
+		DMA_TDLAR5_val,
+		DMA_TDLAR4_val,
+		DMA_TDLAR3_val,
+		DMA_TDLAR2_val,
+		DMA_TDLAR1_val,
+		DMA_TDLAR0_val,
+		DMA_IER7_val,
+		DMA_IER6_val,
+		DMA_IER5_val,
+		DMA_IER4_val,
+		DMA_IER3_val,
+		DMA_IER2_val,
+		DMA_IER1_val,
+		DMA_IER0_val,
+		MAC_IMR_val,
+		MAC_ISR_val,
+		MTL_ISR_val,
+		DMA_SR7_val,
+		DMA_SR6_val,
+		DMA_SR5_val,
+		DMA_SR4_val,
+		DMA_SR3_val,
+		DMA_SR2_val,
+		DMA_SR1_val,
+		DMA_SR0_val,
+		DMA_ISR_val,
+		DMA_DSR2_val,
+		DMA_DSR1_val,
+		DMA_DSR0_val,
+		MTL_Q0RDR_val,
+		MTL_Q0ESR_val,
+		MTL_Q0TDR_val,
+		DMA_CHRBAR7_val,
+		DMA_CHRBAR6_val,
+		DMA_CHRBAR5_val,
+		DMA_CHRBAR4_val,
+		DMA_CHRBAR3_val,
+		DMA_CHRBAR2_val,
+		DMA_CHRBAR1_val,
+		DMA_CHRBAR0_val,
+		DMA_CHTBAR7_val,
+		DMA_CHTBAR6_val,
+		DMA_CHTBAR5_val,
+		DMA_CHTBAR4_val,
+		DMA_CHTBAR3_val,
+		DMA_CHTBAR2_val,
+		DMA_CHTBAR1_val,
+		DMA_CHTBAR0_val,
+		DMA_CHRDR7_val,
+		DMA_CHRDR6_val,
+		DMA_CHRDR5_val,
+		DMA_CHRDR4_val,
+		DMA_CHRDR3_val,
+		DMA_CHRDR2_val,
+		DMA_CHRDR1_val,
+		DMA_CHRDR0_val,
+		DMA_CHTDR7_val,
+		DMA_CHTDR6_val,
+		DMA_CHTDR5_val,
+		DMA_CHTDR4_val,
+		DMA_CHTDR3_val,
+		DMA_CHTDR2_val,
+		DMA_CHTDR1_val,
+		DMA_CHTDR0_val,
+		DMA_SFCSR7_val,
+		DMA_SFCSR6_val,
+		DMA_SFCSR5_val,
+		DMA_SFCSR4_val,
+		DMA_SFCSR3_val,
+		DMA_SFCSR2_val,
+		DMA_SFCSR1_val,
+		DMA_SFCSR0_val,
+		MAC_IVLANTIRR_val,
+		MAC_VLANTIRR_val,
+		MAC_VLANHTR_val,
+		MAC_VLANTR_val,
+		DMA_SBUS_val,
+		DMA_BMR_val,
+		MTL_Q0RCR_val,
+		MTL_Q0OCR_val,
+		MTL_Q0ROMR_val,
+		MTL_Q0QR_val,
+		MTL_Q0ECR_val,
+		MTL_Q0UCR_val,
+		MTL_Q0TOMR_val,
+		MTL_RQDCM1R_val,
+		MTL_RQDCM0R_val,
+		MTL_FDDR_val,
+		MTL_FDACS_val,
+		MTL_OMR_val,
+		MAC_RQC3R_val,
+		MAC_RQC2R_val,
+		MAC_RQC1R_val,
+		MAC_RQC0R_val,
+		MAC_TQPM1R_val,
+		MAC_TQPM0R_val,
+		MAC_RFCR_val,
+		MAC_QTFCR7_val,
+		MAC_QTFCR6_val,
+		MAC_QTFCR5_val,
+		MAC_QTFCR4_val,
+		MAC_QTFCR3_val,
+		MAC_QTFCR2_val,
+		MAC_QTFCR1_val,
+		MAC_Q0TFCR_val,
+		DMA_AXI4CR7_val,
+		DMA_AXI4CR6_val,
+		DMA_AXI4CR5_val,
+		DMA_AXI4CR4_val,
+		DMA_AXI4CR3_val,
+		DMA_AXI4CR2_val,
+		DMA_AXI4CR1_val,
+		DMA_AXI4CR0_val,
+		DMA_RCR7_val,
+		DMA_RCR6_val,
+		DMA_RCR5_val,
+		DMA_RCR4_val,
+		DMA_RCR3_val,
+		DMA_RCR2_val,
+		DMA_RCR1_val,
+		DMA_RCR0_val,
+		DMA_TCR7_val,
+		DMA_TCR6_val,
+		DMA_TCR5_val,
+		DMA_TCR4_val,
+		DMA_TCR3_val,
+		DMA_TCR2_val,
+		DMA_TCR1_val,
+		DMA_TCR0_val,
+		DMA_CR7_val,
+		DMA_CR6_val,
+		DMA_CR5_val,
+		DMA_CR4_val,
+		DMA_CR3_val,
+		DMA_CR2_val,
+		DMA_CR1_val,
+		DMA_CR0_val,
+		MAC_WTR_val,
+		MAC_MPFR_val,
+		MAC_MECR_val,
+		MAC_MCR_val,
+		MII_BMCR_REG_val,
+		MII_BMSR_REG_val,
+		MII_PHYSID1_REG_val,
+		MII_PHYSID2_REG_val,
+		MII_ADVERTISE_REG_val,
+		MII_LPA_REG_val,
+		MII_EXPANSION_REG_val,
+		AUTO_NEGO_NP_REG_val,
+		MII_ESTATUS_REG_val,
+		MII_CTRL1000_REG_val,
+		MII_STAT1000_REG_val,
+		PHY_CTL_REG_val,
+		PHY_STS_REG_val, feature_drop_tx_pktburstcnt_val);
+
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(debug_buf);
+	DBGPR("<-- registers_read\n");
+
+	return ret;
+}
+
+static const struct file_operations registers_fops = {
+	.read = registers_read,
+	.write = registers_write,
+};
+
+static ssize_t descriptor_write(struct file *file, const char __user * buf,
+				size_t count, loff_t * ppos)
+{
+	DBGPR("--> registers_write\n");
+	printk(KERN_INFO
+	       "write operation not supported for descrptors: write error\n");
+	DBGPR("<-- registers_write\n");
+
+	return -1;
+}
+
+static ssize_t MAC_MA32_127LR127_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(127, MAC_MA32_127LR127_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR127            :%#x\n",
+		MAC_MA32_127LR127_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR127_fops = {
+	.read = MAC_MA32_127LR127_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR126_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(126, MAC_MA32_127LR126_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR126            :%#x\n",
+		MAC_MA32_127LR126_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR126_fops = {
+	.read = MAC_MA32_127LR126_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR125_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(125, MAC_MA32_127LR125_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR125            :%#x\n",
+		MAC_MA32_127LR125_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR125_fops = {
+	.read = MAC_MA32_127LR125_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR124_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(124, MAC_MA32_127LR124_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR124            :%#x\n",
+		MAC_MA32_127LR124_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR124_fops = {
+	.read = MAC_MA32_127LR124_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR123_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(123, MAC_MA32_127LR123_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR123            :%#x\n",
+		MAC_MA32_127LR123_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR123_fops = {
+	.read = MAC_MA32_127LR123_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR122_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(122, MAC_MA32_127LR122_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR122            :%#x\n",
+		MAC_MA32_127LR122_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR122_fops = {
+	.read = MAC_MA32_127LR122_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR121_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(121, MAC_MA32_127LR121_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR121            :%#x\n",
+		MAC_MA32_127LR121_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR121_fops = {
+	.read = MAC_MA32_127LR121_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR120_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(120, MAC_MA32_127LR120_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR120            :%#x\n",
+		MAC_MA32_127LR120_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR120_fops = {
+	.read = MAC_MA32_127LR120_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR119_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(119, MAC_MA32_127LR119_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR119            :%#x\n",
+		MAC_MA32_127LR119_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR119_fops = {
+	.read = MAC_MA32_127LR119_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR118_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(118, MAC_MA32_127LR118_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR118            :%#x\n",
+		MAC_MA32_127LR118_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR118_fops = {
+	.read = MAC_MA32_127LR118_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR117_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(117, MAC_MA32_127LR117_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR117            :%#x\n",
+		MAC_MA32_127LR117_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR117_fops = {
+	.read = MAC_MA32_127LR117_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR116_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(116, MAC_MA32_127LR116_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR116            :%#x\n",
+		MAC_MA32_127LR116_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR116_fops = {
+	.read = MAC_MA32_127LR116_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR115_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(115, MAC_MA32_127LR115_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR115            :%#x\n",
+		MAC_MA32_127LR115_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR115_fops = {
+	.read = MAC_MA32_127LR115_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR114_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(114, MAC_MA32_127LR114_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR114            :%#x\n",
+		MAC_MA32_127LR114_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR114_fops = {
+	.read = MAC_MA32_127LR114_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR113_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(113, MAC_MA32_127LR113_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR113            :%#x\n",
+		MAC_MA32_127LR113_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR113_fops = {
+	.read = MAC_MA32_127LR113_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR112_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(112, MAC_MA32_127LR112_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR112            :%#x\n",
+		MAC_MA32_127LR112_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR112_fops = {
+	.read = MAC_MA32_127LR112_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR111_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(111, MAC_MA32_127LR111_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR111            :%#x\n",
+		MAC_MA32_127LR111_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR111_fops = {
+	.read = MAC_MA32_127LR111_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR110_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(110, MAC_MA32_127LR110_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR110            :%#x\n",
+		MAC_MA32_127LR110_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR110_fops = {
+	.read = MAC_MA32_127LR110_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR109_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(109, MAC_MA32_127LR109_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR109            :%#x\n",
+		MAC_MA32_127LR109_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR109_fops = {
+	.read = MAC_MA32_127LR109_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR108_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(108, MAC_MA32_127LR108_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR108            :%#x\n",
+		MAC_MA32_127LR108_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR108_fops = {
+	.read = MAC_MA32_127LR108_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR107_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(107, MAC_MA32_127LR107_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR107            :%#x\n",
+		MAC_MA32_127LR107_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR107_fops = {
+	.read = MAC_MA32_127LR107_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR106_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(106, MAC_MA32_127LR106_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR106            :%#x\n",
+		MAC_MA32_127LR106_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR106_fops = {
+	.read = MAC_MA32_127LR106_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR105_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(105, MAC_MA32_127LR105_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR105            :%#x\n",
+		MAC_MA32_127LR105_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR105_fops = {
+	.read = MAC_MA32_127LR105_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR104_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(104, MAC_MA32_127LR104_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR104            :%#x\n",
+		MAC_MA32_127LR104_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR104_fops = {
+	.read = MAC_MA32_127LR104_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR103_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(103, MAC_MA32_127LR103_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR103            :%#x\n",
+		MAC_MA32_127LR103_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR103_fops = {
+	.read = MAC_MA32_127LR103_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR102_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(102, MAC_MA32_127LR102_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR102            :%#x\n",
+		MAC_MA32_127LR102_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR102_fops = {
+	.read = MAC_MA32_127LR102_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR101_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(101, MAC_MA32_127LR101_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR101            :%#x\n",
+		MAC_MA32_127LR101_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR101_fops = {
+	.read = MAC_MA32_127LR101_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR100_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(100, MAC_MA32_127LR100_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR100            :%#x\n",
+		MAC_MA32_127LR100_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR100_fops = {
+	.read = MAC_MA32_127LR100_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR99_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(99, MAC_MA32_127LR99_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR99            :%#x\n",
+		MAC_MA32_127LR99_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR99_fops = {
+	.read = MAC_MA32_127LR99_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR98_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(98, MAC_MA32_127LR98_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR98            :%#x\n",
+		MAC_MA32_127LR98_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR98_fops = {
+	.read = MAC_MA32_127LR98_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR97_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(97, MAC_MA32_127LR97_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR97            :%#x\n",
+		MAC_MA32_127LR97_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR97_fops = {
+	.read = MAC_MA32_127LR97_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR96_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(96, MAC_MA32_127LR96_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR96            :%#x\n",
+		MAC_MA32_127LR96_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR96_fops = {
+	.read = MAC_MA32_127LR96_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR95_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(95, MAC_MA32_127LR95_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR95            :%#x\n",
+		MAC_MA32_127LR95_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR95_fops = {
+	.read = MAC_MA32_127LR95_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR94_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(94, MAC_MA32_127LR94_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR94            :%#x\n",
+		MAC_MA32_127LR94_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR94_fops = {
+	.read = MAC_MA32_127LR94_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR93_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(93, MAC_MA32_127LR93_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR93            :%#x\n",
+		MAC_MA32_127LR93_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR93_fops = {
+	.read = MAC_MA32_127LR93_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR92_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(92, MAC_MA32_127LR92_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR92            :%#x\n",
+		MAC_MA32_127LR92_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR92_fops = {
+	.read = MAC_MA32_127LR92_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR91_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(91, MAC_MA32_127LR91_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR91            :%#x\n",
+		MAC_MA32_127LR91_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR91_fops = {
+	.read = MAC_MA32_127LR91_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR90_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(90, MAC_MA32_127LR90_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR90            :%#x\n",
+		MAC_MA32_127LR90_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR90_fops = {
+	.read = MAC_MA32_127LR90_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR89_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(89, MAC_MA32_127LR89_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR89            :%#x\n",
+		MAC_MA32_127LR89_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR89_fops = {
+	.read = MAC_MA32_127LR89_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR88_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(88, MAC_MA32_127LR88_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR88            :%#x\n",
+		MAC_MA32_127LR88_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR88_fops = {
+	.read = MAC_MA32_127LR88_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR87_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(87, MAC_MA32_127LR87_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR87            :%#x\n",
+		MAC_MA32_127LR87_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR87_fops = {
+	.read = MAC_MA32_127LR87_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR86_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(86, MAC_MA32_127LR86_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR86            :%#x\n",
+		MAC_MA32_127LR86_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR86_fops = {
+	.read = MAC_MA32_127LR86_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR85_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(85, MAC_MA32_127LR85_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR85            :%#x\n",
+		MAC_MA32_127LR85_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR85_fops = {
+	.read = MAC_MA32_127LR85_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR84_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(84, MAC_MA32_127LR84_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR84            :%#x\n",
+		MAC_MA32_127LR84_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR84_fops = {
+	.read = MAC_MA32_127LR84_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR83_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(83, MAC_MA32_127LR83_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR83            :%#x\n",
+		MAC_MA32_127LR83_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR83_fops = {
+	.read = MAC_MA32_127LR83_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR82_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(82, MAC_MA32_127LR82_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR82            :%#x\n",
+		MAC_MA32_127LR82_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR82_fops = {
+	.read = MAC_MA32_127LR82_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR81_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(81, MAC_MA32_127LR81_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR81            :%#x\n",
+		MAC_MA32_127LR81_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR81_fops = {
+	.read = MAC_MA32_127LR81_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR80_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(80, MAC_MA32_127LR80_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR80            :%#x\n",
+		MAC_MA32_127LR80_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR80_fops = {
+	.read = MAC_MA32_127LR80_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR79_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(79, MAC_MA32_127LR79_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR79            :%#x\n",
+		MAC_MA32_127LR79_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR79_fops = {
+	.read = MAC_MA32_127LR79_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR78_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(78, MAC_MA32_127LR78_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR78            :%#x\n",
+		MAC_MA32_127LR78_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR78_fops = {
+	.read = MAC_MA32_127LR78_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR77_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(77, MAC_MA32_127LR77_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR77            :%#x\n",
+		MAC_MA32_127LR77_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR77_fops = {
+	.read = MAC_MA32_127LR77_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR76_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(76, MAC_MA32_127LR76_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR76            :%#x\n",
+		MAC_MA32_127LR76_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR76_fops = {
+	.read = MAC_MA32_127LR76_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR75_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(75, MAC_MA32_127LR75_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR75            :%#x\n",
+		MAC_MA32_127LR75_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR75_fops = {
+	.read = MAC_MA32_127LR75_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR74_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(74, MAC_MA32_127LR74_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR74            :%#x\n",
+		MAC_MA32_127LR74_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR74_fops = {
+	.read = MAC_MA32_127LR74_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR73_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(73, MAC_MA32_127LR73_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR73            :%#x\n",
+		MAC_MA32_127LR73_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR73_fops = {
+	.read = MAC_MA32_127LR73_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR72_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(72, MAC_MA32_127LR72_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR72            :%#x\n",
+		MAC_MA32_127LR72_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR72_fops = {
+	.read = MAC_MA32_127LR72_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR71_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(71, MAC_MA32_127LR71_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR71            :%#x\n",
+		MAC_MA32_127LR71_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR71_fops = {
+	.read = MAC_MA32_127LR71_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR70_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(70, MAC_MA32_127LR70_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR70            :%#x\n",
+		MAC_MA32_127LR70_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR70_fops = {
+	.read = MAC_MA32_127LR70_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR69_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(69, MAC_MA32_127LR69_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR69            :%#x\n",
+		MAC_MA32_127LR69_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR69_fops = {
+	.read = MAC_MA32_127LR69_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR68_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(68, MAC_MA32_127LR68_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR68            :%#x\n",
+		MAC_MA32_127LR68_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR68_fops = {
+	.read = MAC_MA32_127LR68_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR67_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(67, MAC_MA32_127LR67_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR67            :%#x\n",
+		MAC_MA32_127LR67_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR67_fops = {
+	.read = MAC_MA32_127LR67_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR66_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(66, MAC_MA32_127LR66_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR66            :%#x\n",
+		MAC_MA32_127LR66_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR66_fops = {
+	.read = MAC_MA32_127LR66_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR65_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(65, MAC_MA32_127LR65_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR65            :%#x\n",
+		MAC_MA32_127LR65_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR65_fops = {
+	.read = MAC_MA32_127LR65_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR64_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(64, MAC_MA32_127LR64_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR64            :%#x\n",
+		MAC_MA32_127LR64_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR64_fops = {
+	.read = MAC_MA32_127LR64_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR63_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(63, MAC_MA32_127LR63_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR63            :%#x\n",
+		MAC_MA32_127LR63_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR63_fops = {
+	.read = MAC_MA32_127LR63_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR62_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(62, MAC_MA32_127LR62_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR62            :%#x\n",
+		MAC_MA32_127LR62_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR62_fops = {
+	.read = MAC_MA32_127LR62_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR61_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(61, MAC_MA32_127LR61_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR61            :%#x\n",
+		MAC_MA32_127LR61_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR61_fops = {
+	.read = MAC_MA32_127LR61_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR60_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(60, MAC_MA32_127LR60_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR60            :%#x\n",
+		MAC_MA32_127LR60_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR60_fops = {
+	.read = MAC_MA32_127LR60_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR59_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(59, MAC_MA32_127LR59_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR59            :%#x\n",
+		MAC_MA32_127LR59_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR59_fops = {
+	.read = MAC_MA32_127LR59_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR58_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(58, MAC_MA32_127LR58_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR58            :%#x\n",
+		MAC_MA32_127LR58_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR58_fops = {
+	.read = MAC_MA32_127LR58_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR57_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(57, MAC_MA32_127LR57_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR57            :%#x\n",
+		MAC_MA32_127LR57_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR57_fops = {
+	.read = MAC_MA32_127LR57_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR56_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(56, MAC_MA32_127LR56_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR56            :%#x\n",
+		MAC_MA32_127LR56_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR56_fops = {
+	.read = MAC_MA32_127LR56_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR55_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(55, MAC_MA32_127LR55_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR55            :%#x\n",
+		MAC_MA32_127LR55_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR55_fops = {
+	.read = MAC_MA32_127LR55_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR54_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(54, MAC_MA32_127LR54_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR54            :%#x\n",
+		MAC_MA32_127LR54_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR54_fops = {
+	.read = MAC_MA32_127LR54_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR53_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(53, MAC_MA32_127LR53_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR53            :%#x\n",
+		MAC_MA32_127LR53_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR53_fops = {
+	.read = MAC_MA32_127LR53_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR52_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(52, MAC_MA32_127LR52_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR52            :%#x\n",
+		MAC_MA32_127LR52_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR52_fops = {
+	.read = MAC_MA32_127LR52_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR51_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(51, MAC_MA32_127LR51_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR51            :%#x\n",
+		MAC_MA32_127LR51_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR51_fops = {
+	.read = MAC_MA32_127LR51_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR50_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(50, MAC_MA32_127LR50_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR50            :%#x\n",
+		MAC_MA32_127LR50_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR50_fops = {
+	.read = MAC_MA32_127LR50_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR49_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(49, MAC_MA32_127LR49_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR49            :%#x\n",
+		MAC_MA32_127LR49_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR49_fops = {
+	.read = MAC_MA32_127LR49_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR48_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(48, MAC_MA32_127LR48_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR48            :%#x\n",
+		MAC_MA32_127LR48_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR48_fops = {
+	.read = MAC_MA32_127LR48_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR47_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(47, MAC_MA32_127LR47_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR47            :%#x\n",
+		MAC_MA32_127LR47_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR47_fops = {
+	.read = MAC_MA32_127LR47_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR46_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(46, MAC_MA32_127LR46_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR46            :%#x\n",
+		MAC_MA32_127LR46_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR46_fops = {
+	.read = MAC_MA32_127LR46_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR45_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(45, MAC_MA32_127LR45_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR45            :%#x\n",
+		MAC_MA32_127LR45_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR45_fops = {
+	.read = MAC_MA32_127LR45_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR44_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(44, MAC_MA32_127LR44_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR44            :%#x\n",
+		MAC_MA32_127LR44_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR44_fops = {
+	.read = MAC_MA32_127LR44_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR43_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(43, MAC_MA32_127LR43_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR43            :%#x\n",
+		MAC_MA32_127LR43_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR43_fops = {
+	.read = MAC_MA32_127LR43_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR42_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(42, MAC_MA32_127LR42_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR42            :%#x\n",
+		MAC_MA32_127LR42_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR42_fops = {
+	.read = MAC_MA32_127LR42_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR41_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(41, MAC_MA32_127LR41_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR41            :%#x\n",
+		MAC_MA32_127LR41_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR41_fops = {
+	.read = MAC_MA32_127LR41_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR40_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(40, MAC_MA32_127LR40_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR40            :%#x\n",
+		MAC_MA32_127LR40_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR40_fops = {
+	.read = MAC_MA32_127LR40_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR39_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(39, MAC_MA32_127LR39_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR39            :%#x\n",
+		MAC_MA32_127LR39_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR39_fops = {
+	.read = MAC_MA32_127LR39_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR38_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(38, MAC_MA32_127LR38_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR38            :%#x\n",
+		MAC_MA32_127LR38_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR38_fops = {
+	.read = MAC_MA32_127LR38_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR37_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(37, MAC_MA32_127LR37_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR37            :%#x\n",
+		MAC_MA32_127LR37_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR37_fops = {
+	.read = MAC_MA32_127LR37_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR36_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(36, MAC_MA32_127LR36_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR36            :%#x\n",
+		MAC_MA32_127LR36_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR36_fops = {
+	.read = MAC_MA32_127LR36_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR35_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(35, MAC_MA32_127LR35_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR35            :%#x\n",
+		MAC_MA32_127LR35_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR35_fops = {
+	.read = MAC_MA32_127LR35_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR34_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(34, MAC_MA32_127LR34_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR34            :%#x\n",
+		MAC_MA32_127LR34_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR34_fops = {
+	.read = MAC_MA32_127LR34_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR33_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(33, MAC_MA32_127LR33_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR33            :%#x\n",
+		MAC_MA32_127LR33_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR33_fops = {
+	.read = MAC_MA32_127LR33_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127LR32_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127LR_RgRd(32, MAC_MA32_127LR32_val);
+	sprintf(debugfs_buf, "MAC_MA32_127LR32            :%#x\n",
+		MAC_MA32_127LR32_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127LR32_fops = {
+	.read = MAC_MA32_127LR32_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR127_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(127, MAC_MA32_127HR127_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR127            :%#x\n",
+		MAC_MA32_127HR127_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR127_fops = {
+	.read = MAC_MA32_127HR127_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR126_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(126, MAC_MA32_127HR126_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR126            :%#x\n",
+		MAC_MA32_127HR126_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR126_fops = {
+	.read = MAC_MA32_127HR126_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR125_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(125, MAC_MA32_127HR125_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR125            :%#x\n",
+		MAC_MA32_127HR125_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR125_fops = {
+	.read = MAC_MA32_127HR125_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR124_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(124, MAC_MA32_127HR124_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR124            :%#x\n",
+		MAC_MA32_127HR124_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR124_fops = {
+	.read = MAC_MA32_127HR124_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR123_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(123, MAC_MA32_127HR123_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR123            :%#x\n",
+		MAC_MA32_127HR123_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR123_fops = {
+	.read = MAC_MA32_127HR123_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR122_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(122, MAC_MA32_127HR122_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR122            :%#x\n",
+		MAC_MA32_127HR122_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR122_fops = {
+	.read = MAC_MA32_127HR122_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR121_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(121, MAC_MA32_127HR121_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR121            :%#x\n",
+		MAC_MA32_127HR121_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR121_fops = {
+	.read = MAC_MA32_127HR121_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR120_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(120, MAC_MA32_127HR120_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR120            :%#x\n",
+		MAC_MA32_127HR120_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR120_fops = {
+	.read = MAC_MA32_127HR120_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR119_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(119, MAC_MA32_127HR119_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR119            :%#x\n",
+		MAC_MA32_127HR119_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR119_fops = {
+	.read = MAC_MA32_127HR119_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR118_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(118, MAC_MA32_127HR118_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR118            :%#x\n",
+		MAC_MA32_127HR118_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR118_fops = {
+	.read = MAC_MA32_127HR118_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR117_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(117, MAC_MA32_127HR117_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR117            :%#x\n",
+		MAC_MA32_127HR117_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR117_fops = {
+	.read = MAC_MA32_127HR117_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR116_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(116, MAC_MA32_127HR116_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR116            :%#x\n",
+		MAC_MA32_127HR116_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR116_fops = {
+	.read = MAC_MA32_127HR116_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR115_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(115, MAC_MA32_127HR115_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR115            :%#x\n",
+		MAC_MA32_127HR115_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR115_fops = {
+	.read = MAC_MA32_127HR115_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR114_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(114, MAC_MA32_127HR114_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR114            :%#x\n",
+		MAC_MA32_127HR114_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR114_fops = {
+	.read = MAC_MA32_127HR114_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR113_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(113, MAC_MA32_127HR113_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR113            :%#x\n",
+		MAC_MA32_127HR113_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR113_fops = {
+	.read = MAC_MA32_127HR113_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR112_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(112, MAC_MA32_127HR112_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR112            :%#x\n",
+		MAC_MA32_127HR112_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR112_fops = {
+	.read = MAC_MA32_127HR112_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR111_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(111, MAC_MA32_127HR111_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR111            :%#x\n",
+		MAC_MA32_127HR111_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR111_fops = {
+	.read = MAC_MA32_127HR111_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR110_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(110, MAC_MA32_127HR110_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR110            :%#x\n",
+		MAC_MA32_127HR110_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR110_fops = {
+	.read = MAC_MA32_127HR110_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR109_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(109, MAC_MA32_127HR109_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR109            :%#x\n",
+		MAC_MA32_127HR109_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR109_fops = {
+	.read = MAC_MA32_127HR109_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR108_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(108, MAC_MA32_127HR108_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR108            :%#x\n",
+		MAC_MA32_127HR108_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR108_fops = {
+	.read = MAC_MA32_127HR108_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR107_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(107, MAC_MA32_127HR107_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR107            :%#x\n",
+		MAC_MA32_127HR107_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR107_fops = {
+	.read = MAC_MA32_127HR107_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR106_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(106, MAC_MA32_127HR106_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR106            :%#x\n",
+		MAC_MA32_127HR106_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR106_fops = {
+	.read = MAC_MA32_127HR106_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR105_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(105, MAC_MA32_127HR105_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR105            :%#x\n",
+		MAC_MA32_127HR105_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR105_fops = {
+	.read = MAC_MA32_127HR105_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR104_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(104, MAC_MA32_127HR104_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR104            :%#x\n",
+		MAC_MA32_127HR104_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR104_fops = {
+	.read = MAC_MA32_127HR104_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR103_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(103, MAC_MA32_127HR103_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR103            :%#x\n",
+		MAC_MA32_127HR103_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR103_fops = {
+	.read = MAC_MA32_127HR103_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR102_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(102, MAC_MA32_127HR102_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR102            :%#x\n",
+		MAC_MA32_127HR102_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR102_fops = {
+	.read = MAC_MA32_127HR102_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR101_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(101, MAC_MA32_127HR101_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR101            :%#x\n",
+		MAC_MA32_127HR101_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR101_fops = {
+	.read = MAC_MA32_127HR101_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR100_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(100, MAC_MA32_127HR100_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR100            :%#x\n",
+		MAC_MA32_127HR100_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR100_fops = {
+	.read = MAC_MA32_127HR100_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR99_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(99, MAC_MA32_127HR99_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR99            :%#x\n",
+		MAC_MA32_127HR99_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR99_fops = {
+	.read = MAC_MA32_127HR99_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR98_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(98, MAC_MA32_127HR98_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR98            :%#x\n",
+		MAC_MA32_127HR98_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR98_fops = {
+	.read = MAC_MA32_127HR98_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR97_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(97, MAC_MA32_127HR97_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR97            :%#x\n",
+		MAC_MA32_127HR97_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR97_fops = {
+	.read = MAC_MA32_127HR97_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR96_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(96, MAC_MA32_127HR96_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR96            :%#x\n",
+		MAC_MA32_127HR96_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR96_fops = {
+	.read = MAC_MA32_127HR96_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR95_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(95, MAC_MA32_127HR95_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR95            :%#x\n",
+		MAC_MA32_127HR95_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR95_fops = {
+	.read = MAC_MA32_127HR95_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR94_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(94, MAC_MA32_127HR94_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR94            :%#x\n",
+		MAC_MA32_127HR94_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR94_fops = {
+	.read = MAC_MA32_127HR94_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR93_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(93, MAC_MA32_127HR93_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR93            :%#x\n",
+		MAC_MA32_127HR93_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR93_fops = {
+	.read = MAC_MA32_127HR93_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR92_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(92, MAC_MA32_127HR92_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR92            :%#x\n",
+		MAC_MA32_127HR92_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR92_fops = {
+	.read = MAC_MA32_127HR92_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR91_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(91, MAC_MA32_127HR91_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR91            :%#x\n",
+		MAC_MA32_127HR91_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR91_fops = {
+	.read = MAC_MA32_127HR91_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR90_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(90, MAC_MA32_127HR90_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR90            :%#x\n",
+		MAC_MA32_127HR90_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR90_fops = {
+	.read = MAC_MA32_127HR90_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR89_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(89, MAC_MA32_127HR89_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR89            :%#x\n",
+		MAC_MA32_127HR89_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR89_fops = {
+	.read = MAC_MA32_127HR89_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR88_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(88, MAC_MA32_127HR88_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR88            :%#x\n",
+		MAC_MA32_127HR88_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR88_fops = {
+	.read = MAC_MA32_127HR88_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR87_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(87, MAC_MA32_127HR87_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR87            :%#x\n",
+		MAC_MA32_127HR87_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR87_fops = {
+	.read = MAC_MA32_127HR87_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR86_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(86, MAC_MA32_127HR86_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR86            :%#x\n",
+		MAC_MA32_127HR86_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR86_fops = {
+	.read = MAC_MA32_127HR86_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR85_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(85, MAC_MA32_127HR85_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR85            :%#x\n",
+		MAC_MA32_127HR85_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR85_fops = {
+	.read = MAC_MA32_127HR85_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR84_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(84, MAC_MA32_127HR84_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR84            :%#x\n",
+		MAC_MA32_127HR84_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR84_fops = {
+	.read = MAC_MA32_127HR84_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR83_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(83, MAC_MA32_127HR83_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR83            :%#x\n",
+		MAC_MA32_127HR83_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR83_fops = {
+	.read = MAC_MA32_127HR83_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR82_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(82, MAC_MA32_127HR82_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR82            :%#x\n",
+		MAC_MA32_127HR82_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR82_fops = {
+	.read = MAC_MA32_127HR82_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR81_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(81, MAC_MA32_127HR81_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR81            :%#x\n",
+		MAC_MA32_127HR81_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR81_fops = {
+	.read = MAC_MA32_127HR81_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR80_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(80, MAC_MA32_127HR80_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR80            :%#x\n",
+		MAC_MA32_127HR80_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR80_fops = {
+	.read = MAC_MA32_127HR80_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR79_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(79, MAC_MA32_127HR79_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR79            :%#x\n",
+		MAC_MA32_127HR79_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR79_fops = {
+	.read = MAC_MA32_127HR79_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR78_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(78, MAC_MA32_127HR78_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR78            :%#x\n",
+		MAC_MA32_127HR78_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR78_fops = {
+	.read = MAC_MA32_127HR78_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR77_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(77, MAC_MA32_127HR77_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR77            :%#x\n",
+		MAC_MA32_127HR77_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR77_fops = {
+	.read = MAC_MA32_127HR77_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR76_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(76, MAC_MA32_127HR76_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR76            :%#x\n",
+		MAC_MA32_127HR76_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR76_fops = {
+	.read = MAC_MA32_127HR76_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR75_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(75, MAC_MA32_127HR75_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR75            :%#x\n",
+		MAC_MA32_127HR75_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR75_fops = {
+	.read = MAC_MA32_127HR75_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR74_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(74, MAC_MA32_127HR74_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR74            :%#x\n",
+		MAC_MA32_127HR74_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR74_fops = {
+	.read = MAC_MA32_127HR74_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR73_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(73, MAC_MA32_127HR73_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR73            :%#x\n",
+		MAC_MA32_127HR73_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR73_fops = {
+	.read = MAC_MA32_127HR73_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR72_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(72, MAC_MA32_127HR72_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR72            :%#x\n",
+		MAC_MA32_127HR72_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR72_fops = {
+	.read = MAC_MA32_127HR72_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR71_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(71, MAC_MA32_127HR71_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR71            :%#x\n",
+		MAC_MA32_127HR71_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR71_fops = {
+	.read = MAC_MA32_127HR71_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR70_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(70, MAC_MA32_127HR70_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR70            :%#x\n",
+		MAC_MA32_127HR70_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR70_fops = {
+	.read = MAC_MA32_127HR70_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR69_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(69, MAC_MA32_127HR69_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR69            :%#x\n",
+		MAC_MA32_127HR69_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR69_fops = {
+	.read = MAC_MA32_127HR69_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR68_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(68, MAC_MA32_127HR68_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR68            :%#x\n",
+		MAC_MA32_127HR68_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR68_fops = {
+	.read = MAC_MA32_127HR68_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR67_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(67, MAC_MA32_127HR67_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR67            :%#x\n",
+		MAC_MA32_127HR67_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR67_fops = {
+	.read = MAC_MA32_127HR67_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR66_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(66, MAC_MA32_127HR66_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR66            :%#x\n",
+		MAC_MA32_127HR66_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR66_fops = {
+	.read = MAC_MA32_127HR66_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR65_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(65, MAC_MA32_127HR65_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR65            :%#x\n",
+		MAC_MA32_127HR65_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR65_fops = {
+	.read = MAC_MA32_127HR65_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR64_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(64, MAC_MA32_127HR64_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR64            :%#x\n",
+		MAC_MA32_127HR64_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR64_fops = {
+	.read = MAC_MA32_127HR64_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR63_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(63, MAC_MA32_127HR63_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR63            :%#x\n",
+		MAC_MA32_127HR63_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR63_fops = {
+	.read = MAC_MA32_127HR63_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR62_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(62, MAC_MA32_127HR62_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR62            :%#x\n",
+		MAC_MA32_127HR62_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR62_fops = {
+	.read = MAC_MA32_127HR62_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR61_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(61, MAC_MA32_127HR61_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR61            :%#x\n",
+		MAC_MA32_127HR61_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR61_fops = {
+	.read = MAC_MA32_127HR61_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR60_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(60, MAC_MA32_127HR60_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR60            :%#x\n",
+		MAC_MA32_127HR60_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR60_fops = {
+	.read = MAC_MA32_127HR60_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR59_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(59, MAC_MA32_127HR59_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR59            :%#x\n",
+		MAC_MA32_127HR59_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR59_fops = {
+	.read = MAC_MA32_127HR59_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR58_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(58, MAC_MA32_127HR58_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR58            :%#x\n",
+		MAC_MA32_127HR58_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR58_fops = {
+	.read = MAC_MA32_127HR58_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR57_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(57, MAC_MA32_127HR57_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR57            :%#x\n",
+		MAC_MA32_127HR57_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR57_fops = {
+	.read = MAC_MA32_127HR57_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR56_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(56, MAC_MA32_127HR56_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR56            :%#x\n",
+		MAC_MA32_127HR56_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR56_fops = {
+	.read = MAC_MA32_127HR56_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR55_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(55, MAC_MA32_127HR55_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR55            :%#x\n",
+		MAC_MA32_127HR55_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR55_fops = {
+	.read = MAC_MA32_127HR55_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR54_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(54, MAC_MA32_127HR54_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR54            :%#x\n",
+		MAC_MA32_127HR54_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR54_fops = {
+	.read = MAC_MA32_127HR54_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR53_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(53, MAC_MA32_127HR53_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR53            :%#x\n",
+		MAC_MA32_127HR53_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR53_fops = {
+	.read = MAC_MA32_127HR53_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR52_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(52, MAC_MA32_127HR52_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR52            :%#x\n",
+		MAC_MA32_127HR52_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR52_fops = {
+	.read = MAC_MA32_127HR52_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR51_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(51, MAC_MA32_127HR51_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR51            :%#x\n",
+		MAC_MA32_127HR51_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR51_fops = {
+	.read = MAC_MA32_127HR51_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR50_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(50, MAC_MA32_127HR50_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR50            :%#x\n",
+		MAC_MA32_127HR50_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR50_fops = {
+	.read = MAC_MA32_127HR50_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR49_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(49, MAC_MA32_127HR49_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR49            :%#x\n",
+		MAC_MA32_127HR49_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR49_fops = {
+	.read = MAC_MA32_127HR49_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR48_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(48, MAC_MA32_127HR48_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR48            :%#x\n",
+		MAC_MA32_127HR48_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR48_fops = {
+	.read = MAC_MA32_127HR48_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR47_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(47, MAC_MA32_127HR47_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR47            :%#x\n",
+		MAC_MA32_127HR47_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR47_fops = {
+	.read = MAC_MA32_127HR47_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR46_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(46, MAC_MA32_127HR46_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR46            :%#x\n",
+		MAC_MA32_127HR46_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR46_fops = {
+	.read = MAC_MA32_127HR46_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR45_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(45, MAC_MA32_127HR45_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR45            :%#x\n",
+		MAC_MA32_127HR45_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR45_fops = {
+	.read = MAC_MA32_127HR45_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR44_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(44, MAC_MA32_127HR44_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR44            :%#x\n",
+		MAC_MA32_127HR44_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR44_fops = {
+	.read = MAC_MA32_127HR44_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR43_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(43, MAC_MA32_127HR43_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR43            :%#x\n",
+		MAC_MA32_127HR43_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR43_fops = {
+	.read = MAC_MA32_127HR43_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR42_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(42, MAC_MA32_127HR42_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR42            :%#x\n",
+		MAC_MA32_127HR42_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR42_fops = {
+	.read = MAC_MA32_127HR42_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR41_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(41, MAC_MA32_127HR41_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR41            :%#x\n",
+		MAC_MA32_127HR41_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR41_fops = {
+	.read = MAC_MA32_127HR41_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR40_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(40, MAC_MA32_127HR40_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR40            :%#x\n",
+		MAC_MA32_127HR40_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR40_fops = {
+	.read = MAC_MA32_127HR40_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR39_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(39, MAC_MA32_127HR39_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR39            :%#x\n",
+		MAC_MA32_127HR39_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR39_fops = {
+	.read = MAC_MA32_127HR39_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR38_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(38, MAC_MA32_127HR38_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR38            :%#x\n",
+		MAC_MA32_127HR38_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR38_fops = {
+	.read = MAC_MA32_127HR38_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR37_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(37, MAC_MA32_127HR37_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR37            :%#x\n",
+		MAC_MA32_127HR37_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR37_fops = {
+	.read = MAC_MA32_127HR37_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR36_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(36, MAC_MA32_127HR36_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR36            :%#x\n",
+		MAC_MA32_127HR36_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR36_fops = {
+	.read = MAC_MA32_127HR36_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR35_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(35, MAC_MA32_127HR35_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR35            :%#x\n",
+		MAC_MA32_127HR35_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR35_fops = {
+	.read = MAC_MA32_127HR35_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR34_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(34, MAC_MA32_127HR34_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR34            :%#x\n",
+		MAC_MA32_127HR34_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR34_fops = {
+	.read = MAC_MA32_127HR34_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR33_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(33, MAC_MA32_127HR33_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR33            :%#x\n",
+		MAC_MA32_127HR33_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR33_fops = {
+	.read = MAC_MA32_127HR33_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA32_127HR32_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA32_127HR_RgRd(32, MAC_MA32_127HR32_val);
+	sprintf(debugfs_buf, "MAC_MA32_127HR32            :%#x\n",
+		MAC_MA32_127HR32_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA32_127HR32_fops = {
+	.read = MAC_MA32_127HR32_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR31_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(31, MAC_MA1_31LR31_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR31              :%#x\n",
+		MAC_MA1_31LR31_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR31_fops = {
+	.read = MAC_MA1_31LR31_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR30_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(30, MAC_MA1_31LR30_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR30              :%#x\n",
+		MAC_MA1_31LR30_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR30_fops = {
+	.read = MAC_MA1_31LR30_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR29_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(29, MAC_MA1_31LR29_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR29              :%#x\n",
+		MAC_MA1_31LR29_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR29_fops = {
+	.read = MAC_MA1_31LR29_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR28_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(28, MAC_MA1_31LR28_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR28              :%#x\n",
+		MAC_MA1_31LR28_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR28_fops = {
+	.read = MAC_MA1_31LR28_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR27_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(27, MAC_MA1_31LR27_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR27              :%#x\n",
+		MAC_MA1_31LR27_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR27_fops = {
+	.read = MAC_MA1_31LR27_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR26_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(26, MAC_MA1_31LR26_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR26              :%#x\n",
+		MAC_MA1_31LR26_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR26_fops = {
+	.read = MAC_MA1_31LR26_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR25_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(25, MAC_MA1_31LR25_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR25              :%#x\n",
+		MAC_MA1_31LR25_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR25_fops = {
+	.read = MAC_MA1_31LR25_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR24_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(24, MAC_MA1_31LR24_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR24              :%#x\n",
+		MAC_MA1_31LR24_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR24_fops = {
+	.read = MAC_MA1_31LR24_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR23_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(23, MAC_MA1_31LR23_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR23              :%#x\n",
+		MAC_MA1_31LR23_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR23_fops = {
+	.read = MAC_MA1_31LR23_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR22_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(22, MAC_MA1_31LR22_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR22              :%#x\n",
+		MAC_MA1_31LR22_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR22_fops = {
+	.read = MAC_MA1_31LR22_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR21_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(21, MAC_MA1_31LR21_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR21              :%#x\n",
+		MAC_MA1_31LR21_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR21_fops = {
+	.read = MAC_MA1_31LR21_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR20_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(20, MAC_MA1_31LR20_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR20              :%#x\n",
+		MAC_MA1_31LR20_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR20_fops = {
+	.read = MAC_MA1_31LR20_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR19_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(19, MAC_MA1_31LR19_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR19              :%#x\n",
+		MAC_MA1_31LR19_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR19_fops = {
+	.read = MAC_MA1_31LR19_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR18_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(18, MAC_MA1_31LR18_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR18              :%#x\n",
+		MAC_MA1_31LR18_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR18_fops = {
+	.read = MAC_MA1_31LR18_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR17_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(17, MAC_MA1_31LR17_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR17              :%#x\n",
+		MAC_MA1_31LR17_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR17_fops = {
+	.read = MAC_MA1_31LR17_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR16_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(16, MAC_MA1_31LR16_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR16              :%#x\n",
+		MAC_MA1_31LR16_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR16_fops = {
+	.read = MAC_MA1_31LR16_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR15_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(15, MAC_MA1_31LR15_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR15              :%#x\n",
+		MAC_MA1_31LR15_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR15_fops = {
+	.read = MAC_MA1_31LR15_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR14_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(14, MAC_MA1_31LR14_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR14              :%#x\n",
+		MAC_MA1_31LR14_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR14_fops = {
+	.read = MAC_MA1_31LR14_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR13_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(13, MAC_MA1_31LR13_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR13              :%#x\n",
+		MAC_MA1_31LR13_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR13_fops = {
+	.read = MAC_MA1_31LR13_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR12_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(12, MAC_MA1_31LR12_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR12              :%#x\n",
+		MAC_MA1_31LR12_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR12_fops = {
+	.read = MAC_MA1_31LR12_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR11_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(11, MAC_MA1_31LR11_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR11              :%#x\n",
+		MAC_MA1_31LR11_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR11_fops = {
+	.read = MAC_MA1_31LR11_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR10_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(10, MAC_MA1_31LR10_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR10              :%#x\n",
+		MAC_MA1_31LR10_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR10_fops = {
+	.read = MAC_MA1_31LR10_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR9_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(9, MAC_MA1_31LR9_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR9              :%#x\n",
+		MAC_MA1_31LR9_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR9_fops = {
+	.read = MAC_MA1_31LR9_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR8_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(8, MAC_MA1_31LR8_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR8              :%#x\n",
+		MAC_MA1_31LR8_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR8_fops = {
+	.read = MAC_MA1_31LR8_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR7_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(7, MAC_MA1_31LR7_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR7              :%#x\n",
+		MAC_MA1_31LR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR7_fops = {
+	.read = MAC_MA1_31LR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR6_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(6, MAC_MA1_31LR6_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR6              :%#x\n",
+		MAC_MA1_31LR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR6_fops = {
+	.read = MAC_MA1_31LR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR5_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(5, MAC_MA1_31LR5_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR5              :%#x\n",
+		MAC_MA1_31LR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR5_fops = {
+	.read = MAC_MA1_31LR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR4_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(4, MAC_MA1_31LR4_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR4              :%#x\n",
+		MAC_MA1_31LR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR4_fops = {
+	.read = MAC_MA1_31LR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR3_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(3, MAC_MA1_31LR3_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR3              :%#x\n",
+		MAC_MA1_31LR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR3_fops = {
+	.read = MAC_MA1_31LR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR2_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(2, MAC_MA1_31LR2_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR2              :%#x\n",
+		MAC_MA1_31LR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR2_fops = {
+	.read = MAC_MA1_31LR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31LR1_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31LR_RgRd(1, MAC_MA1_31LR1_val);
+	sprintf(debugfs_buf, "MAC_MA1_31LR1              :%#x\n",
+		MAC_MA1_31LR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31LR1_fops = {
+	.read = MAC_MA1_31LR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR31_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(31, MAC_MA1_31HR31_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR31              :%#x\n",
+		MAC_MA1_31HR31_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR31_fops = {
+	.read = MAC_MA1_31HR31_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR30_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(30, MAC_MA1_31HR30_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR30              :%#x\n",
+		MAC_MA1_31HR30_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR30_fops = {
+	.read = MAC_MA1_31HR30_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR29_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(29, MAC_MA1_31HR29_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR29              :%#x\n",
+		MAC_MA1_31HR29_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR29_fops = {
+	.read = MAC_MA1_31HR29_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR28_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(28, MAC_MA1_31HR28_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR28              :%#x\n",
+		MAC_MA1_31HR28_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR28_fops = {
+	.read = MAC_MA1_31HR28_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR27_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(27, MAC_MA1_31HR27_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR27              :%#x\n",
+		MAC_MA1_31HR27_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR27_fops = {
+	.read = MAC_MA1_31HR27_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR26_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(26, MAC_MA1_31HR26_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR26              :%#x\n",
+		MAC_MA1_31HR26_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR26_fops = {
+	.read = MAC_MA1_31HR26_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR25_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(25, MAC_MA1_31HR25_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR25              :%#x\n",
+		MAC_MA1_31HR25_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR25_fops = {
+	.read = MAC_MA1_31HR25_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR24_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(24, MAC_MA1_31HR24_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR24              :%#x\n",
+		MAC_MA1_31HR24_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR24_fops = {
+	.read = MAC_MA1_31HR24_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR23_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(23, MAC_MA1_31HR23_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR23              :%#x\n",
+		MAC_MA1_31HR23_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR23_fops = {
+	.read = MAC_MA1_31HR23_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR22_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(22, MAC_MA1_31HR22_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR22              :%#x\n",
+		MAC_MA1_31HR22_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR22_fops = {
+	.read = MAC_MA1_31HR22_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR21_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(21, MAC_MA1_31HR21_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR21              :%#x\n",
+		MAC_MA1_31HR21_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR21_fops = {
+	.read = MAC_MA1_31HR21_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR20_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(20, MAC_MA1_31HR20_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR20              :%#x\n",
+		MAC_MA1_31HR20_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR20_fops = {
+	.read = MAC_MA1_31HR20_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR19_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(19, MAC_MA1_31HR19_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR19              :%#x\n",
+		MAC_MA1_31HR19_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR19_fops = {
+	.read = MAC_MA1_31HR19_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR18_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(18, MAC_MA1_31HR18_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR18              :%#x\n",
+		MAC_MA1_31HR18_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR18_fops = {
+	.read = MAC_MA1_31HR18_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR17_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(17, MAC_MA1_31HR17_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR17              :%#x\n",
+		MAC_MA1_31HR17_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR17_fops = {
+	.read = MAC_MA1_31HR17_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR16_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(16, MAC_MA1_31HR16_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR16              :%#x\n",
+		MAC_MA1_31HR16_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR16_fops = {
+	.read = MAC_MA1_31HR16_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR15_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(15, MAC_MA1_31HR15_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR15              :%#x\n",
+		MAC_MA1_31HR15_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR15_fops = {
+	.read = MAC_MA1_31HR15_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR14_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(14, MAC_MA1_31HR14_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR14              :%#x\n",
+		MAC_MA1_31HR14_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR14_fops = {
+	.read = MAC_MA1_31HR14_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR13_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(13, MAC_MA1_31HR13_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR13              :%#x\n",
+		MAC_MA1_31HR13_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR13_fops = {
+	.read = MAC_MA1_31HR13_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR12_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(12, MAC_MA1_31HR12_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR12              :%#x\n",
+		MAC_MA1_31HR12_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR12_fops = {
+	.read = MAC_MA1_31HR12_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR11_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(11, MAC_MA1_31HR11_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR11              :%#x\n",
+		MAC_MA1_31HR11_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR11_fops = {
+	.read = MAC_MA1_31HR11_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR10_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(10, MAC_MA1_31HR10_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR10              :%#x\n",
+		MAC_MA1_31HR10_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR10_fops = {
+	.read = MAC_MA1_31HR10_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR9_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(9, MAC_MA1_31HR9_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR9              :%#x\n",
+		MAC_MA1_31HR9_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR9_fops = {
+	.read = MAC_MA1_31HR9_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR8_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(8, MAC_MA1_31HR8_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR8              :%#x\n",
+		MAC_MA1_31HR8_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR8_fops = {
+	.read = MAC_MA1_31HR8_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR7_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(7, MAC_MA1_31HR7_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR7              :%#x\n",
+		MAC_MA1_31HR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR7_fops = {
+	.read = MAC_MA1_31HR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR6_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(6, MAC_MA1_31HR6_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR6              :%#x\n",
+		MAC_MA1_31HR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR6_fops = {
+	.read = MAC_MA1_31HR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR5_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(5, MAC_MA1_31HR5_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR5              :%#x\n",
+		MAC_MA1_31HR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR5_fops = {
+	.read = MAC_MA1_31HR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR4_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(4, MAC_MA1_31HR4_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR4              :%#x\n",
+		MAC_MA1_31HR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR4_fops = {
+	.read = MAC_MA1_31HR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR3_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(3, MAC_MA1_31HR3_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR3              :%#x\n",
+		MAC_MA1_31HR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR3_fops = {
+	.read = MAC_MA1_31HR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR2_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(2, MAC_MA1_31HR2_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR2              :%#x\n",
+		MAC_MA1_31HR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR2_fops = {
+	.read = MAC_MA1_31HR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1_31HR1_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1_31HR_RgRd(1, MAC_MA1_31HR1_val);
+	sprintf(debugfs_buf, "MAC_MA1_31HR1              :%#x\n",
+		MAC_MA1_31HR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1_31HR1_fops = {
+	.read = MAC_MA1_31HR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ARPA_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ARPA_RgRd(MAC_ARPA_val);
+	sprintf(debugfs_buf, "MAC_ARPA                   :%#x\n", MAC_ARPA_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ARPA_fops = {
+	.read = MAC_ARPA_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R7_RgRd(MAC_L3A3R7_val);
+	sprintf(debugfs_buf, "MAC_L3A3R7                 :%#x\n",
+		MAC_L3A3R7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R7_fops = {
+	.read = MAC_L3A3R7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R6_RgRd(MAC_L3A3R6_val);
+	sprintf(debugfs_buf, "MAC_L3A3R6                 :%#x\n",
+		MAC_L3A3R6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R6_fops = {
+	.read = MAC_L3A3R6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R5_RgRd(MAC_L3A3R5_val);
+	sprintf(debugfs_buf, "MAC_L3A3R5                 :%#x\n",
+		MAC_L3A3R5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R5_fops = {
+	.read = MAC_L3A3R5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R4_RgRd(MAC_L3A3R4_val);
+	sprintf(debugfs_buf, "MAC_L3A3R4                 :%#x\n",
+		MAC_L3A3R4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R4_fops = {
+	.read = MAC_L3A3R4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R3_RgRd(MAC_L3A3R3_val);
+	sprintf(debugfs_buf, "MAC_L3A3R3                 :%#x\n",
+		MAC_L3A3R3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R3_fops = {
+	.read = MAC_L3A3R3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R2_RgRd(MAC_L3A3R2_val);
+	sprintf(debugfs_buf, "MAC_L3A3R2                 :%#x\n",
+		MAC_L3A3R2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R2_fops = {
+	.read = MAC_L3A3R2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R1_RgRd(MAC_L3A3R1_val);
+	sprintf(debugfs_buf, "MAC_L3A3R1                 :%#x\n",
+		MAC_L3A3R1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R1_fops = {
+	.read = MAC_L3A3R1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A3R0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A3R0_RgRd(MAC_L3A3R0_val);
+	sprintf(debugfs_buf, "MAC_L3A3R0                 :%#x\n",
+		MAC_L3A3R0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A3R0_fops = {
+	.read = MAC_L3A3R0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R7_RgRd(MAC_L3A2R7_val);
+	sprintf(debugfs_buf, "MAC_L3A2R7                 :%#x\n",
+		MAC_L3A2R7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R7_fops = {
+	.read = MAC_L3A2R7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R6_RgRd(MAC_L3A2R6_val);
+	sprintf(debugfs_buf, "MAC_L3A2R6                 :%#x\n",
+		MAC_L3A2R6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R6_fops = {
+	.read = MAC_L3A2R6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R5_RgRd(MAC_L3A2R5_val);
+	sprintf(debugfs_buf, "MAC_L3A2R5                 :%#x\n",
+		MAC_L3A2R5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R5_fops = {
+	.read = MAC_L3A2R5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R4_RgRd(MAC_L3A2R4_val);
+	sprintf(debugfs_buf, "MAC_L3A2R4                 :%#x\n",
+		MAC_L3A2R4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R4_fops = {
+	.read = MAC_L3A2R4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R3_RgRd(MAC_L3A2R3_val);
+	sprintf(debugfs_buf, "MAC_L3A2R3                 :%#x\n",
+		MAC_L3A2R3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R3_fops = {
+	.read = MAC_L3A2R3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R2_RgRd(MAC_L3A2R2_val);
+	sprintf(debugfs_buf, "MAC_L3A2R2                 :%#x\n",
+		MAC_L3A2R2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R2_fops = {
+	.read = MAC_L3A2R2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R1_RgRd(MAC_L3A2R1_val);
+	sprintf(debugfs_buf, "MAC_L3A2R1                 :%#x\n",
+		MAC_L3A2R1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R1_fops = {
+	.read = MAC_L3A2R1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A2R0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A2R0_RgRd(MAC_L3A2R0_val);
+	sprintf(debugfs_buf, "MAC_L3A2R0                 :%#x\n",
+		MAC_L3A2R0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A2R0_fops = {
+	.read = MAC_L3A2R0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R7_RgRd(MAC_L3A1R7_val);
+	sprintf(debugfs_buf, "MAC_L3A1R7                 :%#x\n",
+		MAC_L3A1R7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R7_fops = {
+	.read = MAC_L3A1R7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R6_RgRd(MAC_L3A1R6_val);
+	sprintf(debugfs_buf, "MAC_L3A1R6                 :%#x\n",
+		MAC_L3A1R6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R6_fops = {
+	.read = MAC_L3A1R6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R5_RgRd(MAC_L3A1R5_val);
+	sprintf(debugfs_buf, "MAC_L3A1R5                 :%#x\n",
+		MAC_L3A1R5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R5_fops = {
+	.read = MAC_L3A1R5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R4_RgRd(MAC_L3A1R4_val);
+	sprintf(debugfs_buf, "MAC_L3A1R4                 :%#x\n",
+		MAC_L3A1R4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R4_fops = {
+	.read = MAC_L3A1R4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R3_RgRd(MAC_L3A1R3_val);
+	sprintf(debugfs_buf, "MAC_L3A1R3                 :%#x\n",
+		MAC_L3A1R3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R3_fops = {
+	.read = MAC_L3A1R3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R2_RgRd(MAC_L3A1R2_val);
+	sprintf(debugfs_buf, "MAC_L3A1R2                 :%#x\n",
+		MAC_L3A1R2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R2_fops = {
+	.read = MAC_L3A1R2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R1_RgRd(MAC_L3A1R1_val);
+	sprintf(debugfs_buf, "MAC_L3A1R1                 :%#x\n",
+		MAC_L3A1R1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R1_fops = {
+	.read = MAC_L3A1R1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A1R0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A1R0_RgRd(MAC_L3A1R0_val);
+	sprintf(debugfs_buf, "MAC_L3A1R0                 :%#x\n",
+		MAC_L3A1R0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A1R0_fops = {
+	.read = MAC_L3A1R0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R7_RgRd(MAC_L3A0R7_val);
+	sprintf(debugfs_buf, "MAC_L3A0R7                 :%#x\n",
+		MAC_L3A0R7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R7_fops = {
+	.read = MAC_L3A0R7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R6_RgRd(MAC_L3A0R6_val);
+	sprintf(debugfs_buf, "MAC_L3A0R6                 :%#x\n",
+		MAC_L3A0R6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R6_fops = {
+	.read = MAC_L3A0R6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R5_RgRd(MAC_L3A0R5_val);
+	sprintf(debugfs_buf, "MAC_L3A0R5                 :%#x\n",
+		MAC_L3A0R5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R5_fops = {
+	.read = MAC_L3A0R5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R4_RgRd(MAC_L3A0R4_val);
+	sprintf(debugfs_buf, "MAC_L3A0R4                 :%#x\n",
+		MAC_L3A0R4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R4_fops = {
+	.read = MAC_L3A0R4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R3_RgRd(MAC_L3A0R3_val);
+	sprintf(debugfs_buf, "MAC_L3A0R3                 :%#x\n",
+		MAC_L3A0R3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R3_fops = {
+	.read = MAC_L3A0R3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R2_RgRd(MAC_L3A0R2_val);
+	sprintf(debugfs_buf, "MAC_L3A0R2                 :%#x\n",
+		MAC_L3A0R2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R2_fops = {
+	.read = MAC_L3A0R2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R1_RgRd(MAC_L3A0R1_val);
+	sprintf(debugfs_buf, "MAC_L3A0R1                 :%#x\n",
+		MAC_L3A0R1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R1_fops = {
+	.read = MAC_L3A0R1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3A0R0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3A0R0_RgRd(MAC_L3A0R0_val);
+	sprintf(debugfs_buf, "MAC_L3A0R0                 :%#x\n",
+		MAC_L3A0R0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3A0R0_fops = {
+	.read = MAC_L3A0R0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR7_RgRd(MAC_L4AR7_val);
+	sprintf(debugfs_buf, "MAC_L4AR7                 :%#x\n", MAC_L4AR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR7_fops = {
+	.read = MAC_L4AR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR6_RgRd(MAC_L4AR6_val);
+	sprintf(debugfs_buf, "MAC_L4AR6                 :%#x\n", MAC_L4AR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR6_fops = {
+	.read = MAC_L4AR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR5_RgRd(MAC_L4AR5_val);
+	sprintf(debugfs_buf, "MAC_L4AR5                 :%#x\n", MAC_L4AR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR5_fops = {
+	.read = MAC_L4AR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR4_RgRd(MAC_L4AR4_val);
+	sprintf(debugfs_buf, "MAC_L4AR4                 :%#x\n", MAC_L4AR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR4_fops = {
+	.read = MAC_L4AR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR3_RgRd(MAC_L4AR3_val);
+	sprintf(debugfs_buf, "MAC_L4AR3                 :%#x\n", MAC_L4AR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR3_fops = {
+	.read = MAC_L4AR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR2_RgRd(MAC_L4AR2_val);
+	sprintf(debugfs_buf, "MAC_L4AR2                 :%#x\n", MAC_L4AR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR2_fops = {
+	.read = MAC_L4AR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR1_RgRd(MAC_L4AR1_val);
+	sprintf(debugfs_buf, "MAC_L4AR1                 :%#x\n", MAC_L4AR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR1_fops = {
+	.read = MAC_L4AR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L4AR0_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L4AR0_RgRd(MAC_L4AR0_val);
+	sprintf(debugfs_buf, "MAC_L4AR0                 :%#x\n", MAC_L4AR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L4AR0_fops = {
+	.read = MAC_L4AR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR7_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR7_RgRd(MAC_L3L4CR7_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR7                :%#x\n",
+		MAC_L3L4CR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR7_fops = {
+	.read = MAC_L3L4CR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR6_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR6_RgRd(MAC_L3L4CR6_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR6                :%#x\n",
+		MAC_L3L4CR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR6_fops = {
+	.read = MAC_L3L4CR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR5_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR5_RgRd(MAC_L3L4CR5_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR5                :%#x\n",
+		MAC_L3L4CR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR5_fops = {
+	.read = MAC_L3L4CR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR4_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR4_RgRd(MAC_L3L4CR4_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR4                :%#x\n",
+		MAC_L3L4CR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR4_fops = {
+	.read = MAC_L3L4CR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR3_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR3_RgRd(MAC_L3L4CR3_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR3                :%#x\n",
+		MAC_L3L4CR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR3_fops = {
+	.read = MAC_L3L4CR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR2_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR2_RgRd(MAC_L3L4CR2_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR2                :%#x\n",
+		MAC_L3L4CR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR2_fops = {
+	.read = MAC_L3L4CR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR1_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR1_RgRd(MAC_L3L4CR1_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR1                :%#x\n",
+		MAC_L3L4CR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR1_fops = {
+	.read = MAC_L3L4CR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_L3L4CR0_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_L3L4CR0_RgRd(MAC_L3L4CR0_val);
+	sprintf(debugfs_buf, "MAC_L3L4CR0                :%#x\n",
+		MAC_L3L4CR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_L3L4CR0_fops = {
+	.read = MAC_L3L4CR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_GPIOS_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_GPIOS_RgRd(MAC_GPIOS_val);
+	sprintf(debugfs_buf, "MAC_GPIOS                  :%#x\n",
+		MAC_GPIOS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_GPIOS_fops = {
+	.read = MAC_GPIOS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PCS_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PCS_RgRd(MAC_PCS_val);
+	sprintf(debugfs_buf, "MAC_PCS                    :%#x\n", MAC_PCS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PCS_fops = {
+	.read = MAC_PCS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TES_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TES_RgRd(MAC_TES_val);
+	sprintf(debugfs_buf, "MAC_TES                    :%#x\n", MAC_TES_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TES_fops = {
+	.read = MAC_TES_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_AE_read(struct file *file, char __user * userbuf,
+			   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_AE_RgRd(MAC_AE_val);
+	sprintf(debugfs_buf, "MAC_AE                     :%#x\n", MAC_AE_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_AE_fops = {
+	.read = MAC_AE_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ALPA_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ALPA_RgRd(MAC_ALPA_val);
+	sprintf(debugfs_buf, "MAC_ALPA                   :%#x\n", MAC_ALPA_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ALPA_fops = {
+	.read = MAC_ALPA_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_AAD_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_AAD_RgRd(MAC_AAD_val);
+	sprintf(debugfs_buf, "MAC_AAD                    :%#x\n", MAC_AAD_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_AAD_fops = {
+	.read = MAC_AAD_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ANS_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ANS_RgRd(MAC_ANS_val);
+	sprintf(debugfs_buf, "MAC_ANS                    :%#x\n", MAC_ANS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ANS_fops = {
+	.read = MAC_ANS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ANC_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ANC_RgRd(MAC_ANC_val);
+	sprintf(debugfs_buf, "MAC_ANC                    :%#x\n", MAC_ANC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ANC_fops = {
+	.read = MAC_ANC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_LPC_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_LPC_RgRd(MAC_LPC_val);
+	sprintf(debugfs_buf, "MAC_LPC                    :%#x\n", MAC_LPC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_LPC_fops = {
+	.read = MAC_LPC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_LPS_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_LPS_RgRd(MAC_LPS_val);
+	sprintf(debugfs_buf, "MAC_LPS                    :%#x\n", MAC_LPS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_LPS_fops = {
+	.read = MAC_LPS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_WIDTH3_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_WIDTH3_RgRd(MAC_PPS_WIDTH3_val);
+	sprintf(debugfs_buf, "MAC_PPS_WIDTH3             :%#x\n",
+		MAC_PPS_WIDTH3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_WIDTH3_fops = {
+	.read = MAC_PPS_WIDTH3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_WIDTH2_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_WIDTH2_RgRd(MAC_PPS_WIDTH2_val);
+	sprintf(debugfs_buf, "MAC_PPS_WIDTH2             :%#x\n",
+		MAC_PPS_WIDTH2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_WIDTH2_fops = {
+	.read = MAC_PPS_WIDTH2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_WIDTH1_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_WIDTH1_RgRd(MAC_PPS_WIDTH1_val);
+	sprintf(debugfs_buf, "MAC_PPS_WIDTH1             :%#x\n",
+		MAC_PPS_WIDTH1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_WIDTH1_fops = {
+	.read = MAC_PPS_WIDTH1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_WIDTH0_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_WIDTH0_RgRd(MAC_PPS_WIDTH0_val);
+	sprintf(debugfs_buf, "MAC_PPS_WIDTH0             :%#x\n",
+		MAC_PPS_WIDTH0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_WIDTH0_fops = {
+	.read = MAC_PPS_WIDTH0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_INTVAL3_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_INTVAL3_RgRd(MAC_PPS_INTVAL3_val);
+	sprintf(debugfs_buf, "MAC_PPS_INTVAL3            :%#x\n",
+		MAC_PPS_INTVAL3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_INTVAL3_fops = {
+	.read = MAC_PPS_INTVAL3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_INTVAL2_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_INTVAL2_RgRd(MAC_PPS_INTVAL2_val);
+	sprintf(debugfs_buf, "MAC_PPS_INTVAL2            :%#x\n",
+		MAC_PPS_INTVAL2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_INTVAL2_fops = {
+	.read = MAC_PPS_INTVAL2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_INTVAL1_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_INTVAL1_RgRd(MAC_PPS_INTVAL1_val);
+	sprintf(debugfs_buf, "MAC_PPS_INTVAL1            :%#x\n",
+		MAC_PPS_INTVAL1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_INTVAL1_fops = {
+	.read = MAC_PPS_INTVAL1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_INTVAL0_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_INTVAL0_RgRd(MAC_PPS_INTVAL0_val);
+	sprintf(debugfs_buf, "MAC_PPS_INTVAL0            :%#x\n",
+		MAC_PPS_INTVAL0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_INTVAL0_fops = {
+	.read = MAC_PPS_INTVAL0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTNS3_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTNS3_RgRd(MAC_PPS_TTNS3_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTNS3              :%#x\n",
+		MAC_PPS_TTNS3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTNS3_fops = {
+	.read = MAC_PPS_TTNS3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTNS2_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTNS2_RgRd(MAC_PPS_TTNS2_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTNS2              :%#x\n",
+		MAC_PPS_TTNS2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTNS2_fops = {
+	.read = MAC_PPS_TTNS2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTNS1_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTNS1_RgRd(MAC_PPS_TTNS1_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTNS1              :%#x\n",
+		MAC_PPS_TTNS1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTNS1_fops = {
+	.read = MAC_PPS_TTNS1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTNS0_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTNS0_RgRd(MAC_PPS_TTNS0_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTNS0              :%#x\n",
+		MAC_PPS_TTNS0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTNS0_fops = {
+	.read = MAC_PPS_TTNS0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTS3_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTS3_RgRd(MAC_PPS_TTS3_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTS3               :%#x\n",
+		MAC_PPS_TTS3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTS3_fops = {
+	.read = MAC_PPS_TTS3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTS2_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTS2_RgRd(MAC_PPS_TTS2_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTS2               :%#x\n",
+		MAC_PPS_TTS2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTS2_fops = {
+	.read = MAC_PPS_TTS2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTS1_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTS1_RgRd(MAC_PPS_TTS1_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTS1               :%#x\n",
+		MAC_PPS_TTS1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTS1_fops = {
+	.read = MAC_PPS_TTS1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPS_TTS0_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPS_TTS0_RgRd(MAC_PPS_TTS0_val);
+	sprintf(debugfs_buf, "MAC_PPS_TTS0               :%#x\n",
+		MAC_PPS_TTS0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPS_TTS0_fops = {
+	.read = MAC_PPS_TTS0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PPSC_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PPSC_RgRd(MAC_PPSC_val);
+	sprintf(debugfs_buf, "MAC_PPSC                   :%#x\n", MAC_PPSC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PPSC_fops = {
+	.read = MAC_PPSC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TEAC_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TEAC_RgRd(MAC_TEAC_val);
+	sprintf(debugfs_buf, "MAC_TEAC                   :%#x\n", MAC_TEAC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TEAC_fops = {
+	.read = MAC_TEAC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TIAC_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TIAC_RgRd(MAC_TIAC_val);
+	sprintf(debugfs_buf, "MAC_TIAC                   :%#x\n", MAC_TIAC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TIAC_fops = {
+	.read = MAC_TIAC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ATS_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ATS_RgRd(MAC_ATS_val);
+	sprintf(debugfs_buf, "MAC_ATS                    :%#x\n", MAC_ATS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ATS_fops = {
+	.read = MAC_ATS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ATN_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ATN_RgRd(MAC_ATN_val);
+	sprintf(debugfs_buf, "MAC_ATN                    :%#x\n", MAC_ATN_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ATN_fops = {
+	.read = MAC_ATN_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_AC_read(struct file *file, char __user * userbuf,
+			   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_AC_RgRd(MAC_AC_val);
+	sprintf(debugfs_buf, "MAC_AC                     :%#x\n", MAC_AC_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_AC_fops = {
+	.read = MAC_AC_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TTN_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TTN_RgRd(MAC_TTN_val);
+	sprintf(debugfs_buf, "MAC_TTN                    :%#x\n", MAC_TTN_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TTN_fops = {
+	.read = MAC_TTN_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TTSN_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TTSN_RgRd(MAC_TTSN_val);
+	sprintf(debugfs_buf, "MAC_TTSN                   :%#x\n", MAC_TTSN_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TTSN_fops = {
+	.read = MAC_TTSN_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TSR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TSR_RgRd(MAC_TSR_val);
+	sprintf(debugfs_buf, "MAC_TSR                    :%#x\n", MAC_TSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TSR_fops = {
+	.read = MAC_TSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_STHWR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_STHWR_RgRd(MAC_STHWR_val);
+	sprintf(debugfs_buf, "MAC_STHWR                  :%#x\n",
+		MAC_STHWR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_STHWR_fops = {
+	.read = MAC_STHWR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TAR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TAR_RgRd(MAC_TAR_val);
+	sprintf(debugfs_buf, "MAC_TAR                    :%#x\n", MAC_TAR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TAR_fops = {
+	.read = MAC_TAR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_STNSUR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_STNSUR_RgRd(MAC_STNSUR_val);
+	sprintf(debugfs_buf, "MAC_STNSUR                 :%#x\n",
+		MAC_STNSUR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_STNSUR_fops = {
+	.read = MAC_STNSUR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_STSUR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_STSUR_RgRd(MAC_STSUR_val);
+	sprintf(debugfs_buf, "MAC_STSUR                  :%#x\n",
+		MAC_STSUR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_STSUR_fops = {
+	.read = MAC_STSUR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_STNSR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_STNSR_RgRd(MAC_STNSR_val);
+	sprintf(debugfs_buf, "MAC_STNSR                  :%#x\n",
+		MAC_STNSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_STNSR_fops = {
+	.read = MAC_STNSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_STSR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_STSR_RgRd(MAC_STSR_val);
+	sprintf(debugfs_buf, "MAC_STSR                   :%#x\n", MAC_STSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_STSR_fops = {
+	.read = MAC_STSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_SSIR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_SSIR_RgRd(MAC_SSIR_val);
+	sprintf(debugfs_buf, "MAC_SSIR                   :%#x\n", MAC_SSIR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_SSIR_fops = {
+	.read = MAC_SSIR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TCR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TCR_RgRd(MAC_TCR_val);
+	sprintf(debugfs_buf, "MAC_TCR                    :%#x\n", MAC_TCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TCR_fops = {
+	.read = MAC_TCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_DSR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_DSR_RgRd(MTL_DSR_val);
+	sprintf(debugfs_buf, "MTL_DSR                    :%#x\n", MTL_DSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_DSR_fops = {
+	.read = MTL_DSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RWPFFR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RWPFFR_RgRd(MAC_RWPFFR_val);
+	sprintf(debugfs_buf, "MAC_RWPFFR                 :%#x\n",
+		MAC_RWPFFR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RWPFFR_fops = {
+	.read = MAC_RWPFFR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RTSR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RTSR_RgRd(MAC_RTSR_val);
+	sprintf(debugfs_buf, "MAC_RTSR                   :%#x\n", MAC_RTSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RTSR_fops = {
+	.read = MAC_RTSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_IER_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_IER_RgRd(MTL_IER_val);
+	sprintf(debugfs_buf, "MTL_IER                    :%#x\n", MTL_IER_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_IER_fops = {
+	.read = MTL_IER_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR7_RgRd(MTL_QRCR7_val);
+	sprintf(debugfs_buf, "MTL_QRCR7                  :%#x\n",
+		MTL_QRCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR7_fops = {
+	.read = MTL_QRCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR6_RgRd(MTL_QRCR6_val);
+	sprintf(debugfs_buf, "MTL_QRCR6                  :%#x\n",
+		MTL_QRCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR6_fops = {
+	.read = MTL_QRCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR5_RgRd(MTL_QRCR5_val);
+	sprintf(debugfs_buf, "MTL_QRCR5                  :%#x\n",
+		MTL_QRCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR5_fops = {
+	.read = MTL_QRCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR4_RgRd(MTL_QRCR4_val);
+	sprintf(debugfs_buf, "MTL_QRCR4                  :%#x\n",
+		MTL_QRCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR4_fops = {
+	.read = MTL_QRCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR3_RgRd(MTL_QRCR3_val);
+	sprintf(debugfs_buf, "MTL_QRCR3                  :%#x\n",
+		MTL_QRCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR3_fops = {
+	.read = MTL_QRCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR2_RgRd(MTL_QRCR2_val);
+	sprintf(debugfs_buf, "MTL_QRCR2                  :%#x\n",
+		MTL_QRCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR2_fops = {
+	.read = MTL_QRCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRCR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRCR1_RgRd(MTL_QRCR1_val);
+	sprintf(debugfs_buf, "MTL_QRCR1                  :%#x\n",
+		MTL_QRCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRCR1_fops = {
+	.read = MTL_QRCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR7_RgRd(MTL_QRDR7_val);
+	sprintf(debugfs_buf, "MTL_QRDR7                  :%#x\n",
+		MTL_QRDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR7_fops = {
+	.read = MTL_QRDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR6_RgRd(MTL_QRDR6_val);
+	sprintf(debugfs_buf, "MTL_QRDR6                  :%#x\n",
+		MTL_QRDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR6_fops = {
+	.read = MTL_QRDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR5_RgRd(MTL_QRDR5_val);
+	sprintf(debugfs_buf, "MTL_QRDR5                  :%#x\n",
+		MTL_QRDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR5_fops = {
+	.read = MTL_QRDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR4_RgRd(MTL_QRDR4_val);
+	sprintf(debugfs_buf, "MTL_QRDR4                  :%#x\n",
+		MTL_QRDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR4_fops = {
+	.read = MTL_QRDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR3_RgRd(MTL_QRDR3_val);
+	sprintf(debugfs_buf, "MTL_QRDR3                  :%#x\n",
+		MTL_QRDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR3_fops = {
+	.read = MTL_QRDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR2_RgRd(MTL_QRDR2_val);
+	sprintf(debugfs_buf, "MTL_QRDR2                  :%#x\n",
+		MTL_QRDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR2_fops = {
+	.read = MTL_QRDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QRDR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QRDR1_RgRd(MTL_QRDR1_val);
+	sprintf(debugfs_buf, "MTL_QRDR1                  :%#x\n",
+		MTL_QRDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QRDR1_fops = {
+	.read = MTL_QRDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR7_RgRd(MTL_QOCR7_val);
+	sprintf(debugfs_buf, "MTL_QOCR7                  :%#x\n",
+		MTL_QOCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR7_fops = {
+	.read = MTL_QOCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR6_RgRd(MTL_QOCR6_val);
+	sprintf(debugfs_buf, "MTL_QOCR6                  :%#x\n",
+		MTL_QOCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR6_fops = {
+	.read = MTL_QOCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR5_RgRd(MTL_QOCR5_val);
+	sprintf(debugfs_buf, "MTL_QOCR5                  :%#x\n",
+		MTL_QOCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR5_fops = {
+	.read = MTL_QOCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR4_RgRd(MTL_QOCR4_val);
+	sprintf(debugfs_buf, "MTL_QOCR4                  :%#x\n",
+		MTL_QOCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR4_fops = {
+	.read = MTL_QOCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR3_RgRd(MTL_QOCR3_val);
+	sprintf(debugfs_buf, "MTL_QOCR3                  :%#x\n",
+		MTL_QOCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR3_fops = {
+	.read = MTL_QOCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR2_RgRd(MTL_QOCR2_val);
+	sprintf(debugfs_buf, "MTL_QOCR2                  :%#x\n",
+		MTL_QOCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR2_fops = {
+	.read = MTL_QOCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QOCR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QOCR1_RgRd(MTL_QOCR1_val);
+	sprintf(debugfs_buf, "MTL_QOCR1                  :%#x\n",
+		MTL_QOCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QOCR1_fops = {
+	.read = MTL_QOCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR7_RgRd(MTL_QROMR7_val);
+	sprintf(debugfs_buf, "MTL_QROMR7                 :%#x\n",
+		MTL_QROMR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR7_fops = {
+	.read = MTL_QROMR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR6_RgRd(MTL_QROMR6_val);
+	sprintf(debugfs_buf, "MTL_QROMR6                 :%#x\n",
+		MTL_QROMR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR6_fops = {
+	.read = MTL_QROMR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR5_RgRd(MTL_QROMR5_val);
+	sprintf(debugfs_buf, "MTL_QROMR5                 :%#x\n",
+		MTL_QROMR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR5_fops = {
+	.read = MTL_QROMR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR4_RgRd(MTL_QROMR4_val);
+	sprintf(debugfs_buf, "MTL_QROMR4                 :%#x\n",
+		MTL_QROMR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR4_fops = {
+	.read = MTL_QROMR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR3_RgRd(MTL_QROMR3_val);
+	sprintf(debugfs_buf, "MTL_QROMR3                 :%#x\n",
+		MTL_QROMR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR3_fops = {
+	.read = MTL_QROMR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR2_RgRd(MTL_QROMR2_val);
+	sprintf(debugfs_buf, "MTL_QROMR2                 :%#x\n",
+		MTL_QROMR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR2_fops = {
+	.read = MTL_QROMR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QROMR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QROMR1_RgRd(MTL_QROMR1_val);
+	sprintf(debugfs_buf, "MTL_QROMR1                 :%#x\n",
+		MTL_QROMR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QROMR1_fops = {
+	.read = MTL_QROMR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR7_RgRd(MTL_QLCR7_val);
+	sprintf(debugfs_buf, "MTL_QLCR7                  :%#x\n",
+		MTL_QLCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR7_fops = {
+	.read = MTL_QLCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR6_RgRd(MTL_QLCR6_val);
+	sprintf(debugfs_buf, "MTL_QLCR6                  :%#x\n",
+		MTL_QLCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR6_fops = {
+	.read = MTL_QLCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR5_RgRd(MTL_QLCR5_val);
+	sprintf(debugfs_buf, "MTL_QLCR5                  :%#x\n",
+		MTL_QLCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR5_fops = {
+	.read = MTL_QLCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR4_RgRd(MTL_QLCR4_val);
+	sprintf(debugfs_buf, "MTL_QLCR4                  :%#x\n",
+		MTL_QLCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR4_fops = {
+	.read = MTL_QLCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR3_RgRd(MTL_QLCR3_val);
+	sprintf(debugfs_buf, "MTL_QLCR3                  :%#x\n",
+		MTL_QLCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR3_fops = {
+	.read = MTL_QLCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR2_RgRd(MTL_QLCR2_val);
+	sprintf(debugfs_buf, "MTL_QLCR2                  :%#x\n",
+		MTL_QLCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR2_fops = {
+	.read = MTL_QLCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QLCR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QLCR1_RgRd(MTL_QLCR1_val);
+	sprintf(debugfs_buf, "MTL_QLCR1                  :%#x\n",
+		MTL_QLCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QLCR1_fops = {
+	.read = MTL_QLCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR7_RgRd(MTL_QHCR7_val);
+	sprintf(debugfs_buf, "MTL_QHCR7                  :%#x\n",
+		MTL_QHCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR7_fops = {
+	.read = MTL_QHCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR6_RgRd(MTL_QHCR6_val);
+	sprintf(debugfs_buf, "MTL_QHCR6                  :%#x\n",
+		MTL_QHCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR6_fops = {
+	.read = MTL_QHCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR5_RgRd(MTL_QHCR5_val);
+	sprintf(debugfs_buf, "MTL_QHCR5                  :%#x\n",
+		MTL_QHCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR5_fops = {
+	.read = MTL_QHCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR4_RgRd(MTL_QHCR4_val);
+	sprintf(debugfs_buf, "MTL_QHCR4                  :%#x\n",
+		MTL_QHCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR4_fops = {
+	.read = MTL_QHCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR3_RgRd(MTL_QHCR3_val);
+	sprintf(debugfs_buf, "MTL_QHCR3                  :%#x\n",
+		MTL_QHCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR3_fops = {
+	.read = MTL_QHCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR2_RgRd(MTL_QHCR2_val);
+	sprintf(debugfs_buf, "MTL_QHCR2                  :%#x\n",
+		MTL_QHCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR2_fops = {
+	.read = MTL_QHCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QHCR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QHCR1_RgRd(MTL_QHCR1_val);
+	sprintf(debugfs_buf, "MTL_QHCR1                  :%#x\n",
+		MTL_QHCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QHCR1_fops = {
+	.read = MTL_QHCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR7_RgRd(MTL_QSSCR7_val);
+	sprintf(debugfs_buf, "MTL_QSSCR7                 :%#x\n",
+		MTL_QSSCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR7_fops = {
+	.read = MTL_QSSCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR6_RgRd(MTL_QSSCR6_val);
+	sprintf(debugfs_buf, "MTL_QSSCR6                 :%#x\n",
+		MTL_QSSCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR6_fops = {
+	.read = MTL_QSSCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR5_RgRd(MTL_QSSCR5_val);
+	sprintf(debugfs_buf, "MTL_QSSCR5                 :%#x\n",
+		MTL_QSSCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR5_fops = {
+	.read = MTL_QSSCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR4_RgRd(MTL_QSSCR4_val);
+	sprintf(debugfs_buf, "MTL_QSSCR4                 :%#x\n",
+		MTL_QSSCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR4_fops = {
+	.read = MTL_QSSCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR3_RgRd(MTL_QSSCR3_val);
+	sprintf(debugfs_buf, "MTL_QSSCR3                 :%#x\n",
+		MTL_QSSCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR3_fops = {
+	.read = MTL_QSSCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR2_RgRd(MTL_QSSCR2_val);
+	sprintf(debugfs_buf, "MTL_QSSCR2                 :%#x\n",
+		MTL_QSSCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR2_fops = {
+	.read = MTL_QSSCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QSSCR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QSSCR1_RgRd(MTL_QSSCR1_val);
+	sprintf(debugfs_buf, "MTL_QSSCR1                 :%#x\n",
+		MTL_QSSCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QSSCR1_fops = {
+	.read = MTL_QSSCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW7_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW7_RgRd(MTL_QW7_val);
+	sprintf(debugfs_buf, "MTL_QW7                    :%#x\n", MTL_QW7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW7_fops = {
+	.read = MTL_QW7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW6_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW6_RgRd(MTL_QW6_val);
+	sprintf(debugfs_buf, "MTL_QW6                    :%#x\n", MTL_QW6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW6_fops = {
+	.read = MTL_QW6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW5_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW5_RgRd(MTL_QW5_val);
+	sprintf(debugfs_buf, "MTL_QW5                    :%#x\n", MTL_QW5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW5_fops = {
+	.read = MTL_QW5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW4_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW4_RgRd(MTL_QW4_val);
+	sprintf(debugfs_buf, "MTL_QW4                    :%#x\n", MTL_QW4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW4_fops = {
+	.read = MTL_QW4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW3_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW3_RgRd(MTL_QW3_val);
+	sprintf(debugfs_buf, "MTL_QW3                    :%#x\n", MTL_QW3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW3_fops = {
+	.read = MTL_QW3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW2_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW2_RgRd(MTL_QW2_val);
+	sprintf(debugfs_buf, "MTL_QW2                    :%#x\n", MTL_QW2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW2_fops = {
+	.read = MTL_QW2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QW1_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QW1_RgRd(MTL_QW1_val);
+	sprintf(debugfs_buf, "MTL_QW1                    :%#x\n", MTL_QW1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QW1_fops = {
+	.read = MTL_QW1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR7_RgRd(MTL_QESR7_val);
+	sprintf(debugfs_buf, "MTL_QESR7                  :%#x\n",
+		MTL_QESR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR7_fops = {
+	.read = MTL_QESR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR6_RgRd(MTL_QESR6_val);
+	sprintf(debugfs_buf, "MTL_QESR6                  :%#x\n",
+		MTL_QESR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR6_fops = {
+	.read = MTL_QESR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR5_RgRd(MTL_QESR5_val);
+	sprintf(debugfs_buf, "MTL_QESR5                  :%#x\n",
+		MTL_QESR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR5_fops = {
+	.read = MTL_QESR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR4_RgRd(MTL_QESR4_val);
+	sprintf(debugfs_buf, "MTL_QESR4                  :%#x\n",
+		MTL_QESR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR4_fops = {
+	.read = MTL_QESR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR3_RgRd(MTL_QESR3_val);
+	sprintf(debugfs_buf, "MTL_QESR3                  :%#x\n",
+		MTL_QESR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR3_fops = {
+	.read = MTL_QESR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR2_RgRd(MTL_QESR2_val);
+	sprintf(debugfs_buf, "MTL_QESR2                  :%#x\n",
+		MTL_QESR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR2_fops = {
+	.read = MTL_QESR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QESR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QESR1_RgRd(MTL_QESR1_val);
+	sprintf(debugfs_buf, "MTL_QESR1                  :%#x\n",
+		MTL_QESR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QESR1_fops = {
+	.read = MTL_QESR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR7_RgRd(MTL_QECR7_val);
+	sprintf(debugfs_buf, "MTL_QECR7                  :%#x\n",
+		MTL_QECR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR7_fops = {
+	.read = MTL_QECR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR6_RgRd(MTL_QECR6_val);
+	sprintf(debugfs_buf, "MTL_QECR6                  :%#x\n",
+		MTL_QECR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR6_fops = {
+	.read = MTL_QECR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR5_RgRd(MTL_QECR5_val);
+	sprintf(debugfs_buf, "MTL_QECR5                  :%#x\n",
+		MTL_QECR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR5_fops = {
+	.read = MTL_QECR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR4_RgRd(MTL_QECR4_val);
+	sprintf(debugfs_buf, "MTL_QECR4                  :%#x\n",
+		MTL_QECR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR4_fops = {
+	.read = MTL_QECR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR3_RgRd(MTL_QECR3_val);
+	sprintf(debugfs_buf, "MTL_QECR3                  :%#x\n",
+		MTL_QECR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR3_fops = {
+	.read = MTL_QECR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR2_RgRd(MTL_QECR2_val);
+	sprintf(debugfs_buf, "MTL_QECR2                  :%#x\n",
+		MTL_QECR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR2_fops = {
+	.read = MTL_QECR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QECR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QECR1_RgRd(MTL_QECR1_val);
+	sprintf(debugfs_buf, "MTL_QECR1                  :%#x\n",
+		MTL_QECR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QECR1_fops = {
+	.read = MTL_QECR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR7_RgRd(MTL_QTDR7_val);
+	sprintf(debugfs_buf, "MTL_QTDR7                  :%#x\n",
+		MTL_QTDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR7_fops = {
+	.read = MTL_QTDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR6_RgRd(MTL_QTDR6_val);
+	sprintf(debugfs_buf, "MTL_QTDR6                  :%#x\n",
+		MTL_QTDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR6_fops = {
+	.read = MTL_QTDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR5_RgRd(MTL_QTDR5_val);
+	sprintf(debugfs_buf, "MTL_QTDR5                  :%#x\n",
+		MTL_QTDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR5_fops = {
+	.read = MTL_QTDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR4_RgRd(MTL_QTDR4_val);
+	sprintf(debugfs_buf, "MTL_QTDR4                  :%#x\n",
+		MTL_QTDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR4_fops = {
+	.read = MTL_QTDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR3_RgRd(MTL_QTDR3_val);
+	sprintf(debugfs_buf, "MTL_QTDR3                  :%#x\n",
+		MTL_QTDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR3_fops = {
+	.read = MTL_QTDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR2_RgRd(MTL_QTDR2_val);
+	sprintf(debugfs_buf, "MTL_QTDR2                  :%#x\n",
+		MTL_QTDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR2_fops = {
+	.read = MTL_QTDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTDR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTDR1_RgRd(MTL_QTDR1_val);
+	sprintf(debugfs_buf, "MTL_QTDR1                  :%#x\n",
+		MTL_QTDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTDR1_fops = {
+	.read = MTL_QTDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR7_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR7_RgRd(MTL_QUCR7_val);
+	sprintf(debugfs_buf, "MTL_QUCR7                  :%#x\n",
+		MTL_QUCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR7_fops = {
+	.read = MTL_QUCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR6_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR6_RgRd(MTL_QUCR6_val);
+	sprintf(debugfs_buf, "MTL_QUCR6                  :%#x\n",
+		MTL_QUCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR6_fops = {
+	.read = MTL_QUCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR5_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR5_RgRd(MTL_QUCR5_val);
+	sprintf(debugfs_buf, "MTL_QUCR5                  :%#x\n",
+		MTL_QUCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR5_fops = {
+	.read = MTL_QUCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR4_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR4_RgRd(MTL_QUCR4_val);
+	sprintf(debugfs_buf, "MTL_QUCR4                  :%#x\n",
+		MTL_QUCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR4_fops = {
+	.read = MTL_QUCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR3_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR3_RgRd(MTL_QUCR3_val);
+	sprintf(debugfs_buf, "MTL_QUCR3                  :%#x\n",
+		MTL_QUCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR3_fops = {
+	.read = MTL_QUCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR2_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR2_RgRd(MTL_QUCR2_val);
+	sprintf(debugfs_buf, "MTL_QUCR2                  :%#x\n",
+		MTL_QUCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR2_fops = {
+	.read = MTL_QUCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QUCR1_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QUCR1_RgRd(MTL_QUCR1_val);
+	sprintf(debugfs_buf, "MTL_QUCR1                  :%#x\n",
+		MTL_QUCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QUCR1_fops = {
+	.read = MTL_QUCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR7_RgRd(MTL_QTOMR7_val);
+	sprintf(debugfs_buf, "MTL_QTOMR7                 :%#x\n",
+		MTL_QTOMR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR7_fops = {
+	.read = MTL_QTOMR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR6_RgRd(MTL_QTOMR6_val);
+	sprintf(debugfs_buf, "MTL_QTOMR6                 :%#x\n",
+		MTL_QTOMR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR6_fops = {
+	.read = MTL_QTOMR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR5_RgRd(MTL_QTOMR5_val);
+	sprintf(debugfs_buf, "MTL_QTOMR5                 :%#x\n",
+		MTL_QTOMR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR5_fops = {
+	.read = MTL_QTOMR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR4_RgRd(MTL_QTOMR4_val);
+	sprintf(debugfs_buf, "MTL_QTOMR4                 :%#x\n",
+		MTL_QTOMR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR4_fops = {
+	.read = MTL_QTOMR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR3_RgRd(MTL_QTOMR3_val);
+	sprintf(debugfs_buf, "MTL_QTOMR3                 :%#x\n",
+		MTL_QTOMR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR3_fops = {
+	.read = MTL_QTOMR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR2_RgRd(MTL_QTOMR2_val);
+	sprintf(debugfs_buf, "MTL_QTOMR2                 :%#x\n",
+		MTL_QTOMR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR2_fops = {
+	.read = MTL_QTOMR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_QTOMR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_QTOMR1_RgRd(MTL_QTOMR1_val);
+	sprintf(debugfs_buf, "MTL_QTOMR1                 :%#x\n",
+		MTL_QTOMR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_QTOMR1_fops = {
+	.read = MTL_QTOMR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_PMTCSR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_PMTCSR_RgRd(MAC_PMTCSR_val);
+	sprintf(debugfs_buf, "MAC_PMTCSR                 :%#x\n",
+		MAC_PMTCSR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_PMTCSR_fops = {
+	.read = MAC_PMTCSR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXICMP_ERR_OCTETS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXICMP_ERR_OCTETS_RgRd(MMC_RXICMP_ERR_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXICMP_ERR_OCTETS      :%#x\n",
+		MMC_RXICMP_ERR_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXICMP_ERR_OCTETS_fops = {
+	.read = MMC_RXICMP_ERR_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXICMP_GD_OCTETS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXICMP_GD_OCTETS_RgRd(MMC_RXICMP_GD_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXICMP_GD_OCTETS       :%#x\n",
+		MMC_RXICMP_GD_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXICMP_GD_OCTETS_fops = {
+	.read = MMC_RXICMP_GD_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXTCP_ERR_OCTETS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXTCP_ERR_OCTETS_RgRd(MMC_RXTCP_ERR_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXTCP_ERR_OCTETS       :%#x\n",
+		MMC_RXTCP_ERR_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXTCP_ERR_OCTETS_fops = {
+	.read = MMC_RXTCP_ERR_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXTCP_GD_OCTETS_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXTCP_GD_OCTETS_RgRd(MMC_RXTCP_GD_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXTCP_GD_OCTETS        :%#x\n",
+		MMC_RXTCP_GD_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXTCP_GD_OCTETS_fops = {
+	.read = MMC_RXTCP_GD_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUDP_ERR_OCTETS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUDP_ERR_OCTETS_RgRd(MMC_RXUDP_ERR_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXUDP_ERR_OCTETS       :%#x\n",
+		MMC_RXUDP_ERR_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUDP_ERR_OCTETS_fops = {
+	.read = MMC_RXUDP_ERR_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUDP_GD_OCTETS_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUDP_GD_OCTETS_RgRd(MMC_RXUDP_GD_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXUDP_GD_OCTETS        :%#x\n",
+		MMC_RXUDP_GD_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUDP_GD_OCTETS_fops = {
+	.read = MMC_RXUDP_GD_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_NOPAY_OCTETS_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_NOPAY_OCTETS_RgRd(MMC_RXIPV6_NOPAY_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_NOPAY_OCTETS    :%#x\n",
+		MMC_RXIPV6_NOPAY_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_NOPAY_OCTETS_fops = {
+	.read = MMC_RXIPV6_NOPAY_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_HDRERR_OCTETS_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_HDRERR_OCTETS_RgRd(MMC_RXIPV6_HDRERR_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_HDRERR_OCTETS   :%#x\n",
+		MMC_RXIPV6_HDRERR_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_HDRERR_OCTETS_fops = {
+	.read = MMC_RXIPV6_HDRERR_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_GD_OCTETS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_GD_OCTETS_RgRd(MMC_RXIPV6_GD_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_GD_OCTETS       :%#x\n",
+		MMC_RXIPV6_GD_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_GD_OCTETS_fops = {
+	.read = MMC_RXIPV6_GD_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_UDSBL_OCTETS_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_UDSBL_OCTETS_RgRd(MMC_RXIPV4_UDSBL_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_UDSBL_OCTETS    :%#x\n",
+		MMC_RXIPV4_UDSBL_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_UDSBL_OCTETS_fops = {
+	.read = MMC_RXIPV4_UDSBL_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_FRAG_OCTETS_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_FRAG_OCTETS_RgRd(MMC_RXIPV4_FRAG_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_FRAG_OCTETS     :%#x\n",
+		MMC_RXIPV4_FRAG_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_FRAG_OCTETS_fops = {
+	.read = MMC_RXIPV4_FRAG_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_NOPAY_OCTETS_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_NOPAY_OCTETS_RgRd(MMC_RXIPV4_NOPAY_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_NOPAY_OCTETS    :%#x\n",
+		MMC_RXIPV4_NOPAY_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_NOPAY_OCTETS_fops = {
+	.read = MMC_RXIPV4_NOPAY_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_HDRERR_OCTETS_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_HDRERR_OCTETS_RgRd(MMC_RXIPV4_HDRERR_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_HDRERR_OCTETS   :%#x\n",
+		MMC_RXIPV4_HDRERR_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_HDRERR_OCTETS_fops = {
+	.read = MMC_RXIPV4_HDRERR_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_GD_OCTETS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_GD_OCTETS_RgRd(MMC_RXIPV4_GD_OCTETS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_GD_OCTETS       :%#x\n",
+		MMC_RXIPV4_GD_OCTETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_GD_OCTETS_fops = {
+	.read = MMC_RXIPV4_GD_OCTETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXICMP_ERR_PKTS_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXICMP_ERR_PKTS_RgRd(MMC_RXICMP_ERR_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXICMP_ERR_PKTS        :%#x\n",
+		MMC_RXICMP_ERR_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXICMP_ERR_PKTS_fops = {
+	.read = MMC_RXICMP_ERR_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXICMP_GD_PKTS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXICMP_GD_PKTS_RgRd(MMC_RXICMP_GD_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXICMP_GD_PKTS         :%#x\n",
+		MMC_RXICMP_GD_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXICMP_GD_PKTS_fops = {
+	.read = MMC_RXICMP_GD_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXTCP_ERR_PKTS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXTCP_ERR_PKTS_RgRd(MMC_RXTCP_ERR_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXTCP_ERR_PKTS         :%#x\n",
+		MMC_RXTCP_ERR_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXTCP_ERR_PKTS_fops = {
+	.read = MMC_RXTCP_ERR_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXTCP_GD_PKTS_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXTCP_GD_PKTS_RgRd(MMC_RXTCP_GD_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXTCP_GD_PKTS          :%#x\n",
+		MMC_RXTCP_GD_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXTCP_GD_PKTS_fops = {
+	.read = MMC_RXTCP_GD_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUDP_ERR_PKTS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUDP_ERR_PKTS_RgRd(MMC_RXUDP_ERR_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXUDP_ERR_PKTS         :%#x\n",
+		MMC_RXUDP_ERR_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUDP_ERR_PKTS_fops = {
+	.read = MMC_RXUDP_ERR_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUDP_GD_PKTS_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUDP_GD_PKTS_RgRd(MMC_RXUDP_GD_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXUDP_GD_PKTS          :%#x\n",
+		MMC_RXUDP_GD_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUDP_GD_PKTS_fops = {
+	.read = MMC_RXUDP_GD_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_NOPAY_PKTS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_NOPAY_PKTS_RgRd(MMC_RXIPV6_NOPAY_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_NOPAY_PKTS      :%#x\n",
+		MMC_RXIPV6_NOPAY_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_NOPAY_PKTS_fops = {
+	.read = MMC_RXIPV6_NOPAY_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_HDRERR_PKTS_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_HDRERR_PKTS_RgRd(MMC_RXIPV6_HDRERR_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_HDRERR_PKTS     :%#x\n",
+		MMC_RXIPV6_HDRERR_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_HDRERR_PKTS_fops = {
+	.read = MMC_RXIPV6_HDRERR_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV6_GD_PKTS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV6_GD_PKTS_RgRd(MMC_RXIPV6_GD_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV6_GD_PKTS         :%#x\n",
+		MMC_RXIPV6_GD_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV6_GD_PKTS_fops = {
+	.read = MMC_RXIPV6_GD_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_UBSBL_PKTS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_UBSBL_PKTS_RgRd(MMC_RXIPV4_UBSBL_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_UBSBL_PKTS      :%#x\n",
+		MMC_RXIPV4_UBSBL_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_UBSBL_PKTS_fops = {
+	.read = MMC_RXIPV4_UBSBL_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_FRAG_PKTS_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_FRAG_PKTS_RgRd(MMC_RXIPV4_FRAG_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_FRAG_PKTS       :%#x\n",
+		MMC_RXIPV4_FRAG_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_FRAG_PKTS_fops = {
+	.read = MMC_RXIPV4_FRAG_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_NOPAY_PKTS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_NOPAY_PKTS_RgRd(MMC_RXIPV4_NOPAY_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_NOPAY_PKTS      :%#x\n",
+		MMC_RXIPV4_NOPAY_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_NOPAY_PKTS_fops = {
+	.read = MMC_RXIPV4_NOPAY_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_HDRERR_PKTS_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_HDRERR_PKTS_RgRd(MMC_RXIPV4_HDRERR_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_HDRERR_PKTS     :%#x\n",
+		MMC_RXIPV4_HDRERR_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_HDRERR_PKTS_fops = {
+	.read = MMC_RXIPV4_HDRERR_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXIPV4_GD_PKTS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXIPV4_GD_PKTS_RgRd(MMC_RXIPV4_GD_PKTS_val);
+	sprintf(debugfs_buf, "MMC_RXIPV4_GD_PKTS         :%#x\n",
+		MMC_RXIPV4_GD_PKTS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXIPV4_GD_PKTS_fops = {
+	.read = MMC_RXIPV4_GD_PKTS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXCTRLPACKETS_G_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXCTRLPACKETS_G_RgRd(MMC_RXCTRLPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_RXCTRLPACKETS_G        :%#x\n",
+		MMC_RXCTRLPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXCTRLPACKETS_G_fops = {
+	.read = MMC_RXCTRLPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXRCVERROR_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXRCVERROR_RgRd(MMC_RXRCVERROR_val);
+	sprintf(debugfs_buf, "MMC_RXRCVERROR             :%#x\n",
+		MMC_RXRCVERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXRCVERROR_fops = {
+	.read = MMC_RXRCVERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXWATCHDOGERROR_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXWATCHDOGERROR_RgRd(MMC_RXWATCHDOGERROR_val);
+	sprintf(debugfs_buf, "MMC_RXWATCHDOGERROR        :%#x\n",
+		MMC_RXWATCHDOGERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXWATCHDOGERROR_fops = {
+	.read = MMC_RXWATCHDOGERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXVLANPACKETS_GB_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXVLANPACKETS_GB_RgRd(MMC_RXVLANPACKETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RXVLANPACKETS_GB       :%#x\n",
+		MMC_RXVLANPACKETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXVLANPACKETS_GB_fops = {
+	.read = MMC_RXVLANPACKETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXFIFOOVERFLOW_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXFIFOOVERFLOW_RgRd(MMC_RXFIFOOVERFLOW_val);
+	sprintf(debugfs_buf, "MMC_RXFIFOOVERFLOW         :%#x\n",
+		MMC_RXFIFOOVERFLOW_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXFIFOOVERFLOW_fops = {
+	.read = MMC_RXFIFOOVERFLOW_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXPAUSEPACKETS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXPAUSEPACKETS_RgRd(MMC_RXPAUSEPACKETS_val);
+	sprintf(debugfs_buf, "MMC_RXPAUSEPACKETS         :%#x\n",
+		MMC_RXPAUSEPACKETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXPAUSEPACKETS_fops = {
+	.read = MMC_RXPAUSEPACKETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXOUTOFRANGETYPE_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXOUTOFRANGETYPE_RgRd(MMC_RXOUTOFRANGETYPE_val);
+	sprintf(debugfs_buf, "MMC_RXOUTOFRANGETYPE       :%#x\n",
+		MMC_RXOUTOFRANGETYPE_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXOUTOFRANGETYPE_fops = {
+	.read = MMC_RXOUTOFRANGETYPE_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXLENGTHERROR_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXLENGTHERROR_RgRd(MMC_RXLENGTHERROR_val);
+	sprintf(debugfs_buf, "MMC_RXLENGTHERROR          :%#x\n",
+		MMC_RXLENGTHERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXLENGTHERROR_fops = {
+	.read = MMC_RXLENGTHERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUNICASTPACKETS_G_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUNICASTPACKETS_G_RgRd(MMC_RXUNICASTPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_RXUNICASTPACKETS_G     :%#x\n",
+		MMC_RXUNICASTPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUNICASTPACKETS_G_fops = {
+	.read = MMC_RXUNICASTPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX1024TOMAXOCTETS_GB_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX1024TOMAXOCTETS_GB_RgRd(MMC_RX1024TOMAXOCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX1024TOMAXOCTETS_GB   :%#x\n",
+		MMC_RX1024TOMAXOCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX1024TOMAXOCTETS_GB_fops = {
+	.read = MMC_RX1024TOMAXOCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX512TO1023OCTETS_GB_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX512TO1023OCTETS_GB_RgRd(MMC_RX512TO1023OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX512TO1023OCTETS_GB   :%#x\n",
+		MMC_RX512TO1023OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX512TO1023OCTETS_GB_fops = {
+	.read = MMC_RX512TO1023OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX256TO511OCTETS_GB_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX256TO511OCTETS_GB_RgRd(MMC_RX256TO511OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX256TO511OCTETS_GB    :%#x\n",
+		MMC_RX256TO511OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX256TO511OCTETS_GB_fops = {
+	.read = MMC_RX256TO511OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX128TO255OCTETS_GB_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX128TO255OCTETS_GB_RgRd(MMC_RX128TO255OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX128TO255OCTETS_GB    :%#x\n",
+		MMC_RX128TO255OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX128TO255OCTETS_GB_fops = {
+	.read = MMC_RX128TO255OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX65TO127OCTETS_GB_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX65TO127OCTETS_GB_RgRd(MMC_RX65TO127OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX65TO127OCTETS_GB     :%#x\n",
+		MMC_RX65TO127OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX65TO127OCTETS_GB_fops = {
+	.read = MMC_RX65TO127OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RX64OCTETS_GB_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RX64OCTETS_GB_RgRd(MMC_RX64OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_RX64OCTETS_GB          :%#x\n",
+		MMC_RX64OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RX64OCTETS_GB_fops = {
+	.read = MMC_RX64OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXOVERSIZE_G_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXOVERSIZE_G_RgRd(MMC_RXOVERSIZE_G_val);
+	sprintf(debugfs_buf, "MMC_RXOVERSIZE_G           :%#x\n",
+		MMC_RXOVERSIZE_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXOVERSIZE_G_fops = {
+	.read = MMC_RXOVERSIZE_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXUNDERSIZE_G_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXUNDERSIZE_G_RgRd(MMC_RXUNDERSIZE_G_val);
+	sprintf(debugfs_buf, "MMC_RXUNDERSIZE_G          :%#x\n",
+		MMC_RXUNDERSIZE_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXUNDERSIZE_G_fops = {
+	.read = MMC_RXUNDERSIZE_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXJABBERERROR_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXJABBERERROR_RgRd(MMC_RXJABBERERROR_val);
+	sprintf(debugfs_buf, "MMC_RXJABBERERROR          :%#x\n",
+		MMC_RXJABBERERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXJABBERERROR_fops = {
+	.read = MMC_RXJABBERERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXRUNTERROR_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXRUNTERROR_RgRd(MMC_RXRUNTERROR_val);
+	sprintf(debugfs_buf, "MMC_RXRUNTERROR            :%#x\n",
+		MMC_RXRUNTERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXRUNTERROR_fops = {
+	.read = MMC_RXRUNTERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXALIGNMENTERROR_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXALIGNMENTERROR_RgRd(MMC_RXALIGNMENTERROR_val);
+	sprintf(debugfs_buf, "MMC_RXALIGNMENTERROR       :%#x\n",
+		MMC_RXALIGNMENTERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXALIGNMENTERROR_fops = {
+	.read = MMC_RXALIGNMENTERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXCRCERROR_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXCRCERROR_RgRd(MMC_RXCRCERROR_val);
+	sprintf(debugfs_buf, "MMC_RXCRCERROR             :%#x\n",
+		MMC_RXCRCERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXCRCERROR_fops = {
+	.read = MMC_RXCRCERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXMULTICASTPACKETS_G_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXMULTICASTPACKETS_G_RgRd(MMC_RXMULTICASTPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_RXMULTICASTPACKETS_G   :%#x\n",
+		MMC_RXMULTICASTPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXMULTICASTPACKETS_G_fops = {
+	.read = MMC_RXMULTICASTPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXBROADCASTPACKETS_G_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXBROADCASTPACKETS_G_RgRd(MMC_RXBROADCASTPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_RXBROADCASTPACKETS_G   :%#x\n",
+		MMC_RXBROADCASTPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXBROADCASTPACKETS_G_fops = {
+	.read = MMC_RXBROADCASTPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXOCTETCOUNT_G_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXOCTETCOUNT_G_RgRd(MMC_RXOCTETCOUNT_G_val);
+	sprintf(debugfs_buf, "MMC_RXOCTETCOUNT_G         :%#x\n",
+		MMC_RXOCTETCOUNT_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXOCTETCOUNT_G_fops = {
+	.read = MMC_RXOCTETCOUNT_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXOCTETCOUNT_GB_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXOCTETCOUNT_GB_RgRd(MMC_RXOCTETCOUNT_GB_val);
+	sprintf(debugfs_buf, "MMC_RXOCTETCOUNT_GB        :%#x\n",
+		MMC_RXOCTETCOUNT_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXOCTETCOUNT_GB_fops = {
+	.read = MMC_RXOCTETCOUNT_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_RXPACKETCOUNT_GB_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_RXPACKETCOUNT_GB_RgRd(MMC_RXPACKETCOUNT_GB_val);
+	sprintf(debugfs_buf, "MMC_RXPACKETCOUNT_GB       :%#x\n",
+		MMC_RXPACKETCOUNT_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_RXPACKETCOUNT_GB_fops = {
+	.read = MMC_RXPACKETCOUNT_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXOVERSIZE_G_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXOVERSIZE_G_RgRd(MMC_TXOVERSIZE_G_val);
+	sprintf(debugfs_buf, "MMC_TXOVERSIZE_G           :%#x\n",
+		MMC_TXOVERSIZE_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXOVERSIZE_G_fops = {
+	.read = MMC_TXOVERSIZE_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXVLANPACKETS_G_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXVLANPACKETS_G_RgRd(MMC_TXVLANPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_TXVLANPACKETS_G        :%#x\n",
+		MMC_TXVLANPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXVLANPACKETS_G_fops = {
+	.read = MMC_TXVLANPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXPAUSEPACKETS_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXPAUSEPACKETS_RgRd(MMC_TXPAUSEPACKETS_val);
+	sprintf(debugfs_buf, "MMC_TXPAUSEPACKETS         :%#x\n",
+		MMC_TXPAUSEPACKETS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXPAUSEPACKETS_fops = {
+	.read = MMC_TXPAUSEPACKETS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXEXCESSDEF_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXEXCESSDEF_RgRd(MMC_TXEXCESSDEF_val);
+	sprintf(debugfs_buf, "MMC_TXEXCESSDEF            :%#x\n",
+		MMC_TXEXCESSDEF_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXEXCESSDEF_fops = {
+	.read = MMC_TXEXCESSDEF_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXPACKETSCOUNT_G_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXPACKETSCOUNT_G_RgRd(MMC_TXPACKETSCOUNT_G_val);
+	sprintf(debugfs_buf, "MMC_TXPACKETSCOUNT_G       :%#x\n",
+		MMC_TXPACKETSCOUNT_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXPACKETSCOUNT_G_fops = {
+	.read = MMC_TXPACKETSCOUNT_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXOCTETCOUNT_G_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXOCTETCOUNT_G_RgRd(MMC_TXOCTETCOUNT_G_val);
+	sprintf(debugfs_buf, "MMC_TXOCTETCOUNT_G         :%#x\n",
+		MMC_TXOCTETCOUNT_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXOCTETCOUNT_G_fops = {
+	.read = MMC_TXOCTETCOUNT_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXCARRIERERROR_read(struct file *file, char __user * userbuf,
+				       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXCARRIERERROR_RgRd(MMC_TXCARRIERERROR_val);
+	sprintf(debugfs_buf, "MMC_TXCARRIERERROR         :%#x\n",
+		MMC_TXCARRIERERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXCARRIERERROR_fops = {
+	.read = MMC_TXCARRIERERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXEXESSCOL_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXEXESSCOL_RgRd(MMC_TXEXESSCOL_val);
+	sprintf(debugfs_buf, "MMC_TXEXESSCOL             :%#x\n",
+		MMC_TXEXESSCOL_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXEXESSCOL_fops = {
+	.read = MMC_TXEXESSCOL_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXLATECOL_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXLATECOL_RgRd(MMC_TXLATECOL_val);
+	sprintf(debugfs_buf, "MMC_TXLATECOL              :%#x\n",
+		MMC_TXLATECOL_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXLATECOL_fops = {
+	.read = MMC_TXLATECOL_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXDEFERRED_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXDEFERRED_RgRd(MMC_TXDEFERRED_val);
+	sprintf(debugfs_buf, "MMC_TXDEFERRED             :%#x\n",
+		MMC_TXDEFERRED_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXDEFERRED_fops = {
+	.read = MMC_TXDEFERRED_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXMULTICOL_G_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXMULTICOL_G_RgRd(MMC_TXMULTICOL_G_val);
+	sprintf(debugfs_buf, "MMC_TXMULTICOL_G           :%#x\n",
+		MMC_TXMULTICOL_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXMULTICOL_G_fops = {
+	.read = MMC_TXMULTICOL_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXSINGLECOL_G_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXSINGLECOL_G_RgRd(MMC_TXSINGLECOL_G_val);
+	sprintf(debugfs_buf, "MMC_TXSINGLECOL_G          :%#x\n",
+		MMC_TXSINGLECOL_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXSINGLECOL_G_fops = {
+	.read = MMC_TXSINGLECOL_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXUNDERFLOWERROR_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXUNDERFLOWERROR_RgRd(MMC_TXUNDERFLOWERROR_val);
+	sprintf(debugfs_buf, "MMC_TXUNDERFLOWERROR       :%#x\n",
+		MMC_TXUNDERFLOWERROR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXUNDERFLOWERROR_fops = {
+	.read = MMC_TXUNDERFLOWERROR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXBROADCASTPACKETS_GB_read(struct file *file,
+					      char __user * userbuf,
+					      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXBROADCASTPACKETS_GB_RgRd(MMC_TXBROADCASTPACKETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TXBROADCASTPACKETS_GB  :%#x\n",
+		MMC_TXBROADCASTPACKETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXBROADCASTPACKETS_GB_fops = {
+	.read = MMC_TXBROADCASTPACKETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXMULTICASTPACKETS_GB_read(struct file *file,
+					      char __user * userbuf,
+					      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXMULTICASTPACKETS_GB_RgRd(MMC_TXMULTICASTPACKETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TXMULTICASTPACKETS_GB  :%#x\n",
+		MMC_TXMULTICASTPACKETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXMULTICASTPACKETS_GB_fops = {
+	.read = MMC_TXMULTICASTPACKETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXUNICASTPACKETS_GB_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXUNICASTPACKETS_GB_RgRd(MMC_TXUNICASTPACKETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TXUNICASTPACKETS_GB    :%#x\n",
+		MMC_TXUNICASTPACKETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXUNICASTPACKETS_GB_fops = {
+	.read = MMC_TXUNICASTPACKETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX1024TOMAXOCTETS_GB_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX1024TOMAXOCTETS_GB_RgRd(MMC_TX1024TOMAXOCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX1024TOMAXOCTETS_GB   :%#x\n",
+		MMC_TX1024TOMAXOCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX1024TOMAXOCTETS_GB_fops = {
+	.read = MMC_TX1024TOMAXOCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX512TO1023OCTETS_GB_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX512TO1023OCTETS_GB_RgRd(MMC_TX512TO1023OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX512TO1023OCTETS_GB   :%#x\n",
+		MMC_TX512TO1023OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX512TO1023OCTETS_GB_fops = {
+	.read = MMC_TX512TO1023OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX256TO511OCTETS_GB_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX256TO511OCTETS_GB_RgRd(MMC_TX256TO511OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX256TO511OCTETS_GB    :%#x\n",
+		MMC_TX256TO511OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX256TO511OCTETS_GB_fops = {
+	.read = MMC_TX256TO511OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX128TO255OCTETS_GB_read(struct file *file,
+					    char __user * userbuf, size_t count,
+					    loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX128TO255OCTETS_GB_RgRd(MMC_TX128TO255OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX128TO255OCTETS_GB    :%#x\n",
+		MMC_TX128TO255OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX128TO255OCTETS_GB_fops = {
+	.read = MMC_TX128TO255OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX65TO127OCTETS_GB_read(struct file *file,
+					   char __user * userbuf, size_t count,
+					   loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX65TO127OCTETS_GB_RgRd(MMC_TX65TO127OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX65TO127OCTETS_GB     :%#x\n",
+		MMC_TX65TO127OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX65TO127OCTETS_GB_fops = {
+	.read = MMC_TX65TO127OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TX64OCTETS_GB_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TX64OCTETS_GB_RgRd(MMC_TX64OCTETS_GB_val);
+	sprintf(debugfs_buf, "MMC_TX64OCTETS_GB          :%#x\n",
+		MMC_TX64OCTETS_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TX64OCTETS_GB_fops = {
+	.read = MMC_TX64OCTETS_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXMULTICASTPACKETS_G_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXMULTICASTPACKETS_G_RgRd(MMC_TXMULTICASTPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_TXMULTICASTPACKETS_G   :%#x\n",
+		MMC_TXMULTICASTPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXMULTICASTPACKETS_G_fops = {
+	.read = MMC_TXMULTICASTPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXBROADCASTPACKETS_G_read(struct file *file,
+					     char __user * userbuf,
+					     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXBROADCASTPACKETS_G_RgRd(MMC_TXBROADCASTPACKETS_G_val);
+	sprintf(debugfs_buf, "MMC_TXBROADCASTPACKETS_G   :%#x\n",
+		MMC_TXBROADCASTPACKETS_G_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXBROADCASTPACKETS_G_fops = {
+	.read = MMC_TXBROADCASTPACKETS_G_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXPACKETCOUNT_GB_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXPACKETCOUNT_GB_RgRd(MMC_TXPACKETCOUNT_GB_val);
+	sprintf(debugfs_buf, "MMC_TXPACKETCOUNT_GB       :%#x\n",
+		MMC_TXPACKETCOUNT_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXPACKETCOUNT_GB_fops = {
+	.read = MMC_TXPACKETCOUNT_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_TXOCTETCOUNT_GB_read(struct file *file,
+					char __user * userbuf, size_t count,
+					loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_TXOCTETCOUNT_GB_RgRd(MMC_TXOCTETCOUNT_GB_val);
+	sprintf(debugfs_buf, "MMC_TXOCTETCOUNT_GB        :%#x\n",
+		MMC_TXOCTETCOUNT_GB_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_TXOCTETCOUNT_GB_fops = {
+	.read = MMC_TXOCTETCOUNT_GB_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_IPC_INTR_RX_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_IPC_INTR_RX_RgRd(MMC_IPC_INTR_RX_val);
+	sprintf(debugfs_buf, "MMC_IPC_INTR_RX            :%#x\n",
+		MMC_IPC_INTR_RX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_IPC_INTR_RX_fops = {
+	.read = MMC_IPC_INTR_RX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_IPC_INTR_MASK_RX_read(struct file *file,
+					 char __user * userbuf, size_t count,
+					 loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_IPC_INTR_MASK_RX_RgRd(MMC_IPC_INTR_MASK_RX_val);
+	sprintf(debugfs_buf, "MMC_IPC_INTR_MASK_RX       :%#x\n",
+		MMC_IPC_INTR_MASK_RX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_IPC_INTR_MASK_RX_fops = {
+	.read = MMC_IPC_INTR_MASK_RX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_INTR_MASK_TX_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_INTR_MASK_TX_RgRd(MMC_INTR_MASK_TX_val);
+	sprintf(debugfs_buf, "MMC_INTR_MASK_TX           :%#x\n",
+		MMC_INTR_MASK_TX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_INTR_MASK_TX_fops = {
+	.read = MMC_INTR_MASK_TX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_INTR_MASK_RX_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_INTR_MASK_RX_RgRd(MMC_INTR_MASK_RX_val);
+	sprintf(debugfs_buf, "MMC_INTR_MASK_RX           :%#x\n",
+		MMC_INTR_MASK_RX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_INTR_MASK_RX_fops = {
+	.read = MMC_INTR_MASK_RX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_INTR_TX_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_INTR_TX_RgRd(MMC_INTR_TX_val);
+	sprintf(debugfs_buf, "MMC_INTR_TX                :%#x\n",
+		MMC_INTR_TX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_INTR_TX_fops = {
+	.read = MMC_INTR_TX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_INTR_RX_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_INTR_RX_RgRd(MMC_INTR_RX_val);
+	sprintf(debugfs_buf, "MMC_INTR_RX                :%#x\n",
+		MMC_INTR_RX_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_INTR_RX_fops = {
+	.read = MMC_INTR_RX_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MMC_CNTRL_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+
+	if (!pdata->hw_feat.mmc_sel) {
+		printk(KERN_ALERT
+		       "MMC Module not selected. Register cannot be read\n");
+		return -EINVAL;
+	}
+	MMC_CNTRL_RgRd(MMC_CNTRL_val);
+	sprintf(debugfs_buf, "MMC_CNTRL                  :%#x\n",
+		MMC_CNTRL_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MMC_CNTRL_fops = {
+	.read = MMC_CNTRL_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1LR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1LR_RgRd(MAC_MA1LR_val);
+	sprintf(debugfs_buf, "MAC_MA1LR                  :%#x\n",
+		MAC_MA1LR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1LR_fops = {
+	.read = MAC_MA1LR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA1HR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA1HR_RgRd(MAC_MA1HR_val);
+	sprintf(debugfs_buf, "MAC_MA1HR                  :%#x\n",
+		MAC_MA1HR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA1HR_fops = {
+	.read = MAC_MA1HR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA0LR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA0LR_RgRd(MAC_MA0LR_val);
+	sprintf(debugfs_buf, "MAC_MA0LR                  :%#x\n",
+		MAC_MA0LR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA0LR_fops = {
+	.read = MAC_MA0LR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MA0HR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MA0HR_RgRd(MAC_MA0HR_val);
+	sprintf(debugfs_buf, "MAC_MA0HR       :%#x\n", MAC_MA0HR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MA0HR_fops = {
+	.read = MAC_MA0HR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_GPIOR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_GPIOR_RgRd(MAC_GPIOR_val);
+	sprintf(debugfs_buf, "MAC_GPIOR       :%#x\n", MAC_GPIOR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_GPIOR_fops = {
+	.read = MAC_GPIOR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_GMIIDR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_GMIIDR_RgRd(MAC_GMIIDR_val);
+	sprintf(debugfs_buf, "MAC_GMIIDR      :%#x\n", MAC_GMIIDR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_GMIIDR_fops = {
+	.read = MAC_GMIIDR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_GMIIAR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_GMIIAR_RgRd(MAC_GMIIAR_val);
+	sprintf(debugfs_buf, "MAC_GMIIAR      :%#x\n", MAC_GMIIAR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_GMIIAR_fops = {
+	.read = MAC_GMIIAR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HFR2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HFR2_RgRd(MAC_HFR2_val);
+	sprintf(debugfs_buf, "MAC_HFR2        :%#x\n", MAC_HFR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HFR2_fops = {
+	.read = MAC_HFR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HFR1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HFR1_RgRd(MAC_HFR1_val);
+	sprintf(debugfs_buf, "MAC_HFR1        :%#x\n", MAC_HFR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HFR1_fops = {
+	.read = MAC_HFR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HFR0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HFR0_RgRd(MAC_HFR0_val);
+	sprintf(debugfs_buf, "MAC_HFR0        :%#x\n", MAC_HFR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HFR0_fops = {
+	.read = MAC_HFR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MDR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MDR_RgRd(MAC_MDR_val);
+	sprintf(debugfs_buf, "MAC_MDR         :%#x\n", MAC_MDR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MDR_fops = {
+	.read = MAC_MDR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_VR_read(struct file *file, char __user * userbuf,
+			   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_VR_RgRd(MAC_VR_val);
+	sprintf(debugfs_buf, "MAC_VR          :%#x\n", MAC_VR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_VR_fops = {
+	.read = MAC_VR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR7_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR7_RgRd(MAC_HTR7_val);
+	sprintf(debugfs_buf, "MAC_HTR7        :%#x\n", MAC_HTR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR7_fops = {
+	.read = MAC_HTR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR6_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR6_RgRd(MAC_HTR6_val);
+	sprintf(debugfs_buf, "MAC_HTR6        :%#x\n", MAC_HTR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR6_fops = {
+	.read = MAC_HTR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR5_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR5_RgRd(MAC_HTR5_val);
+	sprintf(debugfs_buf, "MAC_HTR5        :%#x\n", MAC_HTR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR5_fops = {
+	.read = MAC_HTR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR4_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR4_RgRd(MAC_HTR4_val);
+	sprintf(debugfs_buf, "MAC_HTR4        :%#x\n", MAC_HTR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR4_fops = {
+	.read = MAC_HTR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR3_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR3_RgRd(MAC_HTR3_val);
+	sprintf(debugfs_buf, "MAC_HTR3        :%#x\n", MAC_HTR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR3_fops = {
+	.read = MAC_HTR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR2_RgRd(MAC_HTR2_val);
+	sprintf(debugfs_buf, "MAC_HTR2        :%#x\n", MAC_HTR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR2_fops = {
+	.read = MAC_HTR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR1_RgRd(MAC_HTR1_val);
+	sprintf(debugfs_buf, "MAC_HTR1        :%#x\n", MAC_HTR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR1_fops = {
+	.read = MAC_HTR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_HTR0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_HTR0_RgRd(MAC_HTR0_val);
+	sprintf(debugfs_buf, "MAC_HTR0        :%#x\n", MAC_HTR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_HTR0_fops = {
+	.read = MAC_HTR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR7_RgRd(DMA_RIWTR7_val);
+	sprintf(debugfs_buf, "DMA_RIWTR7      :%#x\n", DMA_RIWTR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR7_fops = {
+	.read = DMA_RIWTR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR6_RgRd(DMA_RIWTR6_val);
+	sprintf(debugfs_buf, "DMA_RIWTR6      :%#x\n", DMA_RIWTR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR6_fops = {
+	.read = DMA_RIWTR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR5_RgRd(DMA_RIWTR5_val);
+	sprintf(debugfs_buf, "DMA_RIWTR5      :%#x\n", DMA_RIWTR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR5_fops = {
+	.read = DMA_RIWTR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR4_RgRd(DMA_RIWTR4_val);
+	sprintf(debugfs_buf, "DMA_RIWTR4      :%#x\n", DMA_RIWTR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR4_fops = {
+	.read = DMA_RIWTR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR3_RgRd(DMA_RIWTR3_val);
+	sprintf(debugfs_buf, "DMA_RIWTR3      :%#x\n", DMA_RIWTR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR3_fops = {
+	.read = DMA_RIWTR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR2_RgRd(DMA_RIWTR2_val);
+	sprintf(debugfs_buf, "DMA_RIWTR2      :%#x\n", DMA_RIWTR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR2_fops = {
+	.read = DMA_RIWTR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR1_RgRd(DMA_RIWTR1_val);
+	sprintf(debugfs_buf, "DMA_RIWTR1      :%#x\n", DMA_RIWTR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR1_fops = {
+	.read = DMA_RIWTR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RIWTR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RIWTR0_RgRd(DMA_RIWTR0_val);
+	sprintf(debugfs_buf, "DMA_RIWTR0      :%#x\n", DMA_RIWTR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RIWTR0_fops = {
+	.read = DMA_RIWTR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR7_RgRd(DMA_RDRLR7_val);
+	sprintf(debugfs_buf, "DMA_RDRLR7      :%#x\n", DMA_RDRLR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR7_fops = {
+	.read = DMA_RDRLR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR6_RgRd(DMA_RDRLR6_val);
+	sprintf(debugfs_buf, "DMA_RDRLR6      :%#x\n", DMA_RDRLR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR6_fops = {
+	.read = DMA_RDRLR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR5_RgRd(DMA_RDRLR5_val);
+	sprintf(debugfs_buf, "DMA_RDRLR5      :%#x\n", DMA_RDRLR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR5_fops = {
+	.read = DMA_RDRLR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR4_RgRd(DMA_RDRLR4_val);
+	sprintf(debugfs_buf, "DMA_RDRLR4      :%#x\n", DMA_RDRLR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR4_fops = {
+	.read = DMA_RDRLR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR3_RgRd(DMA_RDRLR3_val);
+	sprintf(debugfs_buf, "DMA_RDRLR3      :%#x\n", DMA_RDRLR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR3_fops = {
+	.read = DMA_RDRLR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR2_RgRd(DMA_RDRLR2_val);
+	sprintf(debugfs_buf, "DMA_RDRLR2      :%#x\n", DMA_RDRLR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR2_fops = {
+	.read = DMA_RDRLR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR1_RgRd(DMA_RDRLR1_val);
+	sprintf(debugfs_buf, "DMA_RDRLR1      :%#x\n", DMA_RDRLR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR1_fops = {
+	.read = DMA_RDRLR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDRLR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDRLR0_RgRd(DMA_RDRLR0_val);
+	sprintf(debugfs_buf, "DMA_RDRLR0      :%#x\n", DMA_RDRLR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDRLR0_fops = {
+	.read = DMA_RDRLR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR7_RgRd(DMA_TDRLR7_val);
+	sprintf(debugfs_buf, "DMA_TDRLR7      :%#x\n", DMA_TDRLR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR7_fops = {
+	.read = DMA_TDRLR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR6_RgRd(DMA_TDRLR6_val);
+	sprintf(debugfs_buf, "DMA_TDRLR6      :%#x\n", DMA_TDRLR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR6_fops = {
+	.read = DMA_TDRLR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR5_RgRd(DMA_TDRLR5_val);
+	sprintf(debugfs_buf, "DMA_TDRLR5      :%#x\n", DMA_TDRLR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR5_fops = {
+	.read = DMA_TDRLR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR4_RgRd(DMA_TDRLR4_val);
+	sprintf(debugfs_buf, "DMA_TDRLR4      :%#x\n", DMA_TDRLR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR4_fops = {
+	.read = DMA_TDRLR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR3_RgRd(DMA_TDRLR3_val);
+	sprintf(debugfs_buf, "DMA_TDRLR3      :%#x\n", DMA_TDRLR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR3_fops = {
+	.read = DMA_TDRLR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR2_RgRd(DMA_TDRLR2_val);
+	sprintf(debugfs_buf, "DMA_TDRLR2      :%#x\n", DMA_TDRLR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR2_fops = {
+	.read = DMA_TDRLR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR1_RgRd(DMA_TDRLR1_val);
+	sprintf(debugfs_buf, "DMA_TDRLR1      :%#x\n", DMA_TDRLR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR1_fops = {
+	.read = DMA_TDRLR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDRLR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDRLR0_RgRd(DMA_TDRLR0_val);
+	sprintf(debugfs_buf, "DMA_TDRLR0      :%#x\n", DMA_TDRLR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDRLR0_fops = {
+	.read = DMA_TDRLR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR7_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR7_RgRd(DMA_RDTP_RPDR7_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR7  :%#x\n", DMA_RDTP_RPDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR7_fops = {
+	.read = DMA_RDTP_RPDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR6_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR6_RgRd(DMA_RDTP_RPDR6_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR6  :%#x\n", DMA_RDTP_RPDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR6_fops = {
+	.read = DMA_RDTP_RPDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR5_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR5_RgRd(DMA_RDTP_RPDR5_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR5  :%#x\n", DMA_RDTP_RPDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR5_fops = {
+	.read = DMA_RDTP_RPDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR4_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR4_RgRd(DMA_RDTP_RPDR4_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR4  :%#x\n", DMA_RDTP_RPDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR4_fops = {
+	.read = DMA_RDTP_RPDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR3_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR3_RgRd(DMA_RDTP_RPDR3_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR3  :%#x\n", DMA_RDTP_RPDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR3_fops = {
+	.read = DMA_RDTP_RPDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR2_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR2_RgRd(DMA_RDTP_RPDR2_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR2  :%#x\n", DMA_RDTP_RPDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR2_fops = {
+	.read = DMA_RDTP_RPDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR1_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR1_RgRd(DMA_RDTP_RPDR1_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR1  :%#x\n", DMA_RDTP_RPDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR1_fops = {
+	.read = DMA_RDTP_RPDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDTP_RPDR0_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDTP_RPDR0_RgRd(DMA_RDTP_RPDR0_val);
+	sprintf(debugfs_buf, "DMA_RDTP_RPDR0  :%#x\n", DMA_RDTP_RPDR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDTP_RPDR0_fops = {
+	.read = DMA_RDTP_RPDR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR7_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR7_RgRd(DMA_TDTP_TPDR7_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR7  :%#x\n", DMA_TDTP_TPDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR7_fops = {
+	.read = DMA_TDTP_TPDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR6_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR6_RgRd(DMA_TDTP_TPDR6_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR6  :%#x\n", DMA_TDTP_TPDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR6_fops = {
+	.read = DMA_TDTP_TPDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR5_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR5_RgRd(DMA_TDTP_TPDR5_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR5  :%#x\n", DMA_TDTP_TPDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR5_fops = {
+	.read = DMA_TDTP_TPDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR4_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR4_RgRd(DMA_TDTP_TPDR4_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR4  :%#x\n", DMA_TDTP_TPDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR4_fops = {
+	.read = DMA_TDTP_TPDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR3_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR3_RgRd(DMA_TDTP_TPDR3_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR3  :%#x\n", DMA_TDTP_TPDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR3_fops = {
+	.read = DMA_TDTP_TPDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR2_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR2_RgRd(DMA_TDTP_TPDR2_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR2  :%#x\n", DMA_TDTP_TPDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR2_fops = {
+	.read = DMA_TDTP_TPDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR1_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR1_RgRd(DMA_TDTP_TPDR1_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR1  :%#x\n", DMA_TDTP_TPDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR1_fops = {
+	.read = DMA_TDTP_TPDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDTP_TPDR0_read(struct file *file, char __user * userbuf,
+				   size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDTP_TPDR0_RgRd(DMA_TDTP_TPDR0_val);
+	sprintf(debugfs_buf, "DMA_TDTP_TPDR0  :%#x\n", DMA_TDTP_TPDR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDTP_TPDR0_fops = {
+	.read = DMA_TDTP_TPDR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR7_RgRd(DMA_RDLAR7_val);
+	sprintf(debugfs_buf, "DMA_RDLAR7      :%#x\n", DMA_RDLAR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR7_fops = {
+	.read = DMA_RDLAR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR6_RgRd(DMA_RDLAR6_val);
+	sprintf(debugfs_buf, "DMA_RDLAR6      :%#x\n", DMA_RDLAR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR6_fops = {
+	.read = DMA_RDLAR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR5_RgRd(DMA_RDLAR5_val);
+	sprintf(debugfs_buf, "DMA_RDLAR5      :%#x\n", DMA_RDLAR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR5_fops = {
+	.read = DMA_RDLAR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR4_RgRd(DMA_RDLAR4_val);
+	sprintf(debugfs_buf, "DMA_RDLAR4      :%#x\n", DMA_RDLAR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR4_fops = {
+	.read = DMA_RDLAR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR3_RgRd(DMA_RDLAR3_val);
+	sprintf(debugfs_buf, "DMA_RDLAR3      :%#x\n", DMA_RDLAR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR3_fops = {
+	.read = DMA_RDLAR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR2_RgRd(DMA_RDLAR2_val);
+	sprintf(debugfs_buf, "DMA_RDLAR2      :%#x\n", DMA_RDLAR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR2_fops = {
+	.read = DMA_RDLAR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR1_RgRd(DMA_RDLAR1_val);
+	sprintf(debugfs_buf, "DMA_RDLAR1      :%#x\n", DMA_RDLAR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR1_fops = {
+	.read = DMA_RDLAR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RDLAR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RDLAR0_RgRd(DMA_RDLAR0_val);
+	sprintf(debugfs_buf, "DMA_RDLAR0      :%#x\n", DMA_RDLAR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RDLAR0_fops = {
+	.read = DMA_RDLAR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR7_RgRd(DMA_TDLAR7_val);
+	sprintf(debugfs_buf, "DMA_TDLAR7      :%#x\n", DMA_TDLAR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR7_fops = {
+	.read = DMA_TDLAR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR6_RgRd(DMA_TDLAR6_val);
+	sprintf(debugfs_buf, "DMA_TDLAR6      :%#x\n", DMA_TDLAR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR6_fops = {
+	.read = DMA_TDLAR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR5_RgRd(DMA_TDLAR5_val);
+	sprintf(debugfs_buf, "DMA_TDLAR5      :%#x\n", DMA_TDLAR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR5_fops = {
+	.read = DMA_TDLAR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR4_RgRd(DMA_TDLAR4_val);
+	sprintf(debugfs_buf, "DMA_TDLAR4      :%#x\n", DMA_TDLAR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR4_fops = {
+	.read = DMA_TDLAR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR3_RgRd(DMA_TDLAR3_val);
+	sprintf(debugfs_buf, "DMA_TDLAR3      :%#x\n", DMA_TDLAR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR3_fops = {
+	.read = DMA_TDLAR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR2_RgRd(DMA_TDLAR2_val);
+	sprintf(debugfs_buf, "DMA_TDLAR2      :%#x\n", DMA_TDLAR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR2_fops = {
+	.read = DMA_TDLAR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR1_RgRd(DMA_TDLAR1_val);
+	sprintf(debugfs_buf, "DMA_TDLAR1      :%#x\n", DMA_TDLAR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR1_fops = {
+	.read = DMA_TDLAR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TDLAR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TDLAR0_RgRd(DMA_TDLAR0_val);
+	sprintf(debugfs_buf, "DMA_TDLAR0      :%#x\n", DMA_TDLAR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TDLAR0_fops = {
+	.read = DMA_TDLAR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER7_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER7_RgRd(DMA_IER7_val);
+	sprintf(debugfs_buf, "DMA_IER7        :%#x\n", DMA_IER7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER7_fops = {
+	.read = DMA_IER7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER6_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER6_RgRd(DMA_IER6_val);
+	sprintf(debugfs_buf, "DMA_IER6        :%#x\n", DMA_IER6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER6_fops = {
+	.read = DMA_IER6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER5_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER5_RgRd(DMA_IER5_val);
+	sprintf(debugfs_buf, "DMA_IER5        :%#x\n", DMA_IER5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER5_fops = {
+	.read = DMA_IER5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER4_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER4_RgRd(DMA_IER4_val);
+	sprintf(debugfs_buf, "DMA_IER4        :%#x\n", DMA_IER4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER4_fops = {
+	.read = DMA_IER4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER3_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER3_RgRd(DMA_IER3_val);
+	sprintf(debugfs_buf, "DMA_IER3        :%#x\n", DMA_IER3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER3_fops = {
+	.read = DMA_IER3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER2_RgRd(DMA_IER2_val);
+	sprintf(debugfs_buf, "DMA_IER2        :%#x\n", DMA_IER2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER2_fops = {
+	.read = DMA_IER2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER1_RgRd(DMA_IER1_val);
+	sprintf(debugfs_buf, "DMA_IER1        :%#x\n", DMA_IER1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER1_fops = {
+	.read = DMA_IER1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_IER0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_IER0_RgRd(DMA_IER0_val);
+	sprintf(debugfs_buf, "DMA_IER0        :%#x\n", DMA_IER0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_IER0_fops = {
+	.read = DMA_IER0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_IMR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_IMR_RgRd(MAC_IMR_val);
+	sprintf(debugfs_buf, "MAC_IMR         :%#x\n", MAC_IMR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_IMR_fops = {
+	.read = MAC_IMR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_ISR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_ISR_RgRd(MAC_ISR_val);
+	sprintf(debugfs_buf, "MAC_ISR         :%#x\n", MAC_ISR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_ISR_fops = {
+	.read = MAC_ISR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_ISR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_ISR_RgRd(MTL_ISR_val);
+	sprintf(debugfs_buf, "MTL_ISR         :%#x\n", MTL_ISR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_ISR_fops = {
+	.read = MTL_ISR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR7_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR7_RgRd(DMA_SR7_val);
+	sprintf(debugfs_buf, "DMA_SR7         :%#x\n", DMA_SR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR7_fops = {
+	.read = DMA_SR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR6_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR6_RgRd(DMA_SR6_val);
+	sprintf(debugfs_buf, "DMA_SR6         :%#x\n", DMA_SR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR6_fops = {
+	.read = DMA_SR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR5_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR5_RgRd(DMA_SR5_val);
+	sprintf(debugfs_buf, "DMA_SR5         :%#x\n", DMA_SR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR5_fops = {
+	.read = DMA_SR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR4_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR4_RgRd(DMA_SR4_val);
+	sprintf(debugfs_buf, "DMA_SR4         :%#x\n", DMA_SR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR4_fops = {
+	.read = DMA_SR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR3_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR3_RgRd(DMA_SR3_val);
+	sprintf(debugfs_buf, "DMA_SR3         :%#x\n", DMA_SR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR3_fops = {
+	.read = DMA_SR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR2_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR2_RgRd(DMA_SR2_val);
+	sprintf(debugfs_buf, "DMA_SR2         :%#x\n", DMA_SR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR2_fops = {
+	.read = DMA_SR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR1_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR1_RgRd(DMA_SR1_val);
+	sprintf(debugfs_buf, "DMA_SR1         :%#x\n", DMA_SR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR1_fops = {
+	.read = DMA_SR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SR0_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SR0_RgRd(DMA_SR0_val);
+	sprintf(debugfs_buf, "DMA_SR0         :%#x\n", DMA_SR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SR0_fops = {
+	.read = DMA_SR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_ISR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_ISR_RgRd(DMA_ISR_val);
+	sprintf(debugfs_buf, "DMA_ISR         :%#x\n", DMA_ISR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_ISR_fops = {
+	.read = DMA_ISR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_DSR2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_DSR2_RgRd(DMA_DSR2_val);
+	sprintf(debugfs_buf, "DMA_DSR2                   :%#x\n", DMA_DSR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_DSR2_fops = {
+	.read = DMA_DSR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_DSR1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_DSR1_RgRd(DMA_DSR1_val);
+	sprintf(debugfs_buf, "DMA_DSR1                   :%#x\n", DMA_DSR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_DSR1_fops = {
+	.read = DMA_DSR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_DSR0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_DSR0_RgRd(DMA_DSR0_val);
+	sprintf(debugfs_buf, "DMA_DSR0                   :%#x\n", DMA_DSR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_DSR0_fops = {
+	.read = DMA_DSR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0RDR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0RDR_RgRd(MTL_Q0RDR_val);
+	sprintf(debugfs_buf, "MTL_Q0RDR       :%#x\n", MTL_Q0RDR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0RDR_fops = {
+	.read = MTL_Q0RDR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0ESR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0ESR_RgRd(MTL_Q0ESR_val);
+	sprintf(debugfs_buf, "MTL_Q0ESR       :%#x\n", MTL_Q0ESR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0ESR_fops = {
+	.read = MTL_Q0ESR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0TDR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0TDR_RgRd(MTL_Q0TDR_val);
+	sprintf(debugfs_buf, "MTL_Q0TDR       :%#x\n", MTL_Q0TDR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0TDR_fops = {
+	.read = MTL_Q0TDR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR7_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR7_RgRd(DMA_CHRBAR7_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR7     :%#x\n", DMA_CHRBAR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR7_fops = {
+	.read = DMA_CHRBAR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR6_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR6_RgRd(DMA_CHRBAR6_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR6     :%#x\n", DMA_CHRBAR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR6_fops = {
+	.read = DMA_CHRBAR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR5_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR5_RgRd(DMA_CHRBAR5_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR5     :%#x\n", DMA_CHRBAR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR5_fops = {
+	.read = DMA_CHRBAR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR4_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR4_RgRd(DMA_CHRBAR4_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR4     :%#x\n", DMA_CHRBAR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR4_fops = {
+	.read = DMA_CHRBAR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR3_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR3_RgRd(DMA_CHRBAR3_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR3     :%#x\n", DMA_CHRBAR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR3_fops = {
+	.read = DMA_CHRBAR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR2_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR2_RgRd(DMA_CHRBAR2_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR2     :%#x\n", DMA_CHRBAR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR2_fops = {
+	.read = DMA_CHRBAR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR1_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR1_RgRd(DMA_CHRBAR1_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR1     :%#x\n", DMA_CHRBAR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR1_fops = {
+	.read = DMA_CHRBAR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRBAR0_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRBAR0_RgRd(DMA_CHRBAR0_val);
+	sprintf(debugfs_buf, "DMA_CHRBAR0     :%#x\n", DMA_CHRBAR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRBAR0_fops = {
+	.read = DMA_CHRBAR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR7_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR7_RgRd(DMA_CHTBAR7_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR7     :%#x\n", DMA_CHTBAR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR7_fops = {
+	.read = DMA_CHTBAR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR6_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR6_RgRd(DMA_CHTBAR6_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR6     :%#x\n", DMA_CHTBAR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR6_fops = {
+	.read = DMA_CHTBAR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR5_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR5_RgRd(DMA_CHTBAR5_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR5     :%#x\n", DMA_CHTBAR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR5_fops = {
+	.read = DMA_CHTBAR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR4_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR4_RgRd(DMA_CHTBAR4_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR4     :%#x\n", DMA_CHTBAR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR4_fops = {
+	.read = DMA_CHTBAR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR3_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR3_RgRd(DMA_CHTBAR3_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR3     :%#x\n", DMA_CHTBAR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR3_fops = {
+	.read = DMA_CHTBAR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR2_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR2_RgRd(DMA_CHTBAR2_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR2     :%#x\n", DMA_CHTBAR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR2_fops = {
+	.read = DMA_CHTBAR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR1_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR1_RgRd(DMA_CHTBAR1_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR1     :%#x\n", DMA_CHTBAR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR1_fops = {
+	.read = DMA_CHTBAR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTBAR0_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTBAR0_RgRd(DMA_CHTBAR0_val);
+	sprintf(debugfs_buf, "DMA_CHTBAR0     :%#x\n", DMA_CHTBAR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTBAR0_fops = {
+	.read = DMA_CHTBAR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR7_RgRd(DMA_CHRDR7_val);
+	sprintf(debugfs_buf, "DMA_CHRDR7      :%#x\n", DMA_CHRDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR7_fops = {
+	.read = DMA_CHRDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR6_RgRd(DMA_CHRDR6_val);
+	sprintf(debugfs_buf, "DMA_CHRDR6      :%#x\n", DMA_CHRDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR6_fops = {
+	.read = DMA_CHRDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR5_RgRd(DMA_CHRDR5_val);
+	sprintf(debugfs_buf, "DMA_CHRDR5      :%#x\n", DMA_CHRDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR5_fops = {
+	.read = DMA_CHRDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR4_RgRd(DMA_CHRDR4_val);
+	sprintf(debugfs_buf, "DMA_CHRDR4      :%#x\n", DMA_CHRDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR4_fops = {
+	.read = DMA_CHRDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR3_RgRd(DMA_CHRDR3_val);
+	sprintf(debugfs_buf, "DMA_CHRDR3      :%#x\n", DMA_CHRDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR3_fops = {
+	.read = DMA_CHRDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR2_RgRd(DMA_CHRDR2_val);
+	sprintf(debugfs_buf, "DMA_CHRDR2      :%#x\n", DMA_CHRDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR2_fops = {
+	.read = DMA_CHRDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR1_RgRd(DMA_CHRDR1_val);
+	sprintf(debugfs_buf, "DMA_CHRDR1      :%#x\n", DMA_CHRDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR1_fops = {
+	.read = DMA_CHRDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHRDR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHRDR0_RgRd(DMA_CHRDR0_val);
+	sprintf(debugfs_buf, "DMA_CHRDR0      :%#x\n", DMA_CHRDR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHRDR0_fops = {
+	.read = DMA_CHRDR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR7_RgRd(DMA_CHTDR7_val);
+	sprintf(debugfs_buf, "DMA_CHTDR7      :%#x\n", DMA_CHTDR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR7_fops = {
+	.read = DMA_CHTDR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR6_RgRd(DMA_CHTDR6_val);
+	sprintf(debugfs_buf, "DMA_CHTDR6      :%#x\n", DMA_CHTDR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR6_fops = {
+	.read = DMA_CHTDR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR5_RgRd(DMA_CHTDR5_val);
+	sprintf(debugfs_buf, "DMA_CHTDR5      :%#x\n", DMA_CHTDR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR5_fops = {
+	.read = DMA_CHTDR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR4_RgRd(DMA_CHTDR4_val);
+	sprintf(debugfs_buf, "DMA_CHTDR4      :%#x\n", DMA_CHTDR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR4_fops = {
+	.read = DMA_CHTDR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR3_RgRd(DMA_CHTDR3_val);
+	sprintf(debugfs_buf, "DMA_CHTDR3      :%#x\n", DMA_CHTDR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR3_fops = {
+	.read = DMA_CHTDR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR2_RgRd(DMA_CHTDR2_val);
+	sprintf(debugfs_buf, "DMA_CHTDR2      :%#x\n", DMA_CHTDR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR2_fops = {
+	.read = DMA_CHTDR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR1_RgRd(DMA_CHTDR1_val);
+	sprintf(debugfs_buf, "DMA_CHTDR1      :%#x\n", DMA_CHTDR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR1_fops = {
+	.read = DMA_CHTDR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CHTDR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CHTDR0_RgRd(DMA_CHTDR0_val);
+	sprintf(debugfs_buf, "DMA_CHTDR0      :%#x\n", DMA_CHTDR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CHTDR0_fops = {
+	.read = DMA_CHTDR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR7_RgRd(DMA_SFCSR7_val);
+	sprintf(debugfs_buf, "DMA_SFCSR7      :%#x\n", DMA_SFCSR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR7_fops = {
+	.read = DMA_SFCSR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR6_RgRd(DMA_SFCSR6_val);
+	sprintf(debugfs_buf, "DMA_SFCSR6      :%#x\n", DMA_SFCSR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR6_fops = {
+	.read = DMA_SFCSR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR5_RgRd(DMA_SFCSR5_val);
+	sprintf(debugfs_buf, "DMA_SFCSR5      :%#x\n", DMA_SFCSR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR5_fops = {
+	.read = DMA_SFCSR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR4_RgRd(DMA_SFCSR4_val);
+	sprintf(debugfs_buf, "DMA_SFCSR4      :%#x\n", DMA_SFCSR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR4_fops = {
+	.read = DMA_SFCSR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR3_RgRd(DMA_SFCSR3_val);
+	sprintf(debugfs_buf, "DMA_SFCSR3      :%#x\n", DMA_SFCSR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR3_fops = {
+	.read = DMA_SFCSR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR2_RgRd(DMA_SFCSR2_val);
+	sprintf(debugfs_buf, "DMA_SFCSR2      :%#x\n", DMA_SFCSR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR2_fops = {
+	.read = DMA_SFCSR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR1_RgRd(DMA_SFCSR1_val);
+	sprintf(debugfs_buf, "DMA_SFCSR1      :%#x\n", DMA_SFCSR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR1_fops = {
+	.read = DMA_SFCSR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SFCSR0_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SFCSR0_RgRd(DMA_SFCSR0_val);
+	sprintf(debugfs_buf, "DMA_SFCSR0      :%#x\n", DMA_SFCSR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SFCSR0_fops = {
+	.read = DMA_SFCSR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_IVLANTIRR_read(struct file *file, char __user * userbuf,
+				  size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_IVLANTIRR_RgRd(MAC_IVLANTIRR_val);
+	sprintf(debugfs_buf, "MAC_IVLANTIRR              :%#x\n",
+		MAC_IVLANTIRR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_IVLANTIRR_fops = {
+	.read = MAC_IVLANTIRR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_VLANTIRR_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_VLANTIRR_RgRd(MAC_VLANTIRR_val);
+	sprintf(debugfs_buf, "MAC_VLANTIRR               :%#x\n",
+		MAC_VLANTIRR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_VLANTIRR_fops = {
+	.read = MAC_VLANTIRR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_VLANHTR_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_VLANHTR_RgRd(MAC_VLANHTR_val);
+	sprintf(debugfs_buf, "MAC_VLANHTR                :%#x\n",
+		MAC_VLANHTR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_VLANHTR_fops = {
+	.read = MAC_VLANHTR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_VLANTR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_VLANTR_RgRd(MAC_VLANTR_val);
+	sprintf(debugfs_buf, "MAC_VLANTR                 :%#x\n",
+		MAC_VLANTR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_VLANTR_fops = {
+	.read = MAC_VLANTR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_SBUS_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_SBUS_RgRd(DMA_SBUS_val);
+	sprintf(debugfs_buf, "DMA_SBUS                   :%#x\n", DMA_SBUS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_SBUS_fops = {
+	.read = DMA_SBUS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_BMR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_BMR_RgRd(DMA_BMR_val);
+	sprintf(debugfs_buf, "DMA_BMR                    :%#x\n", DMA_BMR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_BMR_fops = {
+	.read = DMA_BMR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0RCR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0RCR_RgRd(MTL_Q0RCR_val);
+	sprintf(debugfs_buf, "MTL_Q0RCR       :%#x\n", MTL_Q0RCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0RCR_fops = {
+	.read = MTL_Q0RCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0OCR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0OCR_RgRd(MTL_Q0OCR_val);
+	sprintf(debugfs_buf, "MTL_Q0OCR       :%#x\n", MTL_Q0OCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0OCR_fops = {
+	.read = MTL_Q0OCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0ROMR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0ROMR_RgRd(MTL_Q0ROMR_val);
+	sprintf(debugfs_buf, "MTL_Q0ROMR      :%#x\n", MTL_Q0ROMR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0ROMR_fops = {
+	.read = MTL_Q0ROMR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0QR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0QR_RgRd(MTL_Q0QR_val);
+	sprintf(debugfs_buf, "MTL_Q0QR        :%#x\n", MTL_Q0QR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0QR_fops = {
+	.read = MTL_Q0QR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0ECR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0ECR_RgRd(MTL_Q0ECR_val);
+	sprintf(debugfs_buf, "MTL_Q0ECR       :%#x\n", MTL_Q0ECR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0ECR_fops = {
+	.read = MTL_Q0ECR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0UCR_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0UCR_RgRd(MTL_Q0UCR_val);
+	sprintf(debugfs_buf, "MTL_Q0UCR       :%#x\n", MTL_Q0UCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0UCR_fops = {
+	.read = MTL_Q0UCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_Q0TOMR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_Q0TOMR_RgRd(MTL_Q0TOMR_val);
+	sprintf(debugfs_buf, "MTL_Q0TOMR      :%#x\n", MTL_Q0TOMR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_Q0TOMR_fops = {
+	.read = MTL_Q0TOMR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_RQDCM1R_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_RQDCM1R_RgRd(MTL_RQDCM1R_val);
+	sprintf(debugfs_buf, "MTL_RQDCM1R     :%#x\n", MTL_RQDCM1R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_RQDCM1R_fops = {
+	.read = MTL_RQDCM1R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_RQDCM0R_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_RQDCM0R_RgRd(MTL_RQDCM0R_val);
+	sprintf(debugfs_buf, "MTL_RQDCM0R     :%#x\n", MTL_RQDCM0R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_RQDCM0R_fops = {
+	.read = MTL_RQDCM0R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_FDDR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_FDDR_RgRd(MTL_FDDR_val);
+	sprintf(debugfs_buf, "MTL_FDDR        :%#x\n", MTL_FDDR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_FDDR_fops = {
+	.read = MTL_FDDR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_FDACS_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_FDACS_RgRd(MTL_FDACS_val);
+	sprintf(debugfs_buf, "MTL_FDACS       :%#x\n", MTL_FDACS_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_FDACS_fops = {
+	.read = MTL_FDACS_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MTL_OMR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MTL_OMR_RgRd(MTL_OMR_val);
+	sprintf(debugfs_buf, "MTL_OMR         :%#x\n", MTL_OMR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MTL_OMR_fops = {
+	.read = MTL_OMR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RQC3R_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RQC3R_RgRd(MAC_RQC3R_val);
+	sprintf(debugfs_buf, "MAC_RQC3R       :%#x\n", MAC_RQC3R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RQC3R_fops = {
+	.read = MAC_RQC3R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RQC2R_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RQC2R_RgRd(MAC_RQC2R_val);
+	sprintf(debugfs_buf, "MAC_RQC2R       :%#x\n", MAC_RQC2R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RQC2R_fops = {
+	.read = MAC_RQC2R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RQC1R_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RQC1R_RgRd(MAC_RQC1R_val);
+	sprintf(debugfs_buf, "MAC_RQC1R       :%#x\n", MAC_RQC1R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RQC1R_fops = {
+	.read = MAC_RQC1R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RQC0R_read(struct file *file, char __user * userbuf,
+			      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RQC0R_RgRd(MAC_RQC0R_val);
+	sprintf(debugfs_buf, "MAC_RQC0R       :%#x\n", MAC_RQC0R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RQC0R_fops = {
+	.read = MAC_RQC0R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TQPM1R_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TQPM1R_RgRd(MAC_TQPM1R_val);
+	sprintf(debugfs_buf, "MAC_TQPM1R      :%#x\n", MAC_TQPM1R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TQPM1R_fops = {
+	.read = MAC_TQPM1R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_TQPM0R_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_TQPM0R_RgRd(MAC_TQPM0R_val);
+	sprintf(debugfs_buf, "MAC_TQPM0R      :%#x\n", MAC_TQPM0R_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_TQPM0R_fops = {
+	.read = MAC_TQPM0R_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_RFCR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_RFCR_RgRd(MAC_RFCR_val);
+	sprintf(debugfs_buf, "MAC_RFCR        :%#x\n", MAC_RFCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_RFCR_fops = {
+	.read = MAC_RFCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR7_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR7_RgRd(MAC_QTFCR7_val);
+	sprintf(debugfs_buf, "MAC_QTFCR7      :%#x\n", MAC_QTFCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR7_fops = {
+	.read = MAC_QTFCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR6_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR6_RgRd(MAC_QTFCR6_val);
+	sprintf(debugfs_buf, "MAC_QTFCR6      :%#x\n", MAC_QTFCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR6_fops = {
+	.read = MAC_QTFCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR5_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR5_RgRd(MAC_QTFCR5_val);
+	sprintf(debugfs_buf, "MAC_QTFCR5      :%#x\n", MAC_QTFCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR5_fops = {
+	.read = MAC_QTFCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR4_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR4_RgRd(MAC_QTFCR4_val);
+	sprintf(debugfs_buf, "MAC_QTFCR4      :%#x\n", MAC_QTFCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR4_fops = {
+	.read = MAC_QTFCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR3_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR3_RgRd(MAC_QTFCR3_val);
+	sprintf(debugfs_buf, "MAC_QTFCR3      :%#x\n", MAC_QTFCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR3_fops = {
+	.read = MAC_QTFCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR2_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR2_RgRd(MAC_QTFCR2_val);
+	sprintf(debugfs_buf, "MAC_QTFCR2      :%#x\n", MAC_QTFCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR2_fops = {
+	.read = MAC_QTFCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_QTFCR1_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_QTFCR1_RgRd(MAC_QTFCR1_val);
+	sprintf(debugfs_buf, "MAC_QTFCR1      :%#x\n", MAC_QTFCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_QTFCR1_fops = {
+	.read = MAC_QTFCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_Q0TFCR_read(struct file *file, char __user * userbuf,
+			       size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_Q0TFCR_RgRd(MAC_Q0TFCR_val);
+	sprintf(debugfs_buf, "MAC_Q0TFCR      :%#x\n", MAC_Q0TFCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_Q0TFCR_fops = {
+	.read = MAC_Q0TFCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR7_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR7_RgRd(DMA_AXI4CR7_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR7     :%#x\n", DMA_AXI4CR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR7_fops = {
+	.read = DMA_AXI4CR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR6_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR6_RgRd(DMA_AXI4CR6_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR6     :%#x\n", DMA_AXI4CR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR6_fops = {
+	.read = DMA_AXI4CR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR5_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR5_RgRd(DMA_AXI4CR5_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR5     :%#x\n", DMA_AXI4CR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR5_fops = {
+	.read = DMA_AXI4CR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR4_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR4_RgRd(DMA_AXI4CR4_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR4     :%#x\n", DMA_AXI4CR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR4_fops = {
+	.read = DMA_AXI4CR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR3_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR3_RgRd(DMA_AXI4CR3_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR3     :%#x\n", DMA_AXI4CR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR3_fops = {
+	.read = DMA_AXI4CR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR2_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR2_RgRd(DMA_AXI4CR2_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR2     :%#x\n", DMA_AXI4CR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR2_fops = {
+	.read = DMA_AXI4CR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR1_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR1_RgRd(DMA_AXI4CR1_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR1     :%#x\n", DMA_AXI4CR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR1_fops = {
+	.read = DMA_AXI4CR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_AXI4CR0_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_AXI4CR0_RgRd(DMA_AXI4CR0_val);
+	sprintf(debugfs_buf, "DMA_AXI4CR0     :%#x\n", DMA_AXI4CR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_AXI4CR0_fops = {
+	.read = DMA_AXI4CR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR7_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR7_RgRd(DMA_RCR7_val);
+	sprintf(debugfs_buf, "DMA_RCR7        :%#x\n", DMA_RCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR7_fops = {
+	.read = DMA_RCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR6_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR6_RgRd(DMA_RCR6_val);
+	sprintf(debugfs_buf, "DMA_RCR6        :%#x\n", DMA_RCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR6_fops = {
+	.read = DMA_RCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR5_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR5_RgRd(DMA_RCR5_val);
+	sprintf(debugfs_buf, "DMA_RCR5        :%#x\n", DMA_RCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR5_fops = {
+	.read = DMA_RCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR4_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR4_RgRd(DMA_RCR4_val);
+	sprintf(debugfs_buf, "DMA_RCR4        :%#x\n", DMA_RCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR4_fops = {
+	.read = DMA_RCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR3_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR3_RgRd(DMA_RCR3_val);
+	sprintf(debugfs_buf, "DMA_RCR3        :%#x\n", DMA_RCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR3_fops = {
+	.read = DMA_RCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR2_RgRd(DMA_RCR2_val);
+	sprintf(debugfs_buf, "DMA_RCR2        :%#x\n", DMA_RCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR2_fops = {
+	.read = DMA_RCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR1_RgRd(DMA_RCR1_val);
+	sprintf(debugfs_buf, "DMA_RCR1        :%#x\n", DMA_RCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR1_fops = {
+	.read = DMA_RCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_RCR0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_RCR0_RgRd(DMA_RCR0_val);
+	sprintf(debugfs_buf, "DMA_RCR0        :%#x\n", DMA_RCR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_RCR0_fops = {
+	.read = DMA_RCR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR7_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR7_RgRd(DMA_TCR7_val);
+	sprintf(debugfs_buf, "DMA_TCR7        :%#x\n", DMA_TCR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR7_fops = {
+	.read = DMA_TCR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR6_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR6_RgRd(DMA_TCR6_val);
+	sprintf(debugfs_buf, "DMA_TCR6        :%#x\n", DMA_TCR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR6_fops = {
+	.read = DMA_TCR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR5_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR5_RgRd(DMA_TCR5_val);
+	sprintf(debugfs_buf, "DMA_TCR5        :%#x\n", DMA_TCR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR5_fops = {
+	.read = DMA_TCR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR4_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR4_RgRd(DMA_TCR4_val);
+	sprintf(debugfs_buf, "DMA_TCR4        :%#x\n", DMA_TCR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR4_fops = {
+	.read = DMA_TCR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR3_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR3_RgRd(DMA_TCR3_val);
+	sprintf(debugfs_buf, "DMA_TCR3        :%#x\n", DMA_TCR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR3_fops = {
+	.read = DMA_TCR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR2_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR2_RgRd(DMA_TCR2_val);
+	sprintf(debugfs_buf, "DMA_TCR2        :%#x\n", DMA_TCR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR2_fops = {
+	.read = DMA_TCR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR1_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR1_RgRd(DMA_TCR1_val);
+	sprintf(debugfs_buf, "DMA_TCR1        :%#x\n", DMA_TCR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR1_fops = {
+	.read = DMA_TCR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_TCR0_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_TCR0_RgRd(DMA_TCR0_val);
+	sprintf(debugfs_buf, "DMA_TCR0        :%#x\n", DMA_TCR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_TCR0_fops = {
+	.read = DMA_TCR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR7_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR7_RgRd(DMA_CR7_val);
+	sprintf(debugfs_buf, "DMA_CR7         :%#x\n", DMA_CR7_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR7_fops = {
+	.read = DMA_CR7_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR6_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR6_RgRd(DMA_CR6_val);
+	sprintf(debugfs_buf, "DMA_CR6         :%#x\n", DMA_CR6_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR6_fops = {
+	.read = DMA_CR6_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR5_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR5_RgRd(DMA_CR5_val);
+	sprintf(debugfs_buf, "DMA_CR5         :%#x\n", DMA_CR5_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR5_fops = {
+	.read = DMA_CR5_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR4_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR4_RgRd(DMA_CR4_val);
+	sprintf(debugfs_buf, "DMA_CR4         :%#x\n", DMA_CR4_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR4_fops = {
+	.read = DMA_CR4_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR3_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR3_RgRd(DMA_CR3_val);
+	sprintf(debugfs_buf, "DMA_CR3         :%#x\n", DMA_CR3_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR3_fops = {
+	.read = DMA_CR3_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR2_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR2_RgRd(DMA_CR2_val);
+	sprintf(debugfs_buf, "DMA_CR2         :%#x\n", DMA_CR2_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR2_fops = {
+	.read = DMA_CR2_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR1_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR1_RgRd(DMA_CR1_val);
+	sprintf(debugfs_buf, "DMA_CR1         :%#x\n", DMA_CR1_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR1_fops = {
+	.read = DMA_CR1_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t DMA_CR0_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DMA_CR0_RgRd(DMA_CR0_val);
+	sprintf(debugfs_buf, "DMA_CR0         :%#x\n", DMA_CR0_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations DMA_CR0_fops = {
+	.read = DMA_CR0_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_WTR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_WTR_RgRd(MAC_WTR_val);
+	sprintf(debugfs_buf, "MAC_WTR         :%#x\n", MAC_WTR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_WTR_fops = {
+	.read = MAC_WTR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MPFR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MPFR_RgRd(MAC_MPFR_val);
+	sprintf(debugfs_buf, "MAC_MPFR        :%#x\n", MAC_MPFR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MPFR_fops = {
+	.read = MAC_MPFR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MECR_read(struct file *file, char __user * userbuf,
+			     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MECR_RgRd(MAC_MECR_val);
+	sprintf(debugfs_buf, "MAC_MECR        :%#x\n", MAC_MECR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MECR_fops = {
+	.read = MAC_MECR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MAC_MCR_read(struct file *file, char __user * userbuf,
+			    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	MAC_MCR_RgRd(MAC_MCR_val);
+	sprintf(debugfs_buf, "MAC_MCR         :%#x\n", MAC_MCR_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MAC_MCR_fops = {
+	.read = MAC_MCR_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+/* For MII/GMII registers */
+static ssize_t MII_BMCR_REG_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMCR,
+				     &MII_BMCR_REG_val);
+	sprintf(debugfs_buf,
+		"Phy Control Reg(Basic Mode Control Reg)      :%#x\n",
+		MII_BMCR_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_BMCR_REG_fops = {
+	.read = MII_BMCR_REG_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MII_BMSR_REG_read(struct file *file, char __user * userbuf,
+				 size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMSR,
+				     &MII_BMSR_REG_val);
+	sprintf(debugfs_buf,
+		"Phy Status Reg(Basic Mode Status Reg)        :%#x\n",
+		MII_BMSR_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_BMSR_REG_fops = {
+	.read = MII_BMSR_REG_read,
+};
+
+static ssize_t MII_PHYSID1_REG_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID1,
+				     &MII_PHYSID1_REG_val);
+	sprintf(debugfs_buf,
+		"Phy Id (PHYS ID 1)                           :%#x\n",
+		MII_PHYSID1_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_PHYSID1_REG_fops = {
+	.read = MII_PHYSID1_REG_read,
+};
+
+static ssize_t MII_PHYSID2_REG_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID2,
+				     &MII_PHYSID2_REG_val);
+	sprintf(debugfs_buf,
+		"Phy Id (PHYS ID 2)                           :%#x\n",
+		MII_PHYSID2_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_PHYSID2_REG_fops = {
+	.read = MII_PHYSID2_REG_read,
+};
+
+static ssize_t MII_ADVERTISE_REG_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ADVERTISE,
+				     &MII_ADVERTISE_REG_val);
+	sprintf(debugfs_buf,
+		"Auto-nego Adv (Advertisement Control Reg)    :%#x\n",
+		MII_ADVERTISE_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_ADVERTISE_REG_fops = {
+	.read = MII_ADVERTISE_REG_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MII_LPA_REG_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_LPA,
+				     &MII_LPA_REG_val);
+	sprintf(debugfs_buf,
+		"Auto-nego Lap (Link Partner Ability Reg)     :%#x\n",
+		MII_LPA_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_LPA_REG_fops = {
+	.read = MII_LPA_REG_read,
+};
+
+static ssize_t MII_EXPANSION_REG_read(struct file *file, char __user * userbuf,
+				      size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_EXPANSION,
+				     &MII_EXPANSION_REG_val);
+	sprintf(debugfs_buf,
+		"Auto-nego Exp (Extension Reg)                :%#x\n",
+		MII_EXPANSION_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_EXPANSION_REG_fops = {
+	.read = MII_EXPANSION_REG_read,
+};
+
+static ssize_t AUTO_NEGO_NP_REG_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+				     DWC_ETH_QOS_AUTO_NEGO_NP,
+				     &AUTO_NEGO_NP_REG_val);
+	sprintf(debugfs_buf,
+		"Auto-nego Np                                 :%#x\n",
+		AUTO_NEGO_NP_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations AUTO_NEGO_NP_REG_fops = {
+	.read = AUTO_NEGO_NP_REG_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MII_ESTATUS_REG_read(struct file *file, char __user * userbuf,
+				    size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ESTATUS,
+				     &MII_ESTATUS_REG_val);
+	sprintf(debugfs_buf,
+		"Extended Status Reg                          :%#x\n",
+		MII_ESTATUS_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_ESTATUS_REG_fops = {
+	.read = MII_ESTATUS_REG_read,
+};
+
+static ssize_t MII_CTRL1000_REG_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_CTRL1000,
+				     &MII_CTRL1000_REG_val);
+	sprintf(debugfs_buf,
+		"1000 Ctl Reg (1000BASE-T Control Reg)        :%#x\n",
+		MII_CTRL1000_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_CTRL1000_REG_fops = {
+	.read = MII_CTRL1000_REG_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t MII_STAT1000_REG_read(struct file *file, char __user * userbuf,
+				     size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_STAT1000,
+				     &MII_STAT1000_REG_val);
+	sprintf(debugfs_buf,
+		"1000 Sts Reg (1000BASE-T Status)             :%#x\n",
+		MII_STAT1000_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations MII_STAT1000_REG_fops = {
+	.read = MII_STAT1000_REG_read,
+};
+
+static ssize_t PHY_CTL_REG_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_CTL,
+				     &PHY_CTL_REG_val);
+	sprintf(debugfs_buf,
+		"PHY Specific Ctl Reg                         :%#x\n",
+		PHY_CTL_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations PHY_CTL_REG_fops = {
+	.read = PHY_CTL_REG_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t PHY_STS_REG_read(struct file *file, char __user * userbuf,
+				size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_STS,
+				     &PHY_STS_REG_val);
+	sprintf(debugfs_buf,
+		"PHY Specific Sts Reg                         :%#x\n",
+		PHY_STS_REG_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations PHY_STS_REG_fops = {
+	.read = PHY_STS_REG_read,
+};
+
+static ssize_t feature_drop_tx_pktburstcnt_read(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	sprintf(debugfs_buf, "feature_drop_tx_pktburstcnt             :%#x\n",
+		feature_drop_tx_pktburstcnt_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations feature_drop_tx_pktburstcnt_fops = {
+	.read = feature_drop_tx_pktburstcnt_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t qInx_read(struct file *file,
+			 char __user * userbuf, size_t count, loff_t * ppos)
+{
+	ssize_t ret;
+	sprintf(debugfs_buf, "qInx             :%#x\n", qInx_val);
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debugfs_buf,
+				    strlen(debugfs_buf));
+	return ret;
+}
+
+static const struct file_operations qInx_fops = {
+	.read = qInx_read,
+	.write = DWC_ETH_QOS_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read0(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read0\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num)
+			, pRX_NORMAL_DESC[desc_num].RDES3,
+			pRX_NORMAL_DESC[desc_num].RDES2,
+			pRX_NORMAL_DESC[desc_num].RDES1,
+			pRX_NORMAL_DESC[desc_num].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read0\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops0 = {
+	.read = RX_NORMAL_DESC_descriptor_read0,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read1(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read1\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 20)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 20)
+			, pRX_NORMAL_DESC[desc_num + 20].RDES3,
+			pRX_NORMAL_DESC[desc_num + 20].RDES2,
+			pRX_NORMAL_DESC[desc_num + 20].RDES1,
+			pRX_NORMAL_DESC[desc_num + 20].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read1\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops1 = {
+	.read = RX_NORMAL_DESC_descriptor_read1,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read2(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read2\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 40)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 40)
+			, pRX_NORMAL_DESC[desc_num + 40].RDES3,
+			pRX_NORMAL_DESC[desc_num + 40].RDES2,
+			pRX_NORMAL_DESC[desc_num + 40].RDES1,
+			pRX_NORMAL_DESC[desc_num + 40].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read2\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops2 = {
+	.read = RX_NORMAL_DESC_descriptor_read2,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read3(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read3\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 60)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 60)
+			, pRX_NORMAL_DESC[desc_num + 60].RDES3,
+			pRX_NORMAL_DESC[desc_num + 60].RDES2,
+			pRX_NORMAL_DESC[desc_num + 60].RDES1,
+			pRX_NORMAL_DESC[desc_num + 60].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read3\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops3 = {
+	.read = RX_NORMAL_DESC_descriptor_read3,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read4(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read4\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 80)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 80)
+			, pRX_NORMAL_DESC[desc_num + 80].RDES3,
+			pRX_NORMAL_DESC[desc_num + 80].RDES2,
+			pRX_NORMAL_DESC[desc_num + 80].RDES1,
+			pRX_NORMAL_DESC[desc_num + 80].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read4\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops4 = {
+	.read = RX_NORMAL_DESC_descriptor_read4,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read5(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read5\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 100)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 100)
+			, pRX_NORMAL_DESC[desc_num + 100].RDES3,
+			pRX_NORMAL_DESC[desc_num + 100].RDES2,
+			pRX_NORMAL_DESC[desc_num + 100].RDES1,
+			pRX_NORMAL_DESC[desc_num + 100].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read5\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops5 = {
+	.read = RX_NORMAL_DESC_descriptor_read5,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read6(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read6\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 120)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 120)
+			, pRX_NORMAL_DESC[desc_num + 120].RDES3,
+			pRX_NORMAL_DESC[desc_num + 120].RDES2,
+			pRX_NORMAL_DESC[desc_num + 120].RDES1,
+			pRX_NORMAL_DESC[desc_num + 120].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read6\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops6 = {
+	.read = RX_NORMAL_DESC_descriptor_read6,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read7(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read7\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 140)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 140)
+			, pRX_NORMAL_DESC[desc_num + 140].RDES3,
+			pRX_NORMAL_DESC[desc_num + 140].RDES2,
+			pRX_NORMAL_DESC[desc_num + 140].RDES1,
+			pRX_NORMAL_DESC[desc_num + 140].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read7\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops7 = {
+	.read = RX_NORMAL_DESC_descriptor_read7,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read8(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read8\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 160)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 160)
+			, pRX_NORMAL_DESC[desc_num + 160].RDES3,
+			pRX_NORMAL_DESC[desc_num + 160].RDES2,
+			pRX_NORMAL_DESC[desc_num + 160].RDES1,
+			pRX_NORMAL_DESC[desc_num + 160].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read8\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops8 = {
+	.read = RX_NORMAL_DESC_descriptor_read8,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read9(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read9\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 180)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 180)
+			, pRX_NORMAL_DESC[desc_num + 180].RDES3,
+			pRX_NORMAL_DESC[desc_num + 180].RDES2,
+			pRX_NORMAL_DESC[desc_num + 180].RDES1,
+			pRX_NORMAL_DESC[desc_num + 180].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read9\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops9 = {
+	.read = RX_NORMAL_DESC_descriptor_read9,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read10(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read10\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 200)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 200)
+			, pRX_NORMAL_DESC[desc_num + 200].RDES3,
+			pRX_NORMAL_DESC[desc_num + 200].RDES2,
+			pRX_NORMAL_DESC[desc_num + 200].RDES1,
+			pRX_NORMAL_DESC[desc_num + 200].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read10\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops10 = {
+	.read = RX_NORMAL_DESC_descriptor_read10,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read11(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read11\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 220)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 220)
+			, pRX_NORMAL_DESC[desc_num + 220].RDES3,
+			pRX_NORMAL_DESC[desc_num + 220].RDES2,
+			pRX_NORMAL_DESC[desc_num + 220].RDES1,
+			pRX_NORMAL_DESC[desc_num + 220].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read11\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops11 = {
+	.read = RX_NORMAL_DESC_descriptor_read11,
+	.write = descriptor_write,
+};
+
+static ssize_t RX_NORMAL_DESC_descriptor_read12(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_RX_NORMAL_DESC *pRX_NORMAL_DESC = GET_RX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> RX_NORMAL_DESC_descriptor_read12\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(9952, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 16; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"RX_NORMAL_DESC.RDES3             :%x\n"
+			"RX_NORMAL_DESC.RDES2             :%x\n"
+			"RX_NORMAL_DESC.RDES1             :%x\n"
+			"RX_NORMAL_DESC.RDES0             :%x\n",
+			qInx_val, (int)(desc_num + 240)
+			, (ULONG) GET_RX_DESC_DMA_ADDR(qInx_val, desc_num + 240)
+			, pRX_NORMAL_DESC[desc_num + 240].RDES3,
+			pRX_NORMAL_DESC[desc_num + 240].RDES2,
+			pRX_NORMAL_DESC[desc_num + 240].RDES1,
+			pRX_NORMAL_DESC[desc_num + 240].RDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- RX_NORMAL_DESC_descriptor_read12\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_desc_fops12 = {
+	.read = RX_NORMAL_DESC_descriptor_read12,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read0(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read0\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num)
+			, pTX_NORMAL_DESC[desc_num].TDES3,
+			pTX_NORMAL_DESC[desc_num].TDES2,
+			pTX_NORMAL_DESC[desc_num].TDES1,
+			pTX_NORMAL_DESC[desc_num].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read0\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops0 = {
+	.read = TX_NORMAL_DESC_descriptor_read0,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read1(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read1\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 20)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 20)
+			, pTX_NORMAL_DESC[desc_num + 20].TDES3,
+			pTX_NORMAL_DESC[desc_num + 20].TDES2,
+			pTX_NORMAL_DESC[desc_num + 20].TDES1,
+			pTX_NORMAL_DESC[desc_num + 20].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read1\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops1 = {
+	.read = TX_NORMAL_DESC_descriptor_read1,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read2(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read2\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 40)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 40)
+			, pTX_NORMAL_DESC[desc_num + 40].TDES3,
+			pTX_NORMAL_DESC[desc_num + 40].TDES2,
+			pTX_NORMAL_DESC[desc_num + 40].TDES1,
+			pTX_NORMAL_DESC[desc_num + 40].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read2\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops2 = {
+	.read = TX_NORMAL_DESC_descriptor_read2,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read3(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read3\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 60)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 60)
+			, pTX_NORMAL_DESC[desc_num + 60].TDES3,
+			pTX_NORMAL_DESC[desc_num + 60].TDES2,
+			pTX_NORMAL_DESC[desc_num + 60].TDES1,
+			pTX_NORMAL_DESC[desc_num + 60].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read3\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops3 = {
+	.read = TX_NORMAL_DESC_descriptor_read3,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read4(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read4\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 80)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 80)
+			, pTX_NORMAL_DESC[desc_num + 80].TDES3,
+			pTX_NORMAL_DESC[desc_num + 80].TDES2,
+			pTX_NORMAL_DESC[desc_num + 80].TDES1,
+			pTX_NORMAL_DESC[desc_num + 80].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read4\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops4 = {
+	.read = TX_NORMAL_DESC_descriptor_read4,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read5(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read5\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 100)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 100)
+			, pTX_NORMAL_DESC[desc_num + 100].TDES3,
+			pTX_NORMAL_DESC[desc_num + 100].TDES2,
+			pTX_NORMAL_DESC[desc_num + 100].TDES1,
+			pTX_NORMAL_DESC[desc_num + 100].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read5\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops5 = {
+	.read = TX_NORMAL_DESC_descriptor_read5,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read6(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read6\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 120)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 120)
+			, pTX_NORMAL_DESC[desc_num + 120].TDES3,
+			pTX_NORMAL_DESC[desc_num + 120].TDES2,
+			pTX_NORMAL_DESC[desc_num + 120].TDES1,
+			pTX_NORMAL_DESC[desc_num + 120].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read6\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops6 = {
+	.read = TX_NORMAL_DESC_descriptor_read6,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read7(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read7\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 140)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 140)
+			, pTX_NORMAL_DESC[desc_num + 140].TDES3,
+			pTX_NORMAL_DESC[desc_num + 140].TDES2,
+			pTX_NORMAL_DESC[desc_num + 140].TDES1,
+			pTX_NORMAL_DESC[desc_num + 140].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read7\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops7 = {
+	.read = TX_NORMAL_DESC_descriptor_read7,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read8(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read8\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 160)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 160)
+			, pTX_NORMAL_DESC[desc_num + 160].TDES3,
+			pTX_NORMAL_DESC[desc_num + 160].TDES2,
+			pTX_NORMAL_DESC[desc_num + 160].TDES1,
+			pTX_NORMAL_DESC[desc_num + 160].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read8\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops8 = {
+	.read = TX_NORMAL_DESC_descriptor_read8,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read9(struct file *file,
+					       char __user * userbuf,
+					       size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read9\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 180)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 180)
+			, pTX_NORMAL_DESC[desc_num + 180].TDES3,
+			pTX_NORMAL_DESC[desc_num + 180].TDES2,
+			pTX_NORMAL_DESC[desc_num + 180].TDES1,
+			pTX_NORMAL_DESC[desc_num + 180].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read9\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops9 = {
+	.read = TX_NORMAL_DESC_descriptor_read9,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read10(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read10\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 200)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 200)
+			, pTX_NORMAL_DESC[desc_num + 200].TDES3,
+			pTX_NORMAL_DESC[desc_num + 200].TDES2,
+			pTX_NORMAL_DESC[desc_num + 200].TDES1,
+			pTX_NORMAL_DESC[desc_num + 200].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read10\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops10 = {
+	.read = TX_NORMAL_DESC_descriptor_read10,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read11(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read11\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(12440, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 20; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 220)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 220)
+			, pTX_NORMAL_DESC[desc_num + 220].TDES3,
+			pTX_NORMAL_DESC[desc_num + 220].TDES2,
+			pTX_NORMAL_DESC[desc_num + 220].TDES1,
+			pTX_NORMAL_DESC[desc_num + 220].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read11\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops11 = {
+	.read = TX_NORMAL_DESC_descriptor_read11,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_descriptor_read12(struct file *file,
+						char __user * userbuf,
+						size_t count, loff_t * ppos)
+{
+	struct s_TX_NORMAL_DESC *pTX_NORMAL_DESC = GET_TX_DESC_PTR(qInx_val, 0);
+	ssize_t ret = 0, desc_num = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+
+	DBGPR("--> TX_NORMAL_DESC_descriptor_read12\n");
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(9952, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+	for (desc_num = 0; desc_num < 16; desc_num++) {
+		sprintf(tmpBuf,
+			"Channel %d Descriptor %d's [%#lx] contents are:\n"
+			"TX_NORMAL_DESC.TDES3             :%x\n"
+			"TX_NORMAL_DESC.TDES2             :%x\n"
+			"TX_NORMAL_DESC.TDES1             :%x\n"
+			"TX_NORMAL_DESC.TDES0             :%x\n",
+			qInx_val, (int)(desc_num + 240)
+			, (ULONG) GET_TX_DESC_DMA_ADDR(qInx_val, desc_num + 240)
+			, pTX_NORMAL_DESC[desc_num + 240].TDES3,
+			pTX_NORMAL_DESC[desc_num + 240].TDES2,
+			pTX_NORMAL_DESC[desc_num + 240].TDES1,
+			pTX_NORMAL_DESC[desc_num + 240].TDES0);
+		strcat(debug_buf, tmpBuf);
+	}
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_descriptor_read12\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_desc_fops12 = {
+	.read = TX_NORMAL_DESC_descriptor_read12,
+	.write = descriptor_write,
+};
+
+static ssize_t TX_NORMAL_DESC_STATUS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx_val);
+	ssize_t ret = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+	int i;
+	/* shadow variables */
+	unsigned int cur_tx = desc_data->cur_tx;
+	unsigned int dirty_tx = desc_data->dirty_tx;
+	unsigned int free_desc_cnt = desc_data->free_desc_cnt;
+	unsigned int tx_pkt_queued = desc_data->tx_pkt_queued;
+
+	unsigned int tmp_cur_tx = 0;
+	unsigned int tmp_dirty_tx = 0;
+
+	DBGPR("--> TX_NORMAL_DESC_STATUS_read\n");
+
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(9952, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+
+	sprintf(debug_buf,
+		"\nCHANNEL %d TX DESCRIPTORS STATUS......................\n\n",
+		qInx_val);
+
+	sprintf(tmpBuf, "TOTAL DESCRIPTOR COUNT                   : %d\n\n"
+		"TOTAL FREE DESCRIPTOR COUNT              : %d\n\n"
+		"TOTAL DESCRIPTOR QUEUED FOR TRANSMISSION : %d\n\n"
+		"NEXT DESCRIPTOR TO BE USED BY DRIVER     : %d\n\n"
+		"NEXT DESCRIPTOR TO BE USED BY DEVICE     : %d\n\n",
+		TX_DESC_CNT, free_desc_cnt, tx_pkt_queued, cur_tx, dirty_tx);
+	strcat(debug_buf, tmpBuf);
+
+	/* Free tx descriptor index */
+	if ((free_desc_cnt == TX_DESC_CNT) && (tx_pkt_queued == 0)) {
+		sprintf(tmpBuf,
+			"ALL %d DESCRIPTORS ARE FREE, HENCE NO PACKETS ARE QUEUED FOR TRANSMISSION\n",
+			TX_DESC_CNT);
+		strcat(debug_buf, tmpBuf);
+	} else if ((free_desc_cnt == 0) && (tx_pkt_queued == TX_DESC_CNT)) {
+		sprintf(tmpBuf,
+			"ALL %d DESCRIPTORS ARE USED FOR TRANSMISSION, HENCE NO FREE DESCRIPTORS\n",
+			TX_DESC_CNT);
+		strcat(debug_buf, tmpBuf);
+	} else {
+		if (free_desc_cnt > 0) {
+			tmp_cur_tx = cur_tx;
+			tmp_dirty_tx = dirty_tx;
+			i = 1;
+			sprintf(tmpBuf,
+				"FREE DESCRIPTORS INDEX(es) are           :\n\n");
+			strcat(debug_buf, tmpBuf);
+			if (tmp_cur_tx > tmp_dirty_tx) {
+				for (; tmp_cur_tx < TX_DESC_CNT; tmp_cur_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_cur_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+				for (tmp_cur_tx = 0; tmp_cur_tx < tmp_dirty_tx;
+				     tmp_cur_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_cur_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+			} else {	/* (tmp_cur_tx < tmp_dirty_tx) */
+				for (; tmp_cur_tx > tmp_dirty_tx; tmp_cur_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_cur_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+			}
+			sprintf(tmpBuf, "\n");
+			strcat(debug_buf, tmpBuf);
+		}
+
+		if (tx_pkt_queued > 0) {
+			tmp_cur_tx = cur_tx;
+			tmp_dirty_tx = dirty_tx;
+			i = 1;
+			sprintf(tmpBuf,
+				"\nUSED DESCRIPTORS INDEX(es) are           :\n\n");
+			strcat(debug_buf, tmpBuf);
+			if (tmp_dirty_tx < tmp_cur_tx) {
+				for (; tmp_dirty_tx < tmp_cur_tx;
+				     tmp_dirty_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_dirty_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+			} else {	/* (tmp_dirty_tx < tmp_cur_tx) */
+				for (; tmp_dirty_tx > tmp_dirty_tx;
+				     tmp_dirty_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_dirty_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+				for (tmp_dirty_tx = 0;
+				     tmp_dirty_tx < tmp_cur_tx;
+				     tmp_dirty_tx++) {
+					sprintf(tmpBuf, "%d ", tmp_dirty_tx);
+					strcat(debug_buf, tmpBuf);
+					if ((i % 16) == 0) {
+						sprintf(tmpBuf, "\n");
+						strcat(debug_buf, tmpBuf);
+					}
+					i++;
+				}
+			}
+			sprintf(tmpBuf, "\n");
+			strcat(debug_buf, tmpBuf);
+		}
+	}
+	sprintf(tmpBuf, "\n.........................................DONE\n\n");
+	strcat(debug_buf, tmpBuf);
+
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<-- TX_NORMAL_DESC_STATUS_read\n");
+	return ret;
+}
+
+static const struct file_operations TX_NORMAL_DESC_STATUS_fops = {
+	.read = TX_NORMAL_DESC_STATUS_read,
+};
+
+static ssize_t RX_NORMAL_DESC_STATUS_read(struct file *file,
+					  char __user * userbuf, size_t count,
+					  loff_t * ppos)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx_val);
+	ssize_t ret = 0;
+	char *tmpBuf = NULL;
+	char *debug_buf = NULL;
+	UINT varDMA_CHRDR;	/* head ptr */
+	UINT varDMA_RDTP_RPDR;	/* tail ptr */
+	UINT varDMA_RDLAR;	/* tail ptr */
+	UINT tail_idx;
+	UINT head_idx;
+	UINT drv_desc_cnt = 0;
+	UINT dev_desc_cnt = 0;
+	unsigned int cur_rx = desc_data->cur_rx;
+
+	DBGPR("-->RX_NORMAL_DESC_STATUS_read\n");
+
+	tmpBuf = (char *)kmalloc(622, GFP_KERNEL);
+	if (!tmpBuf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf = (char *)kmalloc(9952, GFP_KERNEL);
+	if (!debug_buf) {
+		printk(KERN_ERR "Memory allocation failed:\n");
+		return -ENOMEM;
+	}
+	debug_buf[0] = '\0';
+
+	cur_rx = desc_data->cur_rx;
+	DMA_CHRDR_RgRd(qInx_val, varDMA_CHRDR);
+	DMA_RDTP_RPDR_RgRd(qInx_val, varDMA_RDTP_RPDR);
+	DMA_RDLAR_RgRd(qInx_val, varDMA_RDLAR);
+
+	tail_idx =
+	    (varDMA_RDTP_RPDR - varDMA_RDLAR) / sizeof(struct s_RX_NORMAL_DESC);
+
+	head_idx =
+	    (varDMA_CHRDR - varDMA_RDLAR) / sizeof(struct s_RX_NORMAL_DESC);
+
+	if (tail_idx == head_idx) {
+		dev_desc_cnt = 0;
+		drv_desc_cnt = RX_DESC_CNT;
+		printk(KERN_ALERT "\nhead:[%d]%#x tail:[%d]%#x cur-rx:%d\n",
+		       head_idx, varDMA_CHRDR, tail_idx,
+		       varDMA_RDTP_RPDR, cur_rx);
+	} else if (head_idx > tail_idx) {	/* tail ptr is above head ptr */
+		dev_desc_cnt = RX_DESC_CNT - (head_idx - tail_idx) + 1;
+		drv_desc_cnt = RX_DESC_CNT - dev_desc_cnt;
+	} else {		/* tail ptr is below head ptr */
+		dev_desc_cnt = (tail_idx - head_idx + 1);
+		drv_desc_cnt = RX_DESC_CNT - dev_desc_cnt;
+	}
+
+	sprintf(debug_buf,
+		"\nCHANNEL %d : RX DESCRIPTORS STATUS....................\n\n",
+		qInx_val);
+
+	sprintf(tmpBuf, "TOTAL DESCRIPTOR COUNT                   : %d\n\n"
+		"TOTAL DESCRIPTORS OWNED BY DEVICE        : %d\n\n"
+		"TOTAL DESCRIPTOR OWNED BY DRIVER         : %d\n\n"
+		"NEXT DESCRIPTOR TO BE USED BY DEVICE     : %d\n\n"
+		"NEXT DESCRIPTOR TO BE USED BY DRIVER     : %d\n\n",
+		RX_DESC_CNT, dev_desc_cnt, drv_desc_cnt, head_idx, cur_rx);
+	strcat(debug_buf, tmpBuf);
+	sprintf(tmpBuf, "\n.........................................DONE\n\n");
+	strcat(debug_buf, tmpBuf);
+
+	ret =
+	    simple_read_from_buffer(userbuf, count, ppos, debug_buf,
+				    strlen(debug_buf));
+	kfree(tmpBuf);
+	kfree(debug_buf);
+
+	DBGPR("<--RX_NORMAL_DESC_STATUS_read\n");
+	return ret;
+}
+
+static const struct file_operations RX_NORMAL_DESC_STATUS_fops = {
+	.read = RX_NORMAL_DESC_STATUS_read,
+};
+
+/*! 
+*  \brief  API to create debugfs files 
+*
+* \details This function will creates debug files required for debugging.
+* All debug files are created inside a directory named as ddgen_DWC_ETH_QOS
+* (debugfs directory /sys/kernel/debug/ddgen_DWC_ETH_QOS directory).
+* Note: Before doing any read or write operation, debugfs has to be mounted on system.
+*
+* \retval  0 on Success. 
+* \retval  error number on Failure.
+*/
+
+int create_debug_files()
+{
+	int ret = 0;
+	struct dentry *registers;
+	struct dentry *MAC_MA32_127LR127;
+	struct dentry *MAC_MA32_127LR126;
+	struct dentry *MAC_MA32_127LR125;
+	struct dentry *MAC_MA32_127LR124;
+	struct dentry *MAC_MA32_127LR123;
+	struct dentry *MAC_MA32_127LR122;
+	struct dentry *MAC_MA32_127LR121;
+	struct dentry *MAC_MA32_127LR120;
+	struct dentry *MAC_MA32_127LR119;
+	struct dentry *MAC_MA32_127LR118;
+	struct dentry *MAC_MA32_127LR117;
+	struct dentry *MAC_MA32_127LR116;
+	struct dentry *MAC_MA32_127LR115;
+	struct dentry *MAC_MA32_127LR114;
+	struct dentry *MAC_MA32_127LR113;
+	struct dentry *MAC_MA32_127LR112;
+	struct dentry *MAC_MA32_127LR111;
+	struct dentry *MAC_MA32_127LR110;
+	struct dentry *MAC_MA32_127LR109;
+	struct dentry *MAC_MA32_127LR108;
+	struct dentry *MAC_MA32_127LR107;
+	struct dentry *MAC_MA32_127LR106;
+	struct dentry *MAC_MA32_127LR105;
+	struct dentry *MAC_MA32_127LR104;
+	struct dentry *MAC_MA32_127LR103;
+	struct dentry *MAC_MA32_127LR102;
+	struct dentry *MAC_MA32_127LR101;
+	struct dentry *MAC_MA32_127LR100;
+	struct dentry *MAC_MA32_127LR99;
+	struct dentry *MAC_MA32_127LR98;
+	struct dentry *MAC_MA32_127LR97;
+	struct dentry *MAC_MA32_127LR96;
+	struct dentry *MAC_MA32_127LR95;
+	struct dentry *MAC_MA32_127LR94;
+	struct dentry *MAC_MA32_127LR93;
+	struct dentry *MAC_MA32_127LR92;
+	struct dentry *MAC_MA32_127LR91;
+	struct dentry *MAC_MA32_127LR90;
+	struct dentry *MAC_MA32_127LR89;
+	struct dentry *MAC_MA32_127LR88;
+	struct dentry *MAC_MA32_127LR87;
+	struct dentry *MAC_MA32_127LR86;
+	struct dentry *MAC_MA32_127LR85;
+	struct dentry *MAC_MA32_127LR84;
+	struct dentry *MAC_MA32_127LR83;
+	struct dentry *MAC_MA32_127LR82;
+	struct dentry *MAC_MA32_127LR81;
+	struct dentry *MAC_MA32_127LR80;
+	struct dentry *MAC_MA32_127LR79;
+	struct dentry *MAC_MA32_127LR78;
+	struct dentry *MAC_MA32_127LR77;
+	struct dentry *MAC_MA32_127LR76;
+	struct dentry *MAC_MA32_127LR75;
+	struct dentry *MAC_MA32_127LR74;
+	struct dentry *MAC_MA32_127LR73;
+	struct dentry *MAC_MA32_127LR72;
+	struct dentry *MAC_MA32_127LR71;
+	struct dentry *MAC_MA32_127LR70;
+	struct dentry *MAC_MA32_127LR69;
+	struct dentry *MAC_MA32_127LR68;
+	struct dentry *MAC_MA32_127LR67;
+	struct dentry *MAC_MA32_127LR66;
+	struct dentry *MAC_MA32_127LR65;
+	struct dentry *MAC_MA32_127LR64;
+	struct dentry *MAC_MA32_127LR63;
+	struct dentry *MAC_MA32_127LR62;
+	struct dentry *MAC_MA32_127LR61;
+	struct dentry *MAC_MA32_127LR60;
+	struct dentry *MAC_MA32_127LR59;
+	struct dentry *MAC_MA32_127LR58;
+	struct dentry *MAC_MA32_127LR57;
+	struct dentry *MAC_MA32_127LR56;
+	struct dentry *MAC_MA32_127LR55;
+	struct dentry *MAC_MA32_127LR54;
+	struct dentry *MAC_MA32_127LR53;
+	struct dentry *MAC_MA32_127LR52;
+	struct dentry *MAC_MA32_127LR51;
+	struct dentry *MAC_MA32_127LR50;
+	struct dentry *MAC_MA32_127LR49;
+	struct dentry *MAC_MA32_127LR48;
+	struct dentry *MAC_MA32_127LR47;
+	struct dentry *MAC_MA32_127LR46;
+	struct dentry *MAC_MA32_127LR45;
+	struct dentry *MAC_MA32_127LR44;
+	struct dentry *MAC_MA32_127LR43;
+	struct dentry *MAC_MA32_127LR42;
+	struct dentry *MAC_MA32_127LR41;
+	struct dentry *MAC_MA32_127LR40;
+	struct dentry *MAC_MA32_127LR39;
+	struct dentry *MAC_MA32_127LR38;
+	struct dentry *MAC_MA32_127LR37;
+	struct dentry *MAC_MA32_127LR36;
+	struct dentry *MAC_MA32_127LR35;
+	struct dentry *MAC_MA32_127LR34;
+	struct dentry *MAC_MA32_127LR33;
+	struct dentry *MAC_MA32_127LR32;
+	struct dentry *MAC_MA32_127HR127;
+	struct dentry *MAC_MA32_127HR126;
+	struct dentry *MAC_MA32_127HR125;
+	struct dentry *MAC_MA32_127HR124;
+	struct dentry *MAC_MA32_127HR123;
+	struct dentry *MAC_MA32_127HR122;
+	struct dentry *MAC_MA32_127HR121;
+	struct dentry *MAC_MA32_127HR120;
+	struct dentry *MAC_MA32_127HR119;
+	struct dentry *MAC_MA32_127HR118;
+	struct dentry *MAC_MA32_127HR117;
+	struct dentry *MAC_MA32_127HR116;
+	struct dentry *MAC_MA32_127HR115;
+	struct dentry *MAC_MA32_127HR114;
+	struct dentry *MAC_MA32_127HR113;
+	struct dentry *MAC_MA32_127HR112;
+	struct dentry *MAC_MA32_127HR111;
+	struct dentry *MAC_MA32_127HR110;
+	struct dentry *MAC_MA32_127HR109;
+	struct dentry *MAC_MA32_127HR108;
+	struct dentry *MAC_MA32_127HR107;
+	struct dentry *MAC_MA32_127HR106;
+	struct dentry *MAC_MA32_127HR105;
+	struct dentry *MAC_MA32_127HR104;
+	struct dentry *MAC_MA32_127HR103;
+	struct dentry *MAC_MA32_127HR102;
+	struct dentry *MAC_MA32_127HR101;
+	struct dentry *MAC_MA32_127HR100;
+	struct dentry *MAC_MA32_127HR99;
+	struct dentry *MAC_MA32_127HR98;
+	struct dentry *MAC_MA32_127HR97;
+	struct dentry *MAC_MA32_127HR96;
+	struct dentry *MAC_MA32_127HR95;
+	struct dentry *MAC_MA32_127HR94;
+	struct dentry *MAC_MA32_127HR93;
+	struct dentry *MAC_MA32_127HR92;
+	struct dentry *MAC_MA32_127HR91;
+	struct dentry *MAC_MA32_127HR90;
+	struct dentry *MAC_MA32_127HR89;
+	struct dentry *MAC_MA32_127HR88;
+	struct dentry *MAC_MA32_127HR87;
+	struct dentry *MAC_MA32_127HR86;
+	struct dentry *MAC_MA32_127HR85;
+	struct dentry *MAC_MA32_127HR84;
+	struct dentry *MAC_MA32_127HR83;
+	struct dentry *MAC_MA32_127HR82;
+	struct dentry *MAC_MA32_127HR81;
+	struct dentry *MAC_MA32_127HR80;
+	struct dentry *MAC_MA32_127HR79;
+	struct dentry *MAC_MA32_127HR78;
+	struct dentry *MAC_MA32_127HR77;
+	struct dentry *MAC_MA32_127HR76;
+	struct dentry *MAC_MA32_127HR75;
+	struct dentry *MAC_MA32_127HR74;
+	struct dentry *MAC_MA32_127HR73;
+	struct dentry *MAC_MA32_127HR72;
+	struct dentry *MAC_MA32_127HR71;
+	struct dentry *MAC_MA32_127HR70;
+	struct dentry *MAC_MA32_127HR69;
+	struct dentry *MAC_MA32_127HR68;
+	struct dentry *MAC_MA32_127HR67;
+	struct dentry *MAC_MA32_127HR66;
+	struct dentry *MAC_MA32_127HR65;
+	struct dentry *MAC_MA32_127HR64;
+	struct dentry *MAC_MA32_127HR63;
+	struct dentry *MAC_MA32_127HR62;
+	struct dentry *MAC_MA32_127HR61;
+	struct dentry *MAC_MA32_127HR60;
+	struct dentry *MAC_MA32_127HR59;
+	struct dentry *MAC_MA32_127HR58;
+	struct dentry *MAC_MA32_127HR57;
+	struct dentry *MAC_MA32_127HR56;
+	struct dentry *MAC_MA32_127HR55;
+	struct dentry *MAC_MA32_127HR54;
+	struct dentry *MAC_MA32_127HR53;
+	struct dentry *MAC_MA32_127HR52;
+	struct dentry *MAC_MA32_127HR51;
+	struct dentry *MAC_MA32_127HR50;
+	struct dentry *MAC_MA32_127HR49;
+	struct dentry *MAC_MA32_127HR48;
+	struct dentry *MAC_MA32_127HR47;
+	struct dentry *MAC_MA32_127HR46;
+	struct dentry *MAC_MA32_127HR45;
+	struct dentry *MAC_MA32_127HR44;
+	struct dentry *MAC_MA32_127HR43;
+	struct dentry *MAC_MA32_127HR42;
+	struct dentry *MAC_MA32_127HR41;
+	struct dentry *MAC_MA32_127HR40;
+	struct dentry *MAC_MA32_127HR39;
+	struct dentry *MAC_MA32_127HR38;
+	struct dentry *MAC_MA32_127HR37;
+	struct dentry *MAC_MA32_127HR36;
+	struct dentry *MAC_MA32_127HR35;
+	struct dentry *MAC_MA32_127HR34;
+	struct dentry *MAC_MA32_127HR33;
+	struct dentry *MAC_MA32_127HR32;
+	struct dentry *MAC_MA1_31LR31;
+	struct dentry *MAC_MA1_31LR30;
+	struct dentry *MAC_MA1_31LR29;
+	struct dentry *MAC_MA1_31LR28;
+	struct dentry *MAC_MA1_31LR27;
+	struct dentry *MAC_MA1_31LR26;
+	struct dentry *MAC_MA1_31LR25;
+	struct dentry *MAC_MA1_31LR24;
+	struct dentry *MAC_MA1_31LR23;
+	struct dentry *MAC_MA1_31LR22;
+	struct dentry *MAC_MA1_31LR21;
+	struct dentry *MAC_MA1_31LR20;
+	struct dentry *MAC_MA1_31LR19;
+	struct dentry *MAC_MA1_31LR18;
+	struct dentry *MAC_MA1_31LR17;
+	struct dentry *MAC_MA1_31LR16;
+	struct dentry *MAC_MA1_31LR15;
+	struct dentry *MAC_MA1_31LR14;
+	struct dentry *MAC_MA1_31LR13;
+	struct dentry *MAC_MA1_31LR12;
+	struct dentry *MAC_MA1_31LR11;
+	struct dentry *MAC_MA1_31LR10;
+	struct dentry *MAC_MA1_31LR9;
+	struct dentry *MAC_MA1_31LR8;
+	struct dentry *MAC_MA1_31LR7;
+	struct dentry *MAC_MA1_31LR6;
+	struct dentry *MAC_MA1_31LR5;
+	struct dentry *MAC_MA1_31LR4;
+	struct dentry *MAC_MA1_31LR3;
+	struct dentry *MAC_MA1_31LR2;
+	struct dentry *MAC_MA1_31LR1;
+	struct dentry *MAC_MA1_31HR31;
+	struct dentry *MAC_MA1_31HR30;
+	struct dentry *MAC_MA1_31HR29;
+	struct dentry *MAC_MA1_31HR28;
+	struct dentry *MAC_MA1_31HR27;
+	struct dentry *MAC_MA1_31HR26;
+	struct dentry *MAC_MA1_31HR25;
+	struct dentry *MAC_MA1_31HR24;
+	struct dentry *MAC_MA1_31HR23;
+	struct dentry *MAC_MA1_31HR22;
+	struct dentry *MAC_MA1_31HR21;
+	struct dentry *MAC_MA1_31HR20;
+	struct dentry *MAC_MA1_31HR19;
+	struct dentry *MAC_MA1_31HR18;
+	struct dentry *MAC_MA1_31HR17;
+	struct dentry *MAC_MA1_31HR16;
+	struct dentry *MAC_MA1_31HR15;
+	struct dentry *MAC_MA1_31HR14;
+	struct dentry *MAC_MA1_31HR13;
+	struct dentry *MAC_MA1_31HR12;
+	struct dentry *MAC_MA1_31HR11;
+	struct dentry *MAC_MA1_31HR10;
+	struct dentry *MAC_MA1_31HR9;
+	struct dentry *MAC_MA1_31HR8;
+	struct dentry *MAC_MA1_31HR7;
+	struct dentry *MAC_MA1_31HR6;
+	struct dentry *MAC_MA1_31HR5;
+	struct dentry *MAC_MA1_31HR4;
+	struct dentry *MAC_MA1_31HR3;
+	struct dentry *MAC_MA1_31HR2;
+	struct dentry *MAC_MA1_31HR1;
+	struct dentry *MAC_ARPA;
+	struct dentry *MAC_L3A3R7;
+	struct dentry *MAC_L3A3R6;
+	struct dentry *MAC_L3A3R5;
+	struct dentry *MAC_L3A3R4;
+	struct dentry *MAC_L3A3R3;
+	struct dentry *MAC_L3A3R2;
+	struct dentry *MAC_L3A3R1;
+	struct dentry *MAC_L3A3R0;
+	struct dentry *MAC_L3A2R7;
+	struct dentry *MAC_L3A2R6;
+	struct dentry *MAC_L3A2R5;
+	struct dentry *MAC_L3A2R4;
+	struct dentry *MAC_L3A2R3;
+	struct dentry *MAC_L3A2R2;
+	struct dentry *MAC_L3A2R1;
+	struct dentry *MAC_L3A2R0;
+	struct dentry *MAC_L3A1R7;
+	struct dentry *MAC_L3A1R6;
+	struct dentry *MAC_L3A1R5;
+	struct dentry *MAC_L3A1R4;
+	struct dentry *MAC_L3A1R3;
+	struct dentry *MAC_L3A1R2;
+	struct dentry *MAC_L3A1R1;
+	struct dentry *MAC_L3A1R0;
+	struct dentry *MAC_L3A0R7;
+	struct dentry *MAC_L3A0R6;
+	struct dentry *MAC_L3A0R5;
+	struct dentry *MAC_L3A0R4;
+	struct dentry *MAC_L3A0R3;
+	struct dentry *MAC_L3A0R2;
+	struct dentry *MAC_L3A0R1;
+	struct dentry *MAC_L3A0R0;
+	struct dentry *MAC_L4AR7;
+	struct dentry *MAC_L4AR6;
+	struct dentry *MAC_L4AR5;
+	struct dentry *MAC_L4AR4;
+	struct dentry *MAC_L4AR3;
+	struct dentry *MAC_L4AR2;
+	struct dentry *MAC_L4AR1;
+	struct dentry *MAC_L4AR0;
+	struct dentry *MAC_L3L4CR7;
+	struct dentry *MAC_L3L4CR6;
+	struct dentry *MAC_L3L4CR5;
+	struct dentry *MAC_L3L4CR4;
+	struct dentry *MAC_L3L4CR3;
+	struct dentry *MAC_L3L4CR2;
+	struct dentry *MAC_L3L4CR1;
+	struct dentry *MAC_L3L4CR0;
+	struct dentry *MAC_GPIOS;
+	struct dentry *MAC_PCS;
+	struct dentry *MAC_TES;
+	struct dentry *MAC_AE;
+	struct dentry *MAC_ALPA;
+	struct dentry *MAC_AAD;
+	struct dentry *MAC_ANS;
+	struct dentry *MAC_ANC;
+	struct dentry *MAC_LPC;
+	struct dentry *MAC_LPS;
+	struct dentry *MAC_PPS_WIDTH3;
+	struct dentry *MAC_PPS_WIDTH2;
+	struct dentry *MAC_PPS_WIDTH1;
+	struct dentry *MAC_PPS_WIDTH0;
+	struct dentry *MAC_PPS_INTVAL3;
+	struct dentry *MAC_PPS_INTVAL2;
+	struct dentry *MAC_PPS_INTVAL1;
+	struct dentry *MAC_PPS_INTVAL0;
+	struct dentry *MAC_PPS_TTNS3;
+	struct dentry *MAC_PPS_TTNS2;
+	struct dentry *MAC_PPS_TTNS1;
+	struct dentry *MAC_PPS_TTNS0;
+	struct dentry *MAC_PPS_TTS3;
+	struct dentry *MAC_PPS_TTS2;
+	struct dentry *MAC_PPS_TTS1;
+	struct dentry *MAC_PPS_TTS0;
+	struct dentry *MAC_PPSC;
+	struct dentry *MAC_TEAC;
+	struct dentry *MAC_TIAC;
+	struct dentry *MAC_ATS;
+	struct dentry *MAC_ATN;
+	struct dentry *MAC_AC;
+	struct dentry *MAC_TTN;
+	struct dentry *MAC_TTSN;
+	struct dentry *MAC_TSR;
+	struct dentry *MAC_STHWR;
+	struct dentry *MAC_TAR;
+	struct dentry *MAC_STNSUR;
+	struct dentry *MAC_STSUR;
+	struct dentry *MAC_STNSR;
+	struct dentry *MAC_STSR;
+	struct dentry *MAC_SSIR;
+	struct dentry *MAC_TCR;
+	struct dentry *MTL_DSR;
+	struct dentry *MAC_RWPFFR;
+	struct dentry *MAC_RTSR;
+	struct dentry *MTL_IER;
+	struct dentry *MTL_QRCR7;
+	struct dentry *MTL_QRCR6;
+	struct dentry *MTL_QRCR5;
+	struct dentry *MTL_QRCR4;
+	struct dentry *MTL_QRCR3;
+	struct dentry *MTL_QRCR2;
+	struct dentry *MTL_QRCR1;
+	struct dentry *MTL_QRDR7;
+	struct dentry *MTL_QRDR6;
+	struct dentry *MTL_QRDR5;
+	struct dentry *MTL_QRDR4;
+	struct dentry *MTL_QRDR3;
+	struct dentry *MTL_QRDR2;
+	struct dentry *MTL_QRDR1;
+	struct dentry *MTL_QOCR7;
+	struct dentry *MTL_QOCR6;
+	struct dentry *MTL_QOCR5;
+	struct dentry *MTL_QOCR4;
+	struct dentry *MTL_QOCR3;
+	struct dentry *MTL_QOCR2;
+	struct dentry *MTL_QOCR1;
+	struct dentry *MTL_QROMR7;
+	struct dentry *MTL_QROMR6;
+	struct dentry *MTL_QROMR5;
+	struct dentry *MTL_QROMR4;
+	struct dentry *MTL_QROMR3;
+	struct dentry *MTL_QROMR2;
+	struct dentry *MTL_QROMR1;
+	struct dentry *MTL_QLCR7;
+	struct dentry *MTL_QLCR6;
+	struct dentry *MTL_QLCR5;
+	struct dentry *MTL_QLCR4;
+	struct dentry *MTL_QLCR3;
+	struct dentry *MTL_QLCR2;
+	struct dentry *MTL_QLCR1;
+	struct dentry *MTL_QHCR7;
+	struct dentry *MTL_QHCR6;
+	struct dentry *MTL_QHCR5;
+	struct dentry *MTL_QHCR4;
+	struct dentry *MTL_QHCR3;
+	struct dentry *MTL_QHCR2;
+	struct dentry *MTL_QHCR1;
+	struct dentry *MTL_QSSCR7;
+	struct dentry *MTL_QSSCR6;
+	struct dentry *MTL_QSSCR5;
+	struct dentry *MTL_QSSCR4;
+	struct dentry *MTL_QSSCR3;
+	struct dentry *MTL_QSSCR2;
+	struct dentry *MTL_QSSCR1;
+	struct dentry *MTL_QW7;
+	struct dentry *MTL_QW6;
+	struct dentry *MTL_QW5;
+	struct dentry *MTL_QW4;
+	struct dentry *MTL_QW3;
+	struct dentry *MTL_QW2;
+	struct dentry *MTL_QW1;
+	struct dentry *MTL_QESR7;
+	struct dentry *MTL_QESR6;
+	struct dentry *MTL_QESR5;
+	struct dentry *MTL_QESR4;
+	struct dentry *MTL_QESR3;
+	struct dentry *MTL_QESR2;
+	struct dentry *MTL_QESR1;
+	struct dentry *MTL_QECR7;
+	struct dentry *MTL_QECR6;
+	struct dentry *MTL_QECR5;
+	struct dentry *MTL_QECR4;
+	struct dentry *MTL_QECR3;
+	struct dentry *MTL_QECR2;
+	struct dentry *MTL_QECR1;
+	struct dentry *MTL_QTDR7;
+	struct dentry *MTL_QTDR6;
+	struct dentry *MTL_QTDR5;
+	struct dentry *MTL_QTDR4;
+	struct dentry *MTL_QTDR3;
+	struct dentry *MTL_QTDR2;
+	struct dentry *MTL_QTDR1;
+	struct dentry *MTL_QUCR7;
+	struct dentry *MTL_QUCR6;
+	struct dentry *MTL_QUCR5;
+	struct dentry *MTL_QUCR4;
+	struct dentry *MTL_QUCR3;
+	struct dentry *MTL_QUCR2;
+	struct dentry *MTL_QUCR1;
+	struct dentry *MTL_QTOMR7;
+	struct dentry *MTL_QTOMR6;
+	struct dentry *MTL_QTOMR5;
+	struct dentry *MTL_QTOMR4;
+	struct dentry *MTL_QTOMR3;
+	struct dentry *MTL_QTOMR2;
+	struct dentry *MTL_QTOMR1;
+	struct dentry *MAC_PMTCSR;
+	struct dentry *MMC_RXICMP_ERR_OCTETS;
+	struct dentry *MMC_RXICMP_GD_OCTETS;
+	struct dentry *MMC_RXTCP_ERR_OCTETS;
+	struct dentry *MMC_RXTCP_GD_OCTETS;
+	struct dentry *MMC_RXUDP_ERR_OCTETS;
+	struct dentry *MMC_RXUDP_GD_OCTETS;
+	struct dentry *MMC_RXIPV6_NOPAY_OCTETS;
+	struct dentry *MMC_RXIPV6_HDRERR_OCTETS;
+	struct dentry *MMC_RXIPV6_GD_OCTETS;
+	struct dentry *MMC_RXIPV4_UDSBL_OCTETS;
+	struct dentry *MMC_RXIPV4_FRAG_OCTETS;
+	struct dentry *MMC_RXIPV4_NOPAY_OCTETS;
+	struct dentry *MMC_RXIPV4_HDRERR_OCTETS;
+	struct dentry *MMC_RXIPV4_GD_OCTETS;
+	struct dentry *MMC_RXICMP_ERR_PKTS;
+	struct dentry *MMC_RXICMP_GD_PKTS;
+	struct dentry *MMC_RXTCP_ERR_PKTS;
+	struct dentry *MMC_RXTCP_GD_PKTS;
+	struct dentry *MMC_RXUDP_ERR_PKTS;
+	struct dentry *MMC_RXUDP_GD_PKTS;
+	struct dentry *MMC_RXIPV6_NOPAY_PKTS;
+	struct dentry *MMC_RXIPV6_HDRERR_PKTS;
+	struct dentry *MMC_RXIPV6_GD_PKTS;
+	struct dentry *MMC_RXIPV4_UBSBL_PKTS;
+	struct dentry *MMC_RXIPV4_FRAG_PKTS;
+	struct dentry *MMC_RXIPV4_NOPAY_PKTS;
+	struct dentry *MMC_RXIPV4_HDRERR_PKTS;
+	struct dentry *MMC_RXIPV4_GD_PKTS;
+	struct dentry *MMC_RXCTRLPACKETS_G;
+	struct dentry *MMC_RXRCVERROR;
+	struct dentry *MMC_RXWATCHDOGERROR;
+	struct dentry *MMC_RXVLANPACKETS_GB;
+	struct dentry *MMC_RXFIFOOVERFLOW;
+	struct dentry *MMC_RXPAUSEPACKETS;
+	struct dentry *MMC_RXOUTOFRANGETYPE;
+	struct dentry *MMC_RXLENGTHERROR;
+	struct dentry *MMC_RXUNICASTPACKETS_G;
+	struct dentry *MMC_RX1024TOMAXOCTETS_GB;
+	struct dentry *MMC_RX512TO1023OCTETS_GB;
+	struct dentry *MMC_RX256TO511OCTETS_GB;
+	struct dentry *MMC_RX128TO255OCTETS_GB;
+	struct dentry *MMC_RX65TO127OCTETS_GB;
+	struct dentry *MMC_RX64OCTETS_GB;
+	struct dentry *MMC_RXOVERSIZE_G;
+	struct dentry *MMC_RXUNDERSIZE_G;
+	struct dentry *MMC_RXJABBERERROR;
+	struct dentry *MMC_RXRUNTERROR;
+	struct dentry *MMC_RXALIGNMENTERROR;
+	struct dentry *MMC_RXCRCERROR;
+	struct dentry *MMC_RXMULTICASTPACKETS_G;
+	struct dentry *MMC_RXBROADCASTPACKETS_G;
+	struct dentry *MMC_RXOCTETCOUNT_G;
+	struct dentry *MMC_RXOCTETCOUNT_GB;
+	struct dentry *MMC_RXPACKETCOUNT_GB;
+	struct dentry *MMC_TXOVERSIZE_G;
+	struct dentry *MMC_TXVLANPACKETS_G;
+	struct dentry *MMC_TXPAUSEPACKETS;
+	struct dentry *MMC_TXEXCESSDEF;
+	struct dentry *MMC_TXPACKETSCOUNT_G;
+	struct dentry *MMC_TXOCTETCOUNT_G;
+	struct dentry *MMC_TXCARRIERERROR;
+	struct dentry *MMC_TXEXESSCOL;
+	struct dentry *MMC_TXLATECOL;
+	struct dentry *MMC_TXDEFERRED;
+	struct dentry *MMC_TXMULTICOL_G;
+	struct dentry *MMC_TXSINGLECOL_G;
+	struct dentry *MMC_TXUNDERFLOWERROR;
+	struct dentry *MMC_TXBROADCASTPACKETS_GB;
+	struct dentry *MMC_TXMULTICASTPACKETS_GB;
+	struct dentry *MMC_TXUNICASTPACKETS_GB;
+	struct dentry *MMC_TX1024TOMAXOCTETS_GB;
+	struct dentry *MMC_TX512TO1023OCTETS_GB;
+	struct dentry *MMC_TX256TO511OCTETS_GB;
+	struct dentry *MMC_TX128TO255OCTETS_GB;
+	struct dentry *MMC_TX65TO127OCTETS_GB;
+	struct dentry *MMC_TX64OCTETS_GB;
+	struct dentry *MMC_TXMULTICASTPACKETS_G;
+	struct dentry *MMC_TXBROADCASTPACKETS_G;
+	struct dentry *MMC_TXPACKETCOUNT_GB;
+	struct dentry *MMC_TXOCTETCOUNT_GB;
+	struct dentry *MMC_IPC_INTR_RX;
+	struct dentry *MMC_IPC_INTR_MASK_RX;
+	struct dentry *MMC_INTR_MASK_TX;
+	struct dentry *MMC_INTR_MASK_RX;
+	struct dentry *MMC_INTR_TX;
+	struct dentry *MMC_INTR_RX;
+	struct dentry *MMC_CNTRL;
+	struct dentry *MAC_MA1LR;
+	struct dentry *MAC_MA1HR;
+	struct dentry *MAC_MA0LR;
+	struct dentry *MAC_MA0HR;
+	struct dentry *MAC_GPIOR;
+	struct dentry *MAC_GMIIDR;
+	struct dentry *MAC_GMIIAR;
+	struct dentry *MAC_HFR2;
+	struct dentry *MAC_HFR1;
+	struct dentry *MAC_HFR0;
+	struct dentry *MAC_MDR;
+	struct dentry *MAC_VR;
+	struct dentry *MAC_HTR7;
+	struct dentry *MAC_HTR6;
+	struct dentry *MAC_HTR5;
+	struct dentry *MAC_HTR4;
+	struct dentry *MAC_HTR3;
+	struct dentry *MAC_HTR2;
+	struct dentry *MAC_HTR1;
+	struct dentry *MAC_HTR0;
+	struct dentry *DMA_RIWTR7;
+	struct dentry *DMA_RIWTR6;
+	struct dentry *DMA_RIWTR5;
+	struct dentry *DMA_RIWTR4;
+	struct dentry *DMA_RIWTR3;
+	struct dentry *DMA_RIWTR2;
+	struct dentry *DMA_RIWTR1;
+	struct dentry *DMA_RIWTR0;
+	struct dentry *DMA_RDRLR7;
+	struct dentry *DMA_RDRLR6;
+	struct dentry *DMA_RDRLR5;
+	struct dentry *DMA_RDRLR4;
+	struct dentry *DMA_RDRLR3;
+	struct dentry *DMA_RDRLR2;
+	struct dentry *DMA_RDRLR1;
+	struct dentry *DMA_RDRLR0;
+	struct dentry *DMA_TDRLR7;
+	struct dentry *DMA_TDRLR6;
+	struct dentry *DMA_TDRLR5;
+	struct dentry *DMA_TDRLR4;
+	struct dentry *DMA_TDRLR3;
+	struct dentry *DMA_TDRLR2;
+	struct dentry *DMA_TDRLR1;
+	struct dentry *DMA_TDRLR0;
+	struct dentry *DMA_RDTP_RPDR7;
+	struct dentry *DMA_RDTP_RPDR6;
+	struct dentry *DMA_RDTP_RPDR5;
+	struct dentry *DMA_RDTP_RPDR4;
+	struct dentry *DMA_RDTP_RPDR3;
+	struct dentry *DMA_RDTP_RPDR2;
+	struct dentry *DMA_RDTP_RPDR1;
+	struct dentry *DMA_RDTP_RPDR0;
+	struct dentry *DMA_TDTP_TPDR7;
+	struct dentry *DMA_TDTP_TPDR6;
+	struct dentry *DMA_TDTP_TPDR5;
+	struct dentry *DMA_TDTP_TPDR4;
+	struct dentry *DMA_TDTP_TPDR3;
+	struct dentry *DMA_TDTP_TPDR2;
+	struct dentry *DMA_TDTP_TPDR1;
+	struct dentry *DMA_TDTP_TPDR0;
+	struct dentry *DMA_RDLAR7;
+	struct dentry *DMA_RDLAR6;
+	struct dentry *DMA_RDLAR5;
+	struct dentry *DMA_RDLAR4;
+	struct dentry *DMA_RDLAR3;
+	struct dentry *DMA_RDLAR2;
+	struct dentry *DMA_RDLAR1;
+	struct dentry *DMA_RDLAR0;
+	struct dentry *DMA_TDLAR7;
+	struct dentry *DMA_TDLAR6;
+	struct dentry *DMA_TDLAR5;
+	struct dentry *DMA_TDLAR4;
+	struct dentry *DMA_TDLAR3;
+	struct dentry *DMA_TDLAR2;
+	struct dentry *DMA_TDLAR1;
+	struct dentry *DMA_TDLAR0;
+	struct dentry *DMA_IER7;
+	struct dentry *DMA_IER6;
+	struct dentry *DMA_IER5;
+	struct dentry *DMA_IER4;
+	struct dentry *DMA_IER3;
+	struct dentry *DMA_IER2;
+	struct dentry *DMA_IER1;
+	struct dentry *DMA_IER0;
+	struct dentry *MAC_IMR;
+	struct dentry *MAC_ISR;
+	struct dentry *MTL_ISR;
+	struct dentry *DMA_SR7;
+	struct dentry *DMA_SR6;
+	struct dentry *DMA_SR5;
+	struct dentry *DMA_SR4;
+	struct dentry *DMA_SR3;
+	struct dentry *DMA_SR2;
+	struct dentry *DMA_SR1;
+	struct dentry *DMA_SR0;
+	struct dentry *DMA_ISR;
+	struct dentry *DMA_DSR2;
+	struct dentry *DMA_DSR1;
+	struct dentry *DMA_DSR0;
+	struct dentry *MTL_Q0RDR;
+	struct dentry *MTL_Q0ESR;
+	struct dentry *MTL_Q0TDR;
+	struct dentry *DMA_CHRBAR7;
+	struct dentry *DMA_CHRBAR6;
+	struct dentry *DMA_CHRBAR5;
+	struct dentry *DMA_CHRBAR4;
+	struct dentry *DMA_CHRBAR3;
+	struct dentry *DMA_CHRBAR2;
+	struct dentry *DMA_CHRBAR1;
+	struct dentry *DMA_CHRBAR0;
+	struct dentry *DMA_CHTBAR7;
+	struct dentry *DMA_CHTBAR6;
+	struct dentry *DMA_CHTBAR5;
+	struct dentry *DMA_CHTBAR4;
+	struct dentry *DMA_CHTBAR3;
+	struct dentry *DMA_CHTBAR2;
+	struct dentry *DMA_CHTBAR1;
+	struct dentry *DMA_CHTBAR0;
+	struct dentry *DMA_CHRDR7;
+	struct dentry *DMA_CHRDR6;
+	struct dentry *DMA_CHRDR5;
+	struct dentry *DMA_CHRDR4;
+	struct dentry *DMA_CHRDR3;
+	struct dentry *DMA_CHRDR2;
+	struct dentry *DMA_CHRDR1;
+	struct dentry *DMA_CHRDR0;
+	struct dentry *DMA_CHTDR7;
+	struct dentry *DMA_CHTDR6;
+	struct dentry *DMA_CHTDR5;
+	struct dentry *DMA_CHTDR4;
+	struct dentry *DMA_CHTDR3;
+	struct dentry *DMA_CHTDR2;
+	struct dentry *DMA_CHTDR1;
+	struct dentry *DMA_CHTDR0;
+	struct dentry *DMA_SFCSR7;
+	struct dentry *DMA_SFCSR6;
+	struct dentry *DMA_SFCSR5;
+	struct dentry *DMA_SFCSR4;
+	struct dentry *DMA_SFCSR3;
+	struct dentry *DMA_SFCSR2;
+	struct dentry *DMA_SFCSR1;
+	struct dentry *DMA_SFCSR0;
+	struct dentry *MAC_IVLANTIRR;
+	struct dentry *MAC_VLANTIRR;
+	struct dentry *MAC_VLANHTR;
+	struct dentry *MAC_VLANTR;
+	struct dentry *DMA_SBUS;
+	struct dentry *DMA_BMR;
+	struct dentry *MTL_Q0RCR;
+	struct dentry *MTL_Q0OCR;
+	struct dentry *MTL_Q0ROMR;
+	struct dentry *MTL_Q0QR;
+	struct dentry *MTL_Q0ECR;
+	struct dentry *MTL_Q0UCR;
+	struct dentry *MTL_Q0TOMR;
+	struct dentry *MTL_RQDCM1R;
+	struct dentry *MTL_RQDCM0R;
+	struct dentry *MTL_FDDR;
+	struct dentry *MTL_FDACS;
+	struct dentry *MTL_OMR;
+	struct dentry *MAC_RQC3R;
+	struct dentry *MAC_RQC2R;
+	struct dentry *MAC_RQC1R;
+	struct dentry *MAC_RQC0R;
+	struct dentry *MAC_TQPM1R;
+	struct dentry *MAC_TQPM0R;
+	struct dentry *MAC_RFCR;
+	struct dentry *MAC_QTFCR7;
+	struct dentry *MAC_QTFCR6;
+	struct dentry *MAC_QTFCR5;
+	struct dentry *MAC_QTFCR4;
+	struct dentry *MAC_QTFCR3;
+	struct dentry *MAC_QTFCR2;
+	struct dentry *MAC_QTFCR1;
+	struct dentry *MAC_Q0TFCR;
+	struct dentry *DMA_AXI4CR7;
+	struct dentry *DMA_AXI4CR6;
+	struct dentry *DMA_AXI4CR5;
+	struct dentry *DMA_AXI4CR4;
+	struct dentry *DMA_AXI4CR3;
+	struct dentry *DMA_AXI4CR2;
+	struct dentry *DMA_AXI4CR1;
+	struct dentry *DMA_AXI4CR0;
+	struct dentry *DMA_RCR7;
+	struct dentry *DMA_RCR6;
+	struct dentry *DMA_RCR5;
+	struct dentry *DMA_RCR4;
+	struct dentry *DMA_RCR3;
+	struct dentry *DMA_RCR2;
+	struct dentry *DMA_RCR1;
+	struct dentry *DMA_RCR0;
+	struct dentry *DMA_TCR7;
+	struct dentry *DMA_TCR6;
+	struct dentry *DMA_TCR5;
+	struct dentry *DMA_TCR4;
+	struct dentry *DMA_TCR3;
+	struct dentry *DMA_TCR2;
+	struct dentry *DMA_TCR1;
+	struct dentry *DMA_TCR0;
+	struct dentry *DMA_CR7;
+	struct dentry *DMA_CR6;
+	struct dentry *DMA_CR5;
+	struct dentry *DMA_CR4;
+	struct dentry *DMA_CR3;
+	struct dentry *DMA_CR2;
+	struct dentry *DMA_CR1;
+	struct dentry *DMA_CR0;
+	struct dentry *MAC_WTR;
+	struct dentry *MAC_MPFR;
+	struct dentry *MAC_MECR;
+	struct dentry *MAC_MCR;
+	/* MII/GMII registers */
+	struct dentry *MII_BMCR_REG;
+	struct dentry *MII_BMSR_REG;
+	struct dentry *MII_PHYSID1_REG;
+	struct dentry *MII_PHYSID2_REG;
+	struct dentry *MII_ADVERTISE_REG;
+	struct dentry *MII_LPA_REG;
+	struct dentry *MII_EXPANSION_REG;
+	struct dentry *AUTO_NEGO_NP_REG;
+	struct dentry *MII_ESTATUS_REG;
+	struct dentry *MII_CTRL1000_REG;
+	struct dentry *MII_STAT1000_REG;
+	struct dentry *PHY_CTL_REG;
+	struct dentry *PHY_STS_REG;
+	struct dentry *feature_drop_tx_pktburstcnt;
+	struct dentry *qInx;
+
+	struct dentry *RX_NORMAL_DESC_desc0;
+	struct dentry *RX_NORMAL_DESC_desc1;
+	struct dentry *RX_NORMAL_DESC_desc2;
+	struct dentry *RX_NORMAL_DESC_desc3;
+	struct dentry *RX_NORMAL_DESC_desc4;
+	struct dentry *RX_NORMAL_DESC_desc5;
+	struct dentry *RX_NORMAL_DESC_desc6;
+	struct dentry *RX_NORMAL_DESC_desc7;
+	struct dentry *RX_NORMAL_DESC_desc8;
+	struct dentry *RX_NORMAL_DESC_desc9;
+	struct dentry *RX_NORMAL_DESC_desc10;
+	struct dentry *RX_NORMAL_DESC_desc11;
+	struct dentry *RX_NORMAL_DESC_desc12;
+	struct dentry *TX_NORMAL_DESC_desc0;
+	struct dentry *TX_NORMAL_DESC_desc1;
+	struct dentry *TX_NORMAL_DESC_desc2;
+	struct dentry *TX_NORMAL_DESC_desc3;
+	struct dentry *TX_NORMAL_DESC_desc4;
+	struct dentry *TX_NORMAL_DESC_desc5;
+	struct dentry *TX_NORMAL_DESC_desc6;
+	struct dentry *TX_NORMAL_DESC_desc7;
+	struct dentry *TX_NORMAL_DESC_desc8;
+	struct dentry *TX_NORMAL_DESC_desc9;
+	struct dentry *TX_NORMAL_DESC_desc10;
+	struct dentry *TX_NORMAL_DESC_desc11;
+	struct dentry *TX_NORMAL_DESC_desc12;
+	struct dentry *TX_NORMAL_DESC_STATUS;
+	struct dentry *RX_NORMAL_DESC_STATUS;
+
+	DBGPR("--> create_debug_files\n");
+
+	dir = debugfs_create_dir("ddgen_DWC_ETH_QOS", NULL);
+	if (dir == NULL) {
+		printk(KERN_INFO
+		       "error creating directory: DWC_ETH_QOS_debug\n");
+		return -ENODEV;
+	}
+
+	registers =
+	    debugfs_create_file("registers", 744, dir, &REGISTERS_val,
+				&registers_fops);
+	if (registers == NULL) {
+		printk(KERN_INFO "error creating file: registers\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR127 =
+	    debugfs_create_file("MAC_MA32_127LR127", 744, dir,
+				&MAC_MA32_127LR127_val,
+				&MAC_MA32_127LR127_fops);
+	if (MAC_MA32_127LR127 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR127\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR126 =
+	    debugfs_create_file("MAC_MA32_127LR126", 744, dir,
+				&MAC_MA32_127LR126_val,
+				&MAC_MA32_127LR126_fops);
+	if (MAC_MA32_127LR126 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR126\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR125 =
+	    debugfs_create_file("MAC_MA32_127LR125", 744, dir,
+				&MAC_MA32_127LR125_val,
+				&MAC_MA32_127LR125_fops);
+	if (MAC_MA32_127LR125 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR125\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR124 =
+	    debugfs_create_file("MAC_MA32_127LR124", 744, dir,
+				&MAC_MA32_127LR124_val,
+				&MAC_MA32_127LR124_fops);
+	if (MAC_MA32_127LR124 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR124\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR123 =
+	    debugfs_create_file("MAC_MA32_127LR123", 744, dir,
+				&MAC_MA32_127LR123_val,
+				&MAC_MA32_127LR123_fops);
+	if (MAC_MA32_127LR123 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR123\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR122 =
+	    debugfs_create_file("MAC_MA32_127LR122", 744, dir,
+				&MAC_MA32_127LR122_val,
+				&MAC_MA32_127LR122_fops);
+	if (MAC_MA32_127LR122 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR122\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR121 =
+	    debugfs_create_file("MAC_MA32_127LR121", 744, dir,
+				&MAC_MA32_127LR121_val,
+				&MAC_MA32_127LR121_fops);
+	if (MAC_MA32_127LR121 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR121\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR120 =
+	    debugfs_create_file("MAC_MA32_127LR120", 744, dir,
+				&MAC_MA32_127LR120_val,
+				&MAC_MA32_127LR120_fops);
+	if (MAC_MA32_127LR120 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR120\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR119 =
+	    debugfs_create_file("MAC_MA32_127LR119", 744, dir,
+				&MAC_MA32_127LR119_val,
+				&MAC_MA32_127LR119_fops);
+	if (MAC_MA32_127LR119 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR119\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR118 =
+	    debugfs_create_file("MAC_MA32_127LR118", 744, dir,
+				&MAC_MA32_127LR118_val,
+				&MAC_MA32_127LR118_fops);
+	if (MAC_MA32_127LR118 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR118\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR117 =
+	    debugfs_create_file("MAC_MA32_127LR117", 744, dir,
+				&MAC_MA32_127LR117_val,
+				&MAC_MA32_127LR117_fops);
+	if (MAC_MA32_127LR117 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR117\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR116 =
+	    debugfs_create_file("MAC_MA32_127LR116", 744, dir,
+				&MAC_MA32_127LR116_val,
+				&MAC_MA32_127LR116_fops);
+	if (MAC_MA32_127LR116 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR116\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR115 =
+	    debugfs_create_file("MAC_MA32_127LR115", 744, dir,
+				&MAC_MA32_127LR115_val,
+				&MAC_MA32_127LR115_fops);
+	if (MAC_MA32_127LR115 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR115\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR114 =
+	    debugfs_create_file("MAC_MA32_127LR114", 744, dir,
+				&MAC_MA32_127LR114_val,
+				&MAC_MA32_127LR114_fops);
+	if (MAC_MA32_127LR114 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR114\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR113 =
+	    debugfs_create_file("MAC_MA32_127LR113", 744, dir,
+				&MAC_MA32_127LR113_val,
+				&MAC_MA32_127LR113_fops);
+	if (MAC_MA32_127LR113 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR113\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR112 =
+	    debugfs_create_file("MAC_MA32_127LR112", 744, dir,
+				&MAC_MA32_127LR112_val,
+				&MAC_MA32_127LR112_fops);
+	if (MAC_MA32_127LR112 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR112\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR111 =
+	    debugfs_create_file("MAC_MA32_127LR111", 744, dir,
+				&MAC_MA32_127LR111_val,
+				&MAC_MA32_127LR111_fops);
+	if (MAC_MA32_127LR111 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR111\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR110 =
+	    debugfs_create_file("MAC_MA32_127LR110", 744, dir,
+				&MAC_MA32_127LR110_val,
+				&MAC_MA32_127LR110_fops);
+	if (MAC_MA32_127LR110 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR110\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR109 =
+	    debugfs_create_file("MAC_MA32_127LR109", 744, dir,
+				&MAC_MA32_127LR109_val,
+				&MAC_MA32_127LR109_fops);
+	if (MAC_MA32_127LR109 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR109\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR108 =
+	    debugfs_create_file("MAC_MA32_127LR108", 744, dir,
+				&MAC_MA32_127LR108_val,
+				&MAC_MA32_127LR108_fops);
+	if (MAC_MA32_127LR108 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR108\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR107 =
+	    debugfs_create_file("MAC_MA32_127LR107", 744, dir,
+				&MAC_MA32_127LR107_val,
+				&MAC_MA32_127LR107_fops);
+	if (MAC_MA32_127LR107 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR107\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR106 =
+	    debugfs_create_file("MAC_MA32_127LR106", 744, dir,
+				&MAC_MA32_127LR106_val,
+				&MAC_MA32_127LR106_fops);
+	if (MAC_MA32_127LR106 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR106\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR105 =
+	    debugfs_create_file("MAC_MA32_127LR105", 744, dir,
+				&MAC_MA32_127LR105_val,
+				&MAC_MA32_127LR105_fops);
+	if (MAC_MA32_127LR105 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR105\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR104 =
+	    debugfs_create_file("MAC_MA32_127LR104", 744, dir,
+				&MAC_MA32_127LR104_val,
+				&MAC_MA32_127LR104_fops);
+	if (MAC_MA32_127LR104 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR104\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR103 =
+	    debugfs_create_file("MAC_MA32_127LR103", 744, dir,
+				&MAC_MA32_127LR103_val,
+				&MAC_MA32_127LR103_fops);
+	if (MAC_MA32_127LR103 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR103\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR102 =
+	    debugfs_create_file("MAC_MA32_127LR102", 744, dir,
+				&MAC_MA32_127LR102_val,
+				&MAC_MA32_127LR102_fops);
+	if (MAC_MA32_127LR102 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR102\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR101 =
+	    debugfs_create_file("MAC_MA32_127LR101", 744, dir,
+				&MAC_MA32_127LR101_val,
+				&MAC_MA32_127LR101_fops);
+	if (MAC_MA32_127LR101 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR101\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR100 =
+	    debugfs_create_file("MAC_MA32_127LR100", 744, dir,
+				&MAC_MA32_127LR100_val,
+				&MAC_MA32_127LR100_fops);
+	if (MAC_MA32_127LR100 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR100\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR99 =
+	    debugfs_create_file("MAC_MA32_127LR99", 744, dir,
+				&MAC_MA32_127LR99_val, &MAC_MA32_127LR99_fops);
+	if (MAC_MA32_127LR99 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR99\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR98 =
+	    debugfs_create_file("MAC_MA32_127LR98", 744, dir,
+				&MAC_MA32_127LR98_val, &MAC_MA32_127LR98_fops);
+	if (MAC_MA32_127LR98 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR98\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR97 =
+	    debugfs_create_file("MAC_MA32_127LR97", 744, dir,
+				&MAC_MA32_127LR97_val, &MAC_MA32_127LR97_fops);
+	if (MAC_MA32_127LR97 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR97\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR96 =
+	    debugfs_create_file("MAC_MA32_127LR96", 744, dir,
+				&MAC_MA32_127LR96_val, &MAC_MA32_127LR96_fops);
+	if (MAC_MA32_127LR96 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR96\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR95 =
+	    debugfs_create_file("MAC_MA32_127LR95", 744, dir,
+				&MAC_MA32_127LR95_val, &MAC_MA32_127LR95_fops);
+	if (MAC_MA32_127LR95 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR95\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR94 =
+	    debugfs_create_file("MAC_MA32_127LR94", 744, dir,
+				&MAC_MA32_127LR94_val, &MAC_MA32_127LR94_fops);
+	if (MAC_MA32_127LR94 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR94\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR93 =
+	    debugfs_create_file("MAC_MA32_127LR93", 744, dir,
+				&MAC_MA32_127LR93_val, &MAC_MA32_127LR93_fops);
+	if (MAC_MA32_127LR93 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR93\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR92 =
+	    debugfs_create_file("MAC_MA32_127LR92", 744, dir,
+				&MAC_MA32_127LR92_val, &MAC_MA32_127LR92_fops);
+	if (MAC_MA32_127LR92 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR92\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR91 =
+	    debugfs_create_file("MAC_MA32_127LR91", 744, dir,
+				&MAC_MA32_127LR91_val, &MAC_MA32_127LR91_fops);
+	if (MAC_MA32_127LR91 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR91\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR90 =
+	    debugfs_create_file("MAC_MA32_127LR90", 744, dir,
+				&MAC_MA32_127LR90_val, &MAC_MA32_127LR90_fops);
+	if (MAC_MA32_127LR90 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR90\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR89 =
+	    debugfs_create_file("MAC_MA32_127LR89", 744, dir,
+				&MAC_MA32_127LR89_val, &MAC_MA32_127LR89_fops);
+	if (MAC_MA32_127LR89 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR89\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR88 =
+	    debugfs_create_file("MAC_MA32_127LR88", 744, dir,
+				&MAC_MA32_127LR88_val, &MAC_MA32_127LR88_fops);
+	if (MAC_MA32_127LR88 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR88\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR87 =
+	    debugfs_create_file("MAC_MA32_127LR87", 744, dir,
+				&MAC_MA32_127LR87_val, &MAC_MA32_127LR87_fops);
+	if (MAC_MA32_127LR87 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR87\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR86 =
+	    debugfs_create_file("MAC_MA32_127LR86", 744, dir,
+				&MAC_MA32_127LR86_val, &MAC_MA32_127LR86_fops);
+	if (MAC_MA32_127LR86 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR86\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR85 =
+	    debugfs_create_file("MAC_MA32_127LR85", 744, dir,
+				&MAC_MA32_127LR85_val, &MAC_MA32_127LR85_fops);
+	if (MAC_MA32_127LR85 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR85\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR84 =
+	    debugfs_create_file("MAC_MA32_127LR84", 744, dir,
+				&MAC_MA32_127LR84_val, &MAC_MA32_127LR84_fops);
+	if (MAC_MA32_127LR84 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR84\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR83 =
+	    debugfs_create_file("MAC_MA32_127LR83", 744, dir,
+				&MAC_MA32_127LR83_val, &MAC_MA32_127LR83_fops);
+	if (MAC_MA32_127LR83 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR83\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR82 =
+	    debugfs_create_file("MAC_MA32_127LR82", 744, dir,
+				&MAC_MA32_127LR82_val, &MAC_MA32_127LR82_fops);
+	if (MAC_MA32_127LR82 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR82\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR81 =
+	    debugfs_create_file("MAC_MA32_127LR81", 744, dir,
+				&MAC_MA32_127LR81_val, &MAC_MA32_127LR81_fops);
+	if (MAC_MA32_127LR81 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR81\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR80 =
+	    debugfs_create_file("MAC_MA32_127LR80", 744, dir,
+				&MAC_MA32_127LR80_val, &MAC_MA32_127LR80_fops);
+	if (MAC_MA32_127LR80 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR80\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR79 =
+	    debugfs_create_file("MAC_MA32_127LR79", 744, dir,
+				&MAC_MA32_127LR79_val, &MAC_MA32_127LR79_fops);
+	if (MAC_MA32_127LR79 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR79\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR78 =
+	    debugfs_create_file("MAC_MA32_127LR78", 744, dir,
+				&MAC_MA32_127LR78_val, &MAC_MA32_127LR78_fops);
+	if (MAC_MA32_127LR78 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR78\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR77 =
+	    debugfs_create_file("MAC_MA32_127LR77", 744, dir,
+				&MAC_MA32_127LR77_val, &MAC_MA32_127LR77_fops);
+	if (MAC_MA32_127LR77 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR77\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR76 =
+	    debugfs_create_file("MAC_MA32_127LR76", 744, dir,
+				&MAC_MA32_127LR76_val, &MAC_MA32_127LR76_fops);
+	if (MAC_MA32_127LR76 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR76\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR75 =
+	    debugfs_create_file("MAC_MA32_127LR75", 744, dir,
+				&MAC_MA32_127LR75_val, &MAC_MA32_127LR75_fops);
+	if (MAC_MA32_127LR75 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR75\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR74 =
+	    debugfs_create_file("MAC_MA32_127LR74", 744, dir,
+				&MAC_MA32_127LR74_val, &MAC_MA32_127LR74_fops);
+	if (MAC_MA32_127LR74 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR74\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR73 =
+	    debugfs_create_file("MAC_MA32_127LR73", 744, dir,
+				&MAC_MA32_127LR73_val, &MAC_MA32_127LR73_fops);
+	if (MAC_MA32_127LR73 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR73\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR72 =
+	    debugfs_create_file("MAC_MA32_127LR72", 744, dir,
+				&MAC_MA32_127LR72_val, &MAC_MA32_127LR72_fops);
+	if (MAC_MA32_127LR72 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR72\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR71 =
+	    debugfs_create_file("MAC_MA32_127LR71", 744, dir,
+				&MAC_MA32_127LR71_val, &MAC_MA32_127LR71_fops);
+	if (MAC_MA32_127LR71 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR71\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR70 =
+	    debugfs_create_file("MAC_MA32_127LR70", 744, dir,
+				&MAC_MA32_127LR70_val, &MAC_MA32_127LR70_fops);
+	if (MAC_MA32_127LR70 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR70\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR69 =
+	    debugfs_create_file("MAC_MA32_127LR69", 744, dir,
+				&MAC_MA32_127LR69_val, &MAC_MA32_127LR69_fops);
+	if (MAC_MA32_127LR69 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR69\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR68 =
+	    debugfs_create_file("MAC_MA32_127LR68", 744, dir,
+				&MAC_MA32_127LR68_val, &MAC_MA32_127LR68_fops);
+	if (MAC_MA32_127LR68 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR68\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR67 =
+	    debugfs_create_file("MAC_MA32_127LR67", 744, dir,
+				&MAC_MA32_127LR67_val, &MAC_MA32_127LR67_fops);
+	if (MAC_MA32_127LR67 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR67\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR66 =
+	    debugfs_create_file("MAC_MA32_127LR66", 744, dir,
+				&MAC_MA32_127LR66_val, &MAC_MA32_127LR66_fops);
+	if (MAC_MA32_127LR66 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR66\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR65 =
+	    debugfs_create_file("MAC_MA32_127LR65", 744, dir,
+				&MAC_MA32_127LR65_val, &MAC_MA32_127LR65_fops);
+	if (MAC_MA32_127LR65 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR65\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR64 =
+	    debugfs_create_file("MAC_MA32_127LR64", 744, dir,
+				&MAC_MA32_127LR64_val, &MAC_MA32_127LR64_fops);
+	if (MAC_MA32_127LR64 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR64\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR63 =
+	    debugfs_create_file("MAC_MA32_127LR63", 744, dir,
+				&MAC_MA32_127LR63_val, &MAC_MA32_127LR63_fops);
+	if (MAC_MA32_127LR63 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR63\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR62 =
+	    debugfs_create_file("MAC_MA32_127LR62", 744, dir,
+				&MAC_MA32_127LR62_val, &MAC_MA32_127LR62_fops);
+	if (MAC_MA32_127LR62 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR62\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR61 =
+	    debugfs_create_file("MAC_MA32_127LR61", 744, dir,
+				&MAC_MA32_127LR61_val, &MAC_MA32_127LR61_fops);
+	if (MAC_MA32_127LR61 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR61\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR60 =
+	    debugfs_create_file("MAC_MA32_127LR60", 744, dir,
+				&MAC_MA32_127LR60_val, &MAC_MA32_127LR60_fops);
+	if (MAC_MA32_127LR60 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR60\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR59 =
+	    debugfs_create_file("MAC_MA32_127LR59", 744, dir,
+				&MAC_MA32_127LR59_val, &MAC_MA32_127LR59_fops);
+	if (MAC_MA32_127LR59 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR59\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR58 =
+	    debugfs_create_file("MAC_MA32_127LR58", 744, dir,
+				&MAC_MA32_127LR58_val, &MAC_MA32_127LR58_fops);
+	if (MAC_MA32_127LR58 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR58\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR57 =
+	    debugfs_create_file("MAC_MA32_127LR57", 744, dir,
+				&MAC_MA32_127LR57_val, &MAC_MA32_127LR57_fops);
+	if (MAC_MA32_127LR57 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR57\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR56 =
+	    debugfs_create_file("MAC_MA32_127LR56", 744, dir,
+				&MAC_MA32_127LR56_val, &MAC_MA32_127LR56_fops);
+	if (MAC_MA32_127LR56 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR56\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR55 =
+	    debugfs_create_file("MAC_MA32_127LR55", 744, dir,
+				&MAC_MA32_127LR55_val, &MAC_MA32_127LR55_fops);
+	if (MAC_MA32_127LR55 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR55\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR54 =
+	    debugfs_create_file("MAC_MA32_127LR54", 744, dir,
+				&MAC_MA32_127LR54_val, &MAC_MA32_127LR54_fops);
+	if (MAC_MA32_127LR54 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR54\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR53 =
+	    debugfs_create_file("MAC_MA32_127LR53", 744, dir,
+				&MAC_MA32_127LR53_val, &MAC_MA32_127LR53_fops);
+	if (MAC_MA32_127LR53 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR53\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR52 =
+	    debugfs_create_file("MAC_MA32_127LR52", 744, dir,
+				&MAC_MA32_127LR52_val, &MAC_MA32_127LR52_fops);
+	if (MAC_MA32_127LR52 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR52\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR51 =
+	    debugfs_create_file("MAC_MA32_127LR51", 744, dir,
+				&MAC_MA32_127LR51_val, &MAC_MA32_127LR51_fops);
+	if (MAC_MA32_127LR51 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR51\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR50 =
+	    debugfs_create_file("MAC_MA32_127LR50", 744, dir,
+				&MAC_MA32_127LR50_val, &MAC_MA32_127LR50_fops);
+	if (MAC_MA32_127LR50 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR50\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR49 =
+	    debugfs_create_file("MAC_MA32_127LR49", 744, dir,
+				&MAC_MA32_127LR49_val, &MAC_MA32_127LR49_fops);
+	if (MAC_MA32_127LR49 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR49\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR48 =
+	    debugfs_create_file("MAC_MA32_127LR48", 744, dir,
+				&MAC_MA32_127LR48_val, &MAC_MA32_127LR48_fops);
+	if (MAC_MA32_127LR48 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR48\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR47 =
+	    debugfs_create_file("MAC_MA32_127LR47", 744, dir,
+				&MAC_MA32_127LR47_val, &MAC_MA32_127LR47_fops);
+	if (MAC_MA32_127LR47 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR47\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR46 =
+	    debugfs_create_file("MAC_MA32_127LR46", 744, dir,
+				&MAC_MA32_127LR46_val, &MAC_MA32_127LR46_fops);
+	if (MAC_MA32_127LR46 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR46\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR45 =
+	    debugfs_create_file("MAC_MA32_127LR45", 744, dir,
+				&MAC_MA32_127LR45_val, &MAC_MA32_127LR45_fops);
+	if (MAC_MA32_127LR45 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR45\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR44 =
+	    debugfs_create_file("MAC_MA32_127LR44", 744, dir,
+				&MAC_MA32_127LR44_val, &MAC_MA32_127LR44_fops);
+	if (MAC_MA32_127LR44 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR44\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR43 =
+	    debugfs_create_file("MAC_MA32_127LR43", 744, dir,
+				&MAC_MA32_127LR43_val, &MAC_MA32_127LR43_fops);
+	if (MAC_MA32_127LR43 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR43\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR42 =
+	    debugfs_create_file("MAC_MA32_127LR42", 744, dir,
+				&MAC_MA32_127LR42_val, &MAC_MA32_127LR42_fops);
+	if (MAC_MA32_127LR42 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR42\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR41 =
+	    debugfs_create_file("MAC_MA32_127LR41", 744, dir,
+				&MAC_MA32_127LR41_val, &MAC_MA32_127LR41_fops);
+	if (MAC_MA32_127LR41 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR41\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR40 =
+	    debugfs_create_file("MAC_MA32_127LR40", 744, dir,
+				&MAC_MA32_127LR40_val, &MAC_MA32_127LR40_fops);
+	if (MAC_MA32_127LR40 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR40\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR39 =
+	    debugfs_create_file("MAC_MA32_127LR39", 744, dir,
+				&MAC_MA32_127LR39_val, &MAC_MA32_127LR39_fops);
+	if (MAC_MA32_127LR39 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR39\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR38 =
+	    debugfs_create_file("MAC_MA32_127LR38", 744, dir,
+				&MAC_MA32_127LR38_val, &MAC_MA32_127LR38_fops);
+	if (MAC_MA32_127LR38 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR38\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR37 =
+	    debugfs_create_file("MAC_MA32_127LR37", 744, dir,
+				&MAC_MA32_127LR37_val, &MAC_MA32_127LR37_fops);
+	if (MAC_MA32_127LR37 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR37\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR36 =
+	    debugfs_create_file("MAC_MA32_127LR36", 744, dir,
+				&MAC_MA32_127LR36_val, &MAC_MA32_127LR36_fops);
+	if (MAC_MA32_127LR36 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR36\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR35 =
+	    debugfs_create_file("MAC_MA32_127LR35", 744, dir,
+				&MAC_MA32_127LR35_val, &MAC_MA32_127LR35_fops);
+	if (MAC_MA32_127LR35 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR35\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR34 =
+	    debugfs_create_file("MAC_MA32_127LR34", 744, dir,
+				&MAC_MA32_127LR34_val, &MAC_MA32_127LR34_fops);
+	if (MAC_MA32_127LR34 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR34\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR33 =
+	    debugfs_create_file("MAC_MA32_127LR33", 744, dir,
+				&MAC_MA32_127LR33_val, &MAC_MA32_127LR33_fops);
+	if (MAC_MA32_127LR33 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR33\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127LR32 =
+	    debugfs_create_file("MAC_MA32_127LR32", 744, dir,
+				&MAC_MA32_127LR32_val, &MAC_MA32_127LR32_fops);
+	if (MAC_MA32_127LR32 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127LR32\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR127 =
+	    debugfs_create_file("MAC_MA32_127HR127", 744, dir,
+				&MAC_MA32_127HR127_val,
+				&MAC_MA32_127HR127_fops);
+	if (MAC_MA32_127HR127 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR127\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR126 =
+	    debugfs_create_file("MAC_MA32_127HR126", 744, dir,
+				&MAC_MA32_127HR126_val,
+				&MAC_MA32_127HR126_fops);
+	if (MAC_MA32_127HR126 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR126\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR125 =
+	    debugfs_create_file("MAC_MA32_127HR125", 744, dir,
+				&MAC_MA32_127HR125_val,
+				&MAC_MA32_127HR125_fops);
+	if (MAC_MA32_127HR125 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR125\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR124 =
+	    debugfs_create_file("MAC_MA32_127HR124", 744, dir,
+				&MAC_MA32_127HR124_val,
+				&MAC_MA32_127HR124_fops);
+	if (MAC_MA32_127HR124 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR124\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR123 =
+	    debugfs_create_file("MAC_MA32_127HR123", 744, dir,
+				&MAC_MA32_127HR123_val,
+				&MAC_MA32_127HR123_fops);
+	if (MAC_MA32_127HR123 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR123\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR122 =
+	    debugfs_create_file("MAC_MA32_127HR122", 744, dir,
+				&MAC_MA32_127HR122_val,
+				&MAC_MA32_127HR122_fops);
+	if (MAC_MA32_127HR122 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR122\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR121 =
+	    debugfs_create_file("MAC_MA32_127HR121", 744, dir,
+				&MAC_MA32_127HR121_val,
+				&MAC_MA32_127HR121_fops);
+	if (MAC_MA32_127HR121 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR121\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR120 =
+	    debugfs_create_file("MAC_MA32_127HR120", 744, dir,
+				&MAC_MA32_127HR120_val,
+				&MAC_MA32_127HR120_fops);
+	if (MAC_MA32_127HR120 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR120\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR119 =
+	    debugfs_create_file("MAC_MA32_127HR119", 744, dir,
+				&MAC_MA32_127HR119_val,
+				&MAC_MA32_127HR119_fops);
+	if (MAC_MA32_127HR119 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR119\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR118 =
+	    debugfs_create_file("MAC_MA32_127HR118", 744, dir,
+				&MAC_MA32_127HR118_val,
+				&MAC_MA32_127HR118_fops);
+	if (MAC_MA32_127HR118 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR118\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR117 =
+	    debugfs_create_file("MAC_MA32_127HR117", 744, dir,
+				&MAC_MA32_127HR117_val,
+				&MAC_MA32_127HR117_fops);
+	if (MAC_MA32_127HR117 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR117\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR116 =
+	    debugfs_create_file("MAC_MA32_127HR116", 744, dir,
+				&MAC_MA32_127HR116_val,
+				&MAC_MA32_127HR116_fops);
+	if (MAC_MA32_127HR116 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR116\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR115 =
+	    debugfs_create_file("MAC_MA32_127HR115", 744, dir,
+				&MAC_MA32_127HR115_val,
+				&MAC_MA32_127HR115_fops);
+	if (MAC_MA32_127HR115 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR115\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR114 =
+	    debugfs_create_file("MAC_MA32_127HR114", 744, dir,
+				&MAC_MA32_127HR114_val,
+				&MAC_MA32_127HR114_fops);
+	if (MAC_MA32_127HR114 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR114\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR113 =
+	    debugfs_create_file("MAC_MA32_127HR113", 744, dir,
+				&MAC_MA32_127HR113_val,
+				&MAC_MA32_127HR113_fops);
+	if (MAC_MA32_127HR113 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR113\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR112 =
+	    debugfs_create_file("MAC_MA32_127HR112", 744, dir,
+				&MAC_MA32_127HR112_val,
+				&MAC_MA32_127HR112_fops);
+	if (MAC_MA32_127HR112 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR112\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR111 =
+	    debugfs_create_file("MAC_MA32_127HR111", 744, dir,
+				&MAC_MA32_127HR111_val,
+				&MAC_MA32_127HR111_fops);
+	if (MAC_MA32_127HR111 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR111\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR110 =
+	    debugfs_create_file("MAC_MA32_127HR110", 744, dir,
+				&MAC_MA32_127HR110_val,
+				&MAC_MA32_127HR110_fops);
+	if (MAC_MA32_127HR110 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR110\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR109 =
+	    debugfs_create_file("MAC_MA32_127HR109", 744, dir,
+				&MAC_MA32_127HR109_val,
+				&MAC_MA32_127HR109_fops);
+	if (MAC_MA32_127HR109 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR109\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR108 =
+	    debugfs_create_file("MAC_MA32_127HR108", 744, dir,
+				&MAC_MA32_127HR108_val,
+				&MAC_MA32_127HR108_fops);
+	if (MAC_MA32_127HR108 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR108\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR107 =
+	    debugfs_create_file("MAC_MA32_127HR107", 744, dir,
+				&MAC_MA32_127HR107_val,
+				&MAC_MA32_127HR107_fops);
+	if (MAC_MA32_127HR107 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR107\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR106 =
+	    debugfs_create_file("MAC_MA32_127HR106", 744, dir,
+				&MAC_MA32_127HR106_val,
+				&MAC_MA32_127HR106_fops);
+	if (MAC_MA32_127HR106 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR106\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR105 =
+	    debugfs_create_file("MAC_MA32_127HR105", 744, dir,
+				&MAC_MA32_127HR105_val,
+				&MAC_MA32_127HR105_fops);
+	if (MAC_MA32_127HR105 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR105\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR104 =
+	    debugfs_create_file("MAC_MA32_127HR104", 744, dir,
+				&MAC_MA32_127HR104_val,
+				&MAC_MA32_127HR104_fops);
+	if (MAC_MA32_127HR104 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR104\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR103 =
+	    debugfs_create_file("MAC_MA32_127HR103", 744, dir,
+				&MAC_MA32_127HR103_val,
+				&MAC_MA32_127HR103_fops);
+	if (MAC_MA32_127HR103 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR103\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR102 =
+	    debugfs_create_file("MAC_MA32_127HR102", 744, dir,
+				&MAC_MA32_127HR102_val,
+				&MAC_MA32_127HR102_fops);
+	if (MAC_MA32_127HR102 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR102\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR101 =
+	    debugfs_create_file("MAC_MA32_127HR101", 744, dir,
+				&MAC_MA32_127HR101_val,
+				&MAC_MA32_127HR101_fops);
+	if (MAC_MA32_127HR101 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR101\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR100 =
+	    debugfs_create_file("MAC_MA32_127HR100", 744, dir,
+				&MAC_MA32_127HR100_val,
+				&MAC_MA32_127HR100_fops);
+	if (MAC_MA32_127HR100 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR100\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR99 =
+	    debugfs_create_file("MAC_MA32_127HR99", 744, dir,
+				&MAC_MA32_127HR99_val, &MAC_MA32_127HR99_fops);
+	if (MAC_MA32_127HR99 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR99\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR98 =
+	    debugfs_create_file("MAC_MA32_127HR98", 744, dir,
+				&MAC_MA32_127HR98_val, &MAC_MA32_127HR98_fops);
+	if (MAC_MA32_127HR98 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR98\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR97 =
+	    debugfs_create_file("MAC_MA32_127HR97", 744, dir,
+				&MAC_MA32_127HR97_val, &MAC_MA32_127HR97_fops);
+	if (MAC_MA32_127HR97 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR97\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR96 =
+	    debugfs_create_file("MAC_MA32_127HR96", 744, dir,
+				&MAC_MA32_127HR96_val, &MAC_MA32_127HR96_fops);
+	if (MAC_MA32_127HR96 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR96\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR95 =
+	    debugfs_create_file("MAC_MA32_127HR95", 744, dir,
+				&MAC_MA32_127HR95_val, &MAC_MA32_127HR95_fops);
+	if (MAC_MA32_127HR95 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR95\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR94 =
+	    debugfs_create_file("MAC_MA32_127HR94", 744, dir,
+				&MAC_MA32_127HR94_val, &MAC_MA32_127HR94_fops);
+	if (MAC_MA32_127HR94 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR94\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR93 =
+	    debugfs_create_file("MAC_MA32_127HR93", 744, dir,
+				&MAC_MA32_127HR93_val, &MAC_MA32_127HR93_fops);
+	if (MAC_MA32_127HR93 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR93\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR92 =
+	    debugfs_create_file("MAC_MA32_127HR92", 744, dir,
+				&MAC_MA32_127HR92_val, &MAC_MA32_127HR92_fops);
+	if (MAC_MA32_127HR92 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR92\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR91 =
+	    debugfs_create_file("MAC_MA32_127HR91", 744, dir,
+				&MAC_MA32_127HR91_val, &MAC_MA32_127HR91_fops);
+	if (MAC_MA32_127HR91 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR91\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR90 =
+	    debugfs_create_file("MAC_MA32_127HR90", 744, dir,
+				&MAC_MA32_127HR90_val, &MAC_MA32_127HR90_fops);
+	if (MAC_MA32_127HR90 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR90\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR89 =
+	    debugfs_create_file("MAC_MA32_127HR89", 744, dir,
+				&MAC_MA32_127HR89_val, &MAC_MA32_127HR89_fops);
+	if (MAC_MA32_127HR89 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR89\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR88 =
+	    debugfs_create_file("MAC_MA32_127HR88", 744, dir,
+				&MAC_MA32_127HR88_val, &MAC_MA32_127HR88_fops);
+	if (MAC_MA32_127HR88 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR88\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR87 =
+	    debugfs_create_file("MAC_MA32_127HR87", 744, dir,
+				&MAC_MA32_127HR87_val, &MAC_MA32_127HR87_fops);
+	if (MAC_MA32_127HR87 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR87\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR86 =
+	    debugfs_create_file("MAC_MA32_127HR86", 744, dir,
+				&MAC_MA32_127HR86_val, &MAC_MA32_127HR86_fops);
+	if (MAC_MA32_127HR86 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR86\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR85 =
+	    debugfs_create_file("MAC_MA32_127HR85", 744, dir,
+				&MAC_MA32_127HR85_val, &MAC_MA32_127HR85_fops);
+	if (MAC_MA32_127HR85 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR85\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR84 =
+	    debugfs_create_file("MAC_MA32_127HR84", 744, dir,
+				&MAC_MA32_127HR84_val, &MAC_MA32_127HR84_fops);
+	if (MAC_MA32_127HR84 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR84\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR83 =
+	    debugfs_create_file("MAC_MA32_127HR83", 744, dir,
+				&MAC_MA32_127HR83_val, &MAC_MA32_127HR83_fops);
+	if (MAC_MA32_127HR83 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR83\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR82 =
+	    debugfs_create_file("MAC_MA32_127HR82", 744, dir,
+				&MAC_MA32_127HR82_val, &MAC_MA32_127HR82_fops);
+	if (MAC_MA32_127HR82 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR82\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR81 =
+	    debugfs_create_file("MAC_MA32_127HR81", 744, dir,
+				&MAC_MA32_127HR81_val, &MAC_MA32_127HR81_fops);
+	if (MAC_MA32_127HR81 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR81\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR80 =
+	    debugfs_create_file("MAC_MA32_127HR80", 744, dir,
+				&MAC_MA32_127HR80_val, &MAC_MA32_127HR80_fops);
+	if (MAC_MA32_127HR80 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR80\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR79 =
+	    debugfs_create_file("MAC_MA32_127HR79", 744, dir,
+				&MAC_MA32_127HR79_val, &MAC_MA32_127HR79_fops);
+	if (MAC_MA32_127HR79 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR79\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR78 =
+	    debugfs_create_file("MAC_MA32_127HR78", 744, dir,
+				&MAC_MA32_127HR78_val, &MAC_MA32_127HR78_fops);
+	if (MAC_MA32_127HR78 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR78\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR77 =
+	    debugfs_create_file("MAC_MA32_127HR77", 744, dir,
+				&MAC_MA32_127HR77_val, &MAC_MA32_127HR77_fops);
+	if (MAC_MA32_127HR77 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR77\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR76 =
+	    debugfs_create_file("MAC_MA32_127HR76", 744, dir,
+				&MAC_MA32_127HR76_val, &MAC_MA32_127HR76_fops);
+	if (MAC_MA32_127HR76 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR76\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR75 =
+	    debugfs_create_file("MAC_MA32_127HR75", 744, dir,
+				&MAC_MA32_127HR75_val, &MAC_MA32_127HR75_fops);
+	if (MAC_MA32_127HR75 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR75\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR74 =
+	    debugfs_create_file("MAC_MA32_127HR74", 744, dir,
+				&MAC_MA32_127HR74_val, &MAC_MA32_127HR74_fops);
+	if (MAC_MA32_127HR74 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR74\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR73 =
+	    debugfs_create_file("MAC_MA32_127HR73", 744, dir,
+				&MAC_MA32_127HR73_val, &MAC_MA32_127HR73_fops);
+	if (MAC_MA32_127HR73 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR73\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR72 =
+	    debugfs_create_file("MAC_MA32_127HR72", 744, dir,
+				&MAC_MA32_127HR72_val, &MAC_MA32_127HR72_fops);
+	if (MAC_MA32_127HR72 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR72\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR71 =
+	    debugfs_create_file("MAC_MA32_127HR71", 744, dir,
+				&MAC_MA32_127HR71_val, &MAC_MA32_127HR71_fops);
+	if (MAC_MA32_127HR71 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR71\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR70 =
+	    debugfs_create_file("MAC_MA32_127HR70", 744, dir,
+				&MAC_MA32_127HR70_val, &MAC_MA32_127HR70_fops);
+	if (MAC_MA32_127HR70 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR70\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR69 =
+	    debugfs_create_file("MAC_MA32_127HR69", 744, dir,
+				&MAC_MA32_127HR69_val, &MAC_MA32_127HR69_fops);
+	if (MAC_MA32_127HR69 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR69\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR68 =
+	    debugfs_create_file("MAC_MA32_127HR68", 744, dir,
+				&MAC_MA32_127HR68_val, &MAC_MA32_127HR68_fops);
+	if (MAC_MA32_127HR68 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR68\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR67 =
+	    debugfs_create_file("MAC_MA32_127HR67", 744, dir,
+				&MAC_MA32_127HR67_val, &MAC_MA32_127HR67_fops);
+	if (MAC_MA32_127HR67 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR67\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR66 =
+	    debugfs_create_file("MAC_MA32_127HR66", 744, dir,
+				&MAC_MA32_127HR66_val, &MAC_MA32_127HR66_fops);
+	if (MAC_MA32_127HR66 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR66\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR65 =
+	    debugfs_create_file("MAC_MA32_127HR65", 744, dir,
+				&MAC_MA32_127HR65_val, &MAC_MA32_127HR65_fops);
+	if (MAC_MA32_127HR65 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR65\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR64 =
+	    debugfs_create_file("MAC_MA32_127HR64", 744, dir,
+				&MAC_MA32_127HR64_val, &MAC_MA32_127HR64_fops);
+	if (MAC_MA32_127HR64 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR64\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR63 =
+	    debugfs_create_file("MAC_MA32_127HR63", 744, dir,
+				&MAC_MA32_127HR63_val, &MAC_MA32_127HR63_fops);
+	if (MAC_MA32_127HR63 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR63\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR62 =
+	    debugfs_create_file("MAC_MA32_127HR62", 744, dir,
+				&MAC_MA32_127HR62_val, &MAC_MA32_127HR62_fops);
+	if (MAC_MA32_127HR62 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR62\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR61 =
+	    debugfs_create_file("MAC_MA32_127HR61", 744, dir,
+				&MAC_MA32_127HR61_val, &MAC_MA32_127HR61_fops);
+	if (MAC_MA32_127HR61 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR61\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR60 =
+	    debugfs_create_file("MAC_MA32_127HR60", 744, dir,
+				&MAC_MA32_127HR60_val, &MAC_MA32_127HR60_fops);
+	if (MAC_MA32_127HR60 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR60\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR59 =
+	    debugfs_create_file("MAC_MA32_127HR59", 744, dir,
+				&MAC_MA32_127HR59_val, &MAC_MA32_127HR59_fops);
+	if (MAC_MA32_127HR59 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR59\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR58 =
+	    debugfs_create_file("MAC_MA32_127HR58", 744, dir,
+				&MAC_MA32_127HR58_val, &MAC_MA32_127HR58_fops);
+	if (MAC_MA32_127HR58 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR58\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR57 =
+	    debugfs_create_file("MAC_MA32_127HR57", 744, dir,
+				&MAC_MA32_127HR57_val, &MAC_MA32_127HR57_fops);
+	if (MAC_MA32_127HR57 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR57\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR56 =
+	    debugfs_create_file("MAC_MA32_127HR56", 744, dir,
+				&MAC_MA32_127HR56_val, &MAC_MA32_127HR56_fops);
+	if (MAC_MA32_127HR56 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR56\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR55 =
+	    debugfs_create_file("MAC_MA32_127HR55", 744, dir,
+				&MAC_MA32_127HR55_val, &MAC_MA32_127HR55_fops);
+	if (MAC_MA32_127HR55 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR55\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR54 =
+	    debugfs_create_file("MAC_MA32_127HR54", 744, dir,
+				&MAC_MA32_127HR54_val, &MAC_MA32_127HR54_fops);
+	if (MAC_MA32_127HR54 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR54\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR53 =
+	    debugfs_create_file("MAC_MA32_127HR53", 744, dir,
+				&MAC_MA32_127HR53_val, &MAC_MA32_127HR53_fops);
+	if (MAC_MA32_127HR53 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR53\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR52 =
+	    debugfs_create_file("MAC_MA32_127HR52", 744, dir,
+				&MAC_MA32_127HR52_val, &MAC_MA32_127HR52_fops);
+	if (MAC_MA32_127HR52 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR52\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR51 =
+	    debugfs_create_file("MAC_MA32_127HR51", 744, dir,
+				&MAC_MA32_127HR51_val, &MAC_MA32_127HR51_fops);
+	if (MAC_MA32_127HR51 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR51\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR50 =
+	    debugfs_create_file("MAC_MA32_127HR50", 744, dir,
+				&MAC_MA32_127HR50_val, &MAC_MA32_127HR50_fops);
+	if (MAC_MA32_127HR50 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR50\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR49 =
+	    debugfs_create_file("MAC_MA32_127HR49", 744, dir,
+				&MAC_MA32_127HR49_val, &MAC_MA32_127HR49_fops);
+	if (MAC_MA32_127HR49 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR49\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR48 =
+	    debugfs_create_file("MAC_MA32_127HR48", 744, dir,
+				&MAC_MA32_127HR48_val, &MAC_MA32_127HR48_fops);
+	if (MAC_MA32_127HR48 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR48\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR47 =
+	    debugfs_create_file("MAC_MA32_127HR47", 744, dir,
+				&MAC_MA32_127HR47_val, &MAC_MA32_127HR47_fops);
+	if (MAC_MA32_127HR47 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR47\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR46 =
+	    debugfs_create_file("MAC_MA32_127HR46", 744, dir,
+				&MAC_MA32_127HR46_val, &MAC_MA32_127HR46_fops);
+	if (MAC_MA32_127HR46 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR46\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR45 =
+	    debugfs_create_file("MAC_MA32_127HR45", 744, dir,
+				&MAC_MA32_127HR45_val, &MAC_MA32_127HR45_fops);
+	if (MAC_MA32_127HR45 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR45\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR44 =
+	    debugfs_create_file("MAC_MA32_127HR44", 744, dir,
+				&MAC_MA32_127HR44_val, &MAC_MA32_127HR44_fops);
+	if (MAC_MA32_127HR44 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR44\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR43 =
+	    debugfs_create_file("MAC_MA32_127HR43", 744, dir,
+				&MAC_MA32_127HR43_val, &MAC_MA32_127HR43_fops);
+	if (MAC_MA32_127HR43 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR43\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR42 =
+	    debugfs_create_file("MAC_MA32_127HR42", 744, dir,
+				&MAC_MA32_127HR42_val, &MAC_MA32_127HR42_fops);
+	if (MAC_MA32_127HR42 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR42\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR41 =
+	    debugfs_create_file("MAC_MA32_127HR41", 744, dir,
+				&MAC_MA32_127HR41_val, &MAC_MA32_127HR41_fops);
+	if (MAC_MA32_127HR41 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR41\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR40 =
+	    debugfs_create_file("MAC_MA32_127HR40", 744, dir,
+				&MAC_MA32_127HR40_val, &MAC_MA32_127HR40_fops);
+	if (MAC_MA32_127HR40 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR40\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR39 =
+	    debugfs_create_file("MAC_MA32_127HR39", 744, dir,
+				&MAC_MA32_127HR39_val, &MAC_MA32_127HR39_fops);
+	if (MAC_MA32_127HR39 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR39\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR38 =
+	    debugfs_create_file("MAC_MA32_127HR38", 744, dir,
+				&MAC_MA32_127HR38_val, &MAC_MA32_127HR38_fops);
+	if (MAC_MA32_127HR38 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR38\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR37 =
+	    debugfs_create_file("MAC_MA32_127HR37", 744, dir,
+				&MAC_MA32_127HR37_val, &MAC_MA32_127HR37_fops);
+	if (MAC_MA32_127HR37 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR37\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR36 =
+	    debugfs_create_file("MAC_MA32_127HR36", 744, dir,
+				&MAC_MA32_127HR36_val, &MAC_MA32_127HR36_fops);
+	if (MAC_MA32_127HR36 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR36\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR35 =
+	    debugfs_create_file("MAC_MA32_127HR35", 744, dir,
+				&MAC_MA32_127HR35_val, &MAC_MA32_127HR35_fops);
+	if (MAC_MA32_127HR35 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR35\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR34 =
+	    debugfs_create_file("MAC_MA32_127HR34", 744, dir,
+				&MAC_MA32_127HR34_val, &MAC_MA32_127HR34_fops);
+	if (MAC_MA32_127HR34 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR34\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR33 =
+	    debugfs_create_file("MAC_MA32_127HR33", 744, dir,
+				&MAC_MA32_127HR33_val, &MAC_MA32_127HR33_fops);
+	if (MAC_MA32_127HR33 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR33\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA32_127HR32 =
+	    debugfs_create_file("MAC_MA32_127HR32", 744, dir,
+				&MAC_MA32_127HR32_val, &MAC_MA32_127HR32_fops);
+	if (MAC_MA32_127HR32 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA32_127HR32\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR31 =
+	    debugfs_create_file("MAC_MA1_31LR31", 744, dir, &MAC_MA1_31LR31_val,
+				&MAC_MA1_31LR31_fops);
+	if (MAC_MA1_31LR31 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR31\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR30 =
+	    debugfs_create_file("MAC_MA1_31LR30", 744, dir, &MAC_MA1_31LR30_val,
+				&MAC_MA1_31LR30_fops);
+	if (MAC_MA1_31LR30 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR30\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR29 =
+	    debugfs_create_file("MAC_MA1_31LR29", 744, dir, &MAC_MA1_31LR29_val,
+				&MAC_MA1_31LR29_fops);
+	if (MAC_MA1_31LR29 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR29\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR28 =
+	    debugfs_create_file("MAC_MA1_31LR28", 744, dir, &MAC_MA1_31LR28_val,
+				&MAC_MA1_31LR28_fops);
+	if (MAC_MA1_31LR28 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR28\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR27 =
+	    debugfs_create_file("MAC_MA1_31LR27", 744, dir, &MAC_MA1_31LR27_val,
+				&MAC_MA1_31LR27_fops);
+	if (MAC_MA1_31LR27 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR27\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR26 =
+	    debugfs_create_file("MAC_MA1_31LR26", 744, dir, &MAC_MA1_31LR26_val,
+				&MAC_MA1_31LR26_fops);
+	if (MAC_MA1_31LR26 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR26\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR25 =
+	    debugfs_create_file("MAC_MA1_31LR25", 744, dir, &MAC_MA1_31LR25_val,
+				&MAC_MA1_31LR25_fops);
+	if (MAC_MA1_31LR25 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR25\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR24 =
+	    debugfs_create_file("MAC_MA1_31LR24", 744, dir, &MAC_MA1_31LR24_val,
+				&MAC_MA1_31LR24_fops);
+	if (MAC_MA1_31LR24 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR24\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR23 =
+	    debugfs_create_file("MAC_MA1_31LR23", 744, dir, &MAC_MA1_31LR23_val,
+				&MAC_MA1_31LR23_fops);
+	if (MAC_MA1_31LR23 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR23\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR22 =
+	    debugfs_create_file("MAC_MA1_31LR22", 744, dir, &MAC_MA1_31LR22_val,
+				&MAC_MA1_31LR22_fops);
+	if (MAC_MA1_31LR22 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR22\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR21 =
+	    debugfs_create_file("MAC_MA1_31LR21", 744, dir, &MAC_MA1_31LR21_val,
+				&MAC_MA1_31LR21_fops);
+	if (MAC_MA1_31LR21 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR21\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR20 =
+	    debugfs_create_file("MAC_MA1_31LR20", 744, dir, &MAC_MA1_31LR20_val,
+				&MAC_MA1_31LR20_fops);
+	if (MAC_MA1_31LR20 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR20\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR19 =
+	    debugfs_create_file("MAC_MA1_31LR19", 744, dir, &MAC_MA1_31LR19_val,
+				&MAC_MA1_31LR19_fops);
+	if (MAC_MA1_31LR19 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR19\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR18 =
+	    debugfs_create_file("MAC_MA1_31LR18", 744, dir, &MAC_MA1_31LR18_val,
+				&MAC_MA1_31LR18_fops);
+	if (MAC_MA1_31LR18 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR18\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR17 =
+	    debugfs_create_file("MAC_MA1_31LR17", 744, dir, &MAC_MA1_31LR17_val,
+				&MAC_MA1_31LR17_fops);
+	if (MAC_MA1_31LR17 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR17\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR16 =
+	    debugfs_create_file("MAC_MA1_31LR16", 744, dir, &MAC_MA1_31LR16_val,
+				&MAC_MA1_31LR16_fops);
+	if (MAC_MA1_31LR16 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR16\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR15 =
+	    debugfs_create_file("MAC_MA1_31LR15", 744, dir, &MAC_MA1_31LR15_val,
+				&MAC_MA1_31LR15_fops);
+	if (MAC_MA1_31LR15 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR15\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR14 =
+	    debugfs_create_file("MAC_MA1_31LR14", 744, dir, &MAC_MA1_31LR14_val,
+				&MAC_MA1_31LR14_fops);
+	if (MAC_MA1_31LR14 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR14\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR13 =
+	    debugfs_create_file("MAC_MA1_31LR13", 744, dir, &MAC_MA1_31LR13_val,
+				&MAC_MA1_31LR13_fops);
+	if (MAC_MA1_31LR13 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR13\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR12 =
+	    debugfs_create_file("MAC_MA1_31LR12", 744, dir, &MAC_MA1_31LR12_val,
+				&MAC_MA1_31LR12_fops);
+	if (MAC_MA1_31LR12 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR12\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR11 =
+	    debugfs_create_file("MAC_MA1_31LR11", 744, dir, &MAC_MA1_31LR11_val,
+				&MAC_MA1_31LR11_fops);
+	if (MAC_MA1_31LR11 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR11\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR10 =
+	    debugfs_create_file("MAC_MA1_31LR10", 744, dir, &MAC_MA1_31LR10_val,
+				&MAC_MA1_31LR10_fops);
+	if (MAC_MA1_31LR10 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR10\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR9 =
+	    debugfs_create_file("MAC_MA1_31LR9", 744, dir, &MAC_MA1_31LR9_val,
+				&MAC_MA1_31LR9_fops);
+	if (MAC_MA1_31LR9 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR9\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR8 =
+	    debugfs_create_file("MAC_MA1_31LR8", 744, dir, &MAC_MA1_31LR8_val,
+				&MAC_MA1_31LR8_fops);
+	if (MAC_MA1_31LR8 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR8\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR7 =
+	    debugfs_create_file("MAC_MA1_31LR7", 744, dir, &MAC_MA1_31LR7_val,
+				&MAC_MA1_31LR7_fops);
+	if (MAC_MA1_31LR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR6 =
+	    debugfs_create_file("MAC_MA1_31LR6", 744, dir, &MAC_MA1_31LR6_val,
+				&MAC_MA1_31LR6_fops);
+	if (MAC_MA1_31LR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR5 =
+	    debugfs_create_file("MAC_MA1_31LR5", 744, dir, &MAC_MA1_31LR5_val,
+				&MAC_MA1_31LR5_fops);
+	if (MAC_MA1_31LR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR4 =
+	    debugfs_create_file("MAC_MA1_31LR4", 744, dir, &MAC_MA1_31LR4_val,
+				&MAC_MA1_31LR4_fops);
+	if (MAC_MA1_31LR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR3 =
+	    debugfs_create_file("MAC_MA1_31LR3", 744, dir, &MAC_MA1_31LR3_val,
+				&MAC_MA1_31LR3_fops);
+	if (MAC_MA1_31LR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR2 =
+	    debugfs_create_file("MAC_MA1_31LR2", 744, dir, &MAC_MA1_31LR2_val,
+				&MAC_MA1_31LR2_fops);
+	if (MAC_MA1_31LR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31LR1 =
+	    debugfs_create_file("MAC_MA1_31LR1", 744, dir, &MAC_MA1_31LR1_val,
+				&MAC_MA1_31LR1_fops);
+	if (MAC_MA1_31LR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31LR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR31 =
+	    debugfs_create_file("MAC_MA1_31HR31", 744, dir, &MAC_MA1_31HR31_val,
+				&MAC_MA1_31HR31_fops);
+	if (MAC_MA1_31HR31 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR31\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR30 =
+	    debugfs_create_file("MAC_MA1_31HR30", 744, dir, &MAC_MA1_31HR30_val,
+				&MAC_MA1_31HR30_fops);
+	if (MAC_MA1_31HR30 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR30\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR29 =
+	    debugfs_create_file("MAC_MA1_31HR29", 744, dir, &MAC_MA1_31HR29_val,
+				&MAC_MA1_31HR29_fops);
+	if (MAC_MA1_31HR29 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR29\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR28 =
+	    debugfs_create_file("MAC_MA1_31HR28", 744, dir, &MAC_MA1_31HR28_val,
+				&MAC_MA1_31HR28_fops);
+	if (MAC_MA1_31HR28 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR28\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR27 =
+	    debugfs_create_file("MAC_MA1_31HR27", 744, dir, &MAC_MA1_31HR27_val,
+				&MAC_MA1_31HR27_fops);
+	if (MAC_MA1_31HR27 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR27\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR26 =
+	    debugfs_create_file("MAC_MA1_31HR26", 744, dir, &MAC_MA1_31HR26_val,
+				&MAC_MA1_31HR26_fops);
+	if (MAC_MA1_31HR26 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR26\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR25 =
+	    debugfs_create_file("MAC_MA1_31HR25", 744, dir, &MAC_MA1_31HR25_val,
+				&MAC_MA1_31HR25_fops);
+	if (MAC_MA1_31HR25 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR25\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR24 =
+	    debugfs_create_file("MAC_MA1_31HR24", 744, dir, &MAC_MA1_31HR24_val,
+				&MAC_MA1_31HR24_fops);
+	if (MAC_MA1_31HR24 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR24\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR23 =
+	    debugfs_create_file("MAC_MA1_31HR23", 744, dir, &MAC_MA1_31HR23_val,
+				&MAC_MA1_31HR23_fops);
+	if (MAC_MA1_31HR23 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR23\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR22 =
+	    debugfs_create_file("MAC_MA1_31HR22", 744, dir, &MAC_MA1_31HR22_val,
+				&MAC_MA1_31HR22_fops);
+	if (MAC_MA1_31HR22 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR22\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR21 =
+	    debugfs_create_file("MAC_MA1_31HR21", 744, dir, &MAC_MA1_31HR21_val,
+				&MAC_MA1_31HR21_fops);
+	if (MAC_MA1_31HR21 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR21\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR20 =
+	    debugfs_create_file("MAC_MA1_31HR20", 744, dir, &MAC_MA1_31HR20_val,
+				&MAC_MA1_31HR20_fops);
+	if (MAC_MA1_31HR20 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR20\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR19 =
+	    debugfs_create_file("MAC_MA1_31HR19", 744, dir, &MAC_MA1_31HR19_val,
+				&MAC_MA1_31HR19_fops);
+	if (MAC_MA1_31HR19 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR19\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR18 =
+	    debugfs_create_file("MAC_MA1_31HR18", 744, dir, &MAC_MA1_31HR18_val,
+				&MAC_MA1_31HR18_fops);
+	if (MAC_MA1_31HR18 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR18\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR17 =
+	    debugfs_create_file("MAC_MA1_31HR17", 744, dir, &MAC_MA1_31HR17_val,
+				&MAC_MA1_31HR17_fops);
+	if (MAC_MA1_31HR17 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR17\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR16 =
+	    debugfs_create_file("MAC_MA1_31HR16", 744, dir, &MAC_MA1_31HR16_val,
+				&MAC_MA1_31HR16_fops);
+	if (MAC_MA1_31HR16 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR16\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR15 =
+	    debugfs_create_file("MAC_MA1_31HR15", 744, dir, &MAC_MA1_31HR15_val,
+				&MAC_MA1_31HR15_fops);
+	if (MAC_MA1_31HR15 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR15\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR14 =
+	    debugfs_create_file("MAC_MA1_31HR14", 744, dir, &MAC_MA1_31HR14_val,
+				&MAC_MA1_31HR14_fops);
+	if (MAC_MA1_31HR14 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR14\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR13 =
+	    debugfs_create_file("MAC_MA1_31HR13", 744, dir, &MAC_MA1_31HR13_val,
+				&MAC_MA1_31HR13_fops);
+	if (MAC_MA1_31HR13 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR13\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR12 =
+	    debugfs_create_file("MAC_MA1_31HR12", 744, dir, &MAC_MA1_31HR12_val,
+				&MAC_MA1_31HR12_fops);
+	if (MAC_MA1_31HR12 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR12\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR11 =
+	    debugfs_create_file("MAC_MA1_31HR11", 744, dir, &MAC_MA1_31HR11_val,
+				&MAC_MA1_31HR11_fops);
+	if (MAC_MA1_31HR11 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR11\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR10 =
+	    debugfs_create_file("MAC_MA1_31HR10", 744, dir, &MAC_MA1_31HR10_val,
+				&MAC_MA1_31HR10_fops);
+	if (MAC_MA1_31HR10 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR10\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR9 =
+	    debugfs_create_file("MAC_MA1_31HR9", 744, dir, &MAC_MA1_31HR9_val,
+				&MAC_MA1_31HR9_fops);
+	if (MAC_MA1_31HR9 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR9\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR8 =
+	    debugfs_create_file("MAC_MA1_31HR8", 744, dir, &MAC_MA1_31HR8_val,
+				&MAC_MA1_31HR8_fops);
+	if (MAC_MA1_31HR8 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR8\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR7 =
+	    debugfs_create_file("MAC_MA1_31HR7", 744, dir, &MAC_MA1_31HR7_val,
+				&MAC_MA1_31HR7_fops);
+	if (MAC_MA1_31HR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR6 =
+	    debugfs_create_file("MAC_MA1_31HR6", 744, dir, &MAC_MA1_31HR6_val,
+				&MAC_MA1_31HR6_fops);
+	if (MAC_MA1_31HR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR5 =
+	    debugfs_create_file("MAC_MA1_31HR5", 744, dir, &MAC_MA1_31HR5_val,
+				&MAC_MA1_31HR5_fops);
+	if (MAC_MA1_31HR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR4 =
+	    debugfs_create_file("MAC_MA1_31HR4", 744, dir, &MAC_MA1_31HR4_val,
+				&MAC_MA1_31HR4_fops);
+	if (MAC_MA1_31HR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR3 =
+	    debugfs_create_file("MAC_MA1_31HR3", 744, dir, &MAC_MA1_31HR3_val,
+				&MAC_MA1_31HR3_fops);
+	if (MAC_MA1_31HR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR2 =
+	    debugfs_create_file("MAC_MA1_31HR2", 744, dir, &MAC_MA1_31HR2_val,
+				&MAC_MA1_31HR2_fops);
+	if (MAC_MA1_31HR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1_31HR1 =
+	    debugfs_create_file("MAC_MA1_31HR1", 744, dir, &MAC_MA1_31HR1_val,
+				&MAC_MA1_31HR1_fops);
+	if (MAC_MA1_31HR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1_31HR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ARPA =
+	    debugfs_create_file("MAC_ARPA", 744, dir, &MAC_ARPA_val,
+				&MAC_ARPA_fops);
+	if (MAC_ARPA == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ARPA\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R7 =
+	    debugfs_create_file("MAC_L3A3R7", 744, dir, &MAC_L3A3R7_val,
+				&MAC_L3A3R7_fops);
+	if (MAC_L3A3R7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R6 =
+	    debugfs_create_file("MAC_L3A3R6", 744, dir, &MAC_L3A3R6_val,
+				&MAC_L3A3R6_fops);
+	if (MAC_L3A3R6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R5 =
+	    debugfs_create_file("MAC_L3A3R5", 744, dir, &MAC_L3A3R5_val,
+				&MAC_L3A3R5_fops);
+	if (MAC_L3A3R5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R4 =
+	    debugfs_create_file("MAC_L3A3R4", 744, dir, &MAC_L3A3R4_val,
+				&MAC_L3A3R4_fops);
+	if (MAC_L3A3R4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R3 =
+	    debugfs_create_file("MAC_L3A3R3", 744, dir, &MAC_L3A3R3_val,
+				&MAC_L3A3R3_fops);
+	if (MAC_L3A3R3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R2 =
+	    debugfs_create_file("MAC_L3A3R2", 744, dir, &MAC_L3A3R2_val,
+				&MAC_L3A3R2_fops);
+	if (MAC_L3A3R2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R1 =
+	    debugfs_create_file("MAC_L3A3R1", 744, dir, &MAC_L3A3R1_val,
+				&MAC_L3A3R1_fops);
+	if (MAC_L3A3R1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A3R0 =
+	    debugfs_create_file("MAC_L3A3R0", 744, dir, &MAC_L3A3R0_val,
+				&MAC_L3A3R0_fops);
+	if (MAC_L3A3R0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A3R0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R7 =
+	    debugfs_create_file("MAC_L3A2R7", 744, dir, &MAC_L3A2R7_val,
+				&MAC_L3A2R7_fops);
+	if (MAC_L3A2R7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R6 =
+	    debugfs_create_file("MAC_L3A2R6", 744, dir, &MAC_L3A2R6_val,
+				&MAC_L3A2R6_fops);
+	if (MAC_L3A2R6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R5 =
+	    debugfs_create_file("MAC_L3A2R5", 744, dir, &MAC_L3A2R5_val,
+				&MAC_L3A2R5_fops);
+	if (MAC_L3A2R5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R4 =
+	    debugfs_create_file("MAC_L3A2R4", 744, dir, &MAC_L3A2R4_val,
+				&MAC_L3A2R4_fops);
+	if (MAC_L3A2R4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R3 =
+	    debugfs_create_file("MAC_L3A2R3", 744, dir, &MAC_L3A2R3_val,
+				&MAC_L3A2R3_fops);
+	if (MAC_L3A2R3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R2 =
+	    debugfs_create_file("MAC_L3A2R2", 744, dir, &MAC_L3A2R2_val,
+				&MAC_L3A2R2_fops);
+	if (MAC_L3A2R2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R1 =
+	    debugfs_create_file("MAC_L3A2R1", 744, dir, &MAC_L3A2R1_val,
+				&MAC_L3A2R1_fops);
+	if (MAC_L3A2R1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A2R0 =
+	    debugfs_create_file("MAC_L3A2R0", 744, dir, &MAC_L3A2R0_val,
+				&MAC_L3A2R0_fops);
+	if (MAC_L3A2R0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A2R0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R7 =
+	    debugfs_create_file("MAC_L3A1R7", 744, dir, &MAC_L3A1R7_val,
+				&MAC_L3A1R7_fops);
+	if (MAC_L3A1R7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R6 =
+	    debugfs_create_file("MAC_L3A1R6", 744, dir, &MAC_L3A1R6_val,
+				&MAC_L3A1R6_fops);
+	if (MAC_L3A1R6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R5 =
+	    debugfs_create_file("MAC_L3A1R5", 744, dir, &MAC_L3A1R5_val,
+				&MAC_L3A1R5_fops);
+	if (MAC_L3A1R5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R4 =
+	    debugfs_create_file("MAC_L3A1R4", 744, dir, &MAC_L3A1R4_val,
+				&MAC_L3A1R4_fops);
+	if (MAC_L3A1R4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R3 =
+	    debugfs_create_file("MAC_L3A1R3", 744, dir, &MAC_L3A1R3_val,
+				&MAC_L3A1R3_fops);
+	if (MAC_L3A1R3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R2 =
+	    debugfs_create_file("MAC_L3A1R2", 744, dir, &MAC_L3A1R2_val,
+				&MAC_L3A1R2_fops);
+	if (MAC_L3A1R2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R1 =
+	    debugfs_create_file("MAC_L3A1R1", 744, dir, &MAC_L3A1R1_val,
+				&MAC_L3A1R1_fops);
+	if (MAC_L3A1R1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A1R0 =
+	    debugfs_create_file("MAC_L3A1R0", 744, dir, &MAC_L3A1R0_val,
+				&MAC_L3A1R0_fops);
+	if (MAC_L3A1R0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A1R0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R7 =
+	    debugfs_create_file("MAC_L3A0R7", 744, dir, &MAC_L3A0R7_val,
+				&MAC_L3A0R7_fops);
+	if (MAC_L3A0R7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R6 =
+	    debugfs_create_file("MAC_L3A0R6", 744, dir, &MAC_L3A0R6_val,
+				&MAC_L3A0R6_fops);
+	if (MAC_L3A0R6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R5 =
+	    debugfs_create_file("MAC_L3A0R5", 744, dir, &MAC_L3A0R5_val,
+				&MAC_L3A0R5_fops);
+	if (MAC_L3A0R5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R4 =
+	    debugfs_create_file("MAC_L3A0R4", 744, dir, &MAC_L3A0R4_val,
+				&MAC_L3A0R4_fops);
+	if (MAC_L3A0R4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R3 =
+	    debugfs_create_file("MAC_L3A0R3", 744, dir, &MAC_L3A0R3_val,
+				&MAC_L3A0R3_fops);
+	if (MAC_L3A0R3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R2 =
+	    debugfs_create_file("MAC_L3A0R2", 744, dir, &MAC_L3A0R2_val,
+				&MAC_L3A0R2_fops);
+	if (MAC_L3A0R2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R1 =
+	    debugfs_create_file("MAC_L3A0R1", 744, dir, &MAC_L3A0R1_val,
+				&MAC_L3A0R1_fops);
+	if (MAC_L3A0R1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3A0R0 =
+	    debugfs_create_file("MAC_L3A0R0", 744, dir, &MAC_L3A0R0_val,
+				&MAC_L3A0R0_fops);
+	if (MAC_L3A0R0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3A0R0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR7 =
+	    debugfs_create_file("MAC_L4AR7", 744, dir, &MAC_L4AR7_val,
+				&MAC_L4AR7_fops);
+	if (MAC_L4AR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR6 =
+	    debugfs_create_file("MAC_L4AR6", 744, dir, &MAC_L4AR6_val,
+				&MAC_L4AR6_fops);
+	if (MAC_L4AR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR5 =
+	    debugfs_create_file("MAC_L4AR5", 744, dir, &MAC_L4AR5_val,
+				&MAC_L4AR5_fops);
+	if (MAC_L4AR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR4 =
+	    debugfs_create_file("MAC_L4AR4", 744, dir, &MAC_L4AR4_val,
+				&MAC_L4AR4_fops);
+	if (MAC_L4AR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR3 =
+	    debugfs_create_file("MAC_L4AR3", 744, dir, &MAC_L4AR3_val,
+				&MAC_L4AR3_fops);
+	if (MAC_L4AR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR2 =
+	    debugfs_create_file("MAC_L4AR2", 744, dir, &MAC_L4AR2_val,
+				&MAC_L4AR2_fops);
+	if (MAC_L4AR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR1 =
+	    debugfs_create_file("MAC_L4AR1", 744, dir, &MAC_L4AR1_val,
+				&MAC_L4AR1_fops);
+	if (MAC_L4AR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L4AR0 =
+	    debugfs_create_file("MAC_L4AR0", 744, dir, &MAC_L4AR0_val,
+				&MAC_L4AR0_fops);
+	if (MAC_L4AR0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L4AR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR7 =
+	    debugfs_create_file("MAC_L3L4CR7", 744, dir, &MAC_L3L4CR7_val,
+				&MAC_L3L4CR7_fops);
+	if (MAC_L3L4CR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR6 =
+	    debugfs_create_file("MAC_L3L4CR6", 744, dir, &MAC_L3L4CR6_val,
+				&MAC_L3L4CR6_fops);
+	if (MAC_L3L4CR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR5 =
+	    debugfs_create_file("MAC_L3L4CR5", 744, dir, &MAC_L3L4CR5_val,
+				&MAC_L3L4CR5_fops);
+	if (MAC_L3L4CR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR4 =
+	    debugfs_create_file("MAC_L3L4CR4", 744, dir, &MAC_L3L4CR4_val,
+				&MAC_L3L4CR4_fops);
+	if (MAC_L3L4CR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR3 =
+	    debugfs_create_file("MAC_L3L4CR3", 744, dir, &MAC_L3L4CR3_val,
+				&MAC_L3L4CR3_fops);
+	if (MAC_L3L4CR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR2 =
+	    debugfs_create_file("MAC_L3L4CR2", 744, dir, &MAC_L3L4CR2_val,
+				&MAC_L3L4CR2_fops);
+	if (MAC_L3L4CR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR1 =
+	    debugfs_create_file("MAC_L3L4CR1", 744, dir, &MAC_L3L4CR1_val,
+				&MAC_L3L4CR1_fops);
+	if (MAC_L3L4CR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_L3L4CR0 =
+	    debugfs_create_file("MAC_L3L4CR0", 744, dir, &MAC_L3L4CR0_val,
+				&MAC_L3L4CR0_fops);
+	if (MAC_L3L4CR0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_L3L4CR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_GPIOS =
+	    debugfs_create_file("MAC_GPIOS", 744, dir, &MAC_GPIOS_val,
+				&MAC_GPIOS_fops);
+	if (MAC_GPIOS == NULL) {
+		printk(KERN_INFO "error creating file: MAC_GPIOS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PCS =
+	    debugfs_create_file("MAC_PCS", 744, dir, &MAC_PCS_val,
+				&MAC_PCS_fops);
+	if (MAC_PCS == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PCS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TES =
+	    debugfs_create_file("MAC_TES", 744, dir, &MAC_TES_val,
+				&MAC_TES_fops);
+	if (MAC_TES == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TES\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_AE =
+	    debugfs_create_file("MAC_AE", 744, dir, &MAC_AE_val, &MAC_AE_fops);
+	if (MAC_AE == NULL) {
+		printk(KERN_INFO "error creating file: MAC_AE\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ALPA =
+	    debugfs_create_file("MAC_ALPA", 744, dir, &MAC_ALPA_val,
+				&MAC_ALPA_fops);
+	if (MAC_ALPA == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ALPA\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_AAD =
+	    debugfs_create_file("MAC_AAD", 744, dir, &MAC_AAD_val,
+				&MAC_AAD_fops);
+	if (MAC_AAD == NULL) {
+		printk(KERN_INFO "error creating file: MAC_AAD\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ANS =
+	    debugfs_create_file("MAC_ANS", 744, dir, &MAC_ANS_val,
+				&MAC_ANS_fops);
+	if (MAC_ANS == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ANS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ANC =
+	    debugfs_create_file("MAC_ANC", 744, dir, &MAC_ANC_val,
+				&MAC_ANC_fops);
+	if (MAC_ANC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ANC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_LPC =
+	    debugfs_create_file("MAC_LPC", 744, dir, &MAC_LPC_val,
+				&MAC_LPC_fops);
+	if (MAC_LPC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_LPC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_LPS =
+	    debugfs_create_file("MAC_LPS", 744, dir, &MAC_LPS_val,
+				&MAC_LPS_fops);
+	if (MAC_LPS == NULL) {
+		printk(KERN_INFO "error creating file: MAC_LPS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_WIDTH3 =
+	    debugfs_create_file("MAC_PPS_WIDTH3", 744, dir, &MAC_PPS_WIDTH3_val,
+				&MAC_PPS_WIDTH3_fops);
+	if (MAC_PPS_WIDTH3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_WIDTH3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_WIDTH2 =
+	    debugfs_create_file("MAC_PPS_WIDTH2", 744, dir, &MAC_PPS_WIDTH2_val,
+				&MAC_PPS_WIDTH2_fops);
+	if (MAC_PPS_WIDTH2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_WIDTH2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_WIDTH1 =
+	    debugfs_create_file("MAC_PPS_WIDTH1", 744, dir, &MAC_PPS_WIDTH1_val,
+				&MAC_PPS_WIDTH1_fops);
+	if (MAC_PPS_WIDTH1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_WIDTH1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_WIDTH0 =
+	    debugfs_create_file("MAC_PPS_WIDTH0", 744, dir, &MAC_PPS_WIDTH0_val,
+				&MAC_PPS_WIDTH0_fops);
+	if (MAC_PPS_WIDTH0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_WIDTH0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_INTVAL3 =
+	    debugfs_create_file("MAC_PPS_INTVAL3", 744, dir,
+				&MAC_PPS_INTVAL3_val, &MAC_PPS_INTVAL3_fops);
+	if (MAC_PPS_INTVAL3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_INTVAL3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_INTVAL2 =
+	    debugfs_create_file("MAC_PPS_INTVAL2", 744, dir,
+				&MAC_PPS_INTVAL2_val, &MAC_PPS_INTVAL2_fops);
+	if (MAC_PPS_INTVAL2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_INTVAL2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_INTVAL1 =
+	    debugfs_create_file("MAC_PPS_INTVAL1", 744, dir,
+				&MAC_PPS_INTVAL1_val, &MAC_PPS_INTVAL1_fops);
+	if (MAC_PPS_INTVAL1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_INTVAL1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_INTVAL0 =
+	    debugfs_create_file("MAC_PPS_INTVAL0", 744, dir,
+				&MAC_PPS_INTVAL0_val, &MAC_PPS_INTVAL0_fops);
+	if (MAC_PPS_INTVAL0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_INTVAL0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTNS3 =
+	    debugfs_create_file("MAC_PPS_TTNS3", 744, dir, &MAC_PPS_TTNS3_val,
+				&MAC_PPS_TTNS3_fops);
+	if (MAC_PPS_TTNS3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTNS3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTNS2 =
+	    debugfs_create_file("MAC_PPS_TTNS2", 744, dir, &MAC_PPS_TTNS2_val,
+				&MAC_PPS_TTNS2_fops);
+	if (MAC_PPS_TTNS2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTNS2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTNS1 =
+	    debugfs_create_file("MAC_PPS_TTNS1", 744, dir, &MAC_PPS_TTNS1_val,
+				&MAC_PPS_TTNS1_fops);
+	if (MAC_PPS_TTNS1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTNS1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTNS0 =
+	    debugfs_create_file("MAC_PPS_TTNS0", 744, dir, &MAC_PPS_TTNS0_val,
+				&MAC_PPS_TTNS0_fops);
+	if (MAC_PPS_TTNS0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTNS0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTS3 =
+	    debugfs_create_file("MAC_PPS_TTS3", 744, dir, &MAC_PPS_TTS3_val,
+				&MAC_PPS_TTS3_fops);
+	if (MAC_PPS_TTS3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTS3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTS2 =
+	    debugfs_create_file("MAC_PPS_TTS2", 744, dir, &MAC_PPS_TTS2_val,
+				&MAC_PPS_TTS2_fops);
+	if (MAC_PPS_TTS2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTS2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTS1 =
+	    debugfs_create_file("MAC_PPS_TTS1", 744, dir, &MAC_PPS_TTS1_val,
+				&MAC_PPS_TTS1_fops);
+	if (MAC_PPS_TTS1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTS1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPS_TTS0 =
+	    debugfs_create_file("MAC_PPS_TTS0", 744, dir, &MAC_PPS_TTS0_val,
+				&MAC_PPS_TTS0_fops);
+	if (MAC_PPS_TTS0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPS_TTS0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PPSC =
+	    debugfs_create_file("MAC_PPSC", 744, dir, &MAC_PPSC_val,
+				&MAC_PPSC_fops);
+	if (MAC_PPSC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PPSC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TEAC =
+	    debugfs_create_file("MAC_TEAC", 744, dir, &MAC_TEAC_val,
+				&MAC_TEAC_fops);
+	if (MAC_TEAC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TEAC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TIAC =
+	    debugfs_create_file("MAC_TIAC", 744, dir, &MAC_TIAC_val,
+				&MAC_TIAC_fops);
+	if (MAC_TIAC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TIAC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ATS =
+	    debugfs_create_file("MAC_ATS", 744, dir, &MAC_ATS_val,
+				&MAC_ATS_fops);
+	if (MAC_ATS == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ATS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ATN =
+	    debugfs_create_file("MAC_ATN", 744, dir, &MAC_ATN_val,
+				&MAC_ATN_fops);
+	if (MAC_ATN == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ATN\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_AC =
+	    debugfs_create_file("MAC_AC", 744, dir, &MAC_AC_val, &MAC_AC_fops);
+	if (MAC_AC == NULL) {
+		printk(KERN_INFO "error creating file: MAC_AC\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TTN =
+	    debugfs_create_file("MAC_TTN", 744, dir, &MAC_TTN_val,
+				&MAC_TTN_fops);
+	if (MAC_TTN == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TTN\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TTSN =
+	    debugfs_create_file("MAC_TTSN", 744, dir, &MAC_TTSN_val,
+				&MAC_TTSN_fops);
+	if (MAC_TTSN == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TTSN\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TSR =
+	    debugfs_create_file("MAC_TSR", 744, dir, &MAC_TSR_val,
+				&MAC_TSR_fops);
+	if (MAC_TSR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_STHWR =
+	    debugfs_create_file("MAC_STHWR", 744, dir, &MAC_STHWR_val,
+				&MAC_STHWR_fops);
+	if (MAC_STHWR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_STHWR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TAR =
+	    debugfs_create_file("MAC_TAR", 744, dir, &MAC_TAR_val,
+				&MAC_TAR_fops);
+	if (MAC_TAR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TAR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_STNSUR =
+	    debugfs_create_file("MAC_STNSUR", 744, dir, &MAC_STNSUR_val,
+				&MAC_STNSUR_fops);
+	if (MAC_STNSUR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_STNSUR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_STSUR =
+	    debugfs_create_file("MAC_STSUR", 744, dir, &MAC_STSUR_val,
+				&MAC_STSUR_fops);
+	if (MAC_STSUR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_STSUR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_STNSR =
+	    debugfs_create_file("MAC_STNSR", 744, dir, &MAC_STNSR_val,
+				&MAC_STNSR_fops);
+	if (MAC_STNSR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_STNSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_STSR =
+	    debugfs_create_file("MAC_STSR", 744, dir, &MAC_STSR_val,
+				&MAC_STSR_fops);
+	if (MAC_STSR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_STSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_SSIR =
+	    debugfs_create_file("MAC_SSIR", 744, dir, &MAC_SSIR_val,
+				&MAC_SSIR_fops);
+	if (MAC_SSIR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_SSIR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TCR =
+	    debugfs_create_file("MAC_TCR", 744, dir, &MAC_TCR_val,
+				&MAC_TCR_fops);
+	if (MAC_TCR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_DSR =
+	    debugfs_create_file("MTL_DSR", 744, dir, &MTL_DSR_val,
+				&MTL_DSR_fops);
+	if (MTL_DSR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_DSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RWPFFR =
+	    debugfs_create_file("MAC_RWPFFR", 744, dir, &MAC_RWPFFR_val,
+				&MAC_RWPFFR_fops);
+	if (MAC_RWPFFR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RWPFFR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RTSR =
+	    debugfs_create_file("MAC_RTSR", 744, dir, &MAC_RTSR_val,
+				&MAC_RTSR_fops);
+	if (MAC_RTSR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RTSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_IER =
+	    debugfs_create_file("MTL_IER", 744, dir, &MTL_IER_val,
+				&MTL_IER_fops);
+	if (MTL_IER == NULL) {
+		printk(KERN_INFO "error creating file: MTL_IER\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR7 =
+	    debugfs_create_file("MTL_QRCR7", 744, dir, &MTL_QRCR7_val,
+				&MTL_QRCR7_fops);
+	if (MTL_QRCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR6 =
+	    debugfs_create_file("MTL_QRCR6", 744, dir, &MTL_QRCR6_val,
+				&MTL_QRCR6_fops);
+	if (MTL_QRCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR5 =
+	    debugfs_create_file("MTL_QRCR5", 744, dir, &MTL_QRCR5_val,
+				&MTL_QRCR5_fops);
+	if (MTL_QRCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR4 =
+	    debugfs_create_file("MTL_QRCR4", 744, dir, &MTL_QRCR4_val,
+				&MTL_QRCR4_fops);
+	if (MTL_QRCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR3 =
+	    debugfs_create_file("MTL_QRCR3", 744, dir, &MTL_QRCR3_val,
+				&MTL_QRCR3_fops);
+	if (MTL_QRCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR2 =
+	    debugfs_create_file("MTL_QRCR2", 744, dir, &MTL_QRCR2_val,
+				&MTL_QRCR2_fops);
+	if (MTL_QRCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRCR1 =
+	    debugfs_create_file("MTL_QRCR1", 744, dir, &MTL_QRCR1_val,
+				&MTL_QRCR1_fops);
+	if (MTL_QRCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR7 =
+	    debugfs_create_file("MTL_QRDR7", 744, dir, &MTL_QRDR7_val,
+				&MTL_QRDR7_fops);
+	if (MTL_QRDR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR6 =
+	    debugfs_create_file("MTL_QRDR6", 744, dir, &MTL_QRDR6_val,
+				&MTL_QRDR6_fops);
+	if (MTL_QRDR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR5 =
+	    debugfs_create_file("MTL_QRDR5", 744, dir, &MTL_QRDR5_val,
+				&MTL_QRDR5_fops);
+	if (MTL_QRDR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR4 =
+	    debugfs_create_file("MTL_QRDR4", 744, dir, &MTL_QRDR4_val,
+				&MTL_QRDR4_fops);
+	if (MTL_QRDR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR3 =
+	    debugfs_create_file("MTL_QRDR3", 744, dir, &MTL_QRDR3_val,
+				&MTL_QRDR3_fops);
+	if (MTL_QRDR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR2 =
+	    debugfs_create_file("MTL_QRDR2", 744, dir, &MTL_QRDR2_val,
+				&MTL_QRDR2_fops);
+	if (MTL_QRDR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QRDR1 =
+	    debugfs_create_file("MTL_QRDR1", 744, dir, &MTL_QRDR1_val,
+				&MTL_QRDR1_fops);
+	if (MTL_QRDR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QRDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR7 =
+	    debugfs_create_file("MTL_QOCR7", 744, dir, &MTL_QOCR7_val,
+				&MTL_QOCR7_fops);
+	if (MTL_QOCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR6 =
+	    debugfs_create_file("MTL_QOCR6", 744, dir, &MTL_QOCR6_val,
+				&MTL_QOCR6_fops);
+	if (MTL_QOCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR5 =
+	    debugfs_create_file("MTL_QOCR5", 744, dir, &MTL_QOCR5_val,
+				&MTL_QOCR5_fops);
+	if (MTL_QOCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR4 =
+	    debugfs_create_file("MTL_QOCR4", 744, dir, &MTL_QOCR4_val,
+				&MTL_QOCR4_fops);
+	if (MTL_QOCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR3 =
+	    debugfs_create_file("MTL_QOCR3", 744, dir, &MTL_QOCR3_val,
+				&MTL_QOCR3_fops);
+	if (MTL_QOCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR2 =
+	    debugfs_create_file("MTL_QOCR2", 744, dir, &MTL_QOCR2_val,
+				&MTL_QOCR2_fops);
+	if (MTL_QOCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QOCR1 =
+	    debugfs_create_file("MTL_QOCR1", 744, dir, &MTL_QOCR1_val,
+				&MTL_QOCR1_fops);
+	if (MTL_QOCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QOCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR7 =
+	    debugfs_create_file("MTL_QROMR7", 744, dir, &MTL_QROMR7_val,
+				&MTL_QROMR7_fops);
+	if (MTL_QROMR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR6 =
+	    debugfs_create_file("MTL_QROMR6", 744, dir, &MTL_QROMR6_val,
+				&MTL_QROMR6_fops);
+	if (MTL_QROMR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR5 =
+	    debugfs_create_file("MTL_QROMR5", 744, dir, &MTL_QROMR5_val,
+				&MTL_QROMR5_fops);
+	if (MTL_QROMR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR4 =
+	    debugfs_create_file("MTL_QROMR4", 744, dir, &MTL_QROMR4_val,
+				&MTL_QROMR4_fops);
+	if (MTL_QROMR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR3 =
+	    debugfs_create_file("MTL_QROMR3", 744, dir, &MTL_QROMR3_val,
+				&MTL_QROMR3_fops);
+	if (MTL_QROMR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR2 =
+	    debugfs_create_file("MTL_QROMR2", 744, dir, &MTL_QROMR2_val,
+				&MTL_QROMR2_fops);
+	if (MTL_QROMR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QROMR1 =
+	    debugfs_create_file("MTL_QROMR1", 744, dir, &MTL_QROMR1_val,
+				&MTL_QROMR1_fops);
+	if (MTL_QROMR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QROMR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR7 =
+	    debugfs_create_file("MTL_QLCR7", 744, dir, &MTL_QLCR7_val,
+				&MTL_QLCR7_fops);
+	if (MTL_QLCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR6 =
+	    debugfs_create_file("MTL_QLCR6", 744, dir, &MTL_QLCR6_val,
+				&MTL_QLCR6_fops);
+	if (MTL_QLCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR5 =
+	    debugfs_create_file("MTL_QLCR5", 744, dir, &MTL_QLCR5_val,
+				&MTL_QLCR5_fops);
+	if (MTL_QLCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR4 =
+	    debugfs_create_file("MTL_QLCR4", 744, dir, &MTL_QLCR4_val,
+				&MTL_QLCR4_fops);
+	if (MTL_QLCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR3 =
+	    debugfs_create_file("MTL_QLCR3", 744, dir, &MTL_QLCR3_val,
+				&MTL_QLCR3_fops);
+	if (MTL_QLCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR2 =
+	    debugfs_create_file("MTL_QLCR2", 744, dir, &MTL_QLCR2_val,
+				&MTL_QLCR2_fops);
+	if (MTL_QLCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QLCR1 =
+	    debugfs_create_file("MTL_QLCR1", 744, dir, &MTL_QLCR1_val,
+				&MTL_QLCR1_fops);
+	if (MTL_QLCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QLCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR7 =
+	    debugfs_create_file("MTL_QHCR7", 744, dir, &MTL_QHCR7_val,
+				&MTL_QHCR7_fops);
+	if (MTL_QHCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR6 =
+	    debugfs_create_file("MTL_QHCR6", 744, dir, &MTL_QHCR6_val,
+				&MTL_QHCR6_fops);
+	if (MTL_QHCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR5 =
+	    debugfs_create_file("MTL_QHCR5", 744, dir, &MTL_QHCR5_val,
+				&MTL_QHCR5_fops);
+	if (MTL_QHCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR4 =
+	    debugfs_create_file("MTL_QHCR4", 744, dir, &MTL_QHCR4_val,
+				&MTL_QHCR4_fops);
+	if (MTL_QHCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR3 =
+	    debugfs_create_file("MTL_QHCR3", 744, dir, &MTL_QHCR3_val,
+				&MTL_QHCR3_fops);
+	if (MTL_QHCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR2 =
+	    debugfs_create_file("MTL_QHCR2", 744, dir, &MTL_QHCR2_val,
+				&MTL_QHCR2_fops);
+	if (MTL_QHCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QHCR1 =
+	    debugfs_create_file("MTL_QHCR1", 744, dir, &MTL_QHCR1_val,
+				&MTL_QHCR1_fops);
+	if (MTL_QHCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QHCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR7 =
+	    debugfs_create_file("MTL_QSSCR7", 744, dir, &MTL_QSSCR7_val,
+				&MTL_QSSCR7_fops);
+	if (MTL_QSSCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR6 =
+	    debugfs_create_file("MTL_QSSCR6", 744, dir, &MTL_QSSCR6_val,
+				&MTL_QSSCR6_fops);
+	if (MTL_QSSCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR5 =
+	    debugfs_create_file("MTL_QSSCR5", 744, dir, &MTL_QSSCR5_val,
+				&MTL_QSSCR5_fops);
+	if (MTL_QSSCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR4 =
+	    debugfs_create_file("MTL_QSSCR4", 744, dir, &MTL_QSSCR4_val,
+				&MTL_QSSCR4_fops);
+	if (MTL_QSSCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR3 =
+	    debugfs_create_file("MTL_QSSCR3", 744, dir, &MTL_QSSCR3_val,
+				&MTL_QSSCR3_fops);
+	if (MTL_QSSCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR2 =
+	    debugfs_create_file("MTL_QSSCR2", 744, dir, &MTL_QSSCR2_val,
+				&MTL_QSSCR2_fops);
+	if (MTL_QSSCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QSSCR1 =
+	    debugfs_create_file("MTL_QSSCR1", 744, dir, &MTL_QSSCR1_val,
+				&MTL_QSSCR1_fops);
+	if (MTL_QSSCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QSSCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW7 =
+	    debugfs_create_file("MTL_QW7", 744, dir, &MTL_QW7_val,
+				&MTL_QW7_fops);
+	if (MTL_QW7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW6 =
+	    debugfs_create_file("MTL_QW6", 744, dir, &MTL_QW6_val,
+				&MTL_QW6_fops);
+	if (MTL_QW6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW5 =
+	    debugfs_create_file("MTL_QW5", 744, dir, &MTL_QW5_val,
+				&MTL_QW5_fops);
+	if (MTL_QW5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW4 =
+	    debugfs_create_file("MTL_QW4", 744, dir, &MTL_QW4_val,
+				&MTL_QW4_fops);
+	if (MTL_QW4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW3 =
+	    debugfs_create_file("MTL_QW3", 744, dir, &MTL_QW3_val,
+				&MTL_QW3_fops);
+	if (MTL_QW3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW2 =
+	    debugfs_create_file("MTL_QW2", 744, dir, &MTL_QW2_val,
+				&MTL_QW2_fops);
+	if (MTL_QW2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QW1 =
+	    debugfs_create_file("MTL_QW1", 744, dir, &MTL_QW1_val,
+				&MTL_QW1_fops);
+	if (MTL_QW1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QW1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR7 =
+	    debugfs_create_file("MTL_QESR7", 744, dir, &MTL_QESR7_val,
+				&MTL_QESR7_fops);
+	if (MTL_QESR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR6 =
+	    debugfs_create_file("MTL_QESR6", 744, dir, &MTL_QESR6_val,
+				&MTL_QESR6_fops);
+	if (MTL_QESR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR5 =
+	    debugfs_create_file("MTL_QESR5", 744, dir, &MTL_QESR5_val,
+				&MTL_QESR5_fops);
+	if (MTL_QESR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR4 =
+	    debugfs_create_file("MTL_QESR4", 744, dir, &MTL_QESR4_val,
+				&MTL_QESR4_fops);
+	if (MTL_QESR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR3 =
+	    debugfs_create_file("MTL_QESR3", 744, dir, &MTL_QESR3_val,
+				&MTL_QESR3_fops);
+	if (MTL_QESR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR2 =
+	    debugfs_create_file("MTL_QESR2", 744, dir, &MTL_QESR2_val,
+				&MTL_QESR2_fops);
+	if (MTL_QESR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QESR1 =
+	    debugfs_create_file("MTL_QESR1", 744, dir, &MTL_QESR1_val,
+				&MTL_QESR1_fops);
+	if (MTL_QESR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QESR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR7 =
+	    debugfs_create_file("MTL_QECR7", 744, dir, &MTL_QECR7_val,
+				&MTL_QECR7_fops);
+	if (MTL_QECR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR6 =
+	    debugfs_create_file("MTL_QECR6", 744, dir, &MTL_QECR6_val,
+				&MTL_QECR6_fops);
+	if (MTL_QECR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR5 =
+	    debugfs_create_file("MTL_QECR5", 744, dir, &MTL_QECR5_val,
+				&MTL_QECR5_fops);
+	if (MTL_QECR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR4 =
+	    debugfs_create_file("MTL_QECR4", 744, dir, &MTL_QECR4_val,
+				&MTL_QECR4_fops);
+	if (MTL_QECR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR3 =
+	    debugfs_create_file("MTL_QECR3", 744, dir, &MTL_QECR3_val,
+				&MTL_QECR3_fops);
+	if (MTL_QECR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR2 =
+	    debugfs_create_file("MTL_QECR2", 744, dir, &MTL_QECR2_val,
+				&MTL_QECR2_fops);
+	if (MTL_QECR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QECR1 =
+	    debugfs_create_file("MTL_QECR1", 744, dir, &MTL_QECR1_val,
+				&MTL_QECR1_fops);
+	if (MTL_QECR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QECR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR7 =
+	    debugfs_create_file("MTL_QTDR7", 744, dir, &MTL_QTDR7_val,
+				&MTL_QTDR7_fops);
+	if (MTL_QTDR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR6 =
+	    debugfs_create_file("MTL_QTDR6", 744, dir, &MTL_QTDR6_val,
+				&MTL_QTDR6_fops);
+	if (MTL_QTDR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR5 =
+	    debugfs_create_file("MTL_QTDR5", 744, dir, &MTL_QTDR5_val,
+				&MTL_QTDR5_fops);
+	if (MTL_QTDR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR4 =
+	    debugfs_create_file("MTL_QTDR4", 744, dir, &MTL_QTDR4_val,
+				&MTL_QTDR4_fops);
+	if (MTL_QTDR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR3 =
+	    debugfs_create_file("MTL_QTDR3", 744, dir, &MTL_QTDR3_val,
+				&MTL_QTDR3_fops);
+	if (MTL_QTDR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR2 =
+	    debugfs_create_file("MTL_QTDR2", 744, dir, &MTL_QTDR2_val,
+				&MTL_QTDR2_fops);
+	if (MTL_QTDR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTDR1 =
+	    debugfs_create_file("MTL_QTDR1", 744, dir, &MTL_QTDR1_val,
+				&MTL_QTDR1_fops);
+	if (MTL_QTDR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR7 =
+	    debugfs_create_file("MTL_QUCR7", 744, dir, &MTL_QUCR7_val,
+				&MTL_QUCR7_fops);
+	if (MTL_QUCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR6 =
+	    debugfs_create_file("MTL_QUCR6", 744, dir, &MTL_QUCR6_val,
+				&MTL_QUCR6_fops);
+	if (MTL_QUCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR5 =
+	    debugfs_create_file("MTL_QUCR5", 744, dir, &MTL_QUCR5_val,
+				&MTL_QUCR5_fops);
+	if (MTL_QUCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR4 =
+	    debugfs_create_file("MTL_QUCR4", 744, dir, &MTL_QUCR4_val,
+				&MTL_QUCR4_fops);
+	if (MTL_QUCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR3 =
+	    debugfs_create_file("MTL_QUCR3", 744, dir, &MTL_QUCR3_val,
+				&MTL_QUCR3_fops);
+	if (MTL_QUCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR2 =
+	    debugfs_create_file("MTL_QUCR2", 744, dir, &MTL_QUCR2_val,
+				&MTL_QUCR2_fops);
+	if (MTL_QUCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QUCR1 =
+	    debugfs_create_file("MTL_QUCR1", 744, dir, &MTL_QUCR1_val,
+				&MTL_QUCR1_fops);
+	if (MTL_QUCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QUCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR7 =
+	    debugfs_create_file("MTL_QTOMR7", 744, dir, &MTL_QTOMR7_val,
+				&MTL_QTOMR7_fops);
+	if (MTL_QTOMR7 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR6 =
+	    debugfs_create_file("MTL_QTOMR6", 744, dir, &MTL_QTOMR6_val,
+				&MTL_QTOMR6_fops);
+	if (MTL_QTOMR6 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR5 =
+	    debugfs_create_file("MTL_QTOMR5", 744, dir, &MTL_QTOMR5_val,
+				&MTL_QTOMR5_fops);
+	if (MTL_QTOMR5 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR4 =
+	    debugfs_create_file("MTL_QTOMR4", 744, dir, &MTL_QTOMR4_val,
+				&MTL_QTOMR4_fops);
+	if (MTL_QTOMR4 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR3 =
+	    debugfs_create_file("MTL_QTOMR3", 744, dir, &MTL_QTOMR3_val,
+				&MTL_QTOMR3_fops);
+	if (MTL_QTOMR3 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR2 =
+	    debugfs_create_file("MTL_QTOMR2", 744, dir, &MTL_QTOMR2_val,
+				&MTL_QTOMR2_fops);
+	if (MTL_QTOMR2 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_QTOMR1 =
+	    debugfs_create_file("MTL_QTOMR1", 744, dir, &MTL_QTOMR1_val,
+				&MTL_QTOMR1_fops);
+	if (MTL_QTOMR1 == NULL) {
+		printk(KERN_INFO "error creating file: MTL_QTOMR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_PMTCSR =
+	    debugfs_create_file("MAC_PMTCSR", 744, dir, &MAC_PMTCSR_val,
+				&MAC_PMTCSR_fops);
+	if (MAC_PMTCSR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_PMTCSR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXICMP_ERR_OCTETS =
+	    debugfs_create_file("MMC_RXICMP_ERR_OCTETS", 744, dir,
+				&MMC_RXICMP_ERR_OCTETS_val,
+				&MMC_RXICMP_ERR_OCTETS_fops);
+	if (MMC_RXICMP_ERR_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXICMP_ERR_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXICMP_GD_OCTETS =
+	    debugfs_create_file("MMC_RXICMP_GD_OCTETS", 744, dir,
+				&MMC_RXICMP_GD_OCTETS_val,
+				&MMC_RXICMP_GD_OCTETS_fops);
+	if (MMC_RXICMP_GD_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXICMP_GD_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXTCP_ERR_OCTETS =
+	    debugfs_create_file("MMC_RXTCP_ERR_OCTETS", 744, dir,
+				&MMC_RXTCP_ERR_OCTETS_val,
+				&MMC_RXTCP_ERR_OCTETS_fops);
+	if (MMC_RXTCP_ERR_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXTCP_ERR_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXTCP_GD_OCTETS =
+	    debugfs_create_file("MMC_RXTCP_GD_OCTETS", 744, dir,
+				&MMC_RXTCP_GD_OCTETS_val,
+				&MMC_RXTCP_GD_OCTETS_fops);
+	if (MMC_RXTCP_GD_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXTCP_GD_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUDP_ERR_OCTETS =
+	    debugfs_create_file("MMC_RXUDP_ERR_OCTETS", 744, dir,
+				&MMC_RXUDP_ERR_OCTETS_val,
+				&MMC_RXUDP_ERR_OCTETS_fops);
+	if (MMC_RXUDP_ERR_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXUDP_ERR_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUDP_GD_OCTETS =
+	    debugfs_create_file("MMC_RXUDP_GD_OCTETS", 744, dir,
+				&MMC_RXUDP_GD_OCTETS_val,
+				&MMC_RXUDP_GD_OCTETS_fops);
+	if (MMC_RXUDP_GD_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXUDP_GD_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_NOPAY_OCTETS =
+	    debugfs_create_file("MMC_RXIPV6_NOPAY_OCTETS", 744, dir,
+				&MMC_RXIPV6_NOPAY_OCTETS_val,
+				&MMC_RXIPV6_NOPAY_OCTETS_fops);
+	if (MMC_RXIPV6_NOPAY_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV6_NOPAY_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_HDRERR_OCTETS =
+	    debugfs_create_file("MMC_RXIPV6_HDRERR_OCTETS", 744, dir,
+				&MMC_RXIPV6_HDRERR_OCTETS_val,
+				&MMC_RXIPV6_HDRERR_OCTETS_fops);
+	if (MMC_RXIPV6_HDRERR_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV6_HDRERR_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_GD_OCTETS =
+	    debugfs_create_file("MMC_RXIPV6_GD_OCTETS", 744, dir,
+				&MMC_RXIPV6_GD_OCTETS_val,
+				&MMC_RXIPV6_GD_OCTETS_fops);
+	if (MMC_RXIPV6_GD_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXIPV6_GD_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_UDSBL_OCTETS =
+	    debugfs_create_file("MMC_RXIPV4_UDSBL_OCTETS", 744, dir,
+				&MMC_RXIPV4_UDSBL_OCTETS_val,
+				&MMC_RXIPV4_UDSBL_OCTETS_fops);
+	if (MMC_RXIPV4_UDSBL_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_UDSBL_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_FRAG_OCTETS =
+	    debugfs_create_file("MMC_RXIPV4_FRAG_OCTETS", 744, dir,
+				&MMC_RXIPV4_FRAG_OCTETS_val,
+				&MMC_RXIPV4_FRAG_OCTETS_fops);
+	if (MMC_RXIPV4_FRAG_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_FRAG_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_NOPAY_OCTETS =
+	    debugfs_create_file("MMC_RXIPV4_NOPAY_OCTETS", 744, dir,
+				&MMC_RXIPV4_NOPAY_OCTETS_val,
+				&MMC_RXIPV4_NOPAY_OCTETS_fops);
+	if (MMC_RXIPV4_NOPAY_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_NOPAY_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_HDRERR_OCTETS =
+	    debugfs_create_file("MMC_RXIPV4_HDRERR_OCTETS", 744, dir,
+				&MMC_RXIPV4_HDRERR_OCTETS_val,
+				&MMC_RXIPV4_HDRERR_OCTETS_fops);
+	if (MMC_RXIPV4_HDRERR_OCTETS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_HDRERR_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_GD_OCTETS =
+	    debugfs_create_file("MMC_RXIPV4_GD_OCTETS", 744, dir,
+				&MMC_RXIPV4_GD_OCTETS_val,
+				&MMC_RXIPV4_GD_OCTETS_fops);
+	if (MMC_RXIPV4_GD_OCTETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXIPV4_GD_OCTETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXICMP_ERR_PKTS =
+	    debugfs_create_file("MMC_RXICMP_ERR_PKTS", 744, dir,
+				&MMC_RXICMP_ERR_PKTS_val,
+				&MMC_RXICMP_ERR_PKTS_fops);
+	if (MMC_RXICMP_ERR_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXICMP_ERR_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXICMP_GD_PKTS =
+	    debugfs_create_file("MMC_RXICMP_GD_PKTS", 744, dir,
+				&MMC_RXICMP_GD_PKTS_val,
+				&MMC_RXICMP_GD_PKTS_fops);
+	if (MMC_RXICMP_GD_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXICMP_GD_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXTCP_ERR_PKTS =
+	    debugfs_create_file("MMC_RXTCP_ERR_PKTS", 744, dir,
+				&MMC_RXTCP_ERR_PKTS_val,
+				&MMC_RXTCP_ERR_PKTS_fops);
+	if (MMC_RXTCP_ERR_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXTCP_ERR_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXTCP_GD_PKTS =
+	    debugfs_create_file("MMC_RXTCP_GD_PKTS", 744, dir,
+				&MMC_RXTCP_GD_PKTS_val,
+				&MMC_RXTCP_GD_PKTS_fops);
+	if (MMC_RXTCP_GD_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXTCP_GD_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUDP_ERR_PKTS =
+	    debugfs_create_file("MMC_RXUDP_ERR_PKTS", 744, dir,
+				&MMC_RXUDP_ERR_PKTS_val,
+				&MMC_RXUDP_ERR_PKTS_fops);
+	if (MMC_RXUDP_ERR_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXUDP_ERR_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUDP_GD_PKTS =
+	    debugfs_create_file("MMC_RXUDP_GD_PKTS", 744, dir,
+				&MMC_RXUDP_GD_PKTS_val,
+				&MMC_RXUDP_GD_PKTS_fops);
+	if (MMC_RXUDP_GD_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXUDP_GD_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_NOPAY_PKTS =
+	    debugfs_create_file("MMC_RXIPV6_NOPAY_PKTS", 744, dir,
+				&MMC_RXIPV6_NOPAY_PKTS_val,
+				&MMC_RXIPV6_NOPAY_PKTS_fops);
+	if (MMC_RXIPV6_NOPAY_PKTS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV6_NOPAY_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_HDRERR_PKTS =
+	    debugfs_create_file("MMC_RXIPV6_HDRERR_PKTS", 744, dir,
+				&MMC_RXIPV6_HDRERR_PKTS_val,
+				&MMC_RXIPV6_HDRERR_PKTS_fops);
+	if (MMC_RXIPV6_HDRERR_PKTS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV6_HDRERR_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV6_GD_PKTS =
+	    debugfs_create_file("MMC_RXIPV6_GD_PKTS", 744, dir,
+				&MMC_RXIPV6_GD_PKTS_val,
+				&MMC_RXIPV6_GD_PKTS_fops);
+	if (MMC_RXIPV6_GD_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXIPV6_GD_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_UBSBL_PKTS =
+	    debugfs_create_file("MMC_RXIPV4_UBSBL_PKTS", 744, dir,
+				&MMC_RXIPV4_UBSBL_PKTS_val,
+				&MMC_RXIPV4_UBSBL_PKTS_fops);
+	if (MMC_RXIPV4_UBSBL_PKTS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_UBSBL_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_FRAG_PKTS =
+	    debugfs_create_file("MMC_RXIPV4_FRAG_PKTS", 744, dir,
+				&MMC_RXIPV4_FRAG_PKTS_val,
+				&MMC_RXIPV4_FRAG_PKTS_fops);
+	if (MMC_RXIPV4_FRAG_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXIPV4_FRAG_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_NOPAY_PKTS =
+	    debugfs_create_file("MMC_RXIPV4_NOPAY_PKTS", 744, dir,
+				&MMC_RXIPV4_NOPAY_PKTS_val,
+				&MMC_RXIPV4_NOPAY_PKTS_fops);
+	if (MMC_RXIPV4_NOPAY_PKTS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_NOPAY_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_HDRERR_PKTS =
+	    debugfs_create_file("MMC_RXIPV4_HDRERR_PKTS", 744, dir,
+				&MMC_RXIPV4_HDRERR_PKTS_val,
+				&MMC_RXIPV4_HDRERR_PKTS_fops);
+	if (MMC_RXIPV4_HDRERR_PKTS == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXIPV4_HDRERR_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXIPV4_GD_PKTS =
+	    debugfs_create_file("MMC_RXIPV4_GD_PKTS", 744, dir,
+				&MMC_RXIPV4_GD_PKTS_val,
+				&MMC_RXIPV4_GD_PKTS_fops);
+	if (MMC_RXIPV4_GD_PKTS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXIPV4_GD_PKTS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXCTRLPACKETS_G =
+	    debugfs_create_file("MMC_RXCTRLPACKETS_G", 744, dir,
+				&MMC_RXCTRLPACKETS_G_val,
+				&MMC_RXCTRLPACKETS_G_fops);
+	if (MMC_RXCTRLPACKETS_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXCTRLPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXRCVERROR =
+	    debugfs_create_file("MMC_RXRCVERROR", 744, dir, &MMC_RXRCVERROR_val,
+				&MMC_RXRCVERROR_fops);
+	if (MMC_RXRCVERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXRCVERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXWATCHDOGERROR =
+	    debugfs_create_file("MMC_RXWATCHDOGERROR", 744, dir,
+				&MMC_RXWATCHDOGERROR_val,
+				&MMC_RXWATCHDOGERROR_fops);
+	if (MMC_RXWATCHDOGERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXWATCHDOGERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXVLANPACKETS_GB =
+	    debugfs_create_file("MMC_RXVLANPACKETS_GB", 744, dir,
+				&MMC_RXVLANPACKETS_GB_val,
+				&MMC_RXVLANPACKETS_GB_fops);
+	if (MMC_RXVLANPACKETS_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXVLANPACKETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXFIFOOVERFLOW =
+	    debugfs_create_file("MMC_RXFIFOOVERFLOW", 744, dir,
+				&MMC_RXFIFOOVERFLOW_val,
+				&MMC_RXFIFOOVERFLOW_fops);
+	if (MMC_RXFIFOOVERFLOW == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXFIFOOVERFLOW\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXPAUSEPACKETS =
+	    debugfs_create_file("MMC_RXPAUSEPACKETS", 744, dir,
+				&MMC_RXPAUSEPACKETS_val,
+				&MMC_RXPAUSEPACKETS_fops);
+	if (MMC_RXPAUSEPACKETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXPAUSEPACKETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXOUTOFRANGETYPE =
+	    debugfs_create_file("MMC_RXOUTOFRANGETYPE", 744, dir,
+				&MMC_RXOUTOFRANGETYPE_val,
+				&MMC_RXOUTOFRANGETYPE_fops);
+	if (MMC_RXOUTOFRANGETYPE == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXOUTOFRANGETYPE\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXLENGTHERROR =
+	    debugfs_create_file("MMC_RXLENGTHERROR", 744, dir,
+				&MMC_RXLENGTHERROR_val,
+				&MMC_RXLENGTHERROR_fops);
+	if (MMC_RXLENGTHERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXLENGTHERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUNICASTPACKETS_G =
+	    debugfs_create_file("MMC_RXUNICASTPACKETS_G", 744, dir,
+				&MMC_RXUNICASTPACKETS_G_val,
+				&MMC_RXUNICASTPACKETS_G_fops);
+	if (MMC_RXUNICASTPACKETS_G == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXUNICASTPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX1024TOMAXOCTETS_GB =
+	    debugfs_create_file("MMC_RX1024TOMAXOCTETS_GB", 744, dir,
+				&MMC_RX1024TOMAXOCTETS_GB_val,
+				&MMC_RX1024TOMAXOCTETS_GB_fops);
+	if (MMC_RX1024TOMAXOCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RX1024TOMAXOCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX512TO1023OCTETS_GB =
+	    debugfs_create_file("MMC_RX512TO1023OCTETS_GB", 744, dir,
+				&MMC_RX512TO1023OCTETS_GB_val,
+				&MMC_RX512TO1023OCTETS_GB_fops);
+	if (MMC_RX512TO1023OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RX512TO1023OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX256TO511OCTETS_GB =
+	    debugfs_create_file("MMC_RX256TO511OCTETS_GB", 744, dir,
+				&MMC_RX256TO511OCTETS_GB_val,
+				&MMC_RX256TO511OCTETS_GB_fops);
+	if (MMC_RX256TO511OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RX256TO511OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX128TO255OCTETS_GB =
+	    debugfs_create_file("MMC_RX128TO255OCTETS_GB", 744, dir,
+				&MMC_RX128TO255OCTETS_GB_val,
+				&MMC_RX128TO255OCTETS_GB_fops);
+	if (MMC_RX128TO255OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RX128TO255OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX65TO127OCTETS_GB =
+	    debugfs_create_file("MMC_RX65TO127OCTETS_GB", 744, dir,
+				&MMC_RX65TO127OCTETS_GB_val,
+				&MMC_RX65TO127OCTETS_GB_fops);
+	if (MMC_RX65TO127OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RX65TO127OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RX64OCTETS_GB =
+	    debugfs_create_file("MMC_RX64OCTETS_GB", 744, dir,
+				&MMC_RX64OCTETS_GB_val,
+				&MMC_RX64OCTETS_GB_fops);
+	if (MMC_RX64OCTETS_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RX64OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXOVERSIZE_G =
+	    debugfs_create_file("MMC_RXOVERSIZE_G", 744, dir,
+				&MMC_RXOVERSIZE_G_val, &MMC_RXOVERSIZE_G_fops);
+	if (MMC_RXOVERSIZE_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXOVERSIZE_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXUNDERSIZE_G =
+	    debugfs_create_file("MMC_RXUNDERSIZE_G", 744, dir,
+				&MMC_RXUNDERSIZE_G_val,
+				&MMC_RXUNDERSIZE_G_fops);
+	if (MMC_RXUNDERSIZE_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXUNDERSIZE_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXJABBERERROR =
+	    debugfs_create_file("MMC_RXJABBERERROR", 744, dir,
+				&MMC_RXJABBERERROR_val,
+				&MMC_RXJABBERERROR_fops);
+	if (MMC_RXJABBERERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXJABBERERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXRUNTERROR =
+	    debugfs_create_file("MMC_RXRUNTERROR", 744, dir,
+				&MMC_RXRUNTERROR_val, &MMC_RXRUNTERROR_fops);
+	if (MMC_RXRUNTERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXRUNTERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXALIGNMENTERROR =
+	    debugfs_create_file("MMC_RXALIGNMENTERROR", 744, dir,
+				&MMC_RXALIGNMENTERROR_val,
+				&MMC_RXALIGNMENTERROR_fops);
+	if (MMC_RXALIGNMENTERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXALIGNMENTERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXCRCERROR =
+	    debugfs_create_file("MMC_RXCRCERROR", 744, dir, &MMC_RXCRCERROR_val,
+				&MMC_RXCRCERROR_fops);
+	if (MMC_RXCRCERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXCRCERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXMULTICASTPACKETS_G =
+	    debugfs_create_file("MMC_RXMULTICASTPACKETS_G", 744, dir,
+				&MMC_RXMULTICASTPACKETS_G_val,
+				&MMC_RXMULTICASTPACKETS_G_fops);
+	if (MMC_RXMULTICASTPACKETS_G == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXMULTICASTPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXBROADCASTPACKETS_G =
+	    debugfs_create_file("MMC_RXBROADCASTPACKETS_G", 744, dir,
+				&MMC_RXBROADCASTPACKETS_G_val,
+				&MMC_RXBROADCASTPACKETS_G_fops);
+	if (MMC_RXBROADCASTPACKETS_G == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_RXBROADCASTPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXOCTETCOUNT_G =
+	    debugfs_create_file("MMC_RXOCTETCOUNT_G", 744, dir,
+				&MMC_RXOCTETCOUNT_G_val,
+				&MMC_RXOCTETCOUNT_G_fops);
+	if (MMC_RXOCTETCOUNT_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXOCTETCOUNT_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXOCTETCOUNT_GB =
+	    debugfs_create_file("MMC_RXOCTETCOUNT_GB", 744, dir,
+				&MMC_RXOCTETCOUNT_GB_val,
+				&MMC_RXOCTETCOUNT_GB_fops);
+	if (MMC_RXOCTETCOUNT_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXOCTETCOUNT_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_RXPACKETCOUNT_GB =
+	    debugfs_create_file("MMC_RXPACKETCOUNT_GB", 744, dir,
+				&MMC_RXPACKETCOUNT_GB_val,
+				&MMC_RXPACKETCOUNT_GB_fops);
+	if (MMC_RXPACKETCOUNT_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_RXPACKETCOUNT_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXOVERSIZE_G =
+	    debugfs_create_file("MMC_TXOVERSIZE_G", 744, dir,
+				&MMC_TXOVERSIZE_G_val, &MMC_TXOVERSIZE_G_fops);
+	if (MMC_TXOVERSIZE_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXOVERSIZE_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXVLANPACKETS_G =
+	    debugfs_create_file("MMC_TXVLANPACKETS_G", 744, dir,
+				&MMC_TXVLANPACKETS_G_val,
+				&MMC_TXVLANPACKETS_G_fops);
+	if (MMC_TXVLANPACKETS_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXVLANPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXPAUSEPACKETS =
+	    debugfs_create_file("MMC_TXPAUSEPACKETS", 744, dir,
+				&MMC_TXPAUSEPACKETS_val,
+				&MMC_TXPAUSEPACKETS_fops);
+	if (MMC_TXPAUSEPACKETS == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXPAUSEPACKETS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXEXCESSDEF =
+	    debugfs_create_file("MMC_TXEXCESSDEF", 744, dir,
+				&MMC_TXEXCESSDEF_val, &MMC_TXEXCESSDEF_fops);
+	if (MMC_TXEXCESSDEF == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXEXCESSDEF\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXPACKETSCOUNT_G =
+	    debugfs_create_file("MMC_TXPACKETSCOUNT_G", 744, dir,
+				&MMC_TXPACKETSCOUNT_G_val,
+				&MMC_TXPACKETSCOUNT_G_fops);
+	if (MMC_TXPACKETSCOUNT_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXPACKETSCOUNT_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXOCTETCOUNT_G =
+	    debugfs_create_file("MMC_TXOCTETCOUNT_G", 744, dir,
+				&MMC_TXOCTETCOUNT_G_val,
+				&MMC_TXOCTETCOUNT_G_fops);
+	if (MMC_TXOCTETCOUNT_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXOCTETCOUNT_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXCARRIERERROR =
+	    debugfs_create_file("MMC_TXCARRIERERROR", 744, dir,
+				&MMC_TXCARRIERERROR_val,
+				&MMC_TXCARRIERERROR_fops);
+	if (MMC_TXCARRIERERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXCARRIERERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXEXESSCOL =
+	    debugfs_create_file("MMC_TXEXESSCOL", 744, dir, &MMC_TXEXESSCOL_val,
+				&MMC_TXEXESSCOL_fops);
+	if (MMC_TXEXESSCOL == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXEXESSCOL\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXLATECOL =
+	    debugfs_create_file("MMC_TXLATECOL", 744, dir, &MMC_TXLATECOL_val,
+				&MMC_TXLATECOL_fops);
+	if (MMC_TXLATECOL == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXLATECOL\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXDEFERRED =
+	    debugfs_create_file("MMC_TXDEFERRED", 744, dir, &MMC_TXDEFERRED_val,
+				&MMC_TXDEFERRED_fops);
+	if (MMC_TXDEFERRED == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXDEFERRED\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXMULTICOL_G =
+	    debugfs_create_file("MMC_TXMULTICOL_G", 744, dir,
+				&MMC_TXMULTICOL_G_val, &MMC_TXMULTICOL_G_fops);
+	if (MMC_TXMULTICOL_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXMULTICOL_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXSINGLECOL_G =
+	    debugfs_create_file("MMC_TXSINGLECOL_G", 744, dir,
+				&MMC_TXSINGLECOL_G_val,
+				&MMC_TXSINGLECOL_G_fops);
+	if (MMC_TXSINGLECOL_G == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXSINGLECOL_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXUNDERFLOWERROR =
+	    debugfs_create_file("MMC_TXUNDERFLOWERROR", 744, dir,
+				&MMC_TXUNDERFLOWERROR_val,
+				&MMC_TXUNDERFLOWERROR_fops);
+	if (MMC_TXUNDERFLOWERROR == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXUNDERFLOWERROR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXBROADCASTPACKETS_GB =
+	    debugfs_create_file("MMC_TXBROADCASTPACKETS_GB", 744, dir,
+				&MMC_TXBROADCASTPACKETS_GB_val,
+				&MMC_TXBROADCASTPACKETS_GB_fops);
+	if (MMC_TXBROADCASTPACKETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TXBROADCASTPACKETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXMULTICASTPACKETS_GB =
+	    debugfs_create_file("MMC_TXMULTICASTPACKETS_GB", 744, dir,
+				&MMC_TXMULTICASTPACKETS_GB_val,
+				&MMC_TXMULTICASTPACKETS_GB_fops);
+	if (MMC_TXMULTICASTPACKETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TXMULTICASTPACKETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXUNICASTPACKETS_GB =
+	    debugfs_create_file("MMC_TXUNICASTPACKETS_GB", 744, dir,
+				&MMC_TXUNICASTPACKETS_GB_val,
+				&MMC_TXUNICASTPACKETS_GB_fops);
+	if (MMC_TXUNICASTPACKETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TXUNICASTPACKETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX1024TOMAXOCTETS_GB =
+	    debugfs_create_file("MMC_TX1024TOMAXOCTETS_GB", 744, dir,
+				&MMC_TX1024TOMAXOCTETS_GB_val,
+				&MMC_TX1024TOMAXOCTETS_GB_fops);
+	if (MMC_TX1024TOMAXOCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TX1024TOMAXOCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX512TO1023OCTETS_GB =
+	    debugfs_create_file("MMC_TX512TO1023OCTETS_GB", 744, dir,
+				&MMC_TX512TO1023OCTETS_GB_val,
+				&MMC_TX512TO1023OCTETS_GB_fops);
+	if (MMC_TX512TO1023OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TX512TO1023OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX256TO511OCTETS_GB =
+	    debugfs_create_file("MMC_TX256TO511OCTETS_GB", 744, dir,
+				&MMC_TX256TO511OCTETS_GB_val,
+				&MMC_TX256TO511OCTETS_GB_fops);
+	if (MMC_TX256TO511OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TX256TO511OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX128TO255OCTETS_GB =
+	    debugfs_create_file("MMC_TX128TO255OCTETS_GB", 744, dir,
+				&MMC_TX128TO255OCTETS_GB_val,
+				&MMC_TX128TO255OCTETS_GB_fops);
+	if (MMC_TX128TO255OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TX128TO255OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX65TO127OCTETS_GB =
+	    debugfs_create_file("MMC_TX65TO127OCTETS_GB", 744, dir,
+				&MMC_TX65TO127OCTETS_GB_val,
+				&MMC_TX65TO127OCTETS_GB_fops);
+	if (MMC_TX65TO127OCTETS_GB == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TX65TO127OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TX64OCTETS_GB =
+	    debugfs_create_file("MMC_TX64OCTETS_GB", 744, dir,
+				&MMC_TX64OCTETS_GB_val,
+				&MMC_TX64OCTETS_GB_fops);
+	if (MMC_TX64OCTETS_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TX64OCTETS_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXMULTICASTPACKETS_G =
+	    debugfs_create_file("MMC_TXMULTICASTPACKETS_G", 744, dir,
+				&MMC_TXMULTICASTPACKETS_G_val,
+				&MMC_TXMULTICASTPACKETS_G_fops);
+	if (MMC_TXMULTICASTPACKETS_G == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TXMULTICASTPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXBROADCASTPACKETS_G =
+	    debugfs_create_file("MMC_TXBROADCASTPACKETS_G", 744, dir,
+				&MMC_TXBROADCASTPACKETS_G_val,
+				&MMC_TXBROADCASTPACKETS_G_fops);
+	if (MMC_TXBROADCASTPACKETS_G == NULL) {
+		printk(KERN_INFO
+		       "error creating file: MMC_TXBROADCASTPACKETS_G\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXPACKETCOUNT_GB =
+	    debugfs_create_file("MMC_TXPACKETCOUNT_GB", 744, dir,
+				&MMC_TXPACKETCOUNT_GB_val,
+				&MMC_TXPACKETCOUNT_GB_fops);
+	if (MMC_TXPACKETCOUNT_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXPACKETCOUNT_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_TXOCTETCOUNT_GB =
+	    debugfs_create_file("MMC_TXOCTETCOUNT_GB", 744, dir,
+				&MMC_TXOCTETCOUNT_GB_val,
+				&MMC_TXOCTETCOUNT_GB_fops);
+	if (MMC_TXOCTETCOUNT_GB == NULL) {
+		printk(KERN_INFO "error creating file: MMC_TXOCTETCOUNT_GB\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_IPC_INTR_RX =
+	    debugfs_create_file("MMC_IPC_INTR_RX", 744, dir,
+				&MMC_IPC_INTR_RX_val, &MMC_IPC_INTR_RX_fops);
+	if (MMC_IPC_INTR_RX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_IPC_INTR_RX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_IPC_INTR_MASK_RX =
+	    debugfs_create_file("MMC_IPC_INTR_MASK_RX", 744, dir,
+				&MMC_IPC_INTR_MASK_RX_val,
+				&MMC_IPC_INTR_MASK_RX_fops);
+	if (MMC_IPC_INTR_MASK_RX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_IPC_INTR_MASK_RX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_INTR_MASK_TX =
+	    debugfs_create_file("MMC_INTR_MASK_TX", 744, dir,
+				&MMC_INTR_MASK_TX_val, &MMC_INTR_MASK_TX_fops);
+	if (MMC_INTR_MASK_TX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_INTR_MASK_TX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_INTR_MASK_RX =
+	    debugfs_create_file("MMC_INTR_MASK_RX", 744, dir,
+				&MMC_INTR_MASK_RX_val, &MMC_INTR_MASK_RX_fops);
+	if (MMC_INTR_MASK_RX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_INTR_MASK_RX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_INTR_TX =
+	    debugfs_create_file("MMC_INTR_TX", 744, dir, &MMC_INTR_TX_val,
+				&MMC_INTR_TX_fops);
+	if (MMC_INTR_TX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_INTR_TX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_INTR_RX =
+	    debugfs_create_file("MMC_INTR_RX", 744, dir, &MMC_INTR_RX_val,
+				&MMC_INTR_RX_fops);
+	if (MMC_INTR_RX == NULL) {
+		printk(KERN_INFO "error creating file: MMC_INTR_RX\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MMC_CNTRL =
+	    debugfs_create_file("MMC_CNTRL", 744, dir, &MMC_CNTRL_val,
+				&MMC_CNTRL_fops);
+	if (MMC_CNTRL == NULL) {
+		printk(KERN_INFO "error creating file: MMC_CNTRL\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1LR =
+	    debugfs_create_file("MAC_MA1LR", 744, dir, &MAC_MA1LR_val,
+				&MAC_MA1LR_fops);
+	if (MAC_MA1LR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1LR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA1HR =
+	    debugfs_create_file("MAC_MA1HR", 744, dir, &MAC_MA1HR_val,
+				&MAC_MA1HR_fops);
+	if (MAC_MA1HR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA1HR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA0LR =
+	    debugfs_create_file("MAC_MA0LR", 744, dir, &MAC_MA0LR_val,
+				&MAC_MA0LR_fops);
+	if (MAC_MA0LR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA0LR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MA0HR =
+	    debugfs_create_file("MAC_MA0HR", 744, dir, &MAC_MA0HR_val,
+				&MAC_MA0HR_fops);
+	if (MAC_MA0HR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MA0HR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_GPIOR =
+	    debugfs_create_file("MAC_GPIOR", 744, dir, &MAC_GPIOR_val,
+				&MAC_GPIOR_fops);
+	if (MAC_GPIOR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_GPIOR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_GMIIDR =
+	    debugfs_create_file("MAC_GMIIDR", 744, dir, &MAC_GMIIDR_val,
+				&MAC_GMIIDR_fops);
+	if (MAC_GMIIDR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_GMIIDR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_GMIIAR =
+	    debugfs_create_file("MAC_GMIIAR", 744, dir, &MAC_GMIIAR_val,
+				&MAC_GMIIAR_fops);
+	if (MAC_GMIIAR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_GMIIAR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HFR2 =
+	    debugfs_create_file("MAC_HFR2", 744, dir, &MAC_HFR2_val,
+				&MAC_HFR2_fops);
+	if (MAC_HFR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HFR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HFR1 =
+	    debugfs_create_file("MAC_HFR1", 744, dir, &MAC_HFR1_val,
+				&MAC_HFR1_fops);
+	if (MAC_HFR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HFR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HFR0 =
+	    debugfs_create_file("MAC_HFR0", 744, dir, &MAC_HFR0_val,
+				&MAC_HFR0_fops);
+	if (MAC_HFR0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HFR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MDR =
+	    debugfs_create_file("MAC_MDR", 744, dir, &MAC_MDR_val,
+				&MAC_MDR_fops);
+	if (MAC_MDR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MDR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_VR =
+	    debugfs_create_file("MAC_VR", 744, dir, &MAC_VR_val, &MAC_VR_fops);
+	if (MAC_VR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_VR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR7 =
+	    debugfs_create_file("MAC_HTR7", 744, dir, &MAC_HTR7_val,
+				&MAC_HTR7_fops);
+	if (MAC_HTR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR6 =
+	    debugfs_create_file("MAC_HTR6", 744, dir, &MAC_HTR6_val,
+				&MAC_HTR6_fops);
+	if (MAC_HTR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR5 =
+	    debugfs_create_file("MAC_HTR5", 744, dir, &MAC_HTR5_val,
+				&MAC_HTR5_fops);
+	if (MAC_HTR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR4 =
+	    debugfs_create_file("MAC_HTR4", 744, dir, &MAC_HTR4_val,
+				&MAC_HTR4_fops);
+	if (MAC_HTR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR3 =
+	    debugfs_create_file("MAC_HTR3", 744, dir, &MAC_HTR3_val,
+				&MAC_HTR3_fops);
+	if (MAC_HTR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR2 =
+	    debugfs_create_file("MAC_HTR2", 744, dir, &MAC_HTR2_val,
+				&MAC_HTR2_fops);
+	if (MAC_HTR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR1 =
+	    debugfs_create_file("MAC_HTR1", 744, dir, &MAC_HTR1_val,
+				&MAC_HTR1_fops);
+	if (MAC_HTR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_HTR0 =
+	    debugfs_create_file("MAC_HTR0", 744, dir, &MAC_HTR0_val,
+				&MAC_HTR0_fops);
+	if (MAC_HTR0 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_HTR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR7 =
+	    debugfs_create_file("DMA_RIWTR7", 744, dir, &DMA_RIWTR7_val,
+				&DMA_RIWTR7_fops);
+	if (DMA_RIWTR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR6 =
+	    debugfs_create_file("DMA_RIWTR6", 744, dir, &DMA_RIWTR6_val,
+				&DMA_RIWTR6_fops);
+	if (DMA_RIWTR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR5 =
+	    debugfs_create_file("DMA_RIWTR5", 744, dir, &DMA_RIWTR5_val,
+				&DMA_RIWTR5_fops);
+	if (DMA_RIWTR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR4 =
+	    debugfs_create_file("DMA_RIWTR4", 744, dir, &DMA_RIWTR4_val,
+				&DMA_RIWTR4_fops);
+	if (DMA_RIWTR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR3 =
+	    debugfs_create_file("DMA_RIWTR3", 744, dir, &DMA_RIWTR3_val,
+				&DMA_RIWTR3_fops);
+	if (DMA_RIWTR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR2 =
+	    debugfs_create_file("DMA_RIWTR2", 744, dir, &DMA_RIWTR2_val,
+				&DMA_RIWTR2_fops);
+	if (DMA_RIWTR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR1 =
+	    debugfs_create_file("DMA_RIWTR1", 744, dir, &DMA_RIWTR1_val,
+				&DMA_RIWTR1_fops);
+	if (DMA_RIWTR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RIWTR0 =
+	    debugfs_create_file("DMA_RIWTR0", 744, dir, &DMA_RIWTR0_val,
+				&DMA_RIWTR0_fops);
+	if (DMA_RIWTR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RIWTR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR7 =
+	    debugfs_create_file("DMA_RDRLR7", 744, dir, &DMA_RDRLR7_val,
+				&DMA_RDRLR7_fops);
+	if (DMA_RDRLR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR6 =
+	    debugfs_create_file("DMA_RDRLR6", 744, dir, &DMA_RDRLR6_val,
+				&DMA_RDRLR6_fops);
+	if (DMA_RDRLR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR5 =
+	    debugfs_create_file("DMA_RDRLR5", 744, dir, &DMA_RDRLR5_val,
+				&DMA_RDRLR5_fops);
+	if (DMA_RDRLR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR4 =
+	    debugfs_create_file("DMA_RDRLR4", 744, dir, &DMA_RDRLR4_val,
+				&DMA_RDRLR4_fops);
+	if (DMA_RDRLR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR3 =
+	    debugfs_create_file("DMA_RDRLR3", 744, dir, &DMA_RDRLR3_val,
+				&DMA_RDRLR3_fops);
+	if (DMA_RDRLR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR2 =
+	    debugfs_create_file("DMA_RDRLR2", 744, dir, &DMA_RDRLR2_val,
+				&DMA_RDRLR2_fops);
+	if (DMA_RDRLR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR1 =
+	    debugfs_create_file("DMA_RDRLR1", 744, dir, &DMA_RDRLR1_val,
+				&DMA_RDRLR1_fops);
+	if (DMA_RDRLR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDRLR0 =
+	    debugfs_create_file("DMA_RDRLR0", 744, dir, &DMA_RDRLR0_val,
+				&DMA_RDRLR0_fops);
+	if (DMA_RDRLR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDRLR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR7 =
+	    debugfs_create_file("DMA_TDRLR7", 744, dir, &DMA_TDRLR7_val,
+				&DMA_TDRLR7_fops);
+	if (DMA_TDRLR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR6 =
+	    debugfs_create_file("DMA_TDRLR6", 744, dir, &DMA_TDRLR6_val,
+				&DMA_TDRLR6_fops);
+	if (DMA_TDRLR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR5 =
+	    debugfs_create_file("DMA_TDRLR5", 744, dir, &DMA_TDRLR5_val,
+				&DMA_TDRLR5_fops);
+	if (DMA_TDRLR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR4 =
+	    debugfs_create_file("DMA_TDRLR4", 744, dir, &DMA_TDRLR4_val,
+				&DMA_TDRLR4_fops);
+	if (DMA_TDRLR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR3 =
+	    debugfs_create_file("DMA_TDRLR3", 744, dir, &DMA_TDRLR3_val,
+				&DMA_TDRLR3_fops);
+	if (DMA_TDRLR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR2 =
+	    debugfs_create_file("DMA_TDRLR2", 744, dir, &DMA_TDRLR2_val,
+				&DMA_TDRLR2_fops);
+	if (DMA_TDRLR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR1 =
+	    debugfs_create_file("DMA_TDRLR1", 744, dir, &DMA_TDRLR1_val,
+				&DMA_TDRLR1_fops);
+	if (DMA_TDRLR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDRLR0 =
+	    debugfs_create_file("DMA_TDRLR0", 744, dir, &DMA_TDRLR0_val,
+				&DMA_TDRLR0_fops);
+	if (DMA_TDRLR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDRLR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR7 =
+	    debugfs_create_file("DMA_RDTP_RPDR7", 744, dir, &DMA_RDTP_RPDR7_val,
+				&DMA_RDTP_RPDR7_fops);
+	if (DMA_RDTP_RPDR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR6 =
+	    debugfs_create_file("DMA_RDTP_RPDR6", 744, dir, &DMA_RDTP_RPDR6_val,
+				&DMA_RDTP_RPDR6_fops);
+	if (DMA_RDTP_RPDR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR5 =
+	    debugfs_create_file("DMA_RDTP_RPDR5", 744, dir, &DMA_RDTP_RPDR5_val,
+				&DMA_RDTP_RPDR5_fops);
+	if (DMA_RDTP_RPDR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR4 =
+	    debugfs_create_file("DMA_RDTP_RPDR4", 744, dir, &DMA_RDTP_RPDR4_val,
+				&DMA_RDTP_RPDR4_fops);
+	if (DMA_RDTP_RPDR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR3 =
+	    debugfs_create_file("DMA_RDTP_RPDR3", 744, dir, &DMA_RDTP_RPDR3_val,
+				&DMA_RDTP_RPDR3_fops);
+	if (DMA_RDTP_RPDR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR2 =
+	    debugfs_create_file("DMA_RDTP_RPDR2", 744, dir, &DMA_RDTP_RPDR2_val,
+				&DMA_RDTP_RPDR2_fops);
+	if (DMA_RDTP_RPDR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR1 =
+	    debugfs_create_file("DMA_RDTP_RPDR1", 744, dir, &DMA_RDTP_RPDR1_val,
+				&DMA_RDTP_RPDR1_fops);
+	if (DMA_RDTP_RPDR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDTP_RPDR0 =
+	    debugfs_create_file("DMA_RDTP_RPDR0", 744, dir, &DMA_RDTP_RPDR0_val,
+				&DMA_RDTP_RPDR0_fops);
+	if (DMA_RDTP_RPDR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDTP_RPDR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR7 =
+	    debugfs_create_file("DMA_TDTP_TPDR7", 744, dir, &DMA_TDTP_TPDR7_val,
+				&DMA_TDTP_TPDR7_fops);
+	if (DMA_TDTP_TPDR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR6 =
+	    debugfs_create_file("DMA_TDTP_TPDR6", 744, dir, &DMA_TDTP_TPDR6_val,
+				&DMA_TDTP_TPDR6_fops);
+	if (DMA_TDTP_TPDR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR5 =
+	    debugfs_create_file("DMA_TDTP_TPDR5", 744, dir, &DMA_TDTP_TPDR5_val,
+				&DMA_TDTP_TPDR5_fops);
+	if (DMA_TDTP_TPDR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR4 =
+	    debugfs_create_file("DMA_TDTP_TPDR4", 744, dir, &DMA_TDTP_TPDR4_val,
+				&DMA_TDTP_TPDR4_fops);
+	if (DMA_TDTP_TPDR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR3 =
+	    debugfs_create_file("DMA_TDTP_TPDR3", 744, dir, &DMA_TDTP_TPDR3_val,
+				&DMA_TDTP_TPDR3_fops);
+	if (DMA_TDTP_TPDR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR2 =
+	    debugfs_create_file("DMA_TDTP_TPDR2", 744, dir, &DMA_TDTP_TPDR2_val,
+				&DMA_TDTP_TPDR2_fops);
+	if (DMA_TDTP_TPDR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR1 =
+	    debugfs_create_file("DMA_TDTP_TPDR1", 744, dir, &DMA_TDTP_TPDR1_val,
+				&DMA_TDTP_TPDR1_fops);
+	if (DMA_TDTP_TPDR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDTP_TPDR0 =
+	    debugfs_create_file("DMA_TDTP_TPDR0", 744, dir, &DMA_TDTP_TPDR0_val,
+				&DMA_TDTP_TPDR0_fops);
+	if (DMA_TDTP_TPDR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDTP_TPDR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR7 =
+	    debugfs_create_file("DMA_RDLAR7", 744, dir, &DMA_RDLAR7_val,
+				&DMA_RDLAR7_fops);
+	if (DMA_RDLAR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR6 =
+	    debugfs_create_file("DMA_RDLAR6", 744, dir, &DMA_RDLAR6_val,
+				&DMA_RDLAR6_fops);
+	if (DMA_RDLAR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR5 =
+	    debugfs_create_file("DMA_RDLAR5", 744, dir, &DMA_RDLAR5_val,
+				&DMA_RDLAR5_fops);
+	if (DMA_RDLAR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR4 =
+	    debugfs_create_file("DMA_RDLAR4", 744, dir, &DMA_RDLAR4_val,
+				&DMA_RDLAR4_fops);
+	if (DMA_RDLAR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR3 =
+	    debugfs_create_file("DMA_RDLAR3", 744, dir, &DMA_RDLAR3_val,
+				&DMA_RDLAR3_fops);
+	if (DMA_RDLAR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR2 =
+	    debugfs_create_file("DMA_RDLAR2", 744, dir, &DMA_RDLAR2_val,
+				&DMA_RDLAR2_fops);
+	if (DMA_RDLAR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR1 =
+	    debugfs_create_file("DMA_RDLAR1", 744, dir, &DMA_RDLAR1_val,
+				&DMA_RDLAR1_fops);
+	if (DMA_RDLAR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RDLAR0 =
+	    debugfs_create_file("DMA_RDLAR0", 744, dir, &DMA_RDLAR0_val,
+				&DMA_RDLAR0_fops);
+	if (DMA_RDLAR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RDLAR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR7 =
+	    debugfs_create_file("DMA_TDLAR7", 744, dir, &DMA_TDLAR7_val,
+				&DMA_TDLAR7_fops);
+	if (DMA_TDLAR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR6 =
+	    debugfs_create_file("DMA_TDLAR6", 744, dir, &DMA_TDLAR6_val,
+				&DMA_TDLAR6_fops);
+	if (DMA_TDLAR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR5 =
+	    debugfs_create_file("DMA_TDLAR5", 744, dir, &DMA_TDLAR5_val,
+				&DMA_TDLAR5_fops);
+	if (DMA_TDLAR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR4 =
+	    debugfs_create_file("DMA_TDLAR4", 744, dir, &DMA_TDLAR4_val,
+				&DMA_TDLAR4_fops);
+	if (DMA_TDLAR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR3 =
+	    debugfs_create_file("DMA_TDLAR3", 744, dir, &DMA_TDLAR3_val,
+				&DMA_TDLAR3_fops);
+	if (DMA_TDLAR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR2 =
+	    debugfs_create_file("DMA_TDLAR2", 744, dir, &DMA_TDLAR2_val,
+				&DMA_TDLAR2_fops);
+	if (DMA_TDLAR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR1 =
+	    debugfs_create_file("DMA_TDLAR1", 744, dir, &DMA_TDLAR1_val,
+				&DMA_TDLAR1_fops);
+	if (DMA_TDLAR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TDLAR0 =
+	    debugfs_create_file("DMA_TDLAR0", 744, dir, &DMA_TDLAR0_val,
+				&DMA_TDLAR0_fops);
+	if (DMA_TDLAR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TDLAR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER7 =
+	    debugfs_create_file("DMA_IER7", 744, dir, &DMA_IER7_val,
+				&DMA_IER7_fops);
+	if (DMA_IER7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER6 =
+	    debugfs_create_file("DMA_IER6", 744, dir, &DMA_IER6_val,
+				&DMA_IER6_fops);
+	if (DMA_IER6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER5 =
+	    debugfs_create_file("DMA_IER5", 744, dir, &DMA_IER5_val,
+				&DMA_IER5_fops);
+	if (DMA_IER5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER4 =
+	    debugfs_create_file("DMA_IER4", 744, dir, &DMA_IER4_val,
+				&DMA_IER4_fops);
+	if (DMA_IER4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER3 =
+	    debugfs_create_file("DMA_IER3", 744, dir, &DMA_IER3_val,
+				&DMA_IER3_fops);
+	if (DMA_IER3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER2 =
+	    debugfs_create_file("DMA_IER2", 744, dir, &DMA_IER2_val,
+				&DMA_IER2_fops);
+	if (DMA_IER2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER1 =
+	    debugfs_create_file("DMA_IER1", 744, dir, &DMA_IER1_val,
+				&DMA_IER1_fops);
+	if (DMA_IER1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_IER0 =
+	    debugfs_create_file("DMA_IER0", 744, dir, &DMA_IER0_val,
+				&DMA_IER0_fops);
+	if (DMA_IER0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_IER0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_IMR =
+	    debugfs_create_file("MAC_IMR", 744, dir, &MAC_IMR_val,
+				&MAC_IMR_fops);
+	if (MAC_IMR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_IMR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_ISR =
+	    debugfs_create_file("MAC_ISR", 744, dir, &MAC_ISR_val,
+				&MAC_ISR_fops);
+	if (MAC_ISR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_ISR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_ISR =
+	    debugfs_create_file("MTL_ISR", 744, dir, &MTL_ISR_val,
+				&MTL_ISR_fops);
+	if (MTL_ISR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_ISR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR7 =
+	    debugfs_create_file("DMA_SR7", 744, dir, &DMA_SR7_val,
+				&DMA_SR7_fops);
+	if (DMA_SR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR6 =
+	    debugfs_create_file("DMA_SR6", 744, dir, &DMA_SR6_val,
+				&DMA_SR6_fops);
+	if (DMA_SR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR5 =
+	    debugfs_create_file("DMA_SR5", 744, dir, &DMA_SR5_val,
+				&DMA_SR5_fops);
+	if (DMA_SR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR4 =
+	    debugfs_create_file("DMA_SR4", 744, dir, &DMA_SR4_val,
+				&DMA_SR4_fops);
+	if (DMA_SR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR3 =
+	    debugfs_create_file("DMA_SR3", 744, dir, &DMA_SR3_val,
+				&DMA_SR3_fops);
+	if (DMA_SR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR2 =
+	    debugfs_create_file("DMA_SR2", 744, dir, &DMA_SR2_val,
+				&DMA_SR2_fops);
+	if (DMA_SR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR1 =
+	    debugfs_create_file("DMA_SR1", 744, dir, &DMA_SR1_val,
+				&DMA_SR1_fops);
+	if (DMA_SR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SR0 =
+	    debugfs_create_file("DMA_SR0", 744, dir, &DMA_SR0_val,
+				&DMA_SR0_fops);
+	if (DMA_SR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_ISR =
+	    debugfs_create_file("DMA_ISR", 744, dir, &DMA_ISR_val,
+				&DMA_ISR_fops);
+	if (DMA_ISR == NULL) {
+		printk(KERN_INFO "error creating file: DMA_ISR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_DSR2 =
+	    debugfs_create_file("DMA_DSR2", 744, dir, &DMA_DSR2_val,
+				&DMA_DSR2_fops);
+	if (DMA_DSR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_DSR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_DSR1 =
+	    debugfs_create_file("DMA_DSR1", 744, dir, &DMA_DSR1_val,
+				&DMA_DSR1_fops);
+	if (DMA_DSR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_DSR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_DSR0 =
+	    debugfs_create_file("DMA_DSR0", 744, dir, &DMA_DSR0_val,
+				&DMA_DSR0_fops);
+	if (DMA_DSR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_DSR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0RDR =
+	    debugfs_create_file("MTL_Q0RDR", 744, dir, &MTL_Q0RDR_val,
+				&MTL_Q0RDR_fops);
+	if (MTL_Q0RDR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0RDR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0ESR =
+	    debugfs_create_file("MTL_Q0ESR", 744, dir, &MTL_Q0ESR_val,
+				&MTL_Q0ESR_fops);
+	if (MTL_Q0ESR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0ESR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0TDR =
+	    debugfs_create_file("MTL_Q0TDR", 744, dir, &MTL_Q0TDR_val,
+				&MTL_Q0TDR_fops);
+	if (MTL_Q0TDR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0TDR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR7 =
+	    debugfs_create_file("DMA_CHRBAR7", 744, dir, &DMA_CHRBAR7_val,
+				&DMA_CHRBAR7_fops);
+	if (DMA_CHRBAR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR6 =
+	    debugfs_create_file("DMA_CHRBAR6", 744, dir, &DMA_CHRBAR6_val,
+				&DMA_CHRBAR6_fops);
+	if (DMA_CHRBAR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR5 =
+	    debugfs_create_file("DMA_CHRBAR5", 744, dir, &DMA_CHRBAR5_val,
+				&DMA_CHRBAR5_fops);
+	if (DMA_CHRBAR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR4 =
+	    debugfs_create_file("DMA_CHRBAR4", 744, dir, &DMA_CHRBAR4_val,
+				&DMA_CHRBAR4_fops);
+	if (DMA_CHRBAR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR3 =
+	    debugfs_create_file("DMA_CHRBAR3", 744, dir, &DMA_CHRBAR3_val,
+				&DMA_CHRBAR3_fops);
+	if (DMA_CHRBAR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR2 =
+	    debugfs_create_file("DMA_CHRBAR2", 744, dir, &DMA_CHRBAR2_val,
+				&DMA_CHRBAR2_fops);
+	if (DMA_CHRBAR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR1 =
+	    debugfs_create_file("DMA_CHRBAR1", 744, dir, &DMA_CHRBAR1_val,
+				&DMA_CHRBAR1_fops);
+	if (DMA_CHRBAR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRBAR0 =
+	    debugfs_create_file("DMA_CHRBAR0", 744, dir, &DMA_CHRBAR0_val,
+				&DMA_CHRBAR0_fops);
+	if (DMA_CHRBAR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRBAR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR7 =
+	    debugfs_create_file("DMA_CHTBAR7", 744, dir, &DMA_CHTBAR7_val,
+				&DMA_CHTBAR7_fops);
+	if (DMA_CHTBAR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR6 =
+	    debugfs_create_file("DMA_CHTBAR6", 744, dir, &DMA_CHTBAR6_val,
+				&DMA_CHTBAR6_fops);
+	if (DMA_CHTBAR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR5 =
+	    debugfs_create_file("DMA_CHTBAR5", 744, dir, &DMA_CHTBAR5_val,
+				&DMA_CHTBAR5_fops);
+	if (DMA_CHTBAR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR4 =
+	    debugfs_create_file("DMA_CHTBAR4", 744, dir, &DMA_CHTBAR4_val,
+				&DMA_CHTBAR4_fops);
+	if (DMA_CHTBAR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR3 =
+	    debugfs_create_file("DMA_CHTBAR3", 744, dir, &DMA_CHTBAR3_val,
+				&DMA_CHTBAR3_fops);
+	if (DMA_CHTBAR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR2 =
+	    debugfs_create_file("DMA_CHTBAR2", 744, dir, &DMA_CHTBAR2_val,
+				&DMA_CHTBAR2_fops);
+	if (DMA_CHTBAR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR1 =
+	    debugfs_create_file("DMA_CHTBAR1", 744, dir, &DMA_CHTBAR1_val,
+				&DMA_CHTBAR1_fops);
+	if (DMA_CHTBAR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTBAR0 =
+	    debugfs_create_file("DMA_CHTBAR0", 744, dir, &DMA_CHTBAR0_val,
+				&DMA_CHTBAR0_fops);
+	if (DMA_CHTBAR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTBAR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR7 =
+	    debugfs_create_file("DMA_CHRDR7", 744, dir, &DMA_CHRDR7_val,
+				&DMA_CHRDR7_fops);
+	if (DMA_CHRDR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR6 =
+	    debugfs_create_file("DMA_CHRDR6", 744, dir, &DMA_CHRDR6_val,
+				&DMA_CHRDR6_fops);
+	if (DMA_CHRDR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR5 =
+	    debugfs_create_file("DMA_CHRDR5", 744, dir, &DMA_CHRDR5_val,
+				&DMA_CHRDR5_fops);
+	if (DMA_CHRDR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR4 =
+	    debugfs_create_file("DMA_CHRDR4", 744, dir, &DMA_CHRDR4_val,
+				&DMA_CHRDR4_fops);
+	if (DMA_CHRDR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR3 =
+	    debugfs_create_file("DMA_CHRDR3", 744, dir, &DMA_CHRDR3_val,
+				&DMA_CHRDR3_fops);
+	if (DMA_CHRDR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR2 =
+	    debugfs_create_file("DMA_CHRDR2", 744, dir, &DMA_CHRDR2_val,
+				&DMA_CHRDR2_fops);
+	if (DMA_CHRDR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR1 =
+	    debugfs_create_file("DMA_CHRDR1", 744, dir, &DMA_CHRDR1_val,
+				&DMA_CHRDR1_fops);
+	if (DMA_CHRDR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHRDR0 =
+	    debugfs_create_file("DMA_CHRDR0", 744, dir, &DMA_CHRDR0_val,
+				&DMA_CHRDR0_fops);
+	if (DMA_CHRDR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHRDR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR7 =
+	    debugfs_create_file("DMA_CHTDR7", 744, dir, &DMA_CHTDR7_val,
+				&DMA_CHTDR7_fops);
+	if (DMA_CHTDR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR6 =
+	    debugfs_create_file("DMA_CHTDR6", 744, dir, &DMA_CHTDR6_val,
+				&DMA_CHTDR6_fops);
+	if (DMA_CHTDR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR5 =
+	    debugfs_create_file("DMA_CHTDR5", 744, dir, &DMA_CHTDR5_val,
+				&DMA_CHTDR5_fops);
+	if (DMA_CHTDR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR4 =
+	    debugfs_create_file("DMA_CHTDR4", 744, dir, &DMA_CHTDR4_val,
+				&DMA_CHTDR4_fops);
+	if (DMA_CHTDR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR3 =
+	    debugfs_create_file("DMA_CHTDR3", 744, dir, &DMA_CHTDR3_val,
+				&DMA_CHTDR3_fops);
+	if (DMA_CHTDR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR2 =
+	    debugfs_create_file("DMA_CHTDR2", 744, dir, &DMA_CHTDR2_val,
+				&DMA_CHTDR2_fops);
+	if (DMA_CHTDR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR1 =
+	    debugfs_create_file("DMA_CHTDR1", 744, dir, &DMA_CHTDR1_val,
+				&DMA_CHTDR1_fops);
+	if (DMA_CHTDR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CHTDR0 =
+	    debugfs_create_file("DMA_CHTDR0", 744, dir, &DMA_CHTDR0_val,
+				&DMA_CHTDR0_fops);
+	if (DMA_CHTDR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CHTDR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR7 =
+	    debugfs_create_file("DMA_SFCSR7", 744, dir, &DMA_SFCSR7_val,
+				&DMA_SFCSR7_fops);
+	if (DMA_SFCSR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR6 =
+	    debugfs_create_file("DMA_SFCSR6", 744, dir, &DMA_SFCSR6_val,
+				&DMA_SFCSR6_fops);
+	if (DMA_SFCSR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR5 =
+	    debugfs_create_file("DMA_SFCSR5", 744, dir, &DMA_SFCSR5_val,
+				&DMA_SFCSR5_fops);
+	if (DMA_SFCSR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR4 =
+	    debugfs_create_file("DMA_SFCSR4", 744, dir, &DMA_SFCSR4_val,
+				&DMA_SFCSR4_fops);
+	if (DMA_SFCSR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR3 =
+	    debugfs_create_file("DMA_SFCSR3", 744, dir, &DMA_SFCSR3_val,
+				&DMA_SFCSR3_fops);
+	if (DMA_SFCSR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR2 =
+	    debugfs_create_file("DMA_SFCSR2", 744, dir, &DMA_SFCSR2_val,
+				&DMA_SFCSR2_fops);
+	if (DMA_SFCSR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR1 =
+	    debugfs_create_file("DMA_SFCSR1", 744, dir, &DMA_SFCSR1_val,
+				&DMA_SFCSR1_fops);
+	if (DMA_SFCSR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SFCSR0 =
+	    debugfs_create_file("DMA_SFCSR0", 744, dir, &DMA_SFCSR0_val,
+				&DMA_SFCSR0_fops);
+	if (DMA_SFCSR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SFCSR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_IVLANTIRR =
+	    debugfs_create_file("MAC_IVLANTIRR", 744, dir, &MAC_IVLANTIRR_val,
+				&MAC_IVLANTIRR_fops);
+	if (MAC_IVLANTIRR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_IVLANTIRR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_VLANTIRR =
+	    debugfs_create_file("MAC_VLANTIRR", 744, dir, &MAC_VLANTIRR_val,
+				&MAC_VLANTIRR_fops);
+	if (MAC_VLANTIRR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_VLANTIRR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_VLANHTR =
+	    debugfs_create_file("MAC_VLANHTR", 744, dir, &MAC_VLANHTR_val,
+				&MAC_VLANHTR_fops);
+	if (MAC_VLANHTR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_VLANHTR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_VLANTR =
+	    debugfs_create_file("MAC_VLANTR", 744, dir, &MAC_VLANTR_val,
+				&MAC_VLANTR_fops);
+	if (MAC_VLANTR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_VLANTR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_SBUS =
+	    debugfs_create_file("DMA_SBUS", 744, dir, &DMA_SBUS_val,
+				&DMA_SBUS_fops);
+	if (DMA_SBUS == NULL) {
+		printk(KERN_INFO "error creating file: DMA_SBUS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_BMR =
+	    debugfs_create_file("DMA_BMR", 744, dir, &DMA_BMR_val,
+				&DMA_BMR_fops);
+	if (DMA_BMR == NULL) {
+		printk(KERN_INFO "error creating file: DMA_BMR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0RCR =
+	    debugfs_create_file("MTL_Q0RCR", 744, dir, &MTL_Q0RCR_val,
+				&MTL_Q0RCR_fops);
+	if (MTL_Q0RCR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0RCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0OCR =
+	    debugfs_create_file("MTL_Q0OCR", 744, dir, &MTL_Q0OCR_val,
+				&MTL_Q0OCR_fops);
+	if (MTL_Q0OCR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0OCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0ROMR =
+	    debugfs_create_file("MTL_Q0ROMR", 744, dir, &MTL_Q0ROMR_val,
+				&MTL_Q0ROMR_fops);
+	if (MTL_Q0ROMR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0ROMR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0QR =
+	    debugfs_create_file("MTL_Q0QR", 744, dir, &MTL_Q0QR_val,
+				&MTL_Q0QR_fops);
+	if (MTL_Q0QR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0QR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0ECR =
+	    debugfs_create_file("MTL_Q0ECR", 744, dir, &MTL_Q0ECR_val,
+				&MTL_Q0ECR_fops);
+	if (MTL_Q0ECR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0ECR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0UCR =
+	    debugfs_create_file("MTL_Q0UCR", 744, dir, &MTL_Q0UCR_val,
+				&MTL_Q0UCR_fops);
+	if (MTL_Q0UCR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0UCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_Q0TOMR =
+	    debugfs_create_file("MTL_Q0TOMR", 744, dir, &MTL_Q0TOMR_val,
+				&MTL_Q0TOMR_fops);
+	if (MTL_Q0TOMR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_Q0TOMR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_RQDCM1R =
+	    debugfs_create_file("MTL_RQDCM1R", 744, dir, &MTL_RQDCM1R_val,
+				&MTL_RQDCM1R_fops);
+	if (MTL_RQDCM1R == NULL) {
+		printk(KERN_INFO "error creating file: MTL_RQDCM1R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_RQDCM0R =
+	    debugfs_create_file("MTL_RQDCM0R", 744, dir, &MTL_RQDCM0R_val,
+				&MTL_RQDCM0R_fops);
+	if (MTL_RQDCM0R == NULL) {
+		printk(KERN_INFO "error creating file: MTL_RQDCM0R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_FDDR =
+	    debugfs_create_file("MTL_FDDR", 744, dir, &MTL_FDDR_val,
+				&MTL_FDDR_fops);
+	if (MTL_FDDR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_FDDR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_FDACS =
+	    debugfs_create_file("MTL_FDACS", 744, dir, &MTL_FDACS_val,
+				&MTL_FDACS_fops);
+	if (MTL_FDACS == NULL) {
+		printk(KERN_INFO "error creating file: MTL_FDACS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MTL_OMR =
+	    debugfs_create_file("MTL_OMR", 744, dir, &MTL_OMR_val,
+				&MTL_OMR_fops);
+	if (MTL_OMR == NULL) {
+		printk(KERN_INFO "error creating file: MTL_OMR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RQC3R =
+	    debugfs_create_file("MAC_RQC3R", 744, dir, &MAC_RQC3R_val,
+				&MAC_RQC3R_fops);
+	if (MAC_RQC3R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RQC3R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RQC2R =
+	    debugfs_create_file("MAC_RQC2R", 744, dir, &MAC_RQC2R_val,
+				&MAC_RQC2R_fops);
+	if (MAC_RQC2R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RQC2R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RQC1R =
+	    debugfs_create_file("MAC_RQC1R", 744, dir, &MAC_RQC1R_val,
+				&MAC_RQC1R_fops);
+	if (MAC_RQC1R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RQC1R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RQC0R =
+	    debugfs_create_file("MAC_RQC0R", 744, dir, &MAC_RQC0R_val,
+				&MAC_RQC0R_fops);
+	if (MAC_RQC0R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RQC0R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TQPM1R =
+	    debugfs_create_file("MAC_TQPM1R", 744, dir, &MAC_TQPM1R_val,
+				&MAC_TQPM1R_fops);
+	if (MAC_TQPM1R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TQPM1R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_TQPM0R =
+	    debugfs_create_file("MAC_TQPM0R", 744, dir, &MAC_TQPM0R_val,
+				&MAC_TQPM0R_fops);
+	if (MAC_TQPM0R == NULL) {
+		printk(KERN_INFO "error creating file: MAC_TQPM0R\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_RFCR =
+	    debugfs_create_file("MAC_RFCR", 744, dir, &MAC_RFCR_val,
+				&MAC_RFCR_fops);
+	if (MAC_RFCR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_RFCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR7 =
+	    debugfs_create_file("MAC_QTFCR7", 744, dir, &MAC_QTFCR7_val,
+				&MAC_QTFCR7_fops);
+	if (MAC_QTFCR7 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR6 =
+	    debugfs_create_file("MAC_QTFCR6", 744, dir, &MAC_QTFCR6_val,
+				&MAC_QTFCR6_fops);
+	if (MAC_QTFCR6 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR5 =
+	    debugfs_create_file("MAC_QTFCR5", 744, dir, &MAC_QTFCR5_val,
+				&MAC_QTFCR5_fops);
+	if (MAC_QTFCR5 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR4 =
+	    debugfs_create_file("MAC_QTFCR4", 744, dir, &MAC_QTFCR4_val,
+				&MAC_QTFCR4_fops);
+	if (MAC_QTFCR4 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR3 =
+	    debugfs_create_file("MAC_QTFCR3", 744, dir, &MAC_QTFCR3_val,
+				&MAC_QTFCR3_fops);
+	if (MAC_QTFCR3 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR2 =
+	    debugfs_create_file("MAC_QTFCR2", 744, dir, &MAC_QTFCR2_val,
+				&MAC_QTFCR2_fops);
+	if (MAC_QTFCR2 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_QTFCR1 =
+	    debugfs_create_file("MAC_QTFCR1", 744, dir, &MAC_QTFCR1_val,
+				&MAC_QTFCR1_fops);
+	if (MAC_QTFCR1 == NULL) {
+		printk(KERN_INFO "error creating file: MAC_QTFCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_Q0TFCR =
+	    debugfs_create_file("MAC_Q0TFCR", 744, dir, &MAC_Q0TFCR_val,
+				&MAC_Q0TFCR_fops);
+	if (MAC_Q0TFCR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_Q0TFCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR7 =
+	    debugfs_create_file("DMA_AXI4CR7", 744, dir, &DMA_AXI4CR7_val,
+				&DMA_AXI4CR7_fops);
+	if (DMA_AXI4CR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR6 =
+	    debugfs_create_file("DMA_AXI4CR6", 744, dir, &DMA_AXI4CR6_val,
+				&DMA_AXI4CR6_fops);
+	if (DMA_AXI4CR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR5 =
+	    debugfs_create_file("DMA_AXI4CR5", 744, dir, &DMA_AXI4CR5_val,
+				&DMA_AXI4CR5_fops);
+	if (DMA_AXI4CR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR4 =
+	    debugfs_create_file("DMA_AXI4CR4", 744, dir, &DMA_AXI4CR4_val,
+				&DMA_AXI4CR4_fops);
+	if (DMA_AXI4CR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR3 =
+	    debugfs_create_file("DMA_AXI4CR3", 744, dir, &DMA_AXI4CR3_val,
+				&DMA_AXI4CR3_fops);
+	if (DMA_AXI4CR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR2 =
+	    debugfs_create_file("DMA_AXI4CR2", 744, dir, &DMA_AXI4CR2_val,
+				&DMA_AXI4CR2_fops);
+	if (DMA_AXI4CR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR1 =
+	    debugfs_create_file("DMA_AXI4CR1", 744, dir, &DMA_AXI4CR1_val,
+				&DMA_AXI4CR1_fops);
+	if (DMA_AXI4CR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_AXI4CR0 =
+	    debugfs_create_file("DMA_AXI4CR0", 744, dir, &DMA_AXI4CR0_val,
+				&DMA_AXI4CR0_fops);
+	if (DMA_AXI4CR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_AXI4CR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR7 =
+	    debugfs_create_file("DMA_RCR7", 744, dir, &DMA_RCR7_val,
+				&DMA_RCR7_fops);
+	if (DMA_RCR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR6 =
+	    debugfs_create_file("DMA_RCR6", 744, dir, &DMA_RCR6_val,
+				&DMA_RCR6_fops);
+	if (DMA_RCR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR5 =
+	    debugfs_create_file("DMA_RCR5", 744, dir, &DMA_RCR5_val,
+				&DMA_RCR5_fops);
+	if (DMA_RCR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR4 =
+	    debugfs_create_file("DMA_RCR4", 744, dir, &DMA_RCR4_val,
+				&DMA_RCR4_fops);
+	if (DMA_RCR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR3 =
+	    debugfs_create_file("DMA_RCR3", 744, dir, &DMA_RCR3_val,
+				&DMA_RCR3_fops);
+	if (DMA_RCR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR2 =
+	    debugfs_create_file("DMA_RCR2", 744, dir, &DMA_RCR2_val,
+				&DMA_RCR2_fops);
+	if (DMA_RCR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR1 =
+	    debugfs_create_file("DMA_RCR1", 744, dir, &DMA_RCR1_val,
+				&DMA_RCR1_fops);
+	if (DMA_RCR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_RCR0 =
+	    debugfs_create_file("DMA_RCR0", 744, dir, &DMA_RCR0_val,
+				&DMA_RCR0_fops);
+	if (DMA_RCR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_RCR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR7 =
+	    debugfs_create_file("DMA_TCR7", 744, dir, &DMA_TCR7_val,
+				&DMA_TCR7_fops);
+	if (DMA_TCR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR6 =
+	    debugfs_create_file("DMA_TCR6", 744, dir, &DMA_TCR6_val,
+				&DMA_TCR6_fops);
+	if (DMA_TCR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR5 =
+	    debugfs_create_file("DMA_TCR5", 744, dir, &DMA_TCR5_val,
+				&DMA_TCR5_fops);
+	if (DMA_TCR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR4 =
+	    debugfs_create_file("DMA_TCR4", 744, dir, &DMA_TCR4_val,
+				&DMA_TCR4_fops);
+	if (DMA_TCR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR3 =
+	    debugfs_create_file("DMA_TCR3", 744, dir, &DMA_TCR3_val,
+				&DMA_TCR3_fops);
+	if (DMA_TCR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR2 =
+	    debugfs_create_file("DMA_TCR2", 744, dir, &DMA_TCR2_val,
+				&DMA_TCR2_fops);
+	if (DMA_TCR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR1 =
+	    debugfs_create_file("DMA_TCR1", 744, dir, &DMA_TCR1_val,
+				&DMA_TCR1_fops);
+	if (DMA_TCR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_TCR0 =
+	    debugfs_create_file("DMA_TCR0", 744, dir, &DMA_TCR0_val,
+				&DMA_TCR0_fops);
+	if (DMA_TCR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_TCR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR7 =
+	    debugfs_create_file("DMA_CR7", 744, dir, &DMA_CR7_val,
+				&DMA_CR7_fops);
+	if (DMA_CR7 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR6 =
+	    debugfs_create_file("DMA_CR6", 744, dir, &DMA_CR6_val,
+				&DMA_CR6_fops);
+	if (DMA_CR6 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR5 =
+	    debugfs_create_file("DMA_CR5", 744, dir, &DMA_CR5_val,
+				&DMA_CR5_fops);
+	if (DMA_CR5 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR4 =
+	    debugfs_create_file("DMA_CR4", 744, dir, &DMA_CR4_val,
+				&DMA_CR4_fops);
+	if (DMA_CR4 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR3 =
+	    debugfs_create_file("DMA_CR3", 744, dir, &DMA_CR3_val,
+				&DMA_CR3_fops);
+	if (DMA_CR3 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR2 =
+	    debugfs_create_file("DMA_CR2", 744, dir, &DMA_CR2_val,
+				&DMA_CR2_fops);
+	if (DMA_CR2 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR1 =
+	    debugfs_create_file("DMA_CR1", 744, dir, &DMA_CR1_val,
+				&DMA_CR1_fops);
+	if (DMA_CR1 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DMA_CR0 =
+	    debugfs_create_file("DMA_CR0", 744, dir, &DMA_CR0_val,
+				&DMA_CR0_fops);
+	if (DMA_CR0 == NULL) {
+		printk(KERN_INFO "error creating file: DMA_CR0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_WTR =
+	    debugfs_create_file("MAC_WTR", 744, dir, &MAC_WTR_val,
+				&MAC_WTR_fops);
+	if (MAC_WTR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_WTR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MPFR =
+	    debugfs_create_file("MAC_MPFR", 744, dir, &MAC_MPFR_val,
+				&MAC_MPFR_fops);
+	if (MAC_MPFR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MPFR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MECR =
+	    debugfs_create_file("MAC_MECR", 744, dir, &MAC_MECR_val,
+				&MAC_MECR_fops);
+	if (MAC_MECR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MECR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MAC_MCR =
+	    debugfs_create_file("MAC_MCR", 744, dir, &MAC_MCR_val,
+				&MAC_MCR_fops);
+	if (MAC_MCR == NULL) {
+		printk(KERN_INFO "error creating file: MAC_MCR\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+	/* MII/GMII registers */
+	MII_BMCR_REG =
+	    debugfs_create_file("MII_BMCR_REG", 744, dir, &MII_BMCR_REG_val,
+				&MII_BMCR_REG_fops);
+	if (MII_BMCR_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_BMCR_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_BMSR_REG =
+	    debugfs_create_file("MII_BMSR_REG", 744, dir, &MII_BMSR_REG_val,
+				&MII_BMSR_REG_fops);
+	if (MII_BMSR_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_BMSR_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_PHYSID1_REG =
+	    debugfs_create_file("MII_PHYSID1_REG", 744, dir,
+				&MII_PHYSID1_REG_val, &MII_PHYSID1_REG_fops);
+	if (MII_PHYSID1_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_PHYSID1_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_PHYSID2_REG =
+	    debugfs_create_file("MII_PHYSID2_REG", 744, dir,
+				&MII_PHYSID2_REG_val, &MII_PHYSID2_REG_fops);
+	if (MII_PHYSID2_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_PHYSID2_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_ADVERTISE_REG =
+	    debugfs_create_file("MII_ADVERTISE_REG", 744, dir,
+				&MII_ADVERTISE_REG_val,
+				&MII_ADVERTISE_REG_fops);
+	if (MII_ADVERTISE_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_ADVERTISE_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_LPA_REG =
+	    debugfs_create_file("MII_LPA_REG", 744, dir, &MII_LPA_REG_val,
+				&MII_LPA_REG_fops);
+	if (MII_LPA_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_LPA_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_EXPANSION_REG =
+	    debugfs_create_file("MII_EXPANSION_REG", 744, dir,
+				&MII_EXPANSION_REG_val,
+				&MII_EXPANSION_REG_fops);
+	if (MII_EXPANSION_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_EXPANSION_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	AUTO_NEGO_NP_REG =
+	    debugfs_create_file("AUTO_NEGO_NP_REG", 744, dir,
+				&AUTO_NEGO_NP_REG_val, &AUTO_NEGO_NP_REG_fops);
+	if (AUTO_NEGO_NP_REG == NULL) {
+		printk(KERN_INFO "error creating file: AUTO_NEGO_NP_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_ESTATUS_REG =
+	    debugfs_create_file("MII_ESTATUS_REG", 744, dir,
+				&MII_ESTATUS_REG_val, &MII_ESTATUS_REG_fops);
+	if (MII_ESTATUS_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_ESTATUS_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_CTRL1000_REG =
+	    debugfs_create_file("MII_CTRL1000_REG", 744, dir,
+				&MII_CTRL1000_REG_val, &MII_CTRL1000_REG_fops);
+	if (MII_CTRL1000_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_CTRL1000_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	MII_STAT1000_REG =
+	    debugfs_create_file("MII_STAT1000_REG", 744, dir,
+				&MII_STAT1000_REG_val, &MII_STAT1000_REG_fops);
+	if (MII_STAT1000_REG == NULL) {
+		printk(KERN_INFO "error creating file: MII_STAT1000_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	PHY_CTL_REG =
+	    debugfs_create_file("PHY_CTL_REG", 744, dir, &PHY_CTL_REG_val,
+				&PHY_CTL_REG_fops);
+	if (PHY_CTL_REG == NULL) {
+		printk(KERN_INFO "error creating file: PHY_CTL_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	PHY_STS_REG =
+	    debugfs_create_file("PHY_STS_REG", 744, dir, &PHY_STS_REG_val,
+				&PHY_STS_REG_fops);
+	if (PHY_STS_REG == NULL) {
+		printk(KERN_INFO "error creating file: PHY_STS_REG\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	feature_drop_tx_pktburstcnt =
+	    debugfs_create_file("feature_drop_tx_pktburstcnt", 744, dir,
+				&feature_drop_tx_pktburstcnt_val,
+				&feature_drop_tx_pktburstcnt_fops);
+	if (feature_drop_tx_pktburstcnt == NULL) {
+		printk(KERN_INFO
+		       "error creating file: feature_drop_tx_pktburstcnt\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	qInx = debugfs_create_file("qInx", 744, dir, &qInx_val, &qInx_fops);
+	if (qInx == NULL) {
+		printk(KERN_INFO "error creating file: qInx\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc0 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor0", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops0);
+	if (RX_NORMAL_DESC_desc0 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc1 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor1", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops1);
+	if (RX_NORMAL_DESC_desc1 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc2 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor2", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops2);
+	if (RX_NORMAL_DESC_desc2 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc3 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor3", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops3);
+	if (RX_NORMAL_DESC_desc3 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc4 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor4", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops4);
+	if (RX_NORMAL_DESC_desc4 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc5 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor5", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops5);
+	if (RX_NORMAL_DESC_desc5 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc6 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor6", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops6);
+	if (RX_NORMAL_DESC_desc6 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc7 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor7", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops7);
+	if (RX_NORMAL_DESC_desc7 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc8 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor8", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops8);
+	if (RX_NORMAL_DESC_desc8 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor8\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc9 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor9", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops9);
+	if (RX_NORMAL_DESC_desc9 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor9\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc10 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor10", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops10);
+	if (RX_NORMAL_DESC_desc10 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor10\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc11 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor11", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops11);
+	if (RX_NORMAL_DESC_desc11 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor11\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_desc12 =
+	    debugfs_create_file("RX_NORMAL_DESC_descriptor12", 744, dir, NULL,
+				&RX_NORMAL_DESC_desc_fops12);
+	if (RX_NORMAL_DESC_desc12 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_descriptor12\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc0 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor0", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops0);
+	if (TX_NORMAL_DESC_desc0 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor0\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc1 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor1", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops1);
+	if (TX_NORMAL_DESC_desc1 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor1\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc2 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor2", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops2);
+	if (TX_NORMAL_DESC_desc2 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor2\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc3 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor3", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops3);
+	if (TX_NORMAL_DESC_desc3 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor3\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc4 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor4", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops4);
+	if (TX_NORMAL_DESC_desc4 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor4\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc5 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor5", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops5);
+	if (TX_NORMAL_DESC_desc5 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor5\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc6 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor6", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops6);
+	if (TX_NORMAL_DESC_desc6 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor6\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc7 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor7", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops7);
+	if (TX_NORMAL_DESC_desc7 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor7\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc8 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor8", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops8);
+	if (TX_NORMAL_DESC_desc8 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor8\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc9 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor9", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops9);
+	if (TX_NORMAL_DESC_desc9 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor9\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc10 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor10", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops10);
+	if (TX_NORMAL_DESC_desc10 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor10\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc11 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor11", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops11);
+	if (TX_NORMAL_DESC_desc11 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor11\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_desc12 =
+	    debugfs_create_file("TX_NORMAL_DESC_descriptor12", 744, dir, NULL,
+				&TX_NORMAL_DESC_desc_fops12);
+	if (TX_NORMAL_DESC_desc12 == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_descriptor12\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	TX_NORMAL_DESC_STATUS =
+	    debugfs_create_file("TX_NORMAL_DESC_STATUS", 744, dir, NULL,
+				&TX_NORMAL_DESC_STATUS_fops);
+	if (TX_NORMAL_DESC_STATUS == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: TX_NORMAL_DESC_STATUS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	RX_NORMAL_DESC_STATUS =
+	    debugfs_create_file("RX_NORMAL_DESC_STATUS", 744, dir, NULL,
+				&RX_NORMAL_DESC_STATUS_fops);
+	if (RX_NORMAL_DESC_STATUS == NULL) {
+		printk(KERN_INFO
+		       "error while creating file: RX_NORMAL_DESC_STATUS\n");
+		ret = -ENODEV;
+		goto remove_debug_file;
+	}
+
+	DBGPR("<-- create_debug_files\n");
+
+	return ret;
+
+ remove_debug_file:
+	remove_debug_files();
+	DBGPR("<-- create_debug_files\n");
+	return ret;
+}
+
+/*! 
+* \brief  API to remove debugfs files 
+*
+* \details This function will removes all debug files created inside 
+* /sys/kernel/debug/ddgen_DWC_ETH_QOS directory and also the directory 
+* ddgen_DWC_ETH_QOS.
+*
+* \retval  0 on Success. 
+* \retval  error number on Failure.
+*/
+
+void remove_debug_files()
+{
+	DBGPR("--> remove_debug_files\n");
+	debugfs_remove_recursive(dir);
+	DBGPR("<-- remove_debug_files\n");
+	return;
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
new file mode 100755
index 0000000..529819a
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -0,0 +1,1351 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_desc.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+#include "DWC_ETH_QOS_desc.h"
+#include "DWC_ETH_QOS_yregacc.h"
+
+/*!
+* \brief API to free the transmit descriptor memory.
+*
+* \details This function is used to free the transmit descriptor memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_tx_desc_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					 UINT tx_qCnt)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data = NULL;
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_tx_desc_free_mem: tx_qCnt = %d\n", tx_qCnt);
+
+	for (qInx = 0; qInx < tx_qCnt; qInx++) {
+		desc_data = GET_TX_WRAPPER_DESC(qInx);
+
+		if (GET_TX_DESC_PTR(qInx, 0)) {
+			dma_free_coherent(&pdata->pdev->dev,
+					  (sizeof(struct s_TX_NORMAL_DESC) * TX_DESC_CNT),
+					  GET_TX_DESC_PTR(qInx, 0),
+					  GET_TX_DESC_DMA_ADDR(qInx, 0));
+			GET_TX_DESC_PTR(qInx, 0) = NULL;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_tx_desc_free_mem\n");
+}
+
+/*!
+* \brief API to free the receive descriptor memory.
+*
+* \details This function is used to free the receive descriptor memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_rx_desc_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					 UINT rx_qCnt)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data = NULL;
+	UINT qInx = 0;
+
+	DBGPR("-->DWC_ETH_QOS_rx_desc_free_mem: rx_qCnt = %d\n", rx_qCnt);
+
+	for (qInx = 0; qInx < rx_qCnt; qInx++) {
+		desc_data = GET_RX_WRAPPER_DESC(qInx);
+
+		if (GET_RX_DESC_PTR(qInx, 0)) {
+			dma_free_coherent(&pdata->pdev->dev,
+					  (sizeof(struct s_RX_NORMAL_DESC) * RX_DESC_CNT),
+					  GET_RX_DESC_PTR(qInx, 0),
+					  GET_RX_DESC_DMA_ADDR(qInx, 0));
+			GET_RX_DESC_PTR(qInx, 0) = NULL;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_rx_desc_free_mem\n");
+}
+
+/*!
+* \brief API to alloc the queue memory.
+*
+* \details This function allocates the queue structure memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return integer
+*
+* \retval 0 on success & -ve number on failure.
+*/
+
+static int DWC_ETH_QOS_alloc_queue_struct(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_alloc_queue_struct: tx_queue_cnt = %d,"\
+		"rx_queue_cnt = %d\n", pdata->tx_queue_cnt, pdata->rx_queue_cnt);
+
+	pdata->tx_queue =
+		kzalloc(sizeof(struct DWC_ETH_QOS_tx_queue) * pdata->tx_queue_cnt,
+		GFP_KERNEL);
+	if (pdata->tx_queue == NULL) {
+		printk(KERN_ALERT "ERROR: Unable to allocate Tx queue structure\n");
+		ret = -ENOMEM;
+		goto err_out_tx_q_alloc_failed;
+	}
+
+	pdata->rx_queue =
+		kzalloc(sizeof(struct DWC_ETH_QOS_rx_queue) * pdata->rx_queue_cnt,
+		GFP_KERNEL);
+	if (pdata->rx_queue == NULL) {
+		printk(KERN_ALERT "ERROR: Unable to allocate Rx queue structure\n");
+		ret = -ENOMEM;
+		goto err_out_rx_q_alloc_failed;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_alloc_queue_struct\n");
+
+	return ret;
+
+err_out_rx_q_alloc_failed:
+	kfree(pdata->tx_queue);
+
+err_out_tx_q_alloc_failed:
+	return ret;
+}
+
+
+/*!
+* \brief API to free the queue memory.
+*
+* \details This function free the queue structure memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_free_queue_struct(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_free_queue_struct\n");
+
+	if (pdata->tx_queue != NULL) {
+		kfree(pdata->tx_queue);
+		pdata->tx_queue = NULL;
+	}
+
+	if (pdata->rx_queue != NULL) {
+		kfree(pdata->rx_queue);
+		pdata->rx_queue = NULL;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_free_queue_struct\n");
+}
+
+
+/*!
+* \brief API to allocate the memory for descriptor & buffers.
+*
+* \details This function is used to allocate the memory for device
+* descriptors & buffers
+* which are used by device for data transmission & reception.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return integer
+*
+* \retval 0 on success & -ENOMEM number on failure.
+*/
+
+static INT allocate_buffer_and_desc(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	INT ret = 0;
+	UINT qInx;
+
+	DBGPR("-->allocate_buffer_and_desc: TX_QUEUE_CNT = %d, "\
+		"RX_QUEUE_CNT = %d\n", DWC_ETH_QOS_TX_QUEUE_CNT,
+		DWC_ETH_QOS_RX_QUEUE_CNT);
+
+	/* Allocate descriptors and buffers memory for all TX queues */
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		/* TX descriptors */
+		GET_TX_DESC_PTR(qInx, 0) = dma_alloc_coherent(&pdata->pdev->dev,
+						(sizeof(struct s_TX_NORMAL_DESC) * TX_DESC_CNT),
+						&(GET_TX_DESC_DMA_ADDR(qInx, 0)),
+						GFP_KERNEL);
+		if (GET_TX_DESC_PTR(qInx, 0) == NULL) {
+			ret = -ENOMEM;
+			goto err_out_tx_desc;
+		}
+	}
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		/* TX wrapper buffer */
+		GET_TX_BUF_PTR(qInx, 0) =
+			kzalloc((sizeof(struct DWC_ETH_QOS_tx_buffer) * TX_DESC_CNT),
+			GFP_KERNEL);
+		if (GET_TX_BUF_PTR(qInx, 0) == NULL) {
+			ret = -ENOMEM;
+			goto err_out_tx_buf;
+		}
+	}
+
+	/* Allocate descriptors and buffers memory for all RX queues */
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		/* RX descriptors */
+		GET_RX_DESC_PTR(qInx, 0) = dma_alloc_coherent(&pdata->pdev->dev,
+						(sizeof(struct s_RX_NORMAL_DESC) * RX_DESC_CNT),
+						&(GET_RX_DESC_DMA_ADDR(qInx, 0)),
+						GFP_KERNEL);
+		if (GET_RX_DESC_PTR(qInx, 0) == NULL) {
+			ret = -ENOMEM;
+			goto rx_alloc_failure;
+		}
+	}
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		/* RX wrapper buffer */
+		GET_RX_BUF_PTR(qInx, 0) =
+			kzalloc((sizeof(struct DWC_ETH_QOS_rx_buffer) * RX_DESC_CNT),
+			GFP_KERNEL);
+		if (GET_RX_BUF_PTR(qInx, 0) == NULL) {
+			ret = -ENOMEM;
+			goto err_out_rx_buf;
+		}
+	}
+
+	DBGPR("<--allocate_buffer_and_desc\n");
+
+	return ret;
+
+ err_out_rx_buf:
+	DWC_ETH_QOS_rx_buf_free_mem(pdata, qInx);
+	qInx = DWC_ETH_QOS_RX_QUEUE_CNT;
+
+ rx_alloc_failure:
+	DWC_ETH_QOS_rx_desc_free_mem(pdata, qInx);
+	qInx = DWC_ETH_QOS_TX_QUEUE_CNT;
+
+ err_out_tx_buf:
+	DWC_ETH_QOS_tx_buf_free_mem(pdata, qInx);
+	qInx = DWC_ETH_QOS_TX_QUEUE_CNT;
+
+ err_out_tx_desc:
+	DWC_ETH_QOS_tx_desc_free_mem(pdata, qInx);
+
+	return ret;
+}
+
+/*!
+* \brief API to initialize the transmit descriptors.
+*
+* \details This function is used to initialize transmit descriptors.
+* Each descriptors are assigned a buffer. The base/starting address
+* of the descriptors is updated in device register if required & all
+* the private data structure variables related to transmit
+* descriptor handling are updated in this function.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void.
+*/
+
+static void DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q(
+			struct DWC_ETH_QOS_prv_data *pdata,
+			UINT qInx)
+{
+	int i;
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_tx_buffer *buffer = GET_TX_BUF_PTR(qInx, 0);
+	struct s_TX_NORMAL_DESC *desc = GET_TX_DESC_PTR(qInx, 0);
+	dma_addr_t desc_dma = GET_TX_DESC_DMA_ADDR(qInx, 0);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+
+	DBGPR("-->DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q: "\
+		"qInx = %u\n", qInx);
+
+	for (i = 0; i < TX_DESC_CNT; i++) {
+		GET_TX_DESC_PTR(qInx, i) = &desc[i];
+		GET_TX_DESC_DMA_ADDR(qInx, i) =
+		    (desc_dma + sizeof(struct s_TX_NORMAL_DESC) * i);
+		GET_TX_BUF_PTR(qInx, i) = &buffer[i];
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+		if (DWC_ETH_QOS_alloc_tx_buf_pg(pdata, GET_TX_BUF_PTR(qInx, i),
+			GFP_KERNEL))
+			break;
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+	}
+
+	desc_data->cur_tx = 0;
+	desc_data->dirty_tx = 0;
+	desc_data->queue_stopped = 0;
+	desc_data->tx_pkt_queued = 0;
+	desc_data->packet_count = 0;
+	desc_data->free_desc_cnt = TX_DESC_CNT;
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	hw_if->tx_desc_init_pg(pdata, qInx);
+#else
+	hw_if->tx_desc_init(pdata, qInx);
+#endif
+	desc_data->cur_tx = 0;
+
+	DBGPR("<--DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q\n");
+}
+
+/*!
+* \brief API to initialize the receive descriptors.
+*
+* \details This function is used to initialize receive descriptors.
+* skb buffer is allocated & assigned for each descriptors. The base/starting
+* address of the descriptors is updated in device register if required and
+* all the private data structure variables related to receive descriptor
+* handling are updated in this function.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void.
+*/
+
+static void DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q(
+			struct DWC_ETH_QOS_prv_data *pdata,
+			UINT qInx)
+{
+	int i;
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_rx_buffer *buffer = GET_RX_BUF_PTR(qInx, 0);
+	struct s_RX_NORMAL_DESC *desc = GET_RX_DESC_PTR(qInx, 0);
+	dma_addr_t desc_dma = GET_RX_DESC_DMA_ADDR(qInx, 0);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+
+	DBGPR("-->DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q: "\
+		"qInx = %u\n", qInx);
+
+	memset(buffer, 0, (sizeof(struct DWC_ETH_QOS_rx_buffer) * RX_DESC_CNT));
+
+	for (i = 0; i < RX_DESC_CNT; i++) {
+		GET_RX_DESC_PTR(qInx, i) = &desc[i];
+		GET_RX_DESC_DMA_ADDR(qInx, i) =
+		    (desc_dma + sizeof(struct s_RX_NORMAL_DESC) * i);
+		GET_RX_BUF_PTR(qInx, i) = &buffer[i];
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+		if (DWC_ETH_QOS_alloc_rx_buf_pg(pdata, GET_RX_BUF_PTR(qInx, i), GFP_KERNEL))
+			break;
+#else
+		/* allocate skb & assign to each desc */
+		if (pdata->alloc_rx_buf(pdata, GET_RX_BUF_PTR(qInx, i), GFP_KERNEL))
+			break;
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+		wmb();
+	}
+
+	desc_data->cur_rx = 0;
+	desc_data->dirty_rx = 0;
+	desc_data->skb_realloc_idx = 0;
+	desc_data->skb_realloc_threshold = MIN_RX_DESC_CNT;
+	desc_data->pkt_received = 0;
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	hw_if->rx_desc_init_pg(pdata, qInx);
+#else
+	hw_if->rx_desc_init(pdata, qInx);
+#endif
+	desc_data->cur_rx = 0;
+
+	DBGPR("<--DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q\n");
+}
+
+static void DWC_ETH_QOS_wrapper_tx_descriptor_init(struct DWC_ETH_QOS_prv_data
+						   *pdata)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_wrapper_tx_descriptor_init\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q(pdata, qInx);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_wrapper_tx_descriptor_init\n");
+}
+
+static void DWC_ETH_QOS_wrapper_rx_descriptor_init(struct DWC_ETH_QOS_prv_data
+						   *pdata)
+{
+	struct DWC_ETH_QOS_rx_queue * rx_queue = NULL;
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_wrapper_rx_descriptor_init\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_queue = GET_RX_QUEUE_PTR(qInx);
+		rx_queue->pdata = pdata;
+
+		/* LRO configuration */
+		rx_queue->lro_mgr.dev = pdata->dev;
+		memset(&rx_queue->lro_mgr.stats, 0,
+			sizeof(rx_queue->lro_mgr.stats));
+		rx_queue->lro_mgr.features =
+			LRO_F_NAPI | LRO_F_EXTRACT_VLAN_ID;
+		rx_queue->lro_mgr.ip_summed = CHECKSUM_UNNECESSARY;
+		rx_queue->lro_mgr.ip_summed_aggr = CHECKSUM_UNNECESSARY;
+		rx_queue->lro_mgr.max_desc = DWC_ETH_QOS_MAX_LRO_DESC;
+		rx_queue->lro_mgr.max_aggr = (0xffff/pdata->dev->mtu);
+		rx_queue->lro_mgr.lro_arr = rx_queue->lro_arr;
+		rx_queue->lro_mgr.get_skb_header = DWC_ETH_QOS_get_skb_hdr;
+		memset(&rx_queue->lro_arr, 0, sizeof(rx_queue->lro_arr));
+		rx_queue->lro_flush_needed = 0;
+
+		DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q(pdata, qInx);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_wrapper_rx_descriptor_init\n");
+}
+
+/*!
+* \brief API to free the receive descriptor & buffer memory.
+*
+* \details This function is used to free the receive descriptor & buffer memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_rx_free_mem(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_rx_free_mem\n");
+
+	/* free RX descriptor */
+	DWC_ETH_QOS_rx_desc_free_mem(pdata, DWC_ETH_QOS_RX_QUEUE_CNT);
+
+	/* free RX skb's */
+	DWC_ETH_QOS_rx_skb_free_mem(pdata, DWC_ETH_QOS_RX_QUEUE_CNT);
+
+	/* free RX wrapper buffer */
+	DWC_ETH_QOS_rx_buf_free_mem(pdata, DWC_ETH_QOS_RX_QUEUE_CNT);
+
+	DBGPR("<--DWC_ETH_QOS_rx_free_mem\n");
+}
+
+/*!
+* \brief API to free the transmit descriptor & buffer memory.
+*
+* \details This function is used to free the transmit descriptor
+* & buffer memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_tx_free_mem(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_tx_free_mem\n");
+
+	/* free TX descriptor */
+	DWC_ETH_QOS_tx_desc_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	/* free TX skb's */
+	DWC_ETH_QOS_tx_skb_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	/* free TX buffer */
+	DWC_ETH_QOS_tx_buf_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
+
+	DBGPR("<--DWC_ETH_QOS_tx_free_mem\n");
+}
+
+/*!
+ * \details This function is invoked by other function to free
+ * the tx socket buffers.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_tx_skb_free_mem_single_q(struct DWC_ETH_QOS_prv_data *pdata,
+							UINT qInx)
+{
+	UINT i;
+
+	DBGPR("-->DWC_ETH_QOS_tx_skb_free_mem_single_q: qInx = %u\n", qInx);
+
+	for (i = 0; i < TX_DESC_CNT; i++)
+		DWC_ETH_QOS_unmap_tx_skb(pdata, GET_TX_BUF_PTR(qInx, i));
+
+	DBGPR("<--DWC_ETH_QOS_tx_skb_free_mem_single_q\n");
+}
+
+/*!
+* \brief API to free the transmit descriptor skb memory.
+*
+* \details This function is used to free the transmit descriptor skb memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_tx_skb_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT tx_qCnt)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_tx_skb_free_mem: tx_qCnt = %d\n", tx_qCnt);
+
+	for (qInx = 0; qInx < tx_qCnt; qInx++)
+		DWC_ETH_QOS_tx_skb_free_mem_single_q(pdata, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_tx_skb_free_mem\n");
+}
+
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+/*!
+ * \details This function is used to release Rx socket buffer.
+ *
+ * \param[in] pdata – pointer to private device structure.
+ * \param[in] buffer – pointer to rx wrapper buffer structure.
+ *
+ * \return void
+ */
+static void DWC_ETH_QOS_unmap_rx_skb_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				     struct DWC_ETH_QOS_rx_buffer *buffer)
+{
+	//DBGPR("-->DWC_ETH_QOS_unmap_rx_skb_pg\n");
+
+	/* unmap the first buffer */
+	if (buffer->dma) {
+		dma_unmap_single(&pdata->pdev->dev, buffer->dma,
+				 DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
+		buffer->dma = 0;
+	}
+
+	if (buffer->skb) {
+		dev_kfree_skb_any(buffer->skb);
+		buffer->skb = NULL;
+	}
+
+	//DBGPR("<--DWC_ETH_QOS_unmap_rx_skb_pg\n");
+}
+#endif
+
+/*!
+ * \details This function is invoked by other function to free
+ * the rx socket buffers.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_rx_skb_free_mem_single_q(struct DWC_ETH_QOS_prv_data *pdata,
+							UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	UINT i;
+
+	DBGPR("-->DWC_ETH_QOS_rx_skb_free_mem_single_q: qInx = %u\n", qInx);
+
+	for (i = 0; i < RX_DESC_CNT; i++) {
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+		DWC_ETH_QOS_unmap_rx_skb_pg(pdata, GET_RX_BUF_PTR(qInx, i));
+#else
+		DWC_ETH_QOS_unmap_rx_skb(pdata, GET_RX_BUF_PTR(qInx, i));
+#endif
+	}
+
+	/* there are also some cached data from a chained rx */
+	if (desc_data->skb_top)
+		dev_kfree_skb_any(desc_data->skb_top);
+
+	desc_data->skb_top = NULL;
+
+	DBGPR("<--DWC_ETH_QOS_rx_skb_free_mem_single_q\n");
+}
+
+/*!
+* \brief API to free the receive descriptor skb memory.
+*
+* \details This function is used to free the receive descriptor skb memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_rx_skb_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT rx_qCnt)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_rx_skb_free_mem: rx_qCnt = %d\n", rx_qCnt);
+
+	for (qInx = 0; qInx < rx_qCnt; qInx++)
+		DWC_ETH_QOS_rx_skb_free_mem_single_q(pdata, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_rx_skb_free_mem\n");
+}
+
+/*!
+* \brief API to free the transmit descriptor wrapper buffer memory.
+*
+* \details This function is used to free the transmit descriptor wrapper buffer memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_tx_buf_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT tx_qCnt)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_tx_buf_free_mem: tx_qCnt = %d\n", tx_qCnt);
+
+	for (qInx = 0; qInx < tx_qCnt; qInx++) {
+		/* free TX buffer */
+		if (GET_TX_BUF_PTR(qInx, 0)) {
+			kfree(GET_TX_BUF_PTR(qInx, 0));
+			GET_TX_BUF_PTR(qInx, 0) = NULL;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_tx_buf_free_mem\n");
+}
+
+/*!
+* \brief API to free the receive descriptor wrapper buffer memory.
+*
+* \details This function is used to free the receive descriptor wrapper buffer memory.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \retval void.
+*/
+
+static void DWC_ETH_QOS_rx_buf_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT rx_qCnt)
+{
+	UINT qInx = 0;
+
+	DBGPR("-->DWC_ETH_QOS_rx_buf_free_mem: rx_qCnt = %d\n", rx_qCnt);
+
+	for (qInx = 0; qInx < rx_qCnt; qInx++) {
+		if (GET_RX_BUF_PTR(qInx, 0)) {
+			kfree(GET_RX_BUF_PTR(qInx, 0));
+			GET_RX_BUF_PTR(qInx, 0) = NULL;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_rx_buf_free_mem\n");
+}
+
+/*!
+* \brief Assigns the network and tcp header pointers
+*
+* \details This function gets the ip and tcp header pointers of the packet
+* in the skb and assigns them to the corresponding arguments passed to the
+* function. It also sets some flags indicating that the packet to be receieved
+* is an ipv4 packet and that the protocol is tcp.
+*
+* \param[in] *skb - pointer to the sk buffer,
+* \param[in] **iph - pointer to be pointed to the ip header,
+* \param[in] **tcph - pointer to be pointed to the tcp header,
+* \param[in] *hdr_flags - flags to be set
+* \param[in] *pdata - private data structure
+*
+* \return integer
+*
+* \retval -1 if the packet does not conform to ip protocol = TCP, else 0
+*/
+
+static int DWC_ETH_QOS_get_skb_hdr(struct sk_buff *skb, void **iph,
+				   void **tcph, u64 *flags, void *ptr)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = ptr;
+
+	DBGPR("-->DWC_ETH_QOS_get_skb_hdr\n");
+
+	if (!pdata->tcp_pkt)
+		return -1;
+
+	skb_reset_network_header(skb);
+	skb_set_transport_header(skb, ip_hdrlen(skb));
+	*iph = ip_hdr(skb);
+	*tcph = tcp_hdr(skb);
+	*flags = LRO_IPV4 | LRO_TCP;
+
+	DBGPR("<--DWC_ETH_QOS_get_skb_hdr\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief api to handle tso
+ *
+ * \details This function is invoked by start_xmit functions. This function
+ * will get all the tso details like MSS(Maximum Segment Size), packet header length,
+ * packet pay load length and tcp header length etc if the given skb has tso
+ * packet and store it in other wrapper tx structure for later usage.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] skb – pointer to socket buffer structure.
+ *
+ * \return integer
+ *
+ * \retval 1 on success, -ve no failure and 0 if not tso pkt
+ * */
+
+static int DWC_ETH_QOS_handle_tso(struct net_device *dev,
+	struct sk_buff *skb)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct s_tx_pkt_features *tx_pkt_features = GET_TX_PKT_FEATURES_PTR;
+	int ret = 1;
+
+	DBGPR("-->DWC_ETH_QOS_handle_tso\n");
+
+	if (skb_is_gso(skb) == 0) {
+		DBGPR("This is not a TSO/LSO/GSO packet\n");
+		return 0;
+	}
+
+	DBGPR("Got TSO packet\n");
+
+	if (skb_header_cloned(skb)) {
+		ret = pskb_expand_head(skb, 0, 0, GFP_ATOMIC);
+		if (ret)
+			return ret;
+	}
+
+	/* get TSO details */
+	tx_pkt_features->mss = skb_shinfo(skb)->gso_size;
+	tx_pkt_features->hdr_len = skb_transport_offset(skb) + tcp_hdrlen(skb);
+	tx_pkt_features->pay_len = (skb->len - tx_pkt_features->hdr_len);
+	tx_pkt_features->tcp_hdr_len = tcp_hdrlen(skb);
+
+	DBGPR("mss         = %lu\n", tx_pkt_features->mss);
+	DBGPR("hdr_len     = %lu\n", tx_pkt_features->hdr_len);
+	DBGPR("pay_len     = %lu\n", tx_pkt_features->pay_len);
+	DBGPR("tcp_hdr_len = %lu\n", tx_pkt_features->tcp_hdr_len);
+
+	DBGPR("<--DWC_ETH_QOS_handle_tso\n");
+
+	return ret;
+}
+
+/* returns 0 on success and -ve on failure */
+static int DWC_ETH_QOS_map_non_page_buffs(struct DWC_ETH_QOS_prv_data *pdata,
+				struct DWC_ETH_QOS_tx_buffer *buffer,
+				struct DWC_ETH_QOS_tx_buffer *prev_buffer,
+				struct sk_buff *skb,
+				unsigned int offset,
+				unsigned int size)
+{
+	DBGPR("-->DWC_ETH_QOS_map_non_page_buffs\n");
+
+	if (size > DWC_ETH_QOS_MAX_DATA_PER_TX_BUF) {
+		if (prev_buffer && !prev_buffer->dma2) {
+			/* fill the first buffer pointer in prev_buffer->dma2 */
+			prev_buffer->dma2 = dma_map_single((&pdata->pdev->dev),
+							(skb->data + offset),
+							DWC_ETH_QOS_MAX_DATA_PER_TX_BUF,
+							DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), prev_buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			prev_buffer->len2 = DWC_ETH_QOS_MAX_DATA_PER_TX_BUF;
+			prev_buffer->buf2_mapped_as_page = Y_FALSE;
+
+			/* fill the second buffer pointer in buffer->dma */
+			buffer->dma = dma_map_single((&pdata->pdev->dev),
+						(skb->data + offset + DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						(size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			buffer->len = (size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF);
+			buffer->buf1_mapped_as_page = Y_FALSE;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		} else {
+			/* fill the first buffer pointer in buffer->dma */
+			buffer->dma = dma_map_single((&pdata->pdev->dev),
+					(skb->data + offset),
+					DWC_ETH_QOS_MAX_DATA_PER_TX_BUF,
+					DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			buffer->len = DWC_ETH_QOS_MAX_DATA_PER_TX_BUF;
+			buffer->buf1_mapped_as_page = Y_FALSE;
+
+			/* fill the second buffer pointer in buffer->dma2 */
+			buffer->dma2 = dma_map_single((&pdata->pdev->dev),
+					(skb->data + offset + DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+					(size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+					DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			buffer->len2 = (size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF);
+			buffer->buf2_mapped_as_page = Y_FALSE;
+		}
+	} else {
+		if (prev_buffer && !prev_buffer->dma2) {
+			/* fill the first buffer pointer in prev_buffer->dma2 */
+			prev_buffer->dma2 = dma_map_single((&pdata->pdev->dev),
+						(skb->data + offset),
+						size, DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), prev_buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			prev_buffer->len2 = size;
+			prev_buffer->buf2_mapped_as_page = Y_FALSE;
+
+			/* indicate current buffer struct is not used */
+			buffer->dma = 0;
+			buffer->len = 0;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		} else {
+			/* fill the first buffer pointer in buffer->dma */
+			buffer->dma = dma_map_single((&pdata->pdev->dev),
+						(skb->data + offset),
+						size, DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev), buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return - ENOMEM;
+			}
+			buffer->len = size;
+			buffer->buf1_mapped_as_page = Y_FALSE;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_map_non_page_buffs\n");
+
+	return 0;
+}
+
+/* returns 0 on success and -ve on failure */
+static int DWC_ETH_QOS_map_page_buffs(struct DWC_ETH_QOS_prv_data *pdata,
+			struct DWC_ETH_QOS_tx_buffer *buffer,
+			struct DWC_ETH_QOS_tx_buffer *prev_buffer,
+			struct skb_frag_struct *frag,
+			unsigned int offset,
+			unsigned int size)
+{
+	DBGPR("-->DWC_ETH_QOS_map_page_buffs\n");
+
+	if (size > DWC_ETH_QOS_MAX_DATA_PER_TX_BUF) {
+		if (!prev_buffer->dma2) {
+			DBGPR("prev_buffer->dma2 is empty\n");
+			/* fill the first buffer pointer in pre_buffer->dma2 */
+			prev_buffer->dma2 =
+				dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						(frag->page_offset + offset),
+						DWC_ETH_QOS_MAX_DATA_PER_TX_BUF,
+						DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						prev_buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			prev_buffer->len2 = DWC_ETH_QOS_MAX_DATA_PER_TX_BUF;
+			prev_buffer->buf2_mapped_as_page = Y_TRUE;
+
+			/* fill the second buffer pointer in buffer->dma */
+			buffer->dma = dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						(frag->page_offset + offset + DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						(size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			buffer->len = (size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF);
+			buffer->buf1_mapped_as_page = Y_TRUE;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		} else {
+			/* fill the first buffer pointer in buffer->dma */
+			buffer->dma = dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						(frag->page_offset + offset),
+						DWC_ETH_QOS_MAX_DATA_PER_TX_BUF,
+						DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			buffer->len = DWC_ETH_QOS_MAX_DATA_PER_TX_BUF;
+			buffer->buf1_mapped_as_page = Y_TRUE;
+
+			/* fill the second buffer pointer in buffer->dma2 */
+			buffer->dma2 = dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						(frag->page_offset + offset + DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						(size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF),
+						DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			buffer->len2 = (size - DWC_ETH_QOS_MAX_DATA_PER_TX_BUF);
+			buffer->buf2_mapped_as_page = Y_TRUE;
+		}
+	} else {
+		if (!prev_buffer->dma2) {
+			DBGPR("prev_buffer->dma2 is empty\n");
+			/* fill the first buffer pointer in pre_buffer->dma2 */
+			prev_buffer->dma2 = dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						frag->page_offset,
+						size, DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						prev_buffer->dma2)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			prev_buffer->len2 = size;
+			prev_buffer->buf2_mapped_as_page = Y_TRUE;
+
+			/* indicate current buffer struct is not used */
+			buffer->dma = 0;
+			buffer->len = 0;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		} else {
+			/* fill the first buffer pointer in buffer->dma */
+			buffer->dma = dma_map_page((&pdata->pdev->dev),
+						frag->page.p,
+						frag->page_offset,
+						size, DMA_TO_DEVICE);
+			if (dma_mapping_error((&pdata->pdev->dev),
+						buffer->dma)) {
+				printk(KERN_ALERT "failed to do the dma map\n");
+				return -ENOMEM;
+			}
+			buffer->len = size;
+			buffer->buf1_mapped_as_page = Y_TRUE;
+			buffer->dma2 = 0;
+			buffer->len2 = 0;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_map_page_buffs\n");
+
+	return 0;
+}
+
+
+/*!
+ * \details This function is invoked by start_xmit functions. This function
+ * will get the dma/physical address of the packet to be transmitted and
+ * its length. All this information about the packet to be transmitted is
+ * stored in private data structure and same is used later in the driver to
+ * setup the descriptor for transmission.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] skb – pointer to socket buffer structure.
+ *
+ * \return unsigned int
+ *
+ * \retval count – number of packet to be programmed in the descriptor or
+ * zero on failure.
+ */
+
+static unsigned int DWC_ETH_QOS_map_skb(struct net_device *dev,
+					struct sk_buff *skb)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	UINT qInx = skb_get_queue_mapping(skb);
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_tx_buffer *buffer =
+	    GET_TX_BUF_PTR(qInx, desc_data->cur_tx);
+	struct DWC_ETH_QOS_tx_buffer *prev_buffer = NULL;
+	struct s_tx_pkt_features *tx_pkt_features = GET_TX_PKT_FEATURES_PTR;
+	UINT varvlan_pkt;
+	int index = (int)desc_data->cur_tx;
+	unsigned int frag_cnt = skb_shinfo(skb)->nr_frags;
+	unsigned int hdr_len = 0;
+	unsigned int i;
+	unsigned int count = 0, offset = 0, size;
+	int len;
+	int vartso_enable = 0;
+	int ret;
+
+	DBGPR("-->DWC_ETH_QOS_map_skb: cur_tx = %d, qInx = %u\n",
+		desc_data->cur_tx, qInx);
+
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_Mlf_Rd(
+		tx_pkt_features->pkt_attributes, vartso_enable);
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Rd(
+			tx_pkt_features->pkt_attributes, varvlan_pkt);
+	if (varvlan_pkt == 0x1) {
+		DBGPR("Skipped preparing index %d "\
+			"(VLAN Context descriptor)\n\n", index);
+		INCR_TX_DESC_INDEX(index, 1);
+		buffer = GET_TX_BUF_PTR(qInx, index);
+	} else if ((vartso_enable == 0x1) && (desc_data->default_mss != tx_pkt_features->mss)) {
+		/* keep space for CONTEXT descriptor in the RING */
+		INCR_TX_DESC_INDEX(index, 1);
+		buffer = GET_TX_BUF_PTR(qInx, index);
+	}
+
+	if (vartso_enable) {
+		hdr_len = skb_transport_offset(skb) + tcp_hdrlen(skb);
+		len = hdr_len;
+	} else {
+		len = (skb->len - skb->data_len);
+	}
+
+	DBGPR("skb->len - skb->data_len = %d, hdr_len = %d\n",
+				len, hdr_len);
+	while (len) {
+		size = min(len, DWC_ETH_QOS_MAX_DATA_PER_TXD);
+
+		buffer = GET_TX_BUF_PTR(qInx, index);
+		ret = DWC_ETH_QOS_map_non_page_buffs(pdata, buffer,
+						prev_buffer,
+						skb, offset, size);
+		if (ret < 0)
+			goto err_out_dma_map_fail;
+
+		len -= size;
+		offset += size;
+		prev_buffer = buffer;
+		INCR_TX_DESC_INDEX(index, 1);
+		count++;
+	}
+
+	/* Process remaining pay load in skb->data in case of TSO packet */
+	if (vartso_enable) {
+		len = ((skb->len - skb->data_len) - hdr_len);
+		while (len > 0) {
+			size = min(len, DWC_ETH_QOS_MAX_DATA_PER_TXD);
+
+			buffer = GET_TX_BUF_PTR(qInx, index);
+			ret = DWC_ETH_QOS_map_non_page_buffs(pdata, buffer,
+							prev_buffer,
+							skb, offset, size);
+			if (ret < 0)
+				goto err_out_dma_map_fail;
+
+			len -= size;
+			offset += size;
+			if (buffer->dma != 0) {
+				prev_buffer = buffer;
+				INCR_TX_DESC_INDEX(index, 1);
+				count++;
+			}
+		}
+	}
+
+	/* Process fragmented skb's */
+	for (i = 0; i < frag_cnt; i++) {
+		struct skb_frag_struct *frag = &skb_shinfo(skb)->frags[i];
+
+		len = frag->size;
+		offset = 0;
+		while (len) {
+			size = min(len, DWC_ETH_QOS_MAX_DATA_PER_TXD);
+
+			buffer = GET_TX_BUF_PTR(qInx, index);
+			ret = DWC_ETH_QOS_map_page_buffs(pdata, buffer,
+							prev_buffer, frag,
+							offset, size);
+			if (ret < 0)
+				goto err_out_dma_map_fail;
+
+			len -= size;
+			offset += size;
+			if (buffer->dma != 0) {
+				prev_buffer = buffer;
+				INCR_TX_DESC_INDEX(index, 1);
+				count++;
+			}
+		}
+	}
+	buffer->skb = skb;
+
+	DBGPR("<--DWC_ETH_QOS_map_skb: buffer->dma = %#x\n",
+	      (UINT) buffer->dma);
+
+	return count;
+
+ err_out_dma_map_fail:
+	printk(KERN_ALERT "Tx DMA map failed\n");
+
+	for (; count > 0; count--) {
+		DECR_TX_DESC_INDEX(index);
+		buffer = GET_TX_BUF_PTR(qInx, index);
+		DWC_ETH_QOS_unmap_tx_skb(pdata, buffer);
+	}
+
+	return 0;
+}
+
+/*!
+* \brief API to release the skb.
+*
+* \details This function is called in *_tx_interrupt function to release
+* the skb for the successfully transmited packets.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] buffer - pointer to *_tx_buffer structure
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_unmap_tx_skb(struct DWC_ETH_QOS_prv_data *pdata,
+				     struct DWC_ETH_QOS_tx_buffer *buffer)
+{
+	DBGPR("-->DWC_ETH_QOS_unmap_tx_skb\n");
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
+#endif
+
+	if (buffer->dma) {
+		if (buffer->buf1_mapped_as_page == Y_TRUE)
+			dma_unmap_page((&pdata->pdev->dev), buffer->dma,
+				       buffer->len, DMA_TO_DEVICE);
+		else
+			dma_unmap_single((&pdata->pdev->dev), buffer->dma,
+					 buffer->len, DMA_TO_DEVICE);
+
+		buffer->dma = 0;
+		buffer->len = 0;
+	}
+
+	if (buffer->dma2) {
+		if (buffer->buf2_mapped_as_page == Y_TRUE)
+			dma_unmap_page((&pdata->pdev->dev), buffer->dma2,
+					buffer->len2, DMA_TO_DEVICE);
+		else
+			dma_unmap_single((&pdata->pdev->dev), buffer->dma2,
+					buffer->len2, DMA_TO_DEVICE);
+
+		buffer->dma2 = 0;
+		buffer->len2 = 0;
+	}
+
+
+	if (buffer->skb != NULL) {
+		dev_kfree_skb_any(buffer->skb);
+		buffer->skb = NULL;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_unmap_tx_skb\n");
+}
+
+/*!
+ * \details This function is invoked by other function for releasing the socket
+ * buffer which are received by device and passed to upper layer.
+ *
+ * \param[in] pdata – pointer to private device structure.
+ * \param[in] buffer – pointer to rx wrapper buffer structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_unmap_rx_skb(struct DWC_ETH_QOS_prv_data *pdata,
+				     struct DWC_ETH_QOS_rx_buffer *buffer)
+{
+	DBGPR("-->DWC_ETH_QOS_unmap_rx_skb\n");
+
+	/* unmap the first buffer */
+	if (buffer->dma) {
+		if (pdata->rx_split_hdr) {
+			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
+					 (2*buffer->rx_hdr_size),
+					 DMA_FROM_DEVICE);
+		}
+		else if (pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) {
+			dma_unmap_page(&pdata->pdev->dev, buffer->dma,
+				       PAGE_SIZE, DMA_FROM_DEVICE);
+		} else {
+			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
+					 pdata->rx_buffer_len, DMA_FROM_DEVICE);
+		}
+		buffer->dma = 0;
+	}
+
+	/* unmap the second buffer */
+	if (buffer->dma2) {
+		dma_unmap_page(&pdata->pdev->dev, buffer->dma2,
+				PAGE_SIZE, DMA_FROM_DEVICE);
+		buffer->dma2 = 0;
+	}
+
+	/* page1 will be present only if JUMBO is enabled */
+	if (buffer->page) {
+		put_page(buffer->page);
+		buffer->page = NULL;
+	}
+	/* page2 will be present if JUMBO/SPLIT HDR is enabled */
+	if (buffer->page2) {
+		put_page(buffer->page2);
+		buffer->page2 = NULL;
+	}
+
+	if (buffer->skb) {
+		dev_kfree_skb_any(buffer->skb);
+		buffer->skb = NULL;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_unmap_rx_skb\n");
+}
+
+/*!
+* \brief API to re-allocate the new skb to rx descriptors.
+*
+* \details This function is used to re-allocate & re-assign the new skb to
+* receive descriptors from which driver has read the data. Also ownership bit
+* and other bits are reset so that device can reuse the descriptors.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void.
+*/
+
+static void DWC_ETH_QOS_re_alloc_skb(struct DWC_ETH_QOS_prv_data *pdata,
+				UINT qInx)
+{
+	int i;
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	int tail_idx;
+
+	DBGPR("-->DWC_ETH_QOS_re_alloc_skb: desc_data->skb_realloc_idx = %d "\
+		" qInx = %u\n", desc_data->skb_realloc_idx, qInx);
+
+	for (i = 0; i < desc_data->dirty_rx; i++) {
+		buffer = GET_RX_BUF_PTR(qInx, desc_data->skb_realloc_idx);
+		/* allocate skb & assign to each desc */
+		if (pdata->alloc_rx_buf(pdata, buffer, GFP_ATOMIC)) {
+			printk(KERN_ALERT "Failed to re allocate skb\n");
+			pdata->xstats.q_re_alloc_rx_buf_failed[qInx]++;
+			break;
+		}
+
+		wmb();
+		hw_if->rx_desc_reset(desc_data->skb_realloc_idx, pdata,
+				     buffer->inte, qInx);
+		INCR_RX_DESC_INDEX(desc_data->skb_realloc_idx, 1);
+	}
+	tail_idx = desc_data->skb_realloc_idx;
+	DECR_RX_DESC_INDEX(tail_idx);
+	hw_if->update_rx_tail_ptr(qInx,
+		GET_RX_DESC_DMA_ADDR(qInx, tail_idx));
+	desc_data->dirty_rx = 0;
+
+	DBGPR("<--DWC_ETH_QOS_re_alloc_skb\n");
+
+	return;
+}
+
+/*!
+* \brief API to initialize the function pointers.
+*
+* \details This function is called in probe to initialize all the function
+* pointers which are used in other functions to manage edscriptors.
+*
+* \param[in] desc_if - pointer to desc_if_struct structure.
+*
+* \return void.
+*/
+
+void DWC_ETH_QOS_init_function_ptrs_desc(struct desc_if_struct *desc_if)
+{
+
+	DBGPR("-->DWC_ETH_QOS_init_function_ptrs_desc\n");
+
+	desc_if->alloc_queue_struct = DWC_ETH_QOS_alloc_queue_struct;
+	desc_if->free_queue_struct = DWC_ETH_QOS_free_queue_struct;
+	desc_if->alloc_buff_and_desc = allocate_buffer_and_desc;
+	desc_if->realloc_skb = DWC_ETH_QOS_re_alloc_skb;
+	desc_if->unmap_rx_skb = DWC_ETH_QOS_unmap_rx_skb;
+	desc_if->unmap_tx_skb = DWC_ETH_QOS_unmap_tx_skb;
+	desc_if->map_tx_skb = DWC_ETH_QOS_map_skb;
+	desc_if->tx_free_mem = DWC_ETH_QOS_tx_free_mem;
+	desc_if->rx_free_mem = DWC_ETH_QOS_rx_free_mem;
+	desc_if->wrapper_tx_desc_init = DWC_ETH_QOS_wrapper_tx_descriptor_init;
+	desc_if->wrapper_tx_desc_init_single_q =
+	    DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q;
+	desc_if->wrapper_rx_desc_init = DWC_ETH_QOS_wrapper_rx_descriptor_init;
+	desc_if->wrapper_rx_desc_init_single_q =
+	    DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q;
+
+	desc_if->rx_skb_free_mem = DWC_ETH_QOS_rx_skb_free_mem;
+	desc_if->rx_skb_free_mem_single_q = DWC_ETH_QOS_rx_skb_free_mem_single_q;
+	desc_if->tx_skb_free_mem = DWC_ETH_QOS_tx_skb_free_mem;
+	desc_if->tx_skb_free_mem_single_q = DWC_ETH_QOS_tx_skb_free_mem_single_q;
+
+	desc_if->handle_tso = DWC_ETH_QOS_handle_tso;
+
+	DBGPR("<--DWC_ETH_QOS_init_function_ptrs_desc\n");
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.h
new file mode 100755
index 0000000..2592fd0
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.h
@@ -0,0 +1,87 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS_DESC_H__
+
+#define __DWC_ETH_QOS_DESC_H__
+
+static INT allocate_buffer_and_desc(struct DWC_ETH_QOS_prv_data *);
+
+static void DWC_ETH_QOS_wrapper_tx_descriptor_init(struct DWC_ETH_QOS_prv_data
+						   *pdata);
+
+static void DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q(struct
+							    DWC_ETH_QOS_prv_data
+							    *pdata, UINT qInx);
+
+static void DWC_ETH_QOS_wrapper_rx_descriptor_init(struct DWC_ETH_QOS_prv_data
+						   *pdata);
+
+static void DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q(struct
+							    DWC_ETH_QOS_prv_data
+							    *pdata, UINT qInx);
+
+static int DWC_ETH_QOS_get_skb_hdr(struct sk_buff *skb, void **iphdr,
+				   void **tcph, u64 *hdr_flags, void *priv);
+
+static void DWC_ETH_QOS_tx_free_mem(struct DWC_ETH_QOS_prv_data *);
+
+static void DWC_ETH_QOS_rx_free_mem(struct DWC_ETH_QOS_prv_data *);
+
+static unsigned int DWC_ETH_QOS_map_skb(struct net_device *, struct sk_buff *);
+
+static void DWC_ETH_QOS_unmap_tx_skb(struct DWC_ETH_QOS_prv_data *,
+				     struct DWC_ETH_QOS_tx_buffer *);
+
+static void DWC_ETH_QOS_unmap_rx_skb(struct DWC_ETH_QOS_prv_data *,
+				     struct DWC_ETH_QOS_rx_buffer *);
+
+static void DWC_ETH_QOS_re_alloc_skb(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT qInx);
+
+static void DWC_ETH_QOS_tx_desc_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					 UINT tx_q_cnt);
+
+static void DWC_ETH_QOS_tx_buf_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT tx_q_cnt);
+
+static void DWC_ETH_QOS_rx_desc_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					 UINT rx_q_cnt);
+
+static void DWC_ETH_QOS_rx_buf_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT rx_q_cnt);
+
+static void DWC_ETH_QOS_rx_skb_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT rx_qCnt);
+
+static void DWC_ETH_QOS_tx_skb_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT tx_qCnt);
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
new file mode 100755
index 0000000..0a99de3
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -0,0 +1,4796 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_dev.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+
+extern ULONG dwc_eth_qos_pci_base_addr;
+
+#include "DWC_ETH_QOS_yregacc.h"
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+
+static INT prepare_dev_pktgen(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	UINT qInx = 0;
+
+	/* set MAC loop back mode */
+	MAC_MCR_LM_UdfWr(0x1);
+
+	/* Do not strip received VLAN tag */
+	MAC_VLANTR_EVLS_UdfWr(0x0);
+
+	/* set promiscuous mode */
+	MAC_MPFR_PR_UdfWr(0x1);
+
+	/* disable autopad or CRC stripping */
+	MAC_MCR_ACS_UdfWr(0);
+
+	/* enable drop tx status */
+	MTL_OMR_DTXSTS_UdfWr(0x1);
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		/* enable avg bits per slot interrupt */
+		MTL_QECR_ABPSSIE_UdfWr(qInx, 0x1);
+
+		/* enable OSF mode */
+		DMA_TCR_OSP_UdfWr(qInx, 0x1);
+
+		/* disable slot checks */
+		DMA_SFCSR_RgWr(qInx, 0);
+	}
+
+	return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure slot count The software
+* can program the number of slots(of duration 125us) over which the
+* average transmitted bits per slot need to be computed for
+* channel 1 to 7 when CBS alogorithm is enabled.
+* \param[in] qInx
+* \param[in] slot_count
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_slot_count(UINT qInx,
+                          UCHAR slot_count)
+{
+
+  if (slot_count == 1) {
+    MTL_QECR_SLC_UdfWr(qInx, 0);
+  }
+  else if (slot_count == 2) {
+    MTL_QECR_SLC_UdfWr(qInx, 0x1);
+  }
+  else if (slot_count == 4) {
+    MTL_QECR_SLC_UdfWr(qInx, 0x3);
+  }
+  else if (slot_count == 8) {
+    MTL_QECR_SLC_UdfWr(qInx, 0x4);
+  }
+  else if (slot_count == 16) {
+    MTL_QECR_SLC_UdfWr(qInx, 0x5);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable/disable slot interrupt:
+* When this bit is set,the MAC asserts an interrupt when the average
+* bits per slot status is updated for channel 1 to 7.
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_slot_interrupt(UINT qInx, UCHAR slot_int)
+{
+
+  MTL_QECR_ABPSSIE_UdfWr(qInx, slot_int);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+
+/*!
+* \brief This sequence is used to configure DMA Tx:Rx/Rx:Tx
+* Priority Ratio These bits control the priority ratio in WRR
+* arbitration between the TX and RX DAM.
+* \param[in] prio_ratio
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_tx_rx_prio_ratio(UCHAR prio_ratio)
+{
+
+  DMA_BMR_PR_UdfWr(prio_ratio);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure DMA Transmit Arbitration algorithm
+* \param[in] arb_algo
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_dma_tx_arb_algorithm(UCHAR arb_algo)
+{
+
+  DMA_BMR_TAA_UdfWr(arb_algo);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure DMA Tx Priority When this
+* bit is set, it indicates that the TX DMA has higher priority than
+* the RX DMA during arbitration for the system-side bus.
+* \param[in] prio
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_tx_rx_prio(UCHAR prio)
+{
+
+  DMA_BMR_TXPR_UdfWr(prio);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure DMA Tx/Rx Arbitration Scheme
+* This bit specifies the arbitration scheme between the Tx and Rx paths
+* of all channels.
+* \param[in] prio_policy
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_tx_rx_prio_policy(UCHAR prio_policy)
+{
+
+  DMA_BMR_DA_UdfWr(prio_policy);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure TX Channel Weight
+* \param[in] qInx
+* \param[in] weight
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_ch_arb_weights(UINT qInx,
+                               UCHAR weight)
+{
+
+  if (weight == 1) {
+    DMA_TCR_TCW_UdfWr(qInx, 0);
+  }
+  else if (weight == 2) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x1);
+  }
+  else if (weight == 3) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x2);
+  }
+  else if (weight == 4) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x3);
+  }
+  else if (weight == 5) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x4);
+  }
+  else if (weight == 6) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x5);
+  }
+  else if (weight == 7) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x6);
+  }
+  else if (weight == 8) {
+    DMA_TCR_TCW_UdfWr(qInx, 0x7);
+  }
+
+  return Y_SUCCESS;
+}
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+
+
+/*!
+* \brief This sequence is used to enable/disable MAC loopback mode
+* \param[in] enb_dis
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_mac_loopback_mode(UINT enb_dis)
+{
+
+  MAC_MCR_LM_UdfWr(enb_dis);
+
+  return Y_SUCCESS;
+}
+
+
+/* enable/disable PFC(Priority Based Flow Control) */
+static void config_pfc(int enb_dis)
+{
+	MAC_RFCR_PFCE_UdfWr(enb_dis);
+}
+
+
+/*!
+* \brief This sequence is used to enable/disable ARP offload
+* \param[in] enb_dis
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int config_arp_offload(int enb_dis)
+{
+
+  MAC_MCR_ARPEN_UdfWr(enb_dis);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update the IP addr into MAC ARP Add reg,
+* which is used by MAC for replying to ARP packets
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int update_arp_offload_ip_addr(UCHAR addr[])
+{
+
+  MAC_ARPA_RgWr((addr[3] | (addr[2] << 8) | (addr[1] << 16) | addr[0] << 24));
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get the status of LPI/EEE mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static u32 get_lpi_status(void)
+{
+  u32 varmac_lps;
+
+  MAC_LPS_RgRd(varmac_lps);
+
+  return varmac_lps;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable EEE mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int set_eee_mode(void)
+{
+
+  MAC_LPS_LPIEN_UdfWr(0x1);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to disable EEE mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int reset_eee_mode(void)
+{
+
+  MAC_LPS_LPITXA_UdfWr(0);
+  MAC_LPS_LPIEN_UdfWr(0);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to set PLS bit
+* \param[in] phy_link
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int set_eee_pls(int phy_link)
+{
+
+  if (phy_link == 1) {
+    MAC_LPS_PLS_UdfWr(0x1);
+  }
+  else {
+    MAC_LPS_PLS_UdfWr(0);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to set EEE timer values
+* \param[in] lpi_lst
+* \param[in] lpi_twt
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int set_eee_timer(int lpi_lst,
+                         int lpi_twt)
+{
+
+  /* mim time(us) for which the MAC waits after it stops transmitting */
+  /* the LPI pattern to the PHY and before it resumes the normal transmission. */
+  MAC_LPC_TWT_UdfWr(lpi_twt);
+  /* mim time(ms) for which the link status from the PHY should be Up before */
+  /* the LPI pattern can be transmitted to the PHY. */
+  MAC_LPC_TLPIEX_UdfWr(lpi_lst);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+static int set_lpi_tx_automate(void)
+{
+	MAC_LPS_LPITXA_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable/disable Auto-Negotiation
+* and restart the autonegotiation
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int control_an(bool enable, bool restart)
+{
+
+  MAC_ANC_ANE_UdfWr(enable);
+  MAC_ANC_RAN_UdfWr(restart);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get Auto-Negotiation advertisment
+* pause parameter
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int get_an_adv_pause_param(void)
+{
+  unsigned long varmac_aad;
+
+  MAC_AAD_RgRd(varmac_aad);
+
+  return GET_VALUE(varmac_aad, MAC_AAD_PSE_LPOS, MAC_AAD_PSE_HPOS);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get Auto-Negotiation advertisment
+* duplex parameter. Returns one if Full duplex mode is selected
+* else returns zero
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int get_an_adv_duplex_param(void)
+{
+  unsigned long varmac_aad;
+
+  MAC_AAD_RgRd(varmac_aad);
+  if (GET_VALUE(varmac_aad, MAC_AAD_FD_LPOS, MAC_AAD_FD_HPOS) == 1) {
+    return 1;
+  }
+  else {
+    return 0;
+  }
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get Link partner Auto-Negotiation
+* advertisment pause parameter
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int get_lp_an_adv_pause_param(void)
+{
+  unsigned long varmac_alpa;
+
+  MAC_ALPA_RgRd(varmac_alpa);
+
+  return GET_VALUE(varmac_alpa, MAC_ALPA_PSE_LPOS, MAC_ALPA_PSE_HPOS);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get Link partner Auto-Negotiation
+* advertisment duplex parameter. Returns one if Full duplex mode
+* is selected else returns zero
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int get_lp_an_adv_duplex_param(void)
+{
+  unsigned long varmac_alpa;
+
+  MAC_ALPA_RgRd(varmac_alpa);
+  if (GET_VALUE(varmac_alpa, MAC_ALPA_FD_LPOS, MAC_ALPA_FD_HPOS) == 1) {
+    return 1;
+  }
+  else {
+    return 0;
+  }
+}
+
+
+static UINT get_vlan_tag_comparison(void)
+{
+	UINT etv;
+
+	MAC_VLANTR_ETV_UdfRd(etv);
+
+	return etv;
+}
+
+/*!
+* \brief This sequence is used to enable/disable VLAN filtering and
+* also selects VLAN filtering mode- perfect/hash
+* \param[in] filter_enb_dis
+* \param[in] perfect_hash
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_vlan_filtering(INT filter_enb_dis,
+                                 INT perfect_hash_filtering,
+				 INT perfect_inverse_match)
+{
+  MAC_MPFR_VTFE_UdfWr(filter_enb_dis);
+  MAC_VLANTR_VTIM_UdfWr(perfect_inverse_match);
+  MAC_VLANTR_VTHM_UdfWr(perfect_hash_filtering);
+  /* To enable only HASH filtering then VL/VID
+   * should be > zero. Hence we are writting 1 into VL.
+   * It also means that MAC will always receive VLAN pkt with
+   * VID = 1 if inverse march is not set.
+   * */
+  if (perfect_hash_filtering)
+    MAC_VLANTR_VL_UdfWr(0x1);
+
+  /* By default enable MAC to calculate vlan hash on
+   * only 12-bits of received VLAN tag (ie only on
+   * VLAN id and ignore priority and other fields)
+   * */
+  if (perfect_hash_filtering)
+	  MAC_VLANTR_ETV_UdfWr(0x1);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update the VLAN ID for perfect filtering
+* \param[in] vid
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_vlan_id(USHORT vid)
+{
+
+  MAC_VLANTR_VL_UdfWr(vid);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update the VLAN Hash Table reg with new VLAN ID
+* \param[in] data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_vlan_hash_table_reg(USHORT data)
+{
+
+  MAC_VLANHTR_VLHT_UdfWr(data);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get the content of VLAN Hash Table reg
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT get_vlan_hash_table_reg(void)
+{
+  ULONG varMAC_VLANHTR;
+
+  MAC_VLANHTR_RgRd(varMAC_VLANHTR);
+
+  return GET_VALUE(varMAC_VLANHTR, MAC_VLANHTR_VLHT_LPOS, MAC_VLANHTR_VLHT_HPOS);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update Destination Port Number for
+* L4(TCP/UDP) layer filtering
+* \param[in] filter_no
+* \param[in] port_no
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_l4_da_port_no(INT filter_no,
+                                USHORT port_no)
+{
+
+  MAC_L4AR_L4DP0_UdfWr(filter_no, port_no);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update Source Port Number for
+* L4(TCP/UDP) layer filtering
+* \param[in] filter_no
+* \param[in] port_no
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_l4_sa_port_no(INT filter_no,
+                                USHORT port_no)
+{
+
+  MAC_L4AR_L4SP0_UdfWr(filter_no, port_no);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure L4(TCP/UDP) filters for
+* SA and DA Port Number matching
+* \param[in] filter_no
+* \param[in] tcp_udp_match
+* \param[in] src_dst_port_match
+* \param[in] perfect_inverse_match
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_l4_filters(INT filter_no,
+		                         INT enb_dis,
+                             INT tcp_udp_match,
+                             INT src_dst_port_match,
+                             INT perfect_inverse_match)
+{
+
+  MAC_L3L4CR_L4PEN0_UdfWr(filter_no, tcp_udp_match);
+
+  if (src_dst_port_match == 0) {
+	if (enb_dis == 1) {
+		/* Enable L4 filters for SOURCE Port No matching */
+		MAC_L3L4CR_L4SPM0_UdfWr(filter_no, 0x1);
+		MAC_L3L4CR_L4SPIM0_UdfWr(filter_no, perfect_inverse_match);
+    }
+    else {
+		/* Disable L4 filters for SOURCE Port No matching */
+		MAC_L3L4CR_L4SPM0_UdfWr(filter_no, 0x0);
+		MAC_L3L4CR_L4SPIM0_UdfWr(filter_no, 0x0);
+	}
+  }
+  else {
+	if (enb_dis == 1) {
+		/* Enable L4 filters for DESTINATION port No matching */
+		MAC_L3L4CR_L4DPM0_UdfWr(filter_no, 0x1);
+		MAC_L3L4CR_L4DPIM0_UdfWr(filter_no, perfect_inverse_match);
+	}
+	else {
+		/* Disable L4 filters for DESTINATION port No matching */
+		MAC_L3L4CR_L4DPM0_UdfWr(filter_no, 0x0);
+		MAC_L3L4CR_L4DPIM0_UdfWr(filter_no, 0x0);
+	}
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update IPv6 source/destination Address for L3 layer filtering
+* \param[in] filter_no
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_ip6_addr(INT filter_no,
+                           USHORT addr[])
+{
+  /* update Bits[31:0] of 128-bit IP addr */
+  MAC_L3A0R_RgWr(filter_no, (addr[7] | (addr[6] << 16)));
+  /* update Bits[63:32] of 128-bit IP addr */
+  MAC_L3A1R_RgWr(filter_no, (addr[5] | (addr[4] << 16)));
+  /* update Bits[95:64] of 128-bit IP addr */
+  MAC_L3A2R_RgWr(filter_no, (addr[3] | (addr[2] << 16)));
+  /* update Bits[127:96] of 128-bit IP addr */
+  MAC_L3A3R_RgWr(filter_no, (addr[1] | (addr[0] << 16)));
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update IPv4 destination Address for L3 layer filtering
+* \param[in] filter_no
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_ip4_addr1(INT filter_no,
+                            UCHAR addr[])
+{
+  MAC_L3A1R_RgWr(filter_no, (addr[3] | (addr[2] << 8) | (addr[1] << 16) | (addr[0] << 24)));
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update IPv4 source Address for L3 layer filtering
+* \param[in] filter_no
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_ip4_addr0(INT filter_no,
+                            UCHAR addr[])
+{
+  MAC_L3A0R_RgWr(filter_no, (addr[3] | (addr[2] << 8) | (addr[1] << 16) | (addr[0] << 24)));
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure L3(IPv4/IPv6) filters
+* for SA/DA Address matching
+* \param[in] filter_no
+* \param[in] ipv4_ipv6_match
+* \param[in] src_dst_addr_match
+* \param[in] perfect_inverse_match
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_l3_filters(INT filter_no,
+		                         INT enb_dis,
+                             INT ipv4_ipv6_match,
+                             INT src_dst_addr_match,
+                             INT perfect_inverse_match)
+{
+	MAC_L3L4CR_L3PEN0_UdfWr(filter_no, ipv4_ipv6_match);
+
+	/* For IPv6 either SA/DA can be checked, not both */
+	if (ipv4_ipv6_match == 1) {
+		if (enb_dis == 1) {
+			if (src_dst_addr_match == 0) {
+				/* Enable L3 filters for IPv6 SOURCE addr matching */
+				MAC_L3L4CR_L3SAM0_UdfWr(filter_no, 0x1);
+				MAC_L3L4CR_L3SAIM0_UdfWr(filter_no, perfect_inverse_match);
+				MAC_L3L4CR_L3DAM0_UdfWr(filter_no, 0x0);
+				MAC_L3L4CR_L3DAIM0_UdfWr(filter_no, 0x0);
+			}
+			else {
+				/* Enable L3 filters for IPv6 DESTINATION addr matching */
+				MAC_L3L4CR_L3SAM0_UdfWr(filter_no, 0x0);
+				MAC_L3L4CR_L3SAIM0_UdfWr(filter_no, 0x0);
+				MAC_L3L4CR_L3DAM0_UdfWr(filter_no, 0x1);
+				MAC_L3L4CR_L3DAIM0_UdfWr(filter_no, perfect_inverse_match);
+			}
+		}
+		else {
+			/* Disable L3 filters for IPv6 SOURCE/DESTINATION addr matching */
+			MAC_L3L4CR_L3PEN0_UdfWr(filter_no, 0x0);
+			MAC_L3L4CR_L3SAM0_UdfWr(filter_no, 0x0);
+			MAC_L3L4CR_L3SAIM0_UdfWr(filter_no, 0x0);
+			MAC_L3L4CR_L3DAM0_UdfWr(filter_no, 0x0);
+			MAC_L3L4CR_L3DAIM0_UdfWr(filter_no, 0x0);
+		}
+	}
+	else {
+		if (src_dst_addr_match == 0) {
+			if (enb_dis == 1) {
+				/* Enable L3 filters for IPv4 SOURCE addr matching */
+				MAC_L3L4CR_L3SAM0_UdfWr(filter_no, 0x1);
+				MAC_L3L4CR_L3SAIM0_UdfWr(filter_no, perfect_inverse_match);
+			}
+			else {
+				/* Disable L3 filters for IPv4 SOURCE addr matching */
+				MAC_L3L4CR_L3SAM0_UdfWr(filter_no, 0x0);
+				MAC_L3L4CR_L3SAIM0_UdfWr(filter_no, 0x0);
+			}
+		}
+		else {
+			if (enb_dis == 1) {
+				/* Enable L3 filters for IPv4 DESTINATION addr matching */
+				MAC_L3L4CR_L3DAM0_UdfWr(filter_no, 0x1);
+				MAC_L3L4CR_L3DAIM0_UdfWr(filter_no, perfect_inverse_match);
+			}
+			else {
+				/* Disable L3 filters for IPv4 DESTINATION addr matching */
+				MAC_L3L4CR_L3DAM0_UdfWr(filter_no, 0x0);
+				MAC_L3L4CR_L3DAIM0_UdfWr(filter_no, 0x0);
+			}
+		}
+	}
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used to configure MAC in differnet pkt processing
+* modes like promiscuous, multicast, unicast, hash unicast/multicast.
+* \param[in] pr_mode
+* \param[in] huc_mode
+* \param[in] hmc_mode
+* \param[in] pm_mode
+* \param[in] hpf_mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_mac_pkt_filter_reg(UCHAR pr_mode,
+                                     UCHAR huc_mode,
+                                     UCHAR hmc_mode,
+                                     UCHAR pm_mode,
+                                     UCHAR hpf_mode)
+{
+  ULONG varMAC_MPFR;
+
+  /* configure device in differnet modes */
+  /* promiscuous, hash unicast, hash multicast, */
+  /* all multicast and perfect/hash filtering mode. */
+  MAC_MPFR_RgRd(varMAC_MPFR);
+  varMAC_MPFR = varMAC_MPFR & (ULONG)(0x803103e8);
+  varMAC_MPFR = varMAC_MPFR | ((pr_mode) << 0) | ((huc_mode) << 1) | ((hmc_mode) << 2) |
+                ((pm_mode) << 4) | ((hpf_mode) << 10);
+  MAC_MPFR_RgWr(varMAC_MPFR);
+
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used to enable/disable L3 and L4 filtering
+* \param[in] filter_enb_dis
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_l3_l4_filter_enable(INT filter_enb_dis)
+{
+
+  MAC_MPFR_IPFE_UdfWr(filter_enb_dis);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to select perfect/inverse matching for L2 DA
+* \param[in] perfect_inverse_match
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_l2_da_perfect_inverse_match(INT perfect_inverse_match)
+{
+
+  MAC_MPFR_DAIF_UdfWr(perfect_inverse_match);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update the MAC address in last 96 MAC
+* address Low and High register(32-127) for L2 layer filtering
+* \param[in] idx
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_mac_addr32_127_low_high_reg(INT idx,
+                                              UCHAR addr[])
+{
+
+  MAC_MA32_127LR_RgWr(idx, (addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24)));
+  MAC_MA32_127HR_ADDRHI_UdfWr(idx, (addr[4] | (addr[5] << 8)));
+  MAC_MA32_127HR_AE_UdfWr(idx, 0x1);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to update the MAC address in first 31 MAC
+* address Low and High register(1-31) for L2 layer filtering
+* \param[in] idx
+* \param[in] addr
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_mac_addr1_31_low_high_reg(INT idx,
+                                            UCHAR addr[])
+{
+
+  MAC_MA1_31LR_RgWr(idx, (addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24)));
+  MAC_MA1_31HR_ADDRHI_UdfWr(idx, (addr[4] | (addr[5] << 8)));
+  MAC_MA1_31HR_AE_UdfWr(idx, 0x1);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure hash table register for
+* hash address filtering
+* \param[in] idx
+* \param[in] data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT update_hash_table_reg(INT idx,
+                                 UINT data)
+{
+
+  MAC_HTR_RgWr(idx, data);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used check whether Tx drop status in the
+* MTL is enabled or not, returns 1 if it is enabled and 0 if
+* it is disabled.
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT drop_tx_status_enabled(void)
+{
+  ULONG varMTL_OMR;
+
+  MTL_OMR_RgRd(varMTL_OMR);
+
+  return GET_VALUE(varMTL_OMR, MTL_OMR_DTXSTS_LPOS, MTL_OMR_DTXSTS_HPOS);
+}
+
+
+
+
+/*!
+* \brief This sequence is used configure MAC SSIR
+* \param[in] ptp_clock
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_sub_second_increment(ULONG ptp_clock)
+{
+  ULONG val;
+  ULONG varMAC_TCR;
+
+  MAC_TCR_RgRd(varMAC_TCR);
+
+  /* convert the PTP_CLOCK to nano second */
+  /*  formula is : ((1/ptp_clock) * 1000000000) */
+	/*  where, ptp_clock = 50MHz if FINE correction */
+	/*  and ptp_clock = DWC_ETH_QOS_SYSCLOCK if COARSE correction */
+  if (GET_VALUE(varMAC_TCR, MAC_TCR_TSCFUPDT_LPOS, MAC_TCR_TSCFUPDT_HPOS) == 1) {
+    val = ((1 * 1000000000ull) / 50000000);
+  }
+  else {
+    val = ((1 * 1000000000ull) / ptp_clock);
+  }
+
+  /* 0.465ns accurecy */
+  if (GET_VALUE(varMAC_TCR, MAC_TCR_TSCTRLSSR_LPOS, MAC_TCR_TSCTRLSSR_HPOS) == 0) {
+    val = (val * 1000) / 465;
+  }
+  MAC_SSIR_SSINC_UdfWr(val);
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used get 64-bit system time in nano sec
+* \return (unsigned long long) on success
+* \retval ns
+*/
+
+static ULONG_LONG get_systime(void)
+{
+  ULONG_LONG ns;
+  ULONG varmac_stnsr;
+  ULONG varmac_stsr;
+
+  MAC_STNSR_RgRd(varmac_stnsr);
+  ns = GET_VALUE(varmac_stnsr, MAC_STNSR_TSSS_LPOS, MAC_STNSR_TSSS_HPOS);
+  /* convert sec/high time value to nanosecond */
+  MAC_STSR_RgRd(varmac_stsr);
+  ns = ns + (varmac_stsr * 1000000000ull);
+
+  return ns;
+}
+
+
+
+
+
+
+/*!
+* \brief This sequence is used to adjust/update the system time
+* \param[in] sec
+* \param[in] nsec
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT adjust_systime(UINT sec,
+						UINT nsec,
+			  			INT add_sub,
+						bool one_nsec_accuracy)
+{
+  ULONG retryCount = 100000;
+  ULONG vy_count;
+  volatile ULONG varMAC_TCR;
+
+  /* wait for previous(if any) time adjust/update to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSUPDT_LPOS, MAC_TCR_TSUPDT_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+		mdelay(1);
+  }
+
+  if (add_sub) {
+    /* If the new sec value needs to be subtracted with
+     * the system time, then MAC_STSUR reg should be
+     * programmed with (2^32 – <new_sec_value>)
+     * */
+    sec = (0x100000000ull - sec);
+
+    /* If the new nsec value need to be subtracted with
+     * the system time, then MAC_STNSUR.TSSS field should be
+     * programmed with,
+     * (10^9 - <new_nsec_value>) if MAC_TCR.TSCTRLSSR is set or
+     * (2^31 - <new_nsec_value> if MAC_TCR.TSCTRLSSR is reset)
+     * */
+  	if (one_nsec_accuracy)
+      nsec = (0x3B9ACA00 - nsec);
+   	else
+      nsec = (0x80000000 - nsec);
+  }
+
+  MAC_STSUR_RgWr(sec);
+  MAC_STNSUR_TSSS_UdfWr(nsec);
+  MAC_STNSUR_ADDSUB_UdfWr(add_sub);
+
+  /* issue command to initialize system time with the value */
+  /* specified in MAC_STSUR and MAC_STNSUR. */
+  MAC_TCR_TSUPDT_UdfWr(0x1);
+  /* wait for present time initialize to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSUPDT_LPOS, MAC_TCR_TSUPDT_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+		mdelay(1);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used to adjust the ptp operating frequency.
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_addend(UINT data)
+{
+  ULONG retryCount = 100000;
+  ULONG vy_count;
+  volatile ULONG varMAC_TCR;
+
+  /* wait for previous(if any) added update to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSADDREG_LPOS, MAC_TCR_TSADDREG_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+    mdelay(1);
+  }
+
+  MAC_TAR_RgWr(data);
+  /* issue command to update the added value */
+  MAC_TCR_TSADDREG_UdfWr(0x1);
+  /* wait for present added update to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSADDREG_LPOS, MAC_TCR_TSADDREG_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+    mdelay(1);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to initialize the system time
+* \param[in] sec
+* \param[in] nsec
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT init_systime(UINT sec,
+                        UINT nsec)
+{
+  ULONG retryCount = 100000;
+  ULONG vy_count;
+  volatile ULONG varMAC_TCR;
+
+  /* wait for previous(if any) time initialize to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSINIT_LPOS, MAC_TCR_TSINIT_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+    mdelay(1);
+  }
+  MAC_STSUR_RgWr(sec);
+  MAC_STNSUR_RgWr(nsec);
+  /* issue command to initialize system time with the value */
+  /* specified in MAC_STSUR and MAC_STNSUR. */
+  MAC_TCR_TSINIT_UdfWr(0x1);
+  /* wait for present time initialize to complete. */
+
+  /*Poll*/
+  vy_count = 0;
+  while(1){
+    if(vy_count > retryCount) {
+      return -Y_FAILURE;
+    }
+
+    MAC_TCR_RgRd(varMAC_TCR);
+    if (GET_VALUE(varMAC_TCR, MAC_TCR_TSINIT_LPOS, MAC_TCR_TSINIT_HPOS) == 0) {
+      break;
+    }
+    vy_count++;
+    mdelay(1);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+
+/*!
+* \brief This sequence is used to enable HW time stamping
+* and receive frames
+* \param[in] count
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_hw_time_stamping(UINT config_val)
+{
+
+  MAC_TCR_RgWr(config_val);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+
+/*!
+* \brief This sequence is used get the 64-bit of the timestamp
+* captured by the device for the corresponding received packet
+* in nanosecond.
+* \param[in] rxdesc
+* \return (unsigned long long) on success
+* \retval ns
+*/
+
+static ULONG_LONG get_rx_tstamp(t_RX_CONTEXT_DESC *rxdesc)
+{
+  ULONG_LONG ns;
+  ULONG varrdes1;
+
+  RX_CONTEXT_DESC_RDES0_Ml_Rd(rxdesc->RDES0, ns);
+  RX_CONTEXT_DESC_RDES1_Ml_Rd(rxdesc->RDES1, varrdes1);
+  ns = ns + (varrdes1 * 1000000000ull);
+
+  return ns;
+}
+
+
+
+
+
+/*!
+* \brief This sequence is used to check whether the captured timestamp
+* for the corresponding received packet is valid or not.
+* Returns 0 if no context descriptor
+* Returns 1 if timestamp is valid
+* Returns 2 if time stamp is corrupted
+* \param[in] rxdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static UINT get_rx_tstamp_status(t_RX_CONTEXT_DESC *rxdesc)
+{
+  UINT varOWN;
+  UINT varCTXT;
+  UINT varRDES0;
+  UINT varRDES1;
+
+  /* check for own bit and CTXT bit */
+  RX_CONTEXT_DESC_RDES3_OWN_Mlf_Rd(rxdesc->RDES3, varOWN);
+  RX_CONTEXT_DESC_RDES3_CTXT_Mlf_Rd(rxdesc->RDES3, varCTXT);
+  if ((varOWN == 0) && (varCTXT == 0x1)) {
+    RX_CONTEXT_DESC_RDES0_Ml_Rd(rxdesc->RDES0, varRDES0);
+    RX_CONTEXT_DESC_RDES1_Ml_Rd(rxdesc->RDES1, varRDES1);
+    if ((varRDES0 == 0xffffffff) && (varRDES1 == 0xffffffff)) {
+      /* time stamp is corrupted */
+      return 2;
+    }
+    else {
+      /* time stamp is valid */
+      return 1;
+    }
+  }
+  else {
+    /* no CONTEX desc to hold time stamp value */
+    return 0;
+  }
+}
+
+
+
+
+/*!
+* \brief This sequence is used to check whether the timestamp value
+* is available in a context descriptor or not. Returns 1 if timestamp
+* is available else returns 0
+* \param[in] rxdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static UINT rx_tstamp_available(t_RX_NORMAL_DESC *rxdesc)
+{
+  UINT varRS1V;
+  UINT varTSA;
+
+  RX_NORMAL_DESC_RDES3_RS1V_Mlf_Rd(rxdesc->RDES3, varRS1V);
+  if (varRS1V == 1) {
+    RX_NORMAL_DESC_RDES1_TSA_Mlf_Rd(rxdesc->RDES1, varTSA);
+    return varTSA;
+  }
+  else {
+    return 0;
+  }
+}
+
+
+
+
+/*!
+* \brief This sequence is used get the least 64-bit of the timestamp
+* captured by the device for the corresponding transmit packet in nanosecond
+* \return (unsigned long long) on success
+* \retval ns
+*/
+
+static ULONG_LONG get_tx_tstamp_via_reg(void)
+{
+  ULONG_LONG ns;
+  ULONG varmac_ttn;
+
+  MAC_TTSN_TXTSSTSLO_UdfRd(ns);
+  MAC_TTN_TXTSSTSHI_UdfRd(varmac_ttn);
+  ns = ns + (varmac_ttn * 1000000000ull);
+
+  return ns;
+}
+
+
+
+
+
+
+/*!
+* \brief This sequence is used to check whether a timestamp has been
+* captured for the corresponding transmit packet. Returns 1 if
+* timestamp is taken else returns 0
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static UINT get_tx_tstamp_status_via_reg(void)
+{
+  ULONG varMAC_TCR;
+  ULONG varMAC_TTSN;
+
+  /* device is configured to overwrite the timesatmp of */
+  /* eariler packet if driver has not yet read it. */
+  MAC_TCR_RgRd(varMAC_TCR);
+  if (GET_VALUE(varMAC_TCR, MAC_TCR_TXTSSTSM_LPOS, MAC_TCR_TXTSSTSM_HPOS) == 1) {
+    /* nothing to do */
+  }
+  else {
+    /* timesatmp of the current pkt is ignored or not captured */
+    MAC_TTSN_RgRd(varMAC_TTSN);
+    if (GET_VALUE(varMAC_TTSN, MAC_TTSN_TXTSSTSMIS_LPOS, MAC_TTSN_TXTSSTSMIS_HPOS) == 1) {
+      return 0;
+    }
+    else {
+      return 1;
+    }
+  }
+
+  return 0;
+}
+
+
+
+
+
+/*!
+* \brief This sequence is used get the 64-bit of the timestamp captured
+* by the device for the corresponding transmit packet in nanosecond.
+* \param[in] txdesc
+* \return (unsigned long long) on success
+* \retval ns
+*/
+
+static ULONG_LONG get_tx_tstamp(t_TX_NORMAL_DESC *txdesc)
+{
+  ULONG_LONG ns;
+  ULONG vartdes1;
+
+  TX_NORMAL_DESC_TDES0_Ml_Rd(txdesc->TDES0, ns);
+  TX_NORMAL_DESC_TDES1_Ml_Rd(txdesc->TDES1, vartdes1);
+  ns = ns + (vartdes1 * 1000000000ull);
+
+  return ns;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to check whether a timestamp has been
+* captured for the corresponding transmit packet. Returns 1 if
+* timestamp is taken else returns 0
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static UINT get_tx_tstamp_status(t_TX_NORMAL_DESC *txdesc)
+{
+  UINT varTDES3;
+
+  TX_NORMAL_DESC_TDES3_Ml_Rd(txdesc->TDES3, varTDES3);
+
+  return (varTDES3 & 0x20000);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable/disable split header feature
+* \param[in] qInx
+* \param[in] sph_en
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_split_header_mode(UINT qInx,
+                             USHORT sph_en)
+{
+
+  DMA_CR_SPH_UdfWr(qInx, sph_en);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure header size in case of split header feature
+* \param[in] header_size
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_header_size(USHORT header_size)
+{
+
+  if (header_size == 64) {
+    MAC_MECR_HDSMS_UdfWr(0);
+  }
+  else if (header_size == 128) {
+    MAC_MECR_HDSMS_UdfWr(0x1);
+  }
+  else if (header_size == 256) {
+    MAC_MECR_HDSMS_UdfWr(0x2);
+  }
+  else if (header_size == 512) {
+    MAC_MECR_HDSMS_UdfWr(0x3);
+  }
+  else {
+    MAC_MECR_HDSMS_UdfWr(0x4);
+  }
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to set tx queue operating mode for Queue[0 - 7]
+* \param[in] qInx
+* \param[in] q_mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_tx_queue_operating_mode(UINT qInx,
+                                       UINT q_mode)
+{
+
+  MTL_QTOMR_TXQEN_UdfWr(qInx, q_mode);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to select Tx Scheduling Algorithm for AVB feature for Queue[1 - 7]
+* \param[in] avb_algo
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_avb_algorithm(UINT qInx, UCHAR avb_algo)
+{
+
+  MTL_QECR_AVALG_UdfWr(qInx, avb_algo);
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure credit-control for Queue[1 - 7]
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_credit_control(UINT qInx, UINT cc)
+{
+
+  MTL_QECR_CC_UdfWr(qInx, cc);
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used to configure send slope credit value
+* required for the credit-based shaper alogorithm for Queue[1 - 7]
+* \param[in] qInx
+* \param[in] sendSlope
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_send_slope(UINT qInx,
+                          UINT sendSlope)
+{
+
+  MTL_QSSCR_SSC_UdfWr(qInx, sendSlope);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure idle slope credit value
+* required for the credit-based shaper alogorithm for Queue[1 - 7]
+* \param[in] qInx
+* \param[in] idleSlope
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_idle_slope(UINT qInx,
+                          UINT idleSlope)
+{
+
+  MTL_QW_ISCQW_UdfWr(qInx, idleSlope);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure low credit value
+* required for the credit-based shaper alogorithm for Queue[1 - 7]
+* \param[in] qInx
+* \param[in] lowCredit
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_low_credit(UINT qInx,
+			UINT lowCredit)
+{
+
+  MTL_QLCR_LC_UdfWr(qInx, lowCredit);
+
+  return Y_SUCCESS;
+}
+
+
+/*!
+* \brief This sequence is used to enable/disable slot number check When set,
+* this bit enables the checking of the slot number programmed in the TX
+* descriptor with the current reference given in the RSN field. The DMA fetches
+* the data from the corresponding buffer only when the slot number is: equal to
+* the reference slot number or  ahead of the reference slot number by one.
+*
+* \param[in] qInx
+* \param[in] slot_check
+*
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_slot_num_check(UINT qInx, UCHAR slot_check)
+{
+
+  DMA_SFCSR_ESC_UdfWr(qInx, slot_check);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable/disable advance slot check When set,
+* this bit enables the DAM to fetch the data from the buffer when the slot
+* number programmed in TX descriptor is equal to the reference slot number
+* given in RSN field or ahead of the reference number by upto two slots
+*
+* \param[in] qInx
+* \param[in] adv_slot_check
+*
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_advance_slot_num_check(UINT qInx, UCHAR adv_slot_check)
+{
+
+  DMA_SFCSR_ASC_UdfWr(qInx, adv_slot_check);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure high credit value required
+* for the credit-based shaper alogorithm for Queue[1 - 7]
+* \param[in] qInx
+* \param[in] hiCredit
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_high_credit(UINT qInx,
+                           UINT hiCredit)
+{
+
+  MTL_QHCR_HC_UdfWr(qInx, hiCredit);
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to set weights for DCB feature for Queue[0 - 7]
+* \param[in] qInx
+* \param[in] q_weight
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_dcb_queue_weight(UINT qInx,
+                                UINT q_weight)
+{
+
+  MTL_QW_ISCQW_UdfWr(qInx, q_weight);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to select Tx Scheduling Algorithm for DCB feature
+* \param[in] dcb_algo
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_dcb_algorithm(UCHAR dcb_algo)
+{
+
+  MTL_OMR_SCHALG_UdfWr(dcb_algo);
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to get Tx queue count
+* \param[in] count
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+UCHAR get_tx_queue_count(void)
+{
+	UCHAR count;
+  ULONG varMAC_HFR2;
+
+  MAC_HFR2_RgRd(varMAC_HFR2);
+  count = GET_VALUE(varMAC_HFR2, MAC_HFR2_TXQCNT_LPOS, MAC_HFR2_TXQCNT_HPOS);
+
+  return (count + 1);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to get Rx queue count
+* \param[in] count
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+UCHAR get_rx_queue_count(void)
+{
+	UCHAR count;
+  ULONG varMAC_HFR2;
+
+  MAC_HFR2_RgRd(varMAC_HFR2);
+  count = GET_VALUE(varMAC_HFR2, MAC_HFR2_RXQCNT_LPOS, MAC_HFR2_RXQCNT_HPOS);
+
+  return (count + 1);
+}
+
+
+
+
+/*!
+* \brief This sequence is used to disables all Tx/Rx MMC interrupts
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_mmc_interrupts(void)
+{
+
+  /* disable all TX interrupts */
+  MMC_INTR_MASK_TX_RgWr(0xffffffff);
+  /* disable all RX interrupts */
+  MMC_INTR_MASK_RX_RgWr(0xffffffff);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to configure MMC counters
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_mmc_counters(void)
+{
+  ULONG varMMC_CNTRL;
+
+  /* set COUNTER RESET */
+  /* set RESET ON READ */
+  /* set COUNTER PRESET */
+  /* set FULL_HALF PRESET */
+  MMC_CNTRL_RgRd(varMMC_CNTRL);
+  varMMC_CNTRL = varMMC_CNTRL & (ULONG)(0x10a);
+  varMMC_CNTRL = varMMC_CNTRL | ((0x1) << 0) | ((0x1) << 2) | ((0x1) << 4) |
+                ((0x1) << 5);
+  MMC_CNTRL_RgWr(varMMC_CNTRL);
+
+
+  return Y_SUCCESS;
+}
+
+
+
+/*!
+* \brief This sequence is used to disable given DMA channel rx interrupts
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_rx_interrupt(UINT qInx)
+{
+
+  DMA_IER_RBUE_UdfWr(qInx, 0);
+  DMA_IER_RIE_UdfWr(qInx, 0);
+
+  return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable given DMA channel rx interrupts
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_rx_interrupt(UINT qInx)
+{
+
+  DMA_IER_RBUE_UdfWr(qInx, 0x1);
+  DMA_IER_RIE_UdfWr(qInx, 0x1);
+
+  return Y_SUCCESS;
+}
+
+
+static VOID configure_sa_via_reg(u32 cmd)
+{
+	MAC_MCR_SARC_UdfWr(cmd);
+}
+
+static VOID configure_mac_addr1_reg(UCHAR *mac_addr)
+{
+	MAC_MA1HR_RgWr(((mac_addr[5] << 8) | (mac_addr[4])));
+	MAC_MA1LR_RgWr(((mac_addr[3] << 24) | (mac_addr[2] << 16) |
+			(mac_addr[1] << 8) | (mac_addr[0])));
+}
+
+static VOID configure_mac_addr0_reg(UCHAR *mac_addr)
+{
+	MAC_MA0HR_RgWr(((mac_addr[5] << 8) | (mac_addr[4])));
+	MAC_MA0LR_RgWr(((mac_addr[3] << 24) | (mac_addr[2] << 16) |
+			(mac_addr[1] << 8) | (mac_addr[0])));
+}
+
+static VOID configure_rx_outer_vlan_stripping(u32 cmd)
+{
+	MAC_VLANTR_EVLS_UdfWr(cmd);
+}
+
+static VOID configure_rx_inner_vlan_stripping(u32 cmd)
+{
+	MAC_VLANTR_EIVLS_UdfWr(cmd);
+}
+
+static VOID configure_reg_vlan_control(struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data)
+{
+	USHORT vlan_id = desc_data->vlan_tag_id;
+	UINT vlan_control = desc_data->tx_vlan_tag_ctrl;
+
+	MAC_VLANTIRR_RgWr(((1 << 18) | (vlan_control << 16) | (vlan_id << 0)));
+}
+
+static VOID configure_desc_vlan_control(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	MAC_VLANTIRR_RgWr((1 << 20));
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT configure_mac_for_vlan_pkt(void)
+{
+
+	/* Enable VLAN Tag stripping always */
+	MAC_VLANTR_EVLS_UdfWr(0x3);
+	/* Enable operation on the outer VLAN Tag, if present */
+	MAC_VLANTR_ERIVLT_UdfWr(0);
+	/* Disable double VLAN Tag processing on TX and RX */
+	MAC_VLANTR_EDVLP_UdfWr(0);
+	/* Enable VLAN Tag in RX Status. */
+	MAC_VLANTR_EVLRXS_UdfWr(0x1);
+	/* Disable VLAN Type Check */
+	MAC_VLANTR_DOVLTC_UdfWr(0x1);
+
+	/* configure MAC to get VLAN Tag to be inserted/replaced from */
+	/* TX descriptor(context desc) */
+	MAC_VLANTIRR_VLTI_UdfWr(0x1);
+	/* insert/replace C_VLAN in 13th ans 14th bytes of transmitted frames */
+	MAC_VLANTIRR_CSVL_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_pblx8(UINT qInx, UINT val)
+{
+	DMA_CR_PBLx8_UdfWr(qInx, val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return INT
+* \retval programmed Tx PBL value
+*/
+
+static INT get_tx_pbl_val(UINT qInx)
+{
+	UINT tx_pbl;
+
+	DMA_TCR_PBL_UdfRd(qInx, tx_pbl);
+
+	return tx_pbl;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_tx_pbl_val(UINT qInx, UINT tx_pbl)
+{
+	DMA_TCR_PBL_UdfWr(qInx, tx_pbl);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return INT
+* \retval programmed Rx PBL value
+*/
+
+static INT get_rx_pbl_val(UINT qInx)
+{
+	UINT rx_pbl;
+
+	DMA_RCR_PBL_UdfRd(qInx, rx_pbl);
+
+	return rx_pbl;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_rx_pbl_val(UINT qInx, UINT rx_pbl)
+{
+	DMA_RCR_PBL_UdfWr(qInx, rx_pbl);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_axi_rorl_val(UINT axi_rorl)
+{
+	DMA_SBUS_RD_OSR_LMT_UdfWr(axi_rorl);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_axi_worl_val(UINT axi_worl)
+{
+	DMA_SBUS_WR_OSR_LMT_UdfWr(axi_worl);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_axi_pbl_val(UINT axi_pbl)
+{
+	UINT varDMA_SBUS;
+
+	DMA_SBUS_RgRd(varDMA_SBUS);
+	varDMA_SBUS &= ~DMA_SBUS_AXI_PBL_MASK;
+	varDMA_SBUS |= axi_pbl;
+	DMA_SBUS_RgWr(varDMA_SBUS);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_incr_incrx_mode(UINT val)
+{
+	DMA_SBUS_UNDEF_FB_UdfWr(val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_osf_mode(UINT qInx, UINT val)
+{
+	DMA_TCR_OSP_UdfWr(qInx, val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_rsf_mode(UINT qInx, UINT val)
+{
+	//if (qInx == 0) {
+		//MTL_Q0ROMR_RSF_UdfWr(val);
+	//}
+	//else {
+		MTL_QROMR_RSF_UdfWr(qInx, val);
+	//}
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_tsf_mode(UINT qInx, UINT val)
+{
+	MTL_QTOMR_TSF_UdfWr(qInx, val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_rx_threshold(UINT qInx, UINT val)
+{
+	MTL_QROMR_RTC_UdfWr(qInx, val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_tx_threshold(UINT qInx, UINT val)
+{
+	MTL_QTOMR_TTC_UdfWr(qInx, val);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT config_rx_watchdog_timer(UINT qInx, u32 riwt)
+{
+	DMA_RIWTR_RWT_UdfWr(qInx, riwt);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_magic_pmt_operation(void)
+{
+	MAC_PMTCSR_MGKPKTEN_UdfWr(0x1);
+	MAC_PMTCSR_PWRDWN_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_magic_pmt_operation(void)
+{
+	UINT varPMTCSR_PWRDWN;
+
+	MAC_PMTCSR_MGKPKTEN_UdfWr(0x0);
+	MAC_PMTCSR_PWRDWN_UdfRd(varPMTCSR_PWRDWN);
+	if (varPMTCSR_PWRDWN == 0x1) {
+		MAC_PMTCSR_PWRDWN_UdfWr(0x0);
+	}
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_remote_pmt_operation(void)
+{
+	MAC_PMTCSR_RWKPKTEN_UdfWr(0x1);
+	MAC_PMTCSR_PWRDWN_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_remote_pmt_operation(void)
+{
+	UINT varPMTCSR_PWRDWN;
+
+	MAC_PMTCSR_RWKPKTEN_UdfWr(0x0);
+	MAC_PMTCSR_PWRDWN_UdfRd(varPMTCSR_PWRDWN);
+	if (varPMTCSR_PWRDWN == 0x1) {
+		MAC_PMTCSR_PWRDWN_UdfWr(0x0);
+	}
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT configure_rwk_filter_registers(UINT *value, UINT count)
+{
+	UINT i;
+
+	MAC_PMTCSR_RWKFILTRST_UdfWr(1);
+	for (i = 0; i < count; i++)
+		MAC_RWPFFR_RgWr(value[i]);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_tx_flow_ctrl(UINT qInx)
+{
+
+	MAC_QTFCR_TFE_UdfWr(qInx, 0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_tx_flow_ctrl(UINT qInx)
+{
+
+	MAC_QTFCR_TFE_UdfWr(qInx, 1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_rx_flow_ctrl(void)
+{
+
+	MAC_RFCR_RFE_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_rx_flow_ctrl(void)
+{
+
+	MAC_RFCR_RFE_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT stop_dma_rx(UINT qInx)
+{
+  ULONG retryCount = 10;
+  ULONG vy_count;
+  volatile ULONG varDMA_DSR0;
+  volatile ULONG varDMA_DSR1;
+  volatile ULONG varDMA_DSR2;
+
+  /* issue Rx dma stop command */
+  DMA_RCR_ST_UdfWr(qInx, 0);
+
+  /* wait for Rx DMA to stop, ie wait till Rx DMA
+   * goes in either Running or Suspend state.
+   * */
+  if (qInx == 0) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 0 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS0_LPOS, DMA_DSR0_RPS0_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS0_LPOS, DMA_DSR0_RPS0_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS0_LPOS, DMA_DSR0_RPS0_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 1) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 1 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS1_LPOS, DMA_DSR0_RPS1_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS1_LPOS, DMA_DSR0_RPS1_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS1_LPOS, DMA_DSR0_RPS1_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 2) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 2 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS2_LPOS, DMA_DSR0_RPS2_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS2_LPOS, DMA_DSR0_RPS2_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR0, DMA_DSR0_RPS2_LPOS, DMA_DSR0_RPS2_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 3) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 3 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS3_LPOS, DMA_DSR1_RPS3_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS3_LPOS, DMA_DSR1_RPS3_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS3_LPOS, DMA_DSR1_RPS3_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 4) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 4 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS4_LPOS, DMA_DSR1_RPS4_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS4_LPOS, DMA_DSR1_RPS4_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS4_LPOS, DMA_DSR1_RPS4_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 5) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 5 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS5_LPOS, DMA_DSR1_RPS5_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS5_LPOS, DMA_DSR1_RPS5_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS5_LPOS, DMA_DSR1_RPS5_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 6) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 6 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS6_LPOS, DMA_DSR1_RPS6_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS6_LPOS, DMA_DSR1_RPS6_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR1, DMA_DSR1_RPS6_LPOS, DMA_DSR1_RPS6_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 7) {
+
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+        printk(KERN_ALERT "ERROR: Rx Channel 7 stop failed, DSR0 = %#lx\n",
+			varDMA_DSR2);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR2_RgRd(varDMA_DSR2);
+      if ((GET_VALUE(varDMA_DSR2, DMA_DSR2_RPS7_LPOS, DMA_DSR2_RPS7_HPOS) == 0x3)
+	|| (GET_VALUE(varDMA_DSR2, DMA_DSR2_RPS7_LPOS, DMA_DSR2_RPS7_HPOS) == 0x4)
+	|| (GET_VALUE(varDMA_DSR2, DMA_DSR2_RPS7_LPOS, DMA_DSR2_RPS7_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  }
+
+  return Y_SUCCESS;
+}
+
+
+/*!
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT start_dma_rx(UINT qInx)
+{
+
+  DMA_RCR_ST_UdfWr(qInx, 0x1);
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT stop_dma_tx(UINT qInx)
+{
+  ULONG retryCount = 10;
+  ULONG vy_count;
+  volatile ULONG varDMA_DSR0;
+  volatile ULONG varDMA_DSR1;
+  volatile ULONG varDMA_DSR2;
+
+  /* issue Tx dma stop command */
+  DMA_TCR_ST_UdfWr(qInx, 0);
+
+  /* wait for Tx DMA to stop, ie wait till Tx DMA
+   * goes in Suspend state or stopped state.
+   */
+  if (qInx == 0) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 0 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS0_LPOS, DMA_DSR0_TPS0_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS0_LPOS, DMA_DSR0_TPS0_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 1) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 1 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS1_LPOS, DMA_DSR0_TPS1_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS1_LPOS, DMA_DSR0_TPS1_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 2) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 2 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR0);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR0_RgRd(varDMA_DSR0);
+      if ((GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS2_LPOS, DMA_DSR0_TPS2_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR0, DMA_DSR0_TPS2_LPOS, DMA_DSR0_TPS2_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 3) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 3 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS3_LPOS, DMA_DSR1_TPS3_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS3_LPOS, DMA_DSR1_TPS3_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 4) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 4 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS4_LPOS, DMA_DSR1_TPS4_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS4_LPOS, DMA_DSR1_TPS4_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 5) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 5 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS5_LPOS, DMA_DSR1_TPS5_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS5_LPOS, DMA_DSR1_TPS5_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 6) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 6 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR1);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR1_RgRd(varDMA_DSR1);
+      if ((GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS6_LPOS, DMA_DSR1_TPS6_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR1, DMA_DSR1_TPS6_LPOS, DMA_DSR1_TPS6_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  } else if (qInx == 7) {
+    /*Poll*/
+    vy_count = 0;
+    while(1){
+      if(vy_count > retryCount) {
+	printk(KERN_ALERT "ERROR: Channel 7 stop failed, DSR0 = %lx\n",
+	  varDMA_DSR2);
+        return -Y_FAILURE;
+      }
+
+      DMA_DSR2_RgRd(varDMA_DSR2);
+      if ((GET_VALUE(varDMA_DSR2, DMA_DSR2_TPS7_LPOS, DMA_DSR2_TPS7_HPOS) == 0x6) ||
+        (GET_VALUE(varDMA_DSR2, DMA_DSR2_TPS7_LPOS, DMA_DSR2_TPS7_HPOS) == 0x0)) {
+        break;
+      }
+      vy_count++;
+      mdelay(1);
+    }
+  }
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \param[in] qInx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT start_dma_tx(UINT qInx)
+{
+
+  DMA_TCR_ST_UdfWr(qInx, 0x1);
+
+  return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT stop_mac_tx_rx(void)
+{
+	ULONG varMAC_MCR;
+
+	MAC_MCR_RgRd(varMAC_MCR);
+	varMAC_MCR = varMAC_MCR & (ULONG) (0xffffff7c);
+	varMAC_MCR = varMAC_MCR | ((0) << 1) | ((0) << 0);
+	MAC_MCR_RgWr(varMAC_MCR);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT start_mac_tx_rx(void)
+{
+	ULONG varMAC_MCR;
+
+	MAC_MCR_RgRd(varMAC_MCR);
+	varMAC_MCR = varMAC_MCR & (ULONG) (0xffffff7c);
+	varMAC_MCR = varMAC_MCR | ((0x1) << 1) | ((0x1) << 0);
+	MAC_MCR_RgWr(varMAC_MCR);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \brief This sequence is used to enable DMA interrupts
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_dma_interrupts(UINT qInx)
+{
+	UINT tmp;
+	ULONG varDMA_SR;
+	ULONG varDMA_IER;
+
+	/* clear all the interrupts which are set */
+	DMA_SR_RgRd(qInx, varDMA_SR);
+	tmp = varDMA_SR;
+	DMA_SR_RgWr(qInx, tmp);
+	/* Enable following interrupts for Queue 0 */
+	/* TXSE - Transmit Stoppped Enable */
+	/* RIE - Receive Interrupt Enable */
+	/* RBUE - Receive Buffer Unavailable Enable  */
+	/* RSE - Receive Stoppped Enable */
+	/* AIE - Abnormal Interrupt Summary Enable */
+	/* NIE - Normal Interrupt Summary Enable */
+	/* FBE - Fatal Bus Error Enable */
+	DMA_IER_RgRd(qInx, varDMA_IER);
+	varDMA_IER = varDMA_IER & (ULONG) (0x2e00);
+	varDMA_IER = varDMA_IER | ((0x1) << 1) |
+	    ((0x1) << 6) | ((0x1) << 7) | ((0x1) << 8) | ((0x1) << 15) |
+	    ((0x1) << 16) | ((0x1) << 12);
+#ifndef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+	/* TIE - Transmit Interrupt Enable */
+	/* TBUE - Transmit Buffer Unavailable Enable */
+	varDMA_IER |= ((0x1) << 0) | ((0x1) << 2);
+#endif
+	DMA_IER_RgWr(qInx, varDMA_IER);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \brief This sequence is used to configure the MAC registers for
+* GMII-1000Mbps speed
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_gmii_speed(void)
+{
+
+	MAC_MCR_PS_UdfWr(0);
+	MAC_MCR_FES_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the MAC registers for
+* MII-10Mpbs speed
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_mii_speed_10(void)
+{
+
+	MAC_MCR_PS_UdfWr(0x1);
+	MAC_MCR_FES_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the MAC registers for
+* MII-100Mpbs speed
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_mii_speed_100(void)
+{
+
+	MAC_MCR_PS_UdfWr(0x1);
+	MAC_MCR_FES_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the MAC registers for
+* half duplex mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_half_duplex(void)
+{
+
+	MAC_MCR_DM_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the MAC registers for
+* full duplex mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_full_duplex(void)
+{
+
+	MAC_MCR_DM_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the device in list of
+* multicast mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_multicast_list_mode(void)
+{
+
+	MAC_MPFR_HMC_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the device in unicast mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_unicast_mode(void)
+{
+
+	MAC_MPFR_HUC_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the device in all multicast mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_all_multicast_mode(void)
+{
+
+	MAC_MPFR_PM_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to configure the device in promiscuous mode
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT set_promiscuous_mode(void)
+{
+
+	MAC_MPFR_PR_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to write into phy registers
+* \param[in] phy_id
+* \param[in] phy_reg
+* \param[in] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT write_phy_regs(INT phy_id, INT phy_reg, INT phy_reg_data)
+{
+	ULONG retryCount = 1000;
+	ULONG vy_count;
+	volatile ULONG varMAC_GMIIAR;
+
+	/* wait for any previous MII read/write operation to complete */
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+		if (GET_VALUE(varMAC_GMIIAR, MAC_GMIIAR_GB_LPOS, MAC_GMIIAR_GB_HPOS) == 0) {
+			break;
+		}
+	}
+	/* write the data */
+	MAC_GMIIDR_GD_UdfWr(phy_reg_data);
+	/* initiate the MII write operation by updating desired */
+	/* phy address/id (0 - 31) */
+	/* phy register offset */
+	/* CSR Clock Range (20 - 35MHz) */
+	/* Select write operation */
+	/* set busy bit */
+	MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+	varMAC_GMIIAR = varMAC_GMIIAR & (ULONG) (0x12);
+	varMAC_GMIIAR =
+	    varMAC_GMIIAR | ((phy_id) << 21) | ((phy_reg) << 16) | ((0x2) << 8)
+	    | ((0x1) << 2) | ((0x1) << 0);
+	MAC_GMIIAR_RgWr(varMAC_GMIIAR);
+
+	/*DELAY IMPLEMENTATION USING udelay() */
+	udelay(10);
+	/* wait for MII write operation to complete */
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+		if (GET_VALUE(varMAC_GMIIAR, MAC_GMIIAR_GB_LPOS, MAC_GMIIAR_GB_HPOS) == 0) {
+			break;
+		}
+	}
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to read the phy registers
+* \param[in] phy_id
+* \param[in] phy_reg
+* \param[out] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT read_phy_regs(INT phy_id, INT phy_reg, INT *phy_reg_data)
+{
+	ULONG retryCount = 1000;
+	ULONG vy_count;
+	volatile ULONG varMAC_GMIIAR;
+	ULONG varMAC_GMIIDR;
+
+	/* wait for any previous MII read/write operation to complete */
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+		if (GET_VALUE(varMAC_GMIIAR, MAC_GMIIAR_GB_LPOS, MAC_GMIIAR_GB_HPOS) == 0) {
+			break;
+		}
+	}
+	/* initiate the MII read operation by updating desired */
+	/* phy address/id (0 - 31) */
+	/* phy register offset */
+	/* CSR Clock Range (20 - 35MHz) */
+	/* Select read operation */
+	/* set busy bit */
+	MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+	varMAC_GMIIAR = varMAC_GMIIAR & (ULONG) (0x12);
+	varMAC_GMIIAR =
+	    varMAC_GMIIAR | ((phy_id) << 21) | ((phy_reg) << 16) | ((0x2) << 8)
+	    | ((0x3) << 2) | ((0x1) << 0);
+	MAC_GMIIAR_RgWr(varMAC_GMIIAR);
+
+	/*DELAY IMPLEMENTATION USING udelay() */
+	udelay(10);
+	/* wait for MII write operation to complete */
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		MAC_GMIIAR_RgRd(varMAC_GMIIAR);
+		if (GET_VALUE(varMAC_GMIIAR, MAC_GMIIAR_GB_LPOS, MAC_GMIIAR_GB_HPOS) == 0) {
+			break;
+		}
+	}
+	/* read the data */
+	MAC_GMIIDR_RgRd(varMAC_GMIIDR);
+	*phy_reg_data =
+	    GET_VALUE(varMAC_GMIIDR, MAC_GMIIDR_GD_LPOS, MAC_GMIIDR_GD_HPOS);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to check whether transmitted pkts have
+* fifo under run loss error or not, returns 1 if fifo under run error
+* else returns 0
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT tx_fifo_underrun(t_TX_NORMAL_DESC *txdesc)
+{
+	UINT varTDES3;
+
+	/* check TDES3.UF bit */
+	TX_NORMAL_DESC_TDES3_Ml_Rd(txdesc->TDES3, varTDES3);
+	if ((varTDES3 & 0x4) == 0x4) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to check whether transmitted pkts have
+* carrier loss error or not, returns 1 if carrier loss error else returns 0
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT tx_carrier_lost_error(t_TX_NORMAL_DESC *txdesc)
+{
+	UINT varTDES3;
+
+	/* check TDES3.LoC and TDES3.NC bits */
+	TX_NORMAL_DESC_TDES3_Ml_Rd(txdesc->TDES3, varTDES3);
+	if (((varTDES3 & 0x800) == 0x800) || ((varTDES3 & 0x400) == 0x400)) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to check whether transmission is aborted
+* or not returns 1 if transmission is aborted else returns 0
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT tx_aborted_error(t_TX_NORMAL_DESC *txdesc)
+{
+	UINT varTDES3;
+
+	/* check for TDES3.LC and TDES3.EC */
+	TX_NORMAL_DESC_TDES3_Ml_Rd(txdesc->TDES3, varTDES3);
+	if (((varTDES3 & 0x200) == 0x200) || ((varTDES3 & 0x100) == 0x100)) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to check whether the pkt transmitted is
+* successfull or not, returns 1 if transmission is success else returns 0
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT tx_complete(t_TX_NORMAL_DESC *txdesc)
+{
+	UINT varOWN;
+
+	TX_NORMAL_DESC_TDES3_OWN_Mlf_Rd(txdesc->TDES3, varOWN);
+	if (varOWN == 0) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to check whethet rx csum is enabled/disabled
+* returns 1 if rx csum is enabled else returns 0
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT get_rx_csum_status(void)
+{
+	ULONG varMAC_MCR;
+
+	MAC_MCR_RgRd(varMAC_MCR);
+	if (GET_VALUE(varMAC_MCR, MAC_MCR_IPC_LPOS, MAC_MCR_IPC_HPOS) == 0x1) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to disable the rx csum
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT disable_rx_csum(void)
+{
+
+	/* enable rx checksum */
+	MAC_MCR_IPC_UdfWr(0);
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to enable the rx csum
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT enable_rx_csum(void)
+{
+
+	/* enable rx checksum */
+	MAC_MCR_IPC_UdfWr(0x1);
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \brief This sequence is used to reinitialize the TX descriptor fields,
+* so that device can reuse the descriptors
+* \param[in] idx
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT tx_descriptor_reset(UINT idx, struct DWC_ETH_QOS_prv_data *pdata,
+				UINT qInx)
+{
+	struct s_TX_NORMAL_DESC *TX_NORMAL_DESC =
+		GET_TX_DESC_PTR(qInx, idx);
+
+	DBGPR("-->tx_descriptor_reset\n");
+
+	/* update buffer 1 address pointer to zero */
+	TX_NORMAL_DESC_TDES0_Ml_Wr(TX_NORMAL_DESC->TDES0, 0);
+	/* update buffer 2 address pointer to zero */
+	TX_NORMAL_DESC_TDES1_Ml_Wr(TX_NORMAL_DESC->TDES1, 0);
+	/* set all other control bits (IC, TTSE, B2L & B1L) to zero */
+	TX_NORMAL_DESC_TDES2_Ml_Wr(TX_NORMAL_DESC->TDES2, 0);
+	/* set all other control bits (OWN, CTXT, FD, LD, CPC, CIC etc) to zero */
+	TX_NORMAL_DESC_TDES3_Ml_Wr(TX_NORMAL_DESC->TDES3, 0);
+
+	DBGPR("<--tx_descriptor_reset\n");
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief This sequence is used to reinitialize the RX descriptor fields,
+* so that device can reuse the descriptors
+* \param[in] idx
+* \param[in] pdata
+*/
+
+static void rx_descriptor_reset(UINT idx,
+				struct DWC_ETH_QOS_prv_data *pdata,
+				unsigned int inte,
+				UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_buffer *buffer = GET_RX_BUF_PTR(qInx, idx);
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, idx);
+
+	DBGPR("-->rx_descriptor_reset\n");
+
+	memset(RX_NORMAL_DESC, 0, sizeof(struct s_RX_NORMAL_DESC));
+	/* update buffer 1 address pointer */
+	RX_NORMAL_DESC_RDES0_Ml_Wr(RX_NORMAL_DESC->RDES0, buffer->dma);
+	/* set to zero */
+	RX_NORMAL_DESC_RDES1_Ml_Wr(RX_NORMAL_DESC->RDES1, 0);
+
+	if ((pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) ||
+			(pdata->rx_split_hdr == 1)) {
+		/* update buffer 2 address pointer */
+		RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, buffer->dma2);
+		/* set control bits - OWN, INTE, BUF1V and BUF2V */
+		RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3,
+					   (0x83000000 | inte));
+	} else {
+		/* set buffer 2 address pointer to zero */
+		RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, 0);
+		/* set control bits - OWN, INTE and BUF1V */
+		RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3,
+					   (0x81000000 | inte));
+	}
+
+	DBGPR("<--rx_descriptor_reset\n");
+}
+
+/*!
+* \brief This sequence is used to initialize the rx descriptors.
+* \param[in] pdata
+*/
+
+static void rx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata, UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_rx_buffer *buffer =
+	    GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC =
+	    GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
+	INT i;
+	INT start_index = rx_desc_data->cur_rx;
+	INT last_index;
+
+	DBGPR("-->rx_descriptor_init\n");
+
+	/* initialize all desc */
+
+	for (i = 0; i < RX_DESC_CNT; i++) {
+		memset(RX_NORMAL_DESC, 0, sizeof(struct s_RX_NORMAL_DESC));
+		/* update buffer 1 address pointer */
+		RX_NORMAL_DESC_RDES0_Ml_Wr(RX_NORMAL_DESC->RDES0, buffer->dma);
+		/* set to zero  */
+		RX_NORMAL_DESC_RDES1_Ml_Wr(RX_NORMAL_DESC->RDES1, 0);
+
+		if ((pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) ||
+			(pdata->rx_split_hdr == 1)) {
+			/* update buffer 2 address pointer */
+			RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2,
+						   buffer->dma2);
+			/* set control bits - OWN, INTE, BUF1V and BUF2V */
+			RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3,
+						   (0xc3000000));
+		} else {
+			/* set buffer 2 address pointer to zero */
+			RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, 0);
+			/* set control bits - OWN, INTE and BUF1V */
+			RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3,
+						   (0xc1000000));
+		}
+		buffer->inte = (1 << 30);
+
+		/* reconfigure INTE bit if RX watchdog timer is enabled */
+		if (rx_desc_data->use_riwt) {
+			if ((i % rx_desc_data->rx_coal_frames) != 0) {
+				UINT varRDES3 = 0;
+				RX_NORMAL_DESC_RDES3_Ml_Rd(RX_NORMAL_DESC->RDES3,
+					varRDES3);
+				/* reset INTE */
+				RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3,
+						(varRDES3 & ~(1 << 30)));
+				buffer->inte = 0;
+			}
+		}
+
+		INCR_RX_DESC_INDEX(rx_desc_data->cur_rx, 1);
+		RX_NORMAL_DESC =
+			GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
+		buffer = GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
+	}
+	/* update the total no of Rx descriptors count */
+	DMA_RDRLR_RgWr(qInx, (RX_DESC_CNT - 1));
+	/* update the Rx Descriptor Tail Pointer */
+	last_index = GET_CURRENT_RCVD_LAST_DESC_INDEX(start_index, 0);
+	DMA_RDTP_RPDR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, last_index));
+	/* update the starting address of desc chain/ring */
+	DMA_RDLAR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, start_index));
+
+	DBGPR("<--rx_descriptor_init\n");
+}
+
+/*!
+* \brief This sequence is used to initialize the tx descriptors.
+* \param[in] pdata
+*/
+
+static void tx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata,
+				UINT qInx)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
+		GET_TX_WRAPPER_DESC(qInx);
+	struct s_TX_NORMAL_DESC *TX_NORMAL_DESC =
+		GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	INT i;
+	INT start_index = tx_desc_data->cur_tx;
+
+	DBGPR("-->tx_descriptor_init\n");
+
+	/* initialze all descriptors. */
+
+	for (i = 0; i < TX_DESC_CNT; i++) {
+		/* update buffer 1 address pointer to zero */
+		TX_NORMAL_DESC_TDES0_Ml_Wr(TX_NORMAL_DESC->TDES0, 0);
+		/* update buffer 2 address pointer to zero */
+		TX_NORMAL_DESC_TDES1_Ml_Wr(TX_NORMAL_DESC->TDES1, 0);
+		/* set all other control bits (IC, TTSE, B2L & B1L) to zero */
+		TX_NORMAL_DESC_TDES2_Ml_Wr(TX_NORMAL_DESC->TDES2, 0);
+		/* set all other control bits (OWN, CTXT, FD, LD, CPC, CIC etc) to zero */
+		TX_NORMAL_DESC_TDES3_Ml_Wr(TX_NORMAL_DESC->TDES3, 0);
+
+		INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+		TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	}
+	/* update the total no of Tx descriptors count */
+	DMA_TDRLR_RgWr(qInx, (TX_DESC_CNT - 1));
+	/* update the starting address of desc chain/ring */
+	DMA_TDLAR_RgWr(qInx, GET_TX_DESC_DMA_ADDR(qInx, start_index));
+
+	DBGPR("<--tx_descriptor_init\n");
+}
+
+
+/*!
+* \brief This sequence is used to prepare tx descriptor for
+* packet transmission and issue the poll demand command to TxDMA
+*
+* \param[in] pdata
+*/
+
+static void pre_transmit(struct DWC_ETH_QOS_prv_data *pdata,
+				UINT qInx)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_tx_buffer *buffer =
+	    GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	struct s_TX_NORMAL_DESC *TX_NORMAL_DESC =
+	    GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	struct s_TX_CONTEXT_DESC *TX_CONTEXT_DESC =
+	    GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	UINT varcsum_enable;
+	UINT varvlan_pkt;
+	UINT varvt;
+	INT i;
+	INT start_index = tx_desc_data->cur_tx;
+	INT last_index, original_start_index = tx_desc_data->cur_tx;
+	struct s_tx_pkt_features *tx_pkt_features = GET_TX_PKT_FEATURES_PTR;
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	INT update_tail = 0;
+	UINT varQTDR;
+#endif
+	UINT vartso_enable = 0;
+	UINT varmss = 0;
+	UINT varpay_len = 0;
+	UINT vartcp_hdr_len = 0;
+	UINT varptp_enable = 0;
+	INT total_len = 0;
+
+	DBGPR("-->pre_transmit: qInx = %u\n", qInx);
+
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	if (qInx == 0)
+		MTL_Q0TDR_TXQSTS_UdfRd(varQTDR);
+	else
+		MTL_QTDR_TXQSTS_UdfRd(qInx, varQTDR);
+
+	/* No activity on MAC Tx-Fifo and fifo is empty */
+	if (0 == varQTDR) {
+		/* disable MAC Transmit */
+		MAC_MCR_TE_UdfWr(0);
+		update_tail = 1;
+	}
+#endif
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Rd(
+		tx_pkt_features->pkt_attributes, varvlan_pkt);
+	if (varvlan_pkt == 0x1) {
+		/* put vlan tag in contex descriptor and set other control
+		 * bits accordingly */
+		TX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Rd(tx_pkt_features->vlan_tag,
+						   varvt);
+		TX_CONTEXT_DESC_TDES3_VT_Mlf_Wr(TX_CONTEXT_DESC->TDES3, varvt);
+		TX_CONTEXT_DESC_TDES3_VLTV_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+		TX_CONTEXT_DESC_TDES3_CTXT_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+		TX_CONTEXT_DESC_TDES3_OWN_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+
+		original_start_index = tx_desc_data->cur_tx;
+		INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+		start_index = tx_desc_data->cur_tx;
+		TX_NORMAL_DESC =
+			GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+		buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	}
+#endif	/* DWC_ETH_QOS_ENABLE_VLAN_TAG */
+
+	/* prepare CONTEXT descriptor for TSO */
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_Mlf_Rd(
+		tx_pkt_features->pkt_attributes, vartso_enable);
+	if (vartso_enable && (tx_pkt_features->mss != tx_desc_data->default_mss)) {
+		/* get MSS and update */
+		TX_PKT_FEATURES_MSS_MSS_Mlf_Rd(tx_pkt_features->mss, varmss);
+		TX_CONTEXT_DESC_TDES2_MSS_Mlf_Wr(TX_CONTEXT_DESC->TDES2, varmss);
+		/* set MSS valid, CTXT and OWN bits */
+		TX_CONTEXT_DESC_TDES3_TCMSSV_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+		TX_CONTEXT_DESC_TDES3_CTXT_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+		TX_CONTEXT_DESC_TDES3_OWN_Mlf_Wr(TX_CONTEXT_DESC->TDES3, 0x1);
+
+		/* DMA uses the MSS value programed in DMA_CR if driver
+		 * doesn't provided the CONTEXT descriptor */
+		DMA_CR_MSS_UdfWr(qInx, tx_pkt_features->mss);
+
+		tx_desc_data->default_mss = tx_pkt_features->mss;
+
+		original_start_index = tx_desc_data->cur_tx;
+		INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+		start_index = tx_desc_data->cur_tx;
+		TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+		buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	}
+
+	/* update the first buffer pointer and length */
+	TX_NORMAL_DESC_TDES0_Ml_Wr(TX_NORMAL_DESC->TDES0, buffer->dma);
+	TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Wr(TX_NORMAL_DESC->TDES2, buffer->len);
+	if (buffer->dma2 != 0) {
+		/* update the second buffer pointer and length */
+		TX_NORMAL_DESC_TDES1_Ml_Wr(TX_NORMAL_DESC->TDES1, buffer->dma2);
+		TX_NORMAL_DESC_TDES2_B2L_Mlf_Wr(TX_NORMAL_DESC->TDES2, buffer->len2);
+	}
+
+	if (vartso_enable) {
+		/* update TCP payload length (only for the descriptor with FD set) */
+		TX_PKT_FEATURES_PAY_LEN_Ml_Rd(tx_pkt_features->pay_len, varpay_len);
+		/* TDES3[17:0] will be TCP payload length */
+		TX_NORMAL_DESC->TDES3 |= varpay_len;
+	} else {
+		/* update total length of packet */
+		GET_TX_TOT_LEN(GET_TX_BUF_PTR(qInx, 0), tx_desc_data->cur_tx,
+				GET_CURRENT_XFER_DESC_CNT(qInx), total_len);
+		TX_NORMAL_DESC_TDES3_FL_Mlf_Wr(TX_NORMAL_DESC->TDES3, total_len);
+	}
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	/* Insert a VLAN tag with a tag value programmed in MAC Reg 24 or
+	 * CONTEXT descriptor
+	 * */
+	if (tx_desc_data->vlan_tag_present && Y_FALSE == tx_desc_data->tx_vlan_tag_via_reg) {
+		//printk(KERN_ALERT "VLAN control info update via descriptor\n\n");
+		TX_NORMAL_DESC_TDES2_VTIR_Mlf_Wr(TX_NORMAL_DESC->TDES2,
+						 tx_desc_data->tx_vlan_tag_ctrl);
+	}
+#endif	/* DWC_ETH_QOS_ENABLE_VLAN_TAG */
+
+	/* Mark it as First Descriptor */
+	TX_NORMAL_DESC_TDES3_FD_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x1);
+	/* Enable CRC and Pad Insertion (NOTE: set this only
+	 * for FIRST descriptor) */
+	TX_NORMAL_DESC_TDES3_CPC_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0);
+	/* Mark it as NORMAL descriptor */
+	TX_NORMAL_DESC_TDES3_CTXT_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0);
+	/* Enable HW CSUM */
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_Mlf_Rd(tx_pkt_features->pkt_attributes,
+		varcsum_enable);
+	if (varcsum_enable == 0x1) {
+		TX_NORMAL_DESC_TDES3_CIC_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x3);
+	}
+	/* configure SA Insertion Control */
+	TX_NORMAL_DESC_TDES3_SAIC_Mlf_Wr(TX_NORMAL_DESC->TDES3,
+					 pdata->tx_sa_ctrl_via_desc);
+	if (vartso_enable) {
+		/* set TSE bit */
+		TX_NORMAL_DESC_TDES3_TSE_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x1);
+
+		/* update tcp data offset or tcp hdr len */
+		TX_PKT_FEATURES_TCP_HDR_LEN_Ml_Rd(tx_pkt_features->tcp_hdr_len, vartcp_hdr_len);
+		/* convert to bit value */
+		vartcp_hdr_len = vartcp_hdr_len/4;
+		TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_Mlf_Wr(TX_NORMAL_DESC->TDES3, vartcp_hdr_len);
+	}
+
+	/* enable timestamping */
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_Mlf_Rd(tx_pkt_features->pkt_attributes, varptp_enable);
+	if (varptp_enable) {
+		TX_NORMAL_DESC_TDES2_TTSE_Mlf_Wr(TX_NORMAL_DESC->TDES2, 0x1);
+	}
+
+	INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+	TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+
+	for (i = 1; i < GET_CURRENT_XFER_DESC_CNT(qInx); i++) {
+		/* update the first buffer pointer and length */
+		TX_NORMAL_DESC_TDES0_Ml_Wr(TX_NORMAL_DESC->TDES0, buffer->dma);
+		TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Wr(TX_NORMAL_DESC->TDES2, buffer->len);
+		if (buffer->dma2 != 0) {
+			/* update the second buffer pointer and length */
+			TX_NORMAL_DESC_TDES1_Ml_Wr(TX_NORMAL_DESC->TDES1, buffer->dma2);
+			TX_NORMAL_DESC_TDES2_B2L_Mlf_Wr(TX_NORMAL_DESC->TDES2, buffer->len2);
+		}
+
+		/* set own bit */
+		TX_NORMAL_DESC_TDES3_OWN_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x1);
+		/* Mark it as NORMAL descriptor */
+		TX_NORMAL_DESC_TDES3_CTXT_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0);
+
+		INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+		TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+		buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	}
+	/* Mark it as LAST descriptor */
+	last_index =
+		GET_CURRENT_XFER_LAST_DESC_INDEX(qInx, start_index, 0);
+	TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, last_index);
+	TX_NORMAL_DESC_TDES3_LD_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x1);
+	/* set Interrupt on Completion for last descriptor */
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	pdata->mac_enable_count += 1;
+	if ((pdata->mac_enable_count % pdata->drop_tx_pktburstcnt) == 0)
+		TX_NORMAL_DESC_TDES2_IC_Mlf_Wr(TX_NORMAL_DESC->TDES2, 0x1);
+#else
+	TX_NORMAL_DESC_TDES2_IC_Mlf_Wr(TX_NORMAL_DESC->TDES2, 0x1);
+#endif
+
+	/* set OWN bit of FIRST descriptor at end to avoid race condition */
+	TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, start_index);
+	TX_NORMAL_DESC_TDES3_OWN_Mlf_Wr(TX_NORMAL_DESC->TDES3, 0x1);
+
+#ifdef DWC_ETH_QOS_ENABLE_TX_DESC_DUMP
+	dump_tx_desc(pdata, original_start_index, (tx_desc_data->cur_tx - 1),
+			1, qInx);
+#endif
+
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	/* updating descriptor tail pointer for DMA Transmit under two conditions,
+	 * 1. if burst number of packets are present in descriptor list
+	 * 2. MAC has no activity on Tx fifo
+	 * */
+	if ((pdata->mac_enable_count >= pdata->drop_tx_pktburstcnt)
+		&& (1 == update_tail)) {
+		pdata->mac_enable_count -= pdata->drop_tx_pktburstcnt;
+		/* issue a poll command to Tx DMA by writing address
+		 * of next immediate free descriptor */
+		last_index = GET_CURRENT_XFER_LAST_DESC_INDEX(qInx, start_index, 1);
+		DMA_TDTP_TPDR_RgWr(qInx,
+				GET_TX_DESC_DMA_ADDR(qInx, last_index));
+	}
+#else
+	/* issue a poll command to Tx DMA by writing address
+	 * of next immediate free descriptor */
+	last_index = GET_CURRENT_XFER_LAST_DESC_INDEX(qInx, start_index, 1);
+	DMA_TDTP_TPDR_RgWr(qInx,
+			GET_TX_DESC_DMA_ADDR(qInx, last_index));
+#endif
+
+	if (pdata->eee_enabled) {
+		/* restart EEE timer */
+		mod_timer(&pdata->eee_ctrl_timer,
+			DWC_ETH_QOS_LPI_TIMER(DWC_ETH_QOS_DEFAULT_LPI_TIMER));
+	}
+  
+	DBGPR("<--pre_transmit\n");
+}
+
+/*!
+* \brief This sequence is used to read data from device,
+* it checks whether data is good or bad and updates the errors appropriately
+* \param[in] pdata
+*/
+
+static void device_read(struct DWC_ETH_QOS_prv_data *pdata, UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC =
+	    GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
+	UINT varOWN;
+	UINT varES;
+	struct DWC_ETH_QOS_rx_buffer *buffer =
+	    GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
+	UINT varRS1V;
+	UINT varIPPE;
+	UINT varIPCB;
+	UINT varIPHE;
+	struct s_rx_pkt_features *rx_pkt_features = GET_RX_PKT_FEATURES_PTR;
+	UINT varRS0V;
+	UINT varLT;
+	UINT varRDES0;
+	UINT varOE;
+	struct s_rx_error_counters *rx_error_counters =
+	    GET_RX_ERROR_COUNTERS_PTR;
+	UINT varCE;
+	UINT varRE;
+	UINT varLD;
+
+	DBGPR("-->device_read: cur_rx = %d\n", rx_desc_data->cur_rx);
+
+	/* check for data availability */
+	RX_NORMAL_DESC_RDES3_OWN_Mlf_Rd(RX_NORMAL_DESC->RDES3, varOWN);
+	if (varOWN == 0) {
+		/* check whether it is good packet or bad packet */
+		RX_NORMAL_DESC_RDES3_ES_Mlf_Rd(RX_NORMAL_DESC->RDES3, varES);
+		RX_NORMAL_DESC_RDES3_LD_Mlf_Rd(RX_NORMAL_DESC->RDES3, varLD);
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+		/* Synopsys testing and debugging purposes only */
+		if (varES == 1 && varLD == 1) {
+			varES = 0;
+			DBGPR("Forwarding error packets as good packets to stack\n");
+		}
+#endif
+		if ((varES == 0) && (varLD == 1)) {
+			/* get the packet length */
+			RX_NORMAL_DESC_RDES3_FL_Mlf_Rd(RX_NORMAL_DESC->RDES3, buffer->len);
+			RX_NORMAL_DESC_RDES3_RS1V_Mlf_Rd(RX_NORMAL_DESC->RDES3, varRS1V);
+			if (varRS1V == 0x1) {
+				/* check whether device has done csum correctly or not */
+				RX_NORMAL_DESC_RDES1_IPPE_Mlf_Rd(RX_NORMAL_DESC->RDES1, varIPPE);
+				RX_NORMAL_DESC_RDES1_IPCB_Mlf_Rd(RX_NORMAL_DESC->RDES1, varIPCB);
+				RX_NORMAL_DESC_RDES1_IPHE_Mlf_Rd(RX_NORMAL_DESC->RDES1, varIPHE);
+				if ((varIPPE == 0) && (varIPCB == 0) && (varIPHE == 0)) {
+					/* IPC Checksum done */
+					RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_Mlf_Wr(
+						rx_pkt_features->pkt_attributes, 0x1);
+				}
+			}
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+			RX_NORMAL_DESC_RDES3_RS0V_Mlf_Rd(RX_NORMAL_DESC->RDES3,
+							 varRS0V);
+			if (varRS0V == 0x1) {
+				/*  device received frame with VLAN Tag or double VLAN Tag ? */
+				RX_NORMAL_DESC_RDES3_LT_Mlf_Rd(RX_NORMAL_DESC->RDES3, varLT);
+				if ((varLT == 0x4) || (varLT == 0x5)) {
+					RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Wr(
+						rx_pkt_features->pkt_attributes, 0x1);
+					/* get the VLAN Tag */
+					RX_NORMAL_DESC_RDES0_Ml_Rd(RX_NORMAL_DESC->RDES0, varRDES0);
+					RX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Wr(rx_pkt_features->vlan_tag,
+						(varRDES0 & 0xffff));
+				}
+			}
+#endif
+		} else {
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
+			dump_rx_desc(qInx, RX_NORMAL_DESC, rx_desc_data->cur_rx);
+#endif
+			/* not a good packet, hence check for appropriate errors. */
+			RX_NORMAL_DESC_RDES3_OE_Mlf_Rd(RX_NORMAL_DESC->RDES3, varOE);
+			if (varOE == 1) {
+				RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_Mlf_Wr(rx_error_counters->rx_errors, 1);
+			}
+			RX_NORMAL_DESC_RDES3_CE_Mlf_Rd(RX_NORMAL_DESC->RDES3, varCE);
+			if (varCE == 1) {
+				RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_Mlf_Wr(rx_error_counters->rx_errors, 1);
+			}
+			RX_NORMAL_DESC_RDES3_RE_Mlf_Rd(RX_NORMAL_DESC->RDES3, varRE);
+			if (varRE == 1) {
+				RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_Mlf_Wr(rx_error_counters->rx_errors, 1);
+			}
+			RX_NORMAL_DESC_RDES3_LD_Mlf_Rd(RX_NORMAL_DESC->RDES3, varLD);
+			if (varRE == 0) {
+				RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_Mlf_Wr(rx_error_counters->rx_errors, 1);
+			}
+		}
+	}
+
+	DBGPR("<--device_read: cur_rx = %d\n", rx_desc_data->cur_rx);
+}
+
+static void update_rx_tail_ptr(unsigned int qInx, unsigned int dma_addr)
+{
+	DMA_RDTP_RPDR_RgWr(qInx, dma_addr);
+}
+
+/*!
+* \brief This sequence is used to check whether CTXT bit is
+* set or not returns 1 if CTXT is set else returns zero
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT get_tx_descriptor_ctxt(t_TX_NORMAL_DESC *txdesc)
+{
+	ULONG varCTXT;
+
+	/* check TDES3.CTXT bit */
+	TX_NORMAL_DESC_TDES3_CTXT_Mlf_Rd(txdesc->TDES3, varCTXT);
+	if (varCTXT == 1) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief This sequence is used to check whether LD bit is set or not
+* returns 1 if LD is set else returns zero
+* \param[in] txdesc
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static INT get_tx_descriptor_last(t_TX_NORMAL_DESC *txdesc)
+{
+	ULONG varLD;
+
+	/* check TDES3.LD bit */
+	TX_NORMAL_DESC_TDES3_LD_Mlf_Rd(txdesc->TDES3, varLD);
+	if (varLD == 1) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*!
+* \brief Save and restore device interrupt status
+* \details API used to save and restore the status of device interrupts.
+*
+* \param[in] int_state   - enum value for the ste, eSAVE or eRESTORE
+* \return none
+*/
+
+static void save_interrupt_status(e_int_state int_state)
+{
+	static UINT R0;
+	static UINT W0;
+
+	if (int_state == eSAVE) {
+		DMA_IER0_RgRd(R0);
+		R0 &= 0x11c7;
+	} else {
+		DMA_IER0_RgRd(W0);
+		W0 |= R0;
+		DMA_IER0_RgWr(W0);
+	}
+}
+
+/*!
+* \brief Enables the device interrupts
+* \details API that can be used to enable the device level interrupts
+*
+* \param[in] int_id      - enum value for the interrupt
+* \return returns integer
+* \retval Y_SUCCESS
+* \retval -Y_FAILURE
+*/
+
+static INT DWC_ETH_QOS_enable_interrupt(e_DWC_ETH_QOS_int_id int_id)
+{
+
+	switch (int_id) {
+	case eDWC_ETH_QOS_DMA_ISR_DC0IS:
+		DMA_IER0_TIE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TI:
+		DMA_IER0_TIE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TPS:
+		DMA_IER0_TXSE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TBU:
+		DMA_IER0_TBUE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RI:
+		DMA_IER0_RIE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RBU:
+		DMA_IER0_RBUE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RPS:
+		DMA_IER0_RSE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_FBE:
+		DMA_IER0_FBEE_UdfWr(1);
+		break;
+	case eDWC_ETH_QOS_ALL:
+		save_interrupt_status(eRESTORE);
+		break;
+	default:
+		return -Y_FAILURE;
+	}
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief Disables the device interrupts
+* \details API that can be used to disable the device level interrupts.
+*
+* \param[in] int_id      - enum value for the interrupt
+* \return returns integer
+* \retval Y_SUCCESS
+* \retval -Y_FAILURE
+*/
+
+static INT DWC_ETH_QOS_disable_interrupt(e_DWC_ETH_QOS_int_id int_id)
+{
+	ULONG var;
+
+	switch (int_id) {
+	case eDWC_ETH_QOS_DMA_ISR_DC0IS:
+		DMA_IER0_TIE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TI:
+		DMA_IER0_TIE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TPS:
+		DMA_IER0_TXSE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_TBU:
+		DMA_IER0_TBUE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RI:
+		DMA_IER0_RIE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RBU:
+		DMA_IER0_RBUE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_RPS:
+		DMA_IER0_RSE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_DMA_SR0_FBE:
+		DMA_IER0_FBEE_UdfWr(0);
+		break;
+	case eDWC_ETH_QOS_ALL:
+		save_interrupt_status(eSAVE);
+
+		DMA_IER0_RgRd(var);
+		var = (var & (0xffffee38)) | (0);
+		DMA_IER0_RgWr(var);
+		break;
+	default:
+		return -Y_FAILURE;
+	}
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief Exit routine
+* \details Exit function that unregisters the device, deallocates buffers,
+* unbinds the driver from controlling the device etc.
+*
+* \return Returns successful execution of the routine
+* \retval Y_SUCCESS Function executed successfully
+*/
+
+static INT DWC_ETH_QOS_yexit(void)
+{
+	ULONG retryCount = 1000;
+	ULONG vy_count;
+	volatile ULONG varDMA_BMR;
+
+	DBGPR("-->DWC_ETH_QOS_yexit\n");
+
+	/*issue a software reset */
+	DMA_BMR_SWR_UdfWr(0x1);
+	/*DELAY IMPLEMENTATION USING udelay() */
+	udelay(10);
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		DMA_BMR_RgRd(varDMA_BMR);
+		if (GET_VALUE(varDMA_BMR, DMA_BMR_SWR_LPOS, DMA_BMR_SWR_HPOS) == 0) {
+			break;
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_yexit\n");
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \details This API will calculate per queue FIFO size.
+*
+* \param[in] fifo_size - total fifo size in h/w register
+* \param[in] queue_count - total queue count
+*
+* \return returns integer
+* \retval - fifo size per queue.
+*/
+static UINT calculate_per_queue_fifo(ULONG fifo_size, UCHAR queue_count)
+{
+	ULONG q_fifo_size = 0;	/* calculated fifo size per queue */
+	ULONG p_fifo = eDWC_ETH_QOS_256; /* per queue fifo size programmable value */
+
+	/* calculate Tx/Rx fifo share per queue */
+	switch (fifo_size) {
+	case 0:
+		q_fifo_size = FIFO_SIZE_B(128);
+		break;
+	case 1:
+		q_fifo_size = FIFO_SIZE_B(256);
+		break;
+	case 2:
+		q_fifo_size = FIFO_SIZE_B(512);
+		break;
+	case 3:
+		q_fifo_size = FIFO_SIZE_KB(1);
+		break;
+	case 4:
+		q_fifo_size = FIFO_SIZE_KB(2);
+		break;
+	case 5:
+		q_fifo_size = FIFO_SIZE_KB(4);
+		break;
+	case 6:
+		q_fifo_size = FIFO_SIZE_KB(8);
+		break;
+	case 7:
+		q_fifo_size = FIFO_SIZE_KB(16);
+		break;
+	case 8:
+		q_fifo_size = FIFO_SIZE_KB(32);
+		break;
+	case 9:
+		q_fifo_size = FIFO_SIZE_KB(64);
+		break;
+	case 10:
+		q_fifo_size = FIFO_SIZE_KB(128);
+		break;
+	case 11:
+		q_fifo_size = FIFO_SIZE_KB(256);
+		break;
+	}
+
+	q_fifo_size = q_fifo_size/queue_count;
+
+	if (q_fifo_size >= FIFO_SIZE_KB(32)) {
+		p_fifo = eDWC_ETH_QOS_32k;
+	} else if (q_fifo_size >= FIFO_SIZE_KB(16)) {
+		p_fifo = eDWC_ETH_QOS_16k;
+	} else if (q_fifo_size >= FIFO_SIZE_KB(8)) {
+		p_fifo = eDWC_ETH_QOS_8k;
+	} else if (q_fifo_size >= FIFO_SIZE_KB(4)) {
+		p_fifo = eDWC_ETH_QOS_4k;
+	} else if (q_fifo_size >= FIFO_SIZE_KB(2)) {
+		p_fifo = eDWC_ETH_QOS_2k;
+	} else if (q_fifo_size >= FIFO_SIZE_KB(1)) {
+		p_fifo = eDWC_ETH_QOS_1k;
+	} else if (q_fifo_size >= FIFO_SIZE_B(512)) {
+		p_fifo = eDWC_ETH_QOS_512;
+	} else if (q_fifo_size >= FIFO_SIZE_B(256)) {
+		p_fifo = eDWC_ETH_QOS_256;
+	}
+
+	return p_fifo;
+}
+
+static INT configure_mtl_queue(UINT qInx, struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_tx_queue *queue_data = GET_TX_QUEUE_PTR(qInx);
+	ULONG retryCount = 1000;
+	ULONG vy_count;
+	volatile ULONG varMTL_QTOMR;
+	UINT p_rx_fifo = eDWC_ETH_QOS_256, p_tx_fifo = eDWC_ETH_QOS_256;
+
+	DBGPR("-->configure_mtl_queue\n");
+
+	/*Flush Tx Queue */
+	MTL_QTOMR_FTQ_UdfWr(qInx, 0x1);
+
+	/*Poll Until Poll Condition */
+	vy_count = 0;
+	while (1) {
+		if (vy_count > retryCount) {
+			return -Y_FAILURE;
+		} else {
+			vy_count++;
+			mdelay(1);
+		}
+		MTL_QTOMR_RgRd(qInx, varMTL_QTOMR);
+		if (GET_VALUE(varMTL_QTOMR, MTL_QTOMR_FTQ_LPOS, MTL_QTOMR_FTQ_HPOS)
+				== 0) {
+			break;
+		}
+	}
+
+
+	/*Enable Store and Forward mode for TX */
+	MTL_QTOMR_TSF_UdfWr(qInx, 0x1);
+	/* Program Tx operating mode */
+	MTL_QTOMR_TXQEN_UdfWr(qInx, queue_data->q_op_mode);
+	/* Transmit Queue weight */
+	MTL_QW_ISCQW_UdfWr(qInx, (0x10 + qInx));
+
+	MTL_QROMR_FEP_UdfWr(qInx, 0x1);
+
+	/* Configure for Jumbo frame in MTL */
+	if (pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) {
+		/* Disable RX Store and Forward mode */
+		MTL_QROMR_RSF_UdfWr(qInx, 0x0);
+		printk(KERN_ALERT "RX is configured in threshold mode and threshold = 64Byte\n");
+	}
+
+	p_rx_fifo = calculate_per_queue_fifo(pdata->hw_feat.rx_fifo_size, DWC_ETH_QOS_RX_QUEUE_CNT);
+	p_tx_fifo = calculate_per_queue_fifo(pdata->hw_feat.tx_fifo_size, DWC_ETH_QOS_TX_QUEUE_CNT);
+
+	/* Transmit/Receive queue fifo size programmed */
+	MTL_QROMR_RQS_UdfWr(qInx, p_rx_fifo);
+	MTL_QTOMR_TQS_UdfWr(qInx, p_tx_fifo);
+	printk(KERN_ALERT "Queue%d Tx fifo size %d, Rx fifo size %d\n",
+			qInx, ((p_tx_fifo + 1) * 256), ((p_rx_fifo + 1) * 256));
+
+	/* flow control will be used only if
+	 * each channel gets 8KB or more fifo */
+	if (p_rx_fifo >= eDWC_ETH_QOS_4k) {
+		/* Enable Rx FLOW CTRL in MTL and MAC
+			 Programming is valid only if Rx fifo size is greater than
+			 or equal to 8k */
+		if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_TX) ==
+			DWC_ETH_QOS_FLOW_CTRL_TX) {
+
+			MTL_QROMR_EHFC_UdfWr(qInx, 0x1);
+
+			/* Set Threshold for Activating Flow Contol space for min 2 frames
+			 * ie, (1500 * 2) + (64 * 2) = 3128 bytes, rounding off to 4k
+			 *
+			 * Set Threshold for Deactivating Flow Contol for space of
+			 * min 1 frame (frame size 1500bytes) in receive fifo */
+			if (p_rx_fifo == eDWC_ETH_QOS_4k) {
+				/* This violates the above formula because of FIFO size limit
+				 * therefore overflow may occur inspite of this
+				 * */
+				MTL_QROMR_RFD_UdfWr(qInx, 0x2);
+				MTL_QROMR_RFA_UdfWr(qInx, 0x1);
+			}
+			else if (p_rx_fifo == eDWC_ETH_QOS_8k) {
+				MTL_QROMR_RFD_UdfWr(qInx, 0x4);
+				MTL_QROMR_RFA_UdfWr(qInx, 0x2);
+			}
+			else if (p_rx_fifo == eDWC_ETH_QOS_16k) {
+				MTL_QROMR_RFD_UdfWr(qInx, 0x5);
+				MTL_QROMR_RFA_UdfWr(qInx, 0x2);
+			}
+			else if (p_rx_fifo == eDWC_ETH_QOS_32k) {
+				MTL_QROMR_RFD_UdfWr(qInx, 0x7);
+				MTL_QROMR_RFA_UdfWr(qInx, 0x2);
+			}
+		}
+	}
+
+	DBGPR("<--configure_mtl_queue\n");
+
+	return Y_SUCCESS;
+}
+
+
+static INT configure_dma_channel(UINT qInx,
+			struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+		GET_RX_WRAPPER_DESC(qInx);
+
+	DBGPR("-->configure_dma_channel\n");
+
+	/*Enable OSF mode */
+	DMA_TCR_OSP_UdfWr(qInx, 0x1);
+
+	/*Select Rx Buffer size = 2048bytes */
+	switch (pdata->rx_buffer_len) {
+	case 16384:
+		DMA_RCR_RBSZ_UdfWr(qInx, 16384);
+		break;
+	case 8192:
+		DMA_RCR_RBSZ_UdfWr(qInx, 8192);
+		break;
+	case 4096:
+		DMA_RCR_RBSZ_UdfWr(qInx, 4096);
+		break;
+	default:		/* default is 2K */
+		DMA_RCR_RBSZ_UdfWr(qInx, 2048);
+		break;
+	}
+	/* program RX watchdog timer */
+	if (rx_desc_data->use_riwt) {
+		DMA_RIWTR_RWT_UdfWr(qInx, rx_desc_data->rx_riwt);
+	}
+	else {
+		DMA_RIWTR_RWT_UdfWr(qInx, 0);
+	}
+	printk(KERN_ALERT "%s Rx watchdog timer\n",
+		(rx_desc_data->use_riwt ? "Enabled" : "Disabled"));
+
+	enable_dma_interrupts(qInx);
+	/* set PBLx8 */
+	DMA_CR_PBLx8_UdfWr(qInx, 0x1);
+	/* set TX PBL = 256 */
+	DMA_TCR_PBL_UdfWr(qInx, 32);
+	/* set RX PBL = 256 */
+	DMA_RCR_PBL_UdfWr(qInx, 32);
+
+	/* enable TSO if HW supports */
+	if (pdata->hw_feat.tso_en)
+		DMA_TCR_TSE_UdfWr(qInx, 0x1);
+	printk(KERN_ALERT "%s TSO\n",
+		(pdata->hw_feat.tso_en ? "Enabled" : "Disabled"));
+
+	/* program split header mode */
+	DMA_CR_SPH_UdfWr(qInx, pdata->rx_split_hdr);
+	printk(KERN_ALERT "%s Rx Split header mode\n",
+		(pdata->rx_split_hdr ? "Enabled" : "Disabled"));
+
+	/*
+	 * For PG don't start TX DMA now.
+	 */
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	/* start TX DMA */
+	DMA_TCR_ST_UdfWr(qInx, 0x1);
+#endif
+	/* start RX DMA */
+	DMA_RCR_ST_UdfWr(qInx, 0x1);
+
+	DBGPR("<--configure_dma_channel\n");
+
+	return Y_SUCCESS;
+}
+
+
+
+
+/*!
+* \brief This sequence is used to enable MAC interrupts
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+
+static int enable_mac_interrupts(void)
+{
+  unsigned long varmac_imr;
+
+  /* Enable following interrupts */
+  /* RGSMIIIM - RGMII/SMII interrupt Enable */
+  /* PCSLCHGIM -  PCS Link Status Interrupt Enable */
+  /* PCSANCIM - PCS AN Completion Interrupt Enable */
+  /* PMTIM - PMT Interrupt Enable */
+  /* LPIIM - LPI Interrupt Enable */
+  MAC_IMR_RgRd(varmac_imr);
+  varmac_imr = varmac_imr & (unsigned long)(0x1008);
+  varmac_imr = varmac_imr | ((0x1) << 0) | ((0x1) << 1) | ((0x1) << 2) |
+                ((0x1) << 4) | ((0x1) << 5);
+  MAC_IMR_RgWr(varmac_imr);
+
+
+  return Y_SUCCESS;
+}
+
+
+
+static INT configure_mac(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	ULONG varMAC_MCR;
+	UINT qInx;
+
+	DBGPR("-->configure_mac\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		MAC_RQC0R_RXQEN_UdfWr(qInx, 0x2);
+	}
+
+	/* Set Tx flow control parameters */
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		/* set Pause Time */
+		MAC_QTFCR_PT_UdfWr(qInx, 0xffff);
+		/* Assign priority for RX flow control */
+		/* Assign priority for TX flow control */
+		switch(qInx) {
+		case 0:
+			MAC_TQPM0R_PSTQ0_UdfWr(0);
+			MAC_RQC2R_PSRQ0_UdfWr(0x1 << qInx);
+			break;
+		case 1:
+			MAC_TQPM0R_PSTQ1_UdfWr(1);
+			MAC_RQC2R_PSRQ1_UdfWr(0x1 << qInx);
+			break;
+		case 2:
+			MAC_TQPM0R_PSTQ2_UdfWr(2);
+			MAC_RQC2R_PSRQ2_UdfWr(0x1 << qInx);
+			break;
+		case 3:
+			MAC_TQPM0R_PSTQ3_UdfWr(3);
+			MAC_RQC2R_PSRQ3_UdfWr(0x1 << qInx);
+			break;
+		case 4:
+			MAC_TQPM1R_PSTQ4_UdfWr(4);
+			MAC_RQC3R_PSRQ4_UdfWr(0x1 << qInx);
+			break;
+		case 5:
+			MAC_TQPM1R_PSTQ5_UdfWr(5);
+			MAC_RQC3R_PSRQ5_UdfWr(0x1 << qInx);
+			break;
+		case 6:
+			MAC_TQPM1R_PSTQ6_UdfWr(6);
+			MAC_RQC3R_PSRQ6_UdfWr(0x1 << qInx);
+			break;
+		case 7:
+			MAC_TQPM1R_PSTQ7_UdfWr(7);
+			MAC_RQC3R_PSRQ7_UdfWr(0x1 << qInx);
+			break;
+		}
+
+		if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_TX) == DWC_ETH_QOS_FLOW_CTRL_TX)
+			enable_tx_flow_ctrl(qInx);
+		else
+			disable_tx_flow_ctrl(qInx);
+	}
+
+	/* Set Rx flow control parameters */
+	if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_RX) == DWC_ETH_QOS_FLOW_CTRL_RX)
+		enable_rx_flow_ctrl();
+	else
+		disable_rx_flow_ctrl();
+
+	/* Configure for Jumbo frame in MAC */
+	if (pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) {
+		if (pdata->dev->mtu < DWC_ETH_QOS_MAX_GPSL) {
+			MAC_MCR_JE_UdfWr(0x1);
+			MAC_MCR_WD_UdfWr(0x0);
+			MAC_MCR_GPSLCE_UdfWr(0x0);
+			MAC_MCR_JD_UdfWr(0x0);
+		} else {
+			MAC_MCR_JE_UdfWr(0x0);
+			MAC_MCR_WD_UdfWr(0x1);
+			MAC_MCR_GPSLCE_UdfWr(0x1);
+			MAC_MECR_GPSL_UdfWr(DWC_ETH_QOS_MAX_SUPPORTED_MTU);
+			MAC_MCR_JD_UdfWr(0x1);
+			printk(KERN_ALERT "Configured Gaint Packet Size Limit to %d\n",
+				DWC_ETH_QOS_MAX_SUPPORTED_MTU);
+		}
+		printk(KERN_ALERT "Enabled JUMBO pkt\n");
+	} else {
+		MAC_MCR_JE_UdfWr(0x0);
+		MAC_MCR_WD_UdfWr(0x0);
+		MAC_MCR_GPSLCE_UdfWr(0x0);
+		MAC_MCR_JD_UdfWr(0x0);
+		printk(KERN_ALERT "Disabled JUMBO pkt\n");
+	}
+
+	/* update the MAC address */
+	MAC_MA0HR_RgWr(((pdata->dev->dev_addr[5] << 8) |
+			(pdata->dev->dev_addr[4])));
+	MAC_MA0LR_RgWr(((pdata->dev->dev_addr[3] << 24) |
+			(pdata->dev->dev_addr[2] << 16) |
+			(pdata->dev->dev_addr[1] << 8) |
+			(pdata->dev->dev_addr[0])));
+
+	/*Enable MAC Transmit process */
+	/*Enable MAC Receive process */
+	/*Enable padding - disabled */
+	/*Enable CRC stripping - disabled */
+	MAC_MCR_RgRd(varMAC_MCR);
+	varMAC_MCR = varMAC_MCR & (ULONG) (0xffcfff7c);
+	varMAC_MCR = varMAC_MCR | ((0x1) << 0) | ((0x1) << 20) | ((0x1) << 21);
+#ifndef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	varMAC_MCR |= ((0x1) << 1);
+#endif
+	MAC_MCR_RgWr(varMAC_MCR);
+
+	if (pdata->hw_feat.rx_coe_sel &&
+	     ((pdata->dev_state & NETIF_F_RXCSUM) == NETIF_F_RXCSUM))
+		MAC_MCR_IPC_UdfWr(0x1);
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	configure_mac_for_vlan_pkt();
+	if (pdata->hw_feat.vlan_hash_en)
+			config_vlan_filtering(1, 1, 0);
+#endif
+
+	if (pdata->hw_feat.mmc_sel) {
+		/* disable all MMC intterrupt as MMC are managed in SW and
+		 * registers are cleared on each READ eventually
+		 * */
+		disable_mmc_interrupts();
+		config_mmc_counters();
+	}
+
+	enable_mac_interrupts();
+
+	DBGPR("<--configure_mac\n");
+
+	return Y_SUCCESS;
+}
+
+/*!
+* \brief Initialises device registers.
+* \details This function initialises device registers.
+*
+* \return none
+*/
+
+static INT DWC_ETH_QOS_yinit(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_yinit\n");
+
+	/* reset mmc counters */
+	MMC_CNTRL_RgWr(0x1);
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		configure_mtl_queue(qInx, pdata);
+	}
+	//Mapping MTL Rx queue and DMA Rx channel.
+	MTL_RQDCM0R_RgWr(0x3020100);
+	MTL_RQDCM1R_RgWr(0x7060504);
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	/* enable tx drop status */
+	MTL_OMR_DTXSTS_UdfWr(0x1);
+#endif
+
+	configure_mac(pdata);
+
+	/* Setting INCRx */
+	DMA_SBUS_RgWr(0x0);
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		configure_dma_channel(qInx, pdata);
+	}
+
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+	MTL_Q0ROMR_FEP_UdfWr(0x1);
+	MAC_MPFR_RA_UdfWr(0x1);
+	MAC_MCR_BE_UdfWr(0x1);
+#endif
+
+	DBGPR("<--DWC_ETH_QOS_yinit\n");
+
+	return Y_SUCCESS;
+}
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+
+/*!
+* \brief This sequence is used to initialize the tx descriptors.
+* \param[in] pdata
+*/
+
+static void tx_descriptor_init_pg(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT qInx)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
+		GET_TX_WRAPPER_DESC(qInx);
+	struct s_TX_NORMAL_DESC *TX_NORMAL_DESC =
+		GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+	struct DWC_ETH_QOS_tx_buffer *buffer =
+		GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	INT i;
+	INT start_index = tx_desc_data->cur_tx;
+
+	DBGPR("-->tx_descriptor_init_pg\n");
+
+	/* initialze all descriptors. */
+
+	for (i = 0; i < TX_DESC_CNT; i++) {
+		/* update buffer 1 address pointer to zero */
+		TX_NORMAL_DESC_TDES0_Ml_Wr(TX_NORMAL_DESC->TDES0, 0);
+		/* update buffer 2 address pointer to zero */
+		TX_NORMAL_DESC_TDES1_Ml_Wr(TX_NORMAL_DESC->TDES1, 0);
+		/* set all other control bits (IC, TTSE, B2L & B1L) to zero */
+		TX_NORMAL_DESC_TDES2_Ml_Wr(TX_NORMAL_DESC->TDES2, 0);
+		/* set all other control bits (OWN, CTXT, FD, LD, CPC, CIC etc) to zero */
+		TX_NORMAL_DESC_TDES3_Ml_Wr(TX_NORMAL_DESC->TDES3, 0);
+
+		INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
+		TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
+		buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
+	}
+	/* update the total no of Tx descriptors count */
+	DMA_TDRLR_RgWr(qInx, (TX_DESC_CNT - 1));
+	/* update the starting address of desc chain/ring */
+	DMA_TDLAR_RgWr(qInx, GET_TX_DESC_DMA_ADDR(qInx, start_index));
+
+	DBGPR("<--tx_descriptor_init_pg\n");
+}
+
+/*!
+* \brief This sequence is used to initialize the rx descriptors.
+* \param[in] pdata
+*/
+
+static void rx_descriptor_init_pg(struct DWC_ETH_QOS_prv_data *pdata, UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_rx_buffer *buffer =
+	    GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC =
+	    GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
+	INT i;
+	INT start_index = rx_desc_data->cur_rx;
+	INT last_index;
+
+	DBGPR("-->rx_descriptor_init_pg\n");
+
+	/* initialize all desc */
+
+	for (i = 0; i < RX_DESC_CNT; i++) {
+		memset(RX_NORMAL_DESC, 0, sizeof(struct s_RX_NORMAL_DESC));
+		/* update buffer 1 address pointer */
+		RX_NORMAL_DESC_RDES0_Ml_Wr(RX_NORMAL_DESC->RDES0, buffer->dma);
+		/* set to zero  */
+		RX_NORMAL_DESC_RDES1_Ml_Wr(RX_NORMAL_DESC->RDES1, 0);
+
+		/* set buffer 2 address pointer to zero */
+		RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, 0);
+		/* set control bits - OWN, INTE and BUF1V */
+		RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3, (0xc1000000));
+
+		INCR_RX_DESC_INDEX(rx_desc_data->cur_rx, 1);
+		RX_NORMAL_DESC =
+			GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
+		buffer = GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
+	}
+	/* update the total no of Rx descriptors count */
+	DMA_RDRLR_RgWr(qInx, (RX_DESC_CNT - 1));
+	/* update the Rx Descriptor Tail Pointer */
+	last_index = GET_CURRENT_RCVD_LAST_DESC_INDEX(start_index, 0);
+	DMA_RDTP_RPDR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, last_index));
+	/* update the starting address of desc chain/ring */
+	DMA_RDLAR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, start_index));
+
+	DBGPR("<--rx_descriptor_init_pg\n");
+}
+
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+
+/*!
+* \brief API to initialize the function pointers.
+*
+* \details This function is called in probe to initialize all the
+* function pointers which are used in other functions to capture
+* the different device features.
+*
+* \param[in] hw_if - pointer to hw_if_struct structure.
+*
+* \return void.
+*/
+
+void DWC_ETH_QOS_init_function_ptrs_dev(struct hw_if_struct *hw_if)
+{
+
+	DBGPR("-->DWC_ETH_QOS_init_function_ptrs_dev\n");
+
+	hw_if->tx_complete = tx_complete;
+	hw_if->tx_window_error = NULL;
+	hw_if->tx_aborted_error = tx_aborted_error;
+	hw_if->tx_carrier_lost_error = tx_carrier_lost_error;
+	hw_if->tx_fifo_underrun = tx_fifo_underrun;
+	hw_if->tx_get_collision_count = NULL;
+	hw_if->tx_handle_aborted_error = NULL;
+	hw_if->tx_update_fifo_threshold = NULL;
+	hw_if->tx_config_threshold = NULL;
+
+	hw_if->set_promiscuous_mode = set_promiscuous_mode;
+	hw_if->set_all_multicast_mode = set_all_multicast_mode;
+	hw_if->set_multicast_list_mode = set_multicast_list_mode;
+	hw_if->set_unicast_mode = set_unicast_mode;
+
+	hw_if->enable_rx_csum = enable_rx_csum;
+	hw_if->disable_rx_csum = disable_rx_csum;
+	hw_if->get_rx_csum_status = get_rx_csum_status;
+
+	hw_if->write_phy_regs = write_phy_regs;
+	hw_if->read_phy_regs = read_phy_regs;
+	hw_if->set_full_duplex = set_full_duplex;
+	hw_if->set_half_duplex = set_half_duplex;
+	hw_if->set_mii_speed_100 = set_mii_speed_100;
+	hw_if->set_mii_speed_10 = set_mii_speed_10;
+	hw_if->set_gmii_speed = set_gmii_speed;
+	/* for PMT */
+	hw_if->start_dma_rx = start_dma_rx;
+	hw_if->stop_dma_rx = stop_dma_rx;
+	hw_if->start_dma_tx = start_dma_tx;
+	hw_if->stop_dma_tx = stop_dma_tx;
+	hw_if->start_mac_tx_rx = start_mac_tx_rx;
+	hw_if->stop_mac_tx_rx = stop_mac_tx_rx;
+
+	hw_if->pre_xmit = pre_transmit;
+	hw_if->dev_read = device_read;
+	hw_if->enable_int = DWC_ETH_QOS_enable_interrupt;
+	hw_if->disable_int = DWC_ETH_QOS_disable_interrupt;
+	hw_if->init = DWC_ETH_QOS_yinit;
+	hw_if->exit = DWC_ETH_QOS_yexit;
+	/* Descriptor related Sequences have to be initialized here */
+	hw_if->tx_desc_init = tx_descriptor_init;
+	hw_if->rx_desc_init = rx_descriptor_init;
+	hw_if->rx_desc_reset = rx_descriptor_reset;
+	hw_if->tx_desc_reset = tx_descriptor_reset;
+	hw_if->get_tx_desc_ls = get_tx_descriptor_last;
+	hw_if->get_tx_desc_ctxt = get_tx_descriptor_ctxt;
+	hw_if->update_rx_tail_ptr = update_rx_tail_ptr;
+
+	/* for FLOW ctrl */
+	hw_if->enable_rx_flow_ctrl = enable_rx_flow_ctrl;
+	hw_if->disable_rx_flow_ctrl = disable_rx_flow_ctrl;
+	hw_if->enable_tx_flow_ctrl = enable_tx_flow_ctrl;
+	hw_if->disable_tx_flow_ctrl = disable_tx_flow_ctrl;
+
+	/* for PMT operation */
+	hw_if->enable_magic_pmt = enable_magic_pmt_operation;
+	hw_if->disable_magic_pmt = disable_magic_pmt_operation;
+	hw_if->enable_remote_pmt = enable_remote_pmt_operation;
+	hw_if->disable_remote_pmt = disable_remote_pmt_operation;
+	hw_if->configure_rwk_filter = configure_rwk_filter_registers;
+
+	/* for TX vlan control */
+	hw_if->enable_vlan_reg_control = configure_reg_vlan_control;
+	hw_if->enable_vlan_desc_control = configure_desc_vlan_control;
+
+	/* for rx vlan stripping */
+	hw_if->configure_rx_outer_vlan_stripping =
+	    configure_rx_outer_vlan_stripping;
+	hw_if->configure_rx_inner_vlan_stripping =
+	    configure_rx_inner_vlan_stripping;
+
+	/* for sa(source address) insert/replace */
+	hw_if->configure_mac_addr0_reg = configure_mac_addr0_reg;
+	hw_if->configure_mac_addr1_reg = configure_mac_addr1_reg;
+	hw_if->configure_sa_via_reg = configure_sa_via_reg;
+
+	/* for RX watchdog timer */
+	hw_if->config_rx_watchdog = config_rx_watchdog_timer;
+
+	/* for RX and TX threshold config */
+	hw_if->config_rx_threshold = config_rx_threshold;
+	hw_if->config_tx_threshold = config_tx_threshold;
+
+	/* for RX and TX Store and Forward Mode config */
+	hw_if->config_rsf_mode = config_rsf_mode;
+	hw_if->config_tsf_mode = config_tsf_mode;
+
+	/* for TX DMA Operating on Second Frame config */
+	hw_if->config_osf_mode = config_osf_mode;
+
+	/* for INCR/INCRX config */
+	hw_if->config_incr_incrx_mode = config_incr_incrx_mode;
+	/* for AXI PBL config */
+	hw_if->config_axi_pbl_val = config_axi_pbl_val;
+	/* for AXI WORL config */
+	hw_if->config_axi_worl_val = config_axi_worl_val;
+	/* for AXI RORL config */
+	hw_if->config_axi_rorl_val = config_axi_rorl_val;
+
+	/* for RX and TX PBL config */
+	hw_if->config_rx_pbl_val = config_rx_pbl_val;
+	hw_if->get_rx_pbl_val = get_rx_pbl_val;
+	hw_if->config_tx_pbl_val = config_tx_pbl_val;
+	hw_if->get_tx_pbl_val = get_tx_pbl_val;
+	hw_if->config_pblx8 = config_pblx8;
+
+	hw_if->disable_rx_interrupt = disable_rx_interrupt;
+	hw_if->enable_rx_interrupt = enable_rx_interrupt;
+
+	/* for handling MMC */
+	hw_if->disable_mmc_interrupts = disable_mmc_interrupts;
+	hw_if->config_mmc_counters = config_mmc_counters;
+
+	/* for handling split header */
+	hw_if->config_split_header_mode = config_split_header_mode;
+	hw_if->config_header_size = config_header_size;
+
+	hw_if->set_dcb_algorithm = set_dcb_algorithm;
+	hw_if->set_dcb_queue_weight = set_dcb_queue_weight;
+
+	hw_if->set_tx_queue_operating_mode = set_tx_queue_operating_mode;
+	hw_if->set_avb_algorithm = set_avb_algorithm;
+	hw_if->config_credit_control = config_credit_control;
+	hw_if->config_send_slope = config_send_slope;
+	hw_if->config_idle_slope = config_idle_slope;
+	hw_if->config_high_credit = config_high_credit;
+	hw_if->config_low_credit = config_low_credit;
+	hw_if->config_slot_num_check = config_slot_num_check;
+	hw_if->config_advance_slot_num_check = config_advance_slot_num_check;
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	hw_if->tx_desc_init_pg = tx_descriptor_init_pg;
+	hw_if->rx_desc_init_pg = rx_descriptor_init_pg;
+	hw_if->set_ch_arb_weights = set_ch_arb_weights;
+	hw_if->config_slot_interrupt = config_slot_interrupt;
+	hw_if->set_slot_count = set_slot_count;
+	hw_if->set_tx_rx_prio_policy = set_tx_rx_prio_policy;
+	hw_if->set_tx_rx_prio = set_tx_rx_prio;
+	hw_if->set_tx_rx_prio_ratio = set_tx_rx_prio_ratio;
+	hw_if->set_dma_tx_arb_algorithm = set_dma_tx_arb_algorithm;
+	hw_if->prepare_dev_pktgen = prepare_dev_pktgen;
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	/* for hw time stamping */
+	hw_if->config_hw_time_stamping = config_hw_time_stamping;
+	hw_if->config_sub_second_increment = config_sub_second_increment;
+	hw_if->init_systime = init_systime;
+	hw_if->config_addend = config_addend;
+	hw_if->adjust_systime = adjust_systime;
+	hw_if->get_systime = get_systime;
+	hw_if->get_tx_tstamp_status = get_tx_tstamp_status;
+	hw_if->get_tx_tstamp = get_tx_tstamp;
+	hw_if->get_tx_tstamp_status_via_reg = get_tx_tstamp_status_via_reg;
+	hw_if->get_tx_tstamp_via_reg = get_tx_tstamp_via_reg;
+	hw_if->rx_tstamp_available = rx_tstamp_available;
+	hw_if->get_rx_tstamp_status = get_rx_tstamp_status;
+	hw_if->get_rx_tstamp = get_rx_tstamp;
+	hw_if->drop_tx_status_enabled = drop_tx_status_enabled;
+
+	/* for l3 and l4 layer filtering */
+	hw_if->config_l2_da_perfect_inverse_match = config_l2_da_perfect_inverse_match;
+	hw_if->update_mac_addr32_127_low_high_reg = update_mac_addr32_127_low_high_reg;
+	hw_if->update_mac_addr1_31_low_high_reg = update_mac_addr1_31_low_high_reg;
+	hw_if->update_hash_table_reg = update_hash_table_reg;
+	hw_if->config_mac_pkt_filter_reg = config_mac_pkt_filter_reg;
+	hw_if->config_l3_l4_filter_enable = config_l3_l4_filter_enable;
+	hw_if->config_l3_filters = config_l3_filters;
+	hw_if->update_ip4_addr0 = update_ip4_addr0;
+	hw_if->update_ip4_addr1 = update_ip4_addr1;
+	hw_if->update_ip6_addr = update_ip6_addr;
+	hw_if->config_l4_filters = config_l4_filters;
+	hw_if->update_l4_sa_port_no = update_l4_sa_port_no;
+	hw_if->update_l4_da_port_no = update_l4_da_port_no;
+
+	/* for VLAN filtering */
+	hw_if->get_vlan_hash_table_reg = get_vlan_hash_table_reg;
+	hw_if->update_vlan_hash_table_reg = update_vlan_hash_table_reg;
+	hw_if->update_vlan_id = update_vlan_id;
+	hw_if->config_vlan_filtering = config_vlan_filtering;
+	hw_if->get_vlan_tag_comparison = get_vlan_tag_comparison;
+
+	/* for differnet PHY interconnect */
+	hw_if->control_an = control_an;
+	hw_if->get_an_adv_pause_param = get_an_adv_pause_param;
+	hw_if->get_an_adv_duplex_param = get_an_adv_duplex_param;
+	hw_if->get_lp_an_adv_pause_param = get_lp_an_adv_pause_param;
+	hw_if->get_lp_an_adv_duplex_param = get_lp_an_adv_duplex_param;
+
+	/* for EEE */
+	hw_if->set_eee_mode = set_eee_mode;
+	hw_if->reset_eee_mode = reset_eee_mode;
+	hw_if->set_eee_pls = set_eee_pls;
+	hw_if->set_eee_timer = set_eee_timer;
+	hw_if->get_lpi_status = get_lpi_status;
+	hw_if->set_lpi_tx_automate = set_lpi_tx_automate;
+
+	/* for ARP */
+	hw_if->config_arp_offload = config_arp_offload;
+	hw_if->update_arp_offload_ip_addr = update_arp_offload_ip_addr;
+
+	/* for MAC loopback */
+	hw_if->config_mac_loopback_mode = config_mac_loopback_mode;
+
+	/* for PFC */
+	hw_if->config_pfc = config_pfc;
+
+	DBGPR("<--DWC_ETH_QOS_init_function_ptrs_dev\n");
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
new file mode 100755
index 0000000..fe0924e
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -0,0 +1,6493 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_drv.c
+ * @brief: Driver functions.
+ */
+
+#include "DWC_ETH_QOS_yheader.h"
+#include "DWC_ETH_QOS_yapphdr.h"
+#include "DWC_ETH_QOS_drv.h"
+
+extern ULONG dwc_eth_qos_pci_base_addr;
+
+#include "DWC_ETH_QOS_yregacc.h"
+
+static INT DWC_ETH_QOS_GStatus;
+
+/* SA(Source Address) operations on TX */
+unsigned char mac_addr0[6] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55 };
+unsigned char mac_addr1[6] = { 0x00, 0x66, 0x77, 0x88, 0x99, 0xaa };
+
+/* module parameters for configuring the queue modes
+ * set default mode as GENERIC
+ * */
+static int q_op_mode[DWC_ETH_QOS_MAX_TX_QUEUE_CNT] = {
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC,
+	DWC_ETH_QOS_Q_GENERIC
+};
+module_param_array(q_op_mode, int, NULL, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(q_op_mode,
+	"MTL queue operation mode [0-DISABLED, 1-AVB, 2-DCB, 3-GENERIC]");
+
+void DWC_ETH_QOS_stop_all_ch_tx_dma(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_stop_all_ch_tx_dma\n");
+
+	for(qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++)
+		hw_if->stop_dma_tx(qInx);
+
+	DBGPR("<--DWC_ETH_QOS_stop_all_ch_tx_dma\n");
+}
+
+static void DWC_ETH_QOS_stop_all_ch_rx_dma(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_stop_all_ch_rx_dma\n");
+
+	for(qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++)
+		hw_if->stop_dma_rx(qInx);
+
+	DBGPR("<--DWC_ETH_QOS_stop_all_ch_rx_dma\n");
+}
+
+static void DWC_ETH_QOS_start_all_ch_tx_dma(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT i;
+
+	DBGPR("-->DWC_ETH_QOS_start_all_ch_tx_dma\n");
+
+	for(i = 0; i < DWC_ETH_QOS_TX_QUEUE_CNT; i++)
+		hw_if->start_dma_tx(i);
+
+	DBGPR("<--DWC_ETH_QOS_start_all_ch_tx_dma\n");
+}
+
+static void DWC_ETH_QOS_start_all_ch_rx_dma(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT i;
+
+	DBGPR("-->DWC_ETH_QOS_start_all_ch_rx_dma\n");
+
+	for(i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++)
+		hw_if->start_dma_rx(i);
+
+	DBGPR("<--DWC_ETH_QOS_start_all_ch_rx_dma\n");
+}
+
+static void DWC_ETH_QOS_napi_enable_mq(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_rx_queue *rx_queue = NULL;
+	int qInx;
+
+	DBGPR("-->DWC_ETH_QOS_napi_enable_mq\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_queue = GET_RX_QUEUE_PTR(qInx);
+		napi_enable(&rx_queue->napi);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_napi_enable_mq\n");
+}
+
+static void DWC_ETH_QOS_all_ch_napi_disable(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_rx_queue *rx_queue = NULL;
+	int qInx;
+
+	DBGPR("-->DWC_ETH_QOS_napi_enable\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_queue = GET_RX_QUEUE_PTR(qInx);
+		napi_disable(&rx_queue->napi);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_napi_enable\n");
+}
+
+/*!
+ * \details This function is invoked to stop device operation
+ * Following operations are performed in this function.
+ * - Stop the queue.
+ * - Stops DMA TX and RX.
+ * - Free the TX and RX skb's.
+ * - Issues soft reset to device.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_stop_dev(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct desc_if_struct *desc_if = &(pdata->desc_if);
+
+	DBGPR("-->DWC_ETH_QOS_stop_dev\n");
+
+	netif_tx_disable(pdata->dev);
+
+	DWC_ETH_QOS_all_ch_napi_disable(pdata);
+
+	/* stop DMA TX/RX */
+	DWC_ETH_QOS_stop_all_ch_tx_dma(pdata);
+	DWC_ETH_QOS_stop_all_ch_rx_dma(pdata);
+
+	/* issue software reset to device */
+	hw_if->exit();
+
+	/* free tx skb's */
+	desc_if->tx_skb_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
+	/* free rx skb's */
+	desc_if->rx_skb_free_mem(pdata, DWC_ETH_QOS_RX_QUEUE_CNT);
+
+	DBGPR("<--DWC_ETH_QOS_stop_dev\n");
+}
+
+
+static void DWC_ETH_QOS_tx_desc_mang_ds_dump(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data = NULL;
+	struct s_TX_NORMAL_DESC *tx_desc = NULL;
+	int qInx, i;
+
+#ifndef YDEBUG
+	return;
+#endif
+	printk(KERN_ALERT "/**** TX DESC MANAGEMENT DATA STRUCTURE DUMP ****/\n");
+
+	printk(KERN_ALERT "TX_DESC_QUEUE_CNT = %d\n", DWC_ETH_QOS_TX_QUEUE_CNT);
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		tx_desc_data = GET_TX_WRAPPER_DESC(qInx);
+
+		printk(KERN_ALERT "DMA CHANNEL = %d\n", qInx);
+
+		printk(KERN_ALERT "\tcur_tx           = %d\n",
+			tx_desc_data->cur_tx);
+		printk(KERN_ALERT "\tdirty_tx         = %d\n",
+			tx_desc_data->dirty_tx);
+		printk(KERN_ALERT "\tfree_desc_cnt    = %d\n",
+			tx_desc_data->free_desc_cnt);
+		printk(KERN_ALERT "\ttx_pkt_queued    = %d\n",
+			tx_desc_data->tx_pkt_queued);
+		printk(KERN_ALERT "\tqueue_stopped    = %d\n",
+			tx_desc_data->queue_stopped);
+		printk(KERN_ALERT "\tpacket_count     = %d\n",
+			tx_desc_data->packet_count);
+		printk(KERN_ALERT "\ttx_threshold_val = %d\n",
+			tx_desc_data->tx_threshold_val);
+		printk(KERN_ALERT "\ttsf_on           = %d\n",
+			tx_desc_data->tsf_on);
+		printk(KERN_ALERT "\tosf_on           = %d\n",
+			tx_desc_data->osf_on);
+		printk(KERN_ALERT "\ttx_pbl           = %d\n",
+			tx_desc_data->tx_pbl);
+
+		printk(KERN_ALERT "\t[<desc_add> <index >] = <TDES0> : <TDES1> : <TDES2> : <TDES3>\n");
+		for (i = 0; i < TX_DESC_CNT; i++) {
+			tx_desc = GET_TX_DESC_PTR(qInx, i);
+			printk(KERN_ALERT "\t[%4p %03d] = %#x : %#x : %#x : %#x\n",
+				tx_desc, i, tx_desc->TDES0, tx_desc->TDES1,
+				tx_desc->TDES2, tx_desc->TDES3);
+		}
+	}
+
+	printk(KERN_ALERT "/************************************************/\n");
+}
+
+
+static void DWC_ETH_QOS_rx_desc_mang_ds_dump(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data = NULL;
+	struct s_RX_NORMAL_DESC *rx_desc = NULL;
+	int qInx, i;
+
+#ifndef YDEBUG
+	return;
+#endif
+	printk(KERN_ALERT "/**** RX DESC MANAGEMENT DATA STRUCTURE DUMP ****/\n");
+
+	printk(KERN_ALERT "RX_DESC_QUEUE_CNT = %d\n", DWC_ETH_QOS_RX_QUEUE_CNT);
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_desc_data = GET_RX_WRAPPER_DESC(qInx);
+
+		printk(KERN_ALERT "DMA CHANNEL = %d\n", qInx);
+
+		printk(KERN_ALERT "\tcur_rx                = %d\n",
+			rx_desc_data->cur_rx);
+		printk(KERN_ALERT "\tdirty_rx              = %d\n",
+			rx_desc_data->dirty_rx);
+		printk(KERN_ALERT "\tpkt_received          = %d\n",
+			rx_desc_data->pkt_received);
+		printk(KERN_ALERT "\tskb_realloc_idx       = %d\n",
+			rx_desc_data->skb_realloc_idx);
+		printk(KERN_ALERT "\tskb_realloc_threshold = %d\n",
+			rx_desc_data->skb_realloc_threshold);
+		printk(KERN_ALERT "\tuse_riwt              = %d\n",
+			rx_desc_data->use_riwt);
+		printk(KERN_ALERT "\trx_riwt               = %d\n",
+			rx_desc_data->rx_riwt);
+		printk(KERN_ALERT "\trx_coal_frames        = %d\n",
+			rx_desc_data->rx_coal_frames);
+		printk(KERN_ALERT "\trx_threshold_val      = %d\n",
+			rx_desc_data->rx_threshold_val);
+		printk(KERN_ALERT "\trsf_on                = %d\n",
+			rx_desc_data->rsf_on);
+		printk(KERN_ALERT "\trx_pbl                = %d\n",
+			rx_desc_data->rx_pbl);
+
+		printk(KERN_ALERT "\t[<desc_add> <index >] = <RDES0> : <RDES1> : <RDES2> : <RDES3>\n");
+		for (i = 0; i < RX_DESC_CNT; i++) {
+			rx_desc = GET_RX_DESC_PTR(qInx, i);
+			printk(KERN_ALERT "\t[%4p %03d] = %#x : %#x : %#x : %#x\n",
+				rx_desc, i, rx_desc->RDES0, rx_desc->RDES1,
+				rx_desc->RDES2, rx_desc->RDES3);
+		}
+	}
+
+	printk(KERN_ALERT "/************************************************/\n");
+}
+
+
+static void DWC_ETH_QOS_restart_phy(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_restart_phy\n");
+
+	pdata->oldlink = 0;
+	pdata->speed = 0;
+	pdata->oldduplex = -1;
+
+	if (pdata->phydev)
+		phy_start_aneg(pdata->phydev);
+
+	DBGPR("<--DWC_ETH_QOS_restart_phy\n");
+}
+
+
+/*!
+ * \details This function is invoked to start the device operation
+ * Following operations are performed in this function.
+ * - Initialize software states
+ * - Initialize the TX and RX descriptors queue.
+ * - Initialize the device to know state
+ * - Start the queue.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_start_dev(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct desc_if_struct *desc_if = &(pdata->desc_if);
+
+	DBGPR("-->DWC_ETH_QOS_start_dev\n");
+
+	/* reset all variables */
+	DWC_ETH_QOS_default_common_confs(pdata);
+	DWC_ETH_QOS_default_tx_confs(pdata);
+	DWC_ETH_QOS_default_rx_confs(pdata);
+
+	DWC_ETH_QOS_configure_rx_fun_ptr(pdata);
+
+	DWC_ETH_QOS_napi_enable_mq(pdata);
+
+	/* reinit descriptor */
+	desc_if->wrapper_tx_desc_init(pdata);
+	desc_if->wrapper_rx_desc_init(pdata);
+
+	DWC_ETH_QOS_tx_desc_mang_ds_dump(pdata);
+	DWC_ETH_QOS_rx_desc_mang_ds_dump(pdata);
+
+	/* initializes MAC and DMA */
+	hw_if->init(pdata);
+
+	if (pdata->vlan_hash_filtering)
+		hw_if->update_vlan_hash_table_reg(pdata->vlan_ht_or_id);
+	else
+		hw_if->update_vlan_id(pdata->vlan_ht_or_id);
+
+	DWC_ETH_QOS_restart_phy(pdata);
+
+	pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
+
+	netif_tx_wake_all_queues(pdata->dev);
+
+	DBGPR("<--DWC_ETH_QOS_start_dev\n");
+}
+
+/*!
+ * \details This function is invoked by isr handler when device issues an FATAL
+ * bus error interrupt.  Following operations are performed in this function.
+ * - Stop the device.
+ * - Start the device
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] qInx – queue number.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_restart_dev(struct DWC_ETH_QOS_prv_data *pdata,
+					UINT qInx)
+{
+	struct desc_if_struct *desc_if = &(pdata->desc_if);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_rx_queue *rx_queue = GET_RX_QUEUE_PTR(qInx);
+
+	DBGPR("-->DWC_ETH_QOS_restart_dev\n");
+
+	netif_stop_subqueue(pdata->dev, qInx);
+	napi_disable(&rx_queue->napi);
+
+	/* stop DMA TX/RX */
+	hw_if->stop_dma_tx(qInx);
+	hw_if->stop_dma_rx(qInx);
+
+	/* free tx skb's */
+	desc_if->tx_skb_free_mem_single_q(pdata, qInx);
+	/* free rx skb's */
+	desc_if->rx_skb_free_mem_single_q(pdata, qInx);
+
+	if ((DWC_ETH_QOS_TX_QUEUE_CNT == 0) &&
+		(DWC_ETH_QOS_RX_QUEUE_CNT == 0)) {
+		/* issue software reset to device */
+		hw_if->exit();
+
+		DWC_ETH_QOS_configure_rx_fun_ptr(pdata);
+		DWC_ETH_QOS_default_common_confs(pdata);
+	}
+	/* reset all variables */
+	DWC_ETH_QOS_default_tx_confs_single_q(pdata, qInx);
+	DWC_ETH_QOS_default_rx_confs_single_q(pdata, qInx);
+
+	/* reinit descriptor */
+	desc_if->wrapper_tx_desc_init_single_q(pdata, qInx);
+	desc_if->wrapper_rx_desc_init_single_q(pdata, qInx);
+
+	napi_enable(&rx_queue->napi);
+
+	/* initializes MAC and DMA
+	 * NOTE : Do we need to init only one channel
+	 * which generate FBE*/
+	hw_if->init(pdata);
+
+	DWC_ETH_QOS_restart_phy(pdata);
+
+	netif_wake_subqueue(pdata->dev, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_restart_dev\n");
+}
+
+void DWC_ETH_QOS_disable_all_ch_rx_interrpt(
+			struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_disable_all_ch_rx_interrpt\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++)
+		hw_if->disable_rx_interrupt(qInx);
+
+	DBGPR("<--DWC_ETH_QOS_disable_all_ch_rx_interrpt\n");
+}
+
+void DWC_ETH_QOS_enable_all_ch_rx_interrpt(
+			struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_enable_all_ch_rx_interrpt\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++)
+		hw_if->enable_rx_interrupt(qInx);
+
+	DBGPR("<--DWC_ETH_QOS_enable_all_ch_rx_interrpt\n");
+}
+
+
+/*!
+* \brief Interrupt Service Routine
+* \details Interrupt Service Routine
+*
+* \param[in] irq         - interrupt number for particular device
+* \param[in] device_id   - pointer to device structure
+* \return returns positive integer
+* \retval IRQ_HANDLED
+*/
+
+irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
+{
+	ULONG varDMA_ISR;
+	ULONG varDMA_SR;
+	ULONG varMAC_ISR;
+	ULONG varMAC_IMR;
+	ULONG varMAC_PMTCSR;
+	ULONG varDMA_IER;
+	struct DWC_ETH_QOS_prv_data *pdata =
+	    (struct DWC_ETH_QOS_prv_data *)device_id;
+	struct net_device *dev = pdata->dev;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+	int napi_sched = 0;
+	struct DWC_ETH_QOS_rx_queue *rx_queue = NULL;
+	ULONG varMAC_ANS = 0;
+	ULONG varMAC_PCS = 0;
+
+	DBGPR("-->DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
+
+	DMA_ISR_RgRd(varDMA_ISR);
+	if (varDMA_ISR == 0x0)
+		return IRQ_NONE;
+
+	MAC_ISR_RgRd(varMAC_ISR);
+
+	DBGPR("DMA_ISR = %#lx, MAC_ISR = %#lx\n", varDMA_ISR, varMAC_ISR);
+
+	/* Handle DMA interrupts */
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		rx_queue = GET_RX_QUEUE_PTR(qInx);
+
+		DMA_SR_RgRd(qInx, varDMA_SR);
+		/* clear interrupts */
+		DMA_SR_RgWr(qInx, varDMA_SR);
+
+		DMA_IER_RgRd(qInx, varDMA_IER);
+		/* handle only those DMA interrupts which are enabled */
+		varDMA_SR = (varDMA_SR & varDMA_IER);
+
+		DBGPR("DMA_SR[%d] = %#lx\n", qInx, varDMA_SR);
+
+		if (varDMA_SR == 0)
+			continue;
+
+		if ((GET_VALUE(varDMA_SR, DMA_SR_RI_LPOS, DMA_SR_RI_HPOS) & 1) ||
+			(GET_VALUE(varDMA_SR, DMA_SR_RBU_LPOS, DMA_SR_RBU_HPOS) & 1)) {
+			if (!napi_sched) {
+				napi_sched = 1;
+				if (likely(napi_schedule_prep(&rx_queue->napi))) {
+					DWC_ETH_QOS_disable_all_ch_rx_interrpt(pdata);
+					__napi_schedule(&rx_queue->napi);
+				} else {
+					printk(KERN_ALERT "driver bug! Rx interrupt while in poll\n");
+					DWC_ETH_QOS_disable_all_ch_rx_interrpt(pdata);
+				}
+
+				if ((GET_VALUE(varDMA_SR, DMA_SR_RI_LPOS, DMA_SR_RI_HPOS) & 1))
+					pdata->xstats.rx_normal_irq_n[qInx]++;
+				else
+					pdata->xstats.rx_buf_unavailable_irq_n[qInx]++;
+			}
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_TI_LPOS, DMA_SR_TI_HPOS) & 1) {
+			pdata->xstats.tx_normal_irq_n[qInx]++;
+			DWC_ETH_QOS_tx_interrupt(dev, pdata, qInx);
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_TPS_LPOS, DMA_SR_TPS_HPOS) & 1) {
+			pdata->xstats.tx_process_stopped_irq_n[qInx]++;
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_TPS;
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_TBU_LPOS, DMA_SR_TBU_HPOS) & 1) {
+			pdata->xstats.tx_buf_unavailable_irq_n[qInx]++;
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_TBU;
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RPS_LPOS, DMA_SR_RPS_HPOS) & 1) {
+			pdata->xstats.rx_process_stopped_irq_n[qInx]++;
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_RPS;
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RWT_LPOS, DMA_SR_RWT_HPOS) & 1) {
+			pdata->xstats.rx_watchdog_irq_n++;
+			DWC_ETH_QOS_GStatus = S_DMA_SR_RWT;
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_FBE_LPOS, DMA_SR_FBE_HPOS) & 1) {
+			pdata->xstats.fatal_bus_error_irq_n++;
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_FBE;
+			DWC_ETH_QOS_restart_dev(pdata, qInx);
+		}
+	}
+
+	/* Handle MAC interrupts */
+	if (GET_VALUE(varDMA_ISR, DMA_ISR_MACIS_LPOS, DMA_ISR_MACIS_HPOS) & 1) {
+		/* handle only those MAC interrupts which are enabled */
+		MAC_IMR_RgRd(varMAC_IMR);
+		varMAC_ISR = (varMAC_ISR & varMAC_IMR);
+
+		/* PMT interrupt */
+		if (GET_VALUE(varMAC_ISR, MAC_ISR_PMTIS_LPOS, MAC_ISR_PMTIS_HPOS) & 1) {
+			pdata->xstats.pmt_irq_n++;
+			DWC_ETH_QOS_GStatus = S_MAC_ISR_PMTIS;
+			MAC_PMTCSR_RgRd(varMAC_PMTCSR);
+			if (pdata->power_down)
+				DWC_ETH_QOS_powerup(pdata->dev, DWC_ETH_QOS_IOCTL_CONTEXT);
+		}
+
+		/* RGMII/SMII interrupt */
+		if (GET_VALUE(varMAC_ISR, MAC_ISR_RGSMIIS_LPOS, MAC_ISR_RGSMIIS_HPOS) & 1) {
+			MAC_PCS_RgRd(varMAC_PCS);
+			printk(KERN_ALERT "RGMII/SMII interrupt: MAC_PCS = %#lx\n", varMAC_PCS);
+			if ((varMAC_PCS & 0x80000) == 0x80000) {
+				pdata->pcs_link = 1;
+				netif_carrier_on(dev);
+				if ((varMAC_PCS & 0x10000) == 0x10000) {
+					pdata->pcs_duplex = 1;
+					hw_if->set_full_duplex(); //TODO: may not be required
+				} else {
+					pdata->pcs_duplex = 0;
+					hw_if->set_half_duplex(); //TODO: may not be required
+				}
+
+				if ((varMAC_PCS & 0x60000) == 0x0) {
+					pdata->pcs_speed = SPEED_10;
+					hw_if->set_mii_speed_10(); //TODO: may not be required
+				} else if ((varMAC_PCS & 0x60000) == 0x20000) {
+					pdata->pcs_speed = SPEED_100;
+					hw_if->set_mii_speed_100(); //TODO: may not be required
+				} else if ((varMAC_PCS & 0x60000) == 0x30000) {
+					pdata->pcs_speed = SPEED_1000;
+					hw_if->set_gmii_speed(); //TODO: may not be required
+				}
+				printk(KERN_ALERT "Link is UP:%dMbps & %s duplex\n",
+					pdata->pcs_speed, pdata->pcs_duplex ? "Full" : "Half");
+			} else {
+				printk(KERN_ALERT "Link is Down\n");
+				pdata->pcs_link = 0;
+				netif_carrier_off(dev);
+			}
+		}
+
+		/* PCS Link Status interrupt */
+		if (GET_VALUE(varMAC_ISR, MAC_ISR_PCSLCHGIS_LPOS, MAC_ISR_PCSLCHGIS_HPOS) & 1) {
+			printk(KERN_ALERT "PCS Link Status interrupt\n");
+			MAC_ANS_RgRd(varMAC_ANS);
+			if (GET_VALUE(varMAC_ANS, MAC_ANS_LS_LPOS, MAC_ANS_LS_HPOS) & 1) {
+				printk(KERN_ALERT "Link: Up\n");
+				netif_carrier_on(dev);
+				pdata->pcs_link = 1;
+			} else {
+				printk(KERN_ALERT "Link: Down\n");
+				netif_carrier_off(dev);
+				pdata->pcs_link = 0;
+			}
+		}
+
+		/* PCS Auto-Negotiation Complete interrupt */
+		if (GET_VALUE(varMAC_ISR, MAC_ISR_PCSANCIS_LPOS, MAC_ISR_PCSANCIS_HPOS) & 1) {
+			printk(KERN_ALERT "PCS Auto-Negotiation Complete interrupt\n");
+			MAC_ANS_RgRd(varMAC_ANS);
+		}
+
+		/* EEE interrupts */
+		if (GET_VALUE(varMAC_ISR, MAC_ISR_LPI_LPOS, MAC_ISR_LPI_HPOS) & 1) {
+			DWC_ETH_QOS_handle_eee_interrupt(pdata);
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
+
+	return IRQ_HANDLED;
+
+}
+
+/*!
+* \brief API to get all hw features.
+*
+* \details This function is used to check what are all the different
+* features the device supports.
+*
+* \param[in] pdata - pointer to driver private structure
+*
+* \return none
+*/
+
+void DWC_ETH_QOS_get_all_hw_features(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	unsigned int varMAC_HFR0;
+	unsigned int varMAC_HFR1;
+	unsigned int varMAC_HFR2;
+
+	DBGPR("-->DWC_ETH_QOS_get_all_hw_features\n");
+
+	MAC_HFR0_RgRd(varMAC_HFR0);
+	MAC_HFR1_RgRd(varMAC_HFR1);
+	MAC_HFR2_RgRd(varMAC_HFR2);
+
+	memset(&pdata->hw_feat, 0, sizeof(pdata->hw_feat));
+	pdata->hw_feat.mii_sel = ((varMAC_HFR0 >> 0) & MAC_HFR0_MIISEL_Mask);
+	pdata->hw_feat.gmii_sel = ((varMAC_HFR0 >> 1) & MAC_HFR0_GMIISEL_Mask);
+	pdata->hw_feat.hd_sel = ((varMAC_HFR0 >> 2) & MAC_HFR0_HDSEL_Mask);
+	pdata->hw_feat.pcs_sel = ((varMAC_HFR0 >> 3) & MAC_HFR0_PCSSEL_Mask);
+	pdata->hw_feat.vlan_hash_en =
+	    ((varMAC_HFR0 >> 4) & MAC_HFR0_VLANHASEL_Mask);
+	pdata->hw_feat.sma_sel = ((varMAC_HFR0 >> 5) & MAC_HFR0_SMASEL_Mask);
+	pdata->hw_feat.rwk_sel = ((varMAC_HFR0 >> 6) & MAC_HFR0_RWKSEL_Mask);
+	pdata->hw_feat.mgk_sel = ((varMAC_HFR0 >> 7) & MAC_HFR0_MGKSEL_Mask);
+	pdata->hw_feat.mmc_sel = ((varMAC_HFR0 >> 8) & MAC_HFR0_MMCSEL_Mask);
+	pdata->hw_feat.arp_offld_en =
+	    ((varMAC_HFR0 >> 9) & MAC_HFR0_ARPOFFLDEN_Mask);
+	pdata->hw_feat.ts_sel =
+	    ((varMAC_HFR0 >> 12) & MAC_HFR0_TSSSEL_Mask);
+	pdata->hw_feat.eee_sel = ((varMAC_HFR0 >> 13) & MAC_HFR0_EEESEL_Mask);
+	pdata->hw_feat.tx_coe_sel =
+	    ((varMAC_HFR0 >> 14) & MAC_HFR0_TXCOESEL_Mask);
+	pdata->hw_feat.rx_coe_sel =
+	    ((varMAC_HFR0 >> 16) & MAC_HFR0_RXCOE_Mask);
+	pdata->hw_feat.mac_addr16_sel =
+	    ((varMAC_HFR0 >> 18) & MAC_HFR0_ADDMACADRSEL_Mask);
+	pdata->hw_feat.mac_addr32_sel =
+	    ((varMAC_HFR0 >> 23) & MAC_HFR0_MACADR32SEL_Mask);
+	pdata->hw_feat.mac_addr64_sel =
+	    ((varMAC_HFR0 >> 24) & MAC_HFR0_MACADR64SEL_Mask);
+	pdata->hw_feat.tsstssel =
+	    ((varMAC_HFR0 >> 25) & MAC_HFR0_TSINTSEL_Mask);
+	pdata->hw_feat.sa_vlan_ins =
+	    ((varMAC_HFR0 >> 27) & MAC_HFR0_SAVLANINS_Mask);
+	pdata->hw_feat.act_phy_sel =
+	    ((varMAC_HFR0 >> 28) & MAC_HFR0_ACTPHYSEL_Mask);
+
+	pdata->hw_feat.rx_fifo_size =
+	    ((varMAC_HFR1 >> 0) & MAC_HFR1_RXFIFOSIZE_Mask);
+	    //8;
+	pdata->hw_feat.tx_fifo_size =
+	    ((varMAC_HFR1 >> 6) & MAC_HFR1_TXFIFOSIZE_Mask);
+	    //8;
+	pdata->hw_feat.adv_ts_hword =
+	    ((varMAC_HFR1 >> 13) & MAC_HFR1_ADVTHWORD_Mask);
+	pdata->hw_feat.dcb_en = ((varMAC_HFR1 >> 16) & MAC_HFR1_DCBEN_Mask);
+	pdata->hw_feat.sph_en = ((varMAC_HFR1 >> 17) & MAC_HFR1_SPHEN_Mask);
+	pdata->hw_feat.tso_en = ((varMAC_HFR1 >> 18) & MAC_HFR1_TSOEN_Mask);
+	pdata->hw_feat.dma_debug_gen =
+	    ((varMAC_HFR1 >> 19) & MAC_HFR1_DMADEBUGEN_Mask);
+	pdata->hw_feat.av_sel = ((varMAC_HFR1 >> 20) & MAC_HFR1_AVSEL_Mask);
+	pdata->hw_feat.lp_mode_en =
+	    ((varMAC_HFR1 >> 23) & MAC_HFR1_LPMODEEN_Mask);
+	pdata->hw_feat.hash_tbl_sz =
+	    ((varMAC_HFR1 >> 24) & MAC_HFR1_HASHTBLSZ_Mask);
+	pdata->hw_feat.l3l4_filter_num =
+	    ((varMAC_HFR1 >> 27) & MAC_HFR1_L3L4FILTERNUM_Mask);
+
+	pdata->hw_feat.rx_q_cnt = ((varMAC_HFR2 >> 0) & MAC_HFR2_RXQCNT_Mask);
+	pdata->hw_feat.tx_q_cnt = ((varMAC_HFR2 >> 6) & MAC_HFR2_TXQCNT_Mask);
+	pdata->hw_feat.rx_ch_cnt =
+	    ((varMAC_HFR2 >> 12) & MAC_HFR2_RXCHCNT_Mask);
+	pdata->hw_feat.tx_ch_cnt =
+	    ((varMAC_HFR2 >> 18) & MAC_HFR2_TXCHCNT_Mask);
+	pdata->hw_feat.pps_out_num =
+	    ((varMAC_HFR2 >> 24) & MAC_HFR2_PPSOUTNUM_Mask);
+	pdata->hw_feat.aux_snap_num =
+	    ((varMAC_HFR2 >> 28) & MAC_HFR2_AUXSNAPNUM_Mask);
+
+	DBGPR("<--DWC_ETH_QOS_get_all_hw_features\n");
+}
+
+
+/*!
+* \brief API to print all hw features.
+*
+* \details This function is used to print all the device feature.
+*
+* \param[in] pdata - pointer to driver private structure
+*
+* \return none
+*/
+
+void DWC_ETH_QOS_print_all_hw_features(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	char *str = NULL;
+
+	DBGPR("-->DWC_ETH_QOS_print_all_hw_features\n");
+
+	printk(KERN_ALERT "\n");
+	printk(KERN_ALERT "=====================================================/\n");
+	printk(KERN_ALERT "\n");
+	printk(KERN_ALERT "10/100 Mbps Support                         : %s\n",
+		pdata->hw_feat.mii_sel ? "YES" : "NO");
+	printk(KERN_ALERT "1000 Mbps Support                           : %s\n",
+		pdata->hw_feat.gmii_sel ? "YES" : "NO");
+	printk(KERN_ALERT "Half-duplex Support                         : %s\n",
+		pdata->hw_feat.hd_sel ? "YES" : "NO");
+	printk(KERN_ALERT "PCS Registers(TBI/SGMII/RTBI PHY interface) : %s\n",
+		pdata->hw_feat.pcs_sel ? "YES" : "NO");
+	printk(KERN_ALERT "VLAN Hash Filter Selected                   : %s\n",
+		pdata->hw_feat.vlan_hash_en ? "YES" : "NO");
+	pdata->vlan_hash_filtering = pdata->hw_feat.vlan_hash_en;
+	printk(KERN_ALERT "SMA (MDIO) Interface                        : %s\n",
+		pdata->hw_feat.sma_sel ? "YES" : "NO");
+	printk(KERN_ALERT "PMT Remote Wake-up Packet Enable            : %s\n",
+		pdata->hw_feat.rwk_sel ? "YES" : "NO");
+	printk(KERN_ALERT "PMT Magic Packet Enable                     : %s\n",
+		pdata->hw_feat.mgk_sel ? "YES" : "NO");
+	printk(KERN_ALERT "RMON/MMC Module Enable                      : %s\n",
+		pdata->hw_feat.mmc_sel ? "YES" : "NO");
+	printk(KERN_ALERT "ARP Offload Enabled                         : %s\n",
+		pdata->hw_feat.arp_offld_en ? "YES" : "NO");
+	printk(KERN_ALERT "IEEE 1588-2008 Timestamp Enabled            : %s\n",
+		pdata->hw_feat.ts_sel ? "YES" : "NO");
+	printk(KERN_ALERT "Energy Efficient Ethernet Enabled           : %s\n",
+		pdata->hw_feat.eee_sel ? "YES" : "NO");
+	printk(KERN_ALERT "Transmit Checksum Offload Enabled           : %s\n",
+		pdata->hw_feat.tx_coe_sel ? "YES" : "NO");
+	printk(KERN_ALERT "Receive Checksum Offload Enabled            : %s\n",
+		pdata->hw_feat.rx_coe_sel ? "YES" : "NO");
+	printk(KERN_ALERT "MAC Addresses 16–31 Selected                : %s\n",
+		pdata->hw_feat.mac_addr16_sel ? "YES" : "NO");
+	printk(KERN_ALERT "MAC Addresses 32–63 Selected                : %s\n",
+		pdata->hw_feat.mac_addr32_sel ? "YES" : "NO");
+	printk(KERN_ALERT "MAC Addresses 64–127 Selected               : %s\n",
+		pdata->hw_feat.mac_addr64_sel ? "YES" : "NO");
+
+	if (pdata->hw_feat.mac_addr64_sel)
+		pdata->max_addr_reg_cnt = 128;
+	else if (pdata->hw_feat.mac_addr32_sel)
+		pdata->max_addr_reg_cnt = 64;
+	else if (pdata->hw_feat.mac_addr16_sel)
+		pdata->max_addr_reg_cnt = 32;
+	else
+		pdata->max_addr_reg_cnt = 1;
+
+	switch(pdata->hw_feat.tsstssel) {
+	case 0:
+		str = "RESERVED";
+		break;
+	case 1:
+		str = "INTERNAL";
+		break;
+	case 2:
+		str = "EXTERNAL";
+		break;
+	case 3:
+		str = "BOTH";
+		break;
+	}
+	printk(KERN_ALERT "Timestamp System Time Source                : %s\n",
+		str);
+	printk(KERN_ALERT "Source Address or VLAN Insertion Enable     : %s\n",
+		pdata->hw_feat.sa_vlan_ins ? "YES" : "NO");
+
+	switch (pdata->hw_feat.act_phy_sel) {
+	case 0:
+		str = "GMII/MII";
+		break;
+	case 1:
+		str = "RGMII";
+		break;
+	case 2:
+		str = "SGMII";
+		break;
+	case 3:
+		str = "TBI";
+		break;
+	case 4:
+		str = "RMII";
+		break;
+	case 5:
+		str = "RTBI";
+		break;
+	case 6:
+		str = "SMII";
+		break;
+	case 7:
+		str = "RevMII";
+		break;
+	default:
+		str = "RESERVED";
+	}
+	printk(KERN_ALERT "Active PHY Selected                         : %s\n",
+		str);
+
+	switch(pdata->hw_feat.rx_fifo_size) {
+	case 0:
+		str = "128 bytes";
+		break;
+	case 1:
+		str = "256 bytes";
+		break;
+	case 2:
+		str = "512 bytes";
+		break;
+	case 3:
+		str = "1 KBytes";
+		break;
+	case 4:
+		str = "2 KBytes";
+		break;
+	case 5:
+		str = "4 KBytes";
+		break;
+	case 6:
+		str = "8 KBytes";
+		break;
+	case 7:
+		str = "16 KBytes";
+		break;
+	case 8:
+		str = "32 kBytes";
+		break;
+	case 9:
+		str = "64 KBytes";
+		break;
+	case 10:
+		str = "128 KBytes";
+		break;
+	case 11:
+		str = "256 KBytes";
+		break;
+	default:
+		str = "RESERVED";
+	}
+	printk(KERN_ALERT "MTL Receive FIFO Size                       : %s\n",
+		str);
+
+	switch(pdata->hw_feat.tx_fifo_size) {
+	case 0:
+		str = "128 bytes";
+		break;
+	case 1:
+		str = "256 bytes";
+		break;
+	case 2:
+		str = "512 bytes";
+		break;
+	case 3:
+		str = "1 KBytes";
+		break;
+	case 4:
+		str = "2 KBytes";
+		break;
+	case 5:
+		str = "4 KBytes";
+		break;
+	case 6:
+		str = "8 KBytes";
+		break;
+	case 7:
+		str = "16 KBytes";
+		break;
+	case 8:
+		str = "32 kBytes";
+		break;
+	case 9:
+		str = "64 KBytes";
+		break;
+	case 10:
+		str = "128 KBytes";
+		break;
+	case 11:
+		str = "256 KBytes";
+		break;
+	default:
+		str = "RESERVED";
+	}
+	printk(KERN_ALERT "MTL Transmit FIFO Size                       : %s\n",
+		str);
+	printk(KERN_ALERT "IEEE 1588 High Word Register Enable          : %s\n",
+		pdata->hw_feat.adv_ts_hword ? "YES" : "NO");
+	printk(KERN_ALERT "DCB Feature Enable                           : %s\n",
+		pdata->hw_feat.dcb_en ? "YES" : "NO");
+	printk(KERN_ALERT "Split Header Feature Enable                  : %s\n",
+		pdata->hw_feat.sph_en ? "YES" : "NO");
+	printk(KERN_ALERT "TCP Segmentation Offload Enable              : %s\n",
+		pdata->hw_feat.tso_en ? "YES" : "NO");
+	printk(KERN_ALERT "DMA Debug Registers Enabled                  : %s\n",
+		pdata->hw_feat.dma_debug_gen ? "YES" : "NO");
+	printk(KERN_ALERT "AV Feature Enabled                           : %s\n",
+		pdata->hw_feat.av_sel ? "YES" : "NO");
+	printk(KERN_ALERT "Low Power Mode Enabled                       : %s\n",
+		pdata->hw_feat.lp_mode_en ? "YES" : "NO");
+
+	switch(pdata->hw_feat.hash_tbl_sz) {
+	case 0:
+		str = "No hash table selected";
+		pdata->max_hash_table_size = 0;
+		break;
+	case 1:
+		str = "64";
+		pdata->max_hash_table_size = 64;
+		break;
+	case 2:
+		str = "128";
+		pdata->max_hash_table_size = 128;
+		break;
+	case 3:
+		str = "256";
+		pdata->max_hash_table_size = 256;
+		break;
+	}
+	printk(KERN_ALERT "Hash Table Size                              : %s\n",
+		str);
+	printk(KERN_ALERT "Total number of L3 or L4 Filters             : %d L3/L4 Filter\n",
+		pdata->hw_feat.l3l4_filter_num);
+	printk(KERN_ALERT "Number of MTL Receive Queues                 : %d\n",
+		(pdata->hw_feat.rx_q_cnt + 1));
+	printk(KERN_ALERT "Number of MTL Transmit Queues                : %d\n",
+		(pdata->hw_feat.tx_q_cnt + 1));
+	printk(KERN_ALERT "Number of DMA Receive Channels               : %d\n",
+		(pdata->hw_feat.rx_ch_cnt + 1));
+	printk(KERN_ALERT "Number of DMA Transmit Channels              : %d\n",
+		(pdata->hw_feat.tx_ch_cnt + 1));
+
+	switch(pdata->hw_feat.pps_out_num) {
+	case 0:
+		str = "No PPS output";
+		break;
+	case 1:
+		str = "1 PPS output";
+		break;
+	case 2:
+		str = "2 PPS output";
+		break;
+	case 3:
+		str = "3 PPS output";
+		break;
+	case 4:
+		str = "4 PPS output";
+		break;
+	default:
+		str = "RESERVED";
+	}
+	printk(KERN_ALERT "Number of PPS Outputs                        : %s\n",
+		str);
+
+	switch(pdata->hw_feat.aux_snap_num) {
+	case 0:
+		str = "No auxillary input";
+		break;
+	case 1:
+		str = "1 auxillary input";
+		break;
+	case 2:
+		str = "2 auxillary input";
+		break;
+	case 3:
+		str = "3 auxillary input";
+		break;
+	case 4:
+		str = "4 auxillary input";
+		break;
+	default:
+		str = "RESERVED";
+	}
+	printk(KERN_ALERT "Number of Auxiliary Snapshot Inputs          : %s",
+		str);
+
+	printk(KERN_ALERT "\n");
+	printk(KERN_ALERT "=====================================================/\n");
+
+	DBGPR("<--DWC_ETH_QOS_print_all_hw_features\n");
+}
+
+
+static const struct net_device_ops DWC_ETH_QOS_netdev_ops = {
+	.ndo_open = DWC_ETH_QOS_open,
+	.ndo_stop = DWC_ETH_QOS_close,
+	.ndo_start_xmit = DWC_ETH_QOS_start_xmit,
+	.ndo_get_stats = DWC_ETH_QOS_get_stats,
+	.ndo_set_rx_mode = DWC_ETH_QOS_set_rx_mode,
+#ifdef CONFIG_NET_POLL_CONTROLLER
+	.ndo_poll_controller = DWC_ETH_QOS_poll_controller,
+#endif				/*end of CONFIG_NET_POLL_CONTROLLER */
+	.ndo_set_features = DWC_ETH_QOS_set_features,
+	.ndo_fix_features = DWC_ETH_QOS_fix_features,
+	.ndo_do_ioctl = DWC_ETH_QOS_ioctl,
+	.ndo_change_mtu = DWC_ETH_QOS_change_mtu,
+#ifdef DWC_ETH_QOS_QUEUE_SELECT_ALGO
+	.ndo_select_queue = DWC_ETH_QOS_select_queue,
+#endif
+	.ndo_vlan_rx_add_vid = DWC_ETH_QOS_vlan_rx_add_vid,
+	.ndo_vlan_rx_kill_vid = DWC_ETH_QOS_vlan_rx_kill_vid,
+};
+
+struct net_device_ops *DWC_ETH_QOS_get_netdev_ops(void)
+{
+	return (struct net_device_ops *)&DWC_ETH_QOS_netdev_ops;
+}
+
+/*!
+ * \brief allcation of Rx skb's for split header feature.
+ *
+ * \details This function is invoked by other api's for
+ * allocating the Rx skb's if split header feature is enabled.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] buffer – pointer to wrapper receive buffer data structure.
+ * \param[in] gfp – the type of memory allocation.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_alloc_split_hdr_rx_buf(
+		struct DWC_ETH_QOS_prv_data *pdata,
+		struct DWC_ETH_QOS_rx_buffer *buffer,
+		gfp_t gfp)
+{
+	struct sk_buff *skb = buffer->skb;
+
+	DBGPR("-->DWC_ETH_QOS_alloc_split_hdr_rx_buf\n");
+
+	if (skb) {
+		skb_trim(skb, 0);
+		goto check_page;
+	}
+
+	buffer->rx_hdr_size = DWC_ETH_QOS_MAX_HDR_SIZE;
+	/* allocate twice the maximum header size */
+	skb = __netdev_alloc_skb_ip_align(pdata->dev,
+			(2*buffer->rx_hdr_size),
+			gfp);
+	if (skb == NULL) {
+		printk(KERN_ALERT "Failed to allocate skb\n");
+		return -ENOMEM;
+	}
+	buffer->skb = skb;
+	DBGPR("Maximum header buffer size allocated = %d\n",
+		buffer->rx_hdr_size);
+ check_page:
+	if (!buffer->dma)
+		buffer->dma = dma_map_single(&pdata->pdev->dev,
+					buffer->skb->data,
+					(2*buffer->rx_hdr_size),
+					DMA_FROM_DEVICE);
+	buffer->len = buffer->rx_hdr_size;
+
+	/* allocate a new page if necessary */
+	if (buffer->page2 == NULL) {
+		buffer->page2 = alloc_page(gfp);
+		if (unlikely(!buffer->page2)) {
+			printk(KERN_ALERT
+			"Failed to allocate page for second buffer\n");
+			return -ENOMEM;
+		}
+	}
+	if (!buffer->dma2)
+		buffer->dma2 = dma_map_page(&pdata->pdev->dev,
+				    buffer->page2, 0,
+				    PAGE_SIZE, DMA_FROM_DEVICE);
+	buffer->len2 = PAGE_SIZE;
+	buffer->mapped_as_page = Y_TRUE;
+
+	DBGPR("<--DWC_ETH_QOS_alloc_split_hdr_rx_buf\n");
+
+	return 0;
+}
+
+/*!
+ * \brief allcation of Rx skb's for jumbo frame.
+ *
+ * \details This function is invoked by other api's for
+ * allocating the Rx skb's if jumbo frame is enabled.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] buffer – pointer to wrapper receive buffer data structure.
+ * \param[in] gfp – the type of memory allocation.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_alloc_jumbo_rx_buf(struct DWC_ETH_QOS_prv_data *pdata,
+					  struct DWC_ETH_QOS_rx_buffer *buffer,
+					  gfp_t gfp)
+{
+	struct sk_buff *skb = buffer->skb;
+	unsigned int bufsz = (256 - 16);	/* for skb_reserve */
+
+	DBGPR("-->DWC_ETH_QOS_alloc_jumbo_rx_buf\n");
+
+	if (skb) {
+		skb_trim(skb, 0);
+		goto check_page;
+	}
+
+	skb = __netdev_alloc_skb_ip_align(pdata->dev, bufsz, gfp);
+	if (skb == NULL) {
+		printk(KERN_ALERT "Failed to allocate skb\n");
+		return -ENOMEM;
+	}
+	buffer->skb = skb;
+ check_page:
+	/* allocate a new page if necessary */
+	if (buffer->page == NULL) {
+		buffer->page = alloc_page(gfp);
+		if (unlikely(!buffer->page)) {
+			printk(KERN_ALERT "Failed to allocate page\n");
+			return -ENOMEM;
+		}
+	}
+	if (!buffer->dma)
+		buffer->dma = dma_map_page(&pdata->pdev->dev,
+					   buffer->page, 0,
+					   PAGE_SIZE, DMA_FROM_DEVICE);
+	buffer->len = PAGE_SIZE;
+
+	if (buffer->page2 == NULL) {
+		buffer->page2 = alloc_page(gfp);
+		if (unlikely(!buffer->page2)) {
+			printk(KERN_ALERT
+			       "Failed to allocate page for second buffer\n");
+			return -ENOMEM;
+		}
+	}
+	if (!buffer->dma2)
+		buffer->dma2 = dma_map_page(&pdata->pdev->dev,
+					    buffer->page2, 0,
+					    PAGE_SIZE, DMA_FROM_DEVICE);
+	buffer->len2 = PAGE_SIZE;
+
+	buffer->mapped_as_page = Y_TRUE;
+
+	DBGPR("<--DWC_ETH_QOS_alloc_jumbo_rx_buf\n");
+
+	return 0;
+}
+
+/*!
+ * \brief allcation of Rx skb's for default rx mode.
+ *
+ * \details This function is invoked by other api's for
+ * allocating the Rx skb's with default Rx mode ie non-jumbo
+ * and non-split header mode.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] buffer – pointer to wrapper receive buffer data structure.
+ * \param[in] gfp – the type of memory allocation.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_alloc_rx_buf(struct DWC_ETH_QOS_prv_data *pdata,
+				    struct DWC_ETH_QOS_rx_buffer *buffer,
+				    gfp_t gfp)
+{
+	struct sk_buff *skb = buffer->skb;
+
+	DBGPR("-->DWC_ETH_QOS_alloc_rx_buf\n");
+
+	if (skb) {
+		skb_trim(skb, 0);
+		goto map_skb;
+	}
+
+	skb = __netdev_alloc_skb_ip_align(pdata->dev, pdata->rx_buffer_len, gfp);
+	if (skb == NULL) {
+		printk(KERN_ALERT "Failed to allocate skb\n");
+		return -ENOMEM;
+	}
+	buffer->skb = skb;
+	buffer->len = pdata->rx_buffer_len;
+ map_skb:
+	buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+				     pdata->rx_buffer_len, DMA_FROM_DEVICE);
+	if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+		printk(KERN_ALERT "failed to do the RX dma map\n");
+
+	buffer->mapped_as_page = Y_FALSE;
+
+	DBGPR("<--DWC_ETH_QOS_alloc_rx_buf\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief api to configure Rx function pointer after reset.
+ *
+ * \details This function will initialize the receive function pointers
+ * which are used for allocating skb's and receiving the packets based
+ * Rx mode - default/jumbo/split header.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_configure_rx_fun_ptr(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_configure_rx_fun_ptr\n");
+
+	if (pdata->rx_split_hdr) {
+		pdata->clean_rx = DWC_ETH_QOS_clean_split_hdr_rx_irq;
+		pdata->alloc_rx_buf = DWC_ETH_QOS_alloc_split_hdr_rx_buf;
+	}
+	else if (pdata->dev->mtu > DWC_ETH_QOS_ETH_FRAME_LEN) {
+		pdata->clean_rx = DWC_ETH_QOS_clean_jumbo_rx_irq;
+		pdata->alloc_rx_buf = DWC_ETH_QOS_alloc_jumbo_rx_buf;
+	} else {
+		pdata->rx_buffer_len = DWC_ETH_QOS_ETH_FRAME_LEN;
+		pdata->clean_rx = DWC_ETH_QOS_clean_rx_irq;
+		pdata->alloc_rx_buf = DWC_ETH_QOS_alloc_rx_buf;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_configure_rx_fun_ptr\n");
+}
+
+
+/*!
+ * \brief api to initialize default values.
+ *
+ * \details This function is used to initialize differnet parameters to
+ * default values which are common parameters between Tx and Rx path.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_default_common_confs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_default_common_confs\n");
+
+	pdata->drop_tx_pktburstcnt = 1;
+	pdata->mac_enable_count = 0;
+	pdata->incr_incrx = DWC_ETH_QOS_INCR_ENABLE;
+	pdata->flow_ctrl = DWC_ETH_QOS_FLOW_CTRL_TX_RX;
+	pdata->oldflow_ctrl = DWC_ETH_QOS_FLOW_CTRL_TX_RX;
+	pdata->power_down = 0;
+	pdata->tx_sa_ctrl_via_desc = DWC_ETH_QOS_SA0_NONE;
+	pdata->tx_sa_ctrl_via_reg = DWC_ETH_QOS_SA0_NONE;
+	pdata->hwts_tx_en = 0;
+	pdata->hwts_rx_en = 0;
+	pdata->l3_l4_filter = 0;
+	pdata->l2_filtering_mode = !!pdata->hw_feat.hash_tbl_sz;
+	pdata->tx_path_in_lpi_mode = 0;
+	pdata->use_lpi_tx_automate = true;
+	pdata->eee_active = 0;
+	pdata->one_nsec_accuracy = 1;
+
+	DBGPR("<--DWC_ETH_QOS_default_common_confs\n");
+}
+
+
+/*!
+ * \brief api to initialize Tx parameters.
+ *
+ * \details This function is used to initialize all Tx
+ * parameters to default values on reset.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] qInx – DMA channel/queue number to be initialized.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_default_tx_confs_single_q(
+		struct DWC_ETH_QOS_prv_data *pdata,
+		UINT qInx)
+{
+	struct DWC_ETH_QOS_tx_queue *queue_data = GET_TX_QUEUE_PTR(qInx);
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+		GET_TX_WRAPPER_DESC(qInx);
+
+	DBGPR("-->DWC_ETH_QOS_default_tx_confs_single_q\n");
+
+	queue_data->q_op_mode = q_op_mode[qInx];
+
+	desc_data->tx_threshold_val = DWC_ETH_QOS_TX_THRESHOLD_32;
+	desc_data->tsf_on = DWC_ETH_QOS_TSF_ENABLE;
+	desc_data->osf_on = DWC_ETH_QOS_OSF_ENABLE;
+	desc_data->tx_pbl = DWC_ETH_QOS_PBL_16;
+	desc_data->tx_vlan_tag_via_reg = Y_FALSE;
+	desc_data->tx_vlan_tag_ctrl = DWC_ETH_QOS_TX_VLAN_TAG_INSERT;
+	desc_data->vlan_tag_present = 0;
+	desc_data->context_setup = 0;
+	desc_data->default_mss = 0;
+
+	DBGPR("<--DWC_ETH_QOS_default_tx_confs_single_q\n");
+}
+
+
+/*!
+ * \brief api to initialize Rx parameters.
+ *
+ * \details This function is used to initialize all Rx
+ * parameters to default values on reset.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] qInx – DMA queue/channel number to be initialized.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_default_rx_confs_single_q(
+		struct DWC_ETH_QOS_prv_data *pdata,
+		UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+		GET_RX_WRAPPER_DESC(qInx);
+
+	DBGPR("-->DWC_ETH_QOS_default_rx_confs_single_q\n");
+
+	desc_data->rx_threshold_val = DWC_ETH_QOS_RX_THRESHOLD_64;
+	desc_data->rsf_on = DWC_ETH_QOS_RSF_DISABLE;
+	desc_data->rx_pbl = DWC_ETH_QOS_PBL_16;
+	desc_data->rx_outer_vlan_strip = DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS;
+	desc_data->rx_inner_vlan_strip = DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS;
+
+	DBGPR("<--DWC_ETH_QOS_default_rx_confs_single_q\n");
+}
+
+static void DWC_ETH_QOS_default_tx_confs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_default_tx_confs\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		DWC_ETH_QOS_default_tx_confs_single_q(pdata, qInx);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_default_tx_confs\n");
+}
+
+static void DWC_ETH_QOS_default_rx_confs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_default_rx_confs\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		DWC_ETH_QOS_default_rx_confs_single_q(pdata, qInx);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_default_rx_confs\n");
+}
+
+
+/*!
+* \brief API to open a deivce for data transmission & reception.
+*
+* \details Opens the interface. The interface is opned whenever
+* ifconfig activates it. The open method should register any
+* system resource it needs like I/O ports, IRQ, DMA, etc,
+* turn on the hardware, and perform any other setup your device requires.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return integer
+*
+* \retval 0 on success & negative number on failure.
+*/
+
+static int DWC_ETH_QOS_open(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	int ret = Y_SUCCESS;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+
+	DBGPR("-->DWC_ETH_QOS_open\n");
+
+	pdata->irq_number = dev->irq;
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	ret = request_irq(pdata->irq_number, DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg,
+			  IRQF_SHARED, DEV_NAME, pdata);
+#else
+	ret = request_irq(pdata->irq_number, DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS,
+			  IRQF_SHARED, DEV_NAME, pdata);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+	if (ret != 0) {
+		printk(KERN_ALERT "Unable to register IRQ %d\n",
+		       pdata->irq_number);
+		ret = -EBUSY;
+		goto err_irq_0;
+	}
+	ret = desc_if->alloc_buff_and_desc(pdata);
+	if (ret < 0) {
+		printk(KERN_ALERT
+		       "failed to allocate buffer/descriptor memory\n");
+		ret = -ENOMEM;
+		goto err_out_desc_buf_alloc_failed;
+	}
+
+	/* default configuration */
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	DWC_ETH_QOS_default_confs(pdata);
+#else
+	DWC_ETH_QOS_default_common_confs(pdata);
+	DWC_ETH_QOS_default_tx_confs(pdata);
+	DWC_ETH_QOS_default_rx_confs(pdata);
+	DWC_ETH_QOS_configure_rx_fun_ptr(pdata);
+
+	DWC_ETH_QOS_napi_enable_mq(pdata);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	DWC_ETH_QOS_set_rx_mode(dev);
+	desc_if->wrapper_tx_desc_init(pdata);
+	desc_if->wrapper_rx_desc_init(pdata);
+
+	DWC_ETH_QOS_tx_desc_mang_ds_dump(pdata);
+	DWC_ETH_QOS_rx_desc_mang_ds_dump(pdata);
+
+	DWC_ETH_QOS_mmc_setup(pdata);
+
+	/* initializes MAC and DMA */
+	hw_if->init(pdata);
+
+	if (pdata->hw_feat.pcs_sel)
+		hw_if->control_an(1, 0);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	hw_if->prepare_dev_pktgen(pdata);
+#endif
+
+	if (pdata->phydev)
+		phy_start(pdata->phydev);
+
+	pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
+
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	if (pdata->phydev)
+		netif_tx_start_all_queues(dev);
+#else
+	netif_tx_disable(dev);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	DBGPR("<--DWC_ETH_QOS_open\n");
+
+	return ret;
+
+ err_out_desc_buf_alloc_failed:
+	free_irq(pdata->irq_number, pdata);
+	pdata->irq_number = 0;
+
+ err_irq_0:
+	DBGPR("<--DWC_ETH_QOS_open\n");
+	return ret;
+}
+
+/*!
+* \brief API to close a device.
+*
+* \details Stops the interface. The interface is stopped when it is brought
+* down. This function should reverse operations performed at open time.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return integer
+*
+* \retval 0 on success & negative number on failure.
+*/
+
+static int DWC_ETH_QOS_close(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+
+	DBGPR("-->DWC_ETH_QOS_close\n");
+
+	if (pdata->eee_enabled)
+		del_timer_sync(&pdata->eee_ctrl_timer);
+
+	if (pdata->phydev)
+		phy_stop(pdata->phydev);
+
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	netif_tx_disable(dev);
+	DWC_ETH_QOS_all_ch_napi_disable(pdata);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	/* issue software reset to device */
+	hw_if->exit();
+	desc_if->tx_free_mem(pdata);
+	desc_if->rx_free_mem(pdata);
+	if (pdata->irq_number != 0) {
+		free_irq(pdata->irq_number, pdata);
+		pdata->irq_number = 0;
+	}
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	del_timer(&pdata->pg_timer);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	DBGPR("<--DWC_ETH_QOS_close\n");
+
+	return Y_SUCCESS;
+}
+
+
+/*!
+* \brief API to configure the multicast address in device.
+*
+* \details This function collects all the multicast addresse
+* and updates the device.
+*
+* \param[in] dev - pointer to net_device structure.
+*
+* \retval 0 if perfect filtering is seleted & 1 if hash
+* filtering is seleted.
+*/
+static int DWC_ETH_QOS_prepare_mc_list(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	u32 mc_filter[DWC_ETH_QOS_HTR_CNT];
+	struct netdev_hw_addr *ha = NULL;
+	int crc32_val = 0;
+	int ret = 0, i = 1;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_prepare_mc_list\n");
+
+	if (pdata->l2_filtering_mode) {
+		DBGPR_FILTER("select HASH FILTERING for mc addresses: mc_count = %d\n",
+				netdev_mc_count(dev));
+		ret = 1;
+		memset(mc_filter, 0, sizeof(mc_filter));
+
+		if (pdata->max_hash_table_size == 64) {
+			netdev_for_each_mc_addr(ha, dev) {
+				DBGPR_FILTER("mc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				/* The upper 6 bits of the calculated CRC are used to
+				 * index the content of the Hash Table Reg 0 and 1.
+				 * */
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 26);
+				/* The most significant bit determines the register
+				 * to use (Hash Table Reg X, X = 0 and 1) while the
+				 * other 5(0x1F) bits determines the bit within the
+				 * selected register
+				 * */
+				mc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		} else if (pdata->max_hash_table_size == 128) {
+			netdev_for_each_mc_addr(ha, dev) {
+				DBGPR_FILTER("mc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				/* The upper 7 bits of the calculated CRC are used to
+				 * index the content of the Hash Table Reg 0,1,2 and 3.
+				 * */
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 25);
+
+				printk(KERN_ALERT "crc_le = %#x, crc_be = %#x\n",
+						bitrev32(~crc32_le(~0, ha->addr, 6)),
+						bitrev32(~crc32_be(~0, ha->addr, 6)));
+
+				/* The most significant 2 bits determines the register
+				 * to use (Hash Table Reg X, X = 0,1,2 and 3) while the
+				 * other 5(0x1F) bits determines the bit within the
+				 * selected register
+				 * */
+				mc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		} else if (pdata->max_hash_table_size == 256) {
+			netdev_for_each_mc_addr(ha, dev) {
+				DBGPR_FILTER("mc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				/* The upper 8 bits of the calculated CRC are used to
+				 * index the content of the Hash Table Reg 0,1,2,3,4,
+				 * 5,6, and 7.
+				 * */
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 24);
+				/* The most significant 3 bits determines the register
+				 * to use (Hash Table Reg X, X = 0,1,2,3,4,5,6 and 7) while
+				 * the other 5(0x1F) bits determines the bit within the
+				 * selected register
+				 * */
+				mc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		}
+
+		for (i = 0; i < DWC_ETH_QOS_HTR_CNT; i++)
+			hw_if->update_hash_table_reg(i, mc_filter[i]);
+
+	} else {
+		DBGPR_FILTER("select PERFECT FILTERING for mc addresses, mc_count = %d, max_addr_reg_cnt = %d\n",
+				netdev_mc_count(dev), pdata->max_addr_reg_cnt);
+
+		netdev_for_each_mc_addr(ha, dev) {
+			DBGPR_FILTER("mc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n", i,
+					ha->addr[0], ha->addr[1], ha->addr[2],
+					ha->addr[3], ha->addr[4], ha->addr[5]);
+			if (i < 32)
+				hw_if->update_mac_addr1_31_low_high_reg(i, ha->addr);
+			else
+				hw_if->update_mac_addr32_127_low_high_reg(i, ha->addr);
+			i++;
+		}
+	}
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_prepare_mc_list\n");
+
+	return ret;
+}
+
+/*!
+* \brief API to configure the unicast address in device.
+*
+* \details This function collects all the unicast addresses
+* and updates the device.
+*
+* \param[in] dev - pointer to net_device structure.
+*
+* \retval 0 if perfect filtering is seleted  & 1 if hash
+* filtering is seleted.
+*/
+static int DWC_ETH_QOS_prepare_uc_list(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	u32 uc_filter[DWC_ETH_QOS_HTR_CNT];
+	struct netdev_hw_addr *ha = NULL;
+	int crc32_val = 0;
+	int ret = 0, i = 1;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_prepare_uc_list\n");
+
+	if (pdata->l2_filtering_mode) {
+		DBGPR_FILTER("select HASH FILTERING for uc addresses: uc_count = %d\n",
+				netdev_uc_count(dev));
+		ret = 1;
+		memset(uc_filter, 0, sizeof(uc_filter));
+
+		if (pdata->max_hash_table_size == 64) {
+			netdev_for_each_uc_addr(ha, dev) {
+				DBGPR_FILTER("uc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 26);
+				uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		} else if (pdata->max_hash_table_size == 128) {
+			netdev_for_each_uc_addr(ha, dev) {
+				DBGPR_FILTER("uc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 25);
+				uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		} else if (pdata->max_hash_table_size == 256) {
+			netdev_for_each_uc_addr(ha, dev) {
+				DBGPR_FILTER("uc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n",i++,
+						ha->addr[0], ha->addr[1], ha->addr[2],
+						ha->addr[3], ha->addr[4], ha->addr[5]);
+				crc32_val =
+					(bitrev32(~crc32_le(~0, ha->addr, 6)) >> 24);
+				uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+			}
+		}
+
+		/* configure hash value of real/default interface also */
+		DBGPR_FILTER("real/default dev_addr = %#x:%#x:%#x:%#x:%#x:%#x\n",
+				dev->dev_addr[0], dev->dev_addr[1], dev->dev_addr[2],
+				dev->dev_addr[3], dev->dev_addr[4], dev->dev_addr[5]);
+
+		if (pdata->max_hash_table_size == 64) {
+			crc32_val =
+				(bitrev32(~crc32_le(~0, dev->dev_addr, 6)) >> 26);
+			uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+		} else if (pdata->max_hash_table_size == 128) {
+			crc32_val =
+				(bitrev32(~crc32_le(~0, dev->dev_addr, 6)) >> 25);
+			uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+
+		} else if (pdata->max_hash_table_size == 256) {
+			crc32_val =
+				(bitrev32(~crc32_le(~0, dev->dev_addr, 6)) >> 24);
+			uc_filter[crc32_val >> 5] |= (1 << (crc32_val & 0x1F));
+		}
+
+		for (i = 0; i < DWC_ETH_QOS_HTR_CNT; i++)
+			hw_if->update_hash_table_reg(i, uc_filter[i]);
+
+	} else {
+		DBGPR_FILTER("select PERFECT FILTERING for uc addresses: uc_count = %d\n",
+				netdev_uc_count(dev));
+
+		netdev_for_each_uc_addr(ha, dev) {
+			DBGPR_FILTER("uc addr[%d] = %#x:%#x:%#x:%#x:%#x:%#x\n", i,
+					ha->addr[0], ha->addr[1], ha->addr[2],
+					ha->addr[3], ha->addr[4], ha->addr[5]);
+			if (i < 32)
+				hw_if->update_mac_addr1_31_low_high_reg(i, ha->addr);
+			else
+				hw_if->update_mac_addr32_127_low_high_reg(i, ha->addr);
+			i++;
+		}
+	}
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_prepare_uc_list\n");
+
+	return ret;
+}
+
+/*!
+* \brief API to set the device receive mode
+*
+* \details The set_multicast_list function is called when the multicast list
+* for the device changes and when the flags change.
+*
+* \param[in] dev - pointer to net_device structure.
+*
+* \return void
+*/
+static void DWC_ETH_QOS_set_rx_mode(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned long flags;
+	unsigned char pr_mode = 0;
+	unsigned char huc_mode = 0;
+	unsigned char hmc_mode = 0;
+	unsigned char pm_mode = 0;
+	unsigned char hpf_mode = 0;
+	int mode, i;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_set_rx_mode\n");
+
+	spin_lock_irqsave(&pdata->lock, flags);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	DBGPR("PG Test running, no parameters will be changed\n");
+	spin_unlock_irqrestore(&pdata->lock, flags);
+	return;
+#endif
+
+	if (dev->flags & IFF_PROMISC) {
+		DBGPR_FILTER("PROMISCUOUS MODE (Accept all packets irrespective of DA)\n");
+		pr_mode = 1;
+	} else if ((dev->flags & IFF_ALLMULTI) ||
+			(netdev_mc_count(dev) > (pdata->max_hash_table_size))) {
+		DBGPR_FILTER("pass all multicast pkt\n");
+		pm_mode = 1;
+		if (pdata->max_hash_table_size) {
+			for (i = 0; i < DWC_ETH_QOS_HTR_CNT; i++)
+				hw_if->update_hash_table_reg(i, 0xffffffff);
+		}
+	} else if (!netdev_mc_empty(dev)) {
+		DBGPR_FILTER("pass list of multicast pkt\n");
+		if ((netdev_mc_count(dev) > (pdata->max_addr_reg_cnt - 1)) &&
+			(!pdata->max_hash_table_size)) {
+			/* switch to PROMISCUOUS mode */
+			pr_mode = 1;
+		} else {
+			mode = DWC_ETH_QOS_prepare_mc_list(dev);
+			if (mode) {
+				/* Hash filtering for multicast */
+				hmc_mode = 1;
+			} else {
+				/* Perfect filtering for multicast */
+				hmc_mode = 0;
+				hpf_mode = 1;
+			}
+		}
+	}
+
+	/* Handle multiple unicast addresses */
+	if ((netdev_uc_count(dev) > (pdata->max_addr_reg_cnt - 1)) &&
+			(!pdata->max_hash_table_size)) {
+		/* switch to PROMISCUOUS mode */
+		pr_mode = 1;
+	} else if (!netdev_uc_empty(dev)) {
+		mode = DWC_ETH_QOS_prepare_uc_list(dev);
+		if (mode) {
+			/* Hash filtering for unicast */
+			huc_mode = 1;
+		} else {
+			/* Perfect filtering for unicast */
+			huc_mode = 0;
+			hpf_mode = 1;
+		}
+	}
+
+	hw_if->config_mac_pkt_filter_reg(pr_mode, huc_mode,
+		hmc_mode, pm_mode, hpf_mode);
+
+	spin_unlock_irqrestore(&pdata->lock, flags);
+
+	DBGPR("<--DWC_ETH_QOS_set_rx_mode\n");
+}
+
+/*!
+* \brief API to calculate number of descriptor.
+*
+* \details This function is invoked by start_xmit function. This function
+* calculates number of transmit descriptor required for a given transfer.
+*
+* \param[in] pdata - pointer to private data structure
+* \param[in] skb - pointer to sk_buff structure
+* \param[in] qInx - Queue number.
+*
+* \return integer
+*
+* \retval number of descriptor required.
+*/
+
+UINT DWC_ETH_QOS_get_total_desc_cnt(struct DWC_ETH_QOS_prv_data *pdata,
+		struct sk_buff *skb, UINT qInx)
+{
+	UINT count = 0, size = 0;
+	INT length = 0;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	struct s_tx_pkt_features *tx_pkt_features = GET_TX_PKT_FEATURES_PTR;
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+
+	/* SG fragment count */
+	count += skb_shinfo(skb)->nr_frags;
+
+	/* descriptors required based on data limit per descriptor */
+	length = (skb->len - skb->data_len);
+	while (length) {
+		size = min(length, DWC_ETH_QOS_MAX_DATA_PER_TXD);
+		count++;
+		length = length - size;
+	}
+
+	/* we need one context descriptor to carry tso details */
+	if (skb_shinfo(skb)->gso_size != 0)
+		count++;
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	desc_data->vlan_tag_present = 0;
+	if (vlan_tx_tag_present(skb)) {
+		USHORT vlan_tag = vlan_tx_tag_get(skb);
+		vlan_tag |= (qInx << 13);
+		desc_data->vlan_tag_present = 1;
+		if (vlan_tag != desc_data->vlan_tag_id ||
+				desc_data->context_setup == 1) {
+			desc_data->vlan_tag_id = vlan_tag;
+			if (Y_TRUE == desc_data->tx_vlan_tag_via_reg) {
+				printk(KERN_ALERT "VLAN control info update via register\n\n");
+				hw_if->enable_vlan_reg_control(desc_data);
+			} else {
+				hw_if->enable_vlan_desc_control(pdata);
+				TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Wr
+				    (tx_pkt_features->pkt_attributes, 1);
+				TX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Wr
+					(tx_pkt_features->vlan_tag, vlan_tag);
+				/* we need one context descriptor to carry vlan tag info */
+				count++;
+			}
+		}
+		pdata->xstats.tx_vlan_pkt_n++;
+	}
+#endif
+
+	return count;
+}
+
+
+/*!
+* \brief API to transmit the packets
+*
+* \details The start_xmit function initiates the transmission of a packet.
+* The full packet (protocol headers and all) is contained in a socket buffer
+* (sk_buff) structure.
+*
+* \param[in] skb - pointer to sk_buff structure
+* \param[in] dev - pointer to net_device structure
+*
+* \return integer
+*
+* \retval 0
+*/
+
+static int DWC_ETH_QOS_start_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	UINT qInx = skb_get_queue_mapping(skb);
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct s_tx_pkt_features *tx_pkt_features = GET_TX_PKT_FEATURES_PTR;
+	unsigned long flags;
+	unsigned int desc_count = 0;
+	unsigned int count = 0;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+	INT retval = NETDEV_TX_OK;
+	UINT varvlan_pkt;
+	int tso;
+
+	DBGPR("-->DWC_ETH_QOS_start_xmit: skb->len = %d, qInx = %u\n",
+		skb->len, qInx);
+
+	spin_lock_irqsave(&pdata->tx_lock, flags);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	retval = NETDEV_TX_BUSY;
+	goto tx_netdev_return;
+#endif
+
+	if (skb->len <= 0) {
+		dev_kfree_skb_any(skb);
+		printk(KERN_ERR "%s : Empty skb received from stack\n",
+			dev->name);
+		goto tx_netdev_return;
+	}
+
+	if ((skb_shinfo(skb)->gso_size == 0) &&
+		(skb->len > DWC_ETH_QOS_MAX_SUPPORTED_MTU)) {
+		printk(KERN_ERR "%s : big packet = %d\n", dev->name,
+			(u16)skb->len);
+		dev_kfree_skb_any(skb);
+		dev->stats.tx_dropped++;
+		goto tx_netdev_return;
+	}
+
+	if ((pdata->eee_enabled) && (pdata->tx_path_in_lpi_mode) &&
+		(!pdata->use_lpi_tx_automate))
+		DWC_ETH_QOS_disable_eee_mode(pdata);
+
+	memset(&pdata->tx_pkt_features, 0, sizeof(pdata->tx_pkt_features));
+
+	/* check total number of desc required for current xfer */
+	desc_count = DWC_ETH_QOS_get_total_desc_cnt(pdata, skb, qInx);
+	if (desc_data->free_desc_cnt < desc_count) {
+		desc_data->queue_stopped = 1;
+		netif_stop_subqueue(dev, qInx);
+		DBGPR("stopped TX queue(%d) since there are no sufficient "
+			"descriptor available for the current transfer\n",
+			qInx);
+		retval = NETDEV_TX_BUSY;
+		goto tx_netdev_return;
+	}
+
+	/* check for hw tstamping */
+	if (pdata->hw_feat.tsstssel && pdata->hwts_tx_en) {
+		if(skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) {
+			/* declare that device is doing timestamping */
+			skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
+			TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_Mlf_Wr(tx_pkt_features->pkt_attributes, 1);
+			DBGPR_PTP("Got PTP pkt to transmit [qInx = %d, cur_tx = %d]\n",
+				qInx, desc_data->cur_tx);
+		}
+	}
+
+	tso = desc_if->handle_tso(dev, skb);
+	if (tso < 0) {
+		printk(KERN_ALERT "Unable to handle TSO\n");
+		dev_kfree_skb_any(skb);
+		retval = NETDEV_TX_OK;
+		goto tx_netdev_return;
+	}
+	if (tso) {
+		pdata->xstats.tx_tso_pkt_n++;
+		TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_Mlf_Wr(tx_pkt_features->pkt_attributes, 1);
+	} else if (skb->ip_summed == CHECKSUM_PARTIAL) {
+		TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_Mlf_Wr(tx_pkt_features->pkt_attributes, 1);
+	}
+
+	count = desc_if->map_tx_skb(dev, skb);
+	if (count == 0) {
+		dev_kfree_skb_any(skb);
+		retval = NETDEV_TX_OK;
+		goto tx_netdev_return;
+	}
+
+	desc_data->packet_count = count;
+
+	if (tso && (desc_data->default_mss != tx_pkt_features->mss))
+		count++;
+
+	dev->trans_start = jiffies;
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Rd
+		(tx_pkt_features->pkt_attributes, varvlan_pkt);
+	if (varvlan_pkt == 0x1)
+		count++;
+#endif
+
+	desc_data->free_desc_cnt -= count;
+	desc_data->tx_pkt_queued += count;
+
+#ifdef DWC_ETH_QOS_ENABLE_TX_PKT_DUMP
+	print_pkt(skb, skb->len, 1, (desc_data->cur_tx - 1));
+#endif
+
+	/* fallback to software time stamping if core doesn't
+	 * support hardware time stamping */
+	if ((pdata->hw_feat.tsstssel == 0) || (pdata->hwts_tx_en == 0))
+		skb_tx_timestamp(skb);
+
+	/* configure required descriptor fields for transmission */
+	hw_if->pre_xmit(pdata, qInx);
+
+tx_netdev_return:
+	spin_unlock_irqrestore(&pdata->tx_lock, flags);
+
+	DBGPR("<--DWC_ETH_QOS_start_xmit\n");
+
+	return retval;
+}
+
+static void DWC_ETH_QOS_print_rx_tstamp_info(struct s_RX_NORMAL_DESC *rxdesc,
+	unsigned int qInx)
+{
+	u32 ptp_status = 0;
+	u32 pkt_type = 0;
+	char *tstamp_dropped = NULL;
+	char *tstamp_available = NULL;
+	char *ptp_version = NULL;
+	char *ptp_pkt_type = NULL;
+	char *ptp_msg_type = NULL;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_print_rx_tstamp_info\n");
+
+	/* status in RDES1 is not valid */
+	if (!(rxdesc->RDES3 & DWC_ETH_QOS_RDESC3_RS1V))
+		return;
+
+	ptp_status = rxdesc->RDES1;
+	tstamp_dropped = ((ptp_status & 0x8000) ? "YES" : "NO");
+	tstamp_available = ((ptp_status & 0x4000) ? "YES" : "NO");
+	ptp_version = ((ptp_status & 0x2000) ? "v2 (1588-2008)" : "v1 (1588-2002)");
+	ptp_pkt_type = ((ptp_status & 0x1000) ? "ptp over Eth" : "ptp over IPv4/6");
+
+	pkt_type = ((ptp_status & 0xF00) > 8);
+	switch (pkt_type) {
+	case 0:
+		ptp_msg_type = "NO PTP msg received";
+		break;
+	case 1:
+		ptp_msg_type = "SYNC";
+		break;
+	case 2:
+		ptp_msg_type = "Follow_Up";
+		break;
+	case 3:
+		ptp_msg_type = "Delay_Req";
+		break;
+	case 4:
+		ptp_msg_type = "Delay_Resp";
+		break;
+	case 5:
+		ptp_msg_type = "Pdelay_Req";
+		break;
+	case 6:
+		ptp_msg_type = "Pdelay_Resp";
+		break;
+	case 7:
+		ptp_msg_type = "Pdelay_Resp_Follow_up";
+		break;
+	case 8:
+		ptp_msg_type = "Announce";
+		break;
+	case 9:
+		ptp_msg_type = "Management";
+		break;
+	case 10:
+		ptp_msg_type = "Signaling";
+		break;
+	case 11:
+	case 12:
+	case 13:
+	case 14:
+		ptp_msg_type = "Reserved";
+		break;
+	case 15:
+		ptp_msg_type = "PTP pkr with Reserved Msg Type";
+		break;
+	}
+
+	DBGPR_PTP("Rx timestamp detail for queue %d\n"
+			"tstamp dropped    = %s\n"
+			"tstamp available  = %s\n"
+			"PTP version       = %s\n"
+			"PTP Pkt Type      = %s\n"
+			"PTP Msg Type      = %s\n",
+			qInx, tstamp_dropped, tstamp_available,
+			ptp_version, ptp_pkt_type, ptp_msg_type);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_print_rx_tstamp_info\n");
+}
+
+
+/*!
+* \brief API to get rx time stamp value.
+*
+* \details This function will read received packet's timestamp from
+* the descriptor and pass it to stack and also perform some sanity checks.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] skb - pointer to sk_buff structure.
+* \param[in] desc_data - pointer to wrapper receive descriptor structure.
+* \param[in] qInx - Queue/Channel number.
+*
+* \return integer
+*
+* \retval 0 if no context descriptor
+* \retval 1 if timestamp is valid
+* \retval 2 if time stamp is corrupted
+*/
+
+static unsigned char DWC_ETH_QOS_get_rx_hwtstamp(
+	struct DWC_ETH_QOS_prv_data *pdata,
+	struct sk_buff *skb,
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data,
+	unsigned int qInx)
+{
+	struct s_RX_NORMAL_DESC *rx_normal_desc =
+		GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+	struct s_RX_CONTEXT_DESC *rx_context_desc = NULL;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct skb_shared_hwtstamps *shhwtstamp = NULL;
+	u64 ns;
+	int retry, ret;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_get_rx_hwtstamp\n");
+
+	DWC_ETH_QOS_print_rx_tstamp_info(rx_normal_desc, qInx);
+
+	desc_data->dirty_rx++;
+	INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
+	rx_context_desc = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+
+	DBGPR_PTP("\nRX_CONTEX_DESC[%d %4p %d RECEIVED FROM DEVICE]"\
+			" = %#x:%#x:%#x:%#x",
+			qInx, rx_context_desc, desc_data->cur_rx, rx_context_desc->RDES0,
+			rx_context_desc->RDES1,
+			rx_context_desc->RDES2, rx_context_desc->RDES3);
+
+	/* check rx tsatmp */
+	for (retry = 0; retry < 10; retry++) {
+		ret = hw_if->get_rx_tstamp_status(rx_context_desc);
+		if (ret == 1) {
+			/* time stamp is valid */
+			break;
+		} else if (ret == 0) {
+			printk(KERN_ALERT "Device has not yet updated the context "
+				"desc to hold Rx time stamp(retry = %d)\n", retry);
+		} else {
+			printk(KERN_ALERT "Error: Rx time stamp is corrupted(retry = %d)\n", retry);
+			return 2;
+		}
+	}
+
+	if (retry == 10) {
+			printk(KERN_ALERT "Device has not yet updated the context "
+				"desc to hold Rx time stamp(retry = %d)\n", retry);
+			desc_data->dirty_rx--;
+			DECR_RX_DESC_INDEX(desc_data->cur_rx);
+			return 0;
+	}
+
+	pdata->xstats.rx_timestamp_captured_n++;
+	/* get valid tstamp */
+	ns = hw_if->get_rx_tstamp(rx_context_desc);
+
+	shhwtstamp = skb_hwtstamps(skb);
+	memset(shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
+	shhwtstamp->hwtstamp = ns_to_ktime(ns);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_get_rx_hwtstamp\n");
+
+	return 1;
+}
+
+
+/*!
+* \brief API to get tx time stamp value.
+*
+* \details This function will read timestamp from the descriptor
+* and pass it to stack and also perform some sanity checks.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] txdesc - pointer to transmit descriptor structure.
+* \param[in] skb - pointer to sk_buff structure.
+*
+* \return integer
+*
+* \retval 1 if time stamp is taken
+* \retval 0 if time stamp in not taken/valid
+*/
+
+static unsigned int DWC_ETH_QOS_get_tx_hwtstamp(
+	struct DWC_ETH_QOS_prv_data *pdata,
+	struct s_TX_NORMAL_DESC *txdesc,
+	struct sk_buff *skb)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct skb_shared_hwtstamps shhwtstamp;
+	u64 ns;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_get_tx_hwtstamp\n");
+
+	if (hw_if->drop_tx_status_enabled() == 0) {
+		/* check tx tstamp status */
+		if (!hw_if->get_tx_tstamp_status(txdesc)) {
+			printk(KERN_ALERT "tx timestamp is not captured for this packet\n");
+			return 0;
+		}
+
+		/* get the valid tstamp */
+		ns = hw_if->get_tx_tstamp(txdesc);
+	} else {
+		/* drop tx status mode is enabled, hence read time
+		 * stamp from register instead of descriptor */
+
+		/* check tx tstamp status */
+		if (!hw_if->get_tx_tstamp_status_via_reg()) {
+			printk(KERN_ALERT "tx timestamp is not captured for this packet\n");
+			return 0;
+		}
+
+		/* get the valid tstamp */
+		ns = hw_if->get_tx_tstamp_via_reg();
+	}
+
+	pdata->xstats.tx_timestamp_captured_n++;
+	memset(&shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
+	shhwtstamp.hwtstamp = ns_to_ktime(ns);
+	/* pass tstamp to stack */
+	skb_tstamp_tx(skb, &shhwtstamp);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_get_tx_hwtstamp\n");
+
+	return 1;
+}
+
+
+/*!
+* \brief API to update the tx status.
+*
+* \details This function is called in isr handler once after getting
+* transmit complete interrupt to update the transmited packet status
+* and it does some house keeping work like updating the
+* private data structure variables.
+*
+* \param[in] dev - pointer to net_device structure
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_tx_interrupt(struct net_device *dev,
+				     struct DWC_ETH_QOS_prv_data *pdata,
+				     UINT qInx)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct s_TX_NORMAL_DESC *txptr = NULL;
+	struct DWC_ETH_QOS_tx_buffer *buffer = NULL;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct desc_if_struct *desc_if = &(pdata->desc_if);
+#ifndef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	int err_incremented;
+#endif
+	unsigned int tstamp_taken = 0;
+	unsigned long flags;
+
+	DBGPR("-->DWC_ETH_QOS_tx_interrupt: desc_data->tx_pkt_queued = %d"
+		" dirty_tx = %d, qInx = %u\n",
+		desc_data->tx_pkt_queued, desc_data->dirty_tx, qInx);
+
+	spin_lock_irqsave(&pdata->tx_lock, flags);
+
+	pdata->xstats.tx_clean_n[qInx]++;
+	while (desc_data->tx_pkt_queued > 0) {
+		txptr = GET_TX_DESC_PTR(qInx, desc_data->dirty_tx);
+		buffer = GET_TX_BUF_PTR(qInx, desc_data->dirty_tx);
+		tstamp_taken = 0;
+
+		if (!hw_if->tx_complete(txptr))
+			break;
+
+#ifdef DWC_ETH_QOS_ENABLE_TX_DESC_DUMP
+		dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx,
+			     0, qInx);
+#endif
+
+#ifndef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+		/* update the tx error if any by looking at last segment
+		 * for NORMAL descriptors
+		 * */
+		if ((hw_if->get_tx_desc_ls(txptr)) && !(hw_if->get_tx_desc_ctxt(txptr))) {
+			/* check whether skb support hw tstamp */
+			if ((pdata->hw_feat.tsstssel) &&
+				(skb_shinfo(buffer->skb)->tx_flags & SKBTX_IN_PROGRESS)) {
+				tstamp_taken = DWC_ETH_QOS_get_tx_hwtstamp(pdata,
+					txptr, buffer->skb);
+				if (tstamp_taken) {
+					//dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx,
+					//		0, qInx);
+					DBGPR_PTP("passed tx timestamp to stack[qInx = %d, dirty_tx = %d]\n",
+						qInx, desc_data->dirty_tx);
+				}
+			}
+
+			err_incremented = 0;
+			if (hw_if->tx_window_error) {
+				if (hw_if->tx_window_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_window_errors++;
+				}
+			}
+			if (hw_if->tx_aborted_error) {
+				if (hw_if->tx_aborted_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_aborted_errors++;
+					if (hw_if->tx_handle_aborted_error)
+						hw_if->tx_handle_aborted_error(txptr);
+				}
+			}
+			if (hw_if->tx_carrier_lost_error) {
+				if (hw_if->tx_carrier_lost_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_carrier_errors++;
+				}
+			}
+			if (hw_if->tx_fifo_underrun) {
+				if (hw_if->tx_fifo_underrun(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_fifo_errors++;
+					if (hw_if->tx_update_fifo_threshold)
+						hw_if->tx_update_fifo_threshold(txptr);
+				}
+			}
+			if (hw_if->tx_get_collision_count)
+				dev->stats.collisions +=
+				    hw_if->tx_get_collision_count(txptr);
+
+			if (err_incremented == 1)
+				dev->stats.tx_errors++;
+
+			pdata->xstats.q_tx_pkt_n[qInx]++;
+			pdata->xstats.tx_pkt_n++;
+			dev->stats.tx_packets++;
+		}
+#else
+		if ((hw_if->get_tx_desc_ls(txptr)) && !(hw_if->get_tx_desc_ctxt(txptr))) {
+			/* check whether skb support hw tstamp */
+			if ((pdata->hw_feat.tsstssel) &&
+				(skb_shinfo(buffer->skb)->tx_flags & SKBTX_IN_PROGRESS)) {
+				tstamp_taken = DWC_ETH_QOS_get_tx_hwtstamp(pdata,
+					txptr, buffer->skb);
+				if (tstamp_taken) {
+					dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx,
+							0, qInx);
+					DBGPR_PTP("passed tx timestamp to stack[qInx = %d, dirty_tx = %d]\n",
+						qInx, desc_data->dirty_tx);
+				}
+			}
+		}
+#endif
+		dev->stats.tx_bytes += buffer->len;
+		dev->stats.tx_bytes += buffer->len2;
+		desc_if->unmap_tx_skb(pdata, buffer);
+
+		/* reset the descriptor so that driver/host can reuse it */
+		hw_if->tx_desc_reset(desc_data->dirty_tx, pdata, qInx);
+
+		INCR_TX_DESC_INDEX(desc_data->dirty_tx, 1);
+		desc_data->free_desc_cnt++;
+		desc_data->tx_pkt_queued--;
+	}
+
+	if ((desc_data->queue_stopped == 1) && (desc_data->free_desc_cnt > 0)) {
+		desc_data->queue_stopped = 0;
+		netif_wake_subqueue(dev, qInx);
+	}
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+	/* DMA has finished Transmitting data to MAC Tx-Fifo */
+	MAC_MCR_TE_UdfWr(1);
+#endif
+
+	if ((pdata->eee_enabled) && (!pdata->tx_path_in_lpi_mode) &&
+		(!pdata->use_lpi_tx_automate)) {
+		DWC_ETH_QOS_enable_eee_mode(pdata);
+		mod_timer(&pdata->eee_ctrl_timer,
+			DWC_ETH_QOS_LPI_TIMER(DWC_ETH_QOS_DEFAULT_LPI_TIMER));
+	}
+
+	spin_unlock_irqrestore(&pdata->tx_lock, flags);
+
+	DBGPR("<--DWC_ETH_QOS_tx_interrupt: desc_data->tx_pkt_queued = %d\n",
+	      desc_data->tx_pkt_queued);
+}
+
+#ifdef YDEBUG_FILTER
+static void DWC_ETH_QOS_check_rx_filter_status(struct s_RX_NORMAL_DESC *RX_NORMAL_DESC)
+{
+	u32 rdes2 = RX_NORMAL_DESC->RDES2;
+	u32 rdes3 = RX_NORMAL_DESC->RDES3;
+
+	/* Receive Status RDES2 Valid ? */
+	if ((rdes3 & 0x8000000) == 0x8000000) {
+		if ((rdes2 & 0x400) == 0x400)
+			printk(KERN_ALERT "ARP pkt received\n");
+		if ((rdes2 & 0x800) == 0x800)
+			printk(KERN_ALERT "ARP reply not generated\n");
+		if ((rdes2 & 0x8000) == 0x8000)
+			printk(KERN_ALERT "VLAN pkt passed VLAN filter\n");
+		if ((rdes2 & 0x10000) == 0x10000)
+			printk(KERN_ALERT "SA Address filter fail\n");
+		if ((rdes2 & 0x20000) == 0x20000)
+			printk(KERN_ALERT "DA Addess filter fail\n");
+		if ((rdes2 & 0x40000) == 0x40000)
+			printk(KERN_ALERT "pkt passed the HASH filter in MAC and HASH value = %#x\n",
+					(rdes2 >> 19) & 0xff);
+		if ((rdes2 & 0x8000000) == 0x8000000)
+			printk(KERN_ALERT "L3 filter(%d) Match\n", ((rdes2 >> 29) & 0x7));
+		if ((rdes2 & 0x10000000) == 0x10000000)
+			printk(KERN_ALERT "L4 filter(%d) Match\n", ((rdes2 >> 29) & 0x7));
+	}
+}
+#endif /* YDEBUG_FILTER */
+
+
+/* pass skb to upper layer */
+static void DWC_ETH_QOS_receive_skb(struct DWC_ETH_QOS_prv_data *pdata,
+				    struct net_device *dev, struct sk_buff *skb,
+				    UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_queue *rx_queue = GET_RX_QUEUE_PTR(qInx);
+
+	skb_record_rx_queue(skb, qInx);
+	skb->dev = dev;
+	skb->protocol = eth_type_trans(skb, dev);
+
+	if (dev->features & NETIF_F_GRO) {
+		napi_gro_receive(&rx_queue->napi, skb);
+	} else if ((dev->features & NETIF_F_LRO) &&
+		(skb->ip_summed == CHECKSUM_UNNECESSARY)) {
+		lro_receive_skb(&rx_queue->lro_mgr, skb, (void *)pdata);
+		rx_queue->lro_flush_needed = 1;
+	} else {
+		netif_receive_skb(skb);
+	}
+}
+
+static void DWC_ETH_QOS_consume_page(struct DWC_ETH_QOS_rx_buffer *buffer,
+				     struct sk_buff *skb,
+				     u16 length, u16 buf2_used)
+{
+	buffer->page = NULL;
+	if (buf2_used)
+		buffer->page2 = NULL;
+	skb->len += length;
+	skb->data_len += length;
+	skb->truesize += length;
+}
+
+static void DWC_ETH_QOS_consume_page_split_hdr(
+				struct DWC_ETH_QOS_rx_buffer *buffer,
+				struct sk_buff *skb,
+				u16 length,
+				USHORT page2_used)
+{
+	if (page2_used)
+		buffer->page2 = NULL;
+
+	skb->len += length;
+	skb->data_len += length;
+	skb->truesize += length;
+}
+
+/* Receive Checksum Offload configuration */
+static inline void DWC_ETH_QOS_config_rx_csum(struct DWC_ETH_QOS_prv_data *pdata,
+		struct sk_buff *skb,
+		struct s_RX_NORMAL_DESC *rx_normal_desc)
+{
+	UINT varRDES1;
+
+	skb->ip_summed = CHECKSUM_NONE;
+
+	if ((pdata->dev_state & NETIF_F_RXCSUM) == NETIF_F_RXCSUM) {
+		/* Receive Status RDES1 Valid ? */
+		if ((rx_normal_desc->RDES3 & DWC_ETH_QOS_RDESC3_RS1V)) {
+			/* check(RDES1.IPCE bit) whether device has done csum correctly or not */
+			RX_NORMAL_DESC_RDES1_Ml_Rd(rx_normal_desc->RDES1, varRDES1);
+			if ((varRDES1 & 0xC8) == 0x0)
+				skb->ip_summed = CHECKSUM_UNNECESSARY;	/* csum done by device */
+		}
+	}
+}
+
+static inline void DWC_ETH_QOS_get_rx_vlan(struct DWC_ETH_QOS_prv_data *pdata,
+			struct sk_buff *skb,
+			struct s_RX_NORMAL_DESC *rx_normal_desc)
+{
+	USHORT vlan_tag = 0;
+
+	if ((pdata->dev_state & NETIF_F_HW_VLAN_CTAG_RX) == NETIF_F_HW_VLAN_CTAG_RX) {
+		/* Receive Status RDES0 Valid ? */
+		if ((rx_normal_desc->RDES3 & DWC_ETH_QOS_RDESC3_RS0V)) {
+			/* device received frame with VLAN Tag or
+			 * double VLAN Tag ? */
+			if (((rx_normal_desc->RDES3 & DWC_ETH_QOS_RDESC3_LT) == 0x40000)
+				|| ((rx_normal_desc->RDES3 & DWC_ETH_QOS_RDESC3_LT) == 0x50000)) {
+				vlan_tag = rx_normal_desc->RDES0 & 0xffff;
+				/* insert VLAN tag into skb */
+				__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q), vlan_tag);
+				pdata->xstats.rx_vlan_pkt_n++;
+			}
+		}
+	}
+}
+
+/* This api check for payload type and returns
+ * 1 if payload load is TCP else returns 0;
+ * */
+static int DWC_ETH_QOS_check_for_tcp_payload(struct s_RX_NORMAL_DESC *rxdesc)
+{
+		u32 pt_type = 0;
+		int ret = 0;
+
+		if (rxdesc->RDES3 & DWC_ETH_QOS_RDESC3_RS1V) {
+				pt_type = rxdesc->RDES1 & DWC_ETH_QOS_RDESC1_PT;
+				if (pt_type == DWC_ETH_QOS_RDESC1_PT_TCP)
+						ret = 1;
+		}
+
+		return ret;
+}
+
+/*!
+* \brief API to pass the Rx packets to stack if split header
+* feature is enabled.
+*
+* \details This function is invoked by main NAPI function if RX
+* split header feature is enabled. This function checks the device
+* descriptor for the packets and passes it to stack if any packtes
+* are received by device.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] quota - maximum no. of packets that we are allowed to pass
+* to into the kernel.
+* \param[in] qInx - DMA channel/queue no. to be checked for packet.
+*
+* \return integer
+*
+* \retval number of packets received.
+*/
+
+static int DWC_ETH_QOS_clean_split_hdr_rx_irq(
+			struct DWC_ETH_QOS_prv_data *pdata,
+			int quota,
+			UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct net_device *dev = pdata->dev;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct sk_buff *skb = NULL;
+	int received = 0;
+	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC = NULL;
+	u16 pkt_len;
+	unsigned short hdr_len = 0;
+	unsigned short payload_len = 0;
+	unsigned char intermediate_desc_cnt = 0;
+	unsigned char buf2_used = 0;
+	int ret;
+
+	DBGPR("-->DWC_ETH_QOS_clean_split_hdr_rx_irq: qInx = %u, quota = %d\n",
+		qInx, quota);
+
+	while (received < quota) {
+		buffer = GET_RX_BUF_PTR(qInx, desc_data->cur_rx);
+		RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+
+		/* check for data availability */
+		if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_OWN)) {
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
+			dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
+			/* assign it to new skb */
+			skb = buffer->skb;
+			buffer->skb = NULL;
+
+			/* first buffer pointer */
+			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
+				       (2*buffer->rx_hdr_size), DMA_FROM_DEVICE);
+			buffer->dma = 0;
+
+			/* second buffer pointer */
+			dma_unmap_page(&pdata->pdev->dev, buffer->dma2,
+				       PAGE_SIZE, DMA_FROM_DEVICE);
+			buffer->dma2 = 0;
+
+			/* get the packet length */
+			pkt_len =
+			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_PL);
+
+			/* FIRST desc and Receive Status RDES2 Valid ? */
+			if ((RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_FD) &&
+				(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_RS2V)) {
+				/* get header length */
+				hdr_len = (RX_NORMAL_DESC->RDES2 & DWC_ETH_QOS_RDESC2_HL);
+				DBGPR("Device has %s HEADER SPLIT: hdr_len = %d\n",
+						(hdr_len ? "done" : "not done"), hdr_len);
+				if (hdr_len)
+					pdata->xstats.rx_split_hdr_pkt_n++;
+			}
+
+			/* check for bad packet,
+			 * error is valid only for last descriptor(OWN + LD bit set).
+			 * */
+			if ((RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_ES) &&
+			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
+				DBGPR("Error in rcved pkt, failed to pass it to upper layer\n");
+				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+				dev->stats.rx_errors++;
+				DWC_ETH_QOS_update_rx_errors(dev,
+					RX_NORMAL_DESC->RDES3);
+
+				/* recycle both page/buff and skb */
+				buffer->skb = skb;
+				if (desc_data->skb_top)
+					dev_kfree_skb_any(desc_data->skb_top);
+
+				desc_data->skb_top = NULL;
+				goto next_desc;
+			}
+
+			if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
+				intermediate_desc_cnt++;
+				buf2_used = 1;
+				/* this descriptor is only the beginning/middle */
+				if (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_FD) {
+					/* this is the beginning of a chain */
+
+					/* here skb/skb_top may contain
+					 * if (device done split header)
+					 *	only header
+					 * else
+					 *	header/(header + payload)
+					 * */
+					desc_data->skb_top = skb;
+					/* page2 always contain only payload */
+					if (hdr_len) {
+						/* add header len to first skb->len */
+						skb_put(skb, hdr_len);
+						payload_len = pdata->rx_buffer_len;
+						skb_fill_page_desc(skb, 0,
+							buffer->page2, 0,
+							payload_len);
+					} else {
+						/* add header len to first skb->len */
+						skb_put(skb, buffer->rx_hdr_size);
+						/* No split header, hence
+						 * pkt_len = (payload + hdr_len)
+						 * */
+						payload_len = (pkt_len - buffer->rx_hdr_size);
+						skb_fill_page_desc(skb, 0,
+							buffer->page2, 0,
+							payload_len);
+					}
+				} else {
+					/* this is the middle of a chain */
+					payload_len = pdata->rx_buffer_len;
+					skb_fill_page_desc(desc_data->skb_top,
+						skb_shinfo(desc_data->skb_top)->nr_frags,
+						buffer->page2, 0,
+						payload_len);
+
+					/* re-use this skb, as consumed only the page */
+					buffer->skb = skb;
+				}
+				DWC_ETH_QOS_consume_page_split_hdr(buffer,
+							 desc_data->skb_top,
+							 payload_len, buf2_used);
+				goto next_desc;
+			} else {
+				if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_FD)) {
+					buf2_used = 1;
+					/* end of the chain */
+					if (hdr_len) {
+						payload_len = (pkt_len -
+							(pdata->rx_buffer_len * intermediate_desc_cnt) -
+							hdr_len);
+					} else {
+						payload_len = (pkt_len -
+							(pdata->rx_buffer_len * intermediate_desc_cnt) -
+							buffer->rx_hdr_size);
+					}
+
+					skb_fill_page_desc(desc_data->skb_top,
+						skb_shinfo(desc_data->skb_top)->nr_frags,
+						buffer->page2, 0,
+						payload_len);
+
+					/* re-use this skb, as consumed only the page */
+					buffer->skb = skb;
+					skb = desc_data->skb_top;
+					desc_data->skb_top = NULL;
+					DWC_ETH_QOS_consume_page_split_hdr(buffer, skb,
+								 payload_len, buf2_used);
+				} else {
+					/* no chain, got both FD + LD together */
+					if (hdr_len) {
+						buf2_used = 1;
+						/* add header len to first skb->len */
+						skb_put(skb, hdr_len);
+
+						payload_len = pkt_len - hdr_len;
+						skb_fill_page_desc(skb, 0,
+							buffer->page2, 0,
+							payload_len);
+					} else {
+						/* No split header, hence
+						 * payload_len = (payload + hdr_len)
+						 * */
+						if (pkt_len > buffer->rx_hdr_size) {
+							buf2_used = 1;
+							/* add header len to first skb->len */
+							skb_put(skb, buffer->rx_hdr_size);
+
+							payload_len = (pkt_len - buffer->rx_hdr_size);
+							skb_fill_page_desc(skb, 0,
+								buffer->page2, 0,
+								payload_len);
+						} else {
+							buf2_used = 0;
+							/* add header len to first skb->len */
+							skb_put(skb, pkt_len);
+							payload_len = 0; /* no data in page2 */
+						}
+					}
+					DWC_ETH_QOS_consume_page_split_hdr(buffer,
+							skb, payload_len,
+							buf2_used);
+				}
+				/* reset for next new packet/frame */
+				intermediate_desc_cnt = 0;
+				hdr_len = 0;
+			}
+
+			DWC_ETH_QOS_config_rx_csum(pdata, skb, RX_NORMAL_DESC);
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+			DWC_ETH_QOS_get_rx_vlan(pdata, skb, RX_NORMAL_DESC);
+#endif
+
+#ifdef YDEBUG_FILTER
+			DWC_ETH_QOS_check_rx_filter_status(RX_NORMAL_DESC);
+#endif
+
+			if ((pdata->hw_feat.tsstssel) && (pdata->hwts_rx_en)) {
+				/* get rx tstamp if available */
+				if (hw_if->rx_tstamp_available(RX_NORMAL_DESC)) {
+					ret = DWC_ETH_QOS_get_rx_hwtstamp(pdata,
+							skb, desc_data, qInx);
+					if (ret == 0) {
+						/* device has not yet updated the CONTEXT desc to hold the
+						 * time stamp, hence delay the packet reception
+						 * */
+						buffer->skb = skb;
+						buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+								pdata->rx_buffer_len, DMA_FROM_DEVICE);
+						if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+							printk(KERN_ALERT "failed to do the RX dma map\n");
+
+						goto rx_tstmp_failed;
+					}
+				}
+			}
+
+			if (!(dev->features & NETIF_F_GRO) &&
+						(dev->features & NETIF_F_LRO)) {
+					pdata->tcp_pkt =
+							DWC_ETH_QOS_check_for_tcp_payload(RX_NORMAL_DESC);
+			}
+
+			dev->last_rx = jiffies;
+			/* update the statistics */
+			dev->stats.rx_packets++;
+			dev->stats.rx_bytes += skb->len;
+			DWC_ETH_QOS_receive_skb(pdata, dev, skb, qInx);
+			received++;
+ next_desc:
+			desc_data->dirty_rx++;
+			if (desc_data->dirty_rx >= desc_data->skb_realloc_threshold)
+				desc_if->realloc_skb(pdata, qInx);
+
+			INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
+			buf2_used = 0;
+		} else {
+			/* no more data to read */
+			break;
+		}
+	}
+
+rx_tstmp_failed:
+
+	if (desc_data->dirty_rx)
+		desc_if->realloc_skb(pdata, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_clean_split_hdr_rx_irq: received = %d\n",
+		received);
+
+	return received;
+}
+
+
+/*!
+* \brief API to pass the Rx packets to stack if jumbo frame
+* is enabled.
+*
+* \details This function is invoked by main NAPI function if Rx
+* jumbe frame is enabled. This function checks the device descriptor
+* for the packets and passes it to stack if any packtes are received
+* by device.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] quota - maximum no. of packets that we are allowed to pass
+* to into the kernel.
+* \param[in] qInx - DMA channel/queue no. to be checked for packet.
+*
+* \return integer
+*
+* \retval number of packets received.
+*/
+
+static int DWC_ETH_QOS_clean_jumbo_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
+					  int quota,
+					  UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct net_device *dev = pdata->dev;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct sk_buff *skb = NULL;
+	int received = 0;
+	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC = NULL;
+	u16 pkt_len;
+	UCHAR intermediate_desc_cnt = 0;
+	unsigned int buf2_used;
+	int ret;
+
+	DBGPR("-->DWC_ETH_QOS_clean_jumbo_rx_irq: qInx = %u, quota = %d\n",
+		qInx, quota);
+
+	while (received < quota) {
+		buffer = GET_RX_BUF_PTR(qInx, desc_data->cur_rx);
+		RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+
+		/* check for data availability */
+		if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_OWN)) {
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
+			dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
+			/* assign it to new skb */
+			skb = buffer->skb;
+			buffer->skb = NULL;
+
+			/* first buffer pointer */
+			dma_unmap_page(&pdata->pdev->dev, buffer->dma,
+				       PAGE_SIZE, DMA_FROM_DEVICE);
+			buffer->dma = 0;
+
+			/* second buffer pointer */
+			dma_unmap_page(&pdata->pdev->dev, buffer->dma2,
+				       PAGE_SIZE, DMA_FROM_DEVICE);
+			buffer->dma2 = 0;
+
+			/* get the packet length */
+			pkt_len =
+				(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_PL);
+
+			/* check for bad packet,
+			 * error is valid only for last descriptor (OWN + LD bit set).
+			 * */
+			if ((RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_ES) &&
+			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
+				DBGPR("Error in rcved pkt, failed to pass it to upper layer\n");
+				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+				dev->stats.rx_errors++;
+				DWC_ETH_QOS_update_rx_errors(dev,
+					RX_NORMAL_DESC->RDES3);
+
+				/* recycle both page and skb */
+				buffer->skb = skb;
+				if (desc_data->skb_top)
+					dev_kfree_skb_any(desc_data->skb_top);
+
+				desc_data->skb_top = NULL;
+				goto next_desc;
+			}
+
+			if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
+				intermediate_desc_cnt++;
+				buf2_used = 1;
+				/* this descriptor is only the beginning/middle */
+				if (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_FD) {
+					/* this is the beginning of a chain */
+					desc_data->skb_top = skb;
+					skb_fill_page_desc(skb, 0,
+						buffer->page, 0,
+						pdata->rx_buffer_len);
+
+					DBGPR("RX: pkt in second buffer pointer\n");
+					skb_fill_page_desc(
+						desc_data->skb_top,
+						skb_shinfo(desc_data->skb_top)->nr_frags,
+						buffer->page2, 0,
+						pdata->rx_buffer_len);
+				} else {
+					/* this is the middle of a chain */
+					skb_fill_page_desc(desc_data->skb_top,
+						skb_shinfo(desc_data->skb_top)->nr_frags,
+						buffer->page, 0,
+						pdata->rx_buffer_len);
+
+					DBGPR("RX: pkt in second buffer pointer\n");
+					skb_fill_page_desc(desc_data->skb_top,
+						skb_shinfo(desc_data->skb_top)->nr_frags,
+						buffer->page2, 0,
+						pdata->rx_buffer_len);
+					/* re-use this skb, as consumed only the page */
+					buffer->skb = skb;
+				}
+				DWC_ETH_QOS_consume_page(buffer,
+							 desc_data->skb_top,
+							 (pdata->rx_buffer_len * 2),
+							 buf2_used);
+				goto next_desc;
+			} else {
+				if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_FD)) {
+					/* end of the chain */
+					pkt_len =
+						(pkt_len - (pdata->rx_buffer_len * intermediate_desc_cnt));
+					if (pkt_len > pdata->rx_buffer_len) {
+						skb_fill_page_desc(desc_data->skb_top,
+							skb_shinfo(desc_data->skb_top)->nr_frags,
+							buffer->page, 0,
+							pdata->rx_buffer_len);
+
+						DBGPR("RX: pkt in second buffer pointer\n");
+						skb_fill_page_desc(desc_data->skb_top,
+							skb_shinfo(desc_data->skb_top)->nr_frags,
+							buffer->page2, 0,
+							(pkt_len - pdata->rx_buffer_len));
+						buf2_used = 1;
+					} else {
+						skb_fill_page_desc(desc_data->skb_top,
+							skb_shinfo(desc_data->skb_top)->nr_frags,
+							buffer->page, 0,
+							pkt_len);
+						buf2_used = 0;
+					}
+					/* re-use this skb, as consumed only the page */
+					buffer->skb = skb;
+					skb = desc_data->skb_top;
+					desc_data->skb_top = NULL;
+					DWC_ETH_QOS_consume_page(buffer, skb,
+								 pkt_len,
+								 buf2_used);
+				} else {
+					/* no chain, got both FD + LD together */
+
+					/* code added for copybreak, this should improve
+					 * performance for small pkts with large amount
+					 * of reassembly being done in the stack
+					 * */
+					if ((pkt_len <= DWC_ETH_QOS_COPYBREAK_DEFAULT)
+					    && (skb_tailroom(skb) >= pkt_len)) {
+						u8 *vaddr;
+						vaddr =
+						    kmap_atomic(buffer->page);
+						memcpy(skb_tail_pointer(skb),
+						       vaddr, pkt_len);
+						kunmap_atomic(vaddr);
+						/* re-use the page, so don't erase buffer->page/page2 */
+						skb_put(skb, pkt_len);
+					} else {
+						if (pkt_len > pdata->rx_buffer_len) {
+							skb_fill_page_desc(skb,
+								0, buffer->page,
+								0,
+								pdata->rx_buffer_len);
+
+							DBGPR ("RX: pkt in second buffer pointer\n");
+							skb_fill_page_desc(skb,
+								skb_shinfo(skb)->nr_frags, buffer->page2,
+								0,
+								(pkt_len - pdata->rx_buffer_len));
+							buf2_used = 1;
+						} else {
+							skb_fill_page_desc(skb,
+								0, buffer->page,
+								0,
+								pkt_len);
+							buf2_used = 0;
+						}
+						DWC_ETH_QOS_consume_page(buffer,
+								skb,
+								pkt_len,
+								buf2_used);
+					}
+				}
+				intermediate_desc_cnt = 0;
+			}
+
+			DWC_ETH_QOS_config_rx_csum(pdata, skb, RX_NORMAL_DESC);
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+			DWC_ETH_QOS_get_rx_vlan(pdata, skb, RX_NORMAL_DESC);
+#endif
+
+#ifdef YDEBUG_FILTER
+			DWC_ETH_QOS_check_rx_filter_status(RX_NORMAL_DESC);
+#endif
+
+			if ((pdata->hw_feat.tsstssel) && (pdata->hwts_rx_en)) {
+				/* get rx tstamp if available */
+				if (hw_if->rx_tstamp_available(RX_NORMAL_DESC)) {
+					ret = DWC_ETH_QOS_get_rx_hwtstamp(pdata,
+							skb, desc_data, qInx);
+					if (ret == 0) {
+						/* device has not yet updated the CONTEXT desc to hold the
+						 * time stamp, hence delay the packet reception
+						 * */
+						buffer->skb = skb;
+						buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+								pdata->rx_buffer_len, DMA_FROM_DEVICE);
+						if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+							printk(KERN_ALERT "failed to do the RX dma map\n");
+
+						goto rx_tstmp_failed;
+					}
+				}
+			}
+
+			if (!(dev->features & NETIF_F_GRO) &&
+						(dev->features & NETIF_F_LRO)) {
+					pdata->tcp_pkt =
+							DWC_ETH_QOS_check_for_tcp_payload(RX_NORMAL_DESC);
+			}
+
+			dev->last_rx = jiffies;
+			/* update the statistics */
+			dev->stats.rx_packets++;
+			dev->stats.rx_bytes += skb->len;
+
+			/* eth type trans needs skb->data to point to something */
+			if (!pskb_may_pull(skb, ETH_HLEN)) {
+				printk(KERN_ALERT "pskb_may_pull failed\n");
+				dev_kfree_skb_any(skb);
+				goto next_desc;
+			}
+
+			DWC_ETH_QOS_receive_skb(pdata, dev, skb, qInx);
+			received++;
+ next_desc:
+			desc_data->dirty_rx++;
+			if (desc_data->dirty_rx >= desc_data->skb_realloc_threshold)
+				desc_if->realloc_skb(pdata, qInx);
+
+			INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
+		} else {
+			/* no more data to read */
+			break;
+		}
+	}
+
+rx_tstmp_failed:
+
+	if (desc_data->dirty_rx)
+		desc_if->realloc_skb(pdata, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_clean_jumbo_rx_irq: received = %d\n", received);
+
+	return received;
+}
+
+/*!
+* \brief API to pass the Rx packets to stack if default mode
+* is enabled.
+*
+* \details This function is invoked by main NAPI function in default
+* Rx mode(non jumbo and non split header). This function checks the
+* device descriptor for the packets and passes it to stack if any packtes
+* are received by device.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] quota - maximum no. of packets that we are allowed to pass
+* to into the kernel.
+* \param[in] qInx - DMA channel/queue no. to be checked for packet.
+*
+* \return integer
+*
+* \retval number of packets received.
+*/
+
+static int DWC_ETH_QOS_clean_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
+				    int quota,
+				    UINT qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct net_device *dev = pdata->dev;
+	struct desc_if_struct *desc_if = &pdata->desc_if;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct sk_buff *skb = NULL;
+	int received = 0;
+	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC = NULL;
+	UINT pkt_len;
+	int ret;
+
+	DBGPR("-->DWC_ETH_QOS_clean_rx_irq: qInx = %u, quota = %d\n",
+		qInx, quota);
+
+	while (received < quota) {
+		buffer = GET_RX_BUF_PTR(qInx, desc_data->cur_rx);
+		RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+
+		/* check for data availability */
+		if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_OWN)) {
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
+			dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
+			/* assign it to new skb */
+			skb = buffer->skb;
+			buffer->skb = NULL;
+			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
+					 pdata->rx_buffer_len, DMA_FROM_DEVICE);
+			buffer->dma = 0;
+
+			/* get the packet length */
+			pkt_len =
+			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_PL);
+
+#ifdef DWC_ETH_QOS_ENABLE_RX_PKT_DUMP
+			print_pkt(skb, pkt_len, 0, (desc_data->cur_rx));
+#endif
+			/* check for bad/oversized packet,
+			 * error is valid only for last descriptor (OWN + LD bit set).
+			 * */
+			if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_ES) &&
+			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
+				/* pkt_len = pkt_len - 4; */ /* CRC stripping */
+
+				/* code added for copybreak, this should improve
+				 * performance for small pkts with large amount
+				 * of reassembly being done in the stack
+				 * */
+				if (pkt_len < DWC_ETH_QOS_COPYBREAK_DEFAULT) {
+					struct sk_buff *new_skb =
+					    netdev_alloc_skb_ip_align(dev,
+								      pkt_len);
+					if (new_skb) {
+						skb_copy_to_linear_data_offset(new_skb,
+							-NET_IP_ALIGN,
+							(skb->data - NET_IP_ALIGN),
+							(pkt_len + NET_IP_ALIGN));
+						/* recycle actual desc skb */
+						buffer->skb = skb;
+						skb = new_skb;
+					} else {
+						/* just continue with the old skb */
+					}
+				}
+				skb_put(skb, pkt_len);
+
+				DWC_ETH_QOS_config_rx_csum(pdata, skb,
+							RX_NORMAL_DESC);
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+				DWC_ETH_QOS_get_rx_vlan(pdata, skb, RX_NORMAL_DESC);
+#endif
+
+#ifdef YDEBUG_FILTER
+				DWC_ETH_QOS_check_rx_filter_status(RX_NORMAL_DESC);
+#endif
+
+				if ((pdata->hw_feat.tsstssel) && (pdata->hwts_rx_en)) {
+					/* get rx tstamp if available */
+					if (hw_if->rx_tstamp_available(RX_NORMAL_DESC)) {
+						ret = DWC_ETH_QOS_get_rx_hwtstamp(pdata,
+								skb, desc_data, qInx);
+						if (ret == 0) {
+							/* device has not yet updated the CONTEXT desc to hold the
+							 * time stamp, hence delay the packet reception
+							 * */
+							buffer->skb = skb;
+							buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+									pdata->rx_buffer_len, DMA_FROM_DEVICE);
+							if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+								printk(KERN_ALERT "failed to do the RX dma map\n");
+
+							goto rx_tstmp_failed;
+						}
+					}
+				}
+
+
+				if (!(dev->features & NETIF_F_GRO) &&
+						(dev->features & NETIF_F_LRO)) {
+						pdata->tcp_pkt =
+								DWC_ETH_QOS_check_for_tcp_payload(RX_NORMAL_DESC);
+				}
+
+				dev->last_rx = jiffies;
+				/* update the statistics */
+				dev->stats.rx_packets++;
+				dev->stats.rx_bytes += skb->len;
+				DWC_ETH_QOS_receive_skb(pdata, dev, skb, qInx);
+				received++;
+			} else {
+				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+				if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD))
+					DBGPR("Received oversized pkt, spanned across multiple desc\n");
+
+				/* recycle skb */
+				buffer->skb = skb;
+				dev->stats.rx_errors++;
+				DWC_ETH_QOS_update_rx_errors(dev,
+					RX_NORMAL_DESC->RDES3);
+			}
+
+			desc_data->dirty_rx++;
+			if (desc_data->dirty_rx >= desc_data->skb_realloc_threshold)
+				desc_if->realloc_skb(pdata, qInx);
+
+			INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
+		} else {
+			/* no more data to read */
+			break;
+		}
+	}
+
+rx_tstmp_failed:
+
+	if (desc_data->dirty_rx)
+		desc_if->realloc_skb(pdata, qInx);
+
+	DBGPR("<--DWC_ETH_QOS_clean_rx_irq: received = %d\n", received);
+
+	return received;
+}
+
+/*!
+* \brief API to update the rx status.
+*
+* \details This function is called in poll function to update the
+* status of received packets.
+*
+* \param[in] dev - pointer to net_device structure.
+* \param[in] rx_status - value of received packet status.
+*
+* \return void.
+*/
+
+void DWC_ETH_QOS_update_rx_errors(struct net_device *dev,
+				 unsigned int rx_status)
+{
+	DBGPR("-->DWC_ETH_QOS_update_rx_errors\n");
+
+	/* received pkt with crc error */
+	if ((rx_status & 0x1000000))
+		dev->stats.rx_crc_errors++;
+
+	/* received frame alignment */
+	if ((rx_status & 0x100000))
+		dev->stats.rx_frame_errors++;
+
+	/* receiver fifo overrun */
+	if ((rx_status & 0x200000))
+		dev->stats.rx_fifo_errors++;
+
+	DBGPR("<--DWC_ETH_QOS_update_rx_errors\n");
+}
+
+/*!
+* \brief API to pass the received packets to stack
+*
+* \details This function is provided by NAPI-compliant drivers to operate
+* the interface in a polled mode, with interrupts disabled.
+*
+* \param[in] napi - pointer to napi_stuct structure.
+* \param[in] budget - maximum no. of packets that we are allowed to pass
+* to into the kernel.
+*
+* \return integer
+*
+* \retval number of packets received.
+*/
+
+int DWC_ETH_QOS_poll_mq(struct napi_struct *napi, int budget)
+{
+	struct DWC_ETH_QOS_rx_queue *rx_queue =
+		container_of(napi, struct DWC_ETH_QOS_rx_queue, napi);
+	struct DWC_ETH_QOS_prv_data *pdata = rx_queue->pdata;
+	/* divide the budget evenly among all the queues */
+	int per_q_budget = budget / DWC_ETH_QOS_RX_QUEUE_CNT;
+	int qInx = 0;
+	int received = 0, per_q_received = 0;
+
+	DBGPR("-->DWC_ETH_QOS_poll_mq: budget = %d\n", budget);
+
+	pdata->xstats.napi_poll_n++;
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_queue = GET_RX_QUEUE_PTR(qInx);
+
+#ifdef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+		/* check for tx descriptor status */
+		DWC_ETH_QOS_tx_interrupt(pdata->dev, pdata, qInx);
+#endif
+		rx_queue->lro_flush_needed = 0;
+
+#ifdef RX_OLD_CODE
+		per_q_received = DWC_ETH_QOS_poll(pdata, per_q_budget, qInx);
+#else
+		per_q_received = pdata->clean_rx(pdata, per_q_budget, qInx);
+#endif
+		received += per_q_received;
+		pdata->xstats.rx_pkt_n += per_q_received;
+		pdata->xstats.q_rx_pkt_n[qInx] += per_q_received;
+
+		if (rx_queue->lro_flush_needed)
+			lro_flush_all(&rx_queue->lro_mgr);
+	}
+
+	/* If we processed all pkts, we are done;
+	 * tell the kernel & re-enable interrupt */
+	if (received < budget) {
+		if (pdata->dev->features & NETIF_F_GRO) {
+			/* to turn off polling */
+			napi_complete(napi);
+			/* Enable all ch RX interrupt */
+			DWC_ETH_QOS_enable_all_ch_rx_interrpt(pdata);
+		} else {
+			unsigned long flags;
+
+			spin_lock_irqsave(&pdata->lock, flags);
+			__napi_complete(napi);
+			/* Enable all ch RX interrupt */
+			DWC_ETH_QOS_enable_all_ch_rx_interrpt(pdata);
+			spin_unlock_irqrestore(&pdata->lock, flags);
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_poll_mq\n");
+
+	return received;
+}
+
+/*!
+* \brief API to return the device/interface status.
+*
+* \details The get_stats function is called whenever an application needs to
+* get statistics for the interface. For example, this happend when ifconfig
+* or netstat -i is run.
+*
+* \param[in] dev - pointer to net_device structure.
+*
+* \return net_device_stats structure
+*
+* \retval net_device_stats - returns pointer to net_device_stats structure.
+*/
+
+static struct net_device_stats *DWC_ETH_QOS_get_stats(struct net_device *dev)
+{
+
+	return &dev->stats;
+}
+
+#ifdef CONFIG_NET_POLL_CONTROLLER
+
+/*!
+* \brief API to receive packets in polling mode.
+*
+* \details This is polling receive function used by netconsole and other
+* diagnostic tool to allow network i/o with interrupts disabled.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_poll_controller(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+
+	DBGPR("-->DWC_ETH_QOS_poll_controller\n");
+
+	disable_irq(pdata->irq_number);
+	DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(pdata->irq_number, pdata);
+	enable_irq(pdata->irq_number);
+
+	DBGPR("<--DWC_ETH_QOS_poll_controller\n");
+}
+
+#endif	/*end of CONFIG_NET_POLL_CONTROLLER */
+
+/*!
+ * \brief User defined parameter setting API
+ *
+ * \details This function is invoked by kernel to update the device
+ * configuration to new features. This function supports enabling and
+ * disabling of TX and RX csum features.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] features – device feature to be enabled/disabled.
+ *
+ * \return int
+ *
+ * \retval 0
+ */
+
+static int DWC_ETH_QOS_set_features(struct net_device *dev, netdev_features_t features)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT dev_rxcsum_enable;
+	UINT dev_rxvlan_enable, dev_txvlan_enable;
+
+	if (pdata->hw_feat.rx_coe_sel) {
+		dev_rxcsum_enable = !!(pdata->dev_state & NETIF_F_RXCSUM);
+
+		if (((features & NETIF_F_RXCSUM) == NETIF_F_RXCSUM)
+		    && !dev_rxcsum_enable) {
+			hw_if->enable_rx_csum();
+			pdata->dev_state |= NETIF_F_RXCSUM;
+			printk(KERN_ALERT "State change - rxcsum enable\n");
+		} else if (((features & NETIF_F_RXCSUM) == 0)
+			   && dev_rxcsum_enable) {
+			hw_if->disable_rx_csum();
+			pdata->dev_state &= ~NETIF_F_RXCSUM;
+			printk(KERN_ALERT "State change - rxcsum disable\n");
+		}
+	}
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	dev_rxvlan_enable = !!(pdata->dev_state & NETIF_F_HW_VLAN_CTAG_RX);
+	if (((features & NETIF_F_HW_VLAN_CTAG_RX) == NETIF_F_HW_VLAN_CTAG_RX)
+	    && !dev_rxvlan_enable) {
+		pdata->dev_state |= NETIF_F_HW_VLAN_CTAG_RX;
+		hw_if->configure_rx_outer_vlan_stripping(DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS);
+		printk(KERN_ALERT "State change - rxvlan enable\n");
+	} else if (((features & NETIF_F_HW_VLAN_CTAG_RX) == 0) &&
+			dev_rxvlan_enable) {
+		pdata->dev_state &= ~NETIF_F_HW_VLAN_CTAG_RX;
+		hw_if->configure_rx_outer_vlan_stripping(DWC_ETH_QOS_RX_NO_VLAN_STRIP);
+		printk(KERN_ALERT "State change - rxvlan disable\n");
+	}
+
+	dev_txvlan_enable = !!(pdata->dev_state & NETIF_F_HW_VLAN_CTAG_TX);
+	if (((features & NETIF_F_HW_VLAN_CTAG_RX) == NETIF_F_HW_VLAN_CTAG_RX)
+	    && !dev_txvlan_enable) {
+		pdata->dev_state |= NETIF_F_HW_VLAN_CTAG_RX;
+		printk(KERN_ALERT "State change - txvlan enable\n");
+	} else if (((features & NETIF_F_HW_VLAN_CTAG_RX) == 0) &&
+			dev_txvlan_enable) {
+		pdata->dev_state &= ~NETIF_F_HW_VLAN_CTAG_RX;
+		printk(KERN_ALERT "State change - txvlan disable\n");
+	}
+#endif	/* DWC_ETH_QOS_ENABLE_VLAN_TAG */
+
+	DBGPR("<--DWC_ETH_QOS_set_features\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief User defined parameter setting API
+ *
+ * \details This function is invoked by kernel to adjusts the requested
+ * feature flags according to device-specific constraints, and returns the
+ * resulting flags. This API must not modify the device state.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] features – device supported features.
+ *
+ * \return u32
+ *
+ * \retval modified flag
+ */
+
+static netdev_features_t DWC_ETH_QOS_fix_features(struct net_device *dev,
+      netdev_features_t features)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+
+	DBGPR("-->DWC_ETH_QOS_fix_features: %#llx\n", features);
+
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	if (pdata->rx_split_hdr) {
+		/* The VLAN tag stripping must be set for the split function.
+		 * For instance, the DMA separates the header and payload of
+		 * an untagged packet only. Hence, when a tagged packet is
+		 * received, the QOS must be programmed such that the VLAN
+		 * tags are deleted/stripped from the received packets.
+		 * */
+		features |= NETIF_F_HW_VLAN_CTAG_RX;
+	}
+#endif /* end of DWC_ETH_QOS_ENABLE_VLAN_TAG */
+
+	DBGPR("<--DWC_ETH_QOS_fix_features: %#llx\n", features);
+
+	return features;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues
+ * an ioctl command to enable/disable receive split header mode.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] flags – flag to indicate whether RX split to be
+ *                  enabled/disabled.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_rx_split_hdr_mode(struct net_device *dev,
+		unsigned int flags)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned int qInx;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_config_rx_split_hdr_mode\n");
+
+	if (flags && pdata->rx_split_hdr) {
+		printk(KERN_ALERT
+			"Rx Split header mode is already enabled\n");
+		return -EINVAL;
+	}
+
+	if (!flags && !pdata->rx_split_hdr) {
+		printk(KERN_ALERT
+			"Rx Split header mode is already disabled\n");
+		return -EINVAL;
+	}
+
+	DWC_ETH_QOS_stop_dev(pdata);
+
+	/* If split header mode is disabled(ie flags == 0)
+	 * then RX will be in default/jumbo mode based on MTU
+	 * */
+	pdata->rx_split_hdr = !!flags;
+
+	DWC_ETH_QOS_start_dev(pdata);
+
+	hw_if->config_header_size(DWC_ETH_QOS_MAX_HDR_SIZE);
+	/* enable/disable split header for all RX DMA channel */
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++)
+		hw_if->config_split_header_mode(qInx, pdata->rx_split_hdr);
+
+	printk(KERN_ALERT "Succesfully %s Rx Split header mode\n",
+		(flags ? "enabled" : "disabled"));
+
+	DBGPR("<--DWC_ETH_QOS_config_rx_split_hdr_mode\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues
+ * an ioctl command to enable/disable L3/L4 filtering.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] flags – flag to indicate whether L3/L4 filtering to be
+ *                  enabled/disabled.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_l3_l4_filtering(struct net_device *dev,
+		unsigned int flags)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_config_l3_l4_filtering\n");
+
+	if (flags && pdata->l3_l4_filter) {
+		printk(KERN_ALERT
+			"L3/L4 filtering is already enabled\n");
+		return -EINVAL;
+	}
+
+	if (!flags && !pdata->l3_l4_filter) {
+		printk(KERN_ALERT
+			"L3/L4 filtering is already disabled\n");
+		return -EINVAL;
+	}
+
+	pdata->l3_l4_filter = !!flags;
+	hw_if->config_l3_l4_filter_enable(pdata->l3_l4_filter);
+
+	DBGPR_FILTER("Succesfully %s L3/L4 filtering\n",
+		(flags ? "ENABLED" : "DISABLED"));
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_config_l3_l4_filtering\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to configure L3(IPv4) filtering. This function does following,
+ * - enable/disable IPv4 filtering.
+ * - select source/destination address matching.
+ * - select perfect/inverse matching.
+ * - Update the IPv4 address into MAC register.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_ip4_filters(struct net_device *dev,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_l3_l4_filter *u_l3_filter =
+		(struct DWC_ETH_QOS_l3_l4_filter *)req->ptr;
+	struct DWC_ETH_QOS_l3_l4_filter l_l3_filter;
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_config_ip4_filters\n");
+
+	if (pdata->hw_feat.l3l4_filter_num == 0)
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+
+	if (copy_from_user(&l_l3_filter, u_l3_filter,
+		sizeof(struct DWC_ETH_QOS_l3_l4_filter)))
+		return -EFAULT;
+
+	if ((l_l3_filter.filter_no + 1) > pdata->hw_feat.l3l4_filter_num) {
+		printk(KERN_ALERT "%d filter is not supported in the HW\n",
+			l_l3_filter.filter_no);
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	if (!pdata->l3_l4_filter) {
+		hw_if->config_l3_l4_filter_enable(1);
+		pdata->l3_l4_filter = 1;
+	}
+
+	/* configure the L3 filters */
+	hw_if->config_l3_filters(l_l3_filter.filter_no,
+			l_l3_filter.filter_enb_dis, 0,
+			l_l3_filter.src_dst_addr_match,
+			l_l3_filter.perfect_inverse_match);
+
+	if (!l_l3_filter.src_dst_addr_match)
+		hw_if->update_ip4_addr0(l_l3_filter.filter_no,
+				l_l3_filter.ip4_addr);
+	else
+		hw_if->update_ip4_addr1(l_l3_filter.filter_no,
+				l_l3_filter.ip4_addr);
+
+	DBGPR_FILTER("Successfully %s IPv4 %s %s addressing filtering on %d filter\n",
+		(l_l3_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+		(l_l3_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+		(l_l3_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+		l_l3_filter.filter_no);
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_config_ip4_filters\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to configure L3(IPv6) filtering. This function does following,
+ * - enable/disable IPv6 filtering.
+ * - select source/destination address matching.
+ * - select perfect/inverse matching.
+ * - Update the IPv6 address into MAC register.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_ip6_filters(struct net_device *dev,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_l3_l4_filter *u_l3_filter =
+		(struct DWC_ETH_QOS_l3_l4_filter *)req->ptr;
+	struct DWC_ETH_QOS_l3_l4_filter l_l3_filter;
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_config_ip6_filters\n");
+
+	if (pdata->hw_feat.l3l4_filter_num == 0)
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+
+	if (copy_from_user(&l_l3_filter, u_l3_filter,
+		sizeof(struct DWC_ETH_QOS_l3_l4_filter)))
+		return -EFAULT;
+
+	if ((l_l3_filter.filter_no + 1) > pdata->hw_feat.l3l4_filter_num) {
+		printk(KERN_ALERT "%d filter is not supported in the HW\n",
+			l_l3_filter.filter_no);
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	if (!pdata->l3_l4_filter) {
+		hw_if->config_l3_l4_filter_enable(1);
+		pdata->l3_l4_filter = 1;
+	}
+
+	/* configure the L3 filters */
+	hw_if->config_l3_filters(l_l3_filter.filter_no,
+			l_l3_filter.filter_enb_dis, 1,
+			l_l3_filter.src_dst_addr_match,
+			l_l3_filter.perfect_inverse_match);
+
+	hw_if->update_ip6_addr(l_l3_filter.filter_no,
+			l_l3_filter.ip6_addr);
+
+	DBGPR_FILTER("Successfully %s IPv6 %s %s addressing filtering on %d filter\n",
+		(l_l3_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+		(l_l3_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+		(l_l3_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+		l_l3_filter.filter_no);
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_config_ip6_filters\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to configure L4(TCP/UDP) filtering. This function does following,
+ * - enable/disable L4 filtering.
+ * - select TCP/UDP filtering.
+ * - select source/destination port matching.
+ * - select perfect/inverse matching.
+ * - Update the port number into MAC register.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ * \param[in] tcp_udp – flag to indicate TCP/UDP filtering.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_tcp_udp_filters(struct net_device *dev,
+		struct ifr_data_struct *req,
+		int tcp_udp)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_l3_l4_filter *u_l4_filter =
+		(struct DWC_ETH_QOS_l3_l4_filter *)req->ptr;
+	struct DWC_ETH_QOS_l3_l4_filter l_l4_filter;
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_config_tcp_udp_filters\n");
+
+	if (pdata->hw_feat.l3l4_filter_num == 0)
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+
+	if (copy_from_user(&l_l4_filter, u_l4_filter,
+		sizeof(struct DWC_ETH_QOS_l3_l4_filter)))
+		return -EFAULT;
+
+	if ((l_l4_filter.filter_no + 1) > pdata->hw_feat.l3l4_filter_num) {
+		printk(KERN_ALERT "%d filter is not supported in the HW\n",
+			l_l4_filter.filter_no);
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	if (!pdata->l3_l4_filter) {
+		hw_if->config_l3_l4_filter_enable(1);
+		pdata->l3_l4_filter = 1;
+	}
+
+	/* configure the L4 filters */
+	hw_if->config_l4_filters(l_l4_filter.filter_no,
+			l_l4_filter.filter_enb_dis,
+			tcp_udp,
+			l_l4_filter.src_dst_addr_match,
+			l_l4_filter.perfect_inverse_match);
+
+	if (l_l4_filter.src_dst_addr_match)
+		hw_if->update_l4_da_port_no(l_l4_filter.filter_no,
+				l_l4_filter.port_no);
+	else
+		hw_if->update_l4_sa_port_no(l_l4_filter.filter_no,
+				l_l4_filter.port_no);
+
+	DBGPR_FILTER("Successfully %s %s %s %s Port number filtering on %d filter\n",
+		(l_l4_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+		(tcp_udp ? "UDP" : "TCP"),
+		(l_l4_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"),
+		(l_l4_filter.src_dst_addr_match ? "DESTINATION" : "SOURCE"),
+		l_l4_filter.filter_no);
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_config_tcp_udp_filters\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to configure VALN filtering. This function does following,
+ * - enable/disable VLAN filtering.
+ * - select perfect/hash filtering.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_vlan_filter(struct net_device *dev,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_vlan_filter *u_vlan_filter =
+		(struct DWC_ETH_QOS_vlan_filter *)req->ptr;
+	struct DWC_ETH_QOS_vlan_filter l_vlan_filter;
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_config_vlan_filter\n");
+
+	if (copy_from_user(&l_vlan_filter, u_vlan_filter,
+		sizeof(struct DWC_ETH_QOS_vlan_filter)))
+		return -EFAULT;
+
+	if ((l_vlan_filter.perfect_hash) &&
+		(pdata->hw_feat.vlan_hash_en == 0)) {
+		printk(KERN_ALERT "VLAN HASH filtering is not supported\n");
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	/* configure the vlan filter */
+	hw_if->config_vlan_filtering(l_vlan_filter.filter_enb_dis,
+					l_vlan_filter.perfect_hash,
+					l_vlan_filter.perfect_inverse_match);
+	pdata->vlan_hash_filtering = l_vlan_filter.perfect_hash;
+
+	DBGPR_FILTER("Successfully %s VLAN %s filtering and %s matching\n",
+		(l_vlan_filter.filter_enb_dis ? "ENABLED" : "DISABLED"),
+		(l_vlan_filter.perfect_hash ? "HASH" : "PERFECT"),
+		(l_vlan_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"));
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_config_vlan_filter\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to enable/disable ARP offloading feature.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_arp_offload(struct net_device *dev,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_arp_offload *u_arp_offload =
+		(struct DWC_ETH_QOS_arp_offload *)req->ptr;
+	struct DWC_ETH_QOS_arp_offload l_arp_offload;
+	int ret = 0;
+
+	printk(KERN_ALERT "-->DWC_ETH_QOS_config_arp_offload\n");
+
+	if (pdata->hw_feat.arp_offld_en == 0)
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+
+	if (copy_from_user(&l_arp_offload, u_arp_offload,
+		sizeof(struct DWC_ETH_QOS_arp_offload)))
+		return -EFAULT;
+
+	/* configure the L3 filters */
+	hw_if->config_arp_offload(req->flags);
+	hw_if->update_arp_offload_ip_addr(l_arp_offload.ip_addr);
+
+	printk(KERN_ALERT "Successfully %s arp Offload\n",
+		(req->flags ? "ENABLED" : "DISABLED"));
+
+	printk(KERN_ALERT "<--DWC_ETH_QOS_config_arp_offload\n");
+
+	return ret;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when user issues an
+ * ioctl command to configure L2 destination addressing filtering mode. This
+ * function dose following,
+ * - selects perfect/hash filtering.
+ * - selects perfect/inverse matching.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to IOCTL specific structure.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_confing_l2_da_filter(struct net_device *dev,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_l2_da_filter *u_l2_da_filter =
+	  (struct DWC_ETH_QOS_l2_da_filter *)req->ptr;
+	struct DWC_ETH_QOS_l2_da_filter l_l2_da_filter;
+	int ret = 0;
+
+	DBGPR_FILTER("-->DWC_ETH_QOS_confing_l2_da_filter\n");
+
+	if (copy_from_user(&l_l2_da_filter, u_l2_da_filter,
+	      sizeof(struct DWC_ETH_QOS_l2_da_filter)))
+		return - EFAULT;
+
+	if (l_l2_da_filter.perfect_hash) {
+		if (pdata->hw_feat.hash_tbl_sz > 0)
+			pdata->l2_filtering_mode = 1;
+		else
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+	} else {
+		if (pdata->max_addr_reg_cnt > 1)
+			pdata->l2_filtering_mode = 0;
+		else
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	/* configure L2 DA perfect/inverse_matching */
+	hw_if->config_l2_da_perfect_inverse_match(l_l2_da_filter.perfect_inverse_match);
+
+	DBGPR_FILTER("Successfully selected L2 %s filtering and %s DA matching\n",
+		(l_l2_da_filter.perfect_hash ? "HASH" : "PERFECT"),
+		(l_l2_da_filter.perfect_inverse_match ? "INVERSE" : "PERFECT"));
+
+	DBGPR_FILTER("<--DWC_ETH_QOS_confing_l2_da_filter\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by ioctl function when user issues
+ * an ioctl command to enable/disable mac loopback mode.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] flags – flag to indicate whether mac loopback mode to be
+ *                  enabled/disabled.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_mac_loopback_mode(struct net_device *dev,
+		unsigned int flags)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_config_mac_loopback_mode\n");
+
+	if (flags && pdata->mac_loopback_mode) {
+		printk(KERN_ALERT
+			"MAC loopback mode is already enabled\n");
+		return -EINVAL;
+	}
+	if (!flags && !pdata->mac_loopback_mode) {
+		printk(KERN_ALERT
+			"MAC loopback mode is already disabled\n");
+		return -EINVAL;
+	}
+	pdata->mac_loopback_mode = !!flags;
+	hw_if->config_mac_loopback_mode(flags);
+
+	printk(KERN_ALERT "Succesfully %s MAC loopback mode\n",
+		(flags ? "enabled" : "disabled"));
+
+	DBGPR("<--DWC_ETH_QOS_config_mac_loopback_mode\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by ioctl function when user issues
+ * an ioctl command to enable/disable pfc.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] flags – flag to indicate whether pfc to be enabled/disabled.
+ *
+ * \return integer
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+static int DWC_ETH_QOS_config_pfc(struct net_device *dev,
+		unsigned int flags)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_config_pfc\n");
+
+	if (!pdata->hw_feat.dcb_en) {
+		printk(KERN_ALERT "PFC is not supported\n");
+		return DWC_ETH_QOS_NO_HW_SUPPORT;
+	}
+
+	hw_if->config_pfc(flags);
+
+	printk(KERN_ALERT "Succesfully %s PFC(Priority Based Flow Control)\n",
+		(flags ? "enabled" : "disabled"));
+
+	DBGPR("<--DWC_ETH_QOS_config_pfc\n");
+
+	return ret;
+}
+
+/*!
+ * \brief Driver IOCTL routine
+ *
+ * \details This function is invoked by main ioctl function when
+ * users request to configure various device features like,
+ * PMT module, TX and RX PBL, TX and RX FIFO threshold level,
+ * TX and RX OSF mode, SA insert/replacement, L2/L3/L4 and
+ * VLAN filtering, AVB/DCB algorithm etc.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] req – pointer to ioctl structure.
+ *
+ * \return int
+ *
+ * \retval 0 - success
+ * \retval negative - failure
+ */
+
+static int DWC_ETH_QOS_handle_prv_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req)
+{
+	unsigned int qInx = req->qInx;
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(qInx);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct net_device *dev = pdata->dev;
+	int i;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_handle_prv_ioctl\n");
+
+	if (qInx > DWC_ETH_QOS_QUEUE_CNT) {
+		printk(KERN_ALERT "Queue number %d is invalid\n" \
+				"Hardware has only %d Tx/Rx Queues\n",
+				qInx, DWC_ETH_QOS_QUEUE_CNT);
+		ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		return ret;
+	}
+
+	switch (req->cmd) {
+	case DWC_ETH_QOS_POWERUP_MAGIC_CMD:
+		if (pdata->hw_feat.mgk_sel) {
+			ret = DWC_ETH_QOS_powerup(dev, DWC_ETH_QOS_IOCTL_CONTEXT);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_POWERDOWN_MAGIC_CMD:
+		if (pdata->hw_feat.mgk_sel) {
+			ret =
+			  DWC_ETH_QOS_powerdown(dev,
+			    DWC_ETH_QOS_MAGIC_WAKEUP, DWC_ETH_QOS_IOCTL_CONTEXT);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_POWERUP_REMOTE_WAKEUP_CMD:
+		if (pdata->hw_feat.rwk_sel) {
+			ret = DWC_ETH_QOS_powerup(dev, DWC_ETH_QOS_IOCTL_CONTEXT);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_POWERDOWN_REMOTE_WAKEUP_CMD:
+		if (pdata->hw_feat.rwk_sel) {
+			ret = DWC_ETH_QOS_configure_remotewakeup(dev, req);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_RX_THRESHOLD_CMD:
+		rx_desc_data->rx_threshold_val = req->flags;
+		hw_if->config_rx_threshold(qInx,
+					rx_desc_data->rx_threshold_val);
+		printk(KERN_ALERT "Configured Rx threshold with %d\n",
+		       rx_desc_data->rx_threshold_val);
+		break;
+
+	case DWC_ETH_QOS_TX_THRESHOLD_CMD:
+		tx_desc_data->tx_threshold_val = req->flags;
+		hw_if->config_tx_threshold(qInx,
+					tx_desc_data->tx_threshold_val);
+		printk(KERN_ALERT "Configured Tx threshold with %d\n",
+		       tx_desc_data->tx_threshold_val);
+		break;
+
+	case DWC_ETH_QOS_RSF_CMD:
+		rx_desc_data->rsf_on = req->flags;
+		hw_if->config_rsf_mode(qInx, rx_desc_data->rsf_on);
+		printk(KERN_ALERT "Receive store and forward mode %s\n",
+		       (rx_desc_data->rsf_on) ? "enabled" : "disabled");
+		break;
+
+	case DWC_ETH_QOS_TSF_CMD:
+		tx_desc_data->tsf_on = req->flags;
+		hw_if->config_tsf_mode(qInx, tx_desc_data->tsf_on);
+		printk(KERN_ALERT "Transmit store and forward mode %s\n",
+		       (tx_desc_data->tsf_on) ? "enabled" : "disabled");
+		break;
+
+	case DWC_ETH_QOS_OSF_CMD:
+		tx_desc_data->osf_on = req->flags;
+		hw_if->config_osf_mode(qInx, tx_desc_data->osf_on);
+		printk(KERN_ALERT "Transmit DMA OSF mode is %s\n",
+		       (tx_desc_data->osf_on) ? "enabled" : "disabled");
+		break;
+
+	case DWC_ETH_QOS_INCR_INCRX_CMD:
+		pdata->incr_incrx = req->flags;
+		hw_if->config_incr_incrx_mode(pdata->incr_incrx);
+		printk(KERN_ALERT "%s mode is enabled\n",
+		       (pdata->incr_incrx) ? "INCRX" : "INCR");
+		break;
+
+	case DWC_ETH_QOS_RX_PBL_CMD:
+		rx_desc_data->rx_pbl = req->flags;
+		DWC_ETH_QOS_config_rx_pbl(pdata, rx_desc_data->rx_pbl, qInx);
+		break;
+
+	case DWC_ETH_QOS_TX_PBL_CMD:
+		tx_desc_data->tx_pbl = req->flags;
+		DWC_ETH_QOS_config_tx_pbl(pdata, tx_desc_data->tx_pbl, qInx);
+		break;
+
+	case DWC_ETH_QOS_RX_OUTER_VLAN_STRIPPING_CMD:
+		for ( i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++) {
+			rx_desc_data = GET_RX_WRAPPER_DESC(i);
+			rx_desc_data->rx_outer_vlan_strip = req->flags;
+		}
+		hw_if->configure_rx_outer_vlan_stripping(rx_desc_data->rx_outer_vlan_strip);
+		break;
+
+	case DWC_ETH_QOS_RX_INNER_VLAN_STRIPPING_CMD:
+		for ( i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++) {
+			rx_desc_data = GET_RX_WRAPPER_DESC(i);
+			rx_desc_data->rx_inner_vlan_strip = req->flags;
+		}
+		hw_if->configure_rx_inner_vlan_stripping(rx_desc_data->rx_inner_vlan_strip);
+		break;
+
+	case DWC_ETH_QOS_TX_VLAN_DESC_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			tx_desc_data->tx_vlan_tag_via_reg = Y_FALSE;
+			tx_desc_data->tx_vlan_tag_ctrl = req->flags;
+			hw_if->enable_vlan_desc_control(pdata);
+		} else {
+			printk(KERN_ALERT "Device doesn't supports VLAN"\
+				"Insertion/Deletion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_TX_VLAN_REG_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			tx_desc_data->tx_vlan_tag_via_reg = Y_TRUE;
+			tx_desc_data->tx_vlan_tag_ctrl = req->flags;
+			hw_if->enable_vlan_reg_control(tx_desc_data);
+			printk("VLAN control via register now --- %d %d\n\n",
+			       tx_desc_data->tx_vlan_tag_via_reg,
+			       tx_desc_data->tx_vlan_tag_ctrl);
+		} else {
+			printk(KERN_ALERT
+			       "Device doesn't supports VLAN Insertion/Deletion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_SA0_DESC_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			pdata->tx_sa_ctrl_via_desc = req->flags;
+			pdata->tx_sa_ctrl_via_reg = DWC_ETH_QOS_SA0_NONE;
+			if (req->flags == DWC_ETH_QOS_SA0_NONE) {
+				memcpy(pdata->mac_addr, pdata->dev->dev_addr,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			} else {
+				memcpy(pdata->mac_addr, mac_addr0,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			}
+			hw_if->configure_mac_addr0_reg(pdata->mac_addr);
+			hw_if->configure_sa_via_reg(pdata->tx_sa_ctrl_via_reg);
+			printk(KERN_ALERT
+			       "SA will use MAC0 with descriptor for configuration %d\n",
+			       pdata->tx_sa_ctrl_via_desc);
+		} else {
+			printk(KERN_ALERT
+			       "Device doesn't supports SA Insertion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_SA1_DESC_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			pdata->tx_sa_ctrl_via_desc = req->flags;
+			pdata->tx_sa_ctrl_via_reg = DWC_ETH_QOS_SA1_NONE;
+			if (req->flags == DWC_ETH_QOS_SA1_NONE) {
+				memcpy(pdata->mac_addr, pdata->dev->dev_addr,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			} else {
+				memcpy(pdata->mac_addr, mac_addr1,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			}
+			hw_if->configure_mac_addr1_reg(pdata->mac_addr);
+			hw_if->configure_sa_via_reg(pdata->tx_sa_ctrl_via_reg);
+			printk(KERN_ALERT
+			       "SA will use MAC1 with descriptor for configuration %d\n",
+			       pdata->tx_sa_ctrl_via_desc);
+		} else {
+			printk(KERN_ALERT
+			       "Device doesn't supports SA Insertion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_SA0_REG_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			pdata->tx_sa_ctrl_via_reg = req->flags;
+			pdata->tx_sa_ctrl_via_desc = DWC_ETH_QOS_SA0_NONE;
+			if (req->flags == DWC_ETH_QOS_SA0_NONE) {
+				memcpy(pdata->mac_addr, pdata->dev->dev_addr,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			} else {
+				memcpy(pdata->mac_addr, mac_addr0,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			}
+			hw_if->configure_mac_addr0_reg(pdata->mac_addr);
+			hw_if->configure_sa_via_reg(pdata->tx_sa_ctrl_via_reg);
+			printk(KERN_ALERT
+			       "SA will use MAC0 with register for configuration %d\n",
+			       pdata->tx_sa_ctrl_via_desc);
+		} else {
+			printk(KERN_ALERT
+			       "Device doesn't supports SA Insertion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_SA1_REG_CMD:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			pdata->tx_sa_ctrl_via_reg = req->flags;
+			pdata->tx_sa_ctrl_via_desc = DWC_ETH_QOS_SA1_NONE;
+			if (req->flags == DWC_ETH_QOS_SA1_NONE) {
+				memcpy(pdata->mac_addr, pdata->dev->dev_addr,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			} else {
+				memcpy(pdata->mac_addr, mac_addr1,
+				       DWC_ETH_QOS_MAC_ADDR_LEN);
+			}
+			hw_if->configure_mac_addr1_reg(pdata->mac_addr);
+			hw_if->configure_sa_via_reg(pdata->tx_sa_ctrl_via_reg);
+			printk(KERN_ALERT
+			       "SA will use MAC1 with register for configuration %d\n",
+			       pdata->tx_sa_ctrl_via_desc);
+		} else {
+			printk(KERN_ALERT
+			       "Device doesn't supports SA Insertion/Replacement\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_SETUP_CONTEXT_DESCRIPTOR:
+		if (pdata->hw_feat.sa_vlan_ins) {
+			tx_desc_data->context_setup = req->context_setup;
+			if (tx_desc_data->context_setup == 1) {
+				printk(KERN_ALERT "Context descriptor will be transmitted"\
+						" with every normal descriptor on %d DMA Channel\n",
+						qInx);
+			}
+			else {
+				printk(KERN_ALERT "Context descriptor will be setup"\
+						" only if VLAN id changes %d\n", qInx);
+			}
+		}
+		else {
+			printk(KERN_ALERT
+			       "Device doesn't support VLAN operations\n");
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+
+	case DWC_ETH_QOS_GET_RX_QCNT:
+		req->qInx = DWC_ETH_QOS_RX_QUEUE_CNT;
+		break;
+
+	case DWC_ETH_QOS_GET_TX_QCNT:
+		req->qInx = DWC_ETH_QOS_TX_QUEUE_CNT;
+		break;
+
+	case DWC_ETH_QOS_GET_CONNECTED_SPEED:
+		req->connected_speed = pdata->speed;
+		break;
+
+	case DWC_ETH_QOS_DCB_ALGORITHM:
+		DWC_ETH_QOS_program_dcb_algorithm(pdata, req);
+		break;
+
+	case DWC_ETH_QOS_AVB_ALGORITHM:
+		DWC_ETH_QOS_program_avb_algorithm(pdata, req);
+		break;
+
+	case DWC_ETH_QOS_RX_SPLIT_HDR_CMD:
+		if (pdata->hw_feat.sph_en) {
+			ret = DWC_ETH_QOS_config_rx_split_hdr_mode(dev, req->flags);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+	case DWC_ETH_QOS_L3_L4_FILTER_CMD:
+		if (pdata->hw_feat.l3l4_filter_num > 0) {
+			ret = DWC_ETH_QOS_config_l3_l4_filtering(dev, req->flags);
+			if (ret == 0)
+				ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+			else
+				ret = DWC_ETH_QOS_CONFIG_FAIL;
+		} else {
+			ret = DWC_ETH_QOS_NO_HW_SUPPORT;
+		}
+		break;
+	case DWC_ETH_QOS_IPV4_FILTERING_CMD:
+		ret = DWC_ETH_QOS_config_ip4_filters(dev, req);
+		break;
+	case DWC_ETH_QOS_IPV6_FILTERING_CMD:
+		ret = DWC_ETH_QOS_config_ip6_filters(dev, req);
+		break;
+	case DWC_ETH_QOS_UDP_FILTERING_CMD:
+		ret = DWC_ETH_QOS_config_tcp_udp_filters(dev, req, 1);
+		break;
+	case DWC_ETH_QOS_TCP_FILTERING_CMD:
+		ret = DWC_ETH_QOS_config_tcp_udp_filters(dev, req, 0);
+		break;
+	case DWC_ETH_QOS_VLAN_FILTERING_CMD:
+		ret = DWC_ETH_QOS_config_vlan_filter(dev, req);
+		break;
+	case DWC_ETH_QOS_L2_DA_FILTERING_CMD:
+		ret = DWC_ETH_QOS_confing_l2_da_filter(dev, req);
+		break;
+	case DWC_ETH_QOS_ARP_OFFLOAD_CMD:
+		ret = DWC_ETH_QOS_config_arp_offload(dev, req);
+		break;
+	case DWC_ETH_QOS_AXI_PBL_CMD:
+		pdata->axi_pbl = req->flags;
+		hw_if->config_axi_pbl_val(pdata->axi_pbl);
+		printk(KERN_ALERT "AXI PBL value: %d\n", pdata->axi_pbl);
+		break;
+	case DWC_ETH_QOS_AXI_WORL_CMD:
+		pdata->axi_worl = req->flags;
+		hw_if->config_axi_worl_val(pdata->axi_worl);
+		printk(KERN_ALERT "AXI WORL value: %d\n", pdata->axi_worl);
+		break;
+	case DWC_ETH_QOS_AXI_RORL_CMD:
+		pdata->axi_rorl = req->flags;
+		hw_if->config_axi_rorl_val(pdata->axi_rorl);
+		printk(KERN_ALERT "AXI RORL value: %d\n", pdata->axi_rorl);
+		break;
+	case DWC_ETH_QOS_MAC_LOOPBACK_MODE_CMD:
+		ret = DWC_ETH_QOS_config_mac_loopback_mode(dev, req->flags);
+		if (ret == 0)
+			ret = DWC_ETH_QOS_CONFIG_SUCCESS;
+		else
+			ret = DWC_ETH_QOS_CONFIG_FAIL;
+		break;
+	case DWC_ETH_QOS_PFC_CMD:
+		ret = DWC_ETH_QOS_config_pfc(dev, req->flags);
+		break;
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	case DWC_ETH_QOS_PG_TEST:
+		ret = DWC_ETH_QOS_handle_pg_ioctl(pdata, (void *)req);
+		break;
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+	default:
+		ret = -EOPNOTSUPP;
+		printk(KERN_ALERT "Unsupported command call\n");
+	}
+
+	DBGPR("<--DWC_ETH_QOS_handle_prv_ioctl\n");
+
+	return ret;
+}
+
+
+/*!
+ * \brief control hw timestamping.
+ *
+ * \details This function is used to configure the MAC to enable/disable both
+ * outgoing(Tx) and incoming(Rx) packets time stamping based on user input.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] ifr – pointer to IOCTL specific structure.
+ *
+ * \return int
+ *
+ * \retval 0 - success
+ * \retval negative - failure
+ */
+
+static int DWC_ETH_QOS_handle_hwtstamp_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
+	struct ifreq *ifr)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct hwtstamp_config config;
+	u32 ptp_v2 = 0;
+	u32 tstamp_all = 0;
+	u32 ptp_over_ipv4_udp = 0;
+	u32 ptp_over_ipv6_udp = 0;
+	u32 ptp_over_ethernet = 0;
+	u32 snap_type_sel = 0;
+	u32 ts_master_en = 0;
+	u32 ts_event_en = 0;
+	u32 av_8021asm_en = 0;
+	u32 varMAC_TCR = 0;
+	u64 temp = 0;
+	struct timespec now;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_handle_hwtstamp_ioctl\n");
+
+	if (!pdata->hw_feat.tsstssel) {
+		printk(KERN_ALERT "No hw timestamping is available in this core\n");
+		return -EOPNOTSUPP;
+	}
+
+	if (copy_from_user(&config, ifr->ifr_data,
+		sizeof(struct hwtstamp_config)))
+		return -EFAULT;
+
+	DBGPR_PTP("config.flags = %#x, tx_type = %#x, rx_filter = %#x\n",
+		config.flags, config.tx_type, config.rx_filter);
+
+	/* reserved for future extensions */
+	if (config.flags)
+		return -EINVAL;
+
+	switch (config.tx_type) {
+	case HWTSTAMP_TX_OFF:
+		pdata->hwts_tx_en = 0;
+		break;
+	case HWTSTAMP_TX_ON:
+		pdata->hwts_tx_en = 1;
+		break;
+	default:
+		return -ERANGE;
+	}
+
+	switch (config.rx_filter) {
+	/* time stamp no incoming packet at all */
+	case HWTSTAMP_FILTER_NONE:
+		config.rx_filter = HWTSTAMP_FILTER_NONE;
+		break;
+
+	/* PTP v1, UDP, any kind of event packet */
+	case HWTSTAMP_FILTER_PTP_V1_L4_EVENT:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_EVENT;
+		/* take time stamp for all event messages */
+		snap_type_sel = MAC_TCR_SNAPTYPSEL_1;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v1, UDP, Sync packet */
+	case HWTSTAMP_FILTER_PTP_V1_L4_SYNC:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_SYNC;
+		/* take time stamp for SYNC messages only */
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v1, UDP, Delay_req packet */
+	case HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ;
+		/* take time stamp for Delay_Req messages only */
+		ts_master_en = MAC_TCR_TSMASTERENA;
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v2, UDP, any kind of event packet */
+	case HWTSTAMP_FILTER_PTP_V2_L4_EVENT:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_EVENT;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for all event messages */
+		snap_type_sel = MAC_TCR_SNAPTYPSEL_1;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v2, UDP, Sync packet */
+	case HWTSTAMP_FILTER_PTP_V2_L4_SYNC:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_SYNC;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for SYNC messages only */
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v2, UDP, Delay_req packet */
+	case HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for Delay_Req messages only */
+		ts_master_en = MAC_TCR_TSMASTERENA;
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		break;
+
+	/* PTP v2/802.AS1, any layer, any kind of event packet */
+	case HWTSTAMP_FILTER_PTP_V2_EVENT:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_EVENT;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for all event messages */
+		snap_type_sel = MAC_TCR_SNAPTYPSEL_1;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		ptp_over_ethernet = MAC_TCR_TSIPENA;
+		av_8021asm_en = MAC_TCR_AV8021ASMEN;
+		break;
+
+	/* PTP v2/802.AS1, any layer, Sync packet */
+	case HWTSTAMP_FILTER_PTP_V2_SYNC:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_SYNC;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for SYNC messages only */
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		ptp_over_ethernet = MAC_TCR_TSIPENA;
+		av_8021asm_en = MAC_TCR_AV8021ASMEN;
+		break;
+
+	/* PTP v2/802.AS1, any layer, Delay_req packet */
+	case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
+		config.rx_filter = HWTSTAMP_FILTER_PTP_V2_DELAY_REQ;
+		ptp_v2 = MAC_TCR_TSVER2ENA;
+		/* take time stamp for Delay_Req messages only */
+		ts_master_en = MAC_TCR_TSMASTERENA;
+		ts_event_en = MAC_TCR_TSEVENTENA;
+
+		ptp_over_ipv4_udp = MAC_TCR_TSIPV4ENA;
+		ptp_over_ipv6_udp = MAC_TCR_TSIPV6ENA;
+		ptp_over_ethernet = MAC_TCR_TSIPENA;
+		av_8021asm_en = MAC_TCR_AV8021ASMEN;
+		break;
+
+	/* time stamp any incoming packet */
+	case HWTSTAMP_FILTER_ALL:
+		config.rx_filter = HWTSTAMP_FILTER_ALL;
+		tstamp_all = MAC_TCR_TSENALL;
+		break;
+
+	default:
+		return -ERANGE;
+	}
+	pdata->hwts_rx_en = ((config.rx_filter == HWTSTAMP_FILTER_NONE) ? 0 : 1);
+
+	if (!pdata->hwts_tx_en && !pdata->hwts_rx_en) {
+		/* disable hw time stamping */
+		hw_if->config_hw_time_stamping(varMAC_TCR);
+	} else {
+		varMAC_TCR = (MAC_TCR_TSENA | MAC_TCR_TSCFUPDT | MAC_TCR_TSCTRLSSR |
+				tstamp_all | ptp_v2 | ptp_over_ethernet | ptp_over_ipv6_udp |
+				ptp_over_ipv4_udp | ts_event_en | ts_master_en |
+				snap_type_sel | av_8021asm_en);
+
+		if (!pdata->one_nsec_accuracy)
+			varMAC_TCR &= ~MAC_TCR_TSCTRLSSR;
+
+		hw_if->config_hw_time_stamping(varMAC_TCR);
+
+		/* program Sub Second Increment Reg */
+		hw_if->config_sub_second_increment(DWC_ETH_QOS_SYSCLOCK);
+
+		/* formula is :
+		 * addend = 2^32/freq_div_ratio;
+		 *
+		 * where, freq_div_ratio = DWC_ETH_QOS_SYSCLOCK/50MHz
+		 *
+		 * hence, addend = ((2^32) * 50MHz)/DWC_ETH_QOS_SYSCLOCK;
+		 *
+		 * NOTE: DWC_ETH_QOS_SYSCLOCK should be >= 50MHz to
+		 *       achive 20ns accuracy.
+		 *
+		 * 2^x * y == (y << x), hence
+		 * 2^32 * 50000000 ==> (50000000 << 32)
+		 * */
+		temp = (u64)(50000000ULL << 32);
+		pdata->default_addend = div_u64(temp, 62500000);
+
+		hw_if->config_addend(pdata->default_addend);
+
+		/* initialize system time */
+		getnstimeofday(&now);
+		hw_if->init_systime(now.tv_sec, now.tv_nsec);
+	}
+
+	DBGPR_PTP("config.flags = %#x, tx_type = %#x, rx_filter = %#x\n",
+		config.flags, config.tx_type, config.rx_filter);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_handle_hwtstamp_ioctl\n");
+
+	return (copy_to_user(ifr->ifr_data, &config,
+		sizeof(struct hwtstamp_config))) ? -EFAULT : 0;
+}
+
+
+/*!
+ * \brief Driver IOCTL routine
+ *
+ * \details This function is invoked by kernel when a user request an ioctl
+ * which can't be handled by the generic interface code. Following operations
+ * are performed in this functions.
+ * - Configuring the PMT module.
+ * - Configuring TX and RX PBL.
+ * - Configuring the TX and RX FIFO threshold level.
+ * - Configuring the TX and RX OSF mode.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] ifr – pointer to IOCTL specific structure.
+ * \param[in] cmd – IOCTL command.
+ *
+ * \return int
+ *
+ * \retval 0 - success
+ * \retval negative - failure
+ */
+
+static int DWC_ETH_QOS_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct ifr_data_struct *req = ifr->ifr_ifru.ifru_data;
+	struct mii_ioctl_data *data = if_mii(ifr);
+	unsigned int reg_val = 0;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_ioctl\n");
+
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	if ((!netif_running(dev)) || (!pdata->phydev)) {
+		DBGPR("<--DWC_ETH_QOS_ioctl - error\n");
+		return -EINVAL;
+	}
+#endif
+
+	spin_lock(&pdata->lock);
+	switch (cmd) {
+	case SIOCGMIIPHY:
+		data->phy_id = pdata->phyaddr;
+		printk(KERN_ALERT "PHY ID: SIOCGMIIPHY\n");
+		break;
+
+	case SIOCGMIIREG:
+		ret =
+		    DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+				(data->reg_num & 0x1F), &reg_val);
+		if (ret)
+			ret = -EIO;
+
+		data->val_out = reg_val;
+		printk(KERN_ALERT "PHY ID: SIOCGMIIREG reg:%#x reg_val:%#x\n",
+		       (data->reg_num & 0x1F), reg_val);
+		break;
+
+	case SIOCSMIIREG:
+		printk(KERN_ALERT "PHY ID: SIOCSMIIPHY\n");
+		break;
+
+	case DWC_ETH_QOS_PRV_IOCTL:
+		ret = DWC_ETH_QOS_handle_prv_ioctl(pdata, req);
+		req->command_error = ret;
+		break;
+
+	case SIOCSHWTSTAMP:
+		ret = DWC_ETH_QOS_handle_hwtstamp_ioctl(pdata, ifr);
+		break;
+
+	default:
+		ret = -EOPNOTSUPP;
+		printk(KERN_ALERT "Unsupported IOCTL call\n");
+	}
+	spin_unlock(&pdata->lock);
+
+	DBGPR("<--DWC_ETH_QOS_ioctl\n");
+
+	return ret;
+}
+
+/*!
+* \brief API to change MTU.
+*
+* \details This function is invoked by upper layer when user changes
+* MTU (Maximum Transfer Unit). The MTU is used by the Network layer
+* to driver packet transmission. Ethernet has a default MTU of
+* 1500Bytes. This value can be changed with ifconfig -
+* ifconfig <interface_name> mtu <new_mtu_value>
+*
+* \param[in] dev - pointer to net_device structure
+* \param[in] new_mtu - the new MTU for the device.
+*
+* \return integer
+*
+* \retval 0 - on success and -ve on failure.
+*/
+
+static INT DWC_ETH_QOS_change_mtu(struct net_device *dev, INT new_mtu)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	int max_frame = (new_mtu + ETH_HLEN + ETH_FCS_LEN + VLAN_HLEN);
+
+	DBGPR("-->DWC_ETH_QOS_change_mtu: new_mtu:%d\n", new_mtu);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	printk(KERN_ALERT "jumbo frames not supported with PG test\n");
+	return -EOPNOTSUPP;
+#endif
+	if (dev->mtu == new_mtu) {
+		printk(KERN_ALERT "%s: is already configured to %d mtu\n",
+		       dev->name, new_mtu);
+		return 0;
+	}
+
+	/* Supported frame sizes */
+	if ((new_mtu < DWC_ETH_QOS_MIN_SUPPORTED_MTU) ||
+	    (max_frame > DWC_ETH_QOS_MAX_SUPPORTED_MTU)) {
+		printk(KERN_ALERT
+		       "%s: invalid MTU, min %d and max %d MTU are supported\n",
+		       dev->name, DWC_ETH_QOS_MIN_SUPPORTED_MTU,
+		       DWC_ETH_QOS_MAX_SUPPORTED_MTU);
+		return -EINVAL;
+	}
+
+	printk(KERN_ALERT "changing MTU from %d to %d\n", dev->mtu, new_mtu);
+
+	DWC_ETH_QOS_stop_dev(pdata);
+
+	if (max_frame <= 2048)
+		pdata->rx_buffer_len = 2048;
+	else
+		pdata->rx_buffer_len = PAGE_SIZE; /* in case of JUMBO frame,
+						max buffer allocated is
+						PAGE_SIZE */
+
+	if ((max_frame == ETH_FRAME_LEN + ETH_FCS_LEN) ||
+	    (max_frame == ETH_FRAME_LEN + ETH_FCS_LEN + VLAN_HLEN))
+		pdata->rx_buffer_len =
+		    DWC_ETH_QOS_ETH_FRAME_LEN;
+
+	dev->mtu = new_mtu;
+
+	DWC_ETH_QOS_start_dev(pdata);
+
+	DBGPR("<--DWC_ETH_QOS_change_mtu\n");
+
+	return 0;
+}
+
+#ifdef DWC_ETH_QOS_QUEUE_SELECT_ALGO
+u16	DWC_ETH_QOS_select_queue(struct net_device *dev,
+			struct sk_buff *skb)
+{
+	static u16 txqueue_select = 0;
+
+	DBGPR("-->DWC_ETH_QOS_select_queue\n");
+
+	txqueue_select = skb_tx_hash(dev, skb);
+
+	DBGPR("<--DWC_ETH_QOS_select_queue txqueue-select:%d\n",
+		txqueue_select);
+
+	return txqueue_select;
+}
+#endif
+
+/*!
+* \brief API to delete vid to HW filter.
+*
+* \details This function is invoked by upper layer when a VLAN id is removed.
+* This function deletes the VLAN id from the HW filter.
+* vlan id can be removed with vconfig -
+* vconfig rem <interface_name > <vlan_id>
+*
+* \param[in] dev - pointer to net_device structure
+* \param[in] vid - vlan id to be removed.
+*
+* \return void
+*/
+static int DWC_ETH_QOS_vlan_rx_kill_vid(struct net_device *dev,
+      __always_unused __be16 proto, u16 vid)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned short new_index, old_index;
+	int crc32_val = 0;
+	unsigned int enb_12bit_vhash;
+
+	printk(KERN_ALERT "-->DWC_ETH_QOS_vlan_rx_kill_vid: vid = %d\n",
+		vid);
+
+	if (pdata->vlan_hash_filtering) {
+		crc32_val = (bitrev32(~crc32_le(~0, (unsigned char *)&vid, 2)) >> 28);
+
+		enb_12bit_vhash = hw_if->get_vlan_tag_comparison();
+		if (enb_12bit_vhash) {
+			/* neget 4-bit crc value for 12-bit VLAN hash comparison */
+			new_index = (1 << (~crc32_val & 0xF));
+		} else {
+			new_index = (1 << (crc32_val & 0xF));
+		}
+
+		old_index = hw_if->get_vlan_hash_table_reg();
+		old_index &= ~new_index;
+		hw_if->update_vlan_hash_table_reg(old_index);
+		pdata->vlan_ht_or_id = old_index;
+	} else {
+		/* By default, receive only VLAN pkt with VID = 1
+		 * becasue writting 0 will pass all VLAN pkt */
+		hw_if->update_vlan_id(1);
+		pdata->vlan_ht_or_id = 1;
+	}
+
+	printk(KERN_ALERT "<--DWC_ETH_QOS_vlan_rx_kill_vid\n");
+   return 0;
+}
+
+
+/*!
+* \brief API to add vid to HW filter.
+*
+* \details This function is invoked by upper layer when a new VALN id is
+* registered. This function updates the HW filter with new VLAN id.
+* New vlan id can be added with vconfig -
+* vconfig add <interface_name > <vlan_id>
+*
+* \param[in] dev - pointer to net_device structure
+* \param[in] vid - new vlan id.
+*
+* \return int
+*
+* \retval zero on success and -ve number on failure.
+*/
+static int DWC_ETH_QOS_vlan_rx_add_vid(struct net_device *dev,
+      __always_unused __be16 proto, u16 vid)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned short new_index, old_index;
+	int crc32_val = 0;
+	unsigned int enb_12bit_vhash;
+
+	printk(KERN_ALERT "-->DWC_ETH_QOS_vlan_rx_add_vid: vid = %d\n",
+		vid);
+
+	if (pdata->vlan_hash_filtering) {
+		/* The upper 4 bits of the calculated CRC are used to
+		 * index the content of the VLAN Hash Table Reg.
+		 * */
+		crc32_val = (bitrev32(~crc32_le(~0, (unsigned char *)&vid, 2)) >> 28);
+
+		/* These 4(0xF) bits determines the bit within the
+		 * VLAN Hash Table Reg 0
+		 * */
+		enb_12bit_vhash = hw_if->get_vlan_tag_comparison();
+		if (enb_12bit_vhash) {
+			/* neget 4-bit crc value for 12-bit VLAN hash comparison */
+			new_index = (1 << (~crc32_val & 0xF));
+		} else {
+			new_index = (1 << (crc32_val & 0xF));
+		}
+
+		old_index = hw_if->get_vlan_hash_table_reg();
+		old_index |= new_index;
+		hw_if->update_vlan_hash_table_reg(old_index);
+		pdata->vlan_ht_or_id = old_index;
+	} else {
+		hw_if->update_vlan_id(vid);
+		pdata->vlan_ht_or_id = vid;
+	}
+
+	printk(KERN_ALERT "<--DWC_ETH_QOS_vlan_rx_add_vid\n");
+   return 0;
+}
+
+/*!
+ * \brief API called to put device in powerdown mode
+ *
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to move the device to power down state. Following operations
+ * are performed in this function.
+ * - stop the phy.
+ * - stop the queue.
+ * - Disable napi.
+ * - Stop DMA TX and RX process.
+ * - Enable power down mode using PMT module.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] wakeup_type – remote wake-on-lan or magic packet.
+ * \param[in] caller – netif_detach gets called conditionally based
+ *                     on caller, IOCTL or DRIVER-suspend
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+INT DWC_ETH_QOS_powerdown(struct net_device *dev, UINT wakeup_type,
+		UINT caller)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	ULONG flags;
+
+	DBGPR(KERN_ALERT "-->DWC_ETH_QOS_powerdown\n");
+
+	if (!dev || !netif_running(dev) ||
+	    (caller == DWC_ETH_QOS_IOCTL_CONTEXT && pdata->power_down)) {
+		printk(KERN_ALERT
+		       "Device is already powered down and will powerup for %s\n",
+		       DWC_ETH_QOS_POWER_DOWN_TYPE(pdata));
+		DBGPR("<--DWC_ETH_QOS_powerdown\n");
+		return -EINVAL;
+	}
+
+	if (pdata->phydev)
+		phy_stop(pdata->phydev);
+
+	spin_lock_irqsave(&pdata->pmt_lock, flags);
+
+	if (caller == DWC_ETH_QOS_DRIVER_CONTEXT)
+		netif_device_detach(dev);
+
+	netif_tx_disable(dev);
+	DWC_ETH_QOS_all_ch_napi_disable(pdata);
+
+	/* stop DMA TX/RX */
+	DWC_ETH_QOS_stop_all_ch_tx_dma(pdata);
+	DWC_ETH_QOS_stop_all_ch_rx_dma(pdata);
+
+	/* enable power down mode by programming the PMT regs */
+	if (wakeup_type & DWC_ETH_QOS_REMOTE_WAKEUP)
+		hw_if->enable_remote_pmt();
+	if (wakeup_type & DWC_ETH_QOS_MAGIC_WAKEUP)
+		hw_if->enable_magic_pmt();
+	pdata->power_down_type = wakeup_type;
+
+	if (caller == DWC_ETH_QOS_IOCTL_CONTEXT)
+		pdata->power_down = 1;
+
+	spin_unlock_irqrestore(&pdata->pmt_lock, flags);
+
+	DBGPR("<--DWC_ETH_QOS_powerdown\n");
+
+	return 0;
+}
+
+/*!
+ * \brief API to powerup the device
+ *
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to move the device to out of power down state. Following
+ * operations are performed in this function.
+ * - Wakeup the device using PMT module if supported.
+ * - Starts the phy.
+ * - Enable MAC and DMA TX and RX process.
+ * - Enable napi.
+ * - Starts the queue.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] caller – netif_attach gets called conditionally based
+ *                     on caller, IOCTL or DRIVER-suspend
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+INT DWC_ETH_QOS_powerup(struct net_device *dev, UINT caller)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	ULONG flags;
+
+	DBGPR("-->DWC_ETH_QOS_powerup\n");
+
+	if (!dev || !netif_running(dev) ||
+	    (caller == DWC_ETH_QOS_IOCTL_CONTEXT && !pdata->power_down)) {
+		printk(KERN_ALERT "Device is already powered up\n");
+		DBGPR(KERN_ALERT "<--DWC_ETH_QOS_powerup\n");
+		return -EINVAL;
+	}
+
+	spin_lock_irqsave(&pdata->pmt_lock, flags);
+
+	if (pdata->power_down_type & DWC_ETH_QOS_MAGIC_WAKEUP) {
+		hw_if->disable_magic_pmt();
+		pdata->power_down_type &= ~DWC_ETH_QOS_MAGIC_WAKEUP;
+	}
+
+	if (pdata->power_down_type & DWC_ETH_QOS_REMOTE_WAKEUP) {
+		hw_if->disable_remote_pmt();
+		pdata->power_down_type &= ~DWC_ETH_QOS_REMOTE_WAKEUP;
+	}
+
+	pdata->power_down = 0;
+
+	if (pdata->phydev)
+		phy_start(pdata->phydev);
+
+	/* enable MAC TX/RX */
+	hw_if->start_mac_tx_rx();
+
+	/* enable DMA TX/RX */
+	DWC_ETH_QOS_start_all_ch_tx_dma(pdata);
+	DWC_ETH_QOS_start_all_ch_rx_dma(pdata);
+
+	if (caller == DWC_ETH_QOS_DRIVER_CONTEXT)
+		netif_device_attach(dev);
+
+	DWC_ETH_QOS_napi_enable_mq(pdata);
+
+	netif_tx_start_all_queues(dev);
+
+	spin_unlock_irqrestore(&pdata->pmt_lock, flags);
+
+	DBGPR("<--DWC_ETH_QOS_powerup\n");
+
+	return 0;
+}
+
+/*!
+ * \brief API to configure remote wakeup
+ *
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to move the device to power down state using remote wakeup.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] req – pointer to ioctl data structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+INT DWC_ETH_QOS_configure_remotewakeup(struct net_device *dev,
+				       struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+
+	if (!dev || !netif_running(dev) || !pdata->hw_feat.rwk_sel
+	    || pdata->power_down) {
+		printk(KERN_ALERT
+		       "Device is already powered down and will powerup for %s\n",
+		       DWC_ETH_QOS_POWER_DOWN_TYPE(pdata));
+		return -EINVAL;
+	}
+
+	hw_if->configure_rwk_filter(req->rwk_filter_values,
+				    req->rwk_filter_length);
+
+	DWC_ETH_QOS_powerdown(dev, DWC_ETH_QOS_REMOTE_WAKEUP,
+			DWC_ETH_QOS_IOCTL_CONTEXT);
+
+	return 0;
+}
+
+/*!
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to change the RX DMA PBL value. This function will program
+ * the device to configure the user specified RX PBL value.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] rx_pbl – RX DMA pbl value to be programmed.
+ *
+ * \return void
+ *
+ * \retval none
+ */
+
+static void DWC_ETH_QOS_config_rx_pbl(struct DWC_ETH_QOS_prv_data *pdata,
+				      UINT rx_pbl,
+				      UINT qInx)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT pblx8_val = 0;
+
+	DBGPR("-->DWC_ETH_QOS_config_rx_pbl: %d\n", rx_pbl);
+
+	switch (rx_pbl) {
+	case DWC_ETH_QOS_PBL_1:
+	case DWC_ETH_QOS_PBL_2:
+	case DWC_ETH_QOS_PBL_4:
+	case DWC_ETH_QOS_PBL_8:
+	case DWC_ETH_QOS_PBL_16:
+	case DWC_ETH_QOS_PBL_32:
+		hw_if->config_rx_pbl_val(qInx, rx_pbl);
+		hw_if->config_pblx8(qInx, 0);
+		break;
+	case DWC_ETH_QOS_PBL_64:
+	case DWC_ETH_QOS_PBL_128:
+	case DWC_ETH_QOS_PBL_256:
+		hw_if->config_rx_pbl_val(qInx, rx_pbl / 8);
+		hw_if->config_pblx8(qInx, 1);
+		pblx8_val = 1;
+		break;
+	}
+
+	switch (pblx8_val) {
+		case 0:
+			printk(KERN_ALERT "Tx PBL[%d] value: %d\n",
+					qInx, hw_if->get_tx_pbl_val(qInx));
+			printk(KERN_ALERT "Rx PBL[%d] value: %d\n",
+					qInx, hw_if->get_rx_pbl_val(qInx));
+			break;
+		case 1:
+			printk(KERN_ALERT "Tx PBL[%d] value: %d\n",
+					qInx, (hw_if->get_tx_pbl_val(qInx) * 8));
+			printk(KERN_ALERT "Rx PBL[%d] value: %d\n",
+					qInx, (hw_if->get_rx_pbl_val(qInx) * 8));
+			break;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_config_rx_pbl\n");
+}
+
+/*!
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to change the TX DMA PBL value. This function will program
+ * the device to configure the user specified TX PBL value.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] tx_pbl – TX DMA pbl value to be programmed.
+ *
+ * \return void
+ *
+ * \retval none
+ */
+
+static void DWC_ETH_QOS_config_tx_pbl(struct DWC_ETH_QOS_prv_data *pdata,
+				      UINT tx_pbl,
+				      UINT qInx)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT pblx8_val = 0;
+
+	DBGPR("-->DWC_ETH_QOS_config_tx_pbl: %d\n", tx_pbl);
+
+	switch (tx_pbl) {
+	case DWC_ETH_QOS_PBL_1:
+	case DWC_ETH_QOS_PBL_2:
+	case DWC_ETH_QOS_PBL_4:
+	case DWC_ETH_QOS_PBL_8:
+	case DWC_ETH_QOS_PBL_16:
+	case DWC_ETH_QOS_PBL_32:
+		hw_if->config_tx_pbl_val(qInx, tx_pbl);
+		hw_if->config_pblx8(qInx, 0);
+		break;
+	case DWC_ETH_QOS_PBL_64:
+	case DWC_ETH_QOS_PBL_128:
+	case DWC_ETH_QOS_PBL_256:
+		hw_if->config_tx_pbl_val(qInx, tx_pbl / 8);
+		hw_if->config_pblx8(qInx, 1);
+		pblx8_val = 1;
+		break;
+	}
+
+	switch (pblx8_val) {
+		case 0:
+			printk(KERN_ALERT "Tx PBL[%d] value: %d\n",
+					qInx, hw_if->get_tx_pbl_val(qInx));
+			printk(KERN_ALERT "Rx PBL[%d] value: %d\n",
+					qInx, hw_if->get_rx_pbl_val(qInx));
+			break;
+		case 1:
+			printk(KERN_ALERT "Tx PBL[%d] value: %d\n",
+					qInx, (hw_if->get_tx_pbl_val(qInx) * 8));
+			printk(KERN_ALERT "Rx PBL[%d] value: %d\n",
+					qInx, (hw_if->get_rx_pbl_val(qInx) * 8));
+			break;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_config_tx_pbl\n");
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to select the DCB algorithm.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] req – pointer to ioctl data structure.
+ *
+ * \return void
+ *
+ * \retval none
+ */
+
+static void DWC_ETH_QOS_program_dcb_algorithm(struct DWC_ETH_QOS_prv_data *pdata,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_dcb_algorithm l_dcb_struct, *u_dcb_struct =
+		(struct DWC_ETH_QOS_dcb_algorithm *)req->ptr;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+
+	DBGPR("-->DWC_ETH_QOS_program_dcb_algorithm\n");
+
+	if(copy_from_user(&l_dcb_struct, u_dcb_struct,
+				sizeof(struct DWC_ETH_QOS_dcb_algorithm)))
+		printk(KERN_ALERT "Failed to fetch DCB Struct info from user\n");
+
+	hw_if->set_tx_queue_operating_mode(l_dcb_struct.qInx,
+		(UINT)l_dcb_struct.op_mode);
+	hw_if->set_dcb_algorithm(l_dcb_struct.algorithm);
+	hw_if->set_dcb_queue_weight(l_dcb_struct.qInx, l_dcb_struct.weight);
+
+	DBGPR("<--DWC_ETH_QOS_program_dcb_algorithm\n");
+
+	return;
+}
+
+
+/*!
+ * \details This function is invoked by ioctl function when the user issues an
+ * ioctl command to select the AVB algorithm. This function also configures other
+ * parameters like send and idle slope, high and low credit.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] req – pointer to ioctl data structure.
+ *
+ * \return void
+ *
+ * \retval none
+ */
+
+static void DWC_ETH_QOS_program_avb_algorithm(struct DWC_ETH_QOS_prv_data *pdata,
+		struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_avb_algorithm l_avb_struct, *u_avb_struct =
+		(struct DWC_ETH_QOS_avb_algorithm *)req->ptr;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+
+	DBGPR("-->DWC_ETH_QOS_program_avb_algorithm\n");
+
+	if(copy_from_user(&l_avb_struct, u_avb_struct,
+				sizeof(struct DWC_ETH_QOS_avb_algorithm)))
+		printk(KERN_ALERT "Failed to fetch AVB Struct info from user\n");
+
+	hw_if->set_tx_queue_operating_mode(l_avb_struct.qInx,
+		(UINT)l_avb_struct.op_mode);
+	hw_if->set_avb_algorithm(l_avb_struct.qInx, l_avb_struct.algorithm);
+	hw_if->config_credit_control(l_avb_struct.qInx, l_avb_struct.cc);
+	hw_if->config_send_slope(l_avb_struct.qInx, l_avb_struct.send_slope);
+	hw_if->config_idle_slope(l_avb_struct.qInx, l_avb_struct.idle_slope);
+	hw_if->config_high_credit(l_avb_struct.qInx, l_avb_struct.hi_credit);
+	hw_if->config_low_credit(l_avb_struct.qInx, l_avb_struct.low_credit);
+
+	DBGPR("<--DWC_ETH_QOS_program_avb_algorithm\n");
+
+	return;
+}
+
+/*!
+* \brief API to read the registers & prints the value.
+* \details This function will read all the device register except
+* data register & prints the values.
+*
+* \return none
+*/
+
+void dbgpr_regs(void)
+{
+	UINT val0;
+	UINT val1;
+	UINT val2;
+	UINT val3;
+	UINT val4;
+	UINT val5;
+
+	MAC_PMTCSR_RgRd(val0);
+	MMC_RXICMP_ERR_OCTETS_RgRd(val1);
+	MMC_RXICMP_GD_OCTETS_RgRd(val2);
+	MMC_RXTCP_ERR_OCTETS_RgRd(val3);
+	MMC_RXTCP_GD_OCTETS_RgRd(val4);
+	MMC_RXUDP_ERR_OCTETS_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_PMTCSR:%#x\n"
+	      "dbgpr_regs: MMC_RXICMP_ERR_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXICMP_GD_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXTCP_ERR_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXTCP_GD_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXUDP_ERR_OCTETS:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXUDP_GD_OCTETS_RgRd(val0);
+	MMC_RXIPV6_NOPAY_OCTETS_RgRd(val1);
+	MMC_RXIPV6_HDRERR_OCTETS_RgRd(val2);
+	MMC_RXIPV6_GD_OCTETS_RgRd(val3);
+	MMC_RXIPV4_UDSBL_OCTETS_RgRd(val4);
+	MMC_RXIPV4_FRAG_OCTETS_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXUDP_GD_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_NOPAY_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_HDRERR_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_GD_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_UDSBL_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_FRAG_OCTETS:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXIPV4_NOPAY_OCTETS_RgRd(val0);
+	MMC_RXIPV4_HDRERR_OCTETS_RgRd(val1);
+	MMC_RXIPV4_GD_OCTETS_RgRd(val2);
+	MMC_RXICMP_ERR_PKTS_RgRd(val3);
+	MMC_RXICMP_GD_PKTS_RgRd(val4);
+	MMC_RXTCP_ERR_PKTS_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXIPV4_NOPAY_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_HDRERR_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_GD_OCTETS:%#x\n"
+	      "dbgpr_regs: MMC_RXICMP_ERR_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXICMP_GD_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXTCP_ERR_PKTS:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXTCP_GD_PKTS_RgRd(val0);
+	MMC_RXUDP_ERR_PKTS_RgRd(val1);
+	MMC_RXUDP_GD_PKTS_RgRd(val2);
+	MMC_RXIPV6_NOPAY_PKTS_RgRd(val3);
+	MMC_RXIPV6_HDRERR_PKTS_RgRd(val4);
+	MMC_RXIPV6_GD_PKTS_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXTCP_GD_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXUDP_ERR_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXUDP_GD_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_NOPAY_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_HDRERR_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV6_GD_PKTS:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXIPV4_UBSBL_PKTS_RgRd(val0);
+	MMC_RXIPV4_FRAG_PKTS_RgRd(val1);
+	MMC_RXIPV4_NOPAY_PKTS_RgRd(val2);
+	MMC_RXIPV4_HDRERR_PKTS_RgRd(val3);
+	MMC_RXIPV4_GD_PKTS_RgRd(val4);
+	MMC_RXCTRLPACKETS_G_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXIPV4_UBSBL_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_FRAG_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_NOPAY_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_HDRERR_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXIPV4_GD_PKTS:%#x\n"
+	      "dbgpr_regs: MMC_RXCTRLPACKETS_G:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXRCVERROR_RgRd(val0);
+	MMC_RXWATCHDOGERROR_RgRd(val1);
+	MMC_RXVLANPACKETS_GB_RgRd(val2);
+	MMC_RXFIFOOVERFLOW_RgRd(val3);
+	MMC_RXPAUSEPACKETS_RgRd(val4);
+	MMC_RXOUTOFRANGETYPE_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXRCVERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXWATCHDOGERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXVLANPACKETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RXFIFOOVERFLOW:%#x\n"
+	      "dbgpr_regs: MMC_RXPAUSEPACKETS:%#x\n"
+	      "dbgpr_regs: MMC_RXOUTOFRANGETYPE:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXLENGTHERROR_RgRd(val0);
+	MMC_RXUNICASTPACKETS_G_RgRd(val1);
+	MMC_RX1024TOMAXOCTETS_GB_RgRd(val2);
+	MMC_RX512TO1023OCTETS_GB_RgRd(val3);
+	MMC_RX256TO511OCTETS_GB_RgRd(val4);
+	MMC_RX128TO255OCTETS_GB_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXLENGTHERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXUNICASTPACKETS_G:%#x\n"
+	      "dbgpr_regs: MMC_RX1024TOMAXOCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RX512TO1023OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RX256TO511OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RX128TO255OCTETS_GB:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RX65TO127OCTETS_GB_RgRd(val0);
+	MMC_RX64OCTETS_GB_RgRd(val1);
+	MMC_RXOVERSIZE_G_RgRd(val2);
+	MMC_RXUNDERSIZE_G_RgRd(val3);
+	MMC_RXJABBERERROR_RgRd(val4);
+	MMC_RXRUNTERROR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RX65TO127OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RX64OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_RXOVERSIZE_G:%#x\n"
+	      "dbgpr_regs: MMC_RXUNDERSIZE_G:%#x\n"
+	      "dbgpr_regs: MMC_RXJABBERERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXRUNTERROR:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXALIGNMENTERROR_RgRd(val0);
+	MMC_RXCRCERROR_RgRd(val1);
+	MMC_RXMULTICASTPACKETS_G_RgRd(val2);
+	MMC_RXBROADCASTPACKETS_G_RgRd(val3);
+	MMC_RXOCTETCOUNT_G_RgRd(val4);
+	MMC_RXOCTETCOUNT_GB_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXALIGNMENTERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXCRCERROR:%#x\n"
+	      "dbgpr_regs: MMC_RXMULTICASTPACKETS_G:%#x\n"
+	      "dbgpr_regs: MMC_RXBROADCASTPACKETS_G:%#x\n"
+	      "dbgpr_regs: MMC_RXOCTETCOUNT_G:%#x\n"
+	      "dbgpr_regs: MMC_RXOCTETCOUNT_GB:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_RXPACKETCOUNT_GB_RgRd(val0);
+	MMC_TXOVERSIZE_G_RgRd(val1);
+	MMC_TXVLANPACKETS_G_RgRd(val2);
+	MMC_TXPAUSEPACKETS_RgRd(val3);
+	MMC_TXEXCESSDEF_RgRd(val4);
+	MMC_TXPACKETSCOUNT_G_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_RXPACKETCOUNT_GB:%#x\n"
+	      "dbgpr_regs: MMC_TXOVERSIZE_G:%#x\n"
+	      "dbgpr_regs: MMC_TXVLANPACKETS_G:%#x\n"
+	      "dbgpr_regs: MMC_TXPAUSEPACKETS:%#x\n"
+	      "dbgpr_regs: MMC_TXEXCESSDEF:%#x\n"
+	      "dbgpr_regs: MMC_TXPACKETSCOUNT_G:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_TXOCTETCOUNT_G_RgRd(val0);
+	MMC_TXCARRIERERROR_RgRd(val1);
+	MMC_TXEXESSCOL_RgRd(val2);
+	MMC_TXLATECOL_RgRd(val3);
+	MMC_TXDEFERRED_RgRd(val4);
+	MMC_TXMULTICOL_G_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_TXOCTETCOUNT_G:%#x\n"
+	      "dbgpr_regs: MMC_TXCARRIERERROR:%#x\n"
+	      "dbgpr_regs: MMC_TXEXESSCOL:%#x\n"
+	      "dbgpr_regs: MMC_TXLATECOL:%#x\n"
+	      "dbgpr_regs: MMC_TXDEFERRED:%#x\n"
+	      "dbgpr_regs: MMC_TXMULTICOL_G:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_TXSINGLECOL_G_RgRd(val0);
+	MMC_TXUNDERFLOWERROR_RgRd(val1);
+	MMC_TXBROADCASTPACKETS_GB_RgRd(val2);
+	MMC_TXMULTICASTPACKETS_GB_RgRd(val3);
+	MMC_TXUNICASTPACKETS_GB_RgRd(val4);
+	MMC_TX1024TOMAXOCTETS_GB_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_TXSINGLECOL_G:%#x\n"
+	      "dbgpr_regs: MMC_TXUNDERFLOWERROR:%#x\n"
+	      "dbgpr_regs: MMC_TXBROADCASTPACKETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TXMULTICASTPACKETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TXUNICASTPACKETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TX1024TOMAXOCTETS_GB:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_TX512TO1023OCTETS_GB_RgRd(val0);
+	MMC_TX256TO511OCTETS_GB_RgRd(val1);
+	MMC_TX128TO255OCTETS_GB_RgRd(val2);
+	MMC_TX65TO127OCTETS_GB_RgRd(val3);
+	MMC_TX64OCTETS_GB_RgRd(val4);
+	MMC_TXMULTICASTPACKETS_G_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_TX512TO1023OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TX256TO511OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TX128TO255OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TX65TO127OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TX64OCTETS_GB:%#x\n"
+	      "dbgpr_regs: MMC_TXMULTICASTPACKETS_G:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_TXBROADCASTPACKETS_G_RgRd(val0);
+	MMC_TXPACKETCOUNT_GB_RgRd(val1);
+	MMC_TXOCTETCOUNT_GB_RgRd(val2);
+	MMC_IPC_INTR_RX_RgRd(val3);
+	MMC_IPC_INTR_MASK_RX_RgRd(val4);
+	MMC_INTR_MASK_TX_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_TXBROADCASTPACKETS_G:%#x\n"
+	      "dbgpr_regs: MMC_TXPACKETCOUNT_GB:%#x\n"
+	      "dbgpr_regs: MMC_TXOCTETCOUNT_GB:%#x\n"
+	      "dbgpr_regs: MMC_IPC_INTR_RX:%#x\n"
+	      "dbgpr_regs: MMC_IPC_INTR_MASK_RX:%#x\n"
+	      "dbgpr_regs: MMC_INTR_MASK_TX:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MMC_INTR_MASK_RX_RgRd(val0);
+	MMC_INTR_TX_RgRd(val1);
+	MMC_INTR_RX_RgRd(val2);
+	MMC_CNTRL_RgRd(val3);
+	MAC_MA1LR_RgRd(val4);
+	MAC_MA1HR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MMC_INTR_MASK_RX:%#x\n"
+	      "dbgpr_regs: MMC_INTR_TX:%#x\n"
+	      "dbgpr_regs: MMC_INTR_RX:%#x\n"
+	      "dbgpr_regs: MMC_CNTRL:%#x\n"
+	      "dbgpr_regs: MAC_MA1LR:%#x\n"
+	      "dbgpr_regs: MAC_MA1HR:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MAC_MA0LR_RgRd(val0);
+	MAC_MA0HR_RgRd(val1);
+	MAC_GPIOR_RgRd(val2);
+	MAC_GMIIDR_RgRd(val3);
+	MAC_GMIIAR_RgRd(val4);
+	MAC_HFR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_MA0LR:%#x\n"
+	      "dbgpr_regs: MAC_MA0HR:%#x\n"
+	      "dbgpr_regs: MAC_GPIOR:%#x\n"
+	      "dbgpr_regs: MAC_GMIIDR:%#x\n"
+	      "dbgpr_regs: MAC_GMIIAR:%#x\n"
+	      "dbgpr_regs: MAC_HFR2:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MAC_HFR1_RgRd(val0);
+	MAC_HFR0_RgRd(val1);
+	MAC_MDR_RgRd(val2);
+	MAC_VR_RgRd(val3);
+	MAC_HTR7_RgRd(val4);
+	MAC_HTR6_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_HFR1:%#x\n"
+	      "dbgpr_regs: MAC_HFR0:%#x\n"
+	      "dbgpr_regs: MAC_MDR:%#x\n"
+	      "dbgpr_regs: MAC_VR:%#x\n"
+	      "dbgpr_regs: MAC_HTR7:%#x\n"
+	      "dbgpr_regs: MAC_HTR6:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MAC_HTR5_RgRd(val0);
+	MAC_HTR4_RgRd(val1);
+	MAC_HTR3_RgRd(val2);
+	MAC_HTR2_RgRd(val3);
+	MAC_HTR1_RgRd(val4);
+	MAC_HTR0_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_HTR5:%#x\n"
+	      "dbgpr_regs: MAC_HTR4:%#x\n"
+	      "dbgpr_regs: MAC_HTR3:%#x\n"
+	      "dbgpr_regs: MAC_HTR2:%#x\n"
+	      "dbgpr_regs: MAC_HTR1:%#x\n"
+	      "dbgpr_regs: MAC_HTR0:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_RIWTR7_RgRd(val0);
+	DMA_RIWTR6_RgRd(val1);
+	DMA_RIWTR5_RgRd(val2);
+	DMA_RIWTR4_RgRd(val3);
+	DMA_RIWTR3_RgRd(val4);
+	DMA_RIWTR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RIWTR7:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR6:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR5:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR4:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR3:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR2:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_RIWTR1_RgRd(val0);
+	DMA_RIWTR0_RgRd(val1);
+	DMA_RDRLR7_RgRd(val2);
+	DMA_RDRLR6_RgRd(val3);
+	DMA_RDRLR5_RgRd(val4);
+	DMA_RDRLR4_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RIWTR1:%#x\n"
+	      "dbgpr_regs: DMA_RIWTR0:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR7:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR6:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR5:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR4:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_RDRLR3_RgRd(val0);
+	DMA_RDRLR2_RgRd(val1);
+	DMA_RDRLR1_RgRd(val2);
+	DMA_RDRLR0_RgRd(val3);
+	DMA_TDRLR7_RgRd(val4);
+	DMA_TDRLR6_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RDRLR3:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR2:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR1:%#x\n"
+	      "dbgpr_regs: DMA_RDRLR0:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR7:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR6:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_TDRLR5_RgRd(val0);
+	DMA_TDRLR4_RgRd(val1);
+	DMA_TDRLR3_RgRd(val2);
+	DMA_TDRLR2_RgRd(val3);
+	DMA_TDRLR1_RgRd(val4);
+	DMA_TDRLR0_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_TDRLR5:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR4:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR3:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR2:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR1:%#x\n"
+	      "dbgpr_regs: DMA_TDRLR0:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_RDTP_RPDR7_RgRd(val0);
+	DMA_RDTP_RPDR6_RgRd(val1);
+	DMA_RDTP_RPDR5_RgRd(val2);
+	DMA_RDTP_RPDR4_RgRd(val3);
+	DMA_RDTP_RPDR3_RgRd(val4);
+	DMA_RDTP_RPDR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RDTP_RPDR7:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR6:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR5:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR4:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR3:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR2:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_RDTP_RPDR1_RgRd(val0);
+	DMA_RDTP_RPDR0_RgRd(val1);
+	DMA_TDTP_TPDR7_RgRd(val2);
+	DMA_TDTP_TPDR6_RgRd(val3);
+	DMA_TDTP_TPDR5_RgRd(val4);
+	DMA_TDTP_TPDR4_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RDTP_RPDR1:%#x\n"
+	      "dbgpr_regs: DMA_RDTP_RPDR0:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR7:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR6:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR5:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR4:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_TDTP_TPDR3_RgRd(val0);
+	DMA_TDTP_TPDR2_RgRd(val1);
+	DMA_TDTP_TPDR1_RgRd(val2);
+	DMA_TDTP_TPDR0_RgRd(val3);
+	DMA_RDLAR7_RgRd(val4);
+	DMA_RDLAR6_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_TDTP_TPDR3:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR2:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR1:%#x\n"
+	      "dbgpr_regs: DMA_TDTP_TPDR0:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR7:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR6:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_RDLAR5_RgRd(val0);
+	DMA_RDLAR4_RgRd(val1);
+	DMA_RDLAR3_RgRd(val2);
+	DMA_RDLAR2_RgRd(val3);
+	DMA_RDLAR1_RgRd(val4);
+	DMA_RDLAR0_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RDLAR5:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR4:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR3:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR2:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR1:%#x\n"
+	      "dbgpr_regs: DMA_RDLAR0:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_TDLAR7_RgRd(val0);
+	DMA_TDLAR6_RgRd(val1);
+	DMA_TDLAR5_RgRd(val2);
+	DMA_TDLAR4_RgRd(val3);
+	DMA_TDLAR3_RgRd(val4);
+	DMA_TDLAR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_TDLAR7:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR6:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR5:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR4:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR3:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR2:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_TDLAR1_RgRd(val0);
+	DMA_TDLAR0_RgRd(val1);
+	DMA_IER7_RgRd(val2);
+	DMA_IER6_RgRd(val3);
+	DMA_IER5_RgRd(val4);
+	DMA_IER4_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_TDLAR1:%#x\n"
+	      "dbgpr_regs: DMA_TDLAR0:%#x\n"
+	      "dbgpr_regs: DMA_IER7:%#x\n"
+	      "dbgpr_regs: DMA_IER6:%#x\n"
+	      "dbgpr_regs: DMA_IER5:%#x\n"
+	      "dbgpr_regs: DMA_IER4:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_IER3_RgRd(val0);
+	DMA_IER2_RgRd(val1);
+	DMA_IER1_RgRd(val2);
+	DMA_IER0_RgRd(val3);
+	MAC_IMR_RgRd(val4);
+	MAC_ISR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_IER3:%#x\n"
+	      "dbgpr_regs: DMA_IER2:%#x\n"
+	      "dbgpr_regs: DMA_IER1:%#x\n"
+	      "dbgpr_regs: DMA_IER0:%#x\n"
+	      "dbgpr_regs: MAC_IMR:%#x\n"
+	      "dbgpr_regs: MAC_ISR:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MTL_ISR_RgRd(val0);
+	DMA_SR7_RgRd(val1);
+	DMA_SR6_RgRd(val2);
+	DMA_SR5_RgRd(val3);
+	DMA_SR4_RgRd(val4);
+	DMA_SR3_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MTL_ISR:%#x\n"
+	      "dbgpr_regs: DMA_SR7:%#x\n"
+	      "dbgpr_regs: DMA_SR6:%#x\n"
+	      "dbgpr_regs: DMA_SR5:%#x\n"
+	      "dbgpr_regs: DMA_SR4:%#x\n"
+	      "dbgpr_regs: DMA_SR3:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_SR2_RgRd(val0);
+	DMA_SR1_RgRd(val1);
+	DMA_SR0_RgRd(val2);
+	DMA_ISR_RgRd(val3);
+	DMA_DSR2_RgRd(val4);
+	DMA_DSR1_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_SR2:%#x\n"
+	      "dbgpr_regs: DMA_SR1:%#x\n"
+	      "dbgpr_regs: DMA_SR0:%#x\n"
+	      "dbgpr_regs: DMA_ISR:%#x\n"
+	      "dbgpr_regs: DMA_DSR2:%#x\n"
+	      "dbgpr_regs: DMA_DSR1:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_DSR0_RgRd(val0);
+	MTL_Q0RDR_RgRd(val1);
+	MTL_Q0ESR_RgRd(val2);
+	MTL_Q0TDR_RgRd(val3);
+	DMA_CHRBAR7_RgRd(val4);
+	DMA_CHRBAR6_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_DSR0:%#x\n"
+	      "dbgpr_regs: MTL_Q0RDR:%#x\n"
+	      "dbgpr_regs: MTL_Q0ESR:%#x\n"
+	      "dbgpr_regs: MTL_Q0TDR:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR7:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR6:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_CHRBAR5_RgRd(val0);
+	DMA_CHRBAR4_RgRd(val1);
+	DMA_CHRBAR3_RgRd(val2);
+	DMA_CHRBAR2_RgRd(val3);
+	DMA_CHRBAR1_RgRd(val4);
+	DMA_CHRBAR0_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CHRBAR5:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR4:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR3:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR2:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR1:%#x\n"
+	      "dbgpr_regs: DMA_CHRBAR0:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_CHTBAR7_RgRd(val0);
+	DMA_CHTBAR6_RgRd(val1);
+	DMA_CHTBAR5_RgRd(val2);
+	DMA_CHTBAR4_RgRd(val3);
+	DMA_CHTBAR3_RgRd(val4);
+	DMA_CHTBAR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CHTBAR7:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR6:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR5:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR4:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR3:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR2:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_CHTBAR1_RgRd(val0);
+	DMA_CHTBAR0_RgRd(val1);
+	DMA_CHRDR7_RgRd(val2);
+	DMA_CHRDR6_RgRd(val3);
+	DMA_CHRDR5_RgRd(val4);
+	DMA_CHRDR4_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CHTBAR1:%#x\n"
+	      "dbgpr_regs: DMA_CHTBAR0:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR7:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR6:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR5:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR4:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_CHRDR3_RgRd(val0);
+	DMA_CHRDR2_RgRd(val1);
+	DMA_CHRDR1_RgRd(val2);
+	DMA_CHRDR0_RgRd(val3);
+	DMA_CHTDR7_RgRd(val4);
+	DMA_CHTDR6_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CHRDR3:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR2:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR1:%#x\n"
+	      "dbgpr_regs: DMA_CHRDR0:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR7:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR6:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_CHTDR5_RgRd(val0);
+	DMA_CHTDR4_RgRd(val1);
+	DMA_CHTDR3_RgRd(val2);
+	DMA_CHTDR2_RgRd(val3);
+	DMA_CHTDR1_RgRd(val4);
+	DMA_CHTDR0_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CHTDR5:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR4:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR3:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR2:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR1:%#x\n"
+	      "dbgpr_regs: DMA_CHTDR0:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_SFCSR7_RgRd(val0);
+	DMA_SFCSR6_RgRd(val1);
+	DMA_SFCSR5_RgRd(val2);
+	DMA_SFCSR4_RgRd(val3);
+	DMA_SFCSR3_RgRd(val4);
+	DMA_SFCSR2_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_SFCSR7:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR6:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR5:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR4:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR3:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR2:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_SFCSR1_RgRd(val0);
+	DMA_SFCSR0_RgRd(val1);
+	MAC_IVLANTIRR_RgRd(val2);
+	MAC_VLANTIRR_RgRd(val3);
+	MAC_VLANHTR_RgRd(val4);
+	MAC_VLANTR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_SFCSR1:%#x\n"
+	      "dbgpr_regs: DMA_SFCSR0:%#x\n"
+	      "dbgpr_regs: MAC_IVLANTIRR:%#x\n"
+	      "dbgpr_regs: MAC_VLANTIRR:%#x\n"
+	      "dbgpr_regs: MAC_VLANHTR:%#x\n"
+	      "dbgpr_regs: MAC_VLANTR:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_SBUS_RgRd(val0);
+	DMA_BMR_RgRd(val1);
+	MTL_Q0RCR_RgRd(val2);
+	MTL_Q0OCR_RgRd(val3);
+	MTL_Q0ROMR_RgRd(val4);
+	MTL_Q0QR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_SBUS:%#x\n"
+	      "dbgpr_regs: DMA_BMR:%#x\n"
+	      "dbgpr_regs: MTL_Q0RCR:%#x\n"
+	      "dbgpr_regs: MTL_Q0OCR:%#x\n"
+	      "dbgpr_regs: MTL_Q0ROMR:%#x\n"
+	      "dbgpr_regs: MTL_Q0QR:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MTL_Q0ECR_RgRd(val0);
+	MTL_Q0UCR_RgRd(val1);
+	MTL_Q0TOMR_RgRd(val2);
+	MTL_RQDCM1R_RgRd(val3);
+	MTL_RQDCM0R_RgRd(val4);
+	MTL_FDDR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MTL_Q0ECR:%#x\n"
+	      "dbgpr_regs: MTL_Q0UCR:%#x\n"
+	      "dbgpr_regs: MTL_Q0TOMR:%#x\n"
+	      "dbgpr_regs: MTL_RQDCM1R:%#x\n"
+	      "dbgpr_regs: MTL_RQDCM0R:%#x\n"
+	      "dbgpr_regs: MTL_FDDR:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MTL_FDACS_RgRd(val0);
+	MTL_OMR_RgRd(val1);
+	MAC_RQC1R_RgRd(val2);
+	MAC_RQC0R_RgRd(val3);
+	MAC_TQPM1R_RgRd(val4);
+	MAC_TQPM0R_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MTL_FDACS:%#x\n"
+	      "dbgpr_regs: MTL_OMR:%#x\n"
+	      "dbgpr_regs: MAC_RQC1R:%#x\n"
+	      "dbgpr_regs: MAC_RQC0R:%#x\n"
+	      "dbgpr_regs: MAC_TQPM1R:%#x\n"
+	      "dbgpr_regs: MAC_TQPM0R:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MAC_RFCR_RgRd(val0);
+	MAC_QTFCR7_RgRd(val1);
+	MAC_QTFCR6_RgRd(val2);
+	MAC_QTFCR5_RgRd(val3);
+	MAC_QTFCR4_RgRd(val4);
+	MAC_QTFCR3_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_RFCR:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR7:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR6:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR5:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR4:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR3:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	MAC_QTFCR2_RgRd(val0);
+	MAC_QTFCR1_RgRd(val1);
+	MAC_Q0TFCR_RgRd(val2);
+	DMA_AXI4CR7_RgRd(val3);
+	DMA_AXI4CR6_RgRd(val4);
+	DMA_AXI4CR5_RgRd(val5);
+
+	DBGPR("dbgpr_regs: MAC_QTFCR2:%#x\n"
+	      "dbgpr_regs: MAC_QTFCR1:%#x\n"
+	      "dbgpr_regs: MAC_Q0TFCR:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR7:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR6:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR5:%#x\n",
+	      val0, val1, val2, val3, val4, val5);
+
+	DMA_AXI4CR4_RgRd(val0);
+	DMA_AXI4CR3_RgRd(val1);
+	DMA_AXI4CR2_RgRd(val2);
+	DMA_AXI4CR1_RgRd(val3);
+	DMA_AXI4CR0_RgRd(val4);
+	DMA_RCR7_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_AXI4CR4:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR3:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR2:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR1:%#x\n"
+	      "dbgpr_regs: DMA_AXI4CR0:%#x\n"
+	      "dbgpr_regs: DMA_RCR7:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_RCR6_RgRd(val0);
+	DMA_RCR5_RgRd(val1);
+	DMA_RCR4_RgRd(val2);
+	DMA_RCR3_RgRd(val3);
+	DMA_RCR2_RgRd(val4);
+	DMA_RCR1_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RCR6:%#x\n"
+	      "dbgpr_regs: DMA_RCR5:%#x\n"
+	      "dbgpr_regs: DMA_RCR4:%#x\n"
+	      "dbgpr_regs: DMA_RCR3:%#x\n"
+	      "dbgpr_regs: DMA_RCR2:%#x\n"
+	      "dbgpr_regs: DMA_RCR1:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_RCR0_RgRd(val0);
+	DMA_TCR7_RgRd(val1);
+	DMA_TCR6_RgRd(val2);
+	DMA_TCR5_RgRd(val3);
+	DMA_TCR4_RgRd(val4);
+	DMA_TCR3_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_RCR0:%#x\n"
+	      "dbgpr_regs: DMA_TCR7:%#x\n"
+	      "dbgpr_regs: DMA_TCR6:%#x\n"
+	      "dbgpr_regs: DMA_TCR5:%#x\n"
+	      "dbgpr_regs: DMA_TCR4:%#x\n"
+	      "dbgpr_regs: DMA_TCR3:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_TCR2_RgRd(val0);
+	DMA_TCR1_RgRd(val1);
+	DMA_TCR0_RgRd(val2);
+	DMA_CR7_RgRd(val3);
+	DMA_CR6_RgRd(val4);
+	DMA_CR5_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_TCR2:%#x\n"
+	      "dbgpr_regs: DMA_TCR1:%#x\n"
+	      "dbgpr_regs: DMA_TCR0:%#x\n"
+	      "dbgpr_regs: DMA_CR7:%#x\n"
+	      "dbgpr_regs: DMA_CR6:%#x\n"
+	      "dbgpr_regs: DMA_CR5:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	DMA_CR4_RgRd(val0);
+	DMA_CR3_RgRd(val1);
+	DMA_CR2_RgRd(val2);
+	DMA_CR1_RgRd(val3);
+	DMA_CR0_RgRd(val4);
+	MAC_WTR_RgRd(val5);
+
+	DBGPR("dbgpr_regs: DMA_CR4:%#x\n"
+	      "dbgpr_regs: DMA_CR3:%#x\n"
+	      "dbgpr_regs: DMA_CR2:%#x\n"
+	      "dbgpr_regs: DMA_CR1:%#x\n"
+	      "dbgpr_regs: DMA_CR0:%#x\n"
+	      "dbgpr_regs: MAC_WTR:%#x\n", val0, val1, val2, val3, val4, val5);
+
+	MAC_MPFR_RgRd(val0);
+	MAC_MECR_RgRd(val1);
+	MAC_MCR_RgRd(val2);
+
+	DBGPR("dbgpr_regs: MAC_MPFR:%#x\n"
+	      "dbgpr_regs: MAC_MECR:%#x\n"
+	      "dbgpr_regs: MAC_MCR:%#x\n", val0, val1, val2);
+
+	return;
+}
+
+/*!
+ * \details This function is invoked by DWC_ETH_QOS_start_xmit and
+ * DWC_ETH_QOS_tx_interrupt function for dumping the TX descriptor contents
+ * which are prepared for packet transmission and which are transmitted by
+ * device. It is mainly used during development phase for debug purpose. Use
+ * of these function may affect the performance during normal operation.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ * \param[in] first_desc_idx – first descriptor index for the current
+ *		transfer.
+ * \param[in] last_desc_idx – last descriptor index for the current transfer.
+ * \param[in] flag – to indicate from which function it is called.
+ *
+ * \return void
+ */
+
+void dump_tx_desc(struct DWC_ETH_QOS_prv_data *pdata, int first_desc_idx,
+		  int last_desc_idx, int flag, UINT qInx)
+{
+	int i;
+	struct s_TX_NORMAL_DESC *desc = NULL;
+	UINT varCTXT;
+
+	if (first_desc_idx == last_desc_idx) {
+		desc = GET_TX_DESC_PTR(qInx, first_desc_idx);
+
+		TX_NORMAL_DESC_TDES3_CTXT_Mlf_Rd(desc->TDES3, varCTXT);
+
+		printk(KERN_ALERT "\n%s[%02d %4p %03d %s] = %#x:%#x:%#x:%#x",
+		       (varCTXT == 1) ? "TX_CONTXT_DESC" : "TX_NORMAL_DESC",
+		       qInx, desc, first_desc_idx,
+		       ((flag == 1) ? "QUEUED FOR TRANSMISSION" :
+			((flag == 0) ? "FREED/FETCHED BY DEVICE" : "DEBUG DESC DUMP")),
+			desc->TDES0, desc->TDES1,
+			desc->TDES2, desc->TDES3);
+	} else {
+		int lp_cnt;
+		if (first_desc_idx > last_desc_idx)
+			lp_cnt = last_desc_idx + TX_DESC_CNT - first_desc_idx;
+		else
+			lp_cnt = last_desc_idx - first_desc_idx;
+
+		for (i = first_desc_idx; lp_cnt >= 0; lp_cnt--) {
+			desc = GET_TX_DESC_PTR(qInx, i);
+
+			TX_NORMAL_DESC_TDES3_CTXT_Mlf_Rd(desc->TDES3, varCTXT);
+
+			printk(KERN_ALERT "\n%s[%02d %4p %03d %s] = %#x:%#x:%#x:%#x",
+			       (varCTXT == 1) ? "TX_CONTXT_DESC" : "TX_NORMAL_DESC",
+			       qInx, desc, i,
+			       ((flag == 1) ? "QUEUED FOR TRANSMISSION" :
+				"FREED/FETCHED BY DEVICE"), desc->TDES0,
+			       desc->TDES1, desc->TDES2, desc->TDES3);
+			INCR_TX_DESC_INDEX(i, 1);
+		}
+	}
+}
+
+/*!
+ * \details This function is invoked by poll function for dumping the
+ * RX descriptor contents. It is mainly used during development phase for
+ * debug purpose. Use of these function may affect the performance during
+ * normal operation
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+void dump_rx_desc(UINT qInx, struct s_RX_NORMAL_DESC *desc, int desc_idx)
+{
+	printk(KERN_ALERT "\nRX_NORMAL_DESC[%02d %4p %03d RECEIVED FROM DEVICE]"\
+		" = %#x:%#x:%#x:%#x",
+		qInx, desc, desc_idx, desc->RDES0, desc->RDES1,
+		desc->RDES2, desc->RDES3);
+}
+
+/*!
+ * \details This function is invoked by start_xmit and poll function for
+ * dumping the content of packet to be transmitted by device or received
+ * from device. It is mainly used during development phase for debug purpose.
+ * Use of these functions may affect the performance during normal operation.
+ *
+ * \param[in] skb – pointer to socket buffer structure.
+ * \param[in] len – length of packet to be transmitted/received.
+ * \param[in] tx_rx – packet to be transmitted or received.
+ * \param[in] desc_idx – descriptor index to be used for transmission or
+ *			reception of packet.
+ *
+ * \return void
+ */
+
+void print_pkt(struct sk_buff *skb, int len, bool tx_rx, int desc_idx)
+{
+	int i, j = 0;
+	unsigned char *buf = skb->data;
+
+	printk(KERN_ALERT
+	       "\n\n/***********************************************************/\n");
+
+	printk(KERN_ALERT "%s pkt of %d Bytes [DESC index = %d]\n\n",
+	       (tx_rx ? "TX" : "RX"), len, desc_idx);
+	printk(KERN_ALERT "Dst MAC addr(6 bytes)\n");
+	for (i = 0; i < 6; i++)
+		printk("%#.2x%s", buf[i], (((i == 5) ? "" : ":")));
+	printk(KERN_ALERT "\nSrc MAC addr(6 bytes)\n");
+	for (i = 6; i <= 11; i++)
+		printk("%#.2x%s", buf[i], (((i == 11) ? "" : ":")));
+	i = (buf[12] << 8 | buf[13]);
+	printk(KERN_ALERT "\nType/Length(2 bytes)\n%#x", i);
+
+	printk(KERN_ALERT "\nPay Load : %d bytes\n", (len - 14));
+	for (i = 14, j = 1; i < len; i++, j++) {
+		printk("%#.2x%s", buf[i], (((i == (len - 1)) ? "" : ":")));
+		if ((j % 16) == 0)
+			printk(KERN_ALERT "");
+	}
+
+	printk(KERN_ALERT
+	       "/*************************************************************/\n\n");
+}
+
+
+/*!
+ * \details This function is invoked by probe function. This function will
+ * initialize default receive coalesce parameters and sw timer value and store
+ * it in respective receive data structure.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+void DWC_ETH_QOS_init_rx_coalesce(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data = NULL;
+	UINT i;
+
+	DBGPR("-->DWC_ETH_QOS_init_rx_coalesce\n");
+
+	for (i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++) {
+		rx_desc_data = GET_RX_WRAPPER_DESC(i);
+
+		rx_desc_data->use_riwt = 1;
+		rx_desc_data->rx_coal_frames = DWC_ETH_QOS_RX_MAX_FRAMES;
+		rx_desc_data->rx_riwt =
+			DWC_ETH_QOS_usec2riwt(DWC_ETH_QOS_OPTIMAL_DMA_RIWT_USEC, pdata);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_init_rx_coalesce\n");
+}
+
+
+/*!
+ * \details This function is invoked by open() function. This function will
+ * clear MMC structure.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_mmc_setup(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR("-->DWC_ETH_QOS_mmc_setup\n");
+
+	if (pdata->hw_feat.mmc_sel) {
+		memset(&pdata->mmc, 0, sizeof(struct DWC_ETH_QOS_mmc_counters));
+	} else
+		printk(KERN_ALERT "No MMC/RMON module available in the HW\n");
+
+	DBGPR("<--DWC_ETH_QOS_mmc_setup\n");
+}
+
+inline unsigned int DWC_ETH_QOS_reg_read(volatile ULONG *ptr)
+{
+		return ioread32((void *)ptr);
+}
+
+
+/*!
+ * \details This function is invoked by ethtool function when user wants to
+ * read MMC counters. This function will read the MMC if supported by core
+ * and store it in DWC_ETH_QOS_mmc_counters structure. By default all the
+ * MMC are programmed "read on reset" hence all the fields of the
+ * DWC_ETH_QOS_mmc_counters are incremented.
+ *
+ * open() function. This function will
+ * initialize MMC control register ie it disable all MMC interrupt and all
+ * MMC register are configured to clear on read.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+void DWC_ETH_QOS_mmc_read(struct DWC_ETH_QOS_mmc_counters *mmc)
+{
+	DBGPR("-->DWC_ETH_QOS_mmc_read\n");
+
+	/* MMC TX counter registers */
+	mmc->mmc_tx_octetcount_gb += DWC_ETH_QOS_reg_read(MMC_TXOCTETCOUNT_GB_RgOffAddr);
+	mmc->mmc_tx_framecount_gb += DWC_ETH_QOS_reg_read(MMC_TXPACKETCOUNT_GB_RgOffAddr);
+	mmc->mmc_tx_broadcastframe_g += DWC_ETH_QOS_reg_read(MMC_TXBROADCASTPACKETS_G_RgOffAddr);
+	mmc->mmc_tx_multicastframe_g += DWC_ETH_QOS_reg_read(MMC_TXMULTICASTPACKETS_G_RgOffAddr);
+	mmc->mmc_tx_64_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX64OCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_65_to_127_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX65TO127OCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_128_to_255_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX128TO255OCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_256_to_511_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX256TO511OCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_512_to_1023_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX512TO1023OCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_1024_to_max_octets_gb += DWC_ETH_QOS_reg_read(MMC_TX1024TOMAXOCTETS_GB_RgOffAddr);
+	mmc->mmc_tx_unicast_gb += DWC_ETH_QOS_reg_read(MMC_TXUNICASTPACKETS_GB_RgOffAddr);
+	mmc->mmc_tx_multicast_gb += DWC_ETH_QOS_reg_read(MMC_TXMULTICASTPACKETS_GB_RgOffAddr);
+	mmc->mmc_tx_broadcast_gb += DWC_ETH_QOS_reg_read(MMC_TXBROADCASTPACKETS_GB_RgOffAddr);
+	mmc->mmc_tx_underflow_error += DWC_ETH_QOS_reg_read(MMC_TXUNDERFLOWERROR_RgOffAddr);
+	mmc->mmc_tx_singlecol_g += DWC_ETH_QOS_reg_read(MMC_TXSINGLECOL_G_RgOffAddr);
+	mmc->mmc_tx_multicol_g += DWC_ETH_QOS_reg_read(MMC_TXMULTICOL_G_RgOffAddr);
+	mmc->mmc_tx_deferred += DWC_ETH_QOS_reg_read(MMC_TXDEFERRED_RgOffAddr);
+	mmc->mmc_tx_latecol += DWC_ETH_QOS_reg_read(MMC_TXLATECOL_RgOffAddr);
+	mmc->mmc_tx_exesscol += DWC_ETH_QOS_reg_read(MMC_TXEXESSCOL_RgOffAddr);
+	mmc->mmc_tx_carrier_error += DWC_ETH_QOS_reg_read(MMC_TXCARRIERERROR_RgOffAddr);
+	mmc->mmc_tx_octetcount_g += DWC_ETH_QOS_reg_read(MMC_TXOCTETCOUNT_G_RgOffAddr);
+	mmc->mmc_tx_framecount_g += DWC_ETH_QOS_reg_read(MMC_TXPACKETSCOUNT_G_RgOffAddr);
+	mmc->mmc_tx_excessdef += DWC_ETH_QOS_reg_read(MMC_TXEXCESSDEF_RgOffAddr);
+	mmc->mmc_tx_pause_frame += DWC_ETH_QOS_reg_read(MMC_TXPAUSEPACKETS_RgOffAddr);
+	mmc->mmc_tx_vlan_frame_g += DWC_ETH_QOS_reg_read(MMC_TXVLANPACKETS_G_RgOffAddr);
+	mmc->mmc_tx_osize_frame_g += DWC_ETH_QOS_reg_read(MMC_TXOVERSIZE_G_RgOffAddr);
+
+	/* MMC RX counter registers */
+	mmc->mmc_rx_framecount_gb += DWC_ETH_QOS_reg_read(MMC_RXPACKETCOUNT_GB_RgOffAddr);
+	mmc->mmc_rx_octetcount_gb += DWC_ETH_QOS_reg_read(MMC_RXOCTETCOUNT_GB_RgOffAddr);
+	mmc->mmc_rx_octetcount_g += DWC_ETH_QOS_reg_read(MMC_RXOCTETCOUNT_G_RgOffAddr);
+	mmc->mmc_rx_broadcastframe_g += DWC_ETH_QOS_reg_read(MMC_RXBROADCASTPACKETS_G_RgOffAddr);
+	mmc->mmc_rx_multicastframe_g += DWC_ETH_QOS_reg_read(MMC_RXMULTICASTPACKETS_G_RgOffAddr);
+	mmc->mmc_rx_crc_errror += DWC_ETH_QOS_reg_read(MMC_RXCRCERROR_RgOffAddr);
+	mmc->mmc_rx_align_error += DWC_ETH_QOS_reg_read(MMC_RXALIGNMENTERROR_RgOffAddr);
+	mmc->mmc_rx_run_error += DWC_ETH_QOS_reg_read(MMC_RXRUNTERROR_RgOffAddr);
+	mmc->mmc_rx_jabber_error += DWC_ETH_QOS_reg_read(MMC_RXJABBERERROR_RgOffAddr);
+	mmc->mmc_rx_undersize_g += DWC_ETH_QOS_reg_read(MMC_RXUNDERSIZE_G_RgOffAddr);
+	mmc->mmc_rx_oversize_g += DWC_ETH_QOS_reg_read(MMC_RXOVERSIZE_G_RgOffAddr);
+	mmc->mmc_rx_64_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX64OCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_65_to_127_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX65TO127OCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_128_to_255_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX128TO255OCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_256_to_511_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX256TO511OCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_512_to_1023_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX512TO1023OCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_1024_to_max_octets_gb += DWC_ETH_QOS_reg_read(MMC_RX1024TOMAXOCTETS_GB_RgOffAddr);
+	mmc->mmc_rx_unicast_g += DWC_ETH_QOS_reg_read(MMC_RXUNICASTPACKETS_G_RgOffAddr);
+	mmc->mmc_rx_length_error += DWC_ETH_QOS_reg_read(MMC_RXLENGTHERROR_RgOffAddr);
+	mmc->mmc_rx_outofrangetype += DWC_ETH_QOS_reg_read(MMC_RXOUTOFRANGETYPE_RgOffAddr);
+	mmc->mmc_rx_pause_frames += DWC_ETH_QOS_reg_read(MMC_RXPAUSEPACKETS_RgOffAddr);
+	mmc->mmc_rx_fifo_overflow += DWC_ETH_QOS_reg_read(MMC_RXFIFOOVERFLOW_RgOffAddr);
+	mmc->mmc_rx_vlan_frames_gb += DWC_ETH_QOS_reg_read(MMC_RXVLANPACKETS_GB_RgOffAddr);
+	mmc->mmc_rx_watchdog_error += DWC_ETH_QOS_reg_read(MMC_RXWATCHDOGERROR_RgOffAddr);
+	mmc->mmc_rx_receive_error += DWC_ETH_QOS_reg_read(MMC_RXRCVERROR_RgOffAddr);
+	mmc->mmc_rx_ctrl_frames_g += DWC_ETH_QOS_reg_read(MMC_RXCTRLPACKETS_G_RgOffAddr);
+
+	/* IPC */
+	mmc->mmc_rx_ipc_intr_mask += DWC_ETH_QOS_reg_read(MMC_IPC_INTR_MASK_RX_RgOffAddr);
+	mmc->mmc_rx_ipc_intr += DWC_ETH_QOS_reg_read(MMC_IPC_INTR_RX_RgOffAddr);
+
+	/* IPv4 */
+	mmc->mmc_rx_ipv4_gd += DWC_ETH_QOS_reg_read(MMC_RXIPV4_GD_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv4_hderr += DWC_ETH_QOS_reg_read(MMC_RXIPV4_HDRERR_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv4_nopay += DWC_ETH_QOS_reg_read(MMC_RXIPV4_NOPAY_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv4_frag += DWC_ETH_QOS_reg_read(MMC_RXIPV4_FRAG_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv4_udsbl += DWC_ETH_QOS_reg_read(MMC_RXIPV4_UBSBL_PKTS_RgOffAddr);
+
+	/* IPV6 */
+	mmc->mmc_rx_ipv6_gd += DWC_ETH_QOS_reg_read(MMC_RXIPV6_GD_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv6_hderr += DWC_ETH_QOS_reg_read(MMC_RXIPV6_HDRERR_PKTS_RgOffAddr);
+	mmc->mmc_rx_ipv6_nopay += DWC_ETH_QOS_reg_read(MMC_RXIPV6_NOPAY_PKTS_RgOffAddr);
+
+	/* Protocols */
+	mmc->mmc_rx_udp_gd += DWC_ETH_QOS_reg_read(MMC_RXUDP_GD_PKTS_RgOffAddr);
+	mmc->mmc_rx_udp_err += DWC_ETH_QOS_reg_read(MMC_RXUDP_ERR_PKTS_RgOffAddr);
+	mmc->mmc_rx_tcp_gd += DWC_ETH_QOS_reg_read(MMC_RXTCP_GD_PKTS_RgOffAddr);
+	mmc->mmc_rx_tcp_err += DWC_ETH_QOS_reg_read(MMC_RXTCP_ERR_PKTS_RgOffAddr);
+	mmc->mmc_rx_icmp_gd += DWC_ETH_QOS_reg_read(MMC_RXICMP_GD_PKTS_RgOffAddr);
+	mmc->mmc_rx_icmp_err += DWC_ETH_QOS_reg_read(MMC_RXICMP_ERR_PKTS_RgOffAddr);
+
+	/* IPv4 */
+	mmc->mmc_rx_ipv4_gd_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV4_GD_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv4_hderr_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV4_HDRERR_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv4_nopay_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV4_NOPAY_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv4_frag_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV4_FRAG_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv4_udsbl_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV4_UDSBL_OCTETS_RgOffAddr);
+
+	/* IPV6 */
+	mmc->mmc_rx_ipv6_gd_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV6_GD_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv6_hderr_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV6_HDRERR_OCTETS_RgOffAddr);
+	mmc->mmc_rx_ipv6_nopay_octets += DWC_ETH_QOS_reg_read(MMC_RXIPV6_NOPAY_OCTETS_RgOffAddr);
+
+	/* Protocols */
+	mmc->mmc_rx_udp_gd_octets += DWC_ETH_QOS_reg_read(MMC_RXUDP_GD_OCTETS_RgOffAddr);
+	mmc->mmc_rx_udp_err_octets += DWC_ETH_QOS_reg_read(MMC_RXUDP_ERR_OCTETS_RgOffAddr);
+	mmc->mmc_rx_tcp_gd_octets += DWC_ETH_QOS_reg_read(MMC_RXTCP_GD_OCTETS_RgOffAddr);
+	mmc->mmc_rx_tcp_err_octets += DWC_ETH_QOS_reg_read(MMC_RXTCP_ERR_OCTETS_RgOffAddr);
+	mmc->mmc_rx_icmp_gd_octets += DWC_ETH_QOS_reg_read(MMC_RXICMP_GD_OCTETS_RgOffAddr);
+	mmc->mmc_rx_icmp_err_octets += DWC_ETH_QOS_reg_read(MMC_RXICMP_ERR_OCTETS_RgOffAddr);
+
+	DBGPR("<--DWC_ETH_QOS_mmc_read\n");
+}
+
+
+phy_interface_t DWC_ETH_QOS_get_phy_interface(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	phy_interface_t ret = PHY_INTERFACE_MODE_MII;
+
+	DBGPR("-->DWC_ETH_QOS_get_phy_interface\n");
+
+	if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_GMII_MII) {
+		if (pdata->hw_feat.gmii_sel)
+			ret = PHY_INTERFACE_MODE_GMII;
+		else if (pdata->hw_feat.mii_sel)
+			ret = PHY_INTERFACE_MODE_MII;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_RGMII) {
+		ret = PHY_INTERFACE_MODE_RGMII;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_SGMII) {
+		ret = PHY_INTERFACE_MODE_SGMII;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_TBI) {
+		ret = PHY_INTERFACE_MODE_TBI;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_RMII) {
+		ret = PHY_INTERFACE_MODE_RMII;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_RTBI) {
+		ret = PHY_INTERFACE_MODE_RTBI;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_SMII) {
+		ret = PHY_INTERFACE_MODE_SMII;
+	} else if (pdata->hw_feat.act_phy_sel == DWC_ETH_QOS_RevMII) {
+		//what to return ?
+	} else {
+		printk(KERN_ALERT "Missing interface support between"\
+		    "PHY and MAC\n\n");
+		ret = PHY_INTERFACE_MODE_NA;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_get_phy_interface\n");
+
+	return ret;
+}
+
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.h
new file mode 100755
index 0000000..e3a3f12
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.h
@@ -0,0 +1,138 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS_DRV_H__
+
+#define __DWC_ETH_QOS_DRV_H__
+
+static int DWC_ETH_QOS_open(struct net_device *);
+
+static int DWC_ETH_QOS_close(struct net_device *);
+
+static void DWC_ETH_QOS_set_rx_mode(struct net_device *);
+
+static int DWC_ETH_QOS_start_xmit(struct sk_buff *, struct net_device *);
+
+static void DWC_ETH_QOS_tx_interrupt(struct net_device *,
+				     struct DWC_ETH_QOS_prv_data *,
+				     UINT qInx);
+
+static struct net_device_stats *DWC_ETH_QOS_get_stats(struct net_device *);
+
+#ifdef CONFIG_NET_POLL_CONTROLLER
+static void DWC_ETH_QOS_poll_controller(struct net_device *);
+#endif				/*end of CONFIG_NET_POLL_CONTROLLER */
+
+static int DWC_ETH_QOS_set_features(struct net_device *dev, netdev_features_t features);
+
+static netdev_features_t DWC_ETH_QOS_fix_features(struct net_device *dev, netdev_features_t features);
+
+INT DWC_ETH_QOS_configure_remotewakeup(struct net_device *,
+				       struct ifr_data_struct *);
+
+static void DWC_ETH_QOS_program_dcb_algorithm(struct DWC_ETH_QOS_prv_data *pdata,
+		struct ifr_data_struct *req);
+
+static void DWC_ETH_QOS_program_avb_algorithm(struct DWC_ETH_QOS_prv_data *pdata,
+		struct ifr_data_struct *req);
+
+static void DWC_ETH_QOS_config_tx_pbl(struct DWC_ETH_QOS_prv_data *pdata,
+				      UINT tx_pbl, UINT ch_no);
+static void DWC_ETH_QOS_config_rx_pbl(struct DWC_ETH_QOS_prv_data *pdata,
+				      UINT rx_pbl, UINT ch_no);
+
+static int DWC_ETH_QOS_handle_prv_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req);
+
+static int DWC_ETH_QOS_ioctl(struct net_device *, struct ifreq *, int);
+
+irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int, void *);
+
+static INT DWC_ETH_QOS_change_mtu(struct net_device *dev, INT new_mtu);
+
+static int DWC_ETH_QOS_clean_split_hdr_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
+					  int quota, UINT qInx);
+
+static int DWC_ETH_QOS_clean_jumbo_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
+					  int quota, UINT qInx);
+
+static int DWC_ETH_QOS_clean_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
+				    int quota, UINT qInx);
+
+static void DWC_ETH_QOS_consume_page(struct DWC_ETH_QOS_rx_buffer *buffer,
+				     struct sk_buff *skb,
+				     u16 length, u16 buf2_len);
+
+static void DWC_ETH_QOS_receive_skb(struct DWC_ETH_QOS_prv_data *pdata,
+				    struct net_device *dev,
+				    struct sk_buff *skb,
+				    UINT qInx);
+
+static void DWC_ETH_QOS_configure_rx_fun_ptr(struct DWC_ETH_QOS_prv_data
+					     *pdata);
+
+
+static int DWC_ETH_QOS_alloc_split_hdr_rx_buf(struct DWC_ETH_QOS_prv_data *pdata,
+					  struct DWC_ETH_QOS_rx_buffer *buffer,
+					  gfp_t gfp);
+
+static int DWC_ETH_QOS_alloc_jumbo_rx_buf(struct DWC_ETH_QOS_prv_data *pdata,
+					  struct DWC_ETH_QOS_rx_buffer *buffer,
+					  gfp_t gfp);
+
+static int DWC_ETH_QOS_alloc_rx_buf(struct DWC_ETH_QOS_prv_data *pdata,
+				    struct DWC_ETH_QOS_rx_buffer *buffer,
+				    gfp_t gfp);
+
+static void DWC_ETH_QOS_default_common_confs(struct DWC_ETH_QOS_prv_data
+					     *pdata);
+static void DWC_ETH_QOS_default_tx_confs(struct DWC_ETH_QOS_prv_data *pdata);
+static void DWC_ETH_QOS_default_tx_confs_single_q(struct DWC_ETH_QOS_prv_data
+						  *pdata, UINT qInx);
+static void DWC_ETH_QOS_default_rx_confs(struct DWC_ETH_QOS_prv_data *pdata);
+static void DWC_ETH_QOS_default_rx_confs_single_q(struct DWC_ETH_QOS_prv_data
+						  *pdata, UINT qInx);
+
+int DWC_ETH_QOS_poll(struct DWC_ETH_QOS_prv_data *pdata, int budget, int qInx);
+
+static void DWC_ETH_QOS_mmc_setup(struct DWC_ETH_QOS_prv_data *pdata);
+inline unsigned int DWC_ETH_QOS_reg_read(volatile ULONG *ptr);
+
+#ifdef DWC_ETH_QOS_QUEUE_SELECT_ALGO
+u16	DWC_ETH_QOS_select_queue(struct net_device *dev, struct sk_buff *skb);
+#endif
+
+static int DWC_ETH_QOS_vlan_rx_add_vid(struct net_device *dev,
+                     __always_unused __be16 proto, u16 vid);
+static int DWC_ETH_QOS_vlan_rx_kill_vid(struct net_device *dev,
+                     __always_unused __be16 proto, u16 vid);
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_eee.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_eee.c
new file mode 100755
index 0000000..613f4a9
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_eee.c
@@ -0,0 +1,461 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_eee.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+
+/* Clause 22 registers to access clause 45 register set */
+#define MMD_CTRL_REG		0x0D	/* MMD Access Control Register */
+#define MMD_ADDR_DATA_REG	0x0E	/* MMD Access Address Data Register */
+
+/* MMD Access Control register fields */
+#define MMD_CTRL_FUNC_ADDR		0x0000	/* address */
+#define MMD_CTRL_FUNC_DATA_NOINCR	0x4000	/* data, no post increment */
+#define MMD_CTRL_FUNC_DATA_INCR_ON_RDWT	0x8000	/* data, post increment on
+						   reads & writes */
+#define MMD_CTRL_FUNC_DATA_INCR_ON_WT	0xC000	/* data, post increment on
+						   writes only */
+/* Clause 45 expansion register */
+#define CL45_PCS_EEE_ABLE 0x14	/* EEE Capability register */
+#define CL45_ADV_EEE_REG 0x3C   /* EEE advertisement */
+#define CL45_AN_EEE_LPABLE_REG	0x3D	/* EEE Link Partner ability reg */
+#define CL45_CLK_STOP_EN_REG 0x0 /* Clock Stop enable reg */
+
+/* Clause 45 expansion registers fields */
+#define CL45_LP_ADV_EEE_STATS_1000BASE_T 0x0004	/* LP EEE capabilities
+						   status */
+#define CL45_CLK_STOP_EN	0x400 /* Enable xMII Clock Stop */
+
+
+void DWC_ETH_QOS_enable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data = NULL;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int tx_idle = 0, qInx;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_enable_eee_mode\n");
+
+	for (qInx = 0; qInx < pdata->tx_queue_cnt; qInx++) {
+		tx_desc_data = GET_TX_WRAPPER_DESC(qInx);
+
+		if ((tx_desc_data->dirty_tx == tx_desc_data->cur_tx) &&
+			(pdata->tx_path_in_lpi_mode == false)) {
+			tx_idle = 1;
+		} else {
+			tx_idle = 0;
+			break;
+		}
+	}
+
+	if (tx_idle)
+		hw_if->set_eee_mode();
+
+	DBGPR_EEE("<--DWC_ETH_QOS_enable_eee_mode\n");
+}
+
+void DWC_ETH_QOS_disable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+
+	DBGPR_EEE("-->DWC_ETH_QOS_disable_eee_mode\n");
+
+	hw_if->reset_eee_mode();
+	del_timer_sync(&pdata->eee_ctrl_timer);
+	pdata->tx_path_in_lpi_mode = false;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_disable_eee_mode\n");
+}
+
+
+/*!
+* \brief API to control EEE mode.
+*
+* \details This function will move the MAC transmitter in LPI mode
+* if there is no data transfer and MAC is not already in LPI state.
+*
+* \param[in] data - data hook
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_eee_ctrl_timer(unsigned long data)
+{
+	struct DWC_ETH_QOS_prv_data *pdata =
+		(struct DWC_ETH_QOS_prv_data *)data;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_eee_ctrl_timer\n");
+
+	DWC_ETH_QOS_enable_eee_mode(pdata);
+
+	DBGPR_EEE("<--DWC_ETH_QOS_eee_ctrl_timer\n");
+}
+
+
+static void DWC_ETH_QOS_mmd_phy_indirect(struct mii_bus *bus,
+					 int regAddr,
+					 int devAddr,
+					 int phyAddr)
+{
+	/* Write the desired MMD devAddr */
+	bus->write(bus, phyAddr, MMD_CTRL_REG, devAddr);
+
+	/* Write the desired MMD regAddr */
+	bus->write(bus, phyAddr, MMD_ADDR_DATA_REG, regAddr);
+
+	/* Select the Function : DATA with no post increment */
+	bus->write(bus, phyAddr, MMD_CTRL_REG,
+		(devAddr | MMD_CTRL_FUNC_DATA_NOINCR));
+}
+
+
+/*!
+* \brief API to read data from the MMD registers.
+*
+* \details This function will read data from the MMD(clause 45) registers
+* using clause 22 registers. The procedure to read MMD registers is,
+* 1. Write the desired MMD device addr into reg 13
+* 2. Write the desired MMD reg addr into reg 14
+* 3. Select the desired Function - MMD data command by writing in reg 13
+* 4. Read the content of the MMD's selected reg through reg 14
+*
+* \param[in] bus - the target MII bus
+* \param[in] regAddr - desired MMD reg addr to be read
+* \param[in] devAddr - desired MMD address
+* \param[in] phyAddr - PHY addr/id on the MII bus
+*
+* \return integer
+*/
+static int DWC_ETH_QOS_phy_read_mmd_indirect(struct mii_bus *bus,
+					     int regAddr,
+					     int devAddr,
+					     int phyAddr)
+{
+	u32 ret;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_phy_read_mmd_indirect\n");
+
+	DWC_ETH_QOS_mmd_phy_indirect(bus, regAddr, devAddr, phyAddr);
+	/* read the content of the MMD's selected register */
+	ret = bus->read(bus, phyAddr, MMD_ADDR_DATA_REG);
+
+	DBGPR_EEE("<--DWC_ETH_QOS_phy_read_mmd_indirect\n");
+
+	return ret;
+}
+
+
+/*!
+* \brief API to write data into the MMD registers.
+*
+* \details This function will write data into MMD(clause 45) registers
+* using clause 22 registers. The procedure to write MMD registers is,
+* 1. Write the desired MMD device addr into reg 13
+* 2. Write the desired MMD reg addr into reg 14
+* 3. Select the desired Function - MMD data command by writing in reg 13
+* 4. Write the data into MMD's selected reg through reg 14
+*
+* \param[in] bus - the target MII bus
+* \param[in] regAddr - desired MMD reg addr to be written
+* \param[in] devAddr - desired MMD address
+* \param[in] phyAddr - PHY addr/id on the MII bus
+* \param[in] data - data to write into the MMD register
+*
+* \return void
+*/
+static void DWC_ETH_QOS_phy_write_mmd_indirect(struct mii_bus *bus,
+					     int regAddr,
+					     int devAddr,
+					     int phyAddr,
+					     u32 data)
+{
+	DBGPR_EEE("-->DWC_ETH_QOS_phy_write_mmd_indirect\n");
+
+	DWC_ETH_QOS_mmd_phy_indirect(bus, regAddr, devAddr, phyAddr);
+	/* Write the data into MMD's selected register */
+	bus->write(bus, phyAddr, MMD_ADDR_DATA_REG, data);
+
+	DBGPR_EEE("<--DWC_ETH_QOS_phy_write_mmd_indirect\n");
+}
+
+#if 0
+
+#define MDIO_EEE_100TX		0x0002	/* EEE is supported for 100BASE-TX */
+#define MDIO_EEE_1000T		0x0004	/* EEE is supported for 1000BASE-T */
+#define MDIO_EEE_10GT			0x0008	/* EEE is supported for 10GBASE-T */
+#define MDIO_EEE_1000KX		0x0010	/* EEE is supported for 1000BASE-KX */
+#define MDIO_EEE_10GKX4		0x0020	/* EEE is supported for 10GBASE-KX4 */
+#define MDIO_EEE_10GKR		0x0040	/* EEE is supported for 10GBASE KR */
+
+ /* A small helper function that translates MMD EEE Capability (3.20) bits
+ * to ethtool supported settings.
+ * */
+static u32 DWC_ETH_QOS_mmd_eee_cap_to_ethtool_sup_t(u16 eee_cap)
+{
+	u32 supported = 0;
+
+	if (eee_cap & MDIO_EEE_100TX)
+		supported |= SUPPORTED_100baseT_Full;
+	if (eee_cap & MDIO_EEE_1000T)
+		supported |= SUPPORTED_1000baseT_Full;
+	if (eee_cap & MDIO_EEE_10GT)
+		supported |= SUPPORTED_10000baseT_Full;
+	if (eee_cap & MDIO_EEE_1000KX)
+		supported |= SUPPORTED_1000baseKX_Full;
+	if (eee_cap & MDIO_EEE_10GKX4)
+		supported |= SUPPORTED_10000baseKX4_Full;
+	if (eee_cap & MDIO_EEE_10GKR)
+		supported |= SUPPORTED_10000baseKR_Full;
+
+	return supported;
+}
+
+ /* A small helper function that translates the MMD EEE Advertisment (7.60)
+  * and MMD EEE Link Partner Ability (7.61) bits to ethtool advertisement
+  * settings.
+  * */
+static inline u32 DWC_ETH_QOS_mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
+{
+	u32 adv = 0;
+
+	if (eee_adv & MDIO_EEE_100TX)
+		adv |= ADVERTISED_100baseT_Full;
+	if (eee_adv & MDIO_EEE_1000T)
+		adv |= ADVERTISED_1000baseT_Full;
+	if (eee_adv & MDIO_EEE_10GT)
+		adv |= ADVERTISED_10000baseT_Full;
+	if (eee_adv & MDIO_EEE_1000KX)
+		adv |= ADVERTISED_1000baseKX_Full;
+	if (eee_adv & MDIO_EEE_10GKX4)
+		adv |= ADVERTISED_10000baseKX4_Full;
+	if (eee_adv & MDIO_EEE_10GKR)
+		adv |= ADVERTISED_10000baseKR_Full;
+
+	return adv;
+}
+#endif
+
+/*!
+* \brief API to initialize and check EEE mode.
+*
+* \details This function checks if the EEE is supported by
+* looking at the MMD registes and it also programs the MMD
+* register 3.0 setting the "Clock stop enable" bit if required.
+*
+* \param[in] phydev - pointer to target phy_device structure
+* \param[in] clk_stop_enable - PHY may stop the clock during LPI
+*
+* \return integer
+*
+* \retval zero if EEE is supported else return -ve number.
+*/
+static int DWC_ETH_QOS_phy_init_eee(struct phy_device *phydev,
+		bool clk_stop_enable)
+{
+	int ret = -EPROTONOSUPPORT;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_phy_init_eee\n");
+
+	/* According to 802.3az,the EEE is supported only in full duplex-mode.
+	 * Also EEE feature is active when core is operating with MII, GMII,
+	 * SGMII or RGMII.
+	 */
+	if ((phydev->duplex == DUPLEX_FULL) &&
+	    ((phydev->interface == PHY_INTERFACE_MODE_MII) ||
+	    (phydev->interface == PHY_INTERFACE_MODE_GMII) ||
+	    (phydev->interface == PHY_INTERFACE_MODE_SGMII) ||
+	    (phydev->interface == PHY_INTERFACE_MODE_RGMII))) {
+		int eee_lp, eee_cap, eee_adv;
+		//u32 cap,lp , adv;
+		int status;//, idx;
+
+		/* Read phy status to properly get the right settings */
+		status = phy_read_status(phydev);
+		if (status)
+			return status;
+
+		/* First check if the EEE ability is supported */
+		eee_cap = DWC_ETH_QOS_phy_read_mmd_indirect(phydev->bus,
+				CL45_PCS_EEE_ABLE, MDIO_MMD_PCS, phydev->addr);
+		if (eee_cap < 0)
+			return eee_cap;
+/*
+		cap = DWC_ETH_QOS_mmd_eee_cap_to_ethtool_sup_t(eee_cap);
+		if (!cap)
+			goto eee_exit;
+*/
+		/* check whether link Partner support EEE or not */
+		eee_lp = DWC_ETH_QOS_phy_read_mmd_indirect(phydev->bus,
+				CL45_AN_EEE_LPABLE_REG, MDIO_MMD_AN, phydev->addr);
+		if (eee_lp < 0)
+			return eee_lp;
+
+		eee_adv = DWC_ETH_QOS_phy_read_mmd_indirect(phydev->bus,
+				CL45_ADV_EEE_REG, MDIO_MMD_AN, phydev->addr);
+		if (eee_adv < 0)
+			return eee_adv;
+/*
+		//TODO:check this
+		adv = DWC_ETH_QOS_mmd_eee_adv_to_ethtool_adv_t(eee_adv);
+		lp = DWC_ETH_QOS_mmd_eee_adv_to_ethtool_adv_t(eee_lp);
+		idx = phy_find_setting(phydev->speed, phydev->duplex);
+		if ((lp & adv & settings[idx].setting))
+			goto eee_exit;
+*/
+		if (clk_stop_enable) {
+			/* Configure the PHY to stop receiving xMII
+			 * clock while it is signaling LPI.
+			 */
+			int val = DWC_ETH_QOS_phy_read_mmd_indirect(phydev->bus,
+					CL45_CLK_STOP_EN_REG, MDIO_MMD_PCS,
+					phydev->addr);
+			if (val < 0)
+				return val;
+
+			val |= CL45_CLK_STOP_EN;
+			DWC_ETH_QOS_phy_write_mmd_indirect(phydev->bus,
+					CL45_CLK_STOP_EN_REG, MDIO_MMD_PCS,
+					phydev->addr, val);
+		}
+
+		ret = 0; /* EEE supported */
+	}
+
+	DBGPR_EEE("<--DWC_ETH_QOS_phy_init_eee\n");
+
+//eee_exit:
+	return ret;
+}
+
+
+/*!
+* \brief API to initialize EEE mode.
+*
+* \details This function enables the LPI state and start the timer
+* to verify whether the tx path can enter in LPI state if
+* a. GMAC supports EEE mode &
+* b. phy can also manage EEE.
+*
+* \param[in] pdata - pointer to private data structure
+*
+* \return bool
+*
+* \retval true on success & false on failure.
+*/
+bool DWC_ETH_QOS_eee_init(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	bool ret = false;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_eee_init\n");
+
+	/* HW supports the EEE feature */
+	if (pdata->hw_feat.eee_sel) {
+#ifndef DWC_ETH_QOS_CUSTOMIZED_EEE_TEST
+		/* check if the PHY supports EEE */
+		if (DWC_ETH_QOS_phy_init_eee(pdata->phydev, 1))
+			goto phy_eee_failed;
+#endif /* DWC_ETH_QOS_CUSTOMIZED_EEE_TEST */
+
+		if (!pdata->eee_active) {
+			pdata->eee_active = 1;
+			init_timer(&pdata->eee_ctrl_timer);
+			pdata->eee_ctrl_timer.function = DWC_ETH_QOS_eee_ctrl_timer;
+			pdata->eee_ctrl_timer.data = (unsigned long)pdata;
+			pdata->eee_ctrl_timer.expires =
+				DWC_ETH_QOS_LPI_TIMER(DWC_ETH_QOS_DEFAULT_LPI_TIMER);
+			add_timer(&pdata->eee_ctrl_timer);
+
+			hw_if->set_eee_timer(DWC_ETH_QOS_DEFAULT_LPI_LS_TIMER,
+				DWC_ETH_QOS_DEFAULT_LPI_TWT_TIMER);
+			if (pdata->use_lpi_tx_automate)
+				hw_if->set_lpi_tx_automate();
+		} else {
+			/* When EEE has been already initialized we have to modify
+			 * the PLS bit in MAC_LPI_Control_Status reg according to
+			 * PHY link status.
+			 * */
+			hw_if->set_eee_pls(pdata->phydev->link);
+		}
+
+		DBGPR_EEE("EEE initialized\n");
+
+		ret = true;
+	}
+
+	DBGPR_EEE("<--DWC_ETH_QOS_eee_init\n");
+
+#ifndef DWC_ETH_QOS_CUSTOMIZED_EEE_TEST
+ phy_eee_failed:
+#endif
+
+	return ret;
+}
+
+#define MAC_LPS_TLPIEN 0x00000001
+#define MAC_LPS_TLPIEX 0x00000002
+#define MAC_LPS_RLPIEN 0x00000004
+#define MAC_LPS_RLPIEX 0x00000008
+void DWC_ETH_QOS_handle_eee_interrupt(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	u32 lpi_status;
+
+	DBGPR_EEE("-->DWC_ETH_QOS_handle_eee_interrupt\n");
+
+	lpi_status = hw_if->get_lpi_status();
+	DBGPR_EEE("MAC_LPI_Control_Status = %#x\n", lpi_status);
+
+	if (lpi_status & MAC_LPS_TLPIEN) {
+		pdata->tx_path_in_lpi_mode = 1;
+		pdata->xstats.tx_path_in_lpi_mode_irq_n++;
+		DBGPR_EEE("MAC Transmitter has entered the LPI state\n");
+	}	
+
+	if (lpi_status & MAC_LPS_TLPIEX) {
+		pdata->tx_path_in_lpi_mode = 0;
+		pdata->xstats.tx_path_exit_lpi_mode_irq_n++;
+		DBGPR_EEE("MAC Transmitter has exited the LPI state\n");
+	}
+
+	if (lpi_status & MAC_LPS_RLPIEN) {
+		pdata->xstats.rx_path_in_lpi_mode_irq_n++;
+		DBGPR_EEE("MAC Receiver has entered the LPI state\n");
+	}
+
+	if (lpi_status & MAC_LPS_RLPIEX) {
+		pdata->xstats.rx_path_exit_lpi_mode_irq_n++;
+		DBGPR_EEE("MAC Receiver has exited the LPI state\n");
+	}
+
+	DBGPR_EEE("<--DWC_ETH_QOS_handle_eee_interrupt\n");
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.c
new file mode 100755
index 0000000..6c0be75
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.c
@@ -0,0 +1,953 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_ethtool.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+#include "DWC_ETH_QOS_ethtool.h"
+
+struct DWC_ETH_QOS_stats {
+	char stat_string[ETH_GSTRING_LEN];
+	int sizeof_stat;
+	int stat_offset;
+};
+
+/* HW extra status */
+#define DWC_ETH_QOS_EXTRA_STAT(m) \
+	{#m, FIELD_SIZEOF(struct DWC_ETH_QOS_extra_stats, m), \
+	offsetof(struct DWC_ETH_QOS_prv_data, xstats.m)}
+
+static const struct DWC_ETH_QOS_stats DWC_ETH_QOS_gstrings_stats[] = {
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[0]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[1]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[2]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[3]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[4]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[5]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[6]),
+	DWC_ETH_QOS_EXTRA_STAT(q_re_alloc_rx_buf_failed[7]),
+
+	/* Tx/Rx IRQ error info */
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_process_stopped_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_process_stopped_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_buf_unavailable_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_buf_unavailable_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_watchdog_irq_n),
+	DWC_ETH_QOS_EXTRA_STAT(fatal_bus_error_irq_n),
+	DWC_ETH_QOS_EXTRA_STAT(pmt_irq_n),
+	/* Tx/Rx IRQ Events */
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_normal_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(rx_normal_irq_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(napi_poll_n),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(tx_clean_n[7]),
+	/* EEE */
+	DWC_ETH_QOS_EXTRA_STAT(tx_path_in_lpi_mode_irq_n),
+	DWC_ETH_QOS_EXTRA_STAT(tx_path_exit_lpi_mode_irq_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_path_in_lpi_mode_irq_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_path_exit_lpi_mode_irq_n),
+	/* Tx/Rx frames */
+	DWC_ETH_QOS_EXTRA_STAT(tx_pkt_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_pkt_n),
+	DWC_ETH_QOS_EXTRA_STAT(tx_vlan_pkt_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_vlan_pkt_n),
+	DWC_ETH_QOS_EXTRA_STAT(tx_timestamp_captured_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_timestamp_captured_n),
+	DWC_ETH_QOS_EXTRA_STAT(tx_tso_pkt_n),
+	DWC_ETH_QOS_EXTRA_STAT(rx_split_hdr_pkt_n),
+
+	/* Tx/Rx frames per channels/queues */
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(q_tx_pkt_n[7]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[0]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[1]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[2]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[3]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[4]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[5]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[6]),
+	DWC_ETH_QOS_EXTRA_STAT(q_rx_pkt_n[7]),
+};
+#define DWC_ETH_QOS_EXTRA_STAT_LEN ARRAY_SIZE(DWC_ETH_QOS_gstrings_stats)
+
+/* HW MAC Management counters (if supported) */
+#define DWC_ETH_QOS_MMC_STAT(m)	\
+	{ #m, FIELD_SIZEOF(struct DWC_ETH_QOS_mmc_counters, m),	\
+	offsetof(struct DWC_ETH_QOS_prv_data, mmc.m)}
+
+static const struct DWC_ETH_QOS_stats DWC_ETH_QOS_mmc[] = {
+	/* MMC TX counters */
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_octetcount_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_framecount_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_broadcastframe_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_multicastframe_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_64_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_65_to_127_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_128_to_255_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_256_to_511_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_512_to_1023_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_1024_to_max_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_unicast_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_multicast_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_broadcast_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_underflow_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_singlecol_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_multicol_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_deferred),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_latecol),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_exesscol),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_carrier_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_octetcount_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_framecount_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_excessdef),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_pause_frame),
+	DWC_ETH_QOS_MMC_STAT(mmc_tx_vlan_frame_g),
+
+	/* MMC RX counters */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_framecount_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_octetcount_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_octetcount_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_broadcastframe_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_multicastframe_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_crc_errror),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_align_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_run_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_jabber_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_undersize_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_oversize_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_64_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_65_to_127_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_128_to_255_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_256_to_511_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_512_to_1023_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_1024_to_max_octets_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_unicast_g),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_length_error),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_outofrangetype),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_pause_frames),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_fifo_overflow),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_vlan_frames_gb),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_watchdog_error),
+
+	/* IPC */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipc_intr_mask),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipc_intr),
+
+	/* IPv4 */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_gd),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_hderr),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_nopay),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_frag),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_udsbl),
+
+	/* IPV6 */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_gd_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_hderr_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_nopay_octets),
+
+	/* Protocols */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_udp_gd),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_udp_err),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_tcp_gd),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_tcp_err),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_icmp_gd),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_icmp_err),
+
+	/* IPv4 */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_gd_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_hderr_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_nopay_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_frag_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv4_udsbl_octets),
+
+	/* IPV6 */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_gd),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_hderr),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_ipv6_nopay),
+
+	/* Protocols */
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_udp_gd_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_udp_err_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_tcp_gd_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_tcp_err_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_icmp_gd_octets),
+	DWC_ETH_QOS_MMC_STAT(mmc_rx_icmp_err_octets),
+};
+#define DWC_ETH_QOS_MMC_STATS_LEN ARRAY_SIZE(DWC_ETH_QOS_mmc)
+
+static const struct ethtool_ops DWC_ETH_QOS_ethtool_ops = {
+	.get_link = ethtool_op_get_link,
+	.get_pauseparam = DWC_ETH_QOS_get_pauseparam,
+	.set_pauseparam = DWC_ETH_QOS_set_pauseparam,
+	.get_settings = DWC_ETH_QOS_getsettings,
+	.set_settings = DWC_ETH_QOS_setsettings,
+	.get_wol = DWC_ETH_QOS_get_wol,
+	.set_wol = DWC_ETH_QOS_set_wol,
+	.get_coalesce = DWC_ETH_QOS_get_coalesce,
+	.set_coalesce = DWC_ETH_QOS_set_coalesce,
+	.get_ethtool_stats = DWC_ETH_QOS_get_ethtool_stats,
+	.get_strings = DWC_ETH_QOS_get_strings,
+	.get_sset_count = DWC_ETH_QOS_get_sset_count,
+};
+
+struct ethtool_ops *DWC_ETH_QOS_get_ethtool_ops(void)
+{
+	return (struct ethtool_ops *)&DWC_ETH_QOS_ethtool_ops;
+}
+
+
+/*!
+ * \details This function is invoked by kernel when user request to get the
+ * pause parameters through standard ethtool command.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] Pause – pointer to ethtool_pauseparam structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_get_pauseparam(struct net_device *dev,
+				       struct ethtool_pauseparam *pause)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct phy_device *phydev = pdata->phydev;
+	unsigned int data;
+
+	DBGPR("-->DWC_ETH_QOS_get_pauseparam\n");
+
+	pause->rx_pause = 0;
+	pause->tx_pause = 0;
+
+	if (pdata->hw_feat.pcs_sel) {
+		pause->autoneg = 1;
+		data = hw_if->get_an_adv_pause_param();
+		if (!(data == 1) || !(data == 2))
+			return;
+	} else {
+		pause->autoneg = pdata->phydev->autoneg;
+
+		/* return if PHY doesn't support FLOW ctrl */
+		if (!(phydev->supported & SUPPORTED_Pause) ||
+		    !(phydev->supported & SUPPORTED_Asym_Pause))
+			return;
+	}
+
+	if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_RX) ==
+	    DWC_ETH_QOS_FLOW_CTRL_RX)
+		pause->rx_pause = 1;
+
+	if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_TX) ==
+	    DWC_ETH_QOS_FLOW_CTRL_TX)
+		pause->tx_pause = 1;
+
+	DBGPR("<--DWC_ETH_QOS_get_pauseparam\n");
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to set the
+ * pause parameters through standard ethtool command.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] pause – pointer to ethtool_pauseparam structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_set_pauseparam(struct net_device *dev,
+				      struct ethtool_pauseparam *pause)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct phy_device *phydev = pdata->phydev;
+	int new_pause = DWC_ETH_QOS_FLOW_CTRL_OFF;
+	unsigned int data;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_set_pauseparam: "\
+	      "autoneg = %d tx_pause = %d rx_pause = %d\n",
+	      pause->autoneg, pause->tx_pause, pause->rx_pause);
+
+	/* return if PHY doesn't support FLOW ctrl */
+	if (pdata->hw_feat.pcs_sel) {
+		data = hw_if->get_an_adv_pause_param();
+		if (!(data == 1) || !(data == 2))
+			return -EINVAL;
+	} else {
+		if (!(phydev->supported & SUPPORTED_Pause) ||
+			!(phydev->supported & SUPPORTED_Asym_Pause))
+			return -EINVAL;
+	}
+
+	if (pause->rx_pause)
+		new_pause |= DWC_ETH_QOS_FLOW_CTRL_RX;
+	if (pause->tx_pause)
+		new_pause |= DWC_ETH_QOS_FLOW_CTRL_TX;
+
+	if (new_pause == pdata->flow_ctrl && !pause->autoneg)
+		return -EINVAL;
+
+	pdata->flow_ctrl = new_pause;
+
+	if (pdata->hw_feat.pcs_sel) {
+		DWC_ETH_QOS_configure_flow_ctrl(pdata);
+	} else {
+		phydev->autoneg = pause->autoneg;
+		if (phydev->autoneg) {
+			if (netif_running(dev))
+				ret = phy_start_aneg(phydev);
+		} else {
+			DWC_ETH_QOS_configure_flow_ctrl(pdata);
+		}
+	}
+
+	DBGPR("<--DWC_ETH_QOS_set_pauseparam\n");
+
+	return ret;
+}
+
+void DWC_ETH_QOS_configure_flow_ctrl(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	UINT qInx;
+
+	DBGPR("-->DWC_ETH_QOS_configure_flow_ctrl\n");
+
+	if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_RX) ==
+	    DWC_ETH_QOS_FLOW_CTRL_RX) {
+		hw_if->enable_rx_flow_ctrl();
+	} else {
+		hw_if->disable_rx_flow_ctrl();
+	}
+
+	/* As ethtool does not provide queue level configuration
+	   Tx flow control is disabled/enabled for all transmit queues */
+	if ((pdata->flow_ctrl & DWC_ETH_QOS_FLOW_CTRL_TX) ==
+	    DWC_ETH_QOS_FLOW_CTRL_TX) {
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++)
+			hw_if->enable_tx_flow_ctrl(qInx);
+	} else {
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++)
+			hw_if->disable_tx_flow_ctrl(qInx);
+	}
+
+	pdata->oldflow_ctrl = pdata->flow_ctrl;
+
+	DBGPR("<--DWC_ETH_QOS_configure_flow_ctrl\n");
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to get the
+ * various device settings through standard ethtool command. This function
+ * support to get the PHY related settings like link status, interface type,
+ * auto-negotiation parameters and pause parameters etc.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] cmd – pointer to ethtool_cmd structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+#define SPEED_UNKNOWN -1
+#define DUPLEX_UNKNOWN 0xff
+static int DWC_ETH_QOS_getsettings(struct net_device *dev,
+				   struct ethtool_cmd *cmd)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned int pause, duplex;
+	unsigned int lp_pause, lp_duplex;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_getsettings\n");
+
+	if (pdata->hw_feat.pcs_sel) {
+		if (!pdata->pcs_link) {
+			ethtool_cmd_speed_set(cmd, SPEED_UNKNOWN);
+			cmd->duplex = DUPLEX_UNKNOWN;
+			return 0;
+		}
+		ethtool_cmd_speed_set(cmd, pdata->pcs_speed);
+		cmd->duplex = pdata->pcs_duplex;
+
+		pause = hw_if->get_an_adv_pause_param();
+		duplex = hw_if->get_an_adv_duplex_param();
+		lp_pause = hw_if->get_lp_an_adv_pause_param();
+		lp_duplex = hw_if->get_lp_an_adv_duplex_param();
+
+		if (pause == 1)
+			cmd->advertising |= ADVERTISED_Pause;
+		if (pause == 2)
+			cmd->advertising |= ADVERTISED_Asym_Pause;
+		/* MAC always supports Auto-negotiation */
+		cmd->autoneg = ADVERTISED_Autoneg;
+		cmd->supported |= SUPPORTED_Autoneg;
+		cmd->advertising |= ADVERTISED_Autoneg;
+
+		if (duplex) {
+			cmd->supported |= (SUPPORTED_1000baseT_Full |
+				SUPPORTED_100baseT_Full |
+				SUPPORTED_10baseT_Full);
+			cmd->advertising |= (ADVERTISED_1000baseT_Full |
+				ADVERTISED_100baseT_Full |
+				ADVERTISED_10baseT_Full);
+		} else {
+			cmd->supported |= (SUPPORTED_1000baseT_Half |
+				SUPPORTED_100baseT_Half |
+				SUPPORTED_10baseT_Half);
+			cmd->advertising |= (ADVERTISED_1000baseT_Half |
+				ADVERTISED_100baseT_Half |
+				ADVERTISED_10baseT_Half);
+		}
+
+		/* link partner features */
+		cmd->lp_advertising |= ADVERTISED_Autoneg;
+		if (lp_pause == 1)
+			cmd->lp_advertising |= ADVERTISED_Pause;
+		if (lp_pause == 2)
+			cmd->lp_advertising |= ADVERTISED_Asym_Pause;
+
+		if (lp_duplex)
+			cmd->lp_advertising |= (ADVERTISED_1000baseT_Full |
+				ADVERTISED_100baseT_Full |
+				ADVERTISED_10baseT_Full);
+		else
+			cmd->lp_advertising |= (ADVERTISED_1000baseT_Half |
+				ADVERTISED_100baseT_Half |
+				ADVERTISED_10baseT_Half);
+
+		cmd->port = PORT_OTHER;
+	} else {
+		if (pdata->phydev == NULL) {
+			printk(KERN_ALERT "%s: PHY is not registered\n", dev->name);
+			return -ENODEV;
+		}
+
+		if (!netif_running(dev)) {
+			printk(KERN_ALERT "%s: interface is disabled: we cannot track "\
+			       "link speed / duplex settings\n", dev->name);
+			return -EBUSY;
+		}
+
+		cmd->transceiver = XCVR_EXTERNAL;
+
+		spin_lock_irq(&pdata->lock);
+		ret = phy_ethtool_gset(pdata->phydev, cmd);
+		spin_unlock_irq(&pdata->lock);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_getsettings\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to set the
+ * various device settings through standard ethtool command. This function
+ * support to set the PHY related settings like link status, interface type,
+ * auto-negotiation parameters and pause parameters etc.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] cmd – pointer to ethtool_cmd structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_setsettings(struct net_device *dev,
+				   struct ethtool_cmd *cmd)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned int speed;
+	//unsigned int pause, duplex, speed;
+	//unsigned int lp_pause, lp_duplex;
+	int ret = 0;
+
+	printk(KERN_ALERT "-->DWC_ETH_QOS_setsettings\n");
+
+	if (pdata->hw_feat.pcs_sel) {
+		speed = ethtool_cmd_speed(cmd);
+
+		/* verify the settings we care about */
+		if ((cmd->autoneg != AUTONEG_ENABLE) &&
+			(cmd->autoneg != AUTONEG_DISABLE))
+			return -EINVAL;
+/*
+		if ((cmd->autoneg == AUTONEG_ENABLE) &&
+			(cmd->advertising == 0))
+			return -EINVAL;
+		if ((cmd->autoneg == AUTONEG_DISABLE) &&
+			(speed != SPEED_1000 &&
+			 speed != SPEED_100 &&
+			 speed != SPEED_10) ||
+			(cmd->duplex != DUPLEX_FULL &&
+			 cmd->duplex != DUPLEX_HALF))
+			 return -EINVAL;
+*/
+		spin_lock_irq(&pdata->lock);
+		if (cmd->autoneg == AUTONEG_ENABLE)
+			hw_if->control_an(1, 1);
+		else
+			hw_if->control_an(0, 0);
+		spin_unlock_irq(&pdata->lock);
+	} else {
+		spin_lock_irq(&pdata->lock);
+		ret = phy_ethtool_sset(pdata->phydev, cmd);
+		spin_unlock_irq(&pdata->lock);
+	}
+
+	printk(KERN_ALERT "<--DWC_ETH_QOS_setsettings\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to get report
+ * whether wake-on-lan is enable or not.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] wol – pointer to ethtool_wolinfo structure.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_get_wol(struct net_device *dev,
+				struct ethtool_wolinfo *wol)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+
+	DBGPR("-->DWC_ETH_QOS_get_wol\n");
+
+	wol->supported = 0;
+	spin_lock_irq(&pdata->lock);
+	if (device_can_wakeup(&pdata->pdev->dev)) {
+		if (pdata->hw_feat.mgk_sel)
+			wol->supported |= WAKE_MAGIC;
+		if (pdata->hw_feat.rwk_sel)
+			wol->supported |= WAKE_UCAST;
+		wol->wolopts = pdata->wolopts;
+	}
+	spin_unlock_irq(&pdata->lock);
+
+	DBGPR("<--DWC_ETH_QOS_get_wol\n");
+
+	return;
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to set
+ * pmt parameters for remote wakeup or magic wakeup
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] wol – pointer to ethtool_wolinfo structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_set_wol(struct net_device *dev,
+			       struct ethtool_wolinfo *wol)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	u32 support = WAKE_MAGIC | WAKE_UCAST;
+	int ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_set_wol\n");
+
+	/* By default almost all GMAC devices support the WoL via
+	 * magic frame but we can disable it if the HW capability
+	 * register shows no support for pmt_magic_frame. */
+	if (!pdata->hw_feat.mgk_sel)
+		wol->wolopts &= ~WAKE_MAGIC;
+	if (!pdata->hw_feat.rwk_sel)
+		wol->wolopts &= ~WAKE_UCAST;
+
+	if (!device_can_wakeup(&pdata->pdev->dev))
+		return -EINVAL;
+
+	if (wol->wolopts & ~support)
+		return -EINVAL;
+
+	if (wol->wolopts) {
+		printk(KERN_ALERT "Wakeup enable\n");
+		device_set_wakeup_enable(&pdata->pdev->dev, 1);
+		enable_irq_wake(pdata->irq_number);
+	} else {
+		printk(KERN_ALERT "Wakeup disable\n");
+		device_set_wakeup_enable(&pdata->pdev->dev, 0);
+		disable_irq_wake(pdata->irq_number);
+	}
+
+	spin_lock_irq(&pdata->lock);
+	pdata->wolopts = wol->wolopts;
+	spin_unlock_irq(&pdata->lock);
+
+	DBGPR("<--DWC_ETH_QOS_set_wol\n");
+
+	return ret;
+}
+
+u32 DWC_ETH_QOS_usec2riwt(u32 usec, struct DWC_ETH_QOS_prv_data *pdata)
+{
+	u32 ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_usec2riwt\n");
+
+	/* Eg:
+	 * System clock is 62.5MHz, each clock cycle would then be 16ns
+	 * For value 0x1 in watchdog timer, device would wait for 256
+	 * clock cycles,
+	 * ie, (16ns x 256) => 4.096us (rounding off to 4us)
+	 * So formula with above values is,
+	 * ret = usec/4 */
+
+	ret = (usec * (DWC_ETH_QOS_SYSCLOCK/1000000))/256;
+
+	DBGPR("<--DWC_ETH_QOS_usec2riwt\n");
+
+	return ret;
+}
+
+static u32 DWC_ETH_QOS_riwt2usec(u32 riwt, struct DWC_ETH_QOS_prv_data *pdata)
+{
+	u32 ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_riwt2usec\n");
+
+	/* using formula from 'DWC_ETH_QOS_usec2riwt' */
+	ret = (riwt * 256)/(DWC_ETH_QOS_SYSCLOCK/1000000);
+
+	DBGPR("<--DWC_ETH_QOS_riwt2usec\n");
+
+	return ret;
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to get
+ * interrupt coalescing parameters. As coalescing parameters are same
+ * for all the channels, so this function will get coalescing
+ * details from channel zero and return.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] wol – pointer to ethtool_coalesce structure.
+ *
+ * \return int
+ *
+ * \retval 0
+ */
+
+static int DWC_ETH_QOS_get_coalesce(struct net_device *dev,
+				    struct ethtool_coalesce *ec)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(0);
+
+	DBGPR("-->DWC_ETH_QOS_get_coalesce\n");
+
+	memset(ec, 0, sizeof(struct ethtool_coalesce));
+
+	ec->rx_coalesce_usecs =
+	    DWC_ETH_QOS_riwt2usec(rx_desc_data->rx_riwt, pdata);
+	ec->rx_max_coalesced_frames = rx_desc_data->rx_coal_frames;
+
+	DBGPR("<--DWC_ETH_QOS_get_coalesce\n");
+
+	return 0;
+}
+
+/*!
+ * \details This function is invoked by kernel when user request to set
+ * interrupt coalescing parameters. This driver maintains same coalescing
+ * parameters for all the channels, hence same changes will be applied to
+ * all the channels.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] wol – pointer to ethtool_coalesce structure.
+ *
+ * \return int
+ *
+ * \retval zero on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_set_coalesce(struct net_device *dev,
+				    struct ethtool_coalesce *ec)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
+	    GET_RX_WRAPPER_DESC(0);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned int rx_riwt, rx_usec, local_use_riwt, qInx;
+
+	DBGPR("-->DWC_ETH_QOS_set_coalesce\n");
+
+	/* Check for not supported parameters  */
+	if ((ec->rx_coalesce_usecs_irq) ||
+	    (ec->rx_max_coalesced_frames_irq) || (ec->tx_coalesce_usecs_irq) ||
+	    (ec->use_adaptive_rx_coalesce) || (ec->use_adaptive_tx_coalesce) ||
+	    (ec->pkt_rate_low) || (ec->rx_coalesce_usecs_low) ||
+	    (ec->rx_max_coalesced_frames_low) || (ec->tx_coalesce_usecs_high) ||
+	    (ec->tx_max_coalesced_frames_low) || (ec->pkt_rate_high) ||
+	    (ec->tx_coalesce_usecs_low) || (ec->rx_coalesce_usecs_high) ||
+	    (ec->rx_max_coalesced_frames_high) ||
+	    (ec->tx_max_coalesced_frames_irq) ||
+	    (ec->stats_block_coalesce_usecs) ||
+	    (ec->tx_max_coalesced_frames_high) || (ec->rate_sample_interval) ||
+	    (ec->tx_coalesce_usecs) || (ec->tx_max_coalesced_frames))
+		return -EOPNOTSUPP;
+
+	/* both rx_coalesce_usecs and rx_max_coalesced_frames should
+	 * be > 0 in order for coalescing to be active.
+	 * */
+	if ((ec->rx_coalesce_usecs <= 3) || (ec->rx_max_coalesced_frames <= 1))
+		local_use_riwt = 0;
+	else
+		local_use_riwt = 1;
+
+	printk(KERN_ALERT "RX COALESCING is %s\n",
+	       (local_use_riwt ? "ENABLED" : "DISABLED"));
+
+	rx_riwt = DWC_ETH_QOS_usec2riwt(ec->rx_coalesce_usecs, pdata);
+
+	/* Check the bounds of values for RX */
+	if (rx_riwt > DWC_ETH_QOS_MAX_DMA_RIWT) {
+		rx_usec = DWC_ETH_QOS_riwt2usec(DWC_ETH_QOS_MAX_DMA_RIWT,
+		    pdata);
+		printk(KERN_ALERT "RX Coalesing is limited to %d usecs\n",
+		       rx_usec);
+		return -EINVAL;
+	}
+	if (ec->rx_max_coalesced_frames > RX_DESC_CNT) {
+		printk(KERN_ALERT "RX Coalesing is limited to %d frames\n",
+		       DWC_ETH_QOS_RX_MAX_FRAMES);
+		return -EINVAL;
+	}
+	if (rx_desc_data->rx_coal_frames != ec->rx_max_coalesced_frames
+	    && netif_running(dev)) {
+		printk(KERN_ALERT
+		 "Coalesce frame parameter can be changed only if interface is down\n");
+		return -EINVAL;
+	}
+	/* The selected parameters are applied to all the
+	 * receive queues equally, so all the queue configurations
+	 * are in sync */
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_desc_data = GET_RX_WRAPPER_DESC(qInx);
+		rx_desc_data->use_riwt = local_use_riwt;
+		rx_desc_data->rx_riwt = rx_riwt;
+		rx_desc_data->rx_coal_frames = ec->rx_max_coalesced_frames;
+		hw_if->config_rx_watchdog(qInx, rx_desc_data->rx_riwt);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_set_coalesce\n");
+
+	return 0;
+}
+
+
+/*!
+ * \details This function is invoked by kernel when user
+ * requests to get the extended statistics about the device.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] data – pointer in which extended statistics
+ *                   should be put.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_get_ethtool_stats(struct net_device *dev,
+	struct ethtool_stats *dummy, u64 *data)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	int i, j = 0;
+
+	DBGPR("-->DWC_ETH_QOS_get_ethtool_stats\n");
+
+	if (pdata->hw_feat.mmc_sel) {
+		DWC_ETH_QOS_mmc_read(&pdata->mmc);
+
+		for (i = 0; i < DWC_ETH_QOS_MMC_STATS_LEN; i++) {
+			char *p = (char *)pdata +
+					DWC_ETH_QOS_mmc[i].stat_offset;
+
+			data[j++] = (DWC_ETH_QOS_mmc[i].sizeof_stat ==
+				sizeof(u64)) ? (*(u64 *)p) : (*(u32 *)p);
+		}
+	}
+
+	for (i = 0; i < DWC_ETH_QOS_EXTRA_STAT_LEN; i++) {
+		char *p = (char *)pdata +
+				DWC_ETH_QOS_gstrings_stats[i].stat_offset;
+		data[j++] = (DWC_ETH_QOS_gstrings_stats[i].sizeof_stat ==
+				sizeof(u64)) ? (*(u64 *)p) : (*(u32 *)p);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_get_ethtool_stats\n");
+}
+
+
+/*!
+ * \details This function returns a set of strings that describe
+ * the requested objects.
+ *
+ * \param[in] dev – pointer to net device structure.
+ * \param[in] data – pointer in which requested string should be put.
+ *
+ * \return void
+ */
+
+static void DWC_ETH_QOS_get_strings(struct net_device *dev, u32 stringset, u8 *data)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	int i;
+	u8 *p = data;
+
+	DBGPR("-->DWC_ETH_QOS_get_strings\n");
+
+	switch(stringset) {
+	case ETH_SS_STATS:
+		if (pdata->hw_feat.mmc_sel) {
+			for (i = 0; i < DWC_ETH_QOS_MMC_STATS_LEN; i++) {
+				memcpy(p, DWC_ETH_QOS_mmc[i].stat_string,
+					ETH_GSTRING_LEN);
+				p += ETH_GSTRING_LEN;
+			}
+		}
+
+		for (i = 0; i < DWC_ETH_QOS_EXTRA_STAT_LEN; i++) {
+			memcpy(p, DWC_ETH_QOS_gstrings_stats[i].stat_string,
+				ETH_GSTRING_LEN);
+			p += ETH_GSTRING_LEN;
+		}
+		break;
+	default:
+		WARN_ON(1);
+	}
+
+	DBGPR("<--DWC_ETH_QOS_get_strings\n");
+}
+
+
+/*!
+ * \details This function gets number of strings that @get_strings
+ * will write.
+ *
+ * \param[in] dev – pointer to net device structure.
+ *
+ * \return int
+ *
+ * \retval +ve(>0) on success, 0 if that string is not
+ * defined and -ve on failure.
+ */
+
+static int DWC_ETH_QOS_get_sset_count(struct net_device *dev, int sset)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	int len = 0;
+
+	DBGPR("-->DWC_ETH_QOS_get_sset_count\n");
+
+	switch(sset) {
+	case ETH_SS_STATS:
+		if (pdata->hw_feat.mmc_sel)
+			len = DWC_ETH_QOS_MMC_STATS_LEN;
+		len += DWC_ETH_QOS_EXTRA_STAT_LEN;
+		break;
+	default:
+		len = -EOPNOTSUPP;
+	}
+
+	DBGPR("<--DWC_ETH_QOS_get_sset_count\n");
+
+	return len;
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.h
new file mode 100755
index 0000000..4e96b79
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ethtool.h
@@ -0,0 +1,62 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS_ETHTOOL_H__
+
+#define __DWC_ETH_QOS_ETHTOOL_H__
+
+static void DWC_ETH_QOS_get_pauseparam(struct net_device *dev,
+				       struct ethtool_pauseparam *pause);
+static int DWC_ETH_QOS_set_pauseparam(struct net_device *dev,
+				      struct ethtool_pauseparam *pause);
+
+static int DWC_ETH_QOS_getsettings(struct net_device *dev,
+				   struct ethtool_cmd *cmd);
+static int DWC_ETH_QOS_setsettings(struct net_device *dev,
+				   struct ethtool_cmd *cmd);
+static void DWC_ETH_QOS_get_wol(struct net_device *dev,
+				struct ethtool_wolinfo *wol);
+static int DWC_ETH_QOS_set_wol(struct net_device *dev,
+			       struct ethtool_wolinfo *wol);
+
+static int DWC_ETH_QOS_set_coalesce(struct net_device *dev,
+				    struct ethtool_coalesce *ec);
+static int DWC_ETH_QOS_get_coalesce(struct net_device *dev,
+				    struct ethtool_coalesce *ec);
+
+static int DWC_ETH_QOS_get_sset_count(struct net_device *dev, int sset);
+
+static void DWC_ETH_QOS_get_strings(struct net_device *dev, u32 stringset, u8 *data);
+
+static void DWC_ETH_QOS_get_ethtool_stats(struct net_device *dev,
+	struct ethtool_stats *dummy, u64 *data);
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
new file mode 100755
index 0000000..7f618a1
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -0,0 +1,625 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_mdio.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+
+/*!
+* \brief read MII PHY register, function called by the driver alone
+*
+* \details Read MII registers through the API read_phy_reg where the
+* related MAC registers can be configured.
+*
+* \param[in] pdata - pointer to driver private data structure.
+* \param[in] phyaddr - the phy address to read
+* \param[in] phyreg - the phy regiester id to read
+* \param[out] phydata - pointer to the value that is read from the phy registers
+*
+* \return int
+*
+* \retval  0 - successfully read data from register
+* \retval -1 - error occurred
+* \retval  1 - if the feature is not defined.
+*/
+
+INT DWC_ETH_QOS_mdio_read_direct(struct DWC_ETH_QOS_prv_data *pdata,
+				 int phyaddr, int phyreg, int *phydata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int phy_reg_read_status;
+
+	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_read_direct\n");
+
+	if (hw_if->read_phy_regs) {
+		phy_reg_read_status =
+		    hw_if->read_phy_regs(phyaddr, phyreg, phydata);
+	} else {
+		phy_reg_read_status = 1;
+		printk(KERN_ALERT "%s: hw_if->read_phy_regs not defined",
+		       DEV_NAME);
+	}
+
+	DBGPR_MDIO("<-- DWC_ETH_QOS_mdio_read_direct\n");
+
+	return phy_reg_read_status;
+}
+
+/*!
+* \brief write MII PHY register, function called by the driver alone
+*
+* \details Writes MII registers through the API write_phy_reg where the
+* related MAC registers can be configured.
+*
+* \param[in] pdata - pointer to driver private data structure.
+* \param[in] phyaddr - the phy address to write
+* \param[in] phyreg - the phy regiester id to write
+* \param[out] phydata - actual data to be written into the phy registers
+*
+* \return void
+*
+* \retval  0 - successfully read data from register
+* \retval -1 - error occurred
+* \retval  1 - if the feature is not defined.
+*/
+
+INT DWC_ETH_QOS_mdio_write_direct(struct DWC_ETH_QOS_prv_data *pdata,
+				  int phyaddr, int phyreg, int phydata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int phy_reg_write_status;
+
+	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_write_direct\n");
+
+	if (hw_if->write_phy_regs) {
+		phy_reg_write_status =
+		    hw_if->write_phy_regs(phyaddr, phyreg, phydata);
+	} else {
+		phy_reg_write_status = 1;
+		printk(KERN_ALERT "%s: hw_if->write_phy_regs not defined",
+		       DEV_NAME);
+	}
+
+	DBGPR_MDIO("<-- DWC_ETH_QOS_mdio_write_direct\n");
+
+	return phy_reg_write_status;
+}
+
+/*!
+* \brief read MII PHY register.
+*
+* \details Read MII registers through the API read_phy_reg where the
+* related MAC registers can be configured.
+*
+* \param[in] bus - points to the mii_bus structure
+* \param[in] phyaddr - the phy address to write
+* \param[in] phyreg - the phy register offset to write
+*
+* \return int
+*
+* \retval  - value read from given phy register
+*/
+
+static INT DWC_ETH_QOS_mdio_read(struct mii_bus *bus, int phyaddr, int phyreg)
+{
+	struct net_device *dev = bus->priv;
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int phydata;
+
+	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_read: phyaddr = %d, phyreg = %d\n",
+	      phyaddr, phyreg);
+
+	if (hw_if->read_phy_regs) {
+		hw_if->read_phy_regs(phyaddr, phyreg, &phydata);
+	} else {
+		printk(KERN_ALERT "%s: hw_if->read_phy_regs not defined",
+		       DEV_NAME);
+	}
+
+	DBGPR_MDIO("<-- DWC_ETH_QOS_mdio_read: phydata = %#x\n", phydata);
+
+	return phydata;
+}
+
+/*!
+* \brief API to write MII PHY register
+*
+* \details This API is expected to write MII registers with the value being
+* passed as the last argument which is done in write_phy_regs API
+* called by this function.
+*
+* \param[in] bus - points to the mii_bus structure
+* \param[in] phyaddr - the phy address to write
+* \param[in] phyreg - the phy register offset to write
+* \param[in] phydata - the register value to write with
+*
+* \return 0 on success and -ve number on failure.
+*/
+
+static INT DWC_ETH_QOS_mdio_write(struct mii_bus *bus, int phyaddr, int phyreg,
+				  u16 phydata)
+{
+	struct net_device *dev = bus->priv;
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	INT ret = Y_SUCCESS;
+
+	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_write\n");
+
+	if (hw_if->write_phy_regs) {
+		hw_if->write_phy_regs(phyaddr, phyreg, phydata);
+	} else {
+		ret = -1;
+		printk(KERN_ALERT "%s: hw_if->write_phy_regs not defined",
+		       DEV_NAME);
+	}
+
+	DBGPR_MDIO("<-- DWC_ETH_QOS_mdio_write\n");
+
+	return ret;
+}
+
+
+/*!
+* \brief API to reset PHY
+*
+* \details This API is issue soft reset to PHY core and waits
+* until soft reset completes.
+*
+* \param[in] bus - points to the mii_bus structure
+*
+* \return 0 on success and -ve number on failure.
+*/
+
+static INT DWC_ETH_QOS_mdio_reset(struct mii_bus *bus)
+{
+	struct net_device *dev = bus->priv;
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	INT phydata;
+
+	DBGPR_MDIO("-->DWC_ETH_QOS_mdio_reset: phyaddr : %d\n", pdata->phyaddr);
+
+#if 0 //def DWC_ETH_QOS_CONFIG_PGTEST
+	printk(KERN_ALERT "PHY Programming for Autoneg disable\n");
+	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	phydata &= ~(1 << 12);
+	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+#endif
+
+	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+
+	if (phydata < 0)
+		return 0;
+
+	/* issue soft reset to PHY */
+	phydata |= BMCR_RESET;
+	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+
+	/* wait until software reset completes */
+	do {
+		hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	} while ((phydata >= 0) && (phydata & BMCR_RESET));
+
+#if 0 //def DWC_ETH_QOS_CONFIG_PGTEST
+	printk(KERN_ALERT "PHY Programming for Loopback\n");
+	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	phydata |= (1 << 14);
+	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+#endif
+
+	DBGPR_MDIO("<--DWC_ETH_QOS_mdio_reset\n");
+
+	return 0;
+}
+
+/*!
+ * \details This function is invoked by other functions to get the PHY register
+ * dump. This function is used during development phase for debug purpose.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return 0
+ */
+
+void dump_phy_registers(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	int phydata = 0;
+
+	printk(KERN_ALERT
+	       "\n************* PHY Reg dump *************************\n");
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMCR, &phydata);
+	printk(KERN_ALERT
+	       "Phy Control Reg(Basic Mode Control Reg) (%#x) = %#x\n",
+	       MII_BMCR, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMSR, &phydata);
+	printk(KERN_ALERT "Phy Status Reg(Basic Mode Status Reg) (%#x) = %#x\n",
+	       MII_BMSR, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID1,
+	    &phydata);
+	printk(KERN_ALERT "Phy Id (PHYS ID 1) (%#x)= %#x\n", MII_PHYSID1,
+	    phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID2,
+	    &phydata);
+	printk(KERN_ALERT "Phy Id (PHYS ID 2) (%#x)= %#x\n", MII_PHYSID2,
+	    phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ADVERTISE,
+	    &phydata);
+	printk(KERN_ALERT "Auto-nego Adv (Advertisement Control Reg)"\
+	    " (%#x) = %#x\n", MII_ADVERTISE, phydata);
+
+	/* read Phy Control Reg */
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_LPA,
+	    &phydata);
+	printk(KERN_ALERT "Auto-nego Lap (Link Partner Ability Reg)"\
+	    " (%#x)= %#x\n", MII_LPA, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_EXPANSION,
+	    &phydata);
+	printk(KERN_ALERT "Auto-nego Exp (Extension Reg)"\
+	    "(%#x) = %#x\n", MII_EXPANSION, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+	    DWC_ETH_QOS_AUTO_NEGO_NP, &phydata);
+	printk(KERN_ALERT "Auto-nego Np (%#x) = %#x\n",
+	    DWC_ETH_QOS_AUTO_NEGO_NP, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ESTATUS,
+				     &phydata);
+	printk(KERN_ALERT "Extended Status Reg (%#x) = %#x\n", MII_ESTATUS,
+	       phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_CTRL1000,
+	    &phydata);
+	printk(KERN_ALERT "1000 Ctl Reg (1000BASE-T Control Reg)"\
+	    "(%#x) = %#x\n", MII_CTRL1000, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_STAT1000,
+	    &phydata);
+	printk(KERN_ALERT "1000 Sts Reg (1000BASE-T Status)(%#x) = %#x\n",
+	       MII_STAT1000, phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_CTL,
+			&phydata);
+	printk(KERN_ALERT "PHY Ctl Reg (%#x) = %#x\n", DWC_ETH_QOS_PHY_CTL,
+	    phydata);
+
+	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+	    DWC_ETH_QOS_PHY_STS, &phydata);
+	printk(KERN_ALERT "PHY Sts Reg (%#x) = %#x\n", DWC_ETH_QOS_PHY_STS,
+	    phydata);
+
+	printk(KERN_ALERT
+	       "\n****************************************************\n");
+}
+
+/*!
+* \brief API to adjust link parameters.
+*
+* \details This function will be called by PAL to inform the driver
+* about various link parameters like duplex and speed. This function
+* will configure the MAC based on link parameters.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return void
+*/
+
+static void DWC_ETH_QOS_adjust_link(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct phy_device *phydev = pdata->phydev;
+	unsigned long flags;
+	int new_state = 0;
+
+	if (phydev == NULL)
+		return;
+
+	DBGPR_MDIO("-->DWC_ETH_QOS_adjust_link. address %d link %d\n", phydev->addr,
+	      phydev->link);
+
+	spin_lock_irqsave(&pdata->lock, flags);
+
+	if (phydev->link) {
+		/* Now we make sure that we can be in full duplex mode.
+		 * If not, we operate in half-duplex mode */
+		if (phydev->duplex != pdata->oldduplex) {
+			new_state = 1;
+			if (phydev->duplex)
+				hw_if->set_full_duplex();
+			else {
+				hw_if->set_half_duplex();
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+				/* For Synopsys testing and debugging only */
+				{
+					UINT phydata;
+
+					/* setting 'Assert CRS on transmit' */
+					phydata = 0;
+					DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+						DWC_ETH_QOS_PHY_CTL, &phydata);
+					phydata |= (1 << 11);
+					DWC_ETH_QOS_mdio_write_direct(pdata, pdata->phyaddr,
+						DWC_ETH_QOS_PHY_CTL, phydata);
+				}
+#endif
+			}
+			pdata->oldduplex = phydev->duplex;
+		}
+
+		/* FLOW ctrl operation */
+		if (phydev->pause || phydev->asym_pause) {
+			if (pdata->flow_ctrl != pdata->oldflow_ctrl)
+				DWC_ETH_QOS_configure_flow_ctrl(pdata);
+		}
+
+		if (phydev->speed != pdata->speed) {
+			new_state = 1;
+			switch (phydev->speed) {
+			case SPEED_1000:
+				hw_if->set_gmii_speed();
+				break;
+			case SPEED_100:
+				hw_if->set_mii_speed_100();
+				break;
+			case SPEED_10:
+				hw_if->set_mii_speed_10();
+				break;
+			}
+			pdata->speed = phydev->speed;
+		}
+
+		if (!pdata->oldlink) {
+			new_state = 1;
+			pdata->oldlink = 1;
+		}
+	} else if (pdata->oldlink) {
+		new_state = 1;
+		pdata->oldlink = 0;
+		pdata->speed = 0;
+		pdata->oldduplex = -1;
+	}
+
+	if (new_state)
+		phy_print_status(phydev);
+
+	/* At this stage, it could be need to setup the EEE or adjust some
+	 * MAC related HW registers.
+	 * */
+	pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
+
+	spin_unlock_irqrestore(&pdata->lock, flags);
+
+	DBGPR_MDIO("<--DWC_ETH_QOS_adjust_link\n");
+}
+
+/*!
+* \brief API to initialize PHY.
+*
+* \details This function will initializes the driver's PHY state and attaches
+* the PHY to the MAC driver.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return integer
+*
+* \retval 0 on success & negative number on failure.
+*/
+
+static int DWC_ETH_QOS_init_phy(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct phy_device *phydev = NULL;
+	char phy_id_fmt[MII_BUS_ID_SIZE + 3];
+	char bus_id[MII_BUS_ID_SIZE];
+
+	DBGPR_MDIO("-->DWC_ETH_QOS_init_phy\n");
+
+	pdata->oldlink = 0;
+	pdata->speed = 0;
+	pdata->oldduplex = -1;
+
+	snprintf(bus_id, MII_BUS_ID_SIZE, "dwc_phy-%x", pdata->bus_id);
+
+	snprintf(phy_id_fmt, MII_BUS_ID_SIZE + 3, PHY_ID_FMT, bus_id,
+		 pdata->phyaddr);
+
+	DBGPR_MDIO("trying to attach to %s\n", phy_id_fmt);
+
+	phydev = phy_connect(dev, phy_id_fmt, &DWC_ETH_QOS_adjust_link,
+			     pdata->interface);
+	if (IS_ERR(phydev)) {
+		printk(KERN_ALERT "%s: Could not attach to PHY\n", dev->name);
+		return PTR_ERR(phydev);
+	}
+
+	if (phydev->phy_id == 0) {
+		phy_disconnect(phydev);
+		return -ENODEV;
+	}
+
+	if (pdata->interface == PHY_INTERFACE_MODE_GMII) {
+		phydev->supported = PHY_GBIT_FEATURES;
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+		phydev->supported &= ~SUPPORTED_1000baseT_Full;
+#endif
+	} else if ((pdata->interface == PHY_INTERFACE_MODE_MII) ||
+		(pdata->interface == PHY_INTERFACE_MODE_RMII)) {
+		phydev->supported = PHY_BASIC_FEATURES;
+	}
+
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	phydev->supported |= (SUPPORTED_Pause | SUPPORTED_Asym_Pause);
+#endif
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	phydev->supported = PHY_BASIC_FEATURES;
+#endif
+
+	phydev->advertising = phydev->supported;
+
+	DBGPR_MDIO("%s: attached to PHY (UID 0x%x) Link = %d\n", dev->name,
+	      phydev->phy_id, phydev->link);
+
+	pdata->phydev = phydev;
+	phy_start(pdata->phydev);
+
+	DBGPR_MDIO("<--DWC_ETH_QOS_init_phy\n");
+
+	return 0;
+}
+
+/*!
+* \brief API to register mdio.
+*
+* \details This function will allocate mdio bus and register it
+* phy layer.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return 0 on success and -ve on failure.
+*/
+
+int DWC_ETH_QOS_mdio_register(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct mii_bus *new_bus = NULL;
+	int phyaddr = 0;
+	unsigned short phy_detected = 0;
+	int ret = Y_SUCCESS;
+
+	DBGPR_MDIO("-->DWC_ETH_QOS_mdio_register\n");
+
+	/* find the phy ID or phy address which is connected to our MAC */
+	for (phyaddr = 0; phyaddr < 32; phyaddr++) {
+		int phy_reg_read_status, mii_status;
+
+		phy_reg_read_status =
+		    DWC_ETH_QOS_mdio_read_direct(pdata, phyaddr, MII_BMSR,
+			&mii_status);
+		if (phy_reg_read_status == 0) {
+			if (mii_status != 0x0000 && mii_status != 0xffff) {
+				printk(KERN_ALERT "%s: Phy detected at"\
+				    " ID/ADDR %d\n", DEV_NAME, phyaddr);
+				phy_detected = 1;
+				break;
+			}
+		} else if (phy_reg_read_status < 0) {
+			printk(KERN_ALERT "%s: Error reading the phy register"\
+			    " MII_BMSR for phy ID/ADDR %d\n",
+			    DEV_NAME, phyaddr);
+		}
+	}
+	if (!phy_detected) {
+		printk(KERN_ALERT "%s: No phy could be detected\n", DEV_NAME);
+		return -ENOLINK;
+	}
+	pdata->phyaddr = phyaddr;
+	pdata->bus_id = 0x1;
+
+	DBGPHY_REGS(pdata);
+
+	new_bus = mdiobus_alloc();
+	if (new_bus == NULL) {
+		printk(KERN_ALERT "Unable to allocate mdio bus\n");
+		return -ENOMEM;
+	}
+
+	new_bus->name = "dwc_phy";
+	new_bus->read = DWC_ETH_QOS_mdio_read;
+	new_bus->write = DWC_ETH_QOS_mdio_write;
+	new_bus->reset = DWC_ETH_QOS_mdio_reset;
+	snprintf(new_bus->id, MII_BUS_ID_SIZE, "%s-%x", new_bus->name,
+		 pdata->bus_id);
+	new_bus->priv = dev;
+	new_bus->phy_mask = 0;
+	new_bus->parent = &pdata->pdev->dev;
+	ret = mdiobus_register(new_bus);
+	if (ret != 0) {
+		printk(KERN_ALERT "%s: Cannot register as MDIO bus\n",
+		    new_bus->name);
+		mdiobus_free(new_bus);
+		return ret;
+	}
+	pdata->mii = new_bus;
+
+	ret = DWC_ETH_QOS_init_phy(dev);
+	if (unlikely(ret)) {
+		printk(KERN_ALERT "Cannot attach to PHY (error: %d)\n", ret);
+		goto err_out_phy_connect;
+	}
+
+	DBGPR_MDIO("<--DWC_ETH_QOS_mdio_register\n");
+
+	return ret;
+
+ err_out_phy_connect:
+	DWC_ETH_QOS_mdio_unregister(dev);
+	return ret;
+}
+
+/*!
+* \brief API to unregister mdio.
+*
+* \details This function will unregister mdio bus and free's the memory
+* allocated to it.
+*
+* \param[in] dev - pointer to net_device structure
+*
+* \return void
+*/
+
+void DWC_ETH_QOS_mdio_unregister(struct net_device *dev)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+
+	DBGPR_MDIO("-->DWC_ETH_QOS_mdio_unregister\n");
+
+	if (pdata->phydev) {
+		phy_stop(pdata->phydev);
+		phy_disconnect(pdata->phydev);
+		pdata->phydev = NULL;
+	}
+
+	mdiobus_unregister(pdata->mii);
+	pdata->mii->priv = NULL;
+	mdiobus_free(pdata->mii);
+	pdata->mii = NULL;
+
+	DBGPR_MDIO("<--DWC_ETH_QOS_mdio_unregister\n");
+}
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
new file mode 100755
index 0000000..b3ea3a3
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -0,0 +1,629 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_pci.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+#include "DWC_ETH_QOS_pci.h"
+
+static UCHAR dev_addr[6] = {0, 0x55, 0x7b, 0xb5, 0x7d, 0xf7};
+
+ULONG dwc_eth_qos_pci_base_addr;
+
+void DWC_ETH_QOS_init_all_fptrs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DWC_ETH_QOS_init_function_ptrs_dev(&pdata->hw_if);
+	DWC_ETH_QOS_init_function_ptrs_desc(&pdata->desc_if);
+}
+
+/*!
+* \brief API to initialize the device.
+*
+* \details This probing function gets called (during execution of
+* pci_register_driver() for already existing devices or later if a
+* new device gets inserted) for all PCI devices which match the ID table
+* and are not "owned" by the other drivers yet. This function gets passed
+* a "struct pci_dev *" for each device whose entry in the ID table matches
+* the device. The probe function returns zero when the driver chooses to take
+* "ownership" of the device or an error code (negative number) otherwise.
+* The probe function always gets called from process context, so it can sleep.
+*
+* \param[in] pdev - pointer to pci_dev structure.
+* \param[in] id   - pointer to table of device ID/ID's the driver is inerested.
+*
+* \return integer
+*
+* \retval 0 on success & -ve number on failure.
+*/
+
+int DWC_ETH_QOS_probe(struct pci_dev *pdev,
+				const struct pci_device_id *id)
+{
+
+	struct DWC_ETH_QOS_prv_data *pdata = NULL;
+	struct net_device *dev = NULL;
+	int i, ret = 0;
+	struct hw_if_struct *hw_if = NULL;
+	struct desc_if_struct *desc_if = NULL;
+	UCHAR tx_q_count = 0, rx_q_count = 0;
+
+	DBGPR("--> DWC_ETH_QOS_probe (%d)\n", pdev->devfn);
+
+	ret = pci_enable_device(pdev);
+	if (ret) {
+		printk(KERN_ALERT "%s:Unable to enable device\n", DEV_NAME);
+		goto err_out_enb_failed;
+	}
+	if (pci_request_regions(pdev, DEV_NAME)) {
+		printk(KERN_ALERT "%s:Failed to get PCI regions\n", DEV_NAME);
+		ret = -ENODEV;
+		goto err_out_req_reg_failed;
+	}
+	pci_set_master(pdev);
+
+	for (i = 0; i <= 5; i++) {
+		if (pci_resource_len(pdev, i) == 0)
+			continue;
+		dwc_eth_qos_pci_base_addr =
+			(ULONG) pci_iomap(pdev, i, COMPLETE_BAR);
+		if ((void __iomem *)dwc_eth_qos_pci_base_addr == NULL) {
+			printk(KERN_ALERT
+			       "%s: cannot map register memory, aborting",
+			       pci_name(pdev));
+			ret = -EIO;
+			goto err_out_map_failed;
+		}
+		break;
+	}
+
+	DBGPR("dwc_eth_qos_pci_base_addr = %#lx\n", dwc_eth_qos_pci_base_addr);
+
+	/* queue count */
+	tx_q_count = get_tx_queue_count();
+	rx_q_count = get_rx_queue_count();
+
+	dev = alloc_etherdev_mqs(sizeof(struct DWC_ETH_QOS_prv_data),
+				tx_q_count, rx_q_count);
+	if (dev == NULL) {
+		printk(KERN_ALERT "%s:Unable to alloc new net device\n",
+		    DEV_NAME);
+		ret = -ENOMEM;
+		goto err_out_dev_failed;
+	}
+	dev->dev_addr[0] = dev_addr[0];
+	dev->dev_addr[1] = dev_addr[1];
+	dev->dev_addr[2] = dev_addr[2];
+	dev->dev_addr[3] = dev_addr[3];
+	dev->dev_addr[4] = dev_addr[4];
+	dev->dev_addr[5] = dev_addr[5];
+
+	dev->base_addr = dwc_eth_qos_pci_base_addr;
+	SET_NETDEV_DEV(dev, &pdev->dev);
+	pdata = netdev_priv(dev);
+	DWC_ETH_QOS_init_all_fptrs(pdata);
+	hw_if = &(pdata->hw_if);
+	desc_if = &(pdata->desc_if);
+
+	pci_set_drvdata(pdev, dev);
+	pdata->pdev = pdev;
+
+	pdata->dev = dev;
+	pdata->tx_queue_cnt = tx_q_count;
+	pdata->rx_queue_cnt = rx_q_count;
+
+#ifdef DWC_ETH_QOS_CONFIG_DEBUGFS
+	/* to give prv data to debugfs */
+	DWC_ETH_QOS_get_pdata(pdata);
+#endif
+
+	/* issue software reset to device */
+	hw_if->exit();
+	dev->irq = pdev->irq;
+
+	DWC_ETH_QOS_get_all_hw_features(pdata);
+	DWC_ETH_QOS_print_all_hw_features(pdata);
+
+	ret = desc_if->alloc_queue_struct(pdata);
+	if (ret < 0) {
+		printk(KERN_ALERT "ERROR: Unable to alloc Tx/Rx queue\n");
+		goto err_out_q_alloc_failed;
+	}
+
+	dev->netdev_ops = DWC_ETH_QOS_get_netdev_ops();
+
+	pdata->interface = DWC_ETH_QOS_get_phy_interface(pdata);
+	/* Bypass PHYLIB for TBI, RTBI and SGMII interface */
+	if (1 == pdata->hw_feat.sma_sel) {
+		ret = DWC_ETH_QOS_mdio_register(dev);
+		if (ret < 0) {
+			printk(KERN_ALERT "MDIO bus (id %d) registration failed\n",
+			       pdata->bus_id);
+			goto err_out_mdio_reg;
+		}
+	} else {
+		printk(KERN_ALERT "%s: MDIO is not present\n\n", DEV_NAME);
+	}
+
+#ifndef DWC_ETH_QOS_CONFIG_PGTEST
+	/* enabling and registration of irq with magic wakeup */
+	if (1 == pdata->hw_feat.mgk_sel) {
+		device_set_wakeup_capable(&pdev->dev, 1);
+		pdata->wolopts = WAKE_MAGIC;
+		enable_irq_wake(dev->irq);
+	}
+
+	for (i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++) {
+		struct DWC_ETH_QOS_rx_queue *rx_queue = GET_RX_QUEUE_PTR(i);
+
+		netif_napi_add(dev, &rx_queue->napi, DWC_ETH_QOS_poll_mq,
+				(64 * DWC_ETH_QOS_RX_QUEUE_CNT));
+	}
+
+	SET_ETHTOOL_OPS(dev, DWC_ETH_QOS_get_ethtool_ops());
+	if (pdata->hw_feat.tso_en) {
+		dev->hw_features = NETIF_F_TSO;
+		dev->hw_features |= NETIF_F_SG;
+		dev->hw_features |= NETIF_F_IP_CSUM;
+		dev->hw_features |= NETIF_F_IPV6_CSUM;
+		printk(KERN_ALERT "Supports TSO, SG and TX COE\n");
+	}
+	else if (pdata->hw_feat.tx_coe_sel) {
+		dev->hw_features = NETIF_F_IP_CSUM ;
+		dev->hw_features |= NETIF_F_IPV6_CSUM;
+		printk(KERN_ALERT "Supports TX COE\n");
+	}
+
+	if (pdata->hw_feat.rx_coe_sel) {
+		dev->hw_features |= NETIF_F_RXCSUM;
+		dev->hw_features |= NETIF_F_LRO;
+		printk(KERN_ALERT "Supports RX COE and LRO\n");
+	}
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+	dev->vlan_features |= dev->hw_features;
+	dev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX;
+	if (pdata->hw_feat.sa_vlan_ins) {
+		dev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX;
+		printk(KERN_ALERT "VLAN Feature enabled\n");
+	}
+	if (pdata->hw_feat.vlan_hash_en) {
+		dev->hw_features |= NETIF_F_HW_VLAN_CTAG_FILTER;
+		printk(KERN_ALERT "VLAN HASH Filtering enabled\n");
+	}
+#endif /* end of DWC_ETH_QOS_ENABLE_VLAN_TAG */
+	dev->features |= dev->hw_features;
+	pdata->dev_state |= dev->features;
+
+	DWC_ETH_QOS_init_rx_coalesce(pdata);
+
+#ifdef DWC_ETH_QOS_CONFIG_PTP
+	DWC_ETH_QOS_ptp_init(pdata);
+#endif	/* end of DWC_ETH_QOS_CONFIG_PTP */
+
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	spin_lock_init(&pdata->lock);
+	spin_lock_init(&pdata->tx_lock);
+	spin_lock_init(&pdata->pmt_lock);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	ret = DWC_ETH_QOS_alloc_pg(pdata);
+	if (ret < 0) {
+		printk(KERN_ALERT "ERROR:Unable to allocate PG memory\n");
+		goto err_out_pg_failed;
+	}
+	printk(KERN_ALERT "\n");
+	printk(KERN_ALERT "/*******************************************\n");
+	printk(KERN_ALERT "*\n");
+	printk(KERN_ALERT "* PACKET GENERATOR MODULE ENABLED IN DRIVER\n");
+	printk(KERN_ALERT "*\n");
+	printk(KERN_ALERT "*******************************************/\n");
+	printk(KERN_ALERT "\n");
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	ret = register_netdev(dev);
+	if (ret) {
+		printk(KERN_ALERT "%s: Net device registration failed\n",
+		    DEV_NAME);
+		goto err_out_netdev_failed;
+	}
+
+	DBGPR("<-- DWC_ETH_QOS_probe\n");
+
+	if (pdata->hw_feat.pcs_sel) {
+		netif_carrier_off(dev);
+		printk(KERN_ALERT "carrier off till LINK is up\n");
+	}
+
+	return 0;
+
+ err_out_netdev_failed:
+#ifdef DWC_ETH_QOS_CONFIG_PTP
+	DWC_ETH_QOS_ptp_remove(pdata);
+#endif	/* end of DWC_ETH_QOS_CONFIG_PTP */
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	DWC_ETH_QOS_free_pg(pdata);
+ err_out_pg_failed:
+#endif
+	if (1 == pdata->hw_feat.sma_sel)
+		DWC_ETH_QOS_mdio_unregister(dev);
+
+ err_out_mdio_reg:
+	desc_if->free_queue_struct(pdata);
+
+ err_out_q_alloc_failed:
+	free_netdev(dev);
+	pci_set_drvdata(pdev, NULL);
+
+ err_out_dev_failed:
+	pci_iounmap(pdev, (void __iomem *)dwc_eth_qos_pci_base_addr);
+
+ err_out_map_failed:
+	pci_release_regions(pdev);
+
+ err_out_req_reg_failed:
+	pci_disable_device(pdev);
+
+ err_out_enb_failed:
+	return ret;
+}
+
+/*!
+* \brief API to release all the resources from the driver.
+*
+* \details The remove function gets called whenever a device being handled
+* by this driver is removed (either during deregistration of the driver or
+* when it is manually pulled out of a hot-pluggable slot). This function
+* should reverse operations performed at probe time. The remove function
+* always gets called from process context, so it can sleep.
+*
+* \param[in] pdev - pointer to pci_dev structure.
+*
+* \return void
+*/
+
+void DWC_ETH_QOS_remove(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct desc_if_struct *desc_if = &(pdata->desc_if);
+
+	DBGPR("--> DWC_ETH_QOS_remove\n");
+
+	if (pdata->irq_number != 0) {
+		free_irq(pdata->irq_number, pdata);
+		pdata->irq_number = 0;
+	}
+
+	if (1 == pdata->hw_feat.sma_sel)
+		DWC_ETH_QOS_mdio_unregister(dev);
+
+#ifdef DWC_ETH_QOS_CONFIG_PTP
+	DWC_ETH_QOS_ptp_remove(pdata);
+#endif /* end of DWC_ETH_QOS_CONFIG_PTP */
+
+	unregister_netdev(dev);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	DWC_ETH_QOS_free_pg(pdata);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	desc_if->free_queue_struct(pdata);
+
+	free_netdev(dev);
+
+	pci_set_drvdata(pdev, NULL);
+	pci_iounmap(pdev, (void __iomem *)dwc_eth_qos_pci_base_addr);
+
+	pci_release_regions(pdev);
+	pci_disable_device(pdev);
+
+	DBGPR("<-- DWC_ETH_QOS_remove\n");
+
+	return;
+}
+
+static struct pci_device_id DWC_ETH_QOS_id = {
+	PCI_DEVICE(VENDOR_ID, DEVICE_ID)
+};
+
+struct pci_dev *DWC_ETH_QOS_pcidev;
+
+static struct pci_driver DWC_ETH_QOS_pci_driver = {
+	.name = "DWC_ETH_QOS",
+	.id_table = &DWC_ETH_QOS_id,
+	.probe = DWC_ETH_QOS_probe,
+	.remove = DWC_ETH_QOS_remove,
+	.shutdown = DWC_ETH_QOS_shutdown,
+	.suspend_late = DWC_ETH_QOS_suspend_late,
+	.resume_early = DWC_ETH_QOS_resume_early,
+#ifdef CONFIG_PM
+	.suspend = DWC_ETH_QOS_suspend,
+	.resume = DWC_ETH_QOS_resume,
+#endif
+	.driver = {
+		   .name = DEV_NAME,
+		   .owner = THIS_MODULE,
+	},
+};
+
+static void DWC_ETH_QOS_shutdown(struct pci_dev *pdev)
+{
+	printk(KERN_ALERT "-->DWC_ETH_QOS_shutdown\n");
+	printk(KERN_ALERT "Handle the shutdown\n");
+	printk(KERN_ALERT ">--DWC_ETH_QOS_shutdown\n");
+
+	return;
+}
+
+static INT DWC_ETH_QOS_suspend_late(struct pci_dev *pdev, pm_message_t state)
+{
+	printk(KERN_ALERT "-->DWC_ETH_QOS_suspend_late\n");
+	printk(KERN_ALERT "Handle the suspend_late\n");
+	printk(KERN_ALERT "<--DWC_ETH_QOS_suspend_late\n");
+
+	return 0;
+}
+
+static INT DWC_ETH_QOS_resume_early(struct pci_dev *pdev)
+{
+	printk(KERN_ALERT "-->DWC_ETH_QOS_resume_early\n");
+	printk(KERN_ALERT "Handle the resume_early\n");
+	printk(KERN_ALERT "<--DWC_ETH_QOS_resume_early\n");
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+/*!
+ * \brief Routine to put the device in suspend mode
+ *
+ * \details This function gets called by PCI core when the device is being
+ * suspended. The suspended state is passed as input argument to it.
+ * Following operations are performed in this function,
+ * - stop the phy.
+ * - detach the device from stack.
+ * - stop the queue.
+ * - Disable napi.
+ * - Stop DMA TX and RX process.
+ * - Enable power down mode using PMT module or disable MAC TX and RX process.
+ * - Save the pci state.
+ *
+ * \param[in] pdev – pointer to pci device structure.
+ * \param[in] state – suspend state of device.
+ *
+ * \return int
+ *
+ * \retval 0
+ */
+
+static INT DWC_ETH_QOS_suspend(struct pci_dev *pdev, pm_message_t state)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	INT ret, pmt_flags = 0;
+	unsigned int rwk_filter_values[] = {
+		/* for filter 0 CRC is computed on 0 - 7 bytes from offset */
+		0x000000ff,
+
+		/* for filter 1 CRC is computed on 0 - 7 bytes from offset */
+		0x000000ff,
+
+		/* for filter 2 CRC is computed on 0 - 7 bytes from offset */
+		0x000000ff,
+
+		/* for filter 3 CRC is computed on 0 - 31 bytes from offset */
+		0x000000ff,
+
+		/* filter 0, 1 independently enabled and would apply for
+		 * unicast packet only filter 3, 2 combined as,
+		 * "Filter-3 pattern AND NOT Filter-2 pattern" */
+		0x03050101,
+
+		/* filter 3, 2, 1 and 0 offset is 50, 58, 66, 74 bytes
+		 * from start */
+		0x4a423a32,
+
+		/* pattern for filter 1 and 0, "0x55", "11", repeated 8 times */
+		0xe7b77eed,
+
+		/* pattern for filter 3 and 4, "0x44", "33", repeated 8 times */
+		0x9b8a5506,
+	};
+
+	DBGPR("-->DWC_ETH_QOS_suspend\n");
+
+	if (!dev || !netif_running(dev) || (!pdata->hw_feat.mgk_sel &&
+			!pdata->hw_feat.rwk_sel)) {
+		DBGPR("<--DWC_ETH_QOS_dev_suspend\n");
+		return -EINVAL;
+	}
+
+	if (pdata->hw_feat.rwk_sel && (pdata->wolopts & WAKE_UCAST)) {
+		pmt_flags |= DWC_ETH_QOS_REMOTE_WAKEUP;
+		hw_if->configure_rwk_filter(rwk_filter_values, 8);
+	}
+
+	if (pdata->hw_feat.mgk_sel && (pdata->wolopts & WAKE_MAGIC))
+		pmt_flags |= DWC_ETH_QOS_MAGIC_WAKEUP;
+
+	ret = DWC_ETH_QOS_powerdown(dev, pmt_flags, DWC_ETH_QOS_DRIVER_CONTEXT);
+	pci_save_state(pdev);
+	pci_set_power_state(pdev, pci_choose_state(pdev, state));
+
+	DBGPR("<--DWC_ETH_QOS_suspend\n");
+
+	return ret;
+}
+
+/*!
+ * \brief Routine to resume device operation
+ *
+ * \details This function gets called by PCI core when the device is being
+ * resumed. It is always called after suspend has been called. These function
+ * reverse operations performed at suspend time. Following operations are
+ * performed in this function,
+ * - restores the saved pci power state.
+ * - Wakeup the device using PMT module if supported.
+ * - Starts the phy.
+ * - Enable MAC and DMA TX and RX process.
+ * - Attach the device to stack.
+ * - Enable napi.
+ * - Starts the queue.
+ *
+ * \param[in] pdev – pointer to pci device structure.
+ *
+ * \return int
+ *
+ * \retval 0
+ */
+
+static INT DWC_ETH_QOS_resume(struct pci_dev *pdev)
+{
+	struct net_device *dev = pci_get_drvdata(pdev);
+	INT ret;
+
+	DBGPR("-->DWC_ETH_QOS_resume\n");
+
+	if (!dev || !netif_running(dev)) {
+		DBGPR("<--DWC_ETH_QOS_dev_resume\n");
+		return -EINVAL;
+	}
+
+	pci_set_power_state(pdev, PCI_D0);
+	pci_restore_state(pdev);
+
+	ret = DWC_ETH_QOS_powerup(dev, DWC_ETH_QOS_DRIVER_CONTEXT);
+
+	DBGPR("<--DWC_ETH_QOS_resume\n");
+
+	return ret;
+}
+
+#endif	/* CONFIG_PM */
+
+/*!
+* \brief API to register the driver.
+*
+* \details This is the first function called when the driver is loaded.
+* It register the driver with PCI sub-system
+*
+* \return void.
+*/
+
+static int DWC_ETH_QOS_init_module(void)
+{
+	INT ret = 0;
+
+	DBGPR("-->DWC_ETH_QOS_init_module\n");
+
+	ret = pci_register_driver(&DWC_ETH_QOS_pci_driver);
+	if (ret < 0) {
+		printk(KERN_ALERT "DWC_ETH_QOS:driver registration failed");
+		return ret;
+	}
+
+#ifdef DWC_ETH_QOS_CONFIG_DEBUGFS
+	create_debug_files();
+#endif
+
+	DBGPR("<--DWC_ETH_QOS_init_module\n");
+
+	return ret;
+}
+
+/*!
+* \brief API to unregister the driver.
+*
+* \details This is the first function called when the driver is removed.
+* It unregister the driver from PCI sub-system
+*
+* \return void.
+*/
+
+static void __exit DWC_ETH_QOS_exit_module(void)
+{
+	DBGPR("-->DWC_ETH_QOS_exit_module\n");
+
+#ifdef DWC_ETH_QOS_CONFIG_DEBUGFS
+	remove_debug_files();
+#endif
+
+	pci_unregister_driver(&DWC_ETH_QOS_pci_driver);
+
+	DBGPR("<--DWC_ETH_QOS_exit_module\n");
+}
+
+/*!
+* \brief Macro to register the driver registration function.
+*
+* \details A module always begin with either the init_module or the function
+* you specify with module_init call. This is the entry function for modules;
+* it tells the kernel what functionality the module provides and sets up the
+* kernel to run the module's functions when they're needed. Once it does this,
+* entry function returns and the module does nothing until the kernel wants
+* to do something with the code that the module provides.
+*/
+module_init(DWC_ETH_QOS_init_module);
+
+/*!
+* \brief Macro to register the driver un-registration function.
+*
+* \details All modules end by calling either cleanup_module or the function
+* you specify with the module_exit call. This is the exit function for modules;
+* it undoes whatever entry function did. It unregisters the functionality
+* that the entry function registered.
+*/
+module_exit(DWC_ETH_QOS_exit_module);
+
+/*!
+* \brief Macro to declare the module author.
+*
+* \details This macro is used to declare the module's authore.
+*/
+MODULE_AUTHOR("Synopsys India Pvt Ltd");
+
+/*!
+* \brief Macro to describe what the module does.
+*
+* \details This macro is used to describe what the module does.
+*/
+MODULE_DESCRIPTION("DWC_ETH_QOS Driver");
+
+/*!
+* \brief Macro to describe the module license.
+*
+* \details This macro is used to describe the module license.
+*/
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.h
new file mode 100755
index 0000000..b90a27c
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.h
@@ -0,0 +1,52 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS__PCI_H__
+
+#define __DWC_ETH_QOS__PCI_H__
+
+int DWC_ETH_QOS_probe(struct pci_dev *, const struct pci_device_id *);
+
+void DWC_ETH_QOS_remove(struct pci_dev *);
+
+static void DWC_ETH_QOS_shutdown(struct pci_dev *);
+
+static INT DWC_ETH_QOS_suspend_late(struct pci_dev *, pm_message_t);
+
+static INT DWC_ETH_QOS_resume_early(struct pci_dev *);
+
+#ifdef CONFIG_PM
+static INT DWC_ETH_QOS_suspend(struct pci_dev *, pm_message_t);
+
+static INT DWC_ETH_QOS_resume(struct pci_dev *);
+#endif				/* end of CONFIG_PM */
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
new file mode 100755
index 0000000..89bba4c
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
@@ -0,0 +1,1471 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_drv.c
+ * @brief: Driver functions.
+ */
+
+#include "DWC_ETH_QOS_yheader.h"
+#include "DWC_ETH_QOS_yapphdr.h"
+#include "DWC_ETH_QOS_pktgen.h"
+
+extern ULONG dwc_eth_qos_pci_base_addr;
+
+#include "DWC_ETH_QOS_yregacc.h"
+
+static INT DWC_ETH_QOS_GStatus;
+
+static int DWC_ETH_QOS_FRAME_PATTERN_CH[8] = {
+	0x11111111,
+	0x22222222,
+	0x33333333,
+	0x44444444,
+	0x55555555,
+	0x66666666,
+	0x77777777,
+	0x88888888,
+};
+
+static int DWC_ETH_QOS_frame_hdrs[8][4] = {
+	/* for channel 0 : Non tagged header
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x800
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x00000008},
+
+	/* for channel 1 : VLAN tagged header with priority 1
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64200081},
+
+	/* for channel 2 : VLAN tagged header with priority 2
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64400081},
+
+	/* for channel 3 : VLAN tagged header with priority 3
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64600081},
+
+	/* for channel 4 : VLAN tagged header with priority 4
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64800081},
+
+	/* for channel 5 : VLAN tagged header with priority 5
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64A00081},
+
+	/* for channel 6 : VLAN tagged header with priority 6
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64C00081},
+
+	/* for channel 7 : VLAN tagged header with priority 7
+	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
+	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
+	 * Type/Length : 0x8100
+	 * */
+	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64E00081},
+};
+
+
+/*!
+* \brief API to receiv the data from device.
+*
+* \details This function reads as many packets are possible from
+* device, reinitialize the descriptor buffer pointers and other
+* control bits such that device owns the descriptor. It also does
+* some housekeeping work to manage the descriptors.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] qInx - DMA channel/queue no. to be checked for packet.
+*
+* \return integer
+*
+* \retval number of packets received.
+*/
+static int DWC_ETH_QOS_poll_pg_sq(struct DWC_ETH_QOS_prv_data *pdata,
+				unsigned int qInx)
+{
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
+		GET_RX_WRAPPER_DESC(qInx);
+	struct net_device *dev = pdata->dev;
+	struct s_RX_NORMAL_DESC *RX_NORMAL_DESC = NULL;
+	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
+	unsigned int varrx_error_counters = 0;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
+		&(pdata->pg->pg_ch_input[qInx]);
+	int received = 0;
+	struct hw_if_struct *hw_if = &pdata->hw_if;
+	struct sk_buff *skb = NULL;
+
+	DBGPR_PG("-->DWC_ETH_QOS_poll_pg_sq: qInx = %u\n", qInx);
+
+	while (1) {
+		DBGPR_PG("cur_rx = %d\n", desc_data->cur_rx);
+		RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
+		buffer = GET_RX_BUF_PTR(qInx, desc_data->cur_rx);
+
+		/* reset rx packets attributes */
+		memset(&(pdata->rx_pkt_features), 0,
+		       sizeof(struct s_rx_pkt_features));
+		/* reset error counters */
+		memset(&(pdata->rx_error_counters), 0,
+		       sizeof(struct s_rx_error_counters));
+		buffer->len = 0;
+
+		hw_if->dev_read(pdata, qInx);
+
+		varrx_error_counters = pdata->rx_error_counters.rx_errors;
+		/* no more data to read */
+		if ((buffer->len == 0x0) && (varrx_error_counters == 0x0))
+			break;
+
+		/* assign it to new skb */
+		skb = buffer->skb;
+		/* good packet */
+		if (varrx_error_counters == 0) {
+			dev->last_rx = jiffies;
+			/* update the statistics */
+			dev->stats.rx_packets++;
+			dev->stats.rx_bytes += buffer->len;
+			pg_ch_input->ch_FramecountRx++;
+
+			dma_sync_single_for_cpu(&pdata->pdev->dev, buffer->dma,
+					DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
+#ifdef DWC_ETH_QOS_ENABLE_RX_PKT_DUMP
+			if (0 == (pg_ch_input->ch_FramecountRx % 500)) {
+				//print_pkt(skb, buffer->len, 0, (desc_data->cur_rx));
+				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+			}
+#endif
+		} else {
+			DBGPR_PG("Error in received pkt, hence failed to pass it to upper layer\n");
+			dev->stats.rx_errors++;
+			DWC_ETH_QOS_update_rx_errors(dev, varrx_error_counters);
+		}
+
+		/* Reassign same buffer pointer and give ownership to DMA */
+		//memset(buffer->skb->data, 0, buffer->len);
+		/* update buffer 1 address pointer */
+		RX_NORMAL_DESC_RDES0_Ml_Wr(RX_NORMAL_DESC->RDES0, buffer->dma);
+		/* set to zero */
+		RX_NORMAL_DESC_RDES1_Ml_Wr(RX_NORMAL_DESC->RDES1, 0);
+		/* set buffer 2 address pointer to zero */
+		RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, 0);
+		/* set control bits - OWN, INTE and BUF1V */
+		RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3, (0xc1000000));
+
+		/* update the Rx Tail Pointer Register with address of
+		 * descriptors from which data is read */
+		DMA_RDTP_RPDR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, desc_data->cur_rx));
+
+		received++;
+		INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_poll_pg_sq: received = %d\n", received);
+
+	return received;
+}
+
+/*!
+* \brief API to receiv the data from device.
+* 
+* \details This function is called from ISR upon receive interrupt.
+* This function will call other helper function to read the packets
+* from all DMA channel.
+*
+* \param[in] pdata - pointer to private data structure.
+*
+* \return void
+*/
+static void DWC_ETH_QOS_poll_pg(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	unsigned int qInx;
+	int received = 0;
+
+	DBGPR_PG("-->DWC_ETH_QOS_poll_pg\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		received = DWC_ETH_QOS_poll_pg_sq(pdata, qInx);
+		DBGPR_PG("Received %d packets from RX queue %u\n",
+			received, qInx);
+	}
+
+	/* Enable all ch RX interrupt */
+	DWC_ETH_QOS_enable_all_ch_rx_interrpt(pdata);
+
+	DBGPR_PG("<--DWC_ETH_QOS_poll_pg\n");
+}
+
+
+/*!
+* \brief API to update the tx status.
+*
+* \details This function is called from ISR upon transmit complete
+* interrupt to check the status of packet transmitted by device. It
+* also updates the private data structure fields.
+*
+* \param[in] pdata - pointer to private data structure.
+* \param[in] qInx - DMA channel number.
+*
+* \return void
+*/
+static void DWC_ETH_QOS_tx_interrupt_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				     UINT qInx)
+{
+	struct net_device *dev = pdata->dev;
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
+	    GET_TX_WRAPPER_DESC(qInx);
+	struct s_TX_NORMAL_DESC *txptr = NULL;
+	struct DWC_ETH_QOS_tx_buffer *buffer = NULL;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	int err_incremented;
+	UINT reg_tail_ptr = 0, var_tail_ptr = 0, tail_ptr = 0, head_ptr = 0;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
+		&(pdata->pg->pg_ch_input[qInx]);
+
+	DBGPR_PG("-->DWC_ETH_QOS_tx_interrupt_pg: dirty_tx = %d, qInx = %u\n",
+			desc_data->dirty_tx, qInx);
+
+	while (1) {
+		txptr = GET_TX_DESC_PTR(qInx, desc_data->dirty_tx);
+		buffer = GET_TX_BUF_PTR(qInx, desc_data->dirty_tx);
+
+		if (!hw_if->tx_complete(txptr))
+			break;
+
+#ifdef DWC_ETH_QOS_ENABLE_TX_DESC_DUMP
+		dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx,
+			     0, qInx);
+#endif
+
+		dev->stats.tx_bytes += buffer->len;
+
+		/* update the tx error if any by looking at last segment
+		 * for NORMAL descriptors
+		 * */
+		if ((hw_if->get_tx_desc_ls(txptr)) && !(hw_if->get_tx_desc_ctxt(txptr))) {
+			err_incremented = 0;
+			if (txptr->TDES3 & 0x8000)
+				dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx, 0, qInx);
+
+			if (hw_if->tx_window_error) {
+				if (hw_if->tx_window_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_window_errors++;
+				}
+			}
+			if (hw_if->tx_aborted_error) {
+				if (hw_if->tx_aborted_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_aborted_errors++;
+					if (hw_if->tx_handle_aborted_error)
+						hw_if->tx_handle_aborted_error(txptr);
+				}
+			}
+			if (hw_if->tx_carrier_lost_error) {
+				if (hw_if->tx_carrier_lost_error(txptr)) {
+					err_incremented = 1;
+					dev->stats.tx_carrier_errors++;
+				}
+			}
+			if (hw_if->tx_fifo_underrun) {
+				if (hw_if->tx_fifo_underrun(txptr)) {
+					dev->stats.tx_fifo_errors++;
+					if (hw_if->tx_update_fifo_threshold)
+						hw_if->tx_update_fifo_threshold(txptr);
+				}
+			}
+			if (hw_if->tx_get_collision_count)
+				dev->stats.collisions +=
+				    hw_if->tx_get_collision_count(txptr);
+
+			if (err_incremented == 1) {
+				dev->stats.tx_errors++;
+				printk(KERN_ALERT "Error in transmission of packet\n");
+			}
+			dev->stats.tx_packets++;
+			pg_ch_input->ch_FramecountTx++;
+		}
+		else {
+			if (!hw_if->get_tx_desc_ls(txptr))
+				printk(KERN_ALERT "LS not set for %d\n", desc_data->dirty_tx);
+			if (hw_if->get_tx_desc_ctxt(txptr))
+				printk(KERN_ALERT "Context desc in %d\n", desc_data->dirty_tx);
+		}
+
+		/* reset the descriptor so that driver/host can reuse it */
+		hw_if->tx_desc_reset(desc_data->dirty_tx, pdata, qInx);
+
+		if ((pdata->prepare_pg_packet == Y_TRUE)) {
+			if (pg_ch_input->ch_debug_mode == 0) {
+				/* reassign the same buffer pointers and make it ready for transmission */
+				DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_data->dirty_tx, qInx);
+				/* issue a poll command to Tx DMA by writing address
+				 * of next immediate free descriptor */
+				tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
+				DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
+			} else {
+				/* DEBUG ON */
+				if (pg_ch_input->ch_FramecountTx <= pg_ch_input->ch_desc_prepare) {
+					/* reassign the same buffer pointers and make it ready for transmission */
+					DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_data->dirty_tx, qInx);
+					/* issue a poll command to Tx DMA by writing address
+					* of next immediate free descriptor */
+					tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
+					DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
+				}
+			}
+		}
+
+		INCR_TX_DESC_INDEX(desc_data->dirty_tx, 1);
+	}
+
+	/* debug print */
+	if (pg_ch_input->interrupt_prints && !(pg_ch_input->tx_interrupts % 1) &&
+			(pg_ch_input->ch_FramecountTx <= 8 /*|| pg_ch_input->ch_FramecountTx >= TX_DESC_CNT*/)) {
+		var_tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
+		DMA_TDTP_TPDR_RgRd(qInx, reg_tail_ptr);
+		DMA_CHTDR_RgRd(qInx, head_ptr);
+		printk(KERN_ALERT
+				"%d] Tail @ run     [%3llu]%#x,r%#x\n"
+				"    Head @ run     [%3llu]%#x\n"
+				"    dirty_tx @ run  %d\n"
+				"    ch_FramecountTx %lu\n\n",
+				qInx,
+				GET_TX_DESC_IDX(qInx, var_tail_ptr), var_tail_ptr, reg_tail_ptr,
+				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
+				desc_data->dirty_tx,
+				pg_ch_input->ch_FramecountTx);
+		pg_ch_input->interrupt_prints--;
+	}
+	pg_ch_input->tx_interrupts++;
+
+	DBGPR_PG("<--DWC_ETH_QOS_tx_interrupt_pg\n");
+}
+
+
+static void DWC_ETH_QOS_save_abs_count(struct DWC_ETH_QOS_prv_data *pdata,
+		UINT qInx)
+{
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	ULONG varMTL_QESR = 0;
+
+	MTL_QESR_RgRd(qInx, varMTL_QESR);
+	if (varMTL_QESR & 0x1000000) {
+		switch (pg_ch_input[qInx].ch_operating_mode) {
+		case eDWC_ETH_QOS_QDCB:
+			pg_ch_input[qInx].ch_AvgBits += (varMTL_QESR & 0xffffff);
+			break;
+
+		case eDWC_ETH_QOS_QAVB:
+			// TODO: calculation pending
+			pg_ch_input[qInx].ch_AvgBits += (varMTL_QESR & 0xffffff);
+			break;
+		}
+		pg_ch_input[qInx].ch_AvgBits_interrupt_count++;
+	}
+
+	return;
+}
+
+/*!
+* \brief Interrupt Service Routine
+*
+* \details This function is invoked by Linux when there is any interrupt
+* from GMAC. This function will check for all interrupts and call
+* appropriate functions to service them.
+*
+* \param[in] irq         - interrupt number for particular device
+* \param[in] device_id   - pointer to device structure
+*
+* \return integer
+*
+* \retval IRQ_HANDLED if inerrupt is handled successfully and
+*         IRQ_NONE if interrupt is not ours.
+*/
+irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg(int irq, void *device_id)
+{
+	ULONG varDMA_ISR;
+	ULONG varDMA_SR;
+	ULONG varDMA_IER;
+	struct DWC_ETH_QOS_prv_data *pdata =
+	    (struct DWC_ETH_QOS_prv_data *)device_id;
+	UINT qInx;
+
+	DBGPR_PG("-->DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg\n");
+
+	DMA_ISR_RgRd(varDMA_ISR);
+	if (varDMA_ISR == 0x0)
+		return IRQ_NONE;
+
+	DBGPR_PG("DMA_ISR = %#lx\n", varDMA_ISR);
+
+	/* Handle DMA interrupts */
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		DMA_SR_RgRd(qInx, varDMA_SR);
+		DMA_IER_RgRd(qInx, varDMA_IER);
+
+		/* handle only those DMA interrupts which are enabled */
+		varDMA_SR = (varDMA_SR & varDMA_IER);
+
+		DBGPR_PG("DMA_SR[%d] = %#lx\n", qInx, varDMA_SR);
+
+		if (varDMA_SR == 0)
+			continue;
+
+		if (GET_VALUE(varDMA_SR, DMA_SR_TI_LPOS, DMA_SR_TI_HPOS) & 1) {
+			DWC_ETH_QOS_tx_interrupt_pg(pdata, qInx);
+			DMA_SR_TI_UdfWr(qInx, 1);
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_TPS_LPOS, DMA_SR_TPS_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_TPS;
+			printk(KERN_ALERT "%d] TPS Interrupt\n", qInx);
+			DMA_SR_TPS_UdfWr(qInx, 1);
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_TBU_LPOS, DMA_SR_TBU_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_TBU;
+			//if (pdata->prepare_pg_packet == Y_FALSE) {
+				printk(KERN_ALERT "%d] TBU Interrupt\n", qInx);
+				pdata->pg->channel_running[qInx] = Y_FALSE;
+			//}
+			DMA_SR_TBU_UdfWr(qInx, 1);
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RI_LPOS, DMA_SR_RI_HPOS) & 1) {
+			DWC_ETH_QOS_disable_all_ch_rx_interrpt(pdata);
+			DWC_ETH_QOS_poll_pg(pdata);
+			DMA_SR_RI_UdfWr(qInx, 1);
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RBU_LPOS, DMA_SR_RBU_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_RBU;
+			DMA_SR_RBU_UdfWr(qInx, 1);
+			printk(KERN_ALERT "RBU Interrupt\n");
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RPS_LPOS, DMA_SR_RPS_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_RPS;
+			DMA_SR_RPS_UdfWr(qInx, 1);
+			printk(KERN_ALERT "RPS Interrupt\n");
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_RWT_LPOS, DMA_SR_RWT_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = S_DMA_SR_RWT;
+		}
+		if (GET_VALUE(varDMA_SR, DMA_SR_FBE_LPOS, DMA_SR_FBE_HPOS) & 1) {
+			DWC_ETH_QOS_GStatus = -E_DMA_SR_FBE;
+			DMA_SR_FBE_UdfWr(qInx, 1);
+			DBGPR_PG("FATAL bus error interrupt\n");
+		}
+	}
+
+	/* MTL Interrupt handler */
+	if (GET_VALUE(varDMA_ISR, DMA_ISR_MTLIS_LPOS, DMA_ISR_MTLIS_HPOS) & 1) {
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			/* ABS Interrupt handler */
+			DWC_ETH_QOS_save_abs_count(pdata, qInx);
+		}
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg\n");
+
+	return IRQ_HANDLED;
+
+}
+
+
+/*!
+ * \brief api to initialize default values.
+ *
+ * \details This function is used to initialize differnet parameters to
+ * default values which are common parameters between Tx and Rx path.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+void DWC_ETH_QOS_default_confs(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data = NULL;
+	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data = NULL;
+	UINT qInx;
+
+	pdata->incr_incrx = DWC_ETH_QOS_INCR_ENABLE;
+	pdata->flow_ctrl = 0;
+	pdata->oldflow_ctrl = 0;
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		tx_desc_data = GET_TX_WRAPPER_DESC(qInx);
+
+		tx_desc_data->tx_threshold_val = DWC_ETH_QOS_TX_THRESHOLD_32;
+		tx_desc_data->tsf_on = DWC_ETH_QOS_TSF_ENABLE;
+		tx_desc_data->osf_on = DWC_ETH_QOS_OSF_ENABLE;
+		tx_desc_data->tx_pbl = DWC_ETH_QOS_PBL_16;
+	}
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
+		rx_desc_data = GET_RX_WRAPPER_DESC(qInx);
+
+		rx_desc_data->rx_threshold_val = DWC_ETH_QOS_RX_THRESHOLD_64;
+		rx_desc_data->rsf_on = DWC_ETH_QOS_RSF_DISABLE;
+		rx_desc_data->rx_pbl = DWC_ETH_QOS_PBL_16;
+	}
+}
+
+/*!
+* \brief API to prepare descriptor.
+*
+* \details This function is called by other driver function to prepare
+* the transmit descriptor.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] txptr   - pointer to transmit descriptor structure
+* \param[in] buffer  - pointer to transmit buffer structure
+* \param[in] i       - descriptor index
+* \param[in] qInx    - DMA channel number
+*
+* \return void
+*/
+static void DWC_ETH_QOS_prepare_desc(struct DWC_ETH_QOS_prv_data *pdata,
+				struct s_TX_NORMAL_DESC *txptr,
+				struct DWC_ETH_QOS_tx_buffer *buffer,
+				int i,
+				unsigned int qInx)
+{
+	//DBGPR_PG("-->DWC_ETH_QOS_prepare_desc\n");
+
+	/* update packet address */
+	TX_NORMAL_DESC_TDES0_Ml_Wr(txptr->TDES0, buffer->dma);
+	/* update the packet length */
+	TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Wr(txptr->TDES2, buffer->len);
+	/* update the frame length */
+	TX_NORMAL_DESC_TDES3_FL_Mlf_Wr(txptr->TDES3, buffer->len);
+	/* set Interrupt on Completion for last descriptor */
+	TX_NORMAL_DESC_TDES2_IC_Mlf_Wr(txptr->TDES2, 0x1);
+	/* Mark it as First Descriptor */
+	TX_NORMAL_DESC_TDES3_FD_Mlf_Wr(txptr->TDES3, 0x1);
+	/* Mark it as LAST descriptor */
+	TX_NORMAL_DESC_TDES3_LD_Mlf_Wr(txptr->TDES3, 0x1);
+	/* Disable CRC and Pad Insertion */
+	TX_NORMAL_DESC_TDES3_CPC_Mlf_Wr(txptr->TDES3, 0);
+	/* Mark it as NORMAL descriptor */
+	TX_NORMAL_DESC_TDES3_CTXT_Mlf_Wr(txptr->TDES3, 0);
+	/* set slot number */
+	TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_Mlf_Wr(txptr->TDES3, buffer->slot_number);
+	/* set OWN bit at end to avoid race condition */
+	TX_NORMAL_DESC_TDES3_OWN_Mlf_Wr(txptr->TDES3, 0x1);
+
+#ifdef DWC_ETH_QOS_ENABLE_TX_DESC_DUMP
+	dump_tx_desc(pdata, i, i, 1, qInx);
+#endif
+
+	//DBGPR_PG("<--DWC_ETH_QOS_prepare_desc\n");
+}
+
+
+/*!
+* \brief API to prepare tx descriptor.
+*
+* \details This function will prepare all DMA channel Tx descriptor
+* in advance before starting the Tx DMA engine.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_prepare_tx_packets_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data = NULL;
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	UINT head_ptr = 0, tail_ptr = 0, desc_ring_ptr = 0, i, qInx, frame_size;
+	unsigned short ch_tx_desc_slot_no_start = 0;
+	unsigned short ch_tx_desc_slot_no_skip = 0;
+	unsigned int tx_pkt_cnt = 0;
+	int desc_idx = 0;
+
+	DBGPR_PG("-->DWC_ETH_QOS_prepare_tx_packets_for_pg_test\n");
+
+	/* Descriptor memory allocation for transmission */
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		struct s_TX_NORMAL_DESC *txptr = NULL;
+		struct DWC_ETH_QOS_tx_buffer *buffer = NULL;
+		unsigned int *skb_data = NULL;
+		unsigned int avtype = DWC_ETH_QOS_AVTYPE;
+		int payload_cnt = 0;
+		desc_data = GET_TX_WRAPPER_DESC(qInx);
+
+		/* for channel 0 no slot number checking */
+		if (qInx > 0) {
+			ch_tx_desc_slot_no_start = pg_ch_input[qInx].ch_tx_desc_slot_no_start;
+			ch_tx_desc_slot_no_skip = pg_ch_input[qInx].ch_tx_desc_slot_no_skip;
+		}
+
+		if (pg_ch_input[qInx].ch_debug_mode == 1) {
+			DMA_CHTDR_RgRd(qInx, head_ptr);
+			desc_idx = GET_TX_DESC_IDX(qInx, head_ptr);
+			if (pg_ch_input[qInx].ch_max_tx_frame_cnt >= TX_DESC_CNT) {
+				tx_pkt_cnt = TX_DESC_CNT;
+				pg_ch_input[qInx].ch_desc_prepare =
+					(pg_ch_input[qInx].ch_max_tx_frame_cnt - TX_DESC_CNT);
+				pg_ch_input[qInx].ch_desc_prepare++;
+			}
+			else {
+				pg_ch_input[qInx].ch_desc_prepare = 0;
+				tx_pkt_cnt = (pg_ch_input[qInx].ch_max_tx_frame_cnt % TX_DESC_CNT);
+				/* DUT stops when tail & head become equal,
+					 prepare one extra packet for transmit */
+				tx_pkt_cnt++;
+			}
+		} else {
+			tx_pkt_cnt = TX_DESC_CNT;
+			desc_idx = 0;
+		}
+
+		for (i = 0; i < tx_pkt_cnt; i++) {
+			txptr = GET_TX_DESC_PTR(qInx, desc_idx);
+			buffer = GET_TX_BUF_PTR(qInx, desc_idx);
+			skb_data = (unsigned int *)buffer->skb->data;
+
+			if (!skb_data) {
+				printk(KERN_ALERT "ERROR: No SKB Allocated for channel\n");
+				break;
+			}
+
+			/* populate tx pg data */
+			frame_size = pg_ch_input[qInx].ch_frame_size;
+			if (qInx == 0) {
+				/* Add Ethernet header */
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][0];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][1];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][2];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][3];
+				/* Add payload */
+				for (payload_cnt = 0; payload_cnt < frame_size;) {
+					*skb_data++ = DWC_ETH_QOS_FRAME_PATTERN_CH[qInx];
+					/* increment by 4 since we are writing
+					 * one dword at a time */
+					payload_cnt += 4;
+				}
+				buffer->len = frame_size;
+			} else {
+				/* Add Ethernet header */
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][0];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][1];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][2];
+				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][3];
+
+				if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
+					avtype = ((avtype << 8) | (avtype >> 8)) & 0x0000FFFF;
+					*skb_data++ = (DWC_ETH_QOS_FRAME_PATTERN_CH[qInx] << 16) | avtype;
+					payload_cnt = 4;
+				} else {
+					payload_cnt = 0;
+				}
+
+				/* Add payload */
+				while (payload_cnt < frame_size) {
+					*skb_data++ = DWC_ETH_QOS_FRAME_PATTERN_CH[qInx];
+					/* increment by 4 since we are writing
+					 * one dword at a time */
+					payload_cnt += 4;
+				}
+				buffer->len = frame_size;
+			}
+
+			dma_sync_single_for_device(&pdata->pdev->dev, buffer->dma,
+					DWC_ETH_QOS_PG_FRAME_SIZE, DMA_TO_DEVICE);
+
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB &&
+					pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
+				/* slot number preparation */
+				if (ch_tx_desc_slot_no_skip != 0) {
+					if ((desc_idx % ch_tx_desc_slot_no_skip) == 0) {
+						ch_tx_desc_slot_no_start++;
+						/* max value of slot number is 15 */
+						ch_tx_desc_slot_no_start &= 0xF;
+					}
+				}
+				buffer->slot_number = ch_tx_desc_slot_no_start;
+			}
+			else {
+				buffer->slot_number = 0;
+			}
+
+			/* prepare descriptor for transmission */
+			DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_idx, qInx);
+#ifdef DWC_ETH_QOS_ENABLE_TX_PKT_DUMP
+			if (desc_idx < 1)
+				print_pkt(buffer->skb, buffer->len, 1, desc_idx);
+#endif
+			INCR_TX_DESC_INDEX(desc_idx, 1);
+		}
+
+		if (pg_ch_input[qInx].ch_debug_mode == 1) {
+			DECR_TX_DESC_INDEX(desc_idx);
+			tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_idx);
+			printk(KERN_ALERT "ch_desc_prepare     %d\n",
+					pg_ch_input[qInx].ch_desc_prepare);
+		}
+		else {
+			/* Updating tail pointer to one descriptor behind head pointer */
+			DMA_CHTDR_RgRd(qInx, head_ptr);
+			DMA_TDLAR_RgRd(qInx, desc_ring_ptr);
+			if ((head_ptr == 0) || (desc_ring_ptr == head_ptr)) {
+				tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, tx_pkt_cnt - 1);
+			}
+			else {
+				tail_ptr = (head_ptr - sizeof(struct s_TX_NORMAL_DESC));
+			}
+		}
+		DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
+		desc_data->dirty_tx = GET_TX_DESC_IDX(qInx, head_ptr);
+
+		printk(KERN_ALERT
+				"%d] Tail @ init    [%3llu]%#x\n"
+				"    Head @ init    [%3llu]%#x\n"
+				"    dirty_tx @ init %d\n\n",
+				qInx, GET_TX_DESC_IDX(qInx, tail_ptr), tail_ptr,
+				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
+				desc_data->dirty_tx);
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_prepare_tx_packets_for_pg_test\n");
+}
+
+
+/*!
+* \brief API to configure HW for PG test.
+*
+* \details This function will configures all the TX DMA channels for
+* packet generator module.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_prepare_hw_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	unsigned int qInx;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct timespec now;
+	UINT varMAC_TCR = 0;
+
+	DBGPR_PG("-->DWC_ETH_QOS_prepare_hw_for_pg_test\n");
+
+	hw_if->set_tx_rx_prio_policy(pg_struct->ch_tx_rx_arb_scheme);
+	hw_if->set_tx_rx_prio(pg_struct->ch_use_tx_high_prio);
+	hw_if->set_tx_rx_prio_ratio(pg_struct->ch_tx_rx_prio_ratio);
+	hw_if->set_dma_tx_arb_algorithm(pg_struct->dma_tx_arb_algo);
+	hw_if->set_dcb_algorithm(pg_struct->queue_dcb_algorithm);
+
+	/* Timer programming */
+	hw_if->config_sub_second_increment(DWC_ETH_QOS_SYSCLOCK);
+
+	varMAC_TCR = (MAC_TCR_TSENA | MAC_TCR_TSCTRLSSR);
+	hw_if->config_hw_time_stamping(varMAC_TCR);
+
+	getnstimeofday(&now);
+	hw_if->init_systime(now.tv_sec, now.tv_nsec);
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		hw_if->set_tx_queue_operating_mode(qInx, pg_ch_input[qInx].ch_operating_mode);
+
+		/* DCB parameters */
+		hw_if->set_dcb_queue_weight(qInx, pg_ch_input[qInx].ch_queue_weight);
+		hw_if->set_ch_arb_weights(qInx, pg_ch_input[qInx].ch_arb_weight);
+
+		/* Slot parameters */
+		hw_if->config_slot_num_check(qInx, pg_ch_input[qInx].ch_EnableSlotCheck);
+		hw_if->config_slot_interrupt(qInx, pg_ch_input[qInx].ch_EnableSlotCheck);
+		hw_if->set_slot_count(qInx, pg_ch_input[qInx].ch_SlotCount);
+		hw_if->config_advance_slot_num_check(qInx, pg_ch_input[qInx].ch_EnableAdvSlotCheck);
+
+		/* AVB parameters */
+		if ((pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) && (qInx > 0)) {
+			hw_if->set_avb_algorithm(qInx, pg_ch_input[qInx].ch_avb_algorithm);
+			if (pg_ch_input[qInx].ch_avb_algorithm == eDWC_ETH_QOS_AVB_CBS) {
+				hw_if->config_credit_control(qInx, pg_ch_input[qInx].ch_CreditControl);
+				hw_if->config_send_slope(qInx, pg_ch_input[qInx].ch_SendSlope);
+				hw_if->config_idle_slope(qInx, pg_ch_input[qInx].ch_IdleSlope);
+				hw_if->config_high_credit(qInx, pg_ch_input[qInx].ch_HiCredit);
+				hw_if->config_low_credit(qInx, pg_ch_input[qInx].ch_LoCredit);
+			}
+		}
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_prepare_hw_for_pg_test\n");
+}
+
+
+/*!
+* \brief timer function to stop tx DMA engine.
+*
+* \details This function will stop all TX DMA engine.
+*
+* \param[in] data   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_pg_timer_fun(unsigned long data)
+{
+	struct DWC_ETH_QOS_prv_data *pdata = (struct DWC_ETH_QOS_prv_data *)data;
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data = NULL;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = NULL;
+	UINT qInx, head_ptr = 0, tail_ptr = 0, dma_dsr = 0;
+
+	printk(KERN_ALERT "-->DWC_ETH_QOS_pg_timer_fun\n");
+
+	/* allow device to transmit pending prepared packets */
+	pdata->prepare_pg_packet = Y_FALSE;
+
+	mdelay(500);
+
+	DMA_DSR0_RgRd(dma_dsr);
+	printk(KERN_ALERT "DMA Channel state: %#x\n", dma_dsr);
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		pg_ch_input = &(pdata->pg->pg_ch_input[qInx]);
+		desc_data = GET_TX_WRAPPER_DESC(qInx);
+		/* disable only that channel for which ENABLE bit is set */
+		if ((pdata->pg->ch_SelMask) & (1 << qInx)) {
+			hw_if->stop_dma_tx(qInx);
+		}
+		DMA_TDTP_TPDR_RgRd(qInx, tail_ptr);
+		DMA_CHTDR_RgRd(qInx, head_ptr);
+		printk(KERN_ALERT
+				"%d] Tail @ stop     [%3llu]%#x\n"
+				"    Head @ stop     [%3llu]%#x\n"
+				"    dirty_tx @ stop  %d\n"
+				"    ch_FramecountTx  %lu\n"
+				"    Total interrupts %d\n\n",
+				qInx, GET_TX_DESC_IDX(qInx, tail_ptr), tail_ptr,
+				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
+				desc_data->dirty_tx,
+				pg_ch_input->ch_FramecountTx,
+				pg_ch_input->tx_interrupts);
+	}
+	// TODO: add code to disable slot interrupt except channel 0
+
+	pdata->run_test = Y_FALSE;
+
+	printk(KERN_ALERT "PG Experiment is completed ....\n"\
+		"You can retrieve the Report\n");
+	DBGPR_PG("PG Experiment is completed ....\n"\
+		"You can retrieve the Report\n");
+
+	printk(KERN_ALERT "<--DWC_ETH_QOS_pg_timer_fun\n");
+}
+
+
+/*!
+* \brief APT to start tx DMA engine.
+*
+* \details This function will prepare all TX DMA engine in advance
+* for data transfer and start all DMA TX engine.
+*
+* \param[in] data   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_pg_run(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned int qInx;
+
+	DBGPR_PG("-->DWC_ETH_QOS_pg_run\n");
+
+	DWC_ETH_QOS_prepare_tx_packets_for_pg_test(pdata);
+
+	pdata->run_test = Y_TRUE;
+	pdata->prepare_pg_packet = Y_TRUE;
+
+	/* start pg timer before enabling the DMA's */
+	add_timer(&pdata->pg_timer);
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		/* enable only that channel for which ENABLE bit is set */
+		if ((pdata->pg->ch_SelMask) & (1 << qInx)) {
+			pdata->pg->channel_running[qInx] = Y_TRUE;
+			hw_if->start_dma_tx(qInx);
+		}
+		else {
+			pdata->pg->channel_running[qInx] = Y_FALSE;
+		}
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_pg_run\n");
+}
+
+
+/*!
+* \brief APT to setup krnel timer function.
+*
+* \details This function setup a kernel timer function for packet
+* generator test.
+*
+* \param[in] data   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_setup_timer(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR_PG("-->DWC_ETH_QOS_setup_timer\n");
+
+	init_timer(&pdata->pg_timer);
+	pdata->pg_timer.expires = (HZ * (pdata->pg->DurationOfExp) + jiffies);
+	pdata->pg_timer.data = (unsigned long)pdata;
+	pdata->pg_timer.function = DWC_ETH_QOS_pg_timer_fun;
+
+	printk(KERN_ALERT "Test will expire at %d\n\n", (INT)pdata->pg_timer.expires);
+
+	DBGPR_PG("<--DWC_ETH_QOS_setup_timer\n");
+}
+
+
+/*!
+* \brief APT to start PG test.
+*
+* \details This function will start the packet generator test. It calls
+* other driver functions which steup kernel timer, prepares descriptor
+* and start the Tx DMA.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_pg_run_test(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR_PG("-->DWC_ETH_QOS_pg_run_test\n");
+
+	printk(KERN_ALERT "PG Experiment has started ....\n");
+	DWC_ETH_QOS_setup_timer(pdata);
+	DWC_ETH_QOS_pg_run(pdata);
+
+	DBGPR_PG("<--DWC_ETH_QOS_pg_run_test\n");
+}
+
+
+/*!
+* \brief APT to display PG data structure.
+*
+* \details This function will display the packet generator data structure
+* for debugging purpose. The display shows what are the configurations are
+* enabled in the device.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
+	unsigned int qInx;
+	char *space = "                               ", *strptr = NULL;
+	unsigned char display_avb_params = 0, display_dcb_params = 0;
+
+	DBGPR_PG("-->DWC_ETH_QOS_print_pg_struct\n");
+
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
+			display_avb_params = 1;
+			break;
+		}
+	}
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
+			display_dcb_params = 1;
+			break;
+		}
+	}
+
+	printk(KERN_ALERT "DurationOfExp                       = %#02x\n",
+		pg_struct->DurationOfExp);
+	printk(KERN_ALERT "ch_SelMask                          = %#02x\n",
+		pg_struct->ch_SelMask);
+	printk(KERN_ALERT "ch_tx_rx_arb_scheme                 = %#02x\n",
+		pg_struct->ch_tx_rx_arb_scheme);
+	printk(KERN_ALERT "Ch_use_tx_high_prio                 = %#02x\n",
+		pg_struct->ch_use_tx_high_prio);
+	printk(KERN_ALERT "ch_tx_rx_prio_ratio                 = %#02x\n",
+		pg_struct->ch_tx_rx_prio_ratio);
+	printk(KERN_ALERT "dma_tx_arb_algo                     = %#02x\n",
+			pg_struct->dma_tx_arb_algo);
+	if (display_dcb_params) {
+		switch (pg_struct->queue_dcb_algorithm) {
+			case eDWC_ETH_QOS_DCB_WRR:
+				strptr = "WRR (Weighted Round Robin)";
+				break;
+			case eDWC_ETH_QOS_DCB_WFQ:
+				strptr = "WFQ (Weighted Fair Queuing)";
+				break;
+			case eDWC_ETH_QOS_DCB_DWRR:
+				strptr = "DWRR (Deficit Weighted Round Robin)";
+				break;
+			case eDWC_ETH_QOS_DCB_SP:
+				strptr = "SP (Strict Priority)";
+				break;
+		}
+		printk(KERN_ALERT "queue_dcb_algorithm                 = %s\n",
+				strptr);
+	}
+	printk(KERN_ALERT "PrioTagForAV (not used)             = %#02x\n",
+		pg_struct->PrioTagForAV);
+
+	printk(KERN_ALERT "ch_operating_mode\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		switch (pg_ch_input[qInx].ch_operating_mode) {
+		case eDWC_ETH_QOS_QDISABLED:
+			printk(KERN_ALERT "%s[Ch%d] = Disabled\n", space, qInx);
+			break;
+		case eDWC_ETH_QOS_QAVB:
+			printk(KERN_ALERT "%s[Ch%d] = AVB\n", space, qInx);
+			break;
+		case eDWC_ETH_QOS_QDCB:
+			printk(KERN_ALERT "%s[Ch%d] = DCB\n", space, qInx);
+			break;
+		case eDWC_ETH_QOS_QGENERIC:
+			printk(KERN_ALERT "%s[Ch%d] = Generic\n", space, qInx);
+			break;
+		}
+	}
+
+	printk(KERN_ALERT "ch_arb_weight [DMA]\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
+				pg_ch_input[qInx].ch_arb_weight);
+	}
+	printk(KERN_ALERT "ch_bw\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %d%%\n", space, qInx,
+			pg_ch_input[qInx].ch_bw);
+	}
+
+	printk(KERN_ALERT "ch_queue_weight\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
+			pg_ch_input[qInx].ch_queue_weight);
+	}
+
+	printk(KERN_ALERT "ch_frame_size\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
+			pg_ch_input[qInx].ch_frame_size);
+	}
+
+	printk(KERN_ALERT "ch_EnableSlotCheck\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
+			pg_ch_input[qInx].ch_EnableSlotCheck ? "YES" : "NO");
+	}
+
+	printk(KERN_ALERT "ch_EnableAdvSlotCheck\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
+			pg_ch_input[qInx].ch_EnableAdvSlotCheck ? "YES" : "NO");
+	}
+
+	printk(KERN_ALERT "ch_SlotCount\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
+			pg_ch_input[qInx].ch_SlotCount);
+	}
+
+	printk(KERN_ALERT "ch_tx_desc_slot_no_start\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
+			pg_ch_input[qInx].ch_tx_desc_slot_no_start);
+	}
+
+	printk(KERN_ALERT "ch_tx_desc_slot_no_skip\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
+			pg_ch_input[qInx].ch_tx_desc_slot_no_skip);
+	}
+
+	printk(KERN_ALERT "ch_AvgBits\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
+			pg_ch_input[qInx].ch_AvgBits);
+	}
+
+	printk(KERN_ALERT "ch_AvgBits_interrupt_count\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
+			pg_ch_input[qInx].ch_AvgBits_interrupt_count);
+	}
+
+	if (display_avb_params) {
+		printk(KERN_ALERT "ch_avb_algorithm\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
+						(pg_ch_input[qInx].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
+						 "Strict Priority": "Credit Based Shaper"));
+		}
+
+		printk(KERN_ALERT "ch_CreditControl\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
+						pg_ch_input[qInx].ch_CreditControl ? "YES" : "NO");
+		}
+
+		printk(KERN_ALERT "ch_SendSlope\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
+						pg_ch_input[qInx].ch_SendSlope);
+		}
+
+		printk(KERN_ALERT "ch_IdleSlope\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
+						pg_ch_input[qInx].ch_IdleSlope);
+		}
+
+		printk(KERN_ALERT "ch_HiCredit\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
+						pg_ch_input[qInx].ch_HiCredit);
+		}
+
+		printk(KERN_ALERT "ch_LoCredit\n");
+		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
+				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
+						pg_ch_input[qInx].ch_LoCredit);
+		}
+	}
+
+	printk(KERN_ALERT "ch_FramecountTx\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
+			pg_ch_input[qInx].ch_FramecountTx);
+	}
+
+	printk(KERN_ALERT "ch_FramecountRx\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
+			pg_ch_input[qInx].ch_FramecountRx);
+	}
+
+	printk(KERN_ALERT "Debug mode\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[CH%d]  %s\n",
+			space, qInx, (pg_ch_input[qInx].ch_debug_mode ? "YES" : "NO"));
+	}
+
+	printk(KERN_ALERT "Maximum Tx packet count\n");
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		printk(KERN_ALERT "%s[CH%d]  %d\n",
+			space, qInx, pg_ch_input[qInx].ch_max_tx_frame_cnt);
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_print_pg_struct\n");
+}
+
+
+/*!
+* \brief APT to sync the kernel and user data structure.
+*
+* \details This function is invoked by IOCTL function when the user
+* issues a command to synchronize the user space data structure to
+* kernel space data structure.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] req   - pointer to IOCTL specific data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_pg_set_config(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_PGStruct l_pg_struct;
+	struct DWC_ETH_QOS_PGStruct *user_pg_struct =
+		(struct DWC_ETH_QOS_PGStruct *)req->ptr;
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
+		pg_struct->pg_ch_input;
+	unsigned int qInx;
+
+	DBGPR_PG("-->DWC_ETH_QOS_pg_set_config\n");
+
+	/* First, copy contents of user info in a local structure */
+	if(copy_from_user(&l_pg_struct, user_pg_struct,
+				sizeof(struct DWC_ETH_QOS_PGStruct)))
+		printk(KERN_ALERT "Failed to fetch PG Struct info from user\n");
+
+	/* Second, copy required members into kernel structure */
+	copy_PGStruct_members(pg_struct, &l_pg_struct);
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		copy_pg_ch_input_members(&(pg_ch_input[qInx]), &(l_pg_struct.pg_ch_input[qInx]));
+	}
+
+	DWC_ETH_QOS_print_pg_struct(pdata);
+
+	DBGPR_PG("<--DWC_ETH_QOS_pg_set_config\n");
+}
+
+
+/*!
+* \brief APT to sync the kernel and user data structure.
+*
+* \details This function is invoked by IOCTL function when the user
+* issue a command to get the packet generator data. This function
+* will copy kernel data structure into user data structure.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] req   - pointer to IOCTL specific data structure
+*
+* \return void
+*/
+static void DWC_ETH_QOS_pg_get_result(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req)
+{
+	struct DWC_ETH_QOS_PGStruct l_pg_struct;
+	struct DWC_ETH_QOS_PGStruct *user_pg_struct =
+		(struct DWC_ETH_QOS_PGStruct *)req->ptr;
+	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
+	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
+		pg_struct->pg_ch_input;
+	unsigned int qInx;
+
+	DBGPR_PG("-->DWC_ETH_QOS_pg_get_result\n");
+
+	copy_PGStruct_members(&l_pg_struct, pg_struct);
+	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
+		copy_pg_ch_input_members(&(l_pg_struct.pg_ch_input[qInx]), &(pg_ch_input[qInx]));
+	}
+	if (copy_to_user(user_pg_struct, &l_pg_struct, sizeof(struct DWC_ETH_QOS_PGStruct)))
+		printk(KERN_ALERT "Failed to send PG Struct info to user\n");
+
+	DBGPR_PG("<--DWC_ETH_QOS_pg_get_result\n");
+}
+
+/*!
+* \brief IOCTL function to handle user request.
+*
+* \details This function is invoked by IOCTL function when the user
+* issues a command to get the packet generator data. This function
+* will copy kernel data structure into user data structure.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] ptr   - pointer to IOCTL specific data structure
+*
+* \return zero on success and -ve number on failure.
+*/
+int DWC_ETH_QOS_handle_pg_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
+				void *ptr)
+{
+	struct ifr_data_struct *req = ptr;
+	int ret = 0;
+
+	DBGPR_PG("-->DWC_ETH_QOS_handle_pg_ioctl\n");
+
+	switch (req->flags) {
+	case DWC_ETH_QOS_PG_SET_CONFIG:
+		DWC_ETH_QOS_pg_set_config(pdata, req);
+		break;
+	case DWC_ETH_QOS_PG_CONFIG_HW:
+		DWC_ETH_QOS_prepare_hw_for_pg_test(pdata);
+		DWC_ETH_QOS_prepare_tx_packets_for_pg_test(pdata);
+		printk(KERN_ALERT "\nCONFIGURING THE HW FOR PG ....\n");
+		break;
+	case DWC_ETH_QOS_PG_RUN_TEST:
+		DWC_ETH_QOS_pg_run_test(pdata);
+		printk(KERN_ALERT "PG RUN TEST STARTED ....\n");
+		break;
+	case DWC_ETH_QOS_PG_GET_RESULT:
+		DWC_ETH_QOS_pg_get_result(pdata, req);
+		break;
+	case DWC_ETH_QOS_PG_TEST_DONE:
+		req->test_done = pdata->run_test;
+		break;
+	default:
+		printk(KERN_ALERT "Wrong Parameter for PG TEST\n");
+		ret = -EINVAL;
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_handle_pg_ioctl\n");
+
+	return ret;
+}
+
+
+/*!
+* \brief API to allocate local data structure.
+*
+* \details This function is used to allocate local data structure
+* for handling packet generator module.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return zero on success and -ve number on failure.
+*/
+int DWC_ETH_QOS_alloc_pg(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR_PG("-->DWC_ETH_QOS_alloc_pg\n");
+
+	pdata->pg = kzalloc(sizeof(struct DWC_ETH_QOS_PGStruct), GFP_KERNEL);
+	if (pdata->pg == NULL) {
+		printk(KERN_ALERT "%s:Unable to alloc pg structure\n", DEV_NAME);
+		return -ENOMEM;
+	}
+
+	DBGPR_PG("<--DWC_ETH_QOS_alloc_pg\n");
+
+	return 0;
+}
+
+
+/*!
+* \brief API to free local data structure.
+*
+* \details This function is used to free the local data structure
+* which is allocated for handling packet generator module.
+*
+* \param[in] pdata   - pointer to private data structure
+*
+* \return void
+*/
+void DWC_ETH_QOS_free_pg(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR_PG("-->DWC_ETH_QOS_free_pg\n");
+
+	//kfree(pdata->pg->pg_ch_input);
+	kfree(pdata->pg);
+
+	DBGPR_PG("<--DWC_ETH_QOS_free_pg\n");
+}
+
+
+/*!
+* \brief API to allocate tx buffer.
+*
+* \details This function is used to allocate tx buffer for data
+* transmission.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] buffer  - pointer to tx buffer data structure
+* \param[in] gfp     - type of memory allocation.
+*
+* \return zero on success and -ve number on failure.
+*/
+int DWC_ETH_QOS_alloc_tx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				struct DWC_ETH_QOS_tx_buffer *buffer,
+				gfp_t gfp)
+{
+	struct sk_buff *skb = NULL;
+
+	//DBGPR_PG("-->DWC_ETH_QOS_alloc_tx_buf_pg\n");
+
+	skb = dev_alloc_skb(DWC_ETH_QOS_PG_FRAME_SIZE);
+	if (skb == NULL) {
+		printk(KERN_ALERT "Failed to allocate tx skb\n");
+		return -ENOMEM;
+	}
+	buffer->skb = skb;
+	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
+	buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+				     DWC_ETH_QOS_PG_FRAME_SIZE, DMA_TO_DEVICE);
+	if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+		printk(KERN_ALERT "failed to do the TX dma map\n");
+
+	buffer->buf1_mapped_as_page = Y_FALSE;
+
+	//DBGPR_PG("<--DWC_ETH_QOS_alloc_tx_buf_pg\n");
+
+	return 0;
+}
+
+
+/*!
+* \brief API to allocate rx buffer.
+*
+* \details This function is used to allocate rx buffer for data
+* receive by device.
+*
+* \param[in] pdata   - pointer to private data structure
+* \param[in] buffer  - pointer to rx buffer data structure
+* \param[in] gfp     - type of memory allocation.
+*
+* \return zero on success and -ve number on failure.
+*/
+int DWC_ETH_QOS_alloc_rx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				struct DWC_ETH_QOS_rx_buffer *buffer,
+				gfp_t gfp)
+{
+	struct sk_buff *skb = NULL;
+
+	//DBGPR_PG("-->DWC_ETH_QOS_alloc_rx_buf_pg\n");
+
+	skb = dev_alloc_skb(DWC_ETH_QOS_PG_FRAME_SIZE);
+	if (skb == NULL) {
+		printk(KERN_ALERT "Failed to allocate tx skb\n");
+		return -ENOMEM;
+	}
+	buffer->skb = skb;
+	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
+	buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
+				     DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
+	if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
+		printk(KERN_ALERT "failed to do the RX dma map\n");
+
+	buffer->mapped_as_page = Y_FALSE;
+	wmb();
+
+	//DBGPR_PG("<--DWC_ETH_QOS_alloc_rx_buf_pg\n");
+
+	return 0;
+}
+
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h
new file mode 100755
index 0000000..9c30267
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h
@@ -0,0 +1,67 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS_YPG_H__
+
+#define __DWC_ETH_QOS_YPG_H__
+
+static void DWC_ETH_QOS_tx_interrupt_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				     UINT qInx);
+
+static void DWC_ETH_QOS_prepare_desc(struct DWC_ETH_QOS_prv_data *pdata,
+				struct s_TX_NORMAL_DESC *txptr,
+				struct DWC_ETH_QOS_tx_buffer *buffer,
+				int i,
+				unsigned int qInx);
+
+static int DWC_ETH_QOS_poll_pg_sq(struct DWC_ETH_QOS_prv_data *pdata,
+					unsigned int qInx);
+
+static void DWC_ETH_QOS_poll_pg(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_prepare_hw_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_pg_timer_fun(unsigned long data);
+
+static void DWC_ETH_QOS_pg_run(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_setup_timer(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_pg_run_test(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_prv_data *pdata);
+
+static void DWC_ETH_QOS_pg_set_config(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req);
+
+static void DWC_ETH_QOS_pg_get_result(struct DWC_ETH_QOS_prv_data *pdata,
+					struct ifr_data_struct *req);
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ptp.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ptp.c
new file mode 100755
index 0000000..1799324
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_ptp.c
@@ -0,0 +1,327 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+/*!@file: DWC_ETH_QOS_ptp.c
+ * @brief: Driver functions.
+ */
+#include "DWC_ETH_QOS_yheader.h"
+
+
+/*!
+ * \brief API to adjust the frequency of hardware clock.
+ *
+ * \details This function is used to adjust the frequency of the
+ * hardware clock.
+ *
+ * \param[in] ptp – pointer to ptp_clock_info structure.
+ * \param[in] delta – desired period change in parts per billion.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_adjust_freq(struct ptp_clock_info *ptp, s32 ppb)
+{
+	struct DWC_ETH_QOS_prv_data *pdata =
+		container_of(ptp, struct DWC_ETH_QOS_prv_data, ptp_clock_ops);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned long flags;
+	u64 adj;
+	u32 diff, addend;
+	int neg_adj = 0;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_adjust_freq: %d\n", ppb);
+
+	if (ppb < 0) {
+		neg_adj = 1;
+		ppb = -ppb;
+	}
+
+	addend = pdata->default_addend;
+	adj = addend;
+	adj *= ppb;
+	/*
+	 * div_u64 will divided the "adj" by "1000000000ULL"
+	 * and return the quotient.
+	 * */
+	diff = div_u64(adj, 1000000000ULL);
+	addend = neg_adj ? (addend - diff) : (addend + diff);
+
+	spin_lock_irqsave(&pdata->ptp_lock, flags);
+
+	hw_if->config_addend(addend);
+
+	spin_unlock_irqrestore(&pdata->ptp_lock, flags);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_adjust_freq\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief API to adjust the hardware time.
+ *
+ * \details This function is used to shift/adjust the time of the
+ * hardware clock.
+ *
+ * \param[in] ptp – pointer to ptp_clock_info structure.
+ * \param[in] delta – desired change in nanoseconds.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_adjust_time(struct ptp_clock_info *ptp, s64 delta)
+{
+	struct DWC_ETH_QOS_prv_data *pdata =
+		container_of(ptp, struct DWC_ETH_QOS_prv_data, ptp_clock_ops);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned long flags;
+	u32 sec, nsec;
+	u32 quotient, reminder;
+	int neg_adj = 0;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_adjust_time: delta = %lld\n", delta);
+
+	if (delta < 0) {
+		neg_adj = 1;
+		delta =-delta;
+	}
+
+	quotient = div_u64_rem(delta, 1000000000ULL, &reminder);
+	sec = quotient;
+	nsec = reminder;
+
+	spin_lock_irqsave(&pdata->ptp_lock, flags);
+
+	hw_if->adjust_systime(sec, nsec, neg_adj, pdata->one_nsec_accuracy);
+
+	spin_unlock_irqrestore(&pdata->ptp_lock, flags);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_adjust_time\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief API to get the current time.
+ *
+ * \details This function is used to read the current time from the
+ * hardware clock.
+ *
+ * \param[in] ptp – pointer to ptp_clock_info structure.
+ * \param[in] ts – pointer to hold the time/result.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_get_time(struct ptp_clock_info *ptp,
+	struct timespec *ts)
+{
+	struct DWC_ETH_QOS_prv_data *pdata =
+		container_of(ptp, struct DWC_ETH_QOS_prv_data, ptp_clock_ops);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	u64 ns;
+	u32 reminder;
+	unsigned long flags;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_get_time\n");
+
+	spin_lock_irqsave(&pdata->ptp_lock, flags);
+
+	ns = hw_if->get_systime();
+
+	spin_unlock_irqrestore(&pdata->ptp_lock, flags);
+
+	ts->tv_sec = div_u64_rem(ns, 1000000000ULL, &reminder);
+	ts->tv_nsec = reminder;
+
+	DBGPR_PTP("<--DWC_ETH_QOS_get_time: ts->tv_sec = %ld,"
+		"ts->tv_nsec = %ld\n", ts->tv_sec, ts->tv_nsec);
+
+	return 0;
+}
+
+
+/*!
+ * \brief API to set the current time.
+ *
+ * \details This function is used to set the current time on the
+ * hardware clock.
+ *
+ * \param[in] ptp – pointer to ptp_clock_info structure.
+ * \param[in] ts – time value to set.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+static int DWC_ETH_QOS_set_time(struct ptp_clock_info *ptp,
+	const struct timespec *ts)
+{
+	struct DWC_ETH_QOS_prv_data *pdata =
+		container_of(ptp, struct DWC_ETH_QOS_prv_data, ptp_clock_ops);
+	struct hw_if_struct *hw_if = &(pdata->hw_if);
+	unsigned long flags;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_set_time: ts->tv_sec = %ld,"
+		"ts->tv_nsec = %ld\n", ts->tv_sec, ts->tv_nsec);
+
+	spin_lock_irqsave(&pdata->ptp_lock, flags);
+
+	hw_if->init_systime(ts->tv_sec, ts->tv_nsec);
+
+	spin_unlock_irqrestore(&pdata->ptp_lock, flags);
+
+	DBGPR_PTP("<--DWC_ETH_QOS_set_time\n");
+
+	return 0;
+}
+
+
+/*!
+ * \brief API to enable/disable an ancillary feature.
+ *
+ * \details This function is used to enable or disable an ancillary
+ * device feature like PPS, PEROUT and EXTTS.
+ *
+ * \param[in] ptp – pointer to ptp_clock_info structure.
+ * \param[in] rq – desired resource to enable or disable.
+ * \param[in] on – caller passes one to enable or zero to disable.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve(EINVAL or EOPNOTSUPP) number on failure.
+ */
+
+static int DWC_ETH_QOS_enable(struct ptp_clock_info *ptp,
+	struct ptp_clock_request *rq, int on)
+{
+	return -EOPNOTSUPP;
+}
+
+/*
+ * structure describing a PTP hardware clock.
+ */
+static struct ptp_clock_info DWC_ETH_QOS_ptp_clock_ops = {
+	.owner = THIS_MODULE,
+	.name = "DWC_ETH_QOS_clk",
+	.max_adj = DWC_ETH_QOS_SYSCLOCK, /* the max possible frequency adjustment,
+				in parts per billion */
+	.n_alarm = 0,	/* the number of programmable alarms */
+	.n_ext_ts = 0,	/* the number of externel time stamp channels */
+	.n_per_out = 0, /* the number of programmable periodic signals */
+	.pps = 0,	/* indicates whether the clk supports a PPS callback */
+	.adjfreq = DWC_ETH_QOS_adjust_freq,
+	.adjtime = DWC_ETH_QOS_adjust_time,
+	.gettime = DWC_ETH_QOS_get_time,
+	.settime = DWC_ETH_QOS_set_time,
+	.enable = DWC_ETH_QOS_enable,
+};
+
+
+/*!
+ * \brief API to register ptp clock driver.
+ *
+ * \details This function is used to register the ptp clock
+ * driver to kernel. It also does some housekeeping work.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return int
+ *
+ * \retval 0 on success and -ve number on failure.
+ */
+
+int DWC_ETH_QOS_ptp_init(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	int ret = 0;
+
+	DBGPR_PTP("-->DWC_ETH_QOS_ptp_init\n");
+
+	if (!pdata->hw_feat.tsstssel) {
+		ret = -1;
+		pdata->ptp_clock = NULL;
+		printk(KERN_ALERT "No PTP supports in HW\n"
+			"Aborting PTP clock driver registration\n");
+		goto no_hw_ptp;
+	}
+
+	spin_lock_init(&pdata->ptp_lock);
+
+	pdata->ptp_clock_ops = DWC_ETH_QOS_ptp_clock_ops;
+
+	pdata->ptp_clock = ptp_clock_register(&pdata->ptp_clock_ops);
+	if (IS_ERR(pdata->ptp_clock)) {
+		pdata->ptp_clock = NULL;
+		printk(KERN_ALERT "ptp_clock_register() failed\n");
+	} else
+		printk(KERN_ALERT "Added PTP HW clock successfully\n");
+
+	DBGPR_PTP("<--DWC_ETH_QOS_ptp_init\n");
+
+	return ret;
+
+no_hw_ptp:
+	return ret;
+}
+
+
+/*!
+ * \brief API to unregister ptp clock driver.
+ *
+ * \details This function is used to remove/unregister the ptp
+ * clock driver from the kernel.
+ *
+ * \param[in] pdata – pointer to private data structure.
+ *
+ * \return void
+ */
+
+void DWC_ETH_QOS_ptp_remove(struct DWC_ETH_QOS_prv_data *pdata)
+{
+	DBGPR_PTP("-->DWC_ETH_QOS_ptp_remove\n");
+
+	if (pdata->ptp_clock) {
+		ptp_clock_unregister(pdata->ptp_clock);
+		printk(KERN_ALERT "Removed PTP HW clock successfully\n");
+	}
+
+	DBGPR_PTP("<--DWC_ETH_QOS_ptp_remove\n");
+}
+
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
new file mode 100755
index 0000000..6ecde26
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
@@ -0,0 +1,506 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS_YAPPHDR_H__
+
+#define __DWC_ETH_QOS_YAPPHDR_H__
+
+#define DWC_ETH_QOS_MAX_TX_QUEUE_CNT 8
+#define DWC_ETH_QOS_MAX_RX_QUEUE_CNT 8
+
+/* Private IOCTL for handling device specific task */
+#define DWC_ETH_QOS_PRV_IOCTL	SIOCDEVPRIVATE
+
+#define DWC_ETH_QOS_POWERUP_MAGIC_CMD	1
+#define DWC_ETH_QOS_POWERDOWN_MAGIC_CMD	2
+#define DWC_ETH_QOS_POWERUP_REMOTE_WAKEUP_CMD	3
+#define DWC_ETH_QOS_POWERDOWN_REMOTE_WAKEUP_CMD	4
+
+/* for TX and RX threshold configures */
+#define DWC_ETH_QOS_RX_THRESHOLD_CMD	5
+#define DWC_ETH_QOS_TX_THRESHOLD_CMD	6
+
+/* for TX and RX Store and Forward mode configures */
+#define DWC_ETH_QOS_RSF_CMD	7
+#define DWC_ETH_QOS_TSF_CMD	8
+
+/* for TX DMA Operate on Second Frame mode configures */
+#define DWC_ETH_QOS_OSF_CMD	9
+
+/* for TX and RX PBL configures */
+#define DWC_ETH_QOS_TX_PBL_CMD	10
+#define DWC_ETH_QOS_RX_PBL_CMD	11
+
+/* INCR and INCRX mode */
+#define DWC_ETH_QOS_INCR_INCRX_CMD	12
+
+/* RX/TX VLAN */
+#define DWC_ETH_QOS_RX_OUTER_VLAN_STRIPPING_CMD	13
+#define DWC_ETH_QOS_RX_INNER_VLAN_STRIPPING_CMD	14
+#define DWC_ETH_QOS_TX_VLAN_DESC_CMD	15
+#define DWC_ETH_QOS_TX_VLAN_REG_CMD	16
+
+/* SA on TX */
+#define DWC_ETH_QOS_SA0_DESC_CMD	17
+#define DWC_ETH_QOS_SA1_DESC_CMD	18
+#define DWC_ETH_QOS_SA0_REG_CMD		19
+#define DWC_ETH_QOS_SA1_REG_CMD		20
+
+/* CONTEX desc setup control */
+#define DWC_ETH_QOS_SETUP_CONTEXT_DESCRIPTOR 21
+
+/* Packet generation */
+#define DWC_ETH_QOS_PG_TEST		22
+
+/* TX/RX channel/queue count */
+#define DWC_ETH_QOS_GET_TX_QCNT		23
+#define DWC_ETH_QOS_GET_RX_QCNT		24
+
+/* Line speed */
+#define DWC_ETH_QOS_GET_CONNECTED_SPEED		25
+
+/* DCB/AVB algorithm */
+#define DWC_ETH_QOS_DCB_ALGORITHM		26
+#define DWC_ETH_QOS_AVB_ALGORITHM		27
+
+/* RX split header */
+#define DWC_ETH_QOS_RX_SPLIT_HDR_CMD		28
+
+/* L3/L4 filter */
+#define DWC_ETH_QOS_L3_L4_FILTER_CMD		29
+/* IPv4/6 and TCP/UDP filtering */
+#define DWC_ETH_QOS_IPV4_FILTERING_CMD		30
+#define DWC_ETH_QOS_IPV6_FILTERING_CMD		31
+#define DWC_ETH_QOS_UDP_FILTERING_CMD		32
+#define DWC_ETH_QOS_TCP_FILTERING_CMD		33
+/* VLAN filtering */
+#define DWC_ETH_QOS_VLAN_FILTERING_CMD		34
+/* L2 DA filtering */
+#define DWC_ETH_QOS_L2_DA_FILTERING_CMD		35
+/* ARP Offload */
+#define DWC_ETH_QOS_ARP_OFFLOAD_CMD		36
+/* for AXI PBL configures */
+#define DWC_ETH_QOS_AXI_PBL_CMD			37
+/* for AXI Write Outstanding Request Limit configures */
+#define DWC_ETH_QOS_AXI_WORL_CMD		38
+/* for AXI Read Outstanding Request Limit configures */
+#define DWC_ETH_QOS_AXI_RORL_CMD		39
+/* for MAC LOOPBACK configuration */
+#define DWC_ETH_QOS_MAC_LOOPBACK_MODE_CMD	40
+/* PFC(Priority Based Flow Control) mode */
+#define DWC_ETH_QOS_PFC_CMD			41
+
+#define DWC_ETH_QOS_RWK_FILTER_LENGTH	8
+
+/* List of command errors driver can set */
+#define	DWC_ETH_QOS_NO_HW_SUPPORT	-1
+#define	DWC_ETH_QOS_CONFIG_FAIL	-3
+#define	DWC_ETH_QOS_CONFIG_SUCCESS	0
+
+/* RX THRESHOLD operations */
+#define DWC_ETH_QOS_RX_THRESHOLD_32	0x1
+#define DWC_ETH_QOS_RX_THRESHOLD_64	0x0
+#define DWC_ETH_QOS_RX_THRESHOLD_96	0x2
+#define DWC_ETH_QOS_RX_THRESHOLD_128	0x3
+
+/* TX THRESHOLD operations */
+#define DWC_ETH_QOS_TX_THRESHOLD_32	0x1
+#define DWC_ETH_QOS_TX_THRESHOLD_64	0x0
+#define DWC_ETH_QOS_TX_THRESHOLD_96	0x2
+#define DWC_ETH_QOS_TX_THRESHOLD_128	0x3
+#define DWC_ETH_QOS_TX_THRESHOLD_192	0x4
+#define DWC_ETH_QOS_TX_THRESHOLD_256	0x5
+#define DWC_ETH_QOS_TX_THRESHOLD_384	0x6
+#define DWC_ETH_QOS_TX_THRESHOLD_512	0x7
+
+/* TX and RX Store and Forward Mode operations */
+#define DWC_ETH_QOS_RSF_DISABLE	0x0
+#define DWC_ETH_QOS_RSF_ENABLE	0x1
+
+#define DWC_ETH_QOS_TSF_DISABLE	0x0
+#define DWC_ETH_QOS_TSF_ENABLE	0x1
+
+/* TX DMA Operate on Second Frame operations */
+#define DWC_ETH_QOS_OSF_DISABLE	0x0
+#define DWC_ETH_QOS_OSF_ENABLE	0x1
+
+/* INCR and INCRX mode */
+#define DWC_ETH_QOS_INCR_ENABLE		0x1
+#define DWC_ETH_QOS_INCRX_ENABLE	0x0
+
+/* TX and RX PBL operations */
+#define DWC_ETH_QOS_PBL_1	1
+#define DWC_ETH_QOS_PBL_2	2
+#define DWC_ETH_QOS_PBL_4	4
+#define DWC_ETH_QOS_PBL_8	8
+#define DWC_ETH_QOS_PBL_16	16
+#define DWC_ETH_QOS_PBL_32	32
+#define DWC_ETH_QOS_PBL_64	64	/* 8 x 8 */
+#define DWC_ETH_QOS_PBL_128	128	/* 8 x 16 */
+#define DWC_ETH_QOS_PBL_256	256	/* 8 x 32 */
+
+/* AXI operations */
+#define DWC_ETH_QOS_AXI_PBL_4	0x2
+#define DWC_ETH_QOS_AXI_PBL_8	0x6
+#define DWC_ETH_QOS_AXI_PBL_16	0xE
+#define DWC_ETH_QOS_AXI_PBL_32	0x1E
+#define DWC_ETH_QOS_AXI_PBL_64	0x3E
+#define DWC_ETH_QOS_AXI_PBL_128	0x7E
+#define DWC_ETH_QOS_AXI_PBL_256	0xFE
+
+#define DWC_ETH_QOS_MAX_AXI_WORL 31
+#define DWC_ETH_QOS_MAX_AXI_RORL 31
+
+/* RX VLAN operations */
+/* Do not strip VLAN tag from received pkt */
+#define DWC_ETH_QOS_RX_NO_VLAN_STRIP	0x0
+/* Strip VLAN tag if received pkt pass VLAN filter */
+#define DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_PASS  0x1
+/* Strip VLAN tag if received pkt fial VLAN filter */
+#define DWC_ETH_QOS_RX_VLAN_STRIP_IF_FILTER_FAIL  0x2
+/* Strip VALN tag always from received pkt */
+#define DWC_ETH_QOS_RX_VLAN_STRIP_ALWAYS	0x3
+
+/* TX VLAN operations */
+/* Do not add a VLAN tag dring pkt transmission */
+#define DWC_ETH_QOS_TX_VLAN_TAG_NONE	0x0
+/* Remove the VLAN tag from the pkt before transmission */
+#define DWC_ETH_QOS_TX_VLAN_TAG_DELETE	0x1
+/* Insert the VLAN tag into pkt to be transmitted */
+#define DWC_ETH_QOS_TX_VLAN_TAG_INSERT	0x2
+/* Replace the VLAN tag into pkt to be transmitted */
+#define DWC_ETH_QOS_TX_VLAN_TAG_REPLACE	0x3
+
+/* RX split header operations */
+#define DWC_ETH_QOS_RX_SPLIT_HDR_DISABLE 0x0
+#define DWC_ETH_QOS_RX_SPLIT_HDR_ENABLE 0x1
+
+/* L3/L4 filter operations */
+#define DWC_ETH_QOS_L3_L4_FILTER_DISABLE 0x0
+#define DWC_ETH_QOS_L3_L4_FILTER_ENABLE 0x1
+
+/* Loopback mode */
+#define DWC_ETH_QOS_MAC_LOOPBACK_DISABLE 0x0
+#define DWC_ETH_QOS_MAC_LOOPBACK_ENABLE 0x1
+
+/* PFC(Priority Based Flow Control) mode */
+#define DWC_ETH_QOS_PFC_DISABLE 0x0
+#define DWC_ETH_QOS_PFC_ENABLE 0x1
+
+#define DWC_ETH_QOS_MAC0REG 0
+#define DWC_ETH_QOS_MAC1REG 1
+
+#define DWC_ETH_QOS_SA0_NONE		((DWC_ETH_QOS_MAC0REG << 2) | 0) /* Do not include the SA */
+#define DWC_ETH_QOS_SA0_DESC_INSERT	((DWC_ETH_QOS_MAC0REG << 2) | 1) /* Include/Insert the SA with value given in MAC Addr 0 Reg */
+#define DWC_ETH_QOS_SA0_DESC_REPLACE	((DWC_ETH_QOS_MAC0REG << 2) | 2) /* Replace the SA with the value given in MAC Addr 0 Reg */
+#define DWC_ETH_QOS_SA0_REG_INSERT	((DWC_ETH_QOS_MAC0REG << 2) | 2) /* Include/Insert the SA with value given in MAC Addr 0 Reg */
+#define DWC_ETH_QOS_SA0_REG_REPLACE	((DWC_ETH_QOS_MAC0REG << 2) | 3) /* Replace the SA with the value given in MAC Addr 0 Reg */
+
+#define DWC_ETH_QOS_SA1_NONE		((DWC_ETH_QOS_MAC1REG << 2) | 0) /* Do not include the SA */
+#define DWC_ETH_QOS_SA1_DESC_INSERT	((DWC_ETH_QOS_MAC1REG << 2) | 1) /* Include/Insert the SA with value given in MAC Addr 1 Reg */
+#define DWC_ETH_QOS_SA1_DESC_REPLACE	((DWC_ETH_QOS_MAC1REG << 2) | 2) /* Replace the SA with the value given in MAC Addr 1 Reg */
+#define DWC_ETH_QOS_SA1_REG_INSERT	((DWC_ETH_QOS_MAC1REG << 2) | 2) /* Include/Insert the SA with value given in MAC Addr 1 Reg */
+#define DWC_ETH_QOS_SA1_REG_REPLACE	((DWC_ETH_QOS_MAC1REG << 2) | 3) /* Replace the SA with the value given in MAC Addr 1 Reg */
+
+#define DWC_ETH_QOS_MAX_WFQ_WEIGHT	0X7FFF /* value for bandwidth calculation */
+
+#define DWC_ETH_QOS_MAX_INT_FRAME_SIZE (1024* 64)
+
+typedef enum {
+	eDWC_ETH_QOS_DMA_TX_FP = 0,
+	eDWC_ETH_QOS_DMA_TX_WSP = 1,
+	eDWC_ETH_QOS_DMA_TX_WRR = 2,
+} e_DWC_ETH_QOS_dma_tx_arb_algo;
+
+typedef enum {
+	eDWC_ETH_QOS_DCB_WRR = 0,
+	eDWC_ETH_QOS_DCB_WFQ = 1,
+	eDWC_ETH_QOS_DCB_DWRR = 2,
+	eDWC_ETH_QOS_DCB_SP = 3,
+} e_DWC_ETH_QOS_dcb_algorithm;
+
+typedef enum {
+	eDWC_ETH_QOS_AVB_SP = 0,
+	eDWC_ETH_QOS_AVB_CBS = 1,
+} e_DWC_ETH_QOS_avb_algorithm;
+
+typedef enum {
+	eDWC_ETH_QOS_QDISABLED = 0x0,
+	eDWC_ETH_QOS_QAVB,
+	eDWC_ETH_QOS_QDCB,
+	eDWC_ETH_QOS_QGENERIC
+} eDWC_ETH_QOS_queue_operating_mode;
+
+/* common data structure between driver and application for
+ * sharing info through ioctl
+ * */
+struct ifr_data_struct {
+	unsigned int flags;
+	unsigned int qInx; /* dma channel no to be configured */
+	unsigned int cmd;
+	unsigned int context_setup;
+	unsigned int connected_speed;
+	unsigned int rwk_filter_values[DWC_ETH_QOS_RWK_FILTER_LENGTH];
+	unsigned int rwk_filter_length;
+	int command_error;
+	int test_done;
+	void *ptr;
+};
+
+struct DWC_ETH_QOS_dcb_algorithm {
+	unsigned int qInx;
+	unsigned int algorithm;
+	unsigned int weight;
+	eDWC_ETH_QOS_queue_operating_mode op_mode;
+};
+
+struct DWC_ETH_QOS_avb_algorithm {
+	unsigned int qInx;
+	unsigned int algorithm;
+	unsigned int cc;
+	unsigned int idle_slope;
+	unsigned int send_slope;
+	unsigned int hi_credit;
+	unsigned int low_credit;
+	eDWC_ETH_QOS_queue_operating_mode op_mode;
+};
+
+struct DWC_ETH_QOS_l3_l4_filter {
+	/* 0, 1,2,3,4,5,6 or 7*/
+	int filter_no;
+	/* 0 - disable and 1 - enable */
+	int filter_enb_dis;
+	/* 0 - src addr/port and 1- dst addr/port match */
+	int src_dst_addr_match;
+	/* 0 - perfect and 1 - inverse match filtering */
+	int perfect_inverse_match;
+	/* To hold source/destination IPv4 addresses */
+	unsigned char ip4_addr[4];
+	/* holds single IPv6 addresses */
+	unsigned short ip6_addr[8];
+
+	/* TCP/UDP src/dst port number */
+	unsigned short port_no;
+};
+
+struct DWC_ETH_QOS_vlan_filter {
+	/* 0 - disable and 1 - enable */
+	int filter_enb_dis;
+	/* 0 - perfect and 1 - hash filtering */
+	int perfect_hash;
+	/* 0 - perfect and 1 - inverse matching */
+	int perfect_inverse_match;
+};
+
+struct DWC_ETH_QOS_l2_da_filter {
+	/* 0 - perfect and 1 - hash filtering */
+	int perfect_hash;
+	/* 0 - perfect and 1 - inverse matching */
+	int perfect_inverse_match;
+};
+
+struct DWC_ETH_QOS_arp_offload {
+	unsigned char ip_addr[4];
+};
+
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+
+/* uncomment below macro to enable application
+ * to record all run reports to file */
+//#define PGTEST_LOGFILE
+
+/* TX DMA CHANNEL Weights */
+#define DWC_ETH_QOS_TX_CH_WEIGHT1	0x0
+#define DWC_ETH_QOS_TX_CH_WEIGHT2	0x1
+#define DWC_ETH_QOS_TX_CH_WEIGHT3	0x2
+#define DWC_ETH_QOS_TX_CH_WEIGHT4	0x3
+#define DWC_ETH_QOS_TX_CH_WEIGHT5	0x4
+#define DWC_ETH_QOS_TX_CH_WEIGHT6	0x5
+#define DWC_ETH_QOS_TX_CH_WEIGHT7	0x6
+#define DWC_ETH_QOS_TX_CH_WEIGHT8	0x7
+
+/* PG test sub commands macro's */
+#define DWC_ETH_QOS_PG_SET_CONFIG	0x1
+#define DWC_ETH_QOS_PG_CONFIG_HW	  0x2
+#define DWC_ETH_QOS_PG_RUN_TEST		0x3
+#define DWC_ETH_QOS_PG_GET_RESULT	0x4
+#define DWC_ETH_QOS_PG_TEST_DONE	0x5
+
+
+/* DMA channel bandwidth allocation parameters */
+struct DWC_ETH_QOS_pg_user_ch_input {
+	unsigned char ch_arb_weight;	/* Channel weights(1/2/3/4/5/6/7/8) for arbitration */
+	unsigned int ch_fr_size;	/* Channel Frame size */
+	unsigned char ch_bw_alloc;	/* The percentage bandwidth allocation for ch */
+
+	unsigned char ch_use_slot_no_check;	/* Should Ch use slot number checking ? */
+	unsigned char ch_use_adv_slot_no_check;
+	unsigned char ch_slot_count_to_use;	/* How many slot used to report pg bits per slot value */
+
+	unsigned char ch_use_credit_shape;	/* Should Ch use Credid shape algorithm for traffic shaping ? */
+	unsigned char ch_CreditControl;	/* Sould Ch use Credit Control algorithm for traffic shaping ? */
+
+	unsigned char ch_tx_desc_slot_no_start;
+	unsigned char ch_tx_desc_slot_no_skip;
+	unsigned char ch_operating_mode;
+	unsigned long ch_AvgBits;
+	unsigned long ch_AvgBits_interrupt_count;
+	unsigned char ch_avb_algorithm;
+	unsigned char ch_debug_mode; /* enable/disable debug mode */
+	unsigned int ch_max_tx_frame_cnt; /* maximum pkts to be sent on this channel, can be used for debug purpose */
+};
+
+struct DWC_ETH_QOS_pg_user_input {
+	unsigned char duration_of_exp;
+	/* enable bits for DMA. bit0=>ch0, bit1=>ch1, bit2=>ch2 */
+	unsigned char dma_ch_en;
+
+	unsigned char ch_tx_rx_arb_scheme;	/* Should Ch use Weighted RR policy with Rx:Tx/Tx:Rx or Fixed Priority */
+	unsigned char ch_use_tx_high_prio;	/* Should Ch Tx have High priority over Rx */
+	unsigned char ch_tx_rx_prio_ratio;	/* For RR what is the ratio between Tx:Rx/Rx:Tx */
+	unsigned char dma_tx_arb_algo; /* Refer DMA Mode register TAA field */
+
+	unsigned char queue_dcb_algorithm;
+
+	struct DWC_ETH_QOS_pg_user_ch_input ch_input[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
+};
+
+#define copy_pg_ch_input_members(to, from) do { \
+	(to)->interrupt_prints = (from)->interrupt_prints; \
+	(to)->tx_interrupts = (from)->tx_interrupts; \
+	(to)->ch_arb_weight = (from)->ch_arb_weight; \
+	(to)->ch_queue_weight = (from)->ch_queue_weight; \
+	(to)->ch_bw = (from)->ch_bw; \
+	(to)->ch_frame_size = (from)->ch_frame_size; \
+	(to)->ch_EnableSlotCheck = (from)->ch_EnableSlotCheck; \
+	(to)->ch_EnableAdvSlotCheck = (from)->ch_EnableAdvSlotCheck; \
+	(to)->ch_avb_algorithm = (from)->ch_avb_algorithm; \
+	(to)->ch_SlotCount = (from)->ch_SlotCount; \
+	(to)->ch_AvgBits = (from)->ch_AvgBits; \
+	(to)->ch_AvgBits_interrupt_count = (from)->ch_AvgBits_interrupt_count; \
+	(to)->ch_CreditControl = (from)->ch_CreditControl; \
+	(to)->ch_tx_desc_slot_no_start = (from)->ch_tx_desc_slot_no_start; \
+	(to)->ch_tx_desc_slot_no_skip = (from)->ch_tx_desc_slot_no_skip; \
+	(to)->ch_SendSlope = (from)->ch_SendSlope; \
+	(to)->ch_IdleSlope = (from)->ch_IdleSlope; \
+	(to)->ch_HiCredit = (from)->ch_HiCredit; \
+	(to)->ch_LoCredit = (from)->ch_LoCredit; \
+	(to)->ch_FramecountTx = (from)->ch_FramecountTx; \
+	(to)->ch_FramecountRx = (from)->ch_FramecountRx; \
+	(to)->ch_operating_mode = (from)->ch_operating_mode; \
+	(to)->ch_debug_mode = (from)->ch_debug_mode;\
+	(to)->ch_max_tx_frame_cnt = (from)->ch_max_tx_frame_cnt;\
+} while (0)
+
+struct DWC_ETH_QOS_pg_ch_input {
+	unsigned int interrupt_prints;
+	unsigned int tx_interrupts;
+	unsigned char ch_arb_weight;
+	unsigned int ch_queue_weight;
+	unsigned char ch_bw;
+	unsigned int ch_frame_size;
+	unsigned char ch_EnableSlotCheck;	/* Enable checking of slot numbers programmed in the Tx Desc */
+	unsigned char ch_EnableAdvSlotCheck;	/* When Set Data fetched for current slot and for next 2 slots in advance
+						When reset data fetched for current slot and in advance for next slot*/
+
+	unsigned char ch_avb_algorithm;
+	unsigned char ch_SlotCount;	/* Over which transmiteed bits per slot needs to be computed (Only for Credit based shaping) */
+	unsigned long ch_AvgBits;
+	unsigned long ch_AvgBits_interrupt_count;
+
+	unsigned char ch_CreditControl;	/* Will be zero (Not used) */
+
+	unsigned char ch_tx_desc_slot_no_start;
+	unsigned char ch_tx_desc_slot_no_skip;
+
+	unsigned int ch_SendSlope;
+	unsigned int ch_IdleSlope;
+	unsigned int ch_HiCredit;
+	unsigned int ch_LoCredit;
+
+	unsigned long ch_FramecountTx;	/* No of Frames Transmitted on Channel 1 */
+	unsigned long ch_FramecountRx;	/* No of Frames Received on Channel 1 */
+	unsigned char ch_operating_mode;
+
+	unsigned char ch_debug_mode; /* enable/disable debug mode */
+	unsigned int ch_max_tx_frame_cnt; /* maximum pkts to be sent on this channel, can be used for debug purpose */
+	unsigned int ch_desc_prepare; /* max packets which will be reprepared in Tx-interrupt
+ 																	 do not copy contents to app-copy, only driver should use this variable*/
+};
+
+#define copy_PGStruct_members(to, from)	do { \
+	(to)->ch_SelMask = (from)->ch_SelMask; \
+	(to)->DurationOfExp = (from)->DurationOfExp; \
+	(to)->PrioTagForAV = (from)->PrioTagForAV; \
+	(to)->queue_dcb_algorithm = (from)->queue_dcb_algorithm; \
+	(to)->ch_tx_rx_arb_scheme = (from)->ch_tx_rx_arb_scheme; \
+	(to)->ch_use_tx_high_prio = (from)->ch_use_tx_high_prio; \
+	(to)->ch_tx_rx_prio_ratio = (from)->ch_tx_rx_prio_ratio; \
+	(to)->dma_tx_arb_algo = (from)->dma_tx_arb_algo; \
+} while (0)
+
+struct DWC_ETH_QOS_PGStruct {
+	/* This gives which DMA channel is enabled and which is disabled
+	 * Bit0 for Ch0
+	 * Bit1 for Ch1
+	 * Bit2 for Ch2 and so on
+	 * Bit7 for Ch7
+	 * */
+	unsigned char ch_SelMask;
+
+	/* Duration for which experiment should be conducted in minutes - Default 2 Minutes */
+	unsigned char DurationOfExp;
+
+	/* Used when more than One channel enabled in Rx path (Not Used)
+	 * for only CH1 Enabled:
+	 * Frames sith Priority > Value programmed, frames sent to CH1
+	 * Frames with priority < Value programmed are sent to CH0
+	 *
+	 * For both CH1 and CH2 Enabled:
+	 * Frames sith Priority > Value programmed, frames sent to CH2
+	 * Frames with priority < Value programmed are sent to CH
+	 * */
+	unsigned char PrioTagForAV;
+
+	unsigned char queue_dcb_algorithm;
+
+	unsigned char ch_tx_rx_arb_scheme;	/* Should Ch use Weighted RR policy with Rx:Tx/Tx:Rx or Fixed Priority */
+	unsigned char ch_use_tx_high_prio;	/* Should Ch Tx have High priority over Rx */
+	unsigned char ch_tx_rx_prio_ratio;	/* For RR what is the ratio between Tx:Rx/Rx:Tx */
+	unsigned char dma_tx_arb_algo; /* Refer DMA Mode register TAA field */
+
+	struct DWC_ETH_QOS_pg_ch_input pg_ch_input[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
+	unsigned char channel_running[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
+};
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
new file mode 100755
index 0000000..cb04680
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -0,0 +1,1407 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS__YHEADER__
+
+#define __DWC_ETH_QOS__YHEADER__
+
+/* OS Specific declarations and definitions */
+
+#include <linux/slab.h>
+#include <linux/mm.h>
+#include <linux/uaccess.h>
+#include <linux/string.h>
+#include <linux/cdev.h>
+
+#include <linux/pci.h>
+#include <linux/timer.h>
+#include <linux/sched.h>
+#include <linux/highmem.h>
+#include <linux/proc_fs.h>
+#include <linux/in.h>
+#include <linux/ctype.h>
+#include <linux/version.h>
+#include <linux/ptrace.h>
+#include <linux/dma-mapping.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/ethtool.h>
+#include <linux/skbuff.h>
+#include <linux/delay.h>
+#include <linux/spinlock.h>
+#include <linux/crc32.h>
+#include <linux/bitops.h>
+#include <linux/mii.h>
+#include <asm/processor.h>
+#include <asm/dma.h>
+#include <asm/page.h>
+#include <asm/irq.h>
+#include <net/checksum.h>
+#include <linux/tcp.h>
+#include <linux/ip.h>
+#include <linux/ipv6.h>
+#include <linux/inet_lro.h>
+#include <linux/semaphore.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/phy.h>
+#include <linux/mdio.h>
+#include <linux/if_vlan.h>
+#if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
+#define DWC_ETH_QOS_ENABLE_VLAN_TAG
+#endif
+/* for PPT */
+#include <linux/net_tstamp.h>
+#include <linux/ptp_clock_kernel.h>
+#include <linux/clocksource.h>
+
+/* Macro definitions*/
+
+#include <asm-generic/errno.h>
+
+#ifdef CONFIG_PGTEST_OBJ
+#define DWC_ETH_QOS_CONFIG_PGTEST
+#endif
+
+#ifdef CONFIG_PTPSUPPORT_OBJ
+#define DWC_ETH_QOS_CONFIG_PTP
+#endif
+
+#ifdef CONFIG_DEBUGFS_OBJ
+#define DWC_ETH_QOS_CONFIG_DEBUGFS
+#endif
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+
+#define DWC_ETH_QOS_DA_SA 12
+#define DWC_ETH_QOS_TYPE 2
+#define DWC_ETH_QOS_VLAN_TAG 4
+#define DWC_ETH_QOS_ETH_HDR_AVB (DWC_ETH_QOS_DA_SA + \
+		DWC_ETH_QOS_TYPE + \
+		DWC_ETH_QOS_VLAN_TAG)
+
+#define DWC_ETH_QOS_PG_FRAME_SIZE (pdata->dev->mtu + DWC_ETH_QOS_ETH_HDR_AVB)
+#define DWC_ETH_QOS_AVTYPE 0x22f0
+
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+/* NOTE: Uncomment below line for TX and RX DESCRIPTOR DUMP in KERNEL LOG */
+//#define DWC_ETH_QOS_ENABLE_TX_DESC_DUMP
+//#define DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
+
+/* NOTE: Uncomment below line for TX and RX PACKET DUMP in KERNEL LOG */
+//#define DWC_ETH_QOS_ENABLE_TX_PKT_DUMP
+//#define DWC_ETH_QOS_ENABLE_RX_PKT_DUMP
+
+/* Uncomment below macro definitions for testing corresponding IP features in driver */
+//#define DWC_ETH_QOS_QUEUE_SELECT_ALGO
+//#define DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+//#define DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+#define DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+
+#ifdef DWC_ETH_QOS_CONFIG_PTP
+#undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+#endif
+
+/* Uncomment below macro to test EEE feature Tx path with
+ * no EEE supported PHY card
+ * */
+//#define DWC_ETH_QOS_CUSTOMIZED_EEE_TEST
+
+#ifdef DWC_ETH_QOS_CUSTOMIZED_EEE_TEST
+#undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+#endif
+
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+#undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+#endif
+
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
+#define DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+#endif
+
+#ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
+#undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
+#endif
+
+/* NOTE: Uncomment below line for function trace log messages in KERNEL LOG */
+//#define YDEBUG
+//#define YDEBUG_PG
+//#define YDEBUG_MDIO
+//#define YDEBUG_PTP
+//#define YDEBUG_FILTER
+//#define YDEBUG_EEE
+
+#define Y_TRUE 1
+#define Y_FALSE 0
+#define Y_SUCCESS 0
+#define Y_FAILURE 1
+#define Y_INV_WR 1
+#define Y_INV_RD 2
+#define Y_INV_ARG 3
+#define Y_MAX_THRD_XEEDED 4
+
+/* The following macros map error macros to POSIX errno values */
+#define ERR_READ_TIMEOUT ETIME
+#define ERR_WRITE_TIMEOUT ETIME
+#define ERR_FIFO_READ_FAILURE EIO
+#define ERR_FIFO_WRITE_FAILURE EIO
+#define ERR_READ_OVRFLW ENOBUFS
+#define ERR_READ_UNDRFLW ENODATA
+#define ERR_WRITE_OVRFLW ENOBUFS
+#define ERR_WRITE_UNDRFLW ENODATA
+
+/* Helper macros for STANDARD VIRTUAL register handling */
+
+#define GET_TX_ERROR_COUNTERS_PTR (&(pdata->tx_error_counters))
+
+#define GET_RX_ERROR_COUNTERS_PTR (&(pdata->rx_error_counters))
+
+#define GET_RX_PKT_FEATURES_PTR (&(pdata->rx_pkt_features))
+
+#define GET_TX_PKT_FEATURES_PTR (&(pdata->tx_pkt_features))
+
+#define MASK (0x1ULL << 0 | \
+	0x13c7ULL << 32)
+#define MAC_MASK (0x10ULL << 0)
+#define TX_DESC_CNT 256
+#define RX_DESC_CNT 256
+#define MIN_RX_DESC_CNT 16
+#define TX_BUF_SIZE 1536
+#define RX_BUF_SIZE 1568
+#define DWC_ETH_QOS_MAX_LRO_DESC 16
+#define DWC_ETH_QOS_MAX_LRO_AGGR 32
+
+#define MIN_PACKET_SIZE 60
+
+/*
+#ifdef DWC_ETH_QOS_ENABLE_VLAN_TAG
+#define MAX_PACKET_SIZE VLAN_ETH_FRAME_LEN
+#else
+#define MAX_PACKET_SIZE 1514
+#endif
+*/
+
+/* RX header size for split header */
+#define DWC_ETH_QOS_HDR_SIZE_64B   64   /* 64 bytes */
+#define DWC_ETH_QOS_HDR_SIZE_128B  128  /* 128 bytes */
+#define DWC_ETH_QOS_HDR_SIZE_256B  256  /* 256 bytes */
+#define DWC_ETH_QOS_HDR_SIZE_512B  512  /* 512 bytes */
+#define DWC_ETH_QOS_HDR_SIZE_1024B 1024 /* 1024 bytes */
+
+#define DWC_ETH_QOS_MAX_HDR_SIZE DWC_ETH_QOS_HDR_SIZE_256B
+
+#define MAX_MULTICAST_LIST 14
+#define RX_DESC_DATA_LENGTH_LBIT 0
+#define RX_DESC_DATA_LENGTH 0x7fff
+#define DWC_ETH_QOS_TX_FLAGS_IP_PKT 0x00000001
+#define DWC_ETH_QOS_TX_FLAGS_TCP_PKT 0x00000002
+
+#define DEV_NAME "DWC_ETH_QOS"
+#define DEV_ADDRESS 0xffffffff
+#define DEV_REG_MMAP_SIZE 0x14e8
+
+#define VENDOR_ID 0x8086
+#define DEVICE_ID 0x2BE8
+#define PCI_BAR_NO 0
+#define COMPLETE_BAR 0
+
+/* MII/GMII register offset */
+#define DWC_ETH_QOS_AUTO_NEGO_NP    0x0007
+#define DWC_ETH_QOS_PHY_CTL     0x0010
+#define DWC_ETH_QOS_PHY_STS     0x0011
+
+/* Default MTL queue operation mode values */
+#define DWC_ETH_QOS_Q_DISABLED	0x0
+#define DWC_ETH_QOS_Q_AVB 			0x1
+#define DWC_ETH_QOS_Q_DCB 			0x2
+#define DWC_ETH_QOS_Q_GENERIC 	0x3
+
+/* Driver PMT macros */
+#define DWC_ETH_QOS_DRIVER_CONTEXT 1
+#define DWC_ETH_QOS_IOCTL_CONTEXT 2
+#define DWC_ETH_QOS_MAGIC_WAKEUP	(1 << 0)
+#define DWC_ETH_QOS_REMOTE_WAKEUP	(1 << 1)
+#define DWC_ETH_QOS_POWER_DOWN_TYPE(x)	\
+		((x->power_down_type & DWC_ETH_QOS_MAGIC_WAKEUP) ? \
+		"Magic packet" : \
+		((x->power_down_type & DWC_ETH_QOS_REMOTE_WAKEUP) ? \
+		"Remote wakeup packet" : \
+		"<error>"))
+
+#define DWC_ETH_QOS_MAC_ADDR_LEN 6
+#define DWC_ETH_QOS_ETH_FRAME_LEN (ETH_FRAME_LEN + ETH_FCS_LEN + VLAN_HLEN)
+
+#define FIFO_SIZE_B(x) (x)
+#define FIFO_SIZE_KB(x) (x*1024)
+
+//#define DWC_ETH_QOS_MAX_DATA_PER_TX_BUF (1 << 13)     /* 8 KB Maximum data per buffer pointer(in Bytes) */
+#define DWC_ETH_QOS_MAX_DATA_PER_TX_BUF (1 << 12)	/* for testing purpose: 4 KB Maximum data per buffer pointer(in Bytes) */
+#define DWC_ETH_QOS_MAX_DATA_PER_TXD (DWC_ETH_QOS_MAX_DATA_PER_TX_BUF * 2)	/* Maxmimum data per descriptor(in Bytes) */
+
+#define DWC_ETH_QOS_MAX_SUPPORTED_MTU 16380
+#define DWC_ETH_QOS_MAX_GPSL 9000 /* Default maximum Gaint Packet Size Limit */
+#define DWC_ETH_QOS_MIN_SUPPORTED_MTU (ETH_ZLEN + ETH_FCS_LEN + VLAN_HLEN)
+
+#define DWC_ETH_QOS_RDESC3_OWN	0x80000000
+#define DWC_ETH_QOS_RDESC3_FD		0x20000000
+#define DWC_ETH_QOS_RDESC3_LD		0x10000000
+#define DWC_ETH_QOS_RDESC3_RS2V	0x08000000
+#define DWC_ETH_QOS_RDESC3_RS1V	0x04000000
+#define DWC_ETH_QOS_RDESC3_RS0V	0x02000000
+#define DWC_ETH_QOS_RDESC3_LT		0x00070000
+#define DWC_ETH_QOS_RDESC3_ES		0x00008000
+#define DWC_ETH_QOS_RDESC3_PL		0x00007FFF
+
+#define DWC_ETH_QOS_RDESC2_HL	0x000003FF
+
+#define DWC_ETH_QOS_RDESC1_PT		0x00000007 /* Payload type */
+#define DWC_ETH_QOS_RDESC1_PT_TCP	0x00000002 /* Payload type = TCP */
+
+/* Maximum size of pkt that is copied to a new buffer on receive */
+#define DWC_ETH_QOS_COPYBREAK_DEFAULT 256
+#define DWC_ETH_QOS_SYSCLOCK	62500000 /* System clock is 62.5MHz */
+#define DWC_ETH_QOS_SYSTIMEPERIOD	16 /* System time period is 16ns */
+
+#define DWC_ETH_QOS_TX_QUEUE_CNT (pdata->tx_queue_cnt)
+#define DWC_ETH_QOS_RX_QUEUE_CNT (pdata->rx_queue_cnt)
+#define DWC_ETH_QOS_QUEUE_CNT min(DWC_ETH_QOS_TX_QUEUE_CNT, DWC_ETH_QOS_RX_QUEUE_CNT)
+
+/* Helper macros for TX descriptor handling */
+
+#define GET_TX_QUEUE_PTR(qInx) (&(pdata->tx_queue[(qInx)]))
+
+#define GET_TX_DESC_PTR(qInx, dInx) (pdata->tx_queue[(qInx)].tx_desc_data.tx_desc_ptrs[(dInx)])
+
+#define GET_TX_DESC_DMA_ADDR(qInx, dInx) (pdata->tx_queue[(qInx)].tx_desc_data.tx_desc_dma_addrs[(dInx)])
+
+#define GET_TX_WRAPPER_DESC(qInx) (&(pdata->tx_queue[(qInx)].tx_desc_data))
+
+#define GET_TX_BUF_PTR(qInx, dInx) (pdata->tx_queue[(qInx)].tx_desc_data.tx_buf_ptrs[(dInx)])
+
+#define INCR_TX_DESC_INDEX(inx, offset) do {\
+	(inx) += (offset);\
+	if ((inx) >= TX_DESC_CNT)\
+		(inx) = ((inx) - TX_DESC_CNT);\
+} while (0)
+
+#define DECR_TX_DESC_INDEX(inx) do {\
+  (inx)--;\
+  if ((inx) < 0)\
+    (inx) = (TX_DESC_CNT + (inx));\
+} while (0)
+
+#define INCR_TX_LOCAL_INDEX(inx, offset)\
+	(((inx) + (offset)) >= TX_DESC_CNT ?\
+	((inx) + (offset) - TX_DESC_CNT) : ((inx) + (offset)))
+
+#define GET_CURRENT_XFER_DESC_CNT(qInx) (pdata->tx_queue[(qInx)].tx_desc_data.packet_count)
+
+#define GET_CURRENT_XFER_LAST_DESC_INDEX(qInx, start_index, offset)\
+	(GET_CURRENT_XFER_DESC_CNT((qInx)) == 0) ? (TX_DESC_CNT - 1) :\
+	((GET_CURRENT_XFER_DESC_CNT((qInx)) == 1) ? (INCR_TX_LOCAL_INDEX((start_index), (offset))) :\
+	INCR_TX_LOCAL_INDEX((start_index), (GET_CURRENT_XFER_DESC_CNT((qInx)) + (offset) - 1)))
+
+#define GET_TX_TOT_LEN(buffer, start_index, packet_count, total_len) do {\
+  int i, pkt_idx = (start_index);\
+  for(i = 0; i < (packet_count); i++) {\
+    (total_len) += ((buffer)[pkt_idx].len + (buffer)[pkt_idx].len2);\
+    pkt_idx = INCR_TX_LOCAL_INDEX(pkt_idx, 1);\
+  } \
+} while (0)
+
+/* Helper macros for RX descriptor handling */
+
+#define GET_RX_QUEUE_PTR(qInx) (&(pdata->rx_queue[(qInx)]))
+
+#define GET_RX_DESC_PTR(qInx, dInx) (pdata->rx_queue[(qInx)].rx_desc_data.rx_desc_ptrs[(dInx)])
+
+#define GET_RX_DESC_DMA_ADDR(qInx, dInx) (pdata->rx_queue[(qInx)].rx_desc_data.rx_desc_dma_addrs[(dInx)])
+
+#define GET_RX_WRAPPER_DESC(qInx) (&(pdata->rx_queue[(qInx)].rx_desc_data))
+
+#define GET_RX_BUF_PTR(qInx, dInx) (pdata->rx_queue[(qInx)].rx_desc_data.rx_buf_ptrs[(dInx)])
+
+#define INCR_RX_DESC_INDEX(inx, offset) do {\
+  (inx) += (offset);\
+  if ((inx) >= RX_DESC_CNT)\
+    (inx) = ((inx) - RX_DESC_CNT);\
+} while (0)
+
+#define DECR_RX_DESC_INDEX(inx) do {\
+	(inx)--;\
+	if ((inx) < 0)\
+		(inx) = (RX_DESC_CNT + (inx));\
+} while (0)
+
+#define INCR_RX_LOCAL_INDEX(inx, offset)\
+	(((inx) + (offset)) >= RX_DESC_CNT ?\
+	((inx) + (offset) - RX_DESC_CNT) : ((inx) + (offset)))
+
+#define GET_CURRENT_RCVD_DESC_CNT(qInx) (pdata->rx_queue[(qInx)].rx_desc_data.pkt_received)
+
+#define GET_CURRENT_RCVD_LAST_DESC_INDEX(start_index, offset) (RX_DESC_CNT - 1)
+
+#define GET_TX_DESC_IDX(qInx, desc) (((desc) - GET_TX_DESC_DMA_ADDR((qInx), 0))/(sizeof(struct s_TX_NORMAL_DESC)))
+
+#define GET_RX_DESC_IDX(qInx, desc) (((desc) - GET_RX_DESC_DMA_ADDR((qInx), 0))/(sizeof(struct s_RX_NORMAL_DESC)))
+
+/* Helper macro for handling coalesce parameters via ethtool */
+/* Obtained by trial and error  */
+#define DWC_ETH_QOS_OPTIMAL_DMA_RIWT_USEC  124
+/* Max delay before RX interrupt after a pkt is received Max
+ * delay in usecs is 1020 for 62.5MHz device clock */
+#define DWC_ETH_QOS_MAX_DMA_RIWT  0xff
+/* Max no of pkts to be received before an RX interrupt */
+#define DWC_ETH_QOS_RX_MAX_FRAMES 16
+
+#define DMA_SBUS_AXI_PBL_MASK 0xFE
+
+/* Helper macros for handling receive error */
+#define DWC_ETH_QOS_RX_LENGTH_ERR        0x00000001
+#define DWC_ETH_QOS_RX_BUF_OVERFLOW_ERR  0x00000002
+#define DWC_ETH_QOS_RX_CRC_ERR           0x00000004
+#define DWC_ETH_QOS_RX_FRAME_ERR         0x00000008
+#define DWC_ETH_QOS_RX_FIFO_OVERFLOW_ERR 0x00000010
+#define DWC_ETH_QOS_RX_MISSED_PKT_ERR    0x00000020
+
+#define DWC_ETH_QOS_RX_CHECKSUM_DONE 0x00000001
+#define DWC_ETH_QOS_RX_VLAN_PKT      0x00000002
+
+/* MAC Time stamp contorl reg bit fields */
+#define MAC_TCR_TSENA         0x00000001 /* Enable timestamp */
+#define MAC_TCR_TSCFUPDT      0x00000002 /* Enable Fine Timestamp Update */
+#define MAC_TCR_TSENALL       0x00000100 /* Enable timestamping for all packets */
+#define MAC_TCR_TSCTRLSSR     0x00000200 /* Enable Timestamp Digitla Contorl (1ns accuracy )*/
+#define MAC_TCR_TSVER2ENA     0x00000400 /* Enable PTP packet processing for Version 2 Formate */
+#define MAC_TCR_TSIPENA       0x00000800 /* Enable processing of PTP over Ethernet Packets */
+#define MAC_TCR_TSIPV6ENA     0x00001000 /* Enable processing of PTP Packets sent over IPv6-UDP Packets */
+#define MAC_TCR_TSIPV4ENA     0x00002000 /* Enable processing of PTP Packets sent over IPv4-UDP Packets */
+#define MAC_TCR_TSEVENTENA    0x00004000 /* Enable Timestamp Snapshot for Event Messages */
+#define MAC_TCR_TSMASTERENA   0x00008000 /* Enable snapshot for Message Relevent to Master */
+#define MAC_TCR_SNAPTYPSEL_1  0x00010000 /* select PTP packets for taking snapshots */
+#define MAC_TCR_SNAPTYPSEL_2  0x00020000
+#define MAC_TCR_SNAPTYPSEL_3  0x00030000
+#define MAC_TCR_AV8021ASMEN   0x10000000 /* Enable AV 802.1AS Mode */
+
+/* Hash Table Reg count */
+#define DWC_ETH_QOS_HTR_CNT (pdata->max_hash_table_size/32)
+
+/* For handling VLAN filtering */
+#define DWC_ETH_QOS_VLAN_PERFECT_FILTERING 0
+#define DWC_ETH_QOS_VLAN_HASH_FILTERING 1
+
+/* For handling differnet PHY interfaces */
+#define DWC_ETH_QOS_GMII_MII	0x0
+#define DWC_ETH_QOS_RGMII	0x1
+#define DWC_ETH_QOS_SGMII	0x2
+#define DWC_ETH_QOS_TBI		0x3
+#define DWC_ETH_QOS_RMII	0x4
+#define DWC_ETH_QOS_RTBI	0x5
+#define DWC_ETH_QOS_SMII	0x6
+#define DWC_ETH_QOS_RevMII	0x7
+
+/* for EEE */
+#define DWC_ETH_QOS_DEFAULT_LPI_LS_TIMER 0x3E8 /* 1000 in decimal */
+#define DWC_ETH_QOS_DEFAULT_LPI_TWT_TIMER 0x0
+
+#define DWC_ETH_QOS_DEFAULT_LPI_TIMER 1000 /* LPI Tx local expiration time in msec */
+#define DWC_ETH_QOS_LPI_TIMER(x) (jiffies + msecs_to_jiffies(x))
+
+/* Error and status macros defined below */
+
+#define E_DMA_SR_TPS        6
+#define E_DMA_SR_TBU        7
+#define E_DMA_SR_RBU        8
+#define E_DMA_SR_RPS        9
+#define S_DMA_SR_RWT        2
+#define E_DMA_SR_FBE       10
+#define S_MAC_ISR_PMTIS     11
+
+/* C data types typedefs */
+
+typedef unsigned short BOOL;
+typedef char CHAR;
+typedef char *CHARP;
+typedef double DOUBLE;
+typedef double *DOUBLEP;
+typedef float FLOAT;
+typedef float *FLOATP;
+typedef int INT;
+typedef int *INTP;
+typedef long LONG;
+typedef long *LONGP;
+typedef short SHORT;
+typedef short *SHORTP;
+typedef unsigned UINT;
+typedef unsigned *UINTP;
+typedef unsigned char UCHAR;
+typedef unsigned char *UCHARP;
+typedef unsigned long ULONG;
+typedef unsigned long *ULONGP;
+typedef unsigned long long ULONG_LONG;
+typedef unsigned short USHORT;
+typedef unsigned short *USHORTP;
+typedef void VOID;
+typedef void *VOIDP;
+
+struct s_RX_CONTEXT_DESC {
+	UINT RDES0;
+	UINT RDES1;
+	UINT RDES2;
+	UINT RDES3;
+};
+
+typedef struct s_RX_CONTEXT_DESC t_RX_CONTEXT_DESC;
+
+struct s_TX_CONTEXT_DESC {
+	UINT TDES0;
+	UINT TDES1;
+	UINT TDES2;
+	UINT TDES3;
+};
+
+typedef struct s_TX_CONTEXT_DESC t_TX_CONTEXT_DESC;
+
+struct s_RX_NORMAL_DESC {
+	UINT RDES0;
+	UINT RDES1;
+	UINT RDES2;
+	UINT RDES3;
+};
+
+typedef struct s_RX_NORMAL_DESC t_RX_NORMAL_DESC;
+
+struct s_TX_NORMAL_DESC {
+	UINT TDES0;
+	UINT TDES1;
+	UINT TDES2;
+	UINT TDES3;
+};
+
+typedef struct s_TX_NORMAL_DESC t_TX_NORMAL_DESC;
+
+struct s_tx_error_counters {
+	UINT tx_errors;
+};
+
+typedef struct s_tx_error_counters t_tx_error_counters;
+
+struct s_rx_error_counters {
+	UINT rx_errors;
+};
+
+typedef struct s_rx_error_counters t_rx_error_counters;
+
+struct s_rx_pkt_features {
+	UINT pkt_attributes;
+	UINT vlan_tag;
+};
+
+typedef struct s_rx_pkt_features t_rx_pkt_features;
+
+struct s_tx_pkt_features {
+	UINT pkt_attributes;
+	UINT vlan_tag;
+	ULONG mss;
+	ULONG hdr_len;
+	ULONG pay_len;
+	UCHAR ipcss;
+	UCHAR ipcso;
+	USHORT ipcse;
+	UCHAR tucss;
+	UCHAR tucso;
+	USHORT tucse;
+	UINT pkt_type;
+  ULONG tcp_hdr_len;
+};
+
+typedef struct s_tx_pkt_features t_tx_pkt_features;
+
+typedef enum {
+	eDWC_ETH_QOS_DMA_ISR_DC0IS,
+	eDWC_ETH_QOS_DMA_SR0_TI,
+	eDWC_ETH_QOS_DMA_SR0_TPS,
+	eDWC_ETH_QOS_DMA_SR0_TBU,
+	eDWC_ETH_QOS_DMA_SR0_RI,
+	eDWC_ETH_QOS_DMA_SR0_RBU,
+	eDWC_ETH_QOS_DMA_SR0_RPS,
+	eDWC_ETH_QOS_DMA_SR0_FBE,
+	eDWC_ETH_QOS_ALL
+} e_DWC_ETH_QOS_int_id;
+
+typedef enum {
+	eDWC_ETH_QOS_256 = 0x0,
+	eDWC_ETH_QOS_512 = 0x1,
+	eDWC_ETH_QOS_1k = 0x3,
+	eDWC_ETH_QOS_2k = 0x7,
+	eDWC_ETH_QOS_4k = 0xf,
+	eDWC_ETH_QOS_8k = 0x1f,
+	eDWC_ETH_QOS_16k = 0x3f,
+	eDWC_ETH_QOS_32k = 0x7f
+} eDWC_ETH_QOS_mtl_fifo_size;
+
+/* do forward declaration of private data structure */
+struct DWC_ETH_QOS_prv_data;
+struct DWC_ETH_QOS_tx_wrapper_descriptor;
+
+struct hw_if_struct {
+
+	INT(*tx_complete) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_window_error) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_aborted_error) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_carrier_lost_error) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_fifo_underrun) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_get_collision_count) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_handle_aborted_error) (struct s_TX_NORMAL_DESC *);
+	INT(*tx_update_fifo_threshold) (struct s_TX_NORMAL_DESC *);
+	/*tx threshold config */
+	INT(*tx_config_threshold) (UINT);
+
+	INT(*set_promiscuous_mode) (VOID);
+	INT(*set_all_multicast_mode) (VOID);
+	INT(*set_multicast_list_mode) (VOID);
+	INT(*set_unicast_mode) (VOID);
+
+	INT(*enable_rx_csum) (void);
+	INT(*disable_rx_csum) (void);
+	INT(*get_rx_csum_status) (void);
+
+	INT(*read_phy_regs) (INT, INT, INT*);
+	INT(*write_phy_regs) (INT, INT, INT);
+	INT(*set_full_duplex) (VOID);
+	INT(*set_half_duplex) (VOID);
+	INT(*set_mii_speed_100) (VOID);
+	INT(*set_mii_speed_10) (VOID);
+	INT(*set_gmii_speed) (VOID);
+	/* for PMT */
+	INT(*start_dma_rx) (UINT);
+	INT(*stop_dma_rx) (UINT);
+	INT(*start_dma_tx) (UINT);
+	INT(*stop_dma_tx) (UINT);
+	INT(*start_mac_tx_rx) (VOID);
+	INT(*stop_mac_tx_rx) (VOID);
+
+	INT(*init) (struct DWC_ETH_QOS_prv_data *);
+	INT(*exit) (void);
+	INT(*enable_int) (e_DWC_ETH_QOS_int_id);
+	INT(*disable_int) (e_DWC_ETH_QOS_int_id);
+	void (*pre_xmit) (struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	void (*dev_read) (struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	void (*tx_desc_init) (struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	void (*rx_desc_init) (struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	void (*rx_desc_reset) (UINT, struct DWC_ETH_QOS_prv_data *,
+			       UINT, UINT qInx);
+	 INT(*tx_desc_reset) (UINT, struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	/* last tx segmnet reports the tx status */
+	 INT(*get_tx_desc_ls) (struct s_TX_NORMAL_DESC *);
+	 INT(*get_tx_desc_ctxt) (struct s_TX_NORMAL_DESC *);
+	void (*update_rx_tail_ptr) (unsigned int qInx, unsigned int dma_addr);
+
+	/* for FLOW ctrl */
+	 INT(*enable_rx_flow_ctrl) (VOID);
+	 INT(*disable_rx_flow_ctrl) (VOID);
+	 INT(*enable_tx_flow_ctrl) (UINT);
+	 INT(*disable_tx_flow_ctrl) (UINT);
+
+	/* for PMT operations */
+	 INT(*enable_magic_pmt) (VOID);
+	 INT(*disable_magic_pmt) (VOID);
+	 INT(*enable_remote_pmt) (VOID);
+	 INT(*disable_remote_pmt) (VOID);
+	 INT(*configure_rwk_filter) (UINT *, UINT);
+
+	/* for RX watchdog timer */
+	 INT(*config_rx_watchdog) (UINT, u32 riwt);
+
+	/* for RX and TX threshold config */
+	 INT(*config_rx_threshold) (UINT ch_no, UINT val);
+	 INT(*config_tx_threshold) (UINT ch_no, UINT val);
+
+	/* for RX and TX Store and Forward Mode config */
+	 INT(*config_rsf_mode) (UINT ch_no, UINT val);
+	 INT(*config_tsf_mode) (UINT ch_no, UINT val);
+
+	/* for TX DMA Operate on Second Frame config */
+	 INT(*config_osf_mode) (UINT ch_no, UINT val);
+
+	/* for INCR/INCRX config */
+	 INT(*config_incr_incrx_mode) (UINT val);
+	/* for AXI PBL config */
+	INT(*config_axi_pbl_val) (UINT val);
+	/* for AXI WORL config */
+	INT(*config_axi_worl_val) (UINT val);
+	/* for AXI RORL config */
+	INT(*config_axi_rorl_val) (UINT val);
+
+	/* for RX and TX PBL config */
+	 INT(*config_rx_pbl_val) (UINT ch_no, UINT val);
+	 INT(*get_rx_pbl_val) (UINT ch_no);
+	 INT(*config_tx_pbl_val) (UINT ch_no, UINT val);
+	 INT(*get_tx_pbl_val) (UINT ch_no);
+	 INT(*config_pblx8) (UINT ch_no, UINT val);
+
+	/* for TX vlan control */
+	 VOID(*enable_vlan_reg_control) (struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data);
+	 VOID(*enable_vlan_desc_control) (struct DWC_ETH_QOS_prv_data *pdata);
+
+	/* for rx vlan stripping */
+	 VOID(*configure_rx_outer_vlan_stripping) (u32);
+	 VOID(*configure_rx_inner_vlan_stripping) (u32);
+
+	/* for sa(source address) insert/replace */
+	 VOID(*configure_mac_addr0_reg) (UCHAR *);
+	 VOID(*configure_mac_addr1_reg) (UCHAR *);
+	 VOID(*configure_sa_via_reg) (u32);
+
+	/* for handling multi-queue */
+	INT(*disable_rx_interrupt)(UINT);
+	INT(*enable_rx_interrupt)(UINT);
+
+	/* for handling MMC */
+	INT(*disable_mmc_interrupts)(VOID);
+	INT(*config_mmc_counters)(VOID);
+
+	/* for handling split header */
+	INT(*config_split_header_mode)(UINT qInx, USHORT sph_en);
+	INT(*config_header_size)(USHORT header_size);
+
+	/* for handling DCB and AVB */
+	INT(*set_dcb_algorithm)(UCHAR dcb_algorithm);
+	INT(*set_dcb_queue_weight)(UINT qInx, UINT q_weight);
+
+	INT(*set_tx_queue_operating_mode)(UINT qInx, UINT q_mode);
+	INT(*set_avb_algorithm)(UINT qInx, UCHAR avb_algorithm);
+	INT(*config_credit_control)(UINT qInx, UINT cc);
+	INT(*config_send_slope)(UINT qInx, UINT send_slope);
+	INT(*config_idle_slope)(UINT qInx, UINT idle_slope);
+	INT(*config_high_credit)(UINT qInx, UINT hi_credit);
+	INT(*config_low_credit)(UINT qInx, UINT lo_credit);
+	INT(*config_slot_num_check)(UINT qInx, UCHAR slot_check);
+	INT(*config_advance_slot_num_check)(UINT qInx, UCHAR adv_slot_check);
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	void(*tx_desc_init_pg)(struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	void(*rx_desc_init_pg)(struct DWC_ETH_QOS_prv_data *, UINT qInx);
+	INT(*set_ch_arb_weights)(UINT qInx, UCHAR weight);
+	INT(*config_slot_interrupt)(UINT qInx, UCHAR config);
+	INT(*set_slot_count)(UINT qInx, UCHAR slotCount);
+	INT(*set_tx_rx_prio_policy)(UCHAR prio_policy);
+	INT(*set_tx_rx_prio)(UCHAR prio);
+	INT(*set_tx_rx_prio_ratio)(UCHAR prio_ratio);
+	INT(*set_dma_tx_arb_algorithm)(UCHAR arb_algo);
+	INT(*prepare_dev_pktgen)(struct DWC_ETH_QOS_prv_data *);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	/* for hw time stamping */
+	INT(*config_hw_time_stamping)(UINT);
+	INT(*config_sub_second_increment)(unsigned long ptp_clock);
+	INT(*init_systime)(UINT, UINT);
+	INT(*config_addend)(UINT);
+	INT(*adjust_systime)(UINT, UINT, INT, bool);
+	ULONG_LONG(*get_systime)(void);
+	UINT(*get_tx_tstamp_status)(struct s_TX_NORMAL_DESC *txdesc);
+	ULONG_LONG(*get_tx_tstamp)(struct s_TX_NORMAL_DESC *txdesc);
+	UINT(*get_tx_tstamp_status_via_reg)(void);
+	ULONG_LONG(*get_tx_tstamp_via_reg)(void);
+	UINT(*rx_tstamp_available)(struct s_RX_NORMAL_DESC *rxdesc);
+	UINT(*get_rx_tstamp_status)(struct s_RX_CONTEXT_DESC *rxdesc);
+	ULONG_LONG(*get_rx_tstamp)(struct s_RX_CONTEXT_DESC *rxdesc);
+	INT(*drop_tx_status_enabled)(void);
+
+	/* for l2, l3 and l4 layer filtering */
+	INT(*config_l2_da_perfect_inverse_match)(INT perfect_inverse_match);
+	INT(*update_mac_addr32_127_low_high_reg)(INT idx, UCHAR addr[]);
+	INT(*update_mac_addr1_31_low_high_reg)(INT idx, UCHAR addr[]);
+	INT(*update_hash_table_reg)(INT idx, UINT data);
+	INT(*config_mac_pkt_filter_reg)(UCHAR, UCHAR, UCHAR, UCHAR, UCHAR);
+	INT(*config_l3_l4_filter_enable)(INT);
+	INT(*config_l3_filters)(INT filter_no, INT enb_dis, INT ipv4_ipv6_match,
+                     INT src_dst_addr_match, INT perfect_inverse_match);
+	INT(*update_ip4_addr0)(INT filter_no, UCHAR addr[]);
+	INT(*update_ip4_addr1)(INT filter_no, UCHAR addr[]);
+	INT(*update_ip6_addr)(INT filter_no, USHORT addr[]);
+	INT(*config_l4_filters)(INT filter_no, INT enb_dis,
+		INT tcp_udp_match, INT src_dst_port_match,
+		INT perfect_inverse_match);
+	INT(*update_l4_sa_port_no)(INT filter_no, USHORT port_no);
+	INT(*update_l4_da_port_no)(INT filter_no, USHORT port_no);
+
+	/* for VLAN filtering */
+	INT(*get_vlan_hash_table_reg)(void);
+	INT(*update_vlan_hash_table_reg)(USHORT data);
+	INT(*update_vlan_id)(USHORT vid);
+	INT(*config_vlan_filtering)(INT filter_enb_dis,
+				INT perfect_hash_filtering,
+				INT perfect_inverse_match);
+	UINT(*get_vlan_tag_comparison)(void);
+
+	/* for differnet PHY interconnect */
+	INT(*control_an)(bool enable, bool restart);
+	INT(*get_an_adv_pause_param)(void);
+	INT(*get_an_adv_duplex_param)(void);
+	INT(*get_lp_an_adv_pause_param)(void);
+	INT(*get_lp_an_adv_duplex_param)(void);
+
+	/* for EEE */
+	INT(*set_eee_mode)(void);
+	INT(*reset_eee_mode)(void);
+	INT(*set_eee_pls)(int phy_link);
+	INT(*set_eee_timer)(int lpi_lst, int lpi_twt);
+	u32(*get_lpi_status)(void);
+	INT(*set_lpi_tx_automate)(void);
+
+	/* for ARP */
+	INT(*config_arp_offload)(int enb_dis);
+	INT(*update_arp_offload_ip_addr)(UCHAR addr[]);
+
+	/* for MAC loopback */
+	INT(*config_mac_loopback_mode)(UINT);
+
+	/* for PFC */
+	void (*config_pfc)(int enb_dis);
+};
+
+/* wrapper buffer structure to hold transmit pkt details */
+struct DWC_ETH_QOS_tx_buffer {
+	dma_addr_t dma;		/* dma address of skb */
+	struct sk_buff *skb;	/* virtual address of skb */
+	unsigned short len;	/* length of first skb */
+	unsigned char buf1_mapped_as_page;
+
+	dma_addr_t dma2; /* dam address of second skb */
+	unsigned short len2; /* length of second skb */
+	unsigned char buf2_mapped_as_page;
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	unsigned char slot_number;
+#endif
+};
+
+struct DWC_ETH_QOS_tx_wrapper_descriptor {
+	char *desc_name;	/* ID of descriptor */
+
+	void *tx_desc_ptrs[TX_DESC_CNT];
+	dma_addr_t tx_desc_dma_addrs[TX_DESC_CNT];
+
+	struct DWC_ETH_QOS_tx_buffer *tx_buf_ptrs[TX_DESC_CNT];
+
+	unsigned char contigous_mem;
+
+	int cur_tx;	/* always gives index of desc which has to
+				be used for current xfer */
+	int dirty_tx;	/* always gives index of desc which has to
+				be checked for xfer complete */
+	unsigned int free_desc_cnt;	/* always gives total number of available
+					free desc count for driver */
+	unsigned int tx_pkt_queued;	/* always gives total number of packets
+					queued for transmission */
+	unsigned int queue_stopped;
+	int packet_count;
+
+	UINT tx_threshold_val;	/* contain bit value for TX threshold */
+	UINT tsf_on;		/* set to 1 if TSF is enabled else set to 0 */
+	UINT osf_on;		/* set to 1 if OSF is enabled else set to 0 */
+	UINT tx_pbl;
+
+	/* for tx vlan delete/insert/replace */
+	u32 tx_vlan_tag_via_reg;
+	u32 tx_vlan_tag_ctrl;
+
+	USHORT vlan_tag_id;
+	UINT vlan_tag_present;
+
+	/* for VLAN context descriptor operation */
+	u32 context_setup;
+
+	/* for TSO */
+	u32 default_mss;
+};
+
+struct DWC_ETH_QOS_tx_queue {
+	/* Tx descriptors */
+	struct DWC_ETH_QOS_tx_wrapper_descriptor tx_desc_data;
+	int q_op_mode;
+};
+
+/* wrapper buffer structure to hold received pkt details */
+struct DWC_ETH_QOS_rx_buffer {
+	dma_addr_t dma;		/* dma address of skb */
+	struct sk_buff *skb;	/* virtual address of skb */
+	unsigned short len;	/* length of received packet */
+	struct page *page;	/* page address */
+	unsigned char mapped_as_page;
+	bool good_pkt;		/* set to 1 if it is good packet else
+				set to 0 */
+	unsigned int inte;	/* set to non-zero if INTE is set for
+				corresponding desc */
+
+	dma_addr_t dma2;	/* dma address of second skb */
+	struct page *page2;	/* page address of second buffer */
+	unsigned short len2;	/* length of received packet-second buffer */
+
+	unsigned short rx_hdr_size; /* header buff size in case of split header */
+};
+
+struct DWC_ETH_QOS_rx_wrapper_descriptor {
+	char *desc_name;	/* ID of descriptor */
+
+	void *rx_desc_ptrs[RX_DESC_CNT];
+	dma_addr_t rx_desc_dma_addrs[RX_DESC_CNT];
+
+	struct DWC_ETH_QOS_rx_buffer *rx_buf_ptrs[RX_DESC_CNT];
+
+	unsigned char contigous_mem;
+
+	int cur_rx;	/* always gives index of desc which needs to
+				be checked for packet availabilty */
+	int dirty_rx;
+	unsigned int pkt_received;	/* always gives total number of packets
+					received from device in one RX interrupt */
+	unsigned int skb_realloc_idx;
+	unsigned int skb_realloc_threshold;
+
+	/* for rx coalesce schem */
+	int use_riwt;		/* set to 1 if RX watchdog timer should be used
+				for RX interrupt mitigation */
+	u32 rx_riwt;
+	u32 rx_coal_frames;	/* Max no of pkts to be received before
+				an RX interrupt */
+
+	UINT rx_threshold_val;	/* contain bit vlaue for RX threshold */
+	UINT rsf_on;		/* set to 1 if RSF is enabled else set to 0 */
+	UINT rx_pbl;
+
+	struct sk_buff *skb_top;	/* points to first skb in the chain
+					in case of jumbo pkts */
+
+	/* for rx vlan stripping */
+	u32 rx_inner_vlan_strip;
+	u32 rx_outer_vlan_strip;
+};
+
+struct DWC_ETH_QOS_rx_queue {
+	/* Rx descriptors */
+	struct DWC_ETH_QOS_rx_wrapper_descriptor rx_desc_data;
+	struct napi_struct napi;
+	struct DWC_ETH_QOS_prv_data *pdata;
+
+	struct net_lro_mgr lro_mgr;
+	struct net_lro_desc lro_arr[DWC_ETH_QOS_MAX_LRO_DESC];
+	int lro_flush_needed;
+};
+
+struct desc_if_struct {
+	INT(*alloc_queue_struct) (struct DWC_ETH_QOS_prv_data *);
+	void(*free_queue_struct) (struct DWC_ETH_QOS_prv_data *);
+	INT(*alloc_buff_and_desc) (struct DWC_ETH_QOS_prv_data *);
+	void (*realloc_skb) (struct DWC_ETH_QOS_prv_data *, UINT);
+	void (*unmap_rx_skb) (struct DWC_ETH_QOS_prv_data *,
+			      struct DWC_ETH_QOS_rx_buffer *);
+	void (*unmap_tx_skb) (struct DWC_ETH_QOS_prv_data *,
+			      struct DWC_ETH_QOS_tx_buffer *);
+	unsigned int (*map_tx_skb) (struct net_device *, struct sk_buff *);
+	void (*tx_free_mem) (struct DWC_ETH_QOS_prv_data *);
+	void (*rx_free_mem) (struct DWC_ETH_QOS_prv_data *);
+	void (*wrapper_tx_desc_init) (struct DWC_ETH_QOS_prv_data *);
+	void (*wrapper_tx_desc_init_single_q) (struct DWC_ETH_QOS_prv_data *,
+					       UINT);
+	void (*wrapper_rx_desc_init) (struct DWC_ETH_QOS_prv_data *);
+	void (*wrapper_rx_desc_init_single_q) (struct DWC_ETH_QOS_prv_data *,
+					       UINT);
+
+	void (*rx_skb_free_mem) (struct DWC_ETH_QOS_prv_data *, UINT);
+	void (*rx_skb_free_mem_single_q) (struct DWC_ETH_QOS_prv_data *, UINT);
+	void (*tx_skb_free_mem) (struct DWC_ETH_QOS_prv_data *, UINT);
+	void (*tx_skb_free_mem_single_q) (struct DWC_ETH_QOS_prv_data *, UINT);
+
+	int (*handle_tso) (struct net_device *dev, struct sk_buff *skb);
+};
+
+/*
+ * This structure contains different flags and each flags will indicates
+ * different hardware features.
+ */
+struct DWC_ETH_QOS_hw_features {
+	/* HW Feature Register0 */
+	unsigned int mii_sel;	/* 10/100 Mbps support */
+	unsigned int gmii_sel;	/* 1000 Mbps support */
+	unsigned int hd_sel;	/* Half-duplex support */
+	unsigned int pcs_sel;	/* PCS registers(TBI, SGMII or RTBI PHY
+				interface) */
+	unsigned int vlan_hash_en;	/* VLAN Hash filter selected */
+	unsigned int sma_sel;	/* SMA(MDIO) Interface */
+	unsigned int rwk_sel;	/* PMT remote wake-up packet */
+	unsigned int mgk_sel;	/* PMT magic packet */
+	unsigned int mmc_sel;	/* RMON module */
+	unsigned int arp_offld_en;	/* ARP Offload features is selected */
+	unsigned int ts_sel;	/* IEEE 1588-2008 Adavanced timestamp */
+	unsigned int eee_sel;	/* Energy Efficient Ethernet is enabled */
+	unsigned int tx_coe_sel;	/* Tx Checksum Offload is enabled */
+	unsigned int rx_coe_sel;	/* Rx Checksum Offload is enabled */
+	unsigned int mac_addr16_sel;	/* MAC Addresses 1-16 are selected */
+	unsigned int mac_addr32_sel;	/* MAC Addresses 32-63 are selected */
+	unsigned int mac_addr64_sel;	/* MAC Addresses 64-127 are selected */
+	unsigned int tsstssel;	/* Timestamp System Time Source */
+	unsigned int speed_sel;	/* Speed Select */
+	unsigned int sa_vlan_ins;	/* Source Address or VLAN Insertion */
+	unsigned int act_phy_sel;	/* Active PHY Selected */
+
+	/* HW Feature Register1 */
+	unsigned int rx_fifo_size;	/* MTL Receive FIFO Size */
+	unsigned int tx_fifo_size;	/* MTL Transmit FIFO Size */
+	unsigned int adv_ts_hword;	/* Advance timestamping High Word
+					selected */
+	unsigned int dcb_en;	/* DCB Feature Enable */
+	unsigned int sph_en;	/* Split Header Feature Enable */
+	unsigned int tso_en;	/* TCP Segmentation Offload Enable */
+	unsigned int dma_debug_gen;	/* DMA debug registers are enabled */
+	unsigned int av_sel;	/* AV Feature Enabled */
+	unsigned int lp_mode_en;	/* Low Power Mode Enabled */
+	unsigned int hash_tbl_sz;	/* Hash Table Size */
+	unsigned int l3l4_filter_num;	/* Total number of L3-L4 Filters */
+
+	/* HW Feature Register2 */
+	unsigned int rx_q_cnt;	/* Number of MTL Receive Queues */
+	unsigned int tx_q_cnt;	/* Number of MTL Transmit Queues */
+	unsigned int rx_ch_cnt;	/* Number of DMA Receive Channels */
+	unsigned int tx_ch_cnt;	/* Number of DMA Transmit Channels */
+	unsigned int pps_out_num;	/* Number of PPS outputs */
+	unsigned int aux_snap_num;	/* Number of Auxillary snapshot
+					inputs */
+};
+
+/* structure to hold MMC values */
+struct DWC_ETH_QOS_mmc_counters {
+	/* MMC TX counters */
+	unsigned long mmc_tx_octetcount_gb;
+	unsigned long mmc_tx_framecount_gb;
+	unsigned long mmc_tx_broadcastframe_g;
+	unsigned long mmc_tx_multicastframe_g;
+	unsigned long mmc_tx_64_octets_gb;
+	unsigned long mmc_tx_65_to_127_octets_gb;
+	unsigned long mmc_tx_128_to_255_octets_gb;
+	unsigned long mmc_tx_256_to_511_octets_gb;
+	unsigned long mmc_tx_512_to_1023_octets_gb;
+	unsigned long mmc_tx_1024_to_max_octets_gb;
+	unsigned long mmc_tx_unicast_gb;
+	unsigned long mmc_tx_multicast_gb;
+	unsigned long mmc_tx_broadcast_gb;
+	unsigned long mmc_tx_underflow_error;
+	unsigned long mmc_tx_singlecol_g;
+	unsigned long mmc_tx_multicol_g;
+	unsigned long mmc_tx_deferred;
+	unsigned long mmc_tx_latecol;
+	unsigned long mmc_tx_exesscol;
+	unsigned long mmc_tx_carrier_error;
+	unsigned long mmc_tx_octetcount_g;
+	unsigned long mmc_tx_framecount_g;
+	unsigned long mmc_tx_excessdef;
+	unsigned long mmc_tx_pause_frame;
+	unsigned long mmc_tx_vlan_frame_g;
+	unsigned long mmc_tx_osize_frame_g;
+
+	/* MMC RX counters */
+	unsigned long mmc_rx_framecount_gb;
+	unsigned long mmc_rx_octetcount_gb;
+	unsigned long mmc_rx_octetcount_g;
+	unsigned long mmc_rx_broadcastframe_g;
+	unsigned long mmc_rx_multicastframe_g;
+	unsigned long mmc_rx_crc_errror;
+	unsigned long mmc_rx_align_error;
+	unsigned long mmc_rx_run_error;
+	unsigned long mmc_rx_jabber_error;
+	unsigned long mmc_rx_undersize_g;
+	unsigned long mmc_rx_oversize_g;
+	unsigned long mmc_rx_64_octets_gb;
+	unsigned long mmc_rx_65_to_127_octets_gb;
+	unsigned long mmc_rx_128_to_255_octets_gb;
+	unsigned long mmc_rx_256_to_511_octets_gb;
+	unsigned long mmc_rx_512_to_1023_octets_gb;
+	unsigned long mmc_rx_1024_to_max_octets_gb;
+	unsigned long mmc_rx_unicast_g;
+	unsigned long mmc_rx_length_error;
+	unsigned long mmc_rx_outofrangetype;
+	unsigned long mmc_rx_pause_frames;
+	unsigned long mmc_rx_fifo_overflow;
+	unsigned long mmc_rx_vlan_frames_gb;
+	unsigned long mmc_rx_watchdog_error;
+	unsigned long mmc_rx_receive_error;
+	unsigned long mmc_rx_ctrl_frames_g;
+
+	/* IPC */
+	unsigned long mmc_rx_ipc_intr_mask;
+	unsigned long mmc_rx_ipc_intr;
+
+	/* IPv4 */
+	unsigned long mmc_rx_ipv4_gd;
+	unsigned long mmc_rx_ipv4_hderr;
+	unsigned long mmc_rx_ipv4_nopay;
+	unsigned long mmc_rx_ipv4_frag;
+	unsigned long mmc_rx_ipv4_udsbl;
+
+	/* IPV6 */
+	unsigned long mmc_rx_ipv6_gd_octets;
+	unsigned long mmc_rx_ipv6_hderr_octets;
+	unsigned long mmc_rx_ipv6_nopay_octets;
+
+	/* Protocols */
+	unsigned long mmc_rx_udp_gd;
+	unsigned long mmc_rx_udp_err;
+	unsigned long mmc_rx_tcp_gd;
+	unsigned long mmc_rx_tcp_err;
+	unsigned long mmc_rx_icmp_gd;
+	unsigned long mmc_rx_icmp_err;
+
+	/* IPv4 */
+	unsigned long mmc_rx_ipv4_gd_octets;
+	unsigned long mmc_rx_ipv4_hderr_octets;
+	unsigned long mmc_rx_ipv4_nopay_octets;
+	unsigned long mmc_rx_ipv4_frag_octets;
+	unsigned long mmc_rx_ipv4_udsbl_octets;
+
+	/* IPV6 */
+	unsigned long mmc_rx_ipv6_gd;
+	unsigned long mmc_rx_ipv6_hderr;
+	unsigned long mmc_rx_ipv6_nopay;
+
+	/* Protocols */
+	unsigned long mmc_rx_udp_gd_octets;
+	unsigned long mmc_rx_udp_err_octets;
+	unsigned long mmc_rx_tcp_gd_octets;
+	unsigned long mmc_rx_tcp_err_octets;
+	unsigned long mmc_rx_icmp_gd_octets;
+	unsigned long mmc_rx_icmp_err_octets;
+};
+
+struct DWC_ETH_QOS_extra_stats {
+	unsigned long q_re_alloc_rx_buf_failed[8];
+
+	/* Tx/Rx IRQ error info */
+	unsigned long tx_process_stopped_irq_n[8];
+	unsigned long rx_process_stopped_irq_n[8];
+	unsigned long tx_buf_unavailable_irq_n[8];
+	unsigned long rx_buf_unavailable_irq_n[8];
+	unsigned long rx_watchdog_irq_n;
+	unsigned long fatal_bus_error_irq_n;
+	unsigned long pmt_irq_n;
+	/* Tx/Rx IRQ Events */
+	unsigned long tx_normal_irq_n[8];
+	unsigned long rx_normal_irq_n[8];
+	unsigned long napi_poll_n;
+	unsigned long tx_clean_n[8];
+	/* EEE */
+	unsigned long tx_path_in_lpi_mode_irq_n;
+	unsigned long tx_path_exit_lpi_mode_irq_n;
+	unsigned long rx_path_in_lpi_mode_irq_n;
+	unsigned long rx_path_exit_lpi_mode_irq_n;
+	/* Tx/Rx frames */
+	unsigned long tx_pkt_n;
+	unsigned long rx_pkt_n;
+	unsigned long tx_vlan_pkt_n;
+	unsigned long rx_vlan_pkt_n;
+	unsigned long tx_timestamp_captured_n;
+	unsigned long rx_timestamp_captured_n;
+	unsigned long tx_tso_pkt_n;
+	unsigned long rx_split_hdr_pkt_n;
+
+	/* Tx/Rx frames per channels/queues */
+	unsigned long q_tx_pkt_n[8];
+	unsigned long q_rx_pkt_n[8];
+};
+
+struct DWC_ETH_QOS_prv_data {
+	struct net_device *dev;
+	struct pci_dev *pdev;
+
+	spinlock_t lock;
+	spinlock_t tx_lock;
+	spinlock_t pmt_lock;
+	UINT mem_start_addr;
+	UINT mem_size;
+	INT irq_number;
+	struct hw_if_struct hw_if;
+	struct desc_if_struct desc_if;
+
+	struct s_tx_error_counters tx_error_counters;
+	struct s_rx_error_counters rx_error_counters;
+	struct s_rx_pkt_features rx_pkt_features;
+	struct s_tx_pkt_features tx_pkt_features;
+
+	/* TX Queue */
+	struct DWC_ETH_QOS_tx_queue *tx_queue;
+	UCHAR tx_queue_cnt;
+	UINT tx_qInx;
+
+	/* RX Queue */
+	struct DWC_ETH_QOS_rx_queue *rx_queue;
+	UCHAR rx_queue_cnt;
+	UINT rx_qInx;
+
+	struct mii_bus *mii;
+	struct phy_device *phydev;
+	int oldlink;
+	int speed;
+	int oldduplex;
+	int phyaddr;
+	int bus_id;
+	u32 dev_state;
+	u32 interface;
+
+	/* saving state for Wake-on-LAN */
+	int wolopts;
+
+/* Helper macros for handling FLOW control in HW */
+#define DWC_ETH_QOS_FLOW_CTRL_OFF 0
+#define DWC_ETH_QOS_FLOW_CTRL_RX  1
+#define DWC_ETH_QOS_FLOW_CTRL_TX  2
+#define DWC_ETH_QOS_FLOW_CTRL_TX_RX (DWC_ETH_QOS_FLOW_CTRL_TX |\
+					DWC_ETH_QOS_FLOW_CTRL_RX)
+
+	unsigned int flow_ctrl;
+
+	/* keeps track of previous programmed flow control options */
+	unsigned int oldflow_ctrl;
+
+	struct DWC_ETH_QOS_hw_features hw_feat;
+
+	/* for sa(source address) insert/replace */
+	u32 tx_sa_ctrl_via_desc;
+	u32 tx_sa_ctrl_via_reg;
+	unsigned char mac_addr[DWC_ETH_QOS_MAC_ADDR_LEN];
+
+	/* keeps track of power mode for API based PMT control */
+	u32 power_down;
+	u32 power_down_type;
+
+	/* AXI parameters */
+	UINT incr_incrx;
+	UINT axi_pbl;
+	UINT axi_worl;
+	UINT axi_rorl;
+
+	/* for hanlding jumbo frames and split header feature on rx path */
+	int (*clean_rx) (struct DWC_ETH_QOS_prv_data *pdata, int quota, UINT qInx);
+	int (*alloc_rx_buf) (struct DWC_ETH_QOS_prv_data *pdata,
+			     struct DWC_ETH_QOS_rx_buffer *buffer, gfp_t gfp);
+	unsigned int rx_buffer_len;
+
+	/* variable frame burst size */
+	UINT drop_tx_pktburstcnt;
+	unsigned int mac_enable_count;	/* counter for enabling MAC transmit at
+					drop tx packet  */
+
+	struct DWC_ETH_QOS_mmc_counters mmc;
+	struct DWC_ETH_QOS_extra_stats xstats;
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+	struct DWC_ETH_QOS_PGStruct *pg;
+	struct timer_list pg_timer;
+	INT prepare_pg_packet;
+	INT run_test;
+	INT max_counter;
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+	/* rx split header mode */
+	unsigned char rx_split_hdr;
+
+	/* for MAC loopback */
+	unsigned int mac_loopback_mode;
+
+	/* for hw time stamping */
+	unsigned char hwts_tx_en;
+	unsigned char hwts_rx_en;
+	struct ptp_clock *ptp_clock;
+	struct ptp_clock_info ptp_clock_ops;
+	spinlock_t ptp_lock; /* protects registers */
+	unsigned int default_addend;
+	bool one_nsec_accuracy; /* set to 1 if one nano second accuracy
+				   is enabled else set to zero */
+
+	/* for filtering */
+	int max_hash_table_size;
+	int max_addr_reg_cnt;
+
+	/* L3/L4 filtering */
+	unsigned int l3_l4_filter;
+
+	unsigned char vlan_hash_filtering;
+	unsigned int l2_filtering_mode; /* 0 - if perfect and 1 - if hash filtering */
+
+	/* For handling PCS(TBI/RTBI/SGMII) and RGMII/SMII interface */
+	unsigned int pcs_link;
+	unsigned int pcs_duplex;
+	unsigned int pcs_speed;
+	unsigned int pause;
+	unsigned int duplex;
+	unsigned int lp_pause;
+	unsigned int lp_duplex;
+
+	/* for handling EEE */
+	struct timer_list eee_ctrl_timer;
+	bool tx_path_in_lpi_mode;
+	bool use_lpi_tx_automate;
+	int eee_enabled;
+	int eee_active;
+	int tx_lpi_timer;
+
+	/* this variable will hold vlan table value if vlan hash filtering
+	 * is enabled else hold vlan id that is programmed in HW. Same is
+	 * used to configure back into HW when device is reset during
+	 * jumbo/split-header features.
+	 * */
+	UINT vlan_ht_or_id;
+
+	/* Used when LRO is enabled,
+	 * set to 1 if skb has TCP payload else set to 0
+	 * */
+	int tcp_pkt;
+};
+
+typedef enum {
+	eSAVE,
+	eRESTORE
+} e_int_state;
+
+/* Function prototypes*/
+
+void DWC_ETH_QOS_init_function_ptrs_dev(struct hw_if_struct *);
+void DWC_ETH_QOS_init_function_ptrs_desc(struct desc_if_struct *);
+struct net_device_ops *DWC_ETH_QOS_get_netdev_ops(void);
+struct ethtool_ops *DWC_ETH_QOS_get_ethtool_ops(void);
+int DWC_ETH_QOS_poll_mq(struct napi_struct *, int);
+
+void DWC_ETH_QOS_get_pdata(struct DWC_ETH_QOS_prv_data *pdata);
+
+/* Debugfs related functions. */
+int create_debug_files(void);
+void remove_debug_files(void);
+
+int DWC_ETH_QOS_mdio_register(struct net_device *dev);
+void DWC_ETH_QOS_mdio_unregister(struct net_device *dev);
+INT DWC_ETH_QOS_mdio_read_direct(struct DWC_ETH_QOS_prv_data *pdata,
+				 int phyaddr, int phyreg, int *phydata);
+INT DWC_ETH_QOS_mdio_write_direct(struct DWC_ETH_QOS_prv_data *pdata,
+				  int phyaddr, int phyreg, int phydata);
+void dbgpr_regs(void);
+void dump_phy_registers(struct DWC_ETH_QOS_prv_data *);
+void dump_tx_desc(struct DWC_ETH_QOS_prv_data *pdata, int first_desc_idx,
+		  int last_desc_idx, int flag, UINT qInx);
+void dump_rx_desc(UINT, struct s_RX_NORMAL_DESC *desc, int cur_rx);
+void print_pkt(struct sk_buff *skb, int len, bool tx_rx, int desc_idx);
+void DWC_ETH_QOS_get_all_hw_features(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_print_all_hw_features(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_configure_flow_ctrl(struct DWC_ETH_QOS_prv_data *pdata);
+INT DWC_ETH_QOS_powerup(struct net_device *, UINT);
+INT DWC_ETH_QOS_powerdown(struct net_device *, UINT, UINT);
+u32 DWC_ETH_QOS_usec2riwt(u32 usec, struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_init_rx_coalesce(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_enable_all_ch_rx_interrpt(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_disable_all_ch_rx_interrpt(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_update_rx_errors(struct net_device *, unsigned int);
+void DWC_ETH_QOS_stop_all_ch_tx_dma(struct DWC_ETH_QOS_prv_data *pdata);
+UCHAR get_tx_queue_count(void);
+UCHAR get_rx_queue_count(void);
+void DWC_ETH_QOS_mmc_read(struct DWC_ETH_QOS_mmc_counters *mmc);
+UINT DWC_ETH_QOS_get_total_desc_cnt(struct DWC_ETH_QOS_prv_data *pdata,
+		struct sk_buff *skb, UINT qInx);
+
+int DWC_ETH_QOS_ptp_init(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_ptp_remove(struct DWC_ETH_QOS_prv_data *pdata);
+phy_interface_t DWC_ETH_QOS_get_phy_interface(struct DWC_ETH_QOS_prv_data *pdata);
+bool DWC_ETH_QOS_eee_init(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_handle_eee_interrupt(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_disable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_enable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata);
+
+#ifdef DWC_ETH_QOS_CONFIG_PGTEST
+irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg(int irq, void *device_id);
+void DWC_ETH_QOS_default_confs(struct DWC_ETH_QOS_prv_data *pdata);
+int DWC_ETH_QOS_handle_pg_ioctl(struct DWC_ETH_QOS_prv_data *pdata, void *ptr);
+int DWC_ETH_QOS_alloc_pg(struct DWC_ETH_QOS_prv_data *pdata);
+void DWC_ETH_QOS_free_pg(struct DWC_ETH_QOS_prv_data *pdata);
+int DWC_ETH_QOS_alloc_rx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				struct DWC_ETH_QOS_rx_buffer *buffer,
+				gfp_t gfp);
+int DWC_ETH_QOS_alloc_tx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
+				struct DWC_ETH_QOS_tx_buffer *buffer,
+				gfp_t gfp);
+#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
+/* For debug prints*/
+#define DRV_NAME "DWC_ETH_QOS_drv.c"
+
+#ifdef YDEBUG
+#define DBGPR(x...) printk(KERN_ALERT x)
+#define DBGPR_REGS() dbgpr_regs()
+#define DBGPHY_REGS(x...) dump_phy_registers(x)
+#else
+#define DBGPR(x...) do { } while (0)
+#define DBGPR_REGS() do { } while (0)
+#define DBGPHY_REGS(x...) do { } while (0)
+#endif
+
+#ifdef YDEBUG_PG
+#define DBGPR_PG(x...) printk(KERN_ALERT x)
+#else
+#define DBGPR_PG(x...) do {} while (0)
+#endif
+
+#ifdef YDEBUG_MDIO
+#define DBGPR_MDIO(x...) printk(KERN_ALERT x)
+#else
+#define DBGPR_MDIO(x...) do {} while (0)
+#endif
+
+#ifdef YDEBUG_PTP
+#define DBGPR_PTP(x...) printk(KERN_ALERT x)
+#else
+#define DBGPR_PTP(x...) do {} while (0)
+#endif
+
+#ifdef YDEBUG_FILTER
+#define DBGPR_FILTER(x...) printk(KERN_ALERT x)
+#else
+#define DBGPR_FILTER(x...) do {} while (0)
+#endif
+
+#ifdef YDEBUG_EEE
+#define DBGPR_EEE(x...) printk(KERN_ALERT x)
+#else
+#define DBGPR_EEE(x...) do {} while (0)
+#endif
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
new file mode 100755
index 0000000..f1280cf
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
@@ -0,0 +1,44108 @@
+/* =========================================================================
+ * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
+ * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
+ * otherwise expressly agreed to in writing between Synopsys and you.
+ *
+ * The Software IS NOT an item of Licensed Software or Licensed Product under
+ * any End User Software License Agreement or Agreement for Licensed Product
+ * with Synopsys or any supplement thereto.  Permission is hereby granted,
+ * free of charge, to any person obtaining a copy of this software annotated
+ * with this license and the Software, to deal in the Software without
+ * restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject
+ * to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ * ========================================================================= */
+
+#ifndef __DWC_ETH_QOS__REGACC__H__
+
+#define __DWC_ETH_QOS__REGACC__H__
+
+
+#define MAKE_MASK_32(e, s) (((e)-(s))==31?0xffffffffUL:((1UL<<((e)-(s)+1))-1))
+
+#define MAKE_MASK_64(e, s) (((e)-(s))==63?0xffffffffffffffffULL:((1ULL<<((e)-(s)+1))-1))
+
+#define GET_BITS(e, s, reg, data) \
+  (data = ((e)-(s) > 31) ?\
+    (((reg)>>(s))&MAKE_MASK_64(e,s)) :\
+    (((reg)>>(s))&MAKE_MASK_32(e,s)))
+
+#define SET_BITS(e, s, reg, val) do { \
+  if((e)-(s) > 31) { \
+    reg = ( (((val)<<(s))&(MAKE_MASK_64((e),(s))<<(s))) | ((reg)&(~(MAKE_MASK_64((e),(s))<<(s)))) ); \
+  } \
+  else { \
+    reg = ( (((val)<<(s))&(MAKE_MASK_32((e),(s))<<(s))) | ((reg)&(~(MAKE_MASK_32((e),(s))<<(s)))) ); \
+  } \
+} while(0)
+
+/* virtual_registers Low Bit Macro Name's */
+#define RX_CONTEXT_DESC_RDES3_OWN_LBIT_POS  0x1f
+#define RX_CONTEXT_DESC_RDES3_CTXT_LBIT_POS  0x1e
+#define RX_CONTEXT_DESC_RDES2_RESERVED_BITS_LBIT_POS  0
+#define RX_CONTEXT_DESC_RDES1_RTSH_LBIT_POS  0
+#define RX_CONTEXT_DESC_RDES0_RTSL_LBIT_POS  0
+#define TX_CONTEXT_DESC_TDES3_OWN_LBIT_POS  0x1f
+#define TX_CONTEXT_DESC_TDES3_CTXT_LBIT_POS  0x1e
+#define TX_CONTEXT_DESC_TDES3_OSTC_LBIT_POS  0x1b
+#define TX_CONTEXT_DESC_TDES3_TCMSSV_LBIT_POS  0x1a
+#define TX_CONTEXT_DESC_TDES3_CDX_LBIT_POS  0x17
+#define TX_CONTEXT_DESC_TDES3_SVLTV_LBIT_POS  0x11
+#define TX_CONTEXT_DESC_TDES3_VLTV_LBIT_POS  0x10
+#define TX_CONTEXT_DESC_TDES3_VT_LBIT_POS  0
+#define TX_CONTEXT_DESC_TDES2_SVT_LBIT_POS  0xf
+#define TX_CONTEXT_DESC_TDES2_MSS_LBIT_POS  0
+#define TX_CONTEXT_DESC_TDES1_NDAP_LBIT_POS  0
+#define TX_CONTEXT_DESC_TDES0_TTSL_LBIT_POS  0
+#define RX_NORMAL_DESC_RDES3_OWN_LBIT_POS  0x1f
+#define RX_NORMAL_DESC_RDES3_CTXT_LBIT_POS  0x1e
+#define RX_NORMAL_DESC_RDES3_FD_LBIT_POS  0x1d
+#define RX_NORMAL_DESC_RDES3_LD_LBIT_POS  0x1c
+#define RX_NORMAL_DESC_RDES3_RS2V_LBIT_POS  0x1b
+#define RX_NORMAL_DESC_RDES3_RS1V_LBIT_POS  0x1a
+#define RX_NORMAL_DESC_RDES3_RS0V_LBIT_POS  0x19
+#define RX_NORMAL_DESC_RDES3_CE_LBIT_POS  0x18
+#define RX_NORMAL_DESC_RDES3_GP_LBIT_POS  0x17
+#define RX_NORMAL_DESC_RDES3_RWT_LBIT_POS  0x16
+#define RX_NORMAL_DESC_RDES3_OE_LBIT_POS  0x15
+#define RX_NORMAL_DESC_RDES3_RE_LBIT_POS  0x14
+#define RX_NORMAL_DESC_RDES3_DE_LBIT_POS  0x13
+#define RX_NORMAL_DESC_RDES3_LT_LBIT_POS  0x10
+#define RX_NORMAL_DESC_RDES3_ES_LBIT_POS  0xf
+#define RX_NORMAL_DESC_RDES3_FL_LBIT_POS  0
+#define RX_NORMAL_DESC_RDES2_B2AP_NDA_LBIT_POS  0
+#define RX_NORMAL_DESC_RDES1_COP_LBIT_POS  0x10
+#define RX_NORMAL_DESC_RDES1_TD_LBIT_POS  0xf
+#define RX_NORMAL_DESC_RDES1_TSA_LBIT_POS  0xe
+#define RX_NORMAL_DESC_RDES1_PV_LBIT_POS  0xd
+#define RX_NORMAL_DESC_RDES1_PFT_LBIT_POS  0xc
+#define RX_NORMAL_DESC_RDES1_PMT_LBIT_POS  0x8
+#define RX_NORMAL_DESC_RDES1_IPPE_LBIT_POS  0x7
+#define RX_NORMAL_DESC_RDES1_IPCB_LBIT_POS  0x6
+#define RX_NORMAL_DESC_RDES1_IPV6_LBIT_POS  0x5
+#define RX_NORMAL_DESC_RDES1_IPV4_LBIT_POS  0x4
+#define RX_NORMAL_DESC_RDES1_IPHE_LBIT_POS  0x3
+#define RX_NORMAL_DESC_RDES1_PT_LBIT_POS  0
+#define RX_NORMAL_DESC_RDES0_HDR_B1AP_LBIT_POS  0
+#define TX_NORMAL_DESC_TDES3_OWN_LBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES3_CTXT_LBIT_POS  0x1e
+#define TX_NORMAL_DESC_TDES3_FD_LBIT_POS  0x1d
+#define TX_NORMAL_DESC_TDES3_LD_LBIT_POS  0x1c
+#define TX_NORMAL_DESC_TDES3_CPC_LBIT_POS  0x1a
+#define TX_NORMAL_DESC_TDES3_SAIC_LBIT_POS  0x17
+#define TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_LBIT_POS  0x13
+#define TX_NORMAL_DESC_TDES3_TSE_LBIT_POS  0x12
+#define TX_NORMAL_DESC_TDES3_CIC_LBIT_POS  0x10
+#define TX_NORMAL_DESC_TDES3_TIPLH_LBIT_POS  0xf
+#define TX_NORMAL_DESC_TDES3_FL_LBIT_POS  0
+#define TX_NORMAL_DESC_TDES2_IC_LBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES2_TTSE_LBIT_POS  0x1e
+#define TX_NORMAL_DESC_TDES2_B2L_LBIT_POS  0x10
+#define TX_NORMAL_DESC_TDES2_VTIR_LBIT_POS  0xe
+#define TX_NORMAL_DESC_TDES2_HL_B1L_LBIT_POS  0
+#define TX_NORMAL_DESC_TDES1_B2A_NDA_LBIT_POS  0
+#define TX_NORMAL_DESC_TDES0_B1A_HAP_LBIT_POS  0
+#define TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_LBIT_POS  0x4
+#define TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_LBIT_POS  0x3
+#define TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_LBIT_POS  0x2
+#define TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_LBIT_POS  0x1
+#define TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_LBIT_POS  0
+#define RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_LBIT_POS  0x5
+#define RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_LBIT_POS  0x4
+#define RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_LBIT_POS  0x3
+#define RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_LBIT_POS  0x2
+#define RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_LBIT_POS  0x1
+#define RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_LBIT_POS  0
+#define RX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS  0x10
+#define RX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS  0
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS  0x1
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_LBIT_POS  0
+#define TX_PKT_FEATURES_TCP_HDR_LEN_LEN_LBIT_POS  0
+#define TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_LBIT_POS  0x1
+#define TX_PKT_FEATURES_PKT_TYPE_IP_PKT_LBIT_POS  0
+#define TX_PKT_FEATURES_TUCSE_TCPCSE_LBIT_POS  0
+#define TX_PKT_FEATURES_TUCSO_TCPCSO_LBIT_POS  0
+#define TX_PKT_FEATURES_TUCSS_TCPCSS_LBIT_POS  0
+#define TX_PKT_FEATURES_IPCSE_IPCSE_LBIT_POS  0
+#define TX_PKT_FEATURES_IPCSO_IPCSO_LBIT_POS  0
+#define TX_PKT_FEATURES_IPCSS_IPCSS_LBIT_POS  0
+#define TX_PKT_FEATURES_PAY_LEN_PAY_LEN_LBIT_POS  0
+#define TX_PKT_FEATURES_HDR_LEN_HDR_LEN_LBIT_POS  0
+#define TX_PKT_FEATURES_MSS_MSS_LBIT_POS  0
+#define TX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS  0x10
+#define TX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS  0
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS  0x3
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_LBIT_POS  0x2
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_LBIT_POS  0x1
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_LBIT_POS  0
+
+/* virtual_registers High Bit Macro Name's */
+#define RX_CONTEXT_DESC_RDES3_OWN_HBIT_POS  0x1f
+#define RX_CONTEXT_DESC_RDES3_CTXT_HBIT_POS  0x1e
+#define RX_CONTEXT_DESC_RDES2_RESERVED_BITS_HBIT_POS  0x1f
+#define RX_CONTEXT_DESC_RDES1_RTSH_HBIT_POS  0x1f
+#define RX_CONTEXT_DESC_RDES0_RTSL_HBIT_POS  0x1f
+#define TX_CONTEXT_DESC_TDES3_OWN_HBIT_POS  0x1f
+#define TX_CONTEXT_DESC_TDES3_CTXT_HBIT_POS  0x1e
+#define TX_CONTEXT_DESC_TDES3_OSTC_HBIT_POS  0x1b
+#define TX_CONTEXT_DESC_TDES3_TCMSSV_HBIT_POS  0x1a
+#define TX_CONTEXT_DESC_TDES3_CDX_HBIT_POS  0x17
+#define TX_CONTEXT_DESC_TDES3_SVLTV_HBIT_POS  0x11
+#define TX_CONTEXT_DESC_TDES3_VLTV_HBIT_POS  0x10
+#define TX_CONTEXT_DESC_TDES3_VT_HBIT_POS  0xf
+#define TX_CONTEXT_DESC_TDES2_SVT_HBIT_POS  0x1f
+#define TX_CONTEXT_DESC_TDES2_MSS_HBIT_POS  0xe
+#define TX_CONTEXT_DESC_TDES1_NDAP_HBIT_POS  0x1f
+#define TX_CONTEXT_DESC_TDES0_TTSL_HBIT_POS  0x1f
+#define RX_NORMAL_DESC_RDES3_OWN_HBIT_POS  0x1f
+#define RX_NORMAL_DESC_RDES3_CTXT_HBIT_POS  0x1e
+#define RX_NORMAL_DESC_RDES3_FD_HBIT_POS  0x1d
+#define RX_NORMAL_DESC_RDES3_LD_HBIT_POS  0x1c
+#define RX_NORMAL_DESC_RDES3_RS2V_HBIT_POS  0x1b
+#define RX_NORMAL_DESC_RDES3_RS1V_HBIT_POS  0x1a
+#define RX_NORMAL_DESC_RDES3_RS0V_HBIT_POS  0x19
+#define RX_NORMAL_DESC_RDES3_CE_HBIT_POS  0x18
+#define RX_NORMAL_DESC_RDES3_GP_HBIT_POS  0x17
+#define RX_NORMAL_DESC_RDES3_RWT_HBIT_POS  0x16
+#define RX_NORMAL_DESC_RDES3_OE_HBIT_POS  0x15
+#define RX_NORMAL_DESC_RDES3_RE_HBIT_POS  0x14
+#define RX_NORMAL_DESC_RDES3_DE_HBIT_POS  0x13
+#define RX_NORMAL_DESC_RDES3_LT_HBIT_POS  0x12
+#define RX_NORMAL_DESC_RDES3_ES_HBIT_POS  0xf
+#define RX_NORMAL_DESC_RDES3_FL_HBIT_POS  0xe
+#define RX_NORMAL_DESC_RDES2_B2AP_NDA_HBIT_POS  0x1f
+#define RX_NORMAL_DESC_RDES1_COP_HBIT_POS  0x1f
+#define RX_NORMAL_DESC_RDES1_TD_HBIT_POS  0xf
+#define RX_NORMAL_DESC_RDES1_TSA_HBIT_POS  0xe
+#define RX_NORMAL_DESC_RDES1_PV_HBIT_POS  0xd
+#define RX_NORMAL_DESC_RDES1_PFT_HBIT_POS  0xc
+#define RX_NORMAL_DESC_RDES1_PMT_HBIT_POS  0xb
+#define RX_NORMAL_DESC_RDES1_IPPE_HBIT_POS  0x7
+#define RX_NORMAL_DESC_RDES1_IPCB_HBIT_POS  0x6
+#define RX_NORMAL_DESC_RDES1_IPV6_HBIT_POS  0x5
+#define RX_NORMAL_DESC_RDES1_IPV4_HBIT_POS  0x4
+#define RX_NORMAL_DESC_RDES1_IPHE_HBIT_POS  0x3
+#define RX_NORMAL_DESC_RDES1_PT_HBIT_POS  0x2
+#define RX_NORMAL_DESC_RDES0_HDR_B1AP_HBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES3_OWN_HBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES3_CTXT_HBIT_POS  0x1e
+#define TX_NORMAL_DESC_TDES3_FD_HBIT_POS  0x1d
+#define TX_NORMAL_DESC_TDES3_LD_HBIT_POS  0x1c
+#define TX_NORMAL_DESC_TDES3_CPC_HBIT_POS  0x1b
+#define TX_NORMAL_DESC_TDES3_SAIC_HBIT_POS  0x19
+#define TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_HBIT_POS  0x16
+#define TX_NORMAL_DESC_TDES3_TSE_HBIT_POS  0x12
+#define TX_NORMAL_DESC_TDES3_CIC_HBIT_POS  0x11
+#define TX_NORMAL_DESC_TDES3_TIPLH_HBIT_POS  0xf
+#define TX_NORMAL_DESC_TDES3_FL_HBIT_POS  0xe
+#define TX_NORMAL_DESC_TDES2_IC_HBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES2_TTSE_HBIT_POS  0x1e
+#define TX_NORMAL_DESC_TDES2_B2L_HBIT_POS  0x1d
+#define TX_NORMAL_DESC_TDES2_VTIR_HBIT_POS  0xf
+#define TX_NORMAL_DESC_TDES2_HL_B1L_HBIT_POS  0xd
+#define TX_NORMAL_DESC_TDES1_B2A_NDA_HBIT_POS  0x1f
+#define TX_NORMAL_DESC_TDES0_B1A_HAP_HBIT_POS  0x1f
+#define TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_HBIT_POS  0x4
+#define TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_HBIT_POS  0x3
+#define TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_HBIT_POS  0x2
+#define TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_HBIT_POS  0x1
+#define TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_HBIT_POS  0
+#define RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_HBIT_POS  0x5
+#define RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_HBIT_POS  0x4
+#define RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_HBIT_POS  0x3
+#define RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_HBIT_POS  0x2
+#define RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_HBIT_POS  0x1
+#define RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_HBIT_POS  0
+#define RX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS  0x1f
+#define RX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS  0xf
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS  0x1
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_HBIT_POS  0
+#define TX_PKT_FEATURES_TCP_HDR_LEN_LEN_HBIT_POS  0x1f
+#define TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_HBIT_POS  0x1
+#define TX_PKT_FEATURES_PKT_TYPE_IP_PKT_HBIT_POS  0
+#define TX_PKT_FEATURES_TUCSE_TCPCSE_HBIT_POS  0xf
+#define TX_PKT_FEATURES_TUCSO_TCPCSO_HBIT_POS  0x7
+#define TX_PKT_FEATURES_TUCSS_TCPCSS_HBIT_POS  0x7
+#define TX_PKT_FEATURES_IPCSE_IPCSE_HBIT_POS  0xf
+#define TX_PKT_FEATURES_IPCSO_IPCSO_HBIT_POS  0x7
+#define TX_PKT_FEATURES_IPCSS_IPCSS_HBIT_POS  0x7
+#define TX_PKT_FEATURES_PAY_LEN_PAY_LEN_HBIT_POS  0x3f
+#define TX_PKT_FEATURES_HDR_LEN_HDR_LEN_HBIT_POS  0x3f
+#define TX_PKT_FEATURES_MSS_MSS_HBIT_POS  0x3f
+#define TX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS  0x1f
+#define TX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS  0xf
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS  0x3
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_HBIT_POS  0x2
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_HBIT_POS  0x1
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_HBIT_POS  0
+
+/* virtual_registers Register-Field Read-Write Macros */
+#define RX_CONTEXT_DESC_RDES3_OWN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_CONTEXT_DESC_RDES3_OWN_HBIT_POS, RX_CONTEXT_DESC_RDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES3_OWN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_CONTEXT_DESC_RDES3_OWN_HBIT_POS, RX_CONTEXT_DESC_RDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES3_CTXT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_CONTEXT_DESC_RDES3_CTXT_HBIT_POS, RX_CONTEXT_DESC_RDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES3_CTXT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_CONTEXT_DESC_RDES3_CTXT_HBIT_POS, RX_CONTEXT_DESC_RDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES2_RESERVED_BITS_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_CONTEXT_DESC_RDES2_RESERVED_BITS_HBIT_POS, RX_CONTEXT_DESC_RDES2_RESERVED_BITS_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES2_RESERVED_BITS_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_CONTEXT_DESC_RDES2_RESERVED_BITS_HBIT_POS, RX_CONTEXT_DESC_RDES2_RESERVED_BITS_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES1_RTSH_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_CONTEXT_DESC_RDES1_RTSH_HBIT_POS, RX_CONTEXT_DESC_RDES1_RTSH_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES1_RTSH_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_CONTEXT_DESC_RDES1_RTSH_HBIT_POS, RX_CONTEXT_DESC_RDES1_RTSH_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES0_RTSL_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_CONTEXT_DESC_RDES0_RTSL_HBIT_POS, RX_CONTEXT_DESC_RDES0_RTSL_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES0_RTSL_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_CONTEXT_DESC_RDES0_RTSL_HBIT_POS, RX_CONTEXT_DESC_RDES0_RTSL_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_OWN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_OWN_HBIT_POS, TX_CONTEXT_DESC_TDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_OWN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_OWN_HBIT_POS, TX_CONTEXT_DESC_TDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_CTXT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_CTXT_HBIT_POS, TX_CONTEXT_DESC_TDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_CTXT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_CTXT_HBIT_POS, TX_CONTEXT_DESC_TDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_OSTC_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_OSTC_HBIT_POS, TX_CONTEXT_DESC_TDES3_OSTC_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_OSTC_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_OSTC_HBIT_POS, TX_CONTEXT_DESC_TDES3_OSTC_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_TCMSSV_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_TCMSSV_HBIT_POS, TX_CONTEXT_DESC_TDES3_TCMSSV_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_TCMSSV_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_TCMSSV_HBIT_POS, TX_CONTEXT_DESC_TDES3_TCMSSV_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_CDX_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_CDX_HBIT_POS, TX_CONTEXT_DESC_TDES3_CDX_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_CDX_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_CDX_HBIT_POS, TX_CONTEXT_DESC_TDES3_CDX_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_SVLTV_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_SVLTV_HBIT_POS, TX_CONTEXT_DESC_TDES3_SVLTV_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_SVLTV_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_SVLTV_HBIT_POS, TX_CONTEXT_DESC_TDES3_SVLTV_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_VLTV_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_VLTV_HBIT_POS, TX_CONTEXT_DESC_TDES3_VLTV_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_VLTV_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_VLTV_HBIT_POS, TX_CONTEXT_DESC_TDES3_VLTV_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_VT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES3_VT_HBIT_POS, TX_CONTEXT_DESC_TDES3_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_VT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES3_VT_HBIT_POS, TX_CONTEXT_DESC_TDES3_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES2_SVT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES2_SVT_HBIT_POS, TX_CONTEXT_DESC_TDES2_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES2_SVT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES2_SVT_HBIT_POS, TX_CONTEXT_DESC_TDES2_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES2_MSS_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES2_MSS_HBIT_POS, TX_CONTEXT_DESC_TDES2_MSS_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES2_MSS_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES2_MSS_HBIT_POS, TX_CONTEXT_DESC_TDES2_MSS_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES1_NDAP_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES1_NDAP_HBIT_POS, TX_CONTEXT_DESC_TDES1_NDAP_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES1_NDAP_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES1_NDAP_HBIT_POS, TX_CONTEXT_DESC_TDES1_NDAP_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES0_TTSL_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_CONTEXT_DESC_TDES0_TTSL_HBIT_POS, TX_CONTEXT_DESC_TDES0_TTSL_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES0_TTSL_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_CONTEXT_DESC_TDES0_TTSL_HBIT_POS, TX_CONTEXT_DESC_TDES0_TTSL_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_OWN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_OWN_HBIT_POS, RX_NORMAL_DESC_RDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_OWN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_OWN_HBIT_POS, RX_NORMAL_DESC_RDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_CTXT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_CTXT_HBIT_POS, RX_NORMAL_DESC_RDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_CTXT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_CTXT_HBIT_POS, RX_NORMAL_DESC_RDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_FD_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_FD_HBIT_POS, RX_NORMAL_DESC_RDES3_FD_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_FD_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_FD_HBIT_POS, RX_NORMAL_DESC_RDES3_FD_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_LD_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_LD_HBIT_POS, RX_NORMAL_DESC_RDES3_LD_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_LD_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_LD_HBIT_POS, RX_NORMAL_DESC_RDES3_LD_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_RS2V_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_RS2V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS2V_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_RS2V_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_RS2V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS2V_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_RS1V_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_RS1V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS1V_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_RS1V_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_RS1V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS1V_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_RS0V_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_RS0V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS0V_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_RS0V_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_RS0V_HBIT_POS, RX_NORMAL_DESC_RDES3_RS0V_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_CE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_CE_HBIT_POS, RX_NORMAL_DESC_RDES3_CE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_CE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_CE_HBIT_POS, RX_NORMAL_DESC_RDES3_CE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_GP_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_GP_HBIT_POS, RX_NORMAL_DESC_RDES3_GP_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_GP_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_GP_HBIT_POS, RX_NORMAL_DESC_RDES3_GP_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_RWT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_RWT_HBIT_POS, RX_NORMAL_DESC_RDES3_RWT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_RWT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_RWT_HBIT_POS, RX_NORMAL_DESC_RDES3_RWT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_OE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_OE_HBIT_POS, RX_NORMAL_DESC_RDES3_OE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_OE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_OE_HBIT_POS, RX_NORMAL_DESC_RDES3_OE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_RE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_RE_HBIT_POS, RX_NORMAL_DESC_RDES3_RE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_RE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_RE_HBIT_POS, RX_NORMAL_DESC_RDES3_RE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_DE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_DE_HBIT_POS, RX_NORMAL_DESC_RDES3_DE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_DE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_DE_HBIT_POS, RX_NORMAL_DESC_RDES3_DE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_LT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_LT_HBIT_POS, RX_NORMAL_DESC_RDES3_LT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_LT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_LT_HBIT_POS, RX_NORMAL_DESC_RDES3_LT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_ES_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_ES_HBIT_POS, RX_NORMAL_DESC_RDES3_ES_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_ES_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_ES_HBIT_POS, RX_NORMAL_DESC_RDES3_ES_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_FL_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES3_FL_HBIT_POS, RX_NORMAL_DESC_RDES3_FL_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_FL_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES3_FL_HBIT_POS, RX_NORMAL_DESC_RDES3_FL_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES2_B2AP_NDA_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES2_B2AP_NDA_HBIT_POS, RX_NORMAL_DESC_RDES2_B2AP_NDA_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES2_B2AP_NDA_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES2_B2AP_NDA_HBIT_POS, RX_NORMAL_DESC_RDES2_B2AP_NDA_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_COP_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_COP_HBIT_POS, RX_NORMAL_DESC_RDES1_COP_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_COP_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_COP_HBIT_POS, RX_NORMAL_DESC_RDES1_COP_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_TD_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_TD_HBIT_POS, RX_NORMAL_DESC_RDES1_TD_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_TD_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_TD_HBIT_POS, RX_NORMAL_DESC_RDES1_TD_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_TSA_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_TSA_HBIT_POS, RX_NORMAL_DESC_RDES1_TSA_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_TSA_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_TSA_HBIT_POS, RX_NORMAL_DESC_RDES1_TSA_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_PV_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_PV_HBIT_POS, RX_NORMAL_DESC_RDES1_PV_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_PV_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_PV_HBIT_POS, RX_NORMAL_DESC_RDES1_PV_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_PFT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_PFT_HBIT_POS, RX_NORMAL_DESC_RDES1_PFT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_PFT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_PFT_HBIT_POS, RX_NORMAL_DESC_RDES1_PFT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_PMT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_PMT_HBIT_POS, RX_NORMAL_DESC_RDES1_PMT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_PMT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_PMT_HBIT_POS, RX_NORMAL_DESC_RDES1_PMT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_IPPE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_IPPE_HBIT_POS, RX_NORMAL_DESC_RDES1_IPPE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_IPPE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_IPPE_HBIT_POS, RX_NORMAL_DESC_RDES1_IPPE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_IPCB_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_IPCB_HBIT_POS, RX_NORMAL_DESC_RDES1_IPCB_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_IPCB_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_IPCB_HBIT_POS, RX_NORMAL_DESC_RDES1_IPCB_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_IPV6_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_IPV6_HBIT_POS, RX_NORMAL_DESC_RDES1_IPV6_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_IPV6_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_IPV6_HBIT_POS, RX_NORMAL_DESC_RDES1_IPV6_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_IPV4_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_IPV4_HBIT_POS, RX_NORMAL_DESC_RDES1_IPV4_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_IPV4_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_IPV4_HBIT_POS, RX_NORMAL_DESC_RDES1_IPV4_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_IPHE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_IPHE_HBIT_POS, RX_NORMAL_DESC_RDES1_IPHE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_IPHE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_IPHE_HBIT_POS, RX_NORMAL_DESC_RDES1_IPHE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_PT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES1_PT_HBIT_POS, RX_NORMAL_DESC_RDES1_PT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_PT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES1_PT_HBIT_POS, RX_NORMAL_DESC_RDES1_PT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES0_HDR_B1AP_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_NORMAL_DESC_RDES0_HDR_B1AP_HBIT_POS, RX_NORMAL_DESC_RDES0_HDR_B1AP_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES0_HDR_B1AP_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_NORMAL_DESC_RDES0_HDR_B1AP_HBIT_POS, RX_NORMAL_DESC_RDES0_HDR_B1AP_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_OWN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_OWN_HBIT_POS, TX_NORMAL_DESC_TDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_OWN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_OWN_HBIT_POS, TX_NORMAL_DESC_TDES3_OWN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_CTXT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_CTXT_HBIT_POS, TX_NORMAL_DESC_TDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_CTXT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_CTXT_HBIT_POS, TX_NORMAL_DESC_TDES3_CTXT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_FD_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_FD_HBIT_POS, TX_NORMAL_DESC_TDES3_FD_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_FD_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_FD_HBIT_POS, TX_NORMAL_DESC_TDES3_FD_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_LD_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_LD_HBIT_POS, TX_NORMAL_DESC_TDES3_LD_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_LD_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_LD_HBIT_POS, TX_NORMAL_DESC_TDES3_LD_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_CPC_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_CPC_HBIT_POS, TX_NORMAL_DESC_TDES3_CPC_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_CPC_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_CPC_HBIT_POS, TX_NORMAL_DESC_TDES3_CPC_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_SAIC_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_SAIC_HBIT_POS, TX_NORMAL_DESC_TDES3_SAIC_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_SAIC_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_SAIC_HBIT_POS, TX_NORMAL_DESC_TDES3_SAIC_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_HBIT_POS, TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_HBIT_POS, TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_TSE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_TSE_HBIT_POS, TX_NORMAL_DESC_TDES3_TSE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_TSE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_TSE_HBIT_POS, TX_NORMAL_DESC_TDES3_TSE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_CIC_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_CIC_HBIT_POS, TX_NORMAL_DESC_TDES3_CIC_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_CIC_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_CIC_HBIT_POS, TX_NORMAL_DESC_TDES3_CIC_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_TIPLH_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_TIPLH_HBIT_POS, TX_NORMAL_DESC_TDES3_TIPLH_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_TIPLH_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_TIPLH_HBIT_POS, TX_NORMAL_DESC_TDES3_TIPLH_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_FL_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES3_FL_HBIT_POS, TX_NORMAL_DESC_TDES3_FL_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_FL_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES3_FL_HBIT_POS, TX_NORMAL_DESC_TDES3_FL_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_IC_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES2_IC_HBIT_POS, TX_NORMAL_DESC_TDES2_IC_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_IC_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES2_IC_HBIT_POS, TX_NORMAL_DESC_TDES2_IC_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_TTSE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES2_TTSE_HBIT_POS, TX_NORMAL_DESC_TDES2_TTSE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_TTSE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES2_TTSE_HBIT_POS, TX_NORMAL_DESC_TDES2_TTSE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_B2L_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES2_B2L_HBIT_POS, TX_NORMAL_DESC_TDES2_B2L_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_B2L_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES2_B2L_HBIT_POS, TX_NORMAL_DESC_TDES2_B2L_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_VTIR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES2_VTIR_HBIT_POS, TX_NORMAL_DESC_TDES2_VTIR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_VTIR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES2_VTIR_HBIT_POS, TX_NORMAL_DESC_TDES2_VTIR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES2_HL_B1L_HBIT_POS, TX_NORMAL_DESC_TDES2_HL_B1L_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES2_HL_B1L_HBIT_POS, TX_NORMAL_DESC_TDES2_HL_B1L_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES1_B2A_NDA_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES1_B2A_NDA_HBIT_POS, TX_NORMAL_DESC_TDES1_B2A_NDA_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES1_B2A_NDA_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES1_B2A_NDA_HBIT_POS, TX_NORMAL_DESC_TDES1_B2A_NDA_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES0_B1A_HAP_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_NORMAL_DESC_TDES0_B1A_HAP_HBIT_POS, TX_NORMAL_DESC_TDES0_B1A_HAP_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES0_B1A_HAP_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_NORMAL_DESC_TDES0_B1A_HAP_HBIT_POS, TX_NORMAL_DESC_TDES0_B1A_HAP_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_HEARTBEAT_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_WINDOW_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_FIFO_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_CARRIER_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_HBIT_POS, TX_ERROR_COUNTERS_TX_ERRORS_ABORTED_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_MISSED_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_FIFO_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_FRAME_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_CRC_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_OVERRUN_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_HBIT_POS, RX_ERROR_COUNTERS_RX_ERRORS_LENGTH_ERROR_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_PKT_FEATURES_VLAN_TAG_SVT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS, RX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_PKT_FEATURES_VLAN_TAG_SVT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS, RX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS, RX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS, RX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS, RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS, RX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_HBIT_POS, RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_HBIT_POS, RX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_DONE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TCP_HDR_LEN_LEN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_TCP_HDR_LEN_LEN_HBIT_POS, TX_PKT_FEATURES_TCP_HDR_LEN_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_TCP_HDR_LEN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_TCP_HDR_LEN_LEN_HBIT_POS, TX_PKT_FEATURES_TCP_HDR_LEN_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_TYPE_TCP_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_TYPE_IP_PKT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_TYPE_IP_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_TYPE_IP_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_TYPE_IP_PKT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_TYPE_IP_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_TYPE_IP_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSE_TCPCSE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_TUCSE_TCPCSE_HBIT_POS, TX_PKT_FEATURES_TUCSE_TCPCSE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSE_TCPCSE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_TUCSE_TCPCSE_HBIT_POS, TX_PKT_FEATURES_TUCSE_TCPCSE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSO_TCPCSO_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_TUCSO_TCPCSO_HBIT_POS, TX_PKT_FEATURES_TUCSO_TCPCSO_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSO_TCPCSO_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_TUCSO_TCPCSO_HBIT_POS, TX_PKT_FEATURES_TUCSO_TCPCSO_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSS_TCPCSS_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_TUCSS_TCPCSS_HBIT_POS, TX_PKT_FEATURES_TUCSS_TCPCSS_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSS_TCPCSS_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_TUCSS_TCPCSS_HBIT_POS, TX_PKT_FEATURES_TUCSS_TCPCSS_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSE_IPCSE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_IPCSE_IPCSE_HBIT_POS, TX_PKT_FEATURES_IPCSE_IPCSE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSE_IPCSE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_IPCSE_IPCSE_HBIT_POS, TX_PKT_FEATURES_IPCSE_IPCSE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSO_IPCSO_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_IPCSO_IPCSO_HBIT_POS, TX_PKT_FEATURES_IPCSO_IPCSO_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSO_IPCSO_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_IPCSO_IPCSO_HBIT_POS, TX_PKT_FEATURES_IPCSO_IPCSO_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSS_IPCSS_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_IPCSS_IPCSS_HBIT_POS, TX_PKT_FEATURES_IPCSS_IPCSS_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSS_IPCSS_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_IPCSS_IPCSS_HBIT_POS, TX_PKT_FEATURES_IPCSS_IPCSS_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PAY_LEN_PAY_LEN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PAY_LEN_PAY_LEN_HBIT_POS, TX_PKT_FEATURES_PAY_LEN_PAY_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PAY_LEN_PAY_LEN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PAY_LEN_PAY_LEN_HBIT_POS, TX_PKT_FEATURES_PAY_LEN_PAY_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_HDR_LEN_HDR_LEN_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_HDR_LEN_HDR_LEN_HBIT_POS, TX_PKT_FEATURES_HDR_LEN_HDR_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_HDR_LEN_HDR_LEN_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_HDR_LEN_HDR_LEN_HBIT_POS, TX_PKT_FEATURES_HDR_LEN_HDR_LEN_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_MSS_MSS_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_MSS_MSS_HBIT_POS, TX_PKT_FEATURES_MSS_MSS_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_MSS_MSS_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_MSS_MSS_HBIT_POS, TX_PKT_FEATURES_MSS_MSS_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_VLAN_TAG_SVT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS, TX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_VLAN_TAG_SVT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_VLAN_TAG_SVT_HBIT_POS, TX_PKT_FEATURES_VLAN_TAG_SVT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS, TX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_VLAN_TAG_VT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_VLAN_TAG_VT_HBIT_POS, TX_PKT_FEATURES_VLAN_TAG_VT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_VLAN_PKT_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_PTP_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_TSO_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_Mlf_Rd(ptr, data) do { \
+  GET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_Mlf_Wr(ptr, data) do { \
+  SET_BITS(TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_HBIT_POS, TX_PKT_FEATURES_PKT_ATTRIBUTES_CSUM_ENABLE_LBIT_POS, ptr, data); \
+} while(0)
+
+
+
+/* virtual_registers Register Read-Write Macros */
+#define RX_CONTEXT_DESC_RDES3_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES3_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES2_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES2_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES1_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES1_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_CONTEXT_DESC_RDES0_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_CONTEXT_DESC_RDES0_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES3_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES3_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES2_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES2_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES1_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES1_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_CONTEXT_DESC_TDES0_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_CONTEXT_DESC_TDES0_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES3_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES3_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES2_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES2_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES1_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES1_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RDES0_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_RDES0_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_TX_ERRORS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_TX_ERRORS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_RX_BUF_PTR_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_RX_BUF_PTR_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_NEXT_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_NEXT_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_NORMAL_DESC_SKB_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_NORMAL_DESC_SKB_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES3_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES3_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES2_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES2_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES1_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES1_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TDES0_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_TDES0_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_TX_BUF_PTR_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_TX_BUF_PTR_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_NORMAL_DESC_NEXT_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_NORMAL_DESC_NEXT_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_ERROR_COUNTERS_TX_ERRORS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_ERROR_COUNTERS_RX_ERRORS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_PKT_FEATURES_VLAN_TAG_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_PKT_FEATURES_VLAN_TAG_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define RX_PKT_FEATURES_PKT_ATTRIBUTES_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TCP_HDR_LEN_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_TCP_HDR_LEN_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_TYPE_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_TYPE_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSE_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSE_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSO_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSO_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_TUCSS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_TUCSS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSE_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSE_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSO_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSO_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_IPCSS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_IPCSS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PAY_LEN_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_PAY_LEN_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_HDR_LEN_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_HDR_LEN_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_MSS_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_MSS_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_VLAN_TAG_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_VLAN_TAG_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_Ml_Rd(ptr, data) do { \
+	data = ptr; \
+} while(0)
+
+#define TX_PKT_FEATURES_PKT_ATTRIBUTES_Ml_Wr(ptr, data) do { \
+	ptr = data; \
+} while(0)
+
+
+
+#define  BASE_ADDRESS dwc_eth_qos_pci_base_addr
+
+#define MAC_ARPA_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xae0))
+
+#define MAC_ARPA_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_ARPA_RgOffAddr);\
+} while(0)
+
+#define MAC_ARPA_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ARPA_RgOffAddr);\
+} while(0)
+
+#define MAC_ARPA_ARPPA_UdfWr(data) do {\
+		MAC_ARPA_RgWr(data);\
+} while(0)
+
+#define MAC_ARPA_ARPPA_UdfRd(data) do {\
+		MAC_ARPA_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa6c))
+
+#define MAC_L3A3R7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R7_L3A30_UdfWr(data) do {\
+		MAC_L3A3R7_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R7_L3A30_UdfRd(data) do {\
+		MAC_L3A3R7_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa3c))
+
+#define MAC_L3A3R6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R6_L3A30_UdfWr(data) do {\
+		MAC_L3A3R6_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R6_L3A30_UdfRd(data) do {\
+		MAC_L3A3R6_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa0c))
+
+#define MAC_L3A3R5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R5_L3A30_UdfWr(data) do {\
+		MAC_L3A3R5_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R5_L3A30_UdfRd(data) do {\
+		MAC_L3A3R5_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9dc))
+
+#define MAC_L3A3R4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R4_L3A30_UdfWr(data) do {\
+		MAC_L3A3R4_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R4_L3A30_UdfRd(data) do {\
+		MAC_L3A3R4_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9ac))
+
+#define MAC_L3A3R3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R3_L3A30_UdfWr(data) do {\
+		MAC_L3A3R3_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R3_L3A30_UdfRd(data) do {\
+		MAC_L3A3R3_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x97c))
+
+#define MAC_L3A3R2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R2_L3A30_UdfWr(data) do {\
+		MAC_L3A3R2_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R2_L3A30_UdfRd(data) do {\
+		MAC_L3A3R2_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x94c))
+
+#define MAC_L3A3R1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R1_L3A30_UdfWr(data) do {\
+		MAC_L3A3R1_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R1_L3A30_UdfRd(data) do {\
+		MAC_L3A3R1_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A3R0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x91c))
+
+#define MAC_L3A3R0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A3R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A3R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A3R0_L3A30_UdfWr(data) do {\
+		MAC_L3A3R0_RgWr(data);\
+} while(0)
+
+#define MAC_L3A3R0_L3A30_UdfRd(data) do {\
+		MAC_L3A3R0_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa68))
+
+#define MAC_L3A2R7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R7_L3A20_UdfWr(data) do {\
+		MAC_L3A2R7_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R7_L3A20_UdfRd(data) do {\
+		MAC_L3A2R7_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa38))
+
+#define MAC_L3A2R6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R6_L3A20_UdfWr(data) do {\
+		MAC_L3A2R6_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R6_L3A20_UdfRd(data) do {\
+		MAC_L3A2R6_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa08))
+
+#define MAC_L3A2R5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R5_L3A20_UdfWr(data) do {\
+		MAC_L3A2R5_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R5_L3A20_UdfRd(data) do {\
+		MAC_L3A2R5_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9d8))
+
+#define MAC_L3A2R4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R4_L3A20_UdfWr(data) do {\
+		MAC_L3A2R4_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R4_L3A20_UdfRd(data) do {\
+		MAC_L3A2R4_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9a8))
+
+#define MAC_L3A2R3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R3_L3A20_UdfWr(data) do {\
+		MAC_L3A2R3_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R3_L3A20_UdfRd(data) do {\
+		MAC_L3A2R3_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x978))
+
+#define MAC_L3A2R2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R2_L3A20_UdfWr(data) do {\
+		MAC_L3A2R2_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R2_L3A20_UdfRd(data) do {\
+		MAC_L3A2R2_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x948))
+
+#define MAC_L3A2R1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R1_L3A20_UdfWr(data) do {\
+		MAC_L3A2R1_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R1_L3A20_UdfRd(data) do {\
+		MAC_L3A2R1_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A2R0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x918))
+
+#define MAC_L3A2R0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A2R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A2R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A2R0_L3A20_UdfWr(data) do {\
+		MAC_L3A2R0_RgWr(data);\
+} while(0)
+
+#define MAC_L3A2R0_L3A20_UdfRd(data) do {\
+		MAC_L3A2R0_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa64))
+
+#define MAC_L3A1R7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R7_L3A10_UdfWr(data) do {\
+		MAC_L3A1R7_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R7_L3A10_UdfRd(data) do {\
+		MAC_L3A1R7_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa34))
+
+#define MAC_L3A1R6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R6_L3A10_UdfWr(data) do {\
+		MAC_L3A1R6_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R6_L3A10_UdfRd(data) do {\
+		MAC_L3A1R6_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa04))
+
+#define MAC_L3A1R5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R5_L3A10_UdfWr(data) do {\
+		MAC_L3A1R5_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R5_L3A10_UdfRd(data) do {\
+		MAC_L3A1R5_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9d4))
+
+#define MAC_L3A1R4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R4_L3A10_UdfWr(data) do {\
+		MAC_L3A1R4_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R4_L3A10_UdfRd(data) do {\
+		MAC_L3A1R4_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9a4))
+
+#define MAC_L3A1R3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R3_L3A10_UdfWr(data) do {\
+		MAC_L3A1R3_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R3_L3A10_UdfRd(data) do {\
+		MAC_L3A1R3_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x974))
+
+#define MAC_L3A1R2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R2_L3A10_UdfWr(data) do {\
+		MAC_L3A1R2_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R2_L3A10_UdfRd(data) do {\
+		MAC_L3A1R2_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x944))
+
+#define MAC_L3A1R1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R1_L3A10_UdfWr(data) do {\
+		MAC_L3A1R1_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R1_L3A10_UdfRd(data) do {\
+		MAC_L3A1R1_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A1R0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x914))
+
+#define MAC_L3A1R0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A1R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A1R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A1R0_L3A10_UdfWr(data) do {\
+		MAC_L3A1R0_RgWr(data);\
+} while(0)
+
+#define MAC_L3A1R0_L3A10_UdfRd(data) do {\
+		MAC_L3A1R0_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa60))
+
+#define MAC_L3A0R7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R7_L3A00_UdfWr(data) do {\
+		MAC_L3A0R7_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R7_L3A00_UdfRd(data) do {\
+		MAC_L3A0R7_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa30))
+
+#define MAC_L3A0R6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R6_L3A00_UdfWr(data) do {\
+		MAC_L3A0R6_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R6_L3A00_UdfRd(data) do {\
+		MAC_L3A0R6_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa00))
+
+#define MAC_L3A0R5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R5_L3A00_UdfWr(data) do {\
+		MAC_L3A0R5_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R5_L3A00_UdfRd(data) do {\
+		MAC_L3A0R5_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9d0))
+
+#define MAC_L3A0R4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R4_L3A00_UdfWr(data) do {\
+		MAC_L3A0R4_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R4_L3A00_UdfRd(data) do {\
+		MAC_L3A0R4_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9a0))
+
+#define MAC_L3A0R3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R3_L3A00_UdfWr(data) do {\
+		MAC_L3A0R3_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R3_L3A00_UdfRd(data) do {\
+		MAC_L3A0R3_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x970))
+
+#define MAC_L3A0R2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R2_L3A00_UdfWr(data) do {\
+		MAC_L3A0R2_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R2_L3A00_UdfRd(data) do {\
+		MAC_L3A0R2_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x940))
+
+#define MAC_L3A0R1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R1_L3A00_UdfWr(data) do {\
+		MAC_L3A0R1_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R1_L3A00_UdfRd(data) do {\
+		MAC_L3A0R1_RgRd(data);\
+} while(0)
+
+
+#define MAC_L3A0R0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x910))
+
+#define MAC_L3A0R0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3A0R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3A0R0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3A0R0_L3A00_UdfWr(data) do {\
+		MAC_L3A0R0_RgWr(data);\
+} while(0)
+
+#define MAC_L3A0R0_L3A00_UdfRd(data) do {\
+		MAC_L3A0R0_RgRd(data);\
+} while(0)
+
+
+#define MAC_L4AR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa54))
+
+#define MAC_L4AR7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR7_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR7_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR7_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR7_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR7_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR7_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR7_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR7_RgRd(v);\
+		v = ((v & MAC_L4AR7_L4SP0_Wr_Mask) | ((data & MAC_L4AR7_L4SP0_Mask)<<0));\
+		MAC_L4AR7_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR7_L4SP0_UdfRd(data) do {\
+		MAC_L4AR7_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR7_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR7_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR7_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR7_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR7_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR7_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR7_RgRd(v);\
+		v = ((v & MAC_L4AR7_L4DP0_Wr_Mask) | ((data & MAC_L4AR7_L4DP0_Mask)<<16));\
+		MAC_L4AR7_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR7_L4DP0_UdfRd(data) do {\
+		MAC_L4AR7_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR7_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa24))
+
+#define MAC_L4AR6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR6_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR6_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR6_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR6_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR6_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR6_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR6_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR6_RgRd(v);\
+		v = ((v & MAC_L4AR6_L4SP0_Wr_Mask) | ((data & MAC_L4AR6_L4SP0_Mask)<<0));\
+		MAC_L4AR6_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR6_L4SP0_UdfRd(data) do {\
+		MAC_L4AR6_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR6_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR6_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR6_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR6_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR6_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR6_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR6_RgRd(v);\
+		v = ((v & MAC_L4AR6_L4DP0_Wr_Mask) | ((data & MAC_L4AR6_L4DP0_Mask)<<16));\
+		MAC_L4AR6_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR6_L4DP0_UdfRd(data) do {\
+		MAC_L4AR6_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR6_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9f4))
+
+#define MAC_L4AR5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR5_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR5_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR5_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR5_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR5_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR5_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR5_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR5_RgRd(v);\
+		v = ((v & MAC_L4AR5_L4SP0_Wr_Mask) | ((data & MAC_L4AR5_L4SP0_Mask)<<0));\
+		MAC_L4AR5_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR5_L4SP0_UdfRd(data) do {\
+		MAC_L4AR5_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR5_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR5_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR5_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR5_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR5_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR5_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR5_RgRd(v);\
+		v = ((v & MAC_L4AR5_L4DP0_Wr_Mask) | ((data & MAC_L4AR5_L4DP0_Mask)<<16));\
+		MAC_L4AR5_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR5_L4DP0_UdfRd(data) do {\
+		MAC_L4AR5_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR5_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9c4))
+
+#define MAC_L4AR4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR4_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR4_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR4_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR4_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR4_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR4_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR4_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR4_RgRd(v);\
+		v = ((v & MAC_L4AR4_L4SP0_Wr_Mask) | ((data & MAC_L4AR4_L4SP0_Mask)<<0));\
+		MAC_L4AR4_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR4_L4SP0_UdfRd(data) do {\
+		MAC_L4AR4_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR4_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR4_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR4_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR4_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR4_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR4_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR4_RgRd(v);\
+		v = ((v & MAC_L4AR4_L4DP0_Wr_Mask) | ((data & MAC_L4AR4_L4DP0_Mask)<<16));\
+		MAC_L4AR4_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR4_L4DP0_UdfRd(data) do {\
+		MAC_L4AR4_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR4_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x994))
+
+#define MAC_L4AR3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR3_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR3_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR3_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR3_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR3_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR3_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR3_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR3_RgRd(v);\
+		v = ((v & MAC_L4AR3_L4SP0_Wr_Mask) | ((data & MAC_L4AR3_L4SP0_Mask)<<0));\
+		MAC_L4AR3_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR3_L4SP0_UdfRd(data) do {\
+		MAC_L4AR3_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR3_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR3_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR3_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR3_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR3_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR3_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR3_RgRd(v);\
+		v = ((v & MAC_L4AR3_L4DP0_Wr_Mask) | ((data & MAC_L4AR3_L4DP0_Mask)<<16));\
+		MAC_L4AR3_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR3_L4DP0_UdfRd(data) do {\
+		MAC_L4AR3_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR3_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x964))
+
+#define MAC_L4AR2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR2_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR2_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR2_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR2_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR2_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR2_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR2_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR2_RgRd(v);\
+		v = ((v & MAC_L4AR2_L4SP0_Wr_Mask) | ((data & MAC_L4AR2_L4SP0_Mask)<<0));\
+		MAC_L4AR2_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR2_L4SP0_UdfRd(data) do {\
+		MAC_L4AR2_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR2_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR2_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR2_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR2_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR2_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR2_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR2_RgRd(v);\
+		v = ((v & MAC_L4AR2_L4DP0_Wr_Mask) | ((data & MAC_L4AR2_L4DP0_Mask)<<16));\
+		MAC_L4AR2_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR2_L4DP0_UdfRd(data) do {\
+		MAC_L4AR2_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR2_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x934))
+
+#define MAC_L4AR1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR1_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR1_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR1_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR1_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR1_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR1_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR1_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR1_RgRd(v);\
+		v = ((v & MAC_L4AR1_L4SP0_Wr_Mask) | ((data & MAC_L4AR1_L4SP0_Mask)<<0));\
+		MAC_L4AR1_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR1_L4SP0_UdfRd(data) do {\
+		MAC_L4AR1_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR1_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR1_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR1_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR1_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR1_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR1_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR1_RgRd(v);\
+		v = ((v & MAC_L4AR1_L4DP0_Wr_Mask) | ((data & MAC_L4AR1_L4DP0_Mask)<<16));\
+		MAC_L4AR1_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR1_L4DP0_UdfRd(data) do {\
+		MAC_L4AR1_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR1_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L4AR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x904))
+
+#define MAC_L4AR0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L4AR0_RgOffAddr);\
+} while(0)
+
+#define MAC_L4AR0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L4AR0_RgOffAddr);\
+} while(0)
+
+/*#define MAC_L4AR0_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR0_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR0_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR0_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR0_L4SP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR0_RgRd(v);\
+		v = ((v & MAC_L4AR0_L4SP0_Wr_Mask) | ((data & MAC_L4AR0_L4SP0_Mask)<<0));\
+		MAC_L4AR0_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR0_L4SP0_UdfRd(data) do {\
+		MAC_L4AR0_RgRd(data);\
+		data = ((data >> 0) & MAC_L4AR0_L4SP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR0_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR0_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR0_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR0_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR0_L4DP0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_L4AR0_RgRd(v);\
+		v = ((v & MAC_L4AR0_L4DP0_Wr_Mask) | ((data & MAC_L4AR0_L4DP0_Mask)<<16));\
+		MAC_L4AR0_RgWr(v);\
+} while(0)
+
+#define MAC_L4AR0_L4DP0_UdfRd(data) do {\
+		MAC_L4AR0_RgRd(data);\
+		data = ((data >> 16) & MAC_L4AR0_L4DP0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa50))
+
+#define MAC_L3L4CR7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR7_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR7_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR7_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR7_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR7_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR7_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR7_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR7_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR7_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR7_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR7_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR7_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR7_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR7_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR7_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR7_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR7_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR7_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR7_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR7_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR7_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR7_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR7_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR7_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR7_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR7_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR7_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR7_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR7_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR7_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR7_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR7_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR7_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR7_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR7_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR7_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR7_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR7_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR7_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR7_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR7_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR7_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR7_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR7_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR7_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR7_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR7_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR7_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR7_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR7_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR7_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR7_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR7_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR7_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR7_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR7_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR7_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR7_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR7_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR7_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR7_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR7_RgRd(v);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR7_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR7_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR7_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR7_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR7_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR7_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR7_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR7_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR7_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR7_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa20))
+
+#define MAC_L3L4CR6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR6_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR6_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR6_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR6_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR6_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR6_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR6_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR6_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR6_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR6_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR6_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR6_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR6_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR6_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR6_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR6_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR6_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR6_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR6_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR6_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR6_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR6_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR6_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR6_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR6_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR6_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR6_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR6_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR6_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR6_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR6_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR6_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR6_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR6_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR6_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR6_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR6_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR6_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR6_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR6_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR6_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR6_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR6_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR6_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR6_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR6_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR6_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR6_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR6_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR6_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR6_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR6_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR6_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR6_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR6_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR6_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR6_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR6_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR6_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR6_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR6_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR6_RgRd(v);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR6_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR6_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR6_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR6_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR6_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR6_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR6_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR6_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR6_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR6_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9f0))
+
+#define MAC_L3L4CR5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR5_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR5_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR5_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR5_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR5_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR5_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR5_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR5_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR5_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR5_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR5_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR5_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR5_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR5_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR5_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR5_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR5_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR5_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR5_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR5_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR5_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR5_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR5_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR5_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR5_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR5_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR5_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR5_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR5_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR5_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR5_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR5_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR5_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR5_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR5_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR5_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR5_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR5_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR5_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR5_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR5_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR5_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR5_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR5_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR5_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR5_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR5_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR5_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR5_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR5_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR5_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR5_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR5_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR5_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR5_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR5_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR5_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR5_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR5_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR5_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR5_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR5_RgRd(v);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR5_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR5_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR5_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR5_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR5_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR5_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR5_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR5_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR5_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR5_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9c0))
+
+#define MAC_L3L4CR4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR4_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR4_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR4_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR4_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR4_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR4_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR4_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR4_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR4_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR4_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR4_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR4_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR4_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR4_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR4_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR4_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR4_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR4_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR4_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR4_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR4_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR4_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR4_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR4_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR4_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR4_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR4_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR4_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR4_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR4_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR4_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR4_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR4_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR4_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR4_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR4_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR4_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR4_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR4_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR4_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR4_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR4_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR4_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR4_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR4_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR4_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR4_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR4_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR4_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR4_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR4_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR4_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR4_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR4_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR4_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR4_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR4_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR4_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR4_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR4_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR4_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR4_RgRd(v);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR4_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR4_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR4_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR4_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR4_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR4_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR4_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR4_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR4_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR4_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x990))
+
+#define MAC_L3L4CR3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR3_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR3_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR3_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR3_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR3_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR3_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR3_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR3_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR3_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR3_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR3_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR3_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR3_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR3_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR3_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR3_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR3_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR3_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR3_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR3_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR3_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR3_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR3_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR3_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR3_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR3_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR3_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR3_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR3_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR3_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR3_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR3_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR3_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR3_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR3_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR3_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR3_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR3_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR3_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR3_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR3_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR3_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR3_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR3_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR3_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR3_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR3_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR3_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR3_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR3_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR3_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR3_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR3_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR3_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR3_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR3_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR3_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR3_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR3_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR3_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR3_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR3_RgRd(v);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR3_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR3_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR3_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR3_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR3_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR3_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR3_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR3_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR3_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR3_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x960))
+
+#define MAC_L3L4CR2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR2_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR2_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR2_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR2_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR2_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR2_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR2_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR2_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR2_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR2_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR2_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR2_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR2_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR2_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR2_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR2_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR2_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR2_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR2_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR2_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR2_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR2_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR2_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR2_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR2_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR2_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR2_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR2_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR2_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR2_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR2_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR2_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR2_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR2_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR2_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR2_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR2_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR2_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR2_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR2_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR2_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR2_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR2_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR2_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR2_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR2_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR2_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR2_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR2_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR2_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR2_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR2_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR2_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR2_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR2_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR2_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR2_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR2_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR2_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR2_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR2_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR2_RgRd(v);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR2_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR2_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR2_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR2_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR2_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR2_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR2_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR2_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR2_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR2_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x930))
+
+#define MAC_L3L4CR1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR1_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR1_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR1_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR1_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR1_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR1_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR1_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR1_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR1_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR1_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR1_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR1_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR1_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR1_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR1_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR1_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR1_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR1_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR1_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR1_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR1_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR1_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR1_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR1_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR1_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR1_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR1_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR1_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR1_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR1_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR1_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR1_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR1_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR1_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR1_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR1_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR1_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR1_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR1_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR1_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR1_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR1_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR1_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR1_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR1_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR1_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR1_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR1_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR1_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR1_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR1_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR1_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR1_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR1_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR1_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR1_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR1_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR1_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR1_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR1_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR1_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR1_RgRd(v);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR1_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR1_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR1_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR1_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR1_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR1_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR1_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR1_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR1_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR1_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x900))
+
+#define MAC_L3L4CR0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR0_RgOffAddr);\
+} while(0)
+
+#define MAC_L3L4CR0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR0_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_L3L4CR0_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR0_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR0_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define  MAC_L3L4CR0_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR0_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR0_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR0_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR0_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR0_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR0_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define MAC_L3L4CR0_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR0_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR0_L3PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR0_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3PEN0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 0) & MAC_L3L4CR0_L3PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR0_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR0_L3SAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3SAM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 2) & MAC_L3L4CR0_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR0_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR0_L3SAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3SAIM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 3) & MAC_L3L4CR0_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR0_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR0_L3DAM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3DAM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 4) & MAC_L3L4CR0_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR0_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR0_L3DAIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3DAIM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 5) & MAC_L3L4CR0_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR0_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR0_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR0_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR0_L3HSBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3HSBM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 6) & MAC_L3L4CR0_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR0_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR0_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR0_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR0_L3HDBM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR0_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L3HDBM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 11) & MAC_L3L4CR0_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR0_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR0_L4PEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR0_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L4PEN0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 16) & MAC_L3L4CR0_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR0_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR0_L4SPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR0_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L4SPM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 18) & MAC_L3L4CR0_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR0_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR0_L4SPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR0_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L4SPIM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 19) & MAC_L3L4CR0_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR0_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR0_L4DPM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR0_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L4DPM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 20) & MAC_L3L4CR0_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR0_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR0_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR0_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR0_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR0_L4DPIM0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_L3L4CR0_RgRd(v);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR0_Mask_1))<<1);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR0_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR0_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR0_Mask_22))<<22);\
+		v = ((v & MAC_L3L4CR0_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR0_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR0_RgWr(v);\
+} while(0)
+
+#define MAC_L3L4CR0_L4DPIM0_UdfRd(data) do {\
+		MAC_L3L4CR0_RgRd(data);\
+		data = ((data >> 21) & MAC_L3L4CR0_L4DPIM0_Mask);\
+} while(0)
+
+
+#define MAC_GPIOS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x20c))
+
+#define MAC_GPIOS_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_GPIOS_RgOffAddr);\
+} while(0)
+
+#define MAC_GPIOS_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_GPIOS_RgOffAddr);\
+} while(0)
+
+/*#define MAC_GPIOS_GPO_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_GPIOS_GPO_Mask (ULONG)(0xffff)
+
+/*#define MAC_GPIOS_GPO_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_GPIOS_GPO_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_GPIOS_GPO_UdfWr(data) do{\
+		ULONG v;\
+		MAC_GPIOS_RgRd(v);\
+		v = ((v & MAC_GPIOS_GPO_Wr_Mask) | ((data & MAC_GPIOS_GPO_Mask)<<16));\
+		MAC_GPIOS_RgWr(v);\
+} while(0)
+
+#define MAC_GPIOS_GPO_UdfRd(data) do {\
+		MAC_GPIOS_RgRd(data);\
+		data = ((data >> 16) & MAC_GPIOS_GPO_Mask);\
+} while(0)
+
+/*#define MAC_GPIOS_GPIS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_GPIOS_GPIS_Mask (ULONG)(0xffff)
+
+#define MAC_GPIOS_GPIS_UdfRd(data) do {\
+		MAC_GPIOS_RgRd(data);\
+		data = ((data >> 0) & MAC_GPIOS_GPIS_Mask);\
+} while(0)
+
+
+#define MAC_PCS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xf8))
+
+#define MAC_PCS_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PCS_RgOffAddr);\
+} while(0)
+
+#define MAC_PCS_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PCS_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_PCS_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_PCS_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_PCS_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_PCS_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define  MAC_PCS_Mask_5 (ULONG)(~(~0<<(11)))*/
+
+#define  MAC_PCS_Mask_5 (ULONG)(0x7ff)
+
+/*#define MAC_PCS_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(11)))<<(5)))*/
+
+#define MAC_PCS_RES_Wr_Mask_5 (ULONG)(0xffff001f)
+
+/*#define  MAC_PCS_Mask_3 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_PCS_Mask_3 (ULONG)(0x1)
+
+/*#define MAC_PCS_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(1)))<<(3)))*/
+
+#define MAC_PCS_RES_Wr_Mask_3 (ULONG)(0xfffffff7)
+
+/*#define MAC_PCS_FALSCARDET_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_FALSCARDET_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_FALSCARDET_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_PCS_FALSCARDET_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_PCS_FALSCARDET_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_FALSCARDET_Wr_Mask) | ((data & MAC_PCS_FALSCARDET_Mask)<<21));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_FALSCARDET_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 21) & MAC_PCS_FALSCARDET_Mask);\
+} while(0)
+
+/*#define MAC_PCS_JABTO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_JABTO_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_JABTO_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_PCS_JABTO_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_PCS_JABTO_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_JABTO_Wr_Mask) | ((data & MAC_PCS_JABTO_Mask)<<20));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_JABTO_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 20) & MAC_PCS_JABTO_Mask);\
+} while(0)
+
+/*#define MAC_PCS_LNKSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_LNKSTS_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_LNKSTS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_PCS_LNKSTS_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_PCS_LNKSTS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_LNKSTS_Wr_Mask) | ((data & MAC_PCS_LNKSTS_Mask)<<19));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_LNKSTS_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 19) & MAC_PCS_LNKSTS_Mask);\
+} while(0)
+
+/*#define MAC_PCS_LNKSPEED_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_PCS_LNKSPEED_Mask (ULONG)(0x3)
+
+/*#define MAC_PCS_LNKSPEED_Wr_Mask (ULONG)(~((~(~0 << (2))) << (17)))*/
+
+#define MAC_PCS_LNKSPEED_Wr_Mask (ULONG)(0xfff9ffff)
+
+#define MAC_PCS_LNKSPEED_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_LNKSPEED_Wr_Mask) | ((data & MAC_PCS_LNKSPEED_Mask)<<17));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_LNKSPEED_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 17) & MAC_PCS_LNKSPEED_Mask);\
+} while(0)
+
+/*#define MAC_PCS_LNKMOD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_LNKMOD_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_LNKMOD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_PCS_LNKMOD_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_PCS_LNKMOD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_LNKMOD_Wr_Mask) | ((data & MAC_PCS_LNKMOD_Mask)<<16));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_LNKMOD_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 16) & MAC_PCS_LNKMOD_Mask);\
+} while(0)
+
+/*#define MAC_PCS_SMIDRXS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_SMIDRXS_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_SMIDRXS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_PCS_SMIDRXS_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_PCS_SMIDRXS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_SMIDRXS_Wr_Mask) | ((data & MAC_PCS_SMIDRXS_Mask)<<4));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_SMIDRXS_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 4) & MAC_PCS_SMIDRXS_Mask);\
+} while(0)
+
+/*#define MAC_PCS_SFTERR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_SFTERR_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_SFTERR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_PCS_SFTERR_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_PCS_SFTERR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_SFTERR_Wr_Mask) | ((data & MAC_PCS_SFTERR_Mask)<<2));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_SFTERR_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 2) & MAC_PCS_SFTERR_Mask);\
+} while(0)
+
+/*#define MAC_PCS_LUD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_LUD_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_LUD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_PCS_LUD_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_PCS_LUD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_LUD_Wr_Mask) | ((data & MAC_PCS_LUD_Mask)<<1));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_LUD_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 1) & MAC_PCS_LUD_Mask);\
+} while(0)
+
+/*#define MAC_PCS_TC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PCS_TC_Mask (ULONG)(0x1)
+
+/*#define MAC_PCS_TC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_PCS_TC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_PCS_TC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PCS_RgRd(v);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_22))|((( 0) & (MAC_PCS_Mask_22))<<22);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_5))|((( 0) & (MAC_PCS_Mask_5))<<5);\
+		v = (v & (MAC_PCS_RES_Wr_Mask_3))|((( 0) & (MAC_PCS_Mask_3))<<3);\
+		v = ((v & MAC_PCS_TC_Wr_Mask) | ((data & MAC_PCS_TC_Mask)<<0));\
+		MAC_PCS_RgWr(v);\
+} while(0)
+
+#define MAC_PCS_TC_UdfRd(data) do {\
+		MAC_PCS_RgRd(data);\
+		data = ((data >> 0) & MAC_PCS_TC_Mask);\
+} while(0)
+
+
+#define MAC_TES_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xf4))
+
+#define MAC_TES_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TES_RgOffAddr);\
+} while(0)
+
+/*#define MAC_TES_GFD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TES_GFD_Mask (ULONG)(0x1)
+
+#define MAC_TES_GFD_UdfRd(data) do {\
+		MAC_TES_RgRd(data);\
+		data = ((data >> 15) & MAC_TES_GFD_Mask);\
+} while(0)
+
+/*#define MAC_TES_GHD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TES_GHD_Mask (ULONG)(0x1)
+
+#define MAC_TES_GHD_UdfRd(data) do {\
+		MAC_TES_RgRd(data);\
+		data = ((data >> 14) & MAC_TES_GHD_Mask);\
+} while(0)
+
+
+#define MAC_AE_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xf0))
+
+#define MAC_AE_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_AE_RgOffAddr);\
+} while(0)
+
+/*#define MAC_AE_NPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AE_NPA_Mask (ULONG)(0x1)
+
+#define MAC_AE_NPA_UdfRd(data) do {\
+		MAC_AE_RgRd(data);\
+		data = ((data >> 2) & MAC_AE_NPA_Mask);\
+} while(0)
+
+/*#define MAC_AE_NPR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AE_NPR_Mask (ULONG)(0x1)
+
+#define MAC_AE_NPR_UdfRd(data) do {\
+		MAC_AE_RgRd(data);\
+		data = ((data >> 1) & MAC_AE_NPR_Mask);\
+} while(0)
+
+
+#define MAC_ALPA_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xec))
+
+#define MAC_ALPA_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ALPA_RgOffAddr);\
+} while(0)
+
+/*#define MAC_ALPA_NP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ALPA_NP_Mask (ULONG)(0x1)
+
+#define MAC_ALPA_NP_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 15) & MAC_ALPA_NP_Mask);\
+} while(0)
+
+/*#define MAC_ALPA_ACK_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ALPA_ACK_Mask (ULONG)(0x1)
+
+#define MAC_ALPA_ACK_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 14) & MAC_ALPA_ACK_Mask);\
+} while(0)
+
+/*#define MAC_ALPA_RFE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_ALPA_RFE_Mask (ULONG)(0x3)
+
+#define MAC_ALPA_RFE_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 12) & MAC_ALPA_RFE_Mask);\
+} while(0)
+
+/*#define MAC_ALPA_PSE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_ALPA_PSE_Mask (ULONG)(0x3)
+
+#define MAC_ALPA_PSE_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 7) & MAC_ALPA_PSE_Mask);\
+} while(0)
+
+/*#define MAC_ALPA_HD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ALPA_HD_Mask (ULONG)(0x1)
+
+#define MAC_ALPA_HD_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 6) & MAC_ALPA_HD_Mask);\
+} while(0)
+
+/*#define MAC_ALPA_FD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ALPA_FD_Mask (ULONG)(0x1)
+
+#define MAC_ALPA_FD_UdfRd(data) do {\
+		MAC_ALPA_RgRd(data);\
+		data = ((data >> 5) & MAC_ALPA_FD_Mask);\
+} while(0)
+
+
+#define MAC_AAD_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe8))
+
+#define MAC_AAD_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_AAD_RgOffAddr);\
+} while(0)
+
+#define MAC_AAD_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_AAD_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_AAD_Mask_16 (ULONG)(~(~0<<(16)))*/
+
+#define  MAC_AAD_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_AAD_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(16)))<<(16)))*/
+
+#define MAC_AAD_RES_Wr_Mask_16 (ULONG)(0xffff)
+
+/*#define  MAC_AAD_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_AAD_Mask_14 (ULONG)(0x1)
+
+/*#define MAC_AAD_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define MAC_AAD_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  MAC_AAD_Mask_9 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_AAD_Mask_9 (ULONG)(0x7)
+
+/*#define MAC_AAD_RES_Wr_Mask_9 (ULONG)(~((~(~0<<(3)))<<(9)))*/
+
+#define MAC_AAD_RES_Wr_Mask_9 (ULONG)(0xfffff1ff)
+
+/*#define  MAC_AAD_Mask_0 (ULONG)(~(~0<<(5)))*/
+
+#define  MAC_AAD_Mask_0 (ULONG)(0x1f)
+
+/*#define MAC_AAD_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(5)))<<(0)))*/
+
+#define MAC_AAD_RES_Wr_Mask_0 (ULONG)(0xffffffe0)
+
+/*#define MAC_AAD_NPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AAD_NPS_Mask (ULONG)(0x1)
+
+/*#define MAC_AAD_NPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MAC_AAD_NPS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MAC_AAD_NPS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AAD_RgRd(v);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_16))|((( 0) & (MAC_AAD_Mask_16))<<16);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_14))|((( 0) & (MAC_AAD_Mask_14))<<14);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_9))|((( 0) & (MAC_AAD_Mask_9))<<9);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_0))|((( 0) & (MAC_AAD_Mask_0))<<0);\
+		v = ((v & MAC_AAD_NPS_Wr_Mask) | ((data & MAC_AAD_NPS_Mask)<<15));\
+		MAC_AAD_RgWr(v);\
+} while(0)
+
+#define MAC_AAD_NPS_UdfRd(data) do {\
+		MAC_AAD_RgRd(data);\
+		data = ((data >> 15) & MAC_AAD_NPS_Mask);\
+} while(0)
+
+/*#define MAC_AAD_RFE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_AAD_RFE_Mask (ULONG)(0x3)
+
+/*#define MAC_AAD_RFE_Wr_Mask (ULONG)(~((~(~0 << (2))) << (12)))*/
+
+#define MAC_AAD_RFE_Wr_Mask (ULONG)(0xffffcfff)
+
+#define MAC_AAD_RFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AAD_RgRd(v);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_16))|((( 0) & (MAC_AAD_Mask_16))<<16);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_14))|((( 0) & (MAC_AAD_Mask_14))<<14);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_9))|((( 0) & (MAC_AAD_Mask_9))<<9);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_0))|((( 0) & (MAC_AAD_Mask_0))<<0);\
+		v = ((v & MAC_AAD_RFE_Wr_Mask) | ((data & MAC_AAD_RFE_Mask)<<12));\
+		MAC_AAD_RgWr(v);\
+} while(0)
+
+#define MAC_AAD_RFE_UdfRd(data) do {\
+		MAC_AAD_RgRd(data);\
+		data = ((data >> 12) & MAC_AAD_RFE_Mask);\
+} while(0)
+
+/*#define MAC_AAD_PSE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_AAD_PSE_Mask (ULONG)(0x3)
+
+/*#define MAC_AAD_PSE_Wr_Mask (ULONG)(~((~(~0 << (2))) << (7)))*/
+
+#define MAC_AAD_PSE_Wr_Mask (ULONG)(0xfffffe7f)
+
+#define MAC_AAD_PSE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AAD_RgRd(v);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_16))|((( 0) & (MAC_AAD_Mask_16))<<16);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_14))|((( 0) & (MAC_AAD_Mask_14))<<14);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_9))|((( 0) & (MAC_AAD_Mask_9))<<9);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_0))|((( 0) & (MAC_AAD_Mask_0))<<0);\
+		v = ((v & MAC_AAD_PSE_Wr_Mask) | ((data & MAC_AAD_PSE_Mask)<<7));\
+		MAC_AAD_RgWr(v);\
+} while(0)
+
+#define MAC_AAD_PSE_UdfRd(data) do {\
+		MAC_AAD_RgRd(data);\
+		data = ((data >> 7) & MAC_AAD_PSE_Mask);\
+} while(0)
+
+/*#define MAC_AAD_HD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AAD_HD_Mask (ULONG)(0x1)
+
+/*#define MAC_AAD_HD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MAC_AAD_HD_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MAC_AAD_HD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AAD_RgRd(v);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_16))|((( 0) & (MAC_AAD_Mask_16))<<16);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_14))|((( 0) & (MAC_AAD_Mask_14))<<14);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_9))|((( 0) & (MAC_AAD_Mask_9))<<9);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_0))|((( 0) & (MAC_AAD_Mask_0))<<0);\
+		v = ((v & MAC_AAD_HD_Wr_Mask) | ((data & MAC_AAD_HD_Mask)<<6));\
+		MAC_AAD_RgWr(v);\
+} while(0)
+
+#define MAC_AAD_HD_UdfRd(data) do {\
+		MAC_AAD_RgRd(data);\
+		data = ((data >> 6) & MAC_AAD_HD_Mask);\
+} while(0)
+
+/*#define MAC_AAD_FD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AAD_FD_Mask (ULONG)(0x1)
+
+/*#define MAC_AAD_FD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_AAD_FD_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_AAD_FD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AAD_RgRd(v);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_16))|((( 0) & (MAC_AAD_Mask_16))<<16);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_14))|((( 0) & (MAC_AAD_Mask_14))<<14);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_9))|((( 0) & (MAC_AAD_Mask_9))<<9);\
+		v = (v & (MAC_AAD_RES_Wr_Mask_0))|((( 0) & (MAC_AAD_Mask_0))<<0);\
+		v = ((v & MAC_AAD_FD_Wr_Mask) | ((data & MAC_AAD_FD_Mask)<<5));\
+		MAC_AAD_RgWr(v);\
+} while(0)
+
+#define MAC_AAD_FD_UdfRd(data) do {\
+		MAC_AAD_RgRd(data);\
+		data = ((data >> 5) & MAC_AAD_FD_Mask);\
+} while(0)
+
+
+#define MAC_ANS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe4))
+
+#define MAC_ANS_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ANS_RgOffAddr);\
+} while(0)
+
+/*#define MAC_ANS_ES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANS_ES_Mask (ULONG)(0x1)
+
+#define MAC_ANS_ES_UdfRd(data) do {\
+		MAC_ANS_RgRd(data);\
+		data = ((data >> 8) & MAC_ANS_ES_Mask);\
+} while(0)
+
+/*#define MAC_ANS_ANC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANS_ANC_Mask (ULONG)(0x1)
+
+#define MAC_ANS_ANC_UdfRd(data) do {\
+		MAC_ANS_RgRd(data);\
+		data = ((data >> 5) & MAC_ANS_ANC_Mask);\
+} while(0)
+
+/*#define MAC_ANS_ANA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANS_ANA_Mask (ULONG)(0x1)
+
+#define MAC_ANS_ANA_UdfRd(data) do {\
+		MAC_ANS_RgRd(data);\
+		data = ((data >> 3) & MAC_ANS_ANA_Mask);\
+} while(0)
+
+/*#define MAC_ANS_LS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANS_LS_Mask (ULONG)(0x1)
+
+#define MAC_ANS_LS_UdfRd(data) do {\
+		MAC_ANS_RgRd(data);\
+		data = ((data >> 2) & MAC_ANS_LS_Mask);\
+} while(0)
+
+
+#define MAC_ANC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe0))
+
+#define MAC_ANC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_ANC_RgOffAddr);\
+} while(0)
+
+#define MAC_ANC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ANC_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_ANC_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  MAC_ANC_Mask_19 (ULONG)(0x1fff)
+
+/*#define MAC_ANC_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define MAC_ANC_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define  MAC_ANC_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_ANC_Mask_15 (ULONG)(0x1)
+
+/*#define MAC_ANC_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define MAC_ANC_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  MAC_ANC_Mask_13 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_ANC_Mask_13 (ULONG)(0x1)
+
+/*#define MAC_ANC_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(1)))<<(13)))*/
+
+#define MAC_ANC_RES_Wr_Mask_13 (ULONG)(0xffffdfff)
+
+/*#define  MAC_ANC_Mask_10 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_ANC_Mask_10 (ULONG)(0x3)
+
+/*#define MAC_ANC_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(2)))<<(10)))*/
+
+#define MAC_ANC_RES_Wr_Mask_10 (ULONG)(0xfffff3ff)
+
+/*#define  MAC_ANC_Mask_0 (ULONG)(~(~0<<(9)))*/
+
+#define  MAC_ANC_Mask_0 (ULONG)(0x1ff)
+
+/*#define MAC_ANC_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(9)))<<(0)))*/
+
+#define MAC_ANC_RES_Wr_Mask_0 (ULONG)(0xfffffe00)
+
+/*#define MAC_ANC_SGMRAL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_SGMRAL_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_SGMRAL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_ANC_SGMRAL_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_ANC_SGMRAL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_SGMRAL_Wr_Mask) | ((data & MAC_ANC_SGMRAL_Mask)<<18));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_SGMRAL_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 18) & MAC_ANC_SGMRAL_Mask);\
+} while(0)
+
+/*#define MAC_ANC_LR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_LR_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_LR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MAC_ANC_LR_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MAC_ANC_LR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_LR_Wr_Mask) | ((data & MAC_ANC_LR_Mask)<<17));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_LR_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 17) & MAC_ANC_LR_Mask);\
+} while(0)
+
+/*#define MAC_ANC_ECD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_ECD_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_ECD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_ANC_ECD_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_ANC_ECD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_ECD_Wr_Mask) | ((data & MAC_ANC_ECD_Mask)<<16));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_ECD_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 16) & MAC_ANC_ECD_Mask);\
+} while(0)
+
+/*#define MAC_ANC_ELE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_ELE_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_ELE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MAC_ANC_ELE_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MAC_ANC_ELE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_ELE_Wr_Mask) | ((data & MAC_ANC_ELE_Mask)<<14));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_ELE_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 14) & MAC_ANC_ELE_Mask);\
+} while(0)
+
+/*#define MAC_ANC_ANE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_ANE_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_ANE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MAC_ANC_ANE_Wr_Mask (ULONG)(0xffffefff)
+
+#define MAC_ANC_ANE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_ANE_Wr_Mask) | ((data & MAC_ANC_ANE_Mask)<<12));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_ANE_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 12) & MAC_ANC_ANE_Mask);\
+} while(0)
+
+/*#define MAC_ANC_RAN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ANC_RAN_Mask (ULONG)(0x1)
+
+/*#define MAC_ANC_RAN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MAC_ANC_RAN_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MAC_ANC_RAN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_ANC_RgRd(v);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_19))|((( 0) & (MAC_ANC_Mask_19))<<19);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_15))|((( 0) & (MAC_ANC_Mask_15))<<15);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_13))|((( 0) & (MAC_ANC_Mask_13))<<13);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_10))|((( 0) & (MAC_ANC_Mask_10))<<10);\
+		v = (v & (MAC_ANC_RES_Wr_Mask_0))|((( 0) & (MAC_ANC_Mask_0))<<0);\
+		v = ((v & MAC_ANC_RAN_Wr_Mask) | ((data & MAC_ANC_RAN_Mask)<<9));\
+		MAC_ANC_RgWr(v);\
+} while(0)
+
+#define MAC_ANC_RAN_UdfRd(data) do {\
+		MAC_ANC_RgRd(data);\
+		data = ((data >> 9) & MAC_ANC_RAN_Mask);\
+} while(0)
+
+
+#define MAC_LPC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd4))
+
+#define MAC_LPC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_LPC_RgOffAddr);\
+} while(0)
+
+#define MAC_LPC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_LPC_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_LPC_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MAC_LPC_Mask_26 (ULONG)(0x3f)
+
+/*#define MAC_LPC_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MAC_LPC_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MAC_LPC_TLPIEX_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MAC_LPC_TLPIEX_Mask (ULONG)(0x3ff)
+
+/*#define MAC_LPC_TLPIEX_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MAC_LPC_TLPIEX_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MAC_LPC_TLPIEX_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPC_RgRd(v);\
+		v = (v & (MAC_LPC_RES_Wr_Mask_26))|((( 0) & (MAC_LPC_Mask_26))<<26);\
+		v = ((v & MAC_LPC_TLPIEX_Wr_Mask) | ((data & MAC_LPC_TLPIEX_Mask)<<16));\
+		MAC_LPC_RgWr(v);\
+} while(0)
+
+#define MAC_LPC_TLPIEX_UdfRd(data) do {\
+		MAC_LPC_RgRd(data);\
+		data = ((data >> 16) & MAC_LPC_TLPIEX_Mask);\
+} while(0)
+
+/*#define MAC_LPC_TWT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_LPC_TWT_Mask (ULONG)(0xffff)
+
+/*#define MAC_LPC_TWT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_LPC_TWT_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_LPC_TWT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPC_RgRd(v);\
+		v = (v & (MAC_LPC_RES_Wr_Mask_26))|((( 0) & (MAC_LPC_Mask_26))<<26);\
+		v = ((v & MAC_LPC_TWT_Wr_Mask) | ((data & MAC_LPC_TWT_Mask)<<0));\
+		MAC_LPC_RgWr(v);\
+} while(0)
+
+#define MAC_LPC_TWT_UdfRd(data) do {\
+		MAC_LPC_RgRd(data);\
+		data = ((data >> 0) & MAC_LPC_TWT_Mask);\
+} while(0)
+
+
+#define MAC_LPS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd0))
+
+#define MAC_LPS_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_LPS_RgOffAddr);\
+} while(0)
+
+#define MAC_LPS_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_LPS_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_LPS_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  MAC_LPS_Mask_20 (ULONG)(0xfff)
+
+/*#define MAC_LPS_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define MAC_LPS_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define  MAC_LPS_Mask_10 (ULONG)(~(~0<<(6)))*/
+
+#define  MAC_LPS_Mask_10 (ULONG)(0x3f)
+
+/*#define MAC_LPS_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(6)))<<(10)))*/
+
+#define MAC_LPS_RES_Wr_Mask_10 (ULONG)(0xffff03ff)
+
+/*#define  MAC_LPS_Mask_4 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_LPS_Mask_4 (ULONG)(0xf)
+
+/*#define MAC_LPS_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(4)))<<(4)))*/
+
+#define MAC_LPS_RES_Wr_Mask_4 (ULONG)(0xffffff0f)
+
+/*#define MAC_LPS_LPITXA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_LPITXA_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_LPITXA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_LPS_LPITXA_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_LPS_LPITXA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_LPITXA_Wr_Mask) | ((data & MAC_LPS_LPITXA_Mask)<<19));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_LPITXA_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 19) & MAC_LPS_LPITXA_Mask);\
+} while(0)
+
+/*#define MAC_LPS_PLSEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_PLSEN_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_PLSEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_LPS_PLSEN_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_LPS_PLSEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_PLSEN_Wr_Mask) | ((data & MAC_LPS_PLSEN_Mask)<<18));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_PLSEN_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 18) & MAC_LPS_PLSEN_Mask);\
+} while(0)
+
+/*#define MAC_LPS_PLS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_PLS_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_PLS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MAC_LPS_PLS_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MAC_LPS_PLS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_PLS_Wr_Mask) | ((data & MAC_LPS_PLS_Mask)<<17));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_PLS_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 17) & MAC_LPS_PLS_Mask);\
+} while(0)
+
+/*#define MAC_LPS_LPIEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_LPIEN_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_LPIEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_LPS_LPIEN_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_LPS_LPIEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_LPIEN_Wr_Mask) | ((data & MAC_LPS_LPIEN_Mask)<<16));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_LPIEN_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 16) & MAC_LPS_LPIEN_Mask);\
+} while(0)
+
+/*#define MAC_LPS_RLPIST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_RLPIST_Mask (ULONG)(0x1)
+
+#define MAC_LPS_RLPIST_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 9) & MAC_LPS_RLPIST_Mask);\
+} while(0)
+
+/*#define MAC_LPS_TLPIST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_TLPIST_Mask (ULONG)(0x1)
+
+#define MAC_LPS_TLPIST_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 8) & MAC_LPS_TLPIST_Mask);\
+} while(0)
+
+/*#define MAC_LPS_RLPIEX_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_RLPIEX_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_RLPIEX_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_LPS_RLPIEX_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_LPS_RLPIEX_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_RLPIEX_Wr_Mask) | ((data & MAC_LPS_RLPIEX_Mask)<<3));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_RLPIEX_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 3) & MAC_LPS_RLPIEX_Mask);\
+} while(0)
+
+/*#define MAC_LPS_RLPIEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_RLPIEN_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_RLPIEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_LPS_RLPIEN_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_LPS_RLPIEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_RLPIEN_Wr_Mask) | ((data & MAC_LPS_RLPIEN_Mask)<<2));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_RLPIEN_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 2) & MAC_LPS_RLPIEN_Mask);\
+} while(0)
+
+/*#define MAC_LPS_TLPIEX_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_TLPIEX_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_TLPIEX_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_LPS_TLPIEX_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_LPS_TLPIEX_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_TLPIEX_Wr_Mask) | ((data & MAC_LPS_TLPIEX_Mask)<<1));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_TLPIEX_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 1) & MAC_LPS_TLPIEX_Mask);\
+} while(0)
+
+/*#define MAC_LPS_TLPIEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_LPS_TLPIEN_Mask (ULONG)(0x1)
+
+/*#define MAC_LPS_TLPIEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_LPS_TLPIEN_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_LPS_TLPIEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_LPS_RgRd(v);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_20))|((( 0) & (MAC_LPS_Mask_20))<<20);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_10))|((( 0) & (MAC_LPS_Mask_10))<<10);\
+		v = (v & (MAC_LPS_RES_Wr_Mask_4))|((( 0) & (MAC_LPS_Mask_4))<<4);\
+		v = ((v & MAC_LPS_TLPIEN_Wr_Mask) | ((data & MAC_LPS_TLPIEN_Mask)<<0));\
+		MAC_LPS_RgWr(v);\
+} while(0)
+
+#define MAC_LPS_TLPIEN_UdfRd(data) do {\
+		MAC_LPS_RgRd(data);\
+		data = ((data >> 0) & MAC_LPS_TLPIEN_Mask);\
+} while(0)
+
+
+#define MAC_PPS_WIDTH3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xbbc))
+
+#define MAC_PPS_WIDTH3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_WIDTH3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_WIDTH3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH3_PPSWIDTH0_UdfWr(data) do {\
+		MAC_PPS_WIDTH3_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_WIDTH3_PPSWIDTH0_UdfRd(data) do {\
+		MAC_PPS_WIDTH3_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_WIDTH2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xbac))
+
+#define MAC_PPS_WIDTH2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_WIDTH2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_WIDTH2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH2_PPSWIDTH0_UdfWr(data) do {\
+		MAC_PPS_WIDTH2_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_WIDTH2_PPSWIDTH0_UdfRd(data) do {\
+		MAC_PPS_WIDTH2_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_WIDTH1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb9c))
+
+#define MAC_PPS_WIDTH1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_WIDTH1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_WIDTH1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH1_PPSWIDTH0_UdfWr(data) do {\
+		MAC_PPS_WIDTH1_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_WIDTH1_PPSWIDTH0_UdfRd(data) do {\
+		MAC_PPS_WIDTH1_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_WIDTH0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb8c))
+
+#define MAC_PPS_WIDTH0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_WIDTH0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_WIDTH0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_WIDTH0_PPSWIDTH0_UdfWr(data) do {\
+		MAC_PPS_WIDTH0_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_WIDTH0_PPSWIDTH0_UdfRd(data) do {\
+		MAC_PPS_WIDTH0_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_INTVAL3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xbb8))
+
+#define MAC_PPS_INTVAL3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_INTVAL3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_INTVAL3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL3_PPSINT0_UdfWr(data) do {\
+		MAC_PPS_INTVAL3_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_INTVAL3_PPSINT0_UdfRd(data) do {\
+		MAC_PPS_INTVAL3_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_INTVAL2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xba8))
+
+#define MAC_PPS_INTVAL2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_INTVAL2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_INTVAL2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL2_PPSINT0_UdfWr(data) do {\
+		MAC_PPS_INTVAL2_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_INTVAL2_PPSINT0_UdfRd(data) do {\
+		MAC_PPS_INTVAL2_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_INTVAL1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb98))
+
+#define MAC_PPS_INTVAL1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_INTVAL1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_INTVAL1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL1_PPSINT0_UdfWr(data) do {\
+		MAC_PPS_INTVAL1_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_INTVAL1_PPSINT0_UdfRd(data) do {\
+		MAC_PPS_INTVAL1_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_INTVAL0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb88))
+
+#define MAC_PPS_INTVAL0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_INTVAL0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_INTVAL0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_INTVAL0_PPSINT0_UdfWr(data) do {\
+		MAC_PPS_INTVAL0_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_INTVAL0_PPSINT0_UdfRd(data) do {\
+		MAC_PPS_INTVAL0_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_TTNS3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xbb4))
+
+#define MAC_PPS_TTNS3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTNS3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTNS3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTNS3_RgOffAddr);\
+} while(0)
+
+/*#define MAC_PPS_TTNS3_TTSL0_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_PPS_TTNS3_TTSL0_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_PPS_TTNS3_TTSL0_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_PPS_TTNS3_TTSL0_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_PPS_TTNS3_TTSL0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS3_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS3_TTSL0_Wr_Mask) | ((data & MAC_PPS_TTNS3_TTSL0_Mask)<<0));\
+		MAC_PPS_TTNS3_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS3_TTSL0_UdfRd(data) do {\
+		MAC_PPS_TTNS3_RgRd(data);\
+		data = ((data >> 0) & MAC_PPS_TTNS3_TTSL0_Mask);\
+} while(0)
+
+/*#define MAC_PPS_TTNS3_TRGTBUSY0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPS_TTNS3_TRGTBUSY0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPS_TTNS3_TRGTBUSY0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PPS_TTNS3_TRGTBUSY0_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PPS_TTNS3_TRGTBUSY0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS3_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS3_TRGTBUSY0_Wr_Mask) | ((data & MAC_PPS_TTNS3_TRGTBUSY0_Mask)<<31));\
+		MAC_PPS_TTNS3_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS3_TRGTBUSY0_UdfRd(data) do {\
+		MAC_PPS_TTNS3_RgRd(data);\
+		data = ((data >> 31) & MAC_PPS_TTNS3_TRGTBUSY0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_TTNS2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xba4))
+
+#define MAC_PPS_TTNS2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTNS2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTNS2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTNS2_RgOffAddr);\
+} while(0)
+
+/*#define MAC_PPS_TTNS2_TTSL0_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_PPS_TTNS2_TTSL0_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_PPS_TTNS2_TTSL0_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_PPS_TTNS2_TTSL0_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_PPS_TTNS2_TTSL0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS2_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS2_TTSL0_Wr_Mask) | ((data & MAC_PPS_TTNS2_TTSL0_Mask)<<0));\
+		MAC_PPS_TTNS2_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS2_TTSL0_UdfRd(data) do {\
+		MAC_PPS_TTNS2_RgRd(data);\
+		data = ((data >> 0) & MAC_PPS_TTNS2_TTSL0_Mask);\
+} while(0)
+
+/*#define MAC_PPS_TTNS2_TRGTBUSY0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPS_TTNS2_TRGTBUSY0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPS_TTNS2_TRGTBUSY0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PPS_TTNS2_TRGTBUSY0_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PPS_TTNS2_TRGTBUSY0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS2_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS2_TRGTBUSY0_Wr_Mask) | ((data & MAC_PPS_TTNS2_TRGTBUSY0_Mask)<<31));\
+		MAC_PPS_TTNS2_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS2_TRGTBUSY0_UdfRd(data) do {\
+		MAC_PPS_TTNS2_RgRd(data);\
+		data = ((data >> 31) & MAC_PPS_TTNS2_TRGTBUSY0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_TTNS1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb94))
+
+#define MAC_PPS_TTNS1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTNS1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTNS1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTNS1_RgOffAddr);\
+} while(0)
+
+/*#define MAC_PPS_TTNS1_TTSL0_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_PPS_TTNS1_TTSL0_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_PPS_TTNS1_TTSL0_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_PPS_TTNS1_TTSL0_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_PPS_TTNS1_TTSL0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS1_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS1_TTSL0_Wr_Mask) | ((data & MAC_PPS_TTNS1_TTSL0_Mask)<<0));\
+		MAC_PPS_TTNS1_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS1_TTSL0_UdfRd(data) do {\
+		MAC_PPS_TTNS1_RgRd(data);\
+		data = ((data >> 0) & MAC_PPS_TTNS1_TTSL0_Mask);\
+} while(0)
+
+/*#define MAC_PPS_TTNS1_TRGTBUSY0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPS_TTNS1_TRGTBUSY0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPS_TTNS1_TRGTBUSY0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PPS_TTNS1_TRGTBUSY0_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PPS_TTNS1_TRGTBUSY0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS1_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS1_TRGTBUSY0_Wr_Mask) | ((data & MAC_PPS_TTNS1_TRGTBUSY0_Mask)<<31));\
+		MAC_PPS_TTNS1_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS1_TRGTBUSY0_UdfRd(data) do {\
+		MAC_PPS_TTNS1_RgRd(data);\
+		data = ((data >> 31) & MAC_PPS_TTNS1_TRGTBUSY0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_TTNS0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb84))
+
+#define MAC_PPS_TTNS0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTNS0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTNS0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTNS0_RgOffAddr);\
+} while(0)
+
+/*#define MAC_PPS_TTNS0_TTSL0_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_PPS_TTNS0_TTSL0_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_PPS_TTNS0_TTSL0_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_PPS_TTNS0_TTSL0_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_PPS_TTNS0_TTSL0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS0_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS0_TTSL0_Wr_Mask) | ((data & MAC_PPS_TTNS0_TTSL0_Mask)<<0));\
+		MAC_PPS_TTNS0_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS0_TTSL0_UdfRd(data) do {\
+		MAC_PPS_TTNS0_RgRd(data);\
+		data = ((data >> 0) & MAC_PPS_TTNS0_TTSL0_Mask);\
+} while(0)
+
+/*#define MAC_PPS_TTNS0_TRGTBUSY0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPS_TTNS0_TRGTBUSY0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPS_TTNS0_TRGTBUSY0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PPS_TTNS0_TRGTBUSY0_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PPS_TTNS0_TRGTBUSY0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_PPS_TTNS0_RgRd(v);\
+		v = ((v & MAC_PPS_TTNS0_TRGTBUSY0_Wr_Mask) | ((data & MAC_PPS_TTNS0_TRGTBUSY0_Mask)<<31));\
+		MAC_PPS_TTNS0_RgWr(v);\
+} while(0)
+
+#define MAC_PPS_TTNS0_TRGTBUSY0_UdfRd(data) do {\
+		MAC_PPS_TTNS0_RgRd(data);\
+		data = ((data >> 31) & MAC_PPS_TTNS0_TRGTBUSY0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_TTS3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xbb0))
+
+#define MAC_PPS_TTS3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTS3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTS3_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS3_TSTRH0_UdfWr(data) do {\
+		MAC_PPS_TTS3_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_TTS3_TSTRH0_UdfRd(data) do {\
+		MAC_PPS_TTS3_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_TTS2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xba0))
+
+#define MAC_PPS_TTS2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTS2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTS2_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS2_TSTRH0_UdfWr(data) do {\
+		MAC_PPS_TTS2_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_TTS2_TSTRH0_UdfRd(data) do {\
+		MAC_PPS_TTS2_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_TTS1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb90))
+
+#define MAC_PPS_TTS1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTS1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTS1_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS1_TSTRH0_UdfWr(data) do {\
+		MAC_PPS_TTS1_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_TTS1_TSTRH0_UdfRd(data) do {\
+		MAC_PPS_TTS1_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPS_TTS0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb80))
+
+#define MAC_PPS_TTS0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTS0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTS0_RgOffAddr);\
+} while(0)
+
+#define MAC_PPS_TTS0_TSTRH0_UdfWr(data) do {\
+		MAC_PPS_TTS0_RgWr(data);\
+} while(0)
+
+#define MAC_PPS_TTS0_TSTRH0_UdfRd(data) do {\
+		MAC_PPS_TTS0_RgRd(data);\
+} while(0)
+
+
+#define MAC_PPSC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb70))
+
+#define MAC_PPSC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PPSC_RgOffAddr);\
+} while(0)
+
+#define MAC_PPSC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PPSC_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_PPSC_Mask_31 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_PPSC_Mask_31 (ULONG)(0x1)
+
+/*#define MAC_PPSC_RES_Wr_Mask_31 (ULONG)(~((~(~0<<(1)))<<(31)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_31 (ULONG)(0x7fffffff)
+
+/*#define  MAC_PPSC_Mask_27 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_PPSC_Mask_27 (ULONG)(0x3)
+
+/*#define MAC_PPSC_RES_Wr_Mask_27 (ULONG)(~((~(~0<<(2)))<<(27)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_27 (ULONG)(0xe7ffffff)
+
+/*#define  MAC_PPSC_Mask_23 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_PPSC_Mask_23 (ULONG)(0x1)
+
+/*#define MAC_PPSC_RES_Wr_Mask_23 (ULONG)(~((~(~0<<(1)))<<(23)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_23 (ULONG)(0xff7fffff)
+
+/*#define  MAC_PPSC_Mask_19 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_PPSC_Mask_19 (ULONG)(0x3)
+
+/*#define MAC_PPSC_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(2)))<<(19)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_19 (ULONG)(0xffe7ffff)
+
+/*#define  MAC_PPSC_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_PPSC_Mask_15 (ULONG)(0x1)
+
+/*#define MAC_PPSC_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  MAC_PPSC_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_PPSC_Mask_11 (ULONG)(0x3)
+
+/*#define MAC_PPSC_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MAC_PPSC_Mask_7 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_PPSC_Mask_7 (ULONG)(0x1)
+
+/*#define MAC_PPSC_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(1)))<<(7)))*/
+
+#define MAC_PPSC_RES_Wr_Mask_7 (ULONG)(0xffffff7f)
+
+/*#define MAC_PPSC_TRGTMODSEL3_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_PPSC_TRGTMODSEL3_Mask (ULONG)(0x3)
+
+/*#define MAC_PPSC_TRGTMODSEL3_Wr_Mask (ULONG)(~((~(~0 << (2))) << (29)))*/
+
+#define MAC_PPSC_TRGTMODSEL3_Wr_Mask (ULONG)(0x9fffffff)
+
+#define MAC_PPSC_TRGTMODSEL3_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_TRGTMODSEL3_Wr_Mask) | ((data & MAC_PPSC_TRGTMODSEL3_Mask)<<29));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_TRGTMODSEL3_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 29) & MAC_PPSC_TRGTMODSEL3_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_PPSCMD3_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_PPSC_PPSCMD3_Mask (ULONG)(0x7)
+
+/*#define MAC_PPSC_PPSCMD3_Wr_Mask (ULONG)(~((~(~0 << (3))) << (24)))*/
+
+#define MAC_PPSC_PPSCMD3_Wr_Mask (ULONG)(0xf8ffffff)
+
+#define MAC_PPSC_PPSCMD3_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_PPSCMD3_Wr_Mask) | ((data & MAC_PPSC_PPSCMD3_Mask)<<24));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_PPSCMD3_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 24) & MAC_PPSC_PPSCMD3_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_TRGTMODSEL2_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_PPSC_TRGTMODSEL2_Mask (ULONG)(0x3)
+
+/*#define MAC_PPSC_TRGTMODSEL2_Wr_Mask (ULONG)(~((~(~0 << (2))) << (21)))*/
+
+#define MAC_PPSC_TRGTMODSEL2_Wr_Mask (ULONG)(0xff9fffff)
+
+#define MAC_PPSC_TRGTMODSEL2_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_TRGTMODSEL2_Wr_Mask) | ((data & MAC_PPSC_TRGTMODSEL2_Mask)<<21));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_TRGTMODSEL2_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 21) & MAC_PPSC_TRGTMODSEL2_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_PPSCMD2_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_PPSC_PPSCMD2_Mask (ULONG)(0x7)
+
+/*#define MAC_PPSC_PPSCMD2_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MAC_PPSC_PPSCMD2_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MAC_PPSC_PPSCMD2_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_PPSCMD2_Wr_Mask) | ((data & MAC_PPSC_PPSCMD2_Mask)<<16));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_PPSCMD2_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 16) & MAC_PPSC_PPSCMD2_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_TRGTMODSEL1_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_PPSC_TRGTMODSEL1_Mask (ULONG)(0x3)
+
+/*#define MAC_PPSC_TRGTMODSEL1_Wr_Mask (ULONG)(~((~(~0 << (2))) << (13)))*/
+
+#define MAC_PPSC_TRGTMODSEL1_Wr_Mask (ULONG)(0xffff9fff)
+
+#define MAC_PPSC_TRGTMODSEL1_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_TRGTMODSEL1_Wr_Mask) | ((data & MAC_PPSC_TRGTMODSEL1_Mask)<<13));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_TRGTMODSEL1_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 13) & MAC_PPSC_TRGTMODSEL1_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_PPSCMD1_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_PPSC_PPSCMD1_Mask (ULONG)(0x7)
+
+/*#define MAC_PPSC_PPSCMD1_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MAC_PPSC_PPSCMD1_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MAC_PPSC_PPSCMD1_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_PPSCMD1_Wr_Mask) | ((data & MAC_PPSC_PPSCMD1_Mask)<<8));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_PPSCMD1_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 8) & MAC_PPSC_PPSCMD1_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_TRGTMODSEL0_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_PPSC_TRGTMODSEL0_Mask (ULONG)(0x3)
+
+/*#define MAC_PPSC_TRGTMODSEL0_Wr_Mask (ULONG)(~((~(~0 << (2))) << (5)))*/
+
+#define MAC_PPSC_TRGTMODSEL0_Wr_Mask (ULONG)(0xffffff9f)
+
+#define MAC_PPSC_TRGTMODSEL0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_TRGTMODSEL0_Wr_Mask) | ((data & MAC_PPSC_TRGTMODSEL0_Mask)<<5));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_TRGTMODSEL0_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 5) & MAC_PPSC_TRGTMODSEL0_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_PPSEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPSC_PPSEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPSC_PPSEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_PPSC_PPSEN0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_PPSC_PPSEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_PPSEN0_Wr_Mask) | ((data & MAC_PPSC_PPSEN0_Mask)<<4));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_PPSEN0_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 4) & MAC_PPSC_PPSEN0_Mask);\
+} while(0)
+
+/*#define MAC_PPSC_PPSCTRL0_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_PPSC_PPSCTRL0_Mask (ULONG)(0xf)
+
+/*#define MAC_PPSC_PPSCTRL0_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define MAC_PPSC_PPSCTRL0_Wr_Mask (ULONG)(0xfffffff0)
+
+#define MAC_PPSC_PPSCTRL0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PPSC_RgRd(v);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_31))|((( 0) & (MAC_PPSC_Mask_31))<<31);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_27))|((( 0) & (MAC_PPSC_Mask_27))<<27);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_23))|((( 0) & (MAC_PPSC_Mask_23))<<23);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_19))|((( 0) & (MAC_PPSC_Mask_19))<<19);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_15))|((( 0) & (MAC_PPSC_Mask_15))<<15);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_11))|((( 0) & (MAC_PPSC_Mask_11))<<11);\
+		v = (v & (MAC_PPSC_RES_Wr_Mask_7))|((( 0) & (MAC_PPSC_Mask_7))<<7);\
+		v = ((v & MAC_PPSC_PPSCTRL0_Wr_Mask) | ((data & MAC_PPSC_PPSCTRL0_Mask)<<0));\
+		MAC_PPSC_RgWr(v);\
+} while(0)
+
+#define MAC_PPSC_PPSCTRL0_UdfRd(data) do {\
+		MAC_PPSC_RgRd(data);\
+		data = ((data >> 0) & MAC_PPSC_PPSCTRL0_Mask);\
+} while(0)
+
+
+#define MAC_TEAC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb54))
+
+#define MAC_TEAC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TEAC_RgOffAddr);\
+} while(0)
+
+#define MAC_TEAC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TEAC_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_TEAC_Mask_31 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_TEAC_Mask_31 (ULONG)(0x1)
+
+/*#define MAC_TEAC_RES_Wr_Mask_31 (ULONG)(~((~(~0<<(1)))<<(31)))*/
+
+#define MAC_TEAC_RES_Wr_Mask_31 (ULONG)(0x7fffffff)
+
+/*#define MAC_TEAC_OSTIAC_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_TEAC_OSTIAC_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_TEAC_OSTIAC_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_TEAC_OSTIAC_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_TEAC_OSTIAC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MAC_TEAC_RES_Wr_Mask_31))|((( 0) & (MAC_TEAC_Mask_31))<<31);\
+		(v) = ((v & MAC_TEAC_OSTIAC_Wr_Mask) | ((data & MAC_TEAC_OSTIAC_Mask)<<0));\
+		MAC_TEAC_RgWr(v);\
+} while(0)
+
+#define MAC_TEAC_OSTIAC_UdfRd(data) do {\
+		MAC_TEAC_RgRd(data);\
+		data = ((data >> 0) & MAC_TEAC_OSTIAC_Mask);\
+} while(0)
+
+
+#define MAC_TIAC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb50))
+
+#define MAC_TIAC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TIAC_RgOffAddr);\
+} while(0)
+
+#define MAC_TIAC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TIAC_RgOffAddr);\
+} while(0)
+
+#define MAC_TIAC_OSTIAC_UdfWr(data) do {\
+		MAC_TIAC_RgWr(data);\
+} while(0)
+
+#define MAC_TIAC_OSTIAC_UdfRd(data) do {\
+		MAC_TIAC_RgRd(data);\
+} while(0)
+
+
+#define MAC_ATS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb4c))
+
+#define MAC_ATS_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ATS_RgOffAddr);\
+} while(0)
+
+#define MAC_ATS_AUXTSHI_UdfRd(data) do {\
+		MAC_ATS_RgRd(data);\
+} while(0)
+
+
+#define MAC_ATN_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb48))
+
+#define MAC_ATN_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ATN_RgOffAddr);\
+} while(0)
+
+/*#define MAC_ATN_AUXTSLO_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_ATN_AUXTSLO_Mask (ULONG)(0x7fffffff)
+
+#define MAC_ATN_AUXTSLO_UdfRd(data) do {\
+		MAC_ATN_RgRd(data);\
+		data = ((data >> 0) & MAC_ATN_AUXTSLO_Mask);\
+} while(0)
+
+
+#define MAC_AC_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb40))
+
+#define MAC_AC_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_AC_RgOffAddr);\
+} while(0)
+
+#define MAC_AC_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_AC_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_AC_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  MAC_AC_Mask_8 (ULONG)(0xffffff)
+
+/*#define MAC_AC_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define MAC_AC_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define  MAC_AC_Mask_1 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_AC_Mask_1 (ULONG)(0x7)
+
+/*#define MAC_AC_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(3)))<<(1)))*/
+
+#define MAC_AC_RES_Wr_Mask_1 (ULONG)(0xfffffff1)
+
+/*#define MAC_AC_ATSEN3_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AC_ATSEN3_Mask (ULONG)(0x1)
+
+/*#define MAC_AC_ATSEN3_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_AC_ATSEN3_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_AC_ATSEN3_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AC_RgRd(v);\
+		v = (v & (MAC_AC_RES_Wr_Mask_8))|((( 0) & (MAC_AC_Mask_8))<<8);\
+		v = (v & (MAC_AC_RES_Wr_Mask_1))|((( 0) & (MAC_AC_Mask_1))<<1);\
+		v = ((v & MAC_AC_ATSEN3_Wr_Mask) | ((data & MAC_AC_ATSEN3_Mask)<<7));\
+		MAC_AC_RgWr(v);\
+} while(0)
+
+#define MAC_AC_ATSEN3_UdfRd(data) do {\
+		MAC_AC_RgRd(data);\
+		data = ((data >> 7) & MAC_AC_ATSEN3_Mask);\
+} while(0)
+
+/*#define MAC_AC_ATSEN2_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AC_ATSEN2_Mask (ULONG)(0x1)
+
+/*#define MAC_AC_ATSEN2_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MAC_AC_ATSEN2_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MAC_AC_ATSEN2_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AC_RgRd(v);\
+		v = (v & (MAC_AC_RES_Wr_Mask_8))|((( 0) & (MAC_AC_Mask_8))<<8);\
+		v = (v & (MAC_AC_RES_Wr_Mask_1))|((( 0) & (MAC_AC_Mask_1))<<1);\
+		v = ((v & MAC_AC_ATSEN2_Wr_Mask) | ((data & MAC_AC_ATSEN2_Mask)<<6));\
+		MAC_AC_RgWr(v);\
+} while(0)
+
+#define MAC_AC_ATSEN2_UdfRd(data) do {\
+		MAC_AC_RgRd(data);\
+		data = ((data >> 6) & MAC_AC_ATSEN2_Mask);\
+} while(0)
+
+/*#define MAC_AC_ATSEN1_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AC_ATSEN1_Mask (ULONG)(0x1)
+
+/*#define MAC_AC_ATSEN1_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_AC_ATSEN1_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_AC_ATSEN1_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AC_RgRd(v);\
+		v = (v & (MAC_AC_RES_Wr_Mask_8))|((( 0) & (MAC_AC_Mask_8))<<8);\
+		v = (v & (MAC_AC_RES_Wr_Mask_1))|((( 0) & (MAC_AC_Mask_1))<<1);\
+		v = ((v & MAC_AC_ATSEN1_Wr_Mask) | ((data & MAC_AC_ATSEN1_Mask)<<5));\
+		MAC_AC_RgWr(v);\
+} while(0)
+
+#define MAC_AC_ATSEN1_UdfRd(data) do {\
+		MAC_AC_RgRd(data);\
+		data = ((data >> 5) & MAC_AC_ATSEN1_Mask);\
+} while(0)
+
+/*#define MAC_AC_ATSEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AC_ATSEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_AC_ATSEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_AC_ATSEN0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_AC_ATSEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AC_RgRd(v);\
+		v = (v & (MAC_AC_RES_Wr_Mask_8))|((( 0) & (MAC_AC_Mask_8))<<8);\
+		v = (v & (MAC_AC_RES_Wr_Mask_1))|((( 0) & (MAC_AC_Mask_1))<<1);\
+		v = ((v & MAC_AC_ATSEN0_Wr_Mask) | ((data & MAC_AC_ATSEN0_Mask)<<4));\
+		MAC_AC_RgWr(v);\
+} while(0)
+
+#define MAC_AC_ATSEN0_UdfRd(data) do {\
+		MAC_AC_RgRd(data);\
+		data = ((data >> 4) & MAC_AC_ATSEN0_Mask);\
+} while(0)
+
+/*#define MAC_AC_ATSFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_AC_ATSFC_Mask (ULONG)(0x1)
+
+/*#define MAC_AC_ATSFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_AC_ATSFC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_AC_ATSFC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_AC_RgRd(v);\
+		v = (v & (MAC_AC_RES_Wr_Mask_8))|((( 0) & (MAC_AC_Mask_8))<<8);\
+		v = (v & (MAC_AC_RES_Wr_Mask_1))|((( 0) & (MAC_AC_Mask_1))<<1);\
+		v = ((v & MAC_AC_ATSFC_Wr_Mask) | ((data & MAC_AC_ATSFC_Mask)<<0));\
+		MAC_AC_RgWr(v);\
+} while(0)
+
+#define MAC_AC_ATSFC_UdfRd(data) do {\
+		MAC_AC_RgRd(data);\
+		data = ((data >> 0) & MAC_AC_ATSFC_Mask);\
+} while(0)
+
+
+#define MAC_TTN_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb34))
+
+#define MAC_TTN_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TTN_RgOffAddr);\
+} while(0)
+
+#define MAC_TTN_TXTSSTSHI_UdfRd(data) do {\
+		MAC_TTN_RgRd(data);\
+} while(0)
+
+
+#define MAC_TTSN_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb30))
+
+#define MAC_TTSN_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TTSN_RgOffAddr);\
+} while(0)
+
+/*#define MAC_TTSN_TXTSSTSMIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TTSN_TXTSSTSMIS_Mask (ULONG)(0x1)
+
+#define MAC_TTSN_TXTSSTSMIS_UdfRd(data) do {\
+		MAC_TTSN_RgRd(data);\
+		data = ((data >> 31) & MAC_TTSN_TXTSSTSMIS_Mask);\
+} while(0)
+
+/*#define MAC_TTSN_TXTSSTSLO_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_TTSN_TXTSSTSLO_Mask (ULONG)(0x7fffffff)
+
+#define MAC_TTSN_TXTSSTSLO_UdfRd(data) do {\
+		MAC_TTSN_RgRd(data);\
+		data = ((data >> 0) & MAC_TTSN_TXTSSTSLO_Mask);\
+} while(0)
+
+
+#define MAC_TSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb20))
+
+#define MAC_TSR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TSR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_TSR_ATSNS_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_TSR_ATSNS_Mask (ULONG)(0x1f)
+
+#define MAC_TSR_ATSNS_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 25) & MAC_TSR_ATSNS_Mask);\
+} while(0)
+
+/*#define MAC_TSR_ATSSTM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_ATSSTM_Mask (ULONG)(0x1)
+
+#define MAC_TSR_ATSSTM_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 24) & MAC_TSR_ATSSTM_Mask);\
+} while(0)
+
+/*#define MAC_TSR_ATSSTN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_TSR_ATSSTN_Mask (ULONG)(0xf)
+
+#define MAC_TSR_ATSSTN_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 16) & MAC_TSR_ATSSTN_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTRGTERR3_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTRGTERR3_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTRGTERR3_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 9) & MAC_TSR_TSTRGTERR3_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTARGT3_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTARGT3_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTARGT3_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 8) & MAC_TSR_TSTARGT3_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTRGTERR2_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTRGTERR2_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTRGTERR2_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 7) & MAC_TSR_TSTRGTERR2_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTARGT2_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTARGT2_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTARGT2_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 6) & MAC_TSR_TSTARGT2_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTRGTERR1_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTRGTERR1_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTRGTERR1_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 5) & MAC_TSR_TSTRGTERR1_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTARGT1_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTARGT1_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTARGT1_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 4) & MAC_TSR_TSTARGT1_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTRGTERR0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTRGTERR0_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTRGTERR0_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 3) & MAC_TSR_TSTRGTERR0_Mask);\
+} while(0)
+
+/*#define MAC_TSR_AUXTSTRIG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_AUXTSTRIG_Mask (ULONG)(0x1)
+
+#define MAC_TSR_AUXTSTRIG_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 2) & MAC_TSR_AUXTSTRIG_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSTARGT0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSTARGT0_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSTARGT0_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 1) & MAC_TSR_TSTARGT0_Mask);\
+} while(0)
+
+/*#define MAC_TSR_TSSOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TSR_TSSOVF_Mask (ULONG)(0x1)
+
+#define MAC_TSR_TSSOVF_UdfRd(data) do {\
+		MAC_TSR_RgRd(data);\
+		data = ((data >> 0) & MAC_TSR_TSSOVF_Mask);\
+} while(0)
+
+
+#define MAC_STHWR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb1c))
+
+#define MAC_STHWR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_STHWR_RgOffAddr);\
+} while(0)
+
+#define MAC_STHWR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_STHWR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_STHWR_Mask_16 (ULONG)(~(~0<<(16)))*/
+
+#define  MAC_STHWR_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_STHWR_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(16)))<<(16)))*/
+
+#define MAC_STHWR_RES_Wr_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_STHWR_TSHWR_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_STHWR_TSHWR_Mask (ULONG)(0xffff)
+
+/*#define MAC_STHWR_TSHWR_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_STHWR_TSHWR_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_STHWR_TSHWR_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MAC_STHWR_RES_Wr_Mask_16))|((( 0) & (MAC_STHWR_Mask_16))<<16);\
+		(v) = ((v & MAC_STHWR_TSHWR_Wr_Mask) | ((data & MAC_STHWR_TSHWR_Mask)<<0));\
+		MAC_STHWR_RgWr(v);\
+} while(0)
+
+#define MAC_STHWR_TSHWR_UdfRd(data) do {\
+		MAC_STHWR_RgRd(data);\
+		data = ((data >> 0) & MAC_STHWR_TSHWR_Mask);\
+} while(0)
+
+
+#define MAC_TAR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb18))
+
+#define MAC_TAR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TAR_RgOffAddr);\
+} while(0)
+
+#define MAC_TAR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TAR_RgOffAddr);\
+} while(0)
+
+#define MAC_TAR_TSAR_UdfWr(data) do {\
+		MAC_TAR_RgWr(data);\
+} while(0)
+
+#define MAC_TAR_TSAR_UdfRd(data) do {\
+		MAC_TAR_RgRd(data);\
+} while(0)
+
+
+#define MAC_STNSUR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb14))
+
+#define MAC_STNSUR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_STNSUR_RgOffAddr);\
+} while(0)
+
+#define MAC_STNSUR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_STNSUR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_STNSUR_ADDSUB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_STNSUR_ADDSUB_Mask (ULONG)(0x1)
+
+/*#define MAC_STNSUR_ADDSUB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_STNSUR_ADDSUB_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_STNSUR_ADDSUB_UdfWr(data) do{\
+		ULONG v;\
+		MAC_STNSUR_RgRd(v);\
+		v = ((v & MAC_STNSUR_ADDSUB_Wr_Mask) | ((data & MAC_STNSUR_ADDSUB_Mask)<<31));\
+		MAC_STNSUR_RgWr(v);\
+} while(0)
+
+#define MAC_STNSUR_ADDSUB_UdfRd(data) do {\
+		MAC_STNSUR_RgRd(data);\
+		data = ((data >> 31) & MAC_STNSUR_ADDSUB_Mask);\
+} while(0)
+
+/*#define MAC_STNSUR_TSSS_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_STNSUR_TSSS_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_STNSUR_TSSS_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_STNSUR_TSSS_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_STNSUR_TSSS_UdfWr(data) do{\
+		ULONG v;\
+		MAC_STNSUR_RgRd(v);\
+		v = ((v & MAC_STNSUR_TSSS_Wr_Mask) | ((data & MAC_STNSUR_TSSS_Mask)<<0));\
+		MAC_STNSUR_RgWr(v);\
+} while(0)
+
+#define MAC_STNSUR_TSSS_UdfRd(data) do {\
+		MAC_STNSUR_RgRd(data);\
+		data = ((data >> 0) & MAC_STNSUR_TSSS_Mask);\
+} while(0)
+
+
+#define MAC_STSUR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb10))
+
+#define MAC_STSUR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_STSUR_RgOffAddr);\
+} while(0)
+
+#define MAC_STSUR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_STSUR_RgOffAddr);\
+} while(0)
+
+#define MAC_STSUR_TSS_UdfWr(data) do {\
+		MAC_STSUR_RgWr(data);\
+} while(0)
+
+#define MAC_STSUR_TSS_UdfRd(data) do {\
+		MAC_STSUR_RgRd(data);\
+} while(0)
+
+
+#define MAC_STNSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb0c))
+
+#define MAC_STNSR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_STNSR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_STNSR_TSSS_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_STNSR_TSSS_Mask (ULONG)(0x7fffffff)
+
+#define MAC_STNSR_TSSS_UdfRd(data) do {\
+		MAC_STNSR_RgRd(data);\
+		data = ((data >> 0) & MAC_STNSR_TSSS_Mask);\
+} while(0)
+
+
+#define MAC_STSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb08))
+
+#define MAC_STSR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_STSR_RgOffAddr);\
+} while(0)
+
+#define MAC_STSR_TSS_UdfRd(data) do {\
+		MAC_STSR_RgRd(data);\
+} while(0)
+
+
+#define MAC_SSIR_RgOffAddr ((volatile unsigned int *)(BASE_ADDRESS + 0xb04))
+
+#define MAC_SSIR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_SSIR_RgOffAddr);\
+} while(0)
+
+#define MAC_SSIR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_SSIR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_SSIR_Mask_24 (unsigned int)(~(~0<<(8)))*/
+
+#define  MAC_SSIR_Mask_24 (unsigned int)(0xff)
+
+/*#define MAC_SSIR_RES_Wr_Mask_24 (unsigned int)(~((~(~0<<(8)))<<(24)))*/
+
+#define MAC_SSIR_RES_Wr_Mask_24 (unsigned int)(0xffffff)
+
+/*#define  MAC_SSIR_Mask_0 (unsigned int)(~(~0<<(8)))*/
+
+#define  MAC_SSIR_Mask_0 (unsigned int)(0xff)
+
+/*#define MAC_SSIR_RES_Wr_Mask_0 (unsigned int)(~((~(~0<<(8)))<<(0)))*/
+
+#define MAC_SSIR_RES_Wr_Mask_0 (unsigned int)(0xffffff00)
+
+/*#define MAC_SSIR_SSINC_Mask (unsigned int)(~(~0<<(8)))*/
+
+#define MAC_SSIR_SSINC_Mask (unsigned int)(0xff)
+
+/*#define MAC_SSIR_SSINC_Wr_Mask (unsigned int)(~((~(~0 << (8))) << (16)))*/
+
+#define MAC_SSIR_SSINC_Wr_Mask (unsigned int)(0xff00ffff)
+
+#define MAC_SSIR_SSINC_UdfWr(data) do {\
+		unsigned int v;\
+		MAC_SSIR_RgRd(v);\
+		v = (v & (MAC_SSIR_RES_Wr_Mask_24))|((( 0) & (MAC_SSIR_Mask_24))<<24);\
+		v = (v & (MAC_SSIR_RES_Wr_Mask_0))|((( 0) & (MAC_SSIR_Mask_0))<<0);\
+		v = ((v & MAC_SSIR_SSINC_Wr_Mask) | ((data & MAC_SSIR_SSINC_Mask)<<16));\
+		MAC_SSIR_RgWr(v);\
+} while(0)
+
+#define MAC_SSIR_SSINC_UdfRd(data) do {\
+		MAC_SSIR_RgRd(data);\
+		data = ((data >> 16) & MAC_SSIR_SSINC_Mask);\
+} while(0)
+
+/*#define MAC_SSIR_SNSINC_Mask (unsigned int)(~(~0<<(8)))*/
+
+#define MAC_SSIR_SNSINC_Mask (unsigned int)(0xff)
+
+/*#define MAC_SSIR_SNSINC_Wr_Mask (unsigned int)(~((~(~0 << (8))) << (8)))*/
+
+#define MAC_SSIR_SNSINC_Wr_Mask (unsigned int)(0xffff00ff)
+
+#define MAC_SSIR_SNSINC_UdfWr(data) do {\
+		unsigned int v;\
+		MAC_SSIR_RgRd(v);\
+		v = (v & (MAC_SSIR_RES_Wr_Mask_24))|((( 0) & (MAC_SSIR_Mask_24))<<24);\
+		v = (v & (MAC_SSIR_RES_Wr_Mask_0))|((( 0) & (MAC_SSIR_Mask_0))<<0);\
+		v = ((v & MAC_SSIR_SNSINC_Wr_Mask) | ((data & MAC_SSIR_SNSINC_Mask)<<8));\
+		MAC_SSIR_RgWr(v);\
+} while(0)
+
+#define MAC_SSIR_SNSINC_UdfRd(data) do {\
+		MAC_SSIR_RgRd(data);\
+		data = ((data >> 8) & MAC_SSIR_SNSINC_Mask);\
+} while(0)
+
+#define MAC_TCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb00))
+
+#define MAC_TCR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TCR_RgOffAddr);\
+} while(0)
+
+#define MAC_TCR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TCR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_TCR_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_TCR_Mask_29 (ULONG)(0x7)
+
+/*#define MAC_TCR_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MAC_TCR_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define  MAC_TCR_Mask_25 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_TCR_Mask_25 (ULONG)(0x7)
+
+/*#define MAC_TCR_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(3)))<<(25)))*/
+
+#define MAC_TCR_RES_Wr_Mask_25 (ULONG)(0xf1ffffff)
+
+/*#define  MAC_TCR_Mask_21 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_TCR_Mask_21 (ULONG)(0x7)
+
+/*#define MAC_TCR_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(3)))<<(21)))*/
+
+#define MAC_TCR_RES_Wr_Mask_21 (ULONG)(0xff1fffff)
+
+/*#define  MAC_TCR_Mask_19 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_TCR_Mask_19 (ULONG)(0x1)
+
+/*#define MAC_TCR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(1)))<<(19)))*/
+
+#define MAC_TCR_RES_Wr_Mask_19 (ULONG)(0xfff7ffff)
+
+/*#define  MAC_TCR_Mask_6 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_TCR_Mask_6 (ULONG)(0x3)
+
+/*#define MAC_TCR_RES_Wr_Mask_6 (ULONG)(~((~(~0<<(2)))<<(6)))*/
+
+#define MAC_TCR_RES_Wr_Mask_6 (ULONG)(0xffffff3f)
+
+/*#define MAC_TCR_AV8021ASMEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_AV8021ASMEN_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_AV8021ASMEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (28)))*/
+
+#define MAC_TCR_AV8021ASMEN_Wr_Mask (ULONG)(0xefffffff)
+
+#define MAC_TCR_AV8021ASMEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_AV8021ASMEN_Wr_Mask) | ((data & MAC_TCR_AV8021ASMEN_Mask)<<28));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_AV8021ASMEN_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 28) & MAC_TCR_AV8021ASMEN_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TXTSSTSM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TXTSSTSM_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TXTSSTSM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MAC_TCR_TXTSSTSM_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MAC_TCR_TXTSSTSM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TXTSSTSM_Wr_Mask) | ((data & MAC_TCR_TXTSSTSM_Mask)<<24));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TXTSSTSM_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 24) & MAC_TCR_TXTSSTSM_Mask);\
+} while(0)
+
+/*#define MAC_TCR_ESTI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_ESTI_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_ESTI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_TCR_ESTI_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_TCR_ESTI_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_ESTI_Wr_Mask) | ((data & MAC_TCR_ESTI_Mask)<<20));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_ESTI_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 20) & MAC_TCR_ESTI_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSENMACADDR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSENMACADDR_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSENMACADDR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_TCR_TSENMACADDR_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_TCR_TSENMACADDR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSENMACADDR_Wr_Mask) | ((data & MAC_TCR_TSENMACADDR_Mask)<<18));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSENMACADDR_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 18) & MAC_TCR_TSENMACADDR_Mask);\
+} while(0)
+
+/*#define MAC_TCR_SNAPTYPSEL_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_TCR_SNAPTYPSEL_Mask (ULONG)(0x3)
+
+/*#define MAC_TCR_SNAPTYPSEL_Wr_Mask (ULONG)(~((~(~0 << (2))) << (16)))*/
+
+#define MAC_TCR_SNAPTYPSEL_Wr_Mask (ULONG)(0xfffcffff)
+
+#define MAC_TCR_SNAPTYPSEL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_SNAPTYPSEL_Wr_Mask) | ((data & MAC_TCR_SNAPTYPSEL_Mask)<<16));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_SNAPTYPSEL_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 16) & MAC_TCR_SNAPTYPSEL_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSMSTRENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSMSTRENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSMSTRENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MAC_TCR_TSMSTRENA_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MAC_TCR_TSMSTRENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSMSTRENA_Wr_Mask) | ((data & MAC_TCR_TSMSTRENA_Mask)<<15));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSMSTRENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 15) & MAC_TCR_TSMSTRENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSEVNTENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSEVNTENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSEVNTENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MAC_TCR_TSEVNTENA_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MAC_TCR_TSEVNTENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSEVNTENA_Wr_Mask) | ((data & MAC_TCR_TSEVNTENA_Mask)<<14));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSEVNTENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 14) & MAC_TCR_TSEVNTENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSIPV4ENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSIPV4ENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSIPV4ENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MAC_TCR_TSIPV4ENA_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MAC_TCR_TSIPV4ENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSIPV4ENA_Wr_Mask) | ((data & MAC_TCR_TSIPV4ENA_Mask)<<13));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSIPV4ENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 13) & MAC_TCR_TSIPV4ENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSIPV6ENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSIPV6ENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSIPV6ENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MAC_TCR_TSIPV6ENA_Wr_Mask (ULONG)(0xffffefff)
+
+#define MAC_TCR_TSIPV6ENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSIPV6ENA_Wr_Mask) | ((data & MAC_TCR_TSIPV6ENA_Mask)<<12));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSIPV6ENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 12) & MAC_TCR_TSIPV6ENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSIPENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSIPENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSIPENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MAC_TCR_TSIPENA_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MAC_TCR_TSIPENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSIPENA_Wr_Mask) | ((data & MAC_TCR_TSIPENA_Mask)<<11));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSIPENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 11) & MAC_TCR_TSIPENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSVER2ENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSVER2ENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSVER2ENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MAC_TCR_TSVER2ENA_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MAC_TCR_TSVER2ENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSVER2ENA_Wr_Mask) | ((data & MAC_TCR_TSVER2ENA_Mask)<<10));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSVER2ENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 10) & MAC_TCR_TSVER2ENA_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSCTRLSSR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSCTRLSSR_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSCTRLSSR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MAC_TCR_TSCTRLSSR_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MAC_TCR_TSCTRLSSR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSCTRLSSR_Wr_Mask) | ((data & MAC_TCR_TSCTRLSSR_Mask)<<9));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSCTRLSSR_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 9) & MAC_TCR_TSCTRLSSR_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSENALL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSENALL_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSENALL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MAC_TCR_TSENALL_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MAC_TCR_TSENALL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSENALL_Wr_Mask) | ((data & MAC_TCR_TSENALL_Mask)<<8));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSENALL_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 8) & MAC_TCR_TSENALL_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSADDREG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSADDREG_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSADDREG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_TCR_TSADDREG_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_TCR_TSADDREG_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSADDREG_Wr_Mask) | ((data & MAC_TCR_TSADDREG_Mask)<<5));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSADDREG_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 5) & MAC_TCR_TSADDREG_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSTRIG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSTRIG_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSTRIG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_TCR_TSTRIG_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_TCR_TSTRIG_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSTRIG_Wr_Mask) | ((data & MAC_TCR_TSTRIG_Mask)<<4));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSTRIG_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 4) & MAC_TCR_TSTRIG_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSUPDT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSUPDT_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSUPDT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_TCR_TSUPDT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_TCR_TSUPDT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSUPDT_Wr_Mask) | ((data & MAC_TCR_TSUPDT_Mask)<<3));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSUPDT_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 3) & MAC_TCR_TSUPDT_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSINIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSINIT_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSINIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_TCR_TSINIT_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_TCR_TSINIT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSINIT_Wr_Mask) | ((data & MAC_TCR_TSINIT_Mask)<<2));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSINIT_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 2) & MAC_TCR_TSINIT_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSCFUPDT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSCFUPDT_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSCFUPDT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_TCR_TSCFUPDT_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_TCR_TSCFUPDT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSCFUPDT_Wr_Mask) | ((data & MAC_TCR_TSCFUPDT_Mask)<<1));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSCFUPDT_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 1) & MAC_TCR_TSCFUPDT_Mask);\
+} while(0)
+
+/*#define MAC_TCR_TSENA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_TCR_TSENA_Mask (ULONG)(0x1)
+
+/*#define MAC_TCR_TSENA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_TCR_TSENA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_TCR_TSENA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_TCR_RgRd(v);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_29))|((( 0) & (MAC_TCR_Mask_29))<<29);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_25))|((( 0) & (MAC_TCR_Mask_25))<<25);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_21))|((( 0) & (MAC_TCR_Mask_21))<<21);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_19))|((( 0) & (MAC_TCR_Mask_19))<<19);\
+		v = (v & (MAC_TCR_RES_Wr_Mask_6))|((( 0) & (MAC_TCR_Mask_6))<<6);\
+		v = ((v & MAC_TCR_TSENA_Wr_Mask) | ((data & MAC_TCR_TSENA_Mask)<<0));\
+		MAC_TCR_RgWr(v);\
+} while(0)
+
+#define MAC_TCR_TSENA_UdfRd(data) do {\
+		MAC_TCR_RgRd(data);\
+		data = ((data >> 0) & MAC_TCR_TSENA_Mask);\
+} while(0)
+
+
+#define MTL_DSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc0c))
+
+#define MTL_DSR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_DSR_RgOffAddr);\
+} while(0)
+
+#define MTL_DSR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_DSR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_DSR_Mask_10 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_DSR_Mask_10 (ULONG)(0x3f)
+
+/*#define MTL_DSR_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(6)))<<(10)))*/
+
+#define MTL_DSR_RES_Wr_Mask_10 (ULONG)(0xffff03ff)
+
+/*#define  MTL_DSR_Mask_5 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_DSR_Mask_5 (ULONG)(0x7)
+
+/*#define MTL_DSR_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(3)))<<(5)))*/
+
+#define MTL_DSR_RES_Wr_Mask_5 (ULONG)(0xffffff1f)
+
+/*#define MTL_DSR_LOCR_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MTL_DSR_LOCR_Mask (ULONG)(0xffff)
+
+#define MTL_DSR_LOCR_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 16) & MTL_DSR_LOCR_Mask);\
+} while(0)
+
+/*#define MTL_DSR_STSI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_DSR_STSI_Mask (ULONG)(0x1)
+
+#define MTL_DSR_STSI_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 9) & MTL_DSR_STSI_Mask);\
+} while(0)
+
+/*#define MTL_DSR_PKTI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_DSR_PKTI_Mask (ULONG)(0x1)
+
+#define MTL_DSR_PKTI_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 8) & MTL_DSR_PKTI_Mask);\
+} while(0)
+
+/*#define MTL_DSR_BYTEEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_DSR_BYTEEN_Mask (ULONG)(0x3)
+
+/*#define MTL_DSR_BYTEEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (3)))*/
+
+#define MTL_DSR_BYTEEN_Wr_Mask (ULONG)(0xffffffe7)
+
+#define MTL_DSR_BYTEEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_DSR_RgRd(v);\
+		v = (v & (MTL_DSR_RES_Wr_Mask_10))|((( 0) & (MTL_DSR_Mask_10))<<10);\
+		v = (v & (MTL_DSR_RES_Wr_Mask_5))|((( 0) & (MTL_DSR_Mask_5))<<5);\
+		v = ((v & MTL_DSR_BYTEEN_Wr_Mask) | ((data & MTL_DSR_BYTEEN_Mask)<<3));\
+		MTL_DSR_RgWr(v);\
+} while(0)
+
+#define MTL_DSR_BYTEEN_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 3) & MTL_DSR_BYTEEN_Mask);\
+} while(0)
+
+/*#define MTL_DSR_PKTSTATE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_DSR_PKTSTATE_Mask (ULONG)(0x3)
+
+#define MTL_DSR_PKTSTATE_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 1) & MTL_DSR_PKTSTATE_Mask);\
+} while(0)
+
+/*#define MTL_DSR_FIFOBUSY_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_DSR_FIFOBUSY_Mask (ULONG)(0x1)
+
+#define MTL_DSR_FIFOBUSY_UdfRd(data) do {\
+		MTL_DSR_RgRd(data);\
+		data = ((data >> 0) & MTL_DSR_FIFOBUSY_Mask);\
+} while(0)
+
+
+#define MAC_RWPFFR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc4))
+
+#define MAC_RWPFFR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RWPFFR_RgOffAddr);\
+} while(0)
+
+#define MAC_RWPFFR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RWPFFR_RgOffAddr);\
+} while(0)
+
+#define MAC_RWPFFR_MAC_RWPFF_UdfWr(data) do {\
+		MAC_RWPFFR_RgWr(data);\
+} while(0)
+
+#define MAC_RWPFFR_MAC_RWPFF_UdfRd(data) do {\
+		MAC_RWPFFR_RgRd(data);\
+} while(0)
+
+
+#define MAC_RTSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb8))
+
+#define MAC_RTSR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RTSR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_RTSR_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_RWT_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_RWT_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 8) & MAC_RTSR_RWT_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_EXCOL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_EXCOL_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_EXCOL_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 5) & MAC_RTSR_EXCOL_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_LCOL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_LCOL_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_LCOL_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 4) & MAC_RTSR_LCOL_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_EXDEF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_EXDEF_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_EXDEF_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 3) & MAC_RTSR_EXDEF_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_LCARR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_LCARR_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_LCARR_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 2) & MAC_RTSR_LCARR_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_NCARR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_NCARR_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_NCARR_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 1) & MAC_RTSR_NCARR_Mask);\
+} while(0)
+
+/*#define MAC_RTSR_TJT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RTSR_TJT_Mask (ULONG)(0x1)
+
+#define MAC_RTSR_TJT_UdfRd(data) do {\
+		MAC_RTSR_RgRd(data);\
+		data = ((data >> 0) & MAC_RTSR_TJT_Mask);\
+} while(0)
+
+
+#define MTL_IER_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc1c))
+
+#define MTL_IER_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_IER_RgOffAddr);\
+} while(0)
+
+#define MTL_IER_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_IER_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_IER_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  MTL_IER_Mask_17 (ULONG)(0x7fff)
+
+/*#define MTL_IER_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define MTL_IER_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define MTL_IER_MACIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_MACIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_MACIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MTL_IER_MACIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MTL_IER_MACIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_MACIE_Wr_Mask) | ((data & MTL_IER_MACIE_Mask)<<16));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_MACIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 16) & MTL_IER_MACIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q7RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q7RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q7RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MTL_IER_Q7RXOIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MTL_IER_Q7RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q7RXOIE_Wr_Mask) | ((data & MTL_IER_Q7RXOIE_Mask)<<15));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q7RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 15) & MTL_IER_Q7RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q7TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q7TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q7TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MTL_IER_Q7TXUIE_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MTL_IER_Q7TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q7TXUIE_Wr_Mask) | ((data & MTL_IER_Q7TXUIE_Mask)<<14));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q7TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 14) & MTL_IER_Q7TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q6RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q6RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q6RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MTL_IER_Q6RXOIE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MTL_IER_Q6RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q6RXOIE_Wr_Mask) | ((data & MTL_IER_Q6RXOIE_Mask)<<13));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q6RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 13) & MTL_IER_Q6RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q6TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q6TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q6TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MTL_IER_Q6TXUIE_Wr_Mask (ULONG)(0xffffefff)
+
+#define MTL_IER_Q6TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q6TXUIE_Wr_Mask) | ((data & MTL_IER_Q6TXUIE_Mask)<<12));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q6TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 12) & MTL_IER_Q6TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q5RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q5RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q5RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_IER_Q5RXOIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_IER_Q5RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q5RXOIE_Wr_Mask) | ((data & MTL_IER_Q5RXOIE_Mask)<<11));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q5RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 11) & MTL_IER_Q5RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q5TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q5TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q5TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MTL_IER_Q5TXUIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MTL_IER_Q5TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q5TXUIE_Wr_Mask) | ((data & MTL_IER_Q5TXUIE_Mask)<<10));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q5TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 10) & MTL_IER_Q5TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q4RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q4RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q4RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MTL_IER_Q4RXOIE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MTL_IER_Q4RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q4RXOIE_Wr_Mask) | ((data & MTL_IER_Q4RXOIE_Mask)<<9));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q4RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 9) & MTL_IER_Q4RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q4TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q4TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q4TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MTL_IER_Q4TXUIE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MTL_IER_Q4TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q4TXUIE_Wr_Mask) | ((data & MTL_IER_Q4TXUIE_Mask)<<8));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q4TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 8) & MTL_IER_Q4TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q3RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q3RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q3RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_IER_Q3RXOIE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_IER_Q3RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q3RXOIE_Wr_Mask) | ((data & MTL_IER_Q3RXOIE_Mask)<<7));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q3RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 7) & MTL_IER_Q3RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q3TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q3TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q3TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_IER_Q3TXUIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_IER_Q3TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q3TXUIE_Wr_Mask) | ((data & MTL_IER_Q3TXUIE_Mask)<<6));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q3TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 6) & MTL_IER_Q3TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q2RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q2RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q2RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_IER_Q2RXOIE_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_IER_Q2RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q2RXOIE_Wr_Mask) | ((data & MTL_IER_Q2RXOIE_Mask)<<5));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q2RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 5) & MTL_IER_Q2RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q2TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q2TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q2TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_IER_Q2TXUIE_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_IER_Q2TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q2TXUIE_Wr_Mask) | ((data & MTL_IER_Q2TXUIE_Mask)<<4));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q2TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 4) & MTL_IER_Q2TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q1RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q1RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q1RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_IER_Q1RXOIE_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_IER_Q1RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q1RXOIE_Wr_Mask) | ((data & MTL_IER_Q1RXOIE_Mask)<<3));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q1RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 3) & MTL_IER_Q1RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q1TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q1TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q1TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_IER_Q1TXUIE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_IER_Q1TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q1TXUIE_Wr_Mask) | ((data & MTL_IER_Q1TXUIE_Mask)<<2));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q1TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 2) & MTL_IER_Q1TXUIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q0RXOIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q0RXOIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q0RXOIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_IER_Q0RXOIE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_IER_Q0RXOIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q0RXOIE_Wr_Mask) | ((data & MTL_IER_Q0RXOIE_Mask)<<1));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q0RXOIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 1) & MTL_IER_Q0RXOIE_Mask);\
+} while(0)
+
+/*#define MTL_IER_Q0TXUIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_IER_Q0TXUIE_Mask (ULONG)(0x1)
+
+/*#define MTL_IER_Q0TXUIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_IER_Q0TXUIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_IER_Q0TXUIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_IER_RgRd(v);\
+		v = (v & (MTL_IER_RES_Wr_Mask_17))|((( 0) & (MTL_IER_Mask_17))<<17);\
+		v = ((v & MTL_IER_Q0TXUIE_Wr_Mask) | ((data & MTL_IER_Q0TXUIE_Mask)<<0));\
+		MTL_IER_RgWr(v);\
+} while(0)
+
+#define MTL_IER_Q0TXUIE_UdfRd(data) do {\
+		MTL_IER_RgRd(data);\
+		data = ((data >> 0) & MTL_IER_Q0TXUIE_Mask);\
+} while(0)
+
+
+#define MTL_QRCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xefc))
+
+#define MTL_QRCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR7_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR7_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR7_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR7_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR7_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR7_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR7_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR7_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR7_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR7_RgRd(v);\
+		v = (v & (MTL_QRCR7_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR7_Mask_4))<<4);\
+		v = ((v & MTL_QRCR7_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR7_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR7_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR7_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR7_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR7_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR7_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR7_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR7_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR7_RgRd(v);\
+		v = (v & (MTL_QRCR7_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR7_Mask_4))<<4);\
+		v = ((v & MTL_QRCR7_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR7_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR7_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR7_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR7_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xebc))
+
+#define MTL_QRCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR6_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR6_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR6_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR6_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR6_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR6_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR6_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR6_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR6_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR6_RgRd(v);\
+		v = (v & (MTL_QRCR6_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR6_Mask_4))<<4);\
+		v = ((v & MTL_QRCR6_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR6_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR6_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR6_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR6_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR6_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR6_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR6_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR6_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR6_RgRd(v);\
+		v = (v & (MTL_QRCR6_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR6_Mask_4))<<4);\
+		v = ((v & MTL_QRCR6_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR6_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR6_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR6_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR6_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe7c))
+
+#define MTL_QRCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR5_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR5_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR5_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR5_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR5_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR5_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR5_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR5_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR5_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR5_RgRd(v);\
+		v = (v & (MTL_QRCR5_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR5_Mask_4))<<4);\
+		v = ((v & MTL_QRCR5_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR5_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR5_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR5_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR5_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR5_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR5_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR5_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR5_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR5_RgRd(v);\
+		v = (v & (MTL_QRCR5_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR5_Mask_4))<<4);\
+		v = ((v & MTL_QRCR5_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR5_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR5_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR5_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR5_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe3c))
+
+#define MTL_QRCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR4_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR4_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR4_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR4_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR4_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR4_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR4_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR4_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR4_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR4_RgRd(v);\
+		v = (v & (MTL_QRCR4_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR4_Mask_4))<<4);\
+		v = ((v & MTL_QRCR4_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR4_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR4_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR4_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR4_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR4_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR4_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR4_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR4_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR4_RgRd(v);\
+		v = (v & (MTL_QRCR4_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR4_Mask_4))<<4);\
+		v = ((v & MTL_QRCR4_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR4_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR4_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR4_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR4_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdfc))
+
+#define MTL_QRCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR3_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR3_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR3_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR3_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR3_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR3_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR3_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR3_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR3_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR3_RgRd(v);\
+		v = (v & (MTL_QRCR3_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR3_Mask_4))<<4);\
+		v = ((v & MTL_QRCR3_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR3_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR3_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR3_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR3_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR3_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR3_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR3_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR3_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR3_RgRd(v);\
+		v = (v & (MTL_QRCR3_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR3_Mask_4))<<4);\
+		v = ((v & MTL_QRCR3_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR3_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR3_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR3_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR3_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdbc))
+
+#define MTL_QRCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR2_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR2_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR2_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR2_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR2_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR2_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR2_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR2_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR2_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR2_RgRd(v);\
+		v = (v & (MTL_QRCR2_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR2_Mask_4))<<4);\
+		v = ((v & MTL_QRCR2_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR2_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR2_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR2_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR2_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR2_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR2_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR2_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR2_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR2_RgRd(v);\
+		v = (v & (MTL_QRCR2_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR2_Mask_4))<<4);\
+		v = ((v & MTL_QRCR2_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR2_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR2_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR2_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR2_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd7c))
+
+#define MTL_QRCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QRCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QRCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QRCR1_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR1_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR1_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR1_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR1_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR1_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR1_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR1_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR1_RXQ_WEGT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR1_RgRd(v);\
+		v = (v & (MTL_QRCR1_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR1_Mask_4))<<4);\
+		v = ((v & MTL_QRCR1_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR1_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR1_RXQ_WEGT_UdfRd(data) do {\
+		MTL_QRCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QRCR1_RXQ_WEGT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR1_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR1_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR1_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR1_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR1_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QRCR1_RgRd(v);\
+		v = (v & (MTL_QRCR1_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR1_Mask_4))<<4);\
+		v = ((v & MTL_QRCR1_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR1_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QRCR1_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_QRCR1_RgRd(data);\
+		data = ((data >> 3) & MTL_QRCR1_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+
+#define MTL_QRDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xef8))
+
+#define MTL_QRDR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR7_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR7_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR7_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR7_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR7_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR7_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR7_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR7_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR7_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR7_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR7_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR7_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR7_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR7_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR7_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR7_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR7_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR7_PRXQ_UdfRd(data) do {\
+		MTL_QRDR7_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR7_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xeb8))
+
+#define MTL_QRDR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR6_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR6_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR6_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR6_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR6_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR6_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR6_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR6_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR6_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR6_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR6_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR6_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR6_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR6_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR6_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR6_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR6_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR6_PRXQ_UdfRd(data) do {\
+		MTL_QRDR6_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR6_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe78))
+
+#define MTL_QRDR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR5_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR5_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR5_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR5_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR5_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR5_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR5_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR5_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR5_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR5_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR5_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR5_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR5_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR5_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR5_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR5_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR5_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR5_PRXQ_UdfRd(data) do {\
+		MTL_QRDR5_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR5_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe38))
+
+#define MTL_QRDR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR4_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR4_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR4_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR4_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR4_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR4_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR4_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR4_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR4_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR4_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR4_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR4_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR4_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR4_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR4_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR4_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR4_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR4_PRXQ_UdfRd(data) do {\
+		MTL_QRDR4_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR4_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdf8))
+
+#define MTL_QRDR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR3_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR3_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR3_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR3_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR3_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR3_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR3_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR3_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR3_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR3_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR3_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR3_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR3_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR3_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR3_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR3_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR3_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR3_PRXQ_UdfRd(data) do {\
+		MTL_QRDR3_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR3_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdb8))
+
+#define MTL_QRDR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR2_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR2_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR2_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR2_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR2_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR2_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR2_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR2_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR2_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR2_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR2_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR2_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR2_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR2_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR2_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR2_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR2_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR2_PRXQ_UdfRd(data) do {\
+		MTL_QRDR2_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR2_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QRDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd78))
+
+#define MTL_QRDR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QRDR1_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QRDR1_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR1_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR1_RWCSTS_UdfRd(data) do {\
+		MTL_QRDR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QRDR1_RWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR1_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR1_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR1_RRCSTS_UdfRd(data) do {\
+		MTL_QRDR1_RgRd(data);\
+		data = ((data >> 1) & MTL_QRDR1_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR1_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR1_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR1_RXQSTS_UdfRd(data) do {\
+		MTL_QRDR1_RgRd(data);\
+		data = ((data >> 4) & MTL_QRDR1_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR1_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR1_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR1_PRXQ_UdfRd(data) do {\
+		MTL_QRDR1_RgRd(data);\
+		data = ((data >> 16) & MTL_QRDR1_PRXQ_Mask);\
+} while(0)
+
+
+#define MTL_QOCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xef4))
+
+#define MTL_QOCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR7_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR7_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR7_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR7_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR7_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR7_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR7_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR7_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR7_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR7_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR7_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR7_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR7_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR7_RgRd(v);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR7_Mask_12))<<12);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR7_Mask_28))<<28);\
+		v = ((v & MTL_QOCR7_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR7_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR7_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR7_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR7_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR7_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR7_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR7_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR7_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR7_RgRd(v);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR7_Mask_12))<<12);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR7_Mask_28))<<28);\
+		v = ((v & MTL_QOCR7_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR7_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR7_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR7_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR7_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR7_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR7_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR7_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR7_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR7_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR7_RgRd(v);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR7_Mask_12))<<12);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR7_Mask_28))<<28);\
+		v = ((v & MTL_QOCR7_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR7_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR7_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR7_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR7_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR7_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR7_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR7_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR7_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR7_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR7_RgRd(v);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR7_Mask_12))<<12);\
+		v = (v & (MTL_QOCR7_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR7_Mask_28))<<28);\
+		v = ((v & MTL_QOCR7_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR7_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR7_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR7_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR7_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xeb4))
+
+#define MTL_QOCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR6_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR6_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR6_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR6_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR6_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR6_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR6_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR6_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR6_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR6_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR6_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR6_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR6_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR6_RgRd(v);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR6_Mask_12))<<12);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR6_Mask_28))<<28);\
+		v = ((v & MTL_QOCR6_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR6_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR6_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR6_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR6_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR6_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR6_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR6_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR6_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR6_RgRd(v);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR6_Mask_12))<<12);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR6_Mask_28))<<28);\
+		v = ((v & MTL_QOCR6_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR6_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR6_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR6_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR6_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR6_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR6_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR6_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR6_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR6_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR6_RgRd(v);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR6_Mask_12))<<12);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR6_Mask_28))<<28);\
+		v = ((v & MTL_QOCR6_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR6_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR6_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR6_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR6_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR6_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR6_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR6_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR6_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR6_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR6_RgRd(v);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR6_Mask_12))<<12);\
+		v = (v & (MTL_QOCR6_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR6_Mask_28))<<28);\
+		v = ((v & MTL_QOCR6_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR6_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR6_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR6_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR6_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe74))
+
+#define MTL_QOCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR5_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR5_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR5_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR5_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR5_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR5_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR5_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR5_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR5_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR5_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR5_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR5_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR5_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR5_RgRd(v);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR5_Mask_12))<<12);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR5_Mask_28))<<28);\
+		v = ((v & MTL_QOCR5_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR5_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR5_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR5_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR5_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR5_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR5_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR5_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR5_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR5_RgRd(v);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR5_Mask_12))<<12);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR5_Mask_28))<<28);\
+		v = ((v & MTL_QOCR5_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR5_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR5_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR5_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR5_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR5_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR5_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR5_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR5_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR5_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR5_RgRd(v);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR5_Mask_12))<<12);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR5_Mask_28))<<28);\
+		v = ((v & MTL_QOCR5_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR5_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR5_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR5_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR5_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR5_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR5_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR5_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR5_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR5_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR5_RgRd(v);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR5_Mask_12))<<12);\
+		v = (v & (MTL_QOCR5_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR5_Mask_28))<<28);\
+		v = ((v & MTL_QOCR5_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR5_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR5_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR5_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR5_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe34))
+
+#define MTL_QOCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR4_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR4_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR4_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR4_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR4_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR4_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR4_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR4_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR4_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR4_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR4_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR4_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR4_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR4_RgRd(v);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR4_Mask_12))<<12);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR4_Mask_28))<<28);\
+		v = ((v & MTL_QOCR4_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR4_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR4_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR4_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR4_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR4_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR4_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR4_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR4_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR4_RgRd(v);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR4_Mask_12))<<12);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR4_Mask_28))<<28);\
+		v = ((v & MTL_QOCR4_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR4_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR4_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR4_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR4_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR4_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR4_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR4_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR4_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR4_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR4_RgRd(v);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR4_Mask_12))<<12);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR4_Mask_28))<<28);\
+		v = ((v & MTL_QOCR4_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR4_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR4_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR4_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR4_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR4_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR4_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR4_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR4_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR4_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR4_RgRd(v);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR4_Mask_12))<<12);\
+		v = (v & (MTL_QOCR4_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR4_Mask_28))<<28);\
+		v = ((v & MTL_QOCR4_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR4_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR4_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR4_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR4_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdf4))
+
+#define MTL_QOCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR3_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR3_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR3_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR3_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR3_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR3_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR3_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR3_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR3_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR3_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR3_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR3_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR3_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR3_RgRd(v);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR3_Mask_12))<<12);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR3_Mask_28))<<28);\
+		v = ((v & MTL_QOCR3_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR3_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR3_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR3_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR3_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR3_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR3_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR3_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR3_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR3_RgRd(v);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR3_Mask_12))<<12);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR3_Mask_28))<<28);\
+		v = ((v & MTL_QOCR3_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR3_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR3_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR3_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR3_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR3_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR3_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR3_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR3_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR3_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR3_RgRd(v);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR3_Mask_12))<<12);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR3_Mask_28))<<28);\
+		v = ((v & MTL_QOCR3_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR3_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR3_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR3_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR3_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR3_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR3_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR3_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR3_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR3_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR3_RgRd(v);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR3_Mask_12))<<12);\
+		v = (v & (MTL_QOCR3_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR3_Mask_28))<<28);\
+		v = ((v & MTL_QOCR3_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR3_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR3_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR3_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR3_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdb4))
+
+#define MTL_QOCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR2_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR2_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR2_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR2_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR2_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR2_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR2_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR2_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR2_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR2_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR2_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR2_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR2_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR2_RgRd(v);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR2_Mask_12))<<12);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR2_Mask_28))<<28);\
+		v = ((v & MTL_QOCR2_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR2_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR2_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR2_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR2_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR2_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR2_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR2_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR2_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR2_RgRd(v);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR2_Mask_12))<<12);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR2_Mask_28))<<28);\
+		v = ((v & MTL_QOCR2_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR2_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR2_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR2_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR2_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR2_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR2_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR2_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR2_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR2_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR2_RgRd(v);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR2_Mask_12))<<12);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR2_Mask_28))<<28);\
+		v = ((v & MTL_QOCR2_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR2_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR2_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR2_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR2_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR2_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR2_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR2_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR2_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR2_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR2_RgRd(v);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR2_Mask_12))<<12);\
+		v = (v & (MTL_QOCR2_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR2_Mask_28))<<28);\
+		v = ((v & MTL_QOCR2_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR2_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR2_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR2_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR2_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QOCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd74))
+
+#define MTL_QOCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QOCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QOCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QOCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QOCR1_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR1_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR1_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR1_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MTL_QOCR1_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR1_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR1_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR1_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define MTL_QOCR1_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR1_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR1_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR1_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR1_OVFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR1_RgRd(v);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR1_Mask_12))<<12);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR1_Mask_28))<<28);\
+		v = ((v & MTL_QOCR1_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR1_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR1_OVFPKTCNT_UdfRd(data) do {\
+		MTL_QOCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QOCR1_OVFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR1_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR1_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR1_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR1_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR1_OVFCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR1_RgRd(v);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR1_Mask_12))<<12);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR1_Mask_28))<<28);\
+		v = ((v & MTL_QOCR1_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR1_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR1_OVFCNTOVF_UdfRd(data) do {\
+		MTL_QOCR1_RgRd(data);\
+		data = ((data >> 11) & MTL_QOCR1_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR1_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR1_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR1_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR1_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR1_MISPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR1_RgRd(v);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR1_Mask_12))<<12);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR1_Mask_28))<<28);\
+		v = ((v & MTL_QOCR1_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR1_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR1_MISPKTCNT_UdfRd(data) do {\
+		MTL_QOCR1_RgRd(data);\
+		data = ((data >> 16) & MTL_QOCR1_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR1_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR1_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR1_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR1_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR1_MISCNTOVF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QOCR1_RgRd(v);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR1_Mask_12))<<12);\
+		v = (v & (MTL_QOCR1_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR1_Mask_28))<<28);\
+		v = ((v & MTL_QOCR1_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR1_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QOCR1_MISCNTOVF_UdfRd(data) do {\
+		MTL_QOCR1_RgRd(data);\
+		data = ((data >> 27) & MTL_QOCR1_MISCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QROMR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xef0))
+
+#define MTL_QROMR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR7_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR7_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR7_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR7_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR7_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR7_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR7_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR7_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR7_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR7_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR7_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR7_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR7_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR7_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR7_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR7_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR7_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR7_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR7_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR7_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR7_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_RTC_Wr_Mask) | ((data & MTL_QROMR7_RTC_Mask)<<0));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_RTC_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR7_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR7_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR7_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR7_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR7_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_FUP_Wr_Mask) | ((data & MTL_QROMR7_FUP_Mask)<<3));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_FUP_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR7_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR7_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR7_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR7_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR7_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_FEP_Wr_Mask) | ((data & MTL_QROMR7_FEP_Mask)<<4));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_FEP_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR7_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR7_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR7_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR7_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR7_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_RSF_Wr_Mask) | ((data & MTL_QROMR7_RSF_Mask)<<5));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_RSF_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR7_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR7_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR7_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR7_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR7_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR7_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR7_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR7_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR7_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR7_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR7_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_EHFC_Wr_Mask) | ((data & MTL_QROMR7_EHFC_Mask)<<7));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_EHFC_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR7_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR7_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR7_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR7_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR7_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_RFA_Wr_Mask) | ((data & MTL_QROMR7_RFA_Mask)<<8));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_RFA_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR7_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR7_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR7_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR7_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR7_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_RFD_Wr_Mask) | ((data & MTL_QROMR7_RFD_Mask)<<13));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_RFD_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR7_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR7_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR7_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR7_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR7_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR7_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR7_RgRd(v);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR7_Mask_2))<<2);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR7_Mask_11))<<11);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR7_Mask_16))<<16);\
+		v = (v & (MTL_QROMR7_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR7_Mask_30))<<30);\
+		v = ((v & MTL_QROMR7_RQS_Wr_Mask) | ((data & MTL_QROMR7_RQS_Mask)<<20));\
+		MTL_QROMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR7_RQS_UdfRd(data) do {\
+		MTL_QROMR7_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR7_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xeb0))
+
+#define MTL_QROMR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR6_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR6_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR6_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR6_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR6_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR6_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR6_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR6_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR6_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR6_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR6_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR6_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR6_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR6_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR6_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR6_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR6_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR6_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR6_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR6_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR6_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_RTC_Wr_Mask) | ((data & MTL_QROMR6_RTC_Mask)<<0));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_RTC_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR6_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR6_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR6_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR6_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR6_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_FUP_Wr_Mask) | ((data & MTL_QROMR6_FUP_Mask)<<3));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_FUP_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR6_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR6_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR6_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR6_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR6_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_FEP_Wr_Mask) | ((data & MTL_QROMR6_FEP_Mask)<<4));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_FEP_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR6_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR6_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR6_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR6_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR6_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_RSF_Wr_Mask) | ((data & MTL_QROMR6_RSF_Mask)<<5));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_RSF_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR6_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR6_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR6_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR6_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR6_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR6_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR6_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR6_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR6_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR6_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR6_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_EHFC_Wr_Mask) | ((data & MTL_QROMR6_EHFC_Mask)<<7));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_EHFC_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR6_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR6_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR6_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR6_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR6_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_RFA_Wr_Mask) | ((data & MTL_QROMR6_RFA_Mask)<<8));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_RFA_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR6_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR6_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR6_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR6_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR6_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_RFD_Wr_Mask) | ((data & MTL_QROMR6_RFD_Mask)<<13));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_RFD_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR6_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR6_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR6_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR6_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR6_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR6_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR6_RgRd(v);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR6_Mask_2))<<2);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR6_Mask_11))<<11);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR6_Mask_16))<<16);\
+		v = (v & (MTL_QROMR6_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR6_Mask_30))<<30);\
+		v = ((v & MTL_QROMR6_RQS_Wr_Mask) | ((data & MTL_QROMR6_RQS_Mask)<<20));\
+		MTL_QROMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR6_RQS_UdfRd(data) do {\
+		MTL_QROMR6_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR6_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe70))
+
+#define MTL_QROMR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR5_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR5_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR5_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR5_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR5_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR5_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR5_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR5_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR5_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR5_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR5_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR5_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR5_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR5_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR5_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR5_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR5_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR5_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR5_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR5_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR5_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_RTC_Wr_Mask) | ((data & MTL_QROMR5_RTC_Mask)<<0));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_RTC_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR5_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR5_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR5_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR5_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR5_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_FUP_Wr_Mask) | ((data & MTL_QROMR5_FUP_Mask)<<3));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_FUP_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR5_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR5_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR5_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR5_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR5_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_FEP_Wr_Mask) | ((data & MTL_QROMR5_FEP_Mask)<<4));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_FEP_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR5_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR5_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR5_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR5_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR5_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_RSF_Wr_Mask) | ((data & MTL_QROMR5_RSF_Mask)<<5));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_RSF_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR5_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR5_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR5_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR5_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR5_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR5_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR5_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR5_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR5_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR5_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR5_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_EHFC_Wr_Mask) | ((data & MTL_QROMR5_EHFC_Mask)<<7));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_EHFC_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR5_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR5_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR5_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR5_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR5_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_RFA_Wr_Mask) | ((data & MTL_QROMR5_RFA_Mask)<<8));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_RFA_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR5_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR5_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR5_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR5_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR5_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_RFD_Wr_Mask) | ((data & MTL_QROMR5_RFD_Mask)<<13));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_RFD_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR5_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR5_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR5_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR5_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR5_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR5_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR5_RgRd(v);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR5_Mask_2))<<2);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR5_Mask_11))<<11);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR5_Mask_16))<<16);\
+		v = (v & (MTL_QROMR5_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR5_Mask_30))<<30);\
+		v = ((v & MTL_QROMR5_RQS_Wr_Mask) | ((data & MTL_QROMR5_RQS_Mask)<<20));\
+		MTL_QROMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR5_RQS_UdfRd(data) do {\
+		MTL_QROMR5_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR5_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe30))
+
+#define MTL_QROMR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR4_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR4_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR4_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR4_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR4_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR4_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR4_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR4_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR4_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR4_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR4_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR4_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR4_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR4_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR4_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR4_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR4_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR4_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR4_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR4_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR4_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_RTC_Wr_Mask) | ((data & MTL_QROMR4_RTC_Mask)<<0));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_RTC_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR4_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR4_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR4_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR4_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR4_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_FUP_Wr_Mask) | ((data & MTL_QROMR4_FUP_Mask)<<3));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_FUP_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR4_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR4_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR4_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR4_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR4_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_FEP_Wr_Mask) | ((data & MTL_QROMR4_FEP_Mask)<<4));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_FEP_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR4_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR4_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR4_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR4_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR4_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_RSF_Wr_Mask) | ((data & MTL_QROMR4_RSF_Mask)<<5));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_RSF_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR4_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR4_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR4_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR4_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR4_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR4_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR4_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR4_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR4_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR4_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR4_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_EHFC_Wr_Mask) | ((data & MTL_QROMR4_EHFC_Mask)<<7));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_EHFC_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR4_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR4_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR4_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR4_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR4_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_RFA_Wr_Mask) | ((data & MTL_QROMR4_RFA_Mask)<<8));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_RFA_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR4_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR4_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR4_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR4_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR4_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_RFD_Wr_Mask) | ((data & MTL_QROMR4_RFD_Mask)<<13));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_RFD_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR4_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR4_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR4_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR4_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR4_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR4_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR4_RgRd(v);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR4_Mask_2))<<2);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR4_Mask_11))<<11);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR4_Mask_16))<<16);\
+		v = (v & (MTL_QROMR4_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR4_Mask_30))<<30);\
+		v = ((v & MTL_QROMR4_RQS_Wr_Mask) | ((data & MTL_QROMR4_RQS_Mask)<<20));\
+		MTL_QROMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR4_RQS_UdfRd(data) do {\
+		MTL_QROMR4_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR4_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdf0))
+
+#define MTL_QROMR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR3_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR3_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR3_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR3_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR3_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR3_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR3_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR3_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR3_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR3_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR3_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR3_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR3_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR3_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR3_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR3_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR3_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR3_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR3_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR3_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR3_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_RTC_Wr_Mask) | ((data & MTL_QROMR3_RTC_Mask)<<0));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_RTC_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR3_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR3_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR3_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR3_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR3_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_FUP_Wr_Mask) | ((data & MTL_QROMR3_FUP_Mask)<<3));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_FUP_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR3_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR3_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR3_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR3_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR3_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_FEP_Wr_Mask) | ((data & MTL_QROMR3_FEP_Mask)<<4));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_FEP_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR3_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR3_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR3_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR3_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR3_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_RSF_Wr_Mask) | ((data & MTL_QROMR3_RSF_Mask)<<5));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_RSF_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR3_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR3_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR3_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR3_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR3_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR3_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR3_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR3_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR3_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR3_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR3_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_EHFC_Wr_Mask) | ((data & MTL_QROMR3_EHFC_Mask)<<7));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_EHFC_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR3_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR3_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR3_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR3_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR3_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_RFA_Wr_Mask) | ((data & MTL_QROMR3_RFA_Mask)<<8));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_RFA_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR3_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR3_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR3_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR3_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR3_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_RFD_Wr_Mask) | ((data & MTL_QROMR3_RFD_Mask)<<13));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_RFD_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR3_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR3_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR3_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR3_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR3_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR3_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR3_RgRd(v);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR3_Mask_2))<<2);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR3_Mask_11))<<11);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR3_Mask_16))<<16);\
+		v = (v & (MTL_QROMR3_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR3_Mask_30))<<30);\
+		v = ((v & MTL_QROMR3_RQS_Wr_Mask) | ((data & MTL_QROMR3_RQS_Mask)<<20));\
+		MTL_QROMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR3_RQS_UdfRd(data) do {\
+		MTL_QROMR3_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR3_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdb0))
+
+#define MTL_QROMR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR2_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR2_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR2_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR2_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR2_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR2_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR2_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR2_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR2_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR2_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR2_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR2_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR2_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR2_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR2_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR2_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR2_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR2_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR2_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR2_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR2_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_RTC_Wr_Mask) | ((data & MTL_QROMR2_RTC_Mask)<<0));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_RTC_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR2_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR2_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR2_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR2_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR2_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_FUP_Wr_Mask) | ((data & MTL_QROMR2_FUP_Mask)<<3));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_FUP_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR2_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR2_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR2_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR2_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR2_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_FEP_Wr_Mask) | ((data & MTL_QROMR2_FEP_Mask)<<4));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_FEP_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR2_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR2_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR2_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR2_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR2_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_RSF_Wr_Mask) | ((data & MTL_QROMR2_RSF_Mask)<<5));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_RSF_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR2_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR2_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR2_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR2_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR2_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR2_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR2_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR2_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR2_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR2_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR2_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_EHFC_Wr_Mask) | ((data & MTL_QROMR2_EHFC_Mask)<<7));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_EHFC_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR2_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR2_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR2_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR2_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR2_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_RFA_Wr_Mask) | ((data & MTL_QROMR2_RFA_Mask)<<8));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_RFA_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR2_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR2_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR2_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR2_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR2_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_RFD_Wr_Mask) | ((data & MTL_QROMR2_RFD_Mask)<<13));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_RFD_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR2_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR2_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR2_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR2_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR2_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR2_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR2_RgRd(v);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR2_Mask_2))<<2);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR2_Mask_11))<<11);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR2_Mask_16))<<16);\
+		v = (v & (MTL_QROMR2_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR2_Mask_30))<<30);\
+		v = ((v & MTL_QROMR2_RQS_Wr_Mask) | ((data & MTL_QROMR2_RQS_Mask)<<20));\
+		MTL_QROMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR2_RQS_UdfRd(data) do {\
+		MTL_QROMR2_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR2_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QROMR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd70))
+
+#define MTL_QROMR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QROMR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QROMR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QROMR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QROMR1_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR1_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR1_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR1_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define  MTL_QROMR1_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR1_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR1_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR1_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR1_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR1_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR1_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR1_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR1_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR1_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR1_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR1_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define MTL_QROMR1_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR1_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR1_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR1_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR1_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_RTC_Wr_Mask) | ((data & MTL_QROMR1_RTC_Mask)<<0));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_RTC_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QROMR1_RTC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR1_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR1_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR1_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR1_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_FUP_Wr_Mask) | ((data & MTL_QROMR1_FUP_Mask)<<3));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_FUP_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 3) & MTL_QROMR1_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR1_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR1_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR1_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR1_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_FEP_Wr_Mask) | ((data & MTL_QROMR1_FEP_Mask)<<4));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_FEP_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 4) & MTL_QROMR1_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR1_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR1_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR1_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR1_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_RSF_Wr_Mask) | ((data & MTL_QROMR1_RSF_Mask)<<5));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_RSF_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 5) & MTL_QROMR1_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR1_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR1_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR1_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR1_DIS_TCP_EF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR1_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_DIS_TCP_EF_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 6) & MTL_QROMR1_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR1_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR1_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR1_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR1_EHFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_EHFC_Wr_Mask) | ((data & MTL_QROMR1_EHFC_Mask)<<7));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_EHFC_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 7) & MTL_QROMR1_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR1_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR1_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR1_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR1_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_RFA_Wr_Mask) | ((data & MTL_QROMR1_RFA_Mask)<<8));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_RFA_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 8) & MTL_QROMR1_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR1_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR1_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR1_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR1_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_RFD_Wr_Mask) | ((data & MTL_QROMR1_RFD_Mask)<<13));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_RFD_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 13) & MTL_QROMR1_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR1_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR1_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR1_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR1_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR1_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QROMR1_RgRd(v);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR1_Mask_2))<<2);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR1_Mask_11))<<11);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR1_Mask_16))<<16);\
+		v = (v & (MTL_QROMR1_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR1_Mask_30))<<30);\
+		v = ((v & MTL_QROMR1_RQS_Wr_Mask) | ((data & MTL_QROMR1_RQS_Mask)<<20));\
+		MTL_QROMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QROMR1_RQS_UdfRd(data) do {\
+		MTL_QROMR1_RgRd(data);\
+		data = ((data >> 20) & MTL_QROMR1_RQS_Mask);\
+} while(0)
+
+
+#define MTL_QLCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xee4))
+
+#define MTL_QLCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR7_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR7_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR7_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR7_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR7_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR7_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR7_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR7_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR7_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR7_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR7_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR7_LC_Wr_Mask) | ((data & MTL_QLCR7_LC_Mask)<<0));\
+		MTL_QLCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR7_LC_UdfRd(data) do {\
+		MTL_QLCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR7_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xea4))
+
+#define MTL_QLCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR6_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR6_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR6_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR6_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR6_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR6_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR6_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR6_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR6_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR6_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR6_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR6_LC_Wr_Mask) | ((data & MTL_QLCR6_LC_Mask)<<0));\
+		MTL_QLCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR6_LC_UdfRd(data) do {\
+		MTL_QLCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR6_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe64))
+
+#define MTL_QLCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR5_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR5_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR5_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR5_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR5_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR5_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR5_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR5_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR5_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR5_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR5_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR5_LC_Wr_Mask) | ((data & MTL_QLCR5_LC_Mask)<<0));\
+		MTL_QLCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR5_LC_UdfRd(data) do {\
+		MTL_QLCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR5_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe24))
+
+#define MTL_QLCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR4_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR4_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR4_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR4_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR4_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR4_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR4_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR4_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR4_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR4_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR4_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR4_LC_Wr_Mask) | ((data & MTL_QLCR4_LC_Mask)<<0));\
+		MTL_QLCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR4_LC_UdfRd(data) do {\
+		MTL_QLCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR4_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xde4))
+
+#define MTL_QLCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR3_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR3_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR3_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR3_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR3_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR3_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR3_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR3_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR3_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR3_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR3_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR3_LC_Wr_Mask) | ((data & MTL_QLCR3_LC_Mask)<<0));\
+		MTL_QLCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR3_LC_UdfRd(data) do {\
+		MTL_QLCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR3_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xda4))
+
+#define MTL_QLCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR2_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR2_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR2_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR2_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR2_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR2_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR2_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR2_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR2_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR2_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR2_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR2_LC_Wr_Mask) | ((data & MTL_QLCR2_LC_Mask)<<0));\
+		MTL_QLCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR2_LC_UdfRd(data) do {\
+		MTL_QLCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR2_LC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd64))
+
+#define MTL_QLCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QLCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QLCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QLCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QLCR1_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR1_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR1_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR1_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR1_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR1_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR1_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR1_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR1_LC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR1_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR1_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR1_LC_Wr_Mask) | ((data & MTL_QLCR1_LC_Mask)<<0));\
+		MTL_QLCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QLCR1_LC_UdfRd(data) do {\
+		MTL_QLCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QLCR1_LC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xee0))
+
+#define MTL_QHCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR7_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR7_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR7_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR7_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR7_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR7_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR7_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR7_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR7_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR7_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR7_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR7_HC_Wr_Mask) | ((data & MTL_QHCR7_HC_Mask)<<0));\
+		MTL_QHCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR7_HC_UdfRd(data) do {\
+		MTL_QHCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR7_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xea0))
+
+#define MTL_QHCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR6_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR6_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR6_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR6_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR6_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR6_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR6_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR6_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR6_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR6_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR6_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR6_HC_Wr_Mask) | ((data & MTL_QHCR6_HC_Mask)<<0));\
+		MTL_QHCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR6_HC_UdfRd(data) do {\
+		MTL_QHCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR6_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe60))
+
+#define MTL_QHCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR5_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR5_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR5_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR5_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR5_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR5_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR5_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR5_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR5_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR5_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR5_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR5_HC_Wr_Mask) | ((data & MTL_QHCR5_HC_Mask)<<0));\
+		MTL_QHCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR5_HC_UdfRd(data) do {\
+		MTL_QHCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR5_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe20))
+
+#define MTL_QHCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR4_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR4_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR4_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR4_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR4_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR4_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR4_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR4_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR4_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR4_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR4_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR4_HC_Wr_Mask) | ((data & MTL_QHCR4_HC_Mask)<<0));\
+		MTL_QHCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR4_HC_UdfRd(data) do {\
+		MTL_QHCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR4_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xde0))
+
+#define MTL_QHCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR3_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR3_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR3_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR3_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR3_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR3_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR3_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR3_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR3_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR3_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR3_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR3_HC_Wr_Mask) | ((data & MTL_QHCR3_HC_Mask)<<0));\
+		MTL_QHCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR3_HC_UdfRd(data) do {\
+		MTL_QHCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR3_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xda0))
+
+#define MTL_QHCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR2_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR2_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR2_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR2_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR2_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR2_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR2_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR2_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR2_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR2_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR2_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR2_HC_Wr_Mask) | ((data & MTL_QHCR2_HC_Mask)<<0));\
+		MTL_QHCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR2_HC_UdfRd(data) do {\
+		MTL_QHCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR2_HC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd60))
+
+#define MTL_QHCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QHCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QHCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QHCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QHCR1_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR1_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR1_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR1_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR1_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR1_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR1_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR1_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR1_HC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR1_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR1_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR1_HC_Wr_Mask) | ((data & MTL_QHCR1_HC_Mask)<<0));\
+		MTL_QHCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QHCR1_HC_UdfRd(data) do {\
+		MTL_QHCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QHCR1_HC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xedc))
+
+#define MTL_QSSCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR7_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR7_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR7_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR7_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR7_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR7_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR7_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR7_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR7_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR7_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR7_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR7_SSC_Wr_Mask) | ((data & MTL_QSSCR7_SSC_Mask)<<0));\
+		MTL_QSSCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR7_SSC_UdfRd(data) do {\
+		MTL_QSSCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR7_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe9c))
+
+#define MTL_QSSCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR6_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR6_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR6_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR6_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR6_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR6_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR6_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR6_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR6_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR6_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR6_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR6_SSC_Wr_Mask) | ((data & MTL_QSSCR6_SSC_Mask)<<0));\
+		MTL_QSSCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR6_SSC_UdfRd(data) do {\
+		MTL_QSSCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR6_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe5c))
+
+#define MTL_QSSCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR5_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR5_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR5_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR5_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR5_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR5_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR5_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR5_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR5_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR5_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR5_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR5_SSC_Wr_Mask) | ((data & MTL_QSSCR5_SSC_Mask)<<0));\
+		MTL_QSSCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR5_SSC_UdfRd(data) do {\
+		MTL_QSSCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR5_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe1c))
+
+#define MTL_QSSCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR4_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR4_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR4_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR4_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR4_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR4_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR4_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR4_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR4_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR4_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR4_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR4_SSC_Wr_Mask) | ((data & MTL_QSSCR4_SSC_Mask)<<0));\
+		MTL_QSSCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR4_SSC_UdfRd(data) do {\
+		MTL_QSSCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR4_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xddc))
+
+#define MTL_QSSCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR3_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR3_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR3_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR3_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR3_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR3_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR3_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR3_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR3_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR3_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR3_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR3_SSC_Wr_Mask) | ((data & MTL_QSSCR3_SSC_Mask)<<0));\
+		MTL_QSSCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR3_SSC_UdfRd(data) do {\
+		MTL_QSSCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR3_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd9c))
+
+#define MTL_QSSCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR2_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR2_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR2_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR2_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR2_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR2_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR2_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR2_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR2_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR2_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR2_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR2_SSC_Wr_Mask) | ((data & MTL_QSSCR2_SSC_Mask)<<0));\
+		MTL_QSSCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR2_SSC_UdfRd(data) do {\
+		MTL_QSSCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR2_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd5c))
+
+#define MTL_QSSCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QSSCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QSSCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QSSCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QSSCR1_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR1_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR1_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR1_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR1_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR1_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR1_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR1_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR1_SSC_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR1_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR1_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR1_SSC_Wr_Mask) | ((data & MTL_QSSCR1_SSC_Mask)<<0));\
+		MTL_QSSCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QSSCR1_SSC_UdfRd(data) do {\
+		MTL_QSSCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QSSCR1_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QW7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xed8))
+
+#define MTL_QW7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW7_RgOffAddr);\
+} while(0)
+
+#define MTL_QW7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW7_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW7_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW7_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW7_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW7_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW7_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW7_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW7_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW7_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW7_RES_Wr_Mask_21))|((( 0) & (MTL_QW7_Mask_21))<<21);\
+		(v) = ((v & MTL_QW7_ISCQW_Wr_Mask) | ((data & MTL_QW7_ISCQW_Mask)<<0));\
+		MTL_QW7_RgWr(v);\
+} while(0)
+
+#define MTL_QW7_ISCQW_UdfRd(data) do {\
+		MTL_QW7_RgRd(data);\
+		data = ((data >> 0) & MTL_QW7_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe98))
+
+#define MTL_QW6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW6_RgOffAddr);\
+} while(0)
+
+#define MTL_QW6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW6_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW6_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW6_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW6_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW6_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW6_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW6_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW6_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW6_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW6_RES_Wr_Mask_21))|((( 0) & (MTL_QW6_Mask_21))<<21);\
+		(v) = ((v & MTL_QW6_ISCQW_Wr_Mask) | ((data & MTL_QW6_ISCQW_Mask)<<0));\
+		MTL_QW6_RgWr(v);\
+} while(0)
+
+#define MTL_QW6_ISCQW_UdfRd(data) do {\
+		MTL_QW6_RgRd(data);\
+		data = ((data >> 0) & MTL_QW6_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe58))
+
+#define MTL_QW5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW5_RgOffAddr);\
+} while(0)
+
+#define MTL_QW5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW5_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW5_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW5_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW5_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW5_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW5_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW5_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW5_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW5_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW5_RES_Wr_Mask_21))|((( 0) & (MTL_QW5_Mask_21))<<21);\
+		(v) = ((v & MTL_QW5_ISCQW_Wr_Mask) | ((data & MTL_QW5_ISCQW_Mask)<<0));\
+		MTL_QW5_RgWr(v);\
+} while(0)
+
+#define MTL_QW5_ISCQW_UdfRd(data) do {\
+		MTL_QW5_RgRd(data);\
+		data = ((data >> 0) & MTL_QW5_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe18))
+
+#define MTL_QW4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW4_RgOffAddr);\
+} while(0)
+
+#define MTL_QW4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW4_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW4_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW4_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW4_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW4_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW4_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW4_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW4_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW4_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW4_RES_Wr_Mask_21))|((( 0) & (MTL_QW4_Mask_21))<<21);\
+		(v) = ((v & MTL_QW4_ISCQW_Wr_Mask) | ((data & MTL_QW4_ISCQW_Mask)<<0));\
+		MTL_QW4_RgWr(v);\
+} while(0)
+
+#define MTL_QW4_ISCQW_UdfRd(data) do {\
+		MTL_QW4_RgRd(data);\
+		data = ((data >> 0) & MTL_QW4_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdd8))
+
+#define MTL_QW3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW3_RgOffAddr);\
+} while(0)
+
+#define MTL_QW3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW3_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW3_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW3_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW3_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW3_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW3_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW3_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW3_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW3_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW3_RES_Wr_Mask_21))|((( 0) & (MTL_QW3_Mask_21))<<21);\
+		(v) = ((v & MTL_QW3_ISCQW_Wr_Mask) | ((data & MTL_QW3_ISCQW_Mask)<<0));\
+		MTL_QW3_RgWr(v);\
+} while(0)
+
+#define MTL_QW3_ISCQW_UdfRd(data) do {\
+		MTL_QW3_RgRd(data);\
+		data = ((data >> 0) & MTL_QW3_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd98))
+
+#define MTL_QW2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW2_RgOffAddr);\
+} while(0)
+
+#define MTL_QW2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW2_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW2_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW2_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW2_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW2_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW2_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW2_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW2_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW2_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW2_RES_Wr_Mask_21))|((( 0) & (MTL_QW2_Mask_21))<<21);\
+		(v) = ((v & MTL_QW2_ISCQW_Wr_Mask) | ((data & MTL_QW2_ISCQW_Mask)<<0));\
+		MTL_QW2_RgWr(v);\
+} while(0)
+
+#define MTL_QW2_ISCQW_UdfRd(data) do {\
+		MTL_QW2_RgRd(data);\
+		data = ((data >> 0) & MTL_QW2_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QW1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd58))
+
+#define MTL_QW1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QW1_RgOffAddr);\
+} while(0)
+
+#define MTL_QW1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QW1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QW1_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW1_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW1_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW1_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW1_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW1_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW1_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW1_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW1_ISCQW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW1_RES_Wr_Mask_21))|((( 0) & (MTL_QW1_Mask_21))<<21);\
+		(v) = ((v & MTL_QW1_ISCQW_Wr_Mask) | ((data & MTL_QW1_ISCQW_Mask)<<0));\
+		MTL_QW1_RgWr(v);\
+} while(0)
+
+#define MTL_QW1_ISCQW_UdfRd(data) do {\
+		MTL_QW1_RgRd(data);\
+		data = ((data >> 0) & MTL_QW1_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QESR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xed4))
+
+#define MTL_QESR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR7_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR7_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR7_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR7_ABS_UdfRd(data) do {\
+		MTL_QESR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR7_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR7_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR7_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR7_ABSU_UdfRd(data) do {\
+		MTL_QESR7_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR7_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe94))
+
+#define MTL_QESR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR6_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR6_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR6_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR6_ABS_UdfRd(data) do {\
+		MTL_QESR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR6_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR6_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR6_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR6_ABSU_UdfRd(data) do {\
+		MTL_QESR6_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR6_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe54))
+
+#define MTL_QESR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR5_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR5_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR5_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR5_ABS_UdfRd(data) do {\
+		MTL_QESR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR5_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR5_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR5_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR5_ABSU_UdfRd(data) do {\
+		MTL_QESR5_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR5_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe14))
+
+#define MTL_QESR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR4_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR4_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR4_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR4_ABS_UdfRd(data) do {\
+		MTL_QESR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR4_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR4_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR4_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR4_ABSU_UdfRd(data) do {\
+		MTL_QESR4_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR4_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdd4))
+
+#define MTL_QESR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR3_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR3_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR3_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR3_ABS_UdfRd(data) do {\
+		MTL_QESR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR3_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR3_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR3_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR3_ABSU_UdfRd(data) do {\
+		MTL_QESR3_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR3_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd94))
+
+#define MTL_QESR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR2_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR2_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR2_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR2_ABS_UdfRd(data) do {\
+		MTL_QESR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR2_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR2_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR2_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR2_ABSU_UdfRd(data) do {\
+		MTL_QESR2_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR2_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QESR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd54))
+
+#define MTL_QESR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QESR1_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QESR1_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR1_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR1_ABS_UdfRd(data) do {\
+		MTL_QESR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QESR1_ABS_Mask);\
+} while(0)
+
+/*#define MTL_QESR1_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR1_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR1_ABSU_UdfRd(data) do {\
+		MTL_QESR1_RgRd(data);\
+		data = ((data >> 24) & MTL_QESR1_ABSU_Mask);\
+} while(0)
+
+
+#define MTL_QECR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xed0))
+
+#define MTL_QECR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR7_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR7_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR7_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR7_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR7_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR7_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR7_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR7_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR7_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR7_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR7_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR7_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR7_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR7_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR7_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR7_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR7_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR7_RgRd(v);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_0))|((( 0) & (MTL_QECR7_Mask_0))<<0);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_7))|((( 0) & (MTL_QECR7_Mask_7))<<7);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_25))|((( 0) & (MTL_QECR7_Mask_25))<<25);\
+		v = ((v & MTL_QECR7_AVALG_Wr_Mask) | ((data & MTL_QECR7_AVALG_Mask)<<2));\
+		MTL_QECR7_RgWr(v);\
+} while(0)
+
+#define MTL_QECR7_AVALG_UdfRd(data) do {\
+		MTL_QECR7_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR7_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR7_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR7_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR7_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR7_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR7_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR7_RgRd(v);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_0))|((( 0) & (MTL_QECR7_Mask_0))<<0);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_7))|((( 0) & (MTL_QECR7_Mask_7))<<7);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_25))|((( 0) & (MTL_QECR7_Mask_25))<<25);\
+		v = ((v & MTL_QECR7_CC_Wr_Mask) | ((data & MTL_QECR7_CC_Mask)<<3));\
+		MTL_QECR7_RgWr(v);\
+} while(0)
+
+#define MTL_QECR7_CC_UdfRd(data) do {\
+		MTL_QECR7_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR7_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR7_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR7_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR7_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR7_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR7_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR7_RgRd(v);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_0))|((( 0) & (MTL_QECR7_Mask_0))<<0);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_7))|((( 0) & (MTL_QECR7_Mask_7))<<7);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_25))|((( 0) & (MTL_QECR7_Mask_25))<<25);\
+		v = ((v & MTL_QECR7_SLC_Wr_Mask) | ((data & MTL_QECR7_SLC_Mask)<<4));\
+		MTL_QECR7_RgWr(v);\
+} while(0)
+
+#define MTL_QECR7_SLC_UdfRd(data) do {\
+		MTL_QECR7_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR7_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR7_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR7_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR7_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR7_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR7_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR7_RgRd(v);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_0))|((( 0) & (MTL_QECR7_Mask_0))<<0);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_7))|((( 0) & (MTL_QECR7_Mask_7))<<7);\
+		v = (v & (MTL_QECR7_RES_Wr_Mask_25))|((( 0) & (MTL_QECR7_Mask_25))<<25);\
+		v = ((v & MTL_QECR7_ABPSSIE_Wr_Mask) | ((data & MTL_QECR7_ABPSSIE_Mask)<<24));\
+		MTL_QECR7_RgWr(v);\
+} while(0)
+
+#define MTL_QECR7_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR7_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR7_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe90))
+
+#define MTL_QECR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR6_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR6_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR6_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR6_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR6_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR6_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR6_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR6_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR6_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR6_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR6_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR6_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR6_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR6_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR6_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR6_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR6_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR6_RgRd(v);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_0))|((( 0) & (MTL_QECR6_Mask_0))<<0);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_7))|((( 0) & (MTL_QECR6_Mask_7))<<7);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_25))|((( 0) & (MTL_QECR6_Mask_25))<<25);\
+		v = ((v & MTL_QECR6_AVALG_Wr_Mask) | ((data & MTL_QECR6_AVALG_Mask)<<2));\
+		MTL_QECR6_RgWr(v);\
+} while(0)
+
+#define MTL_QECR6_AVALG_UdfRd(data) do {\
+		MTL_QECR6_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR6_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR6_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR6_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR6_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR6_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR6_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR6_RgRd(v);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_0))|((( 0) & (MTL_QECR6_Mask_0))<<0);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_7))|((( 0) & (MTL_QECR6_Mask_7))<<7);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_25))|((( 0) & (MTL_QECR6_Mask_25))<<25);\
+		v = ((v & MTL_QECR6_CC_Wr_Mask) | ((data & MTL_QECR6_CC_Mask)<<3));\
+		MTL_QECR6_RgWr(v);\
+} while(0)
+
+#define MTL_QECR6_CC_UdfRd(data) do {\
+		MTL_QECR6_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR6_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR6_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR6_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR6_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR6_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR6_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR6_RgRd(v);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_0))|((( 0) & (MTL_QECR6_Mask_0))<<0);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_7))|((( 0) & (MTL_QECR6_Mask_7))<<7);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_25))|((( 0) & (MTL_QECR6_Mask_25))<<25);\
+		v = ((v & MTL_QECR6_SLC_Wr_Mask) | ((data & MTL_QECR6_SLC_Mask)<<4));\
+		MTL_QECR6_RgWr(v);\
+} while(0)
+
+#define MTL_QECR6_SLC_UdfRd(data) do {\
+		MTL_QECR6_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR6_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR6_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR6_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR6_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR6_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR6_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR6_RgRd(v);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_0))|((( 0) & (MTL_QECR6_Mask_0))<<0);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_7))|((( 0) & (MTL_QECR6_Mask_7))<<7);\
+		v = (v & (MTL_QECR6_RES_Wr_Mask_25))|((( 0) & (MTL_QECR6_Mask_25))<<25);\
+		v = ((v & MTL_QECR6_ABPSSIE_Wr_Mask) | ((data & MTL_QECR6_ABPSSIE_Mask)<<24));\
+		MTL_QECR6_RgWr(v);\
+} while(0)
+
+#define MTL_QECR6_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR6_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR6_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe50))
+
+#define MTL_QECR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR5_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR5_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR5_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR5_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR5_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR5_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR5_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR5_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR5_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR5_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR5_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR5_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR5_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR5_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR5_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR5_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR5_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR5_RgRd(v);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_0))|((( 0) & (MTL_QECR5_Mask_0))<<0);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_7))|((( 0) & (MTL_QECR5_Mask_7))<<7);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_25))|((( 0) & (MTL_QECR5_Mask_25))<<25);\
+		v = ((v & MTL_QECR5_AVALG_Wr_Mask) | ((data & MTL_QECR5_AVALG_Mask)<<2));\
+		MTL_QECR5_RgWr(v);\
+} while(0)
+
+#define MTL_QECR5_AVALG_UdfRd(data) do {\
+		MTL_QECR5_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR5_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR5_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR5_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR5_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR5_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR5_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR5_RgRd(v);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_0))|((( 0) & (MTL_QECR5_Mask_0))<<0);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_7))|((( 0) & (MTL_QECR5_Mask_7))<<7);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_25))|((( 0) & (MTL_QECR5_Mask_25))<<25);\
+		v = ((v & MTL_QECR5_CC_Wr_Mask) | ((data & MTL_QECR5_CC_Mask)<<3));\
+		MTL_QECR5_RgWr(v);\
+} while(0)
+
+#define MTL_QECR5_CC_UdfRd(data) do {\
+		MTL_QECR5_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR5_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR5_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR5_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR5_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR5_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR5_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR5_RgRd(v);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_0))|((( 0) & (MTL_QECR5_Mask_0))<<0);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_7))|((( 0) & (MTL_QECR5_Mask_7))<<7);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_25))|((( 0) & (MTL_QECR5_Mask_25))<<25);\
+		v = ((v & MTL_QECR5_SLC_Wr_Mask) | ((data & MTL_QECR5_SLC_Mask)<<4));\
+		MTL_QECR5_RgWr(v);\
+} while(0)
+
+#define MTL_QECR5_SLC_UdfRd(data) do {\
+		MTL_QECR5_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR5_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR5_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR5_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR5_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR5_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR5_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR5_RgRd(v);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_0))|((( 0) & (MTL_QECR5_Mask_0))<<0);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_7))|((( 0) & (MTL_QECR5_Mask_7))<<7);\
+		v = (v & (MTL_QECR5_RES_Wr_Mask_25))|((( 0) & (MTL_QECR5_Mask_25))<<25);\
+		v = ((v & MTL_QECR5_ABPSSIE_Wr_Mask) | ((data & MTL_QECR5_ABPSSIE_Mask)<<24));\
+		MTL_QECR5_RgWr(v);\
+} while(0)
+
+#define MTL_QECR5_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR5_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR5_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe10))
+
+#define MTL_QECR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR4_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR4_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR4_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR4_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR4_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR4_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR4_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR4_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR4_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR4_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR4_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR4_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR4_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR4_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR4_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR4_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR4_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR4_RgRd(v);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_0))|((( 0) & (MTL_QECR4_Mask_0))<<0);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_7))|((( 0) & (MTL_QECR4_Mask_7))<<7);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_25))|((( 0) & (MTL_QECR4_Mask_25))<<25);\
+		v = ((v & MTL_QECR4_AVALG_Wr_Mask) | ((data & MTL_QECR4_AVALG_Mask)<<2));\
+		MTL_QECR4_RgWr(v);\
+} while(0)
+
+#define MTL_QECR4_AVALG_UdfRd(data) do {\
+		MTL_QECR4_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR4_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR4_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR4_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR4_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR4_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR4_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR4_RgRd(v);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_0))|((( 0) & (MTL_QECR4_Mask_0))<<0);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_7))|((( 0) & (MTL_QECR4_Mask_7))<<7);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_25))|((( 0) & (MTL_QECR4_Mask_25))<<25);\
+		v = ((v & MTL_QECR4_CC_Wr_Mask) | ((data & MTL_QECR4_CC_Mask)<<3));\
+		MTL_QECR4_RgWr(v);\
+} while(0)
+
+#define MTL_QECR4_CC_UdfRd(data) do {\
+		MTL_QECR4_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR4_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR4_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR4_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR4_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR4_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR4_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR4_RgRd(v);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_0))|((( 0) & (MTL_QECR4_Mask_0))<<0);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_7))|((( 0) & (MTL_QECR4_Mask_7))<<7);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_25))|((( 0) & (MTL_QECR4_Mask_25))<<25);\
+		v = ((v & MTL_QECR4_SLC_Wr_Mask) | ((data & MTL_QECR4_SLC_Mask)<<4));\
+		MTL_QECR4_RgWr(v);\
+} while(0)
+
+#define MTL_QECR4_SLC_UdfRd(data) do {\
+		MTL_QECR4_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR4_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR4_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR4_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR4_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR4_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR4_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR4_RgRd(v);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_0))|((( 0) & (MTL_QECR4_Mask_0))<<0);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_7))|((( 0) & (MTL_QECR4_Mask_7))<<7);\
+		v = (v & (MTL_QECR4_RES_Wr_Mask_25))|((( 0) & (MTL_QECR4_Mask_25))<<25);\
+		v = ((v & MTL_QECR4_ABPSSIE_Wr_Mask) | ((data & MTL_QECR4_ABPSSIE_Mask)<<24));\
+		MTL_QECR4_RgWr(v);\
+} while(0)
+
+#define MTL_QECR4_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR4_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR4_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdd0))
+
+#define MTL_QECR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR3_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR3_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR3_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR3_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR3_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR3_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR3_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR3_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR3_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR3_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR3_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR3_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR3_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR3_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR3_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR3_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR3_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR3_RgRd(v);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_0))|((( 0) & (MTL_QECR3_Mask_0))<<0);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_7))|((( 0) & (MTL_QECR3_Mask_7))<<7);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_25))|((( 0) & (MTL_QECR3_Mask_25))<<25);\
+		v = ((v & MTL_QECR3_AVALG_Wr_Mask) | ((data & MTL_QECR3_AVALG_Mask)<<2));\
+		MTL_QECR3_RgWr(v);\
+} while(0)
+
+#define MTL_QECR3_AVALG_UdfRd(data) do {\
+		MTL_QECR3_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR3_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR3_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR3_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR3_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR3_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR3_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR3_RgRd(v);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_0))|((( 0) & (MTL_QECR3_Mask_0))<<0);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_7))|((( 0) & (MTL_QECR3_Mask_7))<<7);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_25))|((( 0) & (MTL_QECR3_Mask_25))<<25);\
+		v = ((v & MTL_QECR3_CC_Wr_Mask) | ((data & MTL_QECR3_CC_Mask)<<3));\
+		MTL_QECR3_RgWr(v);\
+} while(0)
+
+#define MTL_QECR3_CC_UdfRd(data) do {\
+		MTL_QECR3_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR3_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR3_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR3_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR3_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR3_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR3_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR3_RgRd(v);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_0))|((( 0) & (MTL_QECR3_Mask_0))<<0);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_7))|((( 0) & (MTL_QECR3_Mask_7))<<7);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_25))|((( 0) & (MTL_QECR3_Mask_25))<<25);\
+		v = ((v & MTL_QECR3_SLC_Wr_Mask) | ((data & MTL_QECR3_SLC_Mask)<<4));\
+		MTL_QECR3_RgWr(v);\
+} while(0)
+
+#define MTL_QECR3_SLC_UdfRd(data) do {\
+		MTL_QECR3_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR3_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR3_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR3_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR3_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR3_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR3_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR3_RgRd(v);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_0))|((( 0) & (MTL_QECR3_Mask_0))<<0);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_7))|((( 0) & (MTL_QECR3_Mask_7))<<7);\
+		v = (v & (MTL_QECR3_RES_Wr_Mask_25))|((( 0) & (MTL_QECR3_Mask_25))<<25);\
+		v = ((v & MTL_QECR3_ABPSSIE_Wr_Mask) | ((data & MTL_QECR3_ABPSSIE_Mask)<<24));\
+		MTL_QECR3_RgWr(v);\
+} while(0)
+
+#define MTL_QECR3_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR3_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR3_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd90))
+
+#define MTL_QECR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR2_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR2_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR2_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR2_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR2_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR2_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR2_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR2_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR2_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR2_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR2_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR2_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR2_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR2_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR2_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR2_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR2_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR2_RgRd(v);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_0))|((( 0) & (MTL_QECR2_Mask_0))<<0);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_7))|((( 0) & (MTL_QECR2_Mask_7))<<7);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_25))|((( 0) & (MTL_QECR2_Mask_25))<<25);\
+		v = ((v & MTL_QECR2_AVALG_Wr_Mask) | ((data & MTL_QECR2_AVALG_Mask)<<2));\
+		MTL_QECR2_RgWr(v);\
+} while(0)
+
+#define MTL_QECR2_AVALG_UdfRd(data) do {\
+		MTL_QECR2_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR2_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR2_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR2_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR2_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR2_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR2_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR2_RgRd(v);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_0))|((( 0) & (MTL_QECR2_Mask_0))<<0);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_7))|((( 0) & (MTL_QECR2_Mask_7))<<7);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_25))|((( 0) & (MTL_QECR2_Mask_25))<<25);\
+		v = ((v & MTL_QECR2_CC_Wr_Mask) | ((data & MTL_QECR2_CC_Mask)<<3));\
+		MTL_QECR2_RgWr(v);\
+} while(0)
+
+#define MTL_QECR2_CC_UdfRd(data) do {\
+		MTL_QECR2_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR2_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR2_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR2_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR2_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR2_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR2_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR2_RgRd(v);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_0))|((( 0) & (MTL_QECR2_Mask_0))<<0);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_7))|((( 0) & (MTL_QECR2_Mask_7))<<7);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_25))|((( 0) & (MTL_QECR2_Mask_25))<<25);\
+		v = ((v & MTL_QECR2_SLC_Wr_Mask) | ((data & MTL_QECR2_SLC_Mask)<<4));\
+		MTL_QECR2_RgWr(v);\
+} while(0)
+
+#define MTL_QECR2_SLC_UdfRd(data) do {\
+		MTL_QECR2_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR2_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR2_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR2_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR2_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR2_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR2_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR2_RgRd(v);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_0))|((( 0) & (MTL_QECR2_Mask_0))<<0);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_7))|((( 0) & (MTL_QECR2_Mask_7))<<7);\
+		v = (v & (MTL_QECR2_RES_Wr_Mask_25))|((( 0) & (MTL_QECR2_Mask_25))<<25);\
+		v = ((v & MTL_QECR2_ABPSSIE_Wr_Mask) | ((data & MTL_QECR2_ABPSSIE_Mask)<<24));\
+		MTL_QECR2_RgWr(v);\
+} while(0)
+
+#define MTL_QECR2_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR2_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR2_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QECR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd50))
+
+#define MTL_QECR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QECR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QECR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QECR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QECR1_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR1_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR1_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR1_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define  MTL_QECR1_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR1_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR1_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR1_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR1_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR1_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR1_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR1_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MTL_QECR1_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR1_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR1_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR1_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR1_AVALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR1_RgRd(v);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_0))|((( 0) & (MTL_QECR1_Mask_0))<<0);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_7))|((( 0) & (MTL_QECR1_Mask_7))<<7);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_25))|((( 0) & (MTL_QECR1_Mask_25))<<25);\
+		v = ((v & MTL_QECR1_AVALG_Wr_Mask) | ((data & MTL_QECR1_AVALG_Mask)<<2));\
+		MTL_QECR1_RgWr(v);\
+} while(0)
+
+#define MTL_QECR1_AVALG_UdfRd(data) do {\
+		MTL_QECR1_RgRd(data);\
+		data = ((data >> 2) & MTL_QECR1_AVALG_Mask);\
+} while(0)
+
+/*#define MTL_QECR1_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR1_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR1_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR1_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR1_CC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR1_RgRd(v);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_0))|((( 0) & (MTL_QECR1_Mask_0))<<0);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_7))|((( 0) & (MTL_QECR1_Mask_7))<<7);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_25))|((( 0) & (MTL_QECR1_Mask_25))<<25);\
+		v = ((v & MTL_QECR1_CC_Wr_Mask) | ((data & MTL_QECR1_CC_Mask)<<3));\
+		MTL_QECR1_RgWr(v);\
+} while(0)
+
+#define MTL_QECR1_CC_UdfRd(data) do {\
+		MTL_QECR1_RgRd(data);\
+		data = ((data >> 3) & MTL_QECR1_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR1_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR1_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR1_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR1_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR1_SLC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR1_RgRd(v);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_0))|((( 0) & (MTL_QECR1_Mask_0))<<0);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_7))|((( 0) & (MTL_QECR1_Mask_7))<<7);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_25))|((( 0) & (MTL_QECR1_Mask_25))<<25);\
+		v = ((v & MTL_QECR1_SLC_Wr_Mask) | ((data & MTL_QECR1_SLC_Mask)<<4));\
+		MTL_QECR1_RgWr(v);\
+} while(0)
+
+#define MTL_QECR1_SLC_UdfRd(data) do {\
+		MTL_QECR1_RgRd(data);\
+		data = ((data >> 4) & MTL_QECR1_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR1_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR1_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR1_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR1_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR1_ABPSSIE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QECR1_RgRd(v);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_0))|((( 0) & (MTL_QECR1_Mask_0))<<0);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_7))|((( 0) & (MTL_QECR1_Mask_7))<<7);\
+		v = (v & (MTL_QECR1_RES_Wr_Mask_25))|((( 0) & (MTL_QECR1_Mask_25))<<25);\
+		v = ((v & MTL_QECR1_ABPSSIE_Wr_Mask) | ((data & MTL_QECR1_ABPSSIE_Mask)<<24));\
+		MTL_QECR1_RgWr(v);\
+} while(0)
+
+#define MTL_QECR1_ABPSSIE_UdfRd(data) do {\
+		MTL_QECR1_RgRd(data);\
+		data = ((data >> 24) & MTL_QECR1_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_QTDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xec8))
+
+#define MTL_QTDR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR7_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR7_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR7_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR7_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR7_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR7_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR7_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR7_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR7_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR7_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR7_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR7_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR7_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR7_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR7_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR7_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR7_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR7_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR7_PTXQ_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR7_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR7_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR7_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR7_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR7_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR7_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe88))
+
+#define MTL_QTDR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR6_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR6_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR6_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR6_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR6_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR6_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR6_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR6_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR6_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR6_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR6_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR6_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR6_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR6_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR6_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR6_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR6_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR6_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR6_PTXQ_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR6_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR6_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR6_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR6_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR6_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR6_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe48))
+
+#define MTL_QTDR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR5_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR5_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR5_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR5_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR5_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR5_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR5_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR5_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR5_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR5_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR5_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR5_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR5_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR5_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR5_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR5_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR5_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR5_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR5_PTXQ_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR5_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR5_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR5_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR5_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR5_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR5_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe08))
+
+#define MTL_QTDR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR4_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR4_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR4_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR4_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR4_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR4_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR4_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR4_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR4_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR4_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR4_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR4_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR4_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR4_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR4_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR4_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR4_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR4_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR4_PTXQ_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR4_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR4_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR4_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR4_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR4_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR4_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdc8))
+
+#define MTL_QTDR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR3_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR3_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR3_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR3_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR3_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR3_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR3_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR3_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR3_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR3_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR3_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR3_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR3_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR3_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR3_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR3_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR3_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR3_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR3_PTXQ_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR3_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR3_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR3_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR3_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR3_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR3_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd88))
+
+#define MTL_QTDR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR2_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR2_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR2_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR2_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR2_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR2_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR2_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR2_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR2_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR2_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR2_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR2_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR2_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR2_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR2_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR2_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR2_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR2_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR2_PTXQ_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR2_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR2_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR2_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR2_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR2_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR2_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QTDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd48))
+
+#define MTL_QTDR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTDR1_RgOffAddr);\
+} while(0)
+
+/*#define MTL_QTDR1_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR1_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR1_TXQPAUSED_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QTDR1_TXQPAUSED_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR1_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR1_TRCSTS_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 1) & MTL_QTDR1_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR1_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR1_TWCSTS_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 3) & MTL_QTDR1_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR1_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR1_TXQSTS_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 4) & MTL_QTDR1_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR1_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR1_TXSTSFSTS_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 5) & MTL_QTDR1_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR1_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR1_PTXQ_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 16) & MTL_QTDR1_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR1_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR1_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR1_STXSTSF_UdfRd(data) do {\
+		MTL_QTDR1_RgRd(data);\
+		data = ((data >> 20) & MTL_QTDR1_STXSTSF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xec4))
+
+#define MTL_QUCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR7_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR7_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR7_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR7_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR7_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR7_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR7_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR7_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR7_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR7_RgRd(v);\
+		v = (v & (MTL_QUCR7_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR7_Mask_12))<<12);\
+		v = ((v & MTL_QUCR7_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR7_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR7_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR7_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR7_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR7_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR7_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR7_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR7_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR7_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe84))
+
+#define MTL_QUCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR6_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR6_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR6_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR6_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR6_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR6_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR6_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR6_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR6_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR6_RgRd(v);\
+		v = (v & (MTL_QUCR6_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR6_Mask_12))<<12);\
+		v = ((v & MTL_QUCR6_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR6_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR6_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR6_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR6_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR6_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR6_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR6_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR6_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR6_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe44))
+
+#define MTL_QUCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR5_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR5_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR5_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR5_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR5_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR5_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR5_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR5_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR5_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR5_RgRd(v);\
+		v = (v & (MTL_QUCR5_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR5_Mask_12))<<12);\
+		v = ((v & MTL_QUCR5_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR5_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR5_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR5_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR5_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR5_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR5_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR5_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR5_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR5_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe04))
+
+#define MTL_QUCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR4_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR4_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR4_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR4_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR4_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR4_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR4_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR4_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR4_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR4_RgRd(v);\
+		v = (v & (MTL_QUCR4_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR4_Mask_12))<<12);\
+		v = ((v & MTL_QUCR4_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR4_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR4_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR4_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR4_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR4_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR4_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR4_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR4_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR4_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdc4))
+
+#define MTL_QUCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR3_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR3_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR3_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR3_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR3_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR3_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR3_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR3_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR3_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR3_RgRd(v);\
+		v = (v & (MTL_QUCR3_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR3_Mask_12))<<12);\
+		v = ((v & MTL_QUCR3_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR3_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR3_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR3_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR3_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR3_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR3_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR3_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR3_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR3_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd84))
+
+#define MTL_QUCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR2_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR2_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR2_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR2_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR2_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR2_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR2_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR2_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR2_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR2_RgRd(v);\
+		v = (v & (MTL_QUCR2_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR2_Mask_12))<<12);\
+		v = ((v & MTL_QUCR2_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR2_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR2_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR2_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR2_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR2_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR2_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR2_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR2_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR2_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QUCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd44))
+
+#define MTL_QUCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QUCR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QUCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QUCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QUCR1_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR1_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR1_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR1_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR1_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR1_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR1_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR1_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR1_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QUCR1_RgRd(v);\
+		v = (v & (MTL_QUCR1_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR1_Mask_12))<<12);\
+		v = ((v & MTL_QUCR1_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR1_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR1_RgWr(v);\
+} while(0)
+
+#define MTL_QUCR1_UFPKTCNT_UdfRd(data) do {\
+		MTL_QUCR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QUCR1_UFPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QUCR1_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR1_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR1_UFCNTOVF_UdfRd(data) do {\
+		MTL_QUCR1_RgRd(data);\
+		data = ((data >> 11) & MTL_QUCR1_UFCNTOVF_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xec0))
+
+#define MTL_QTOMR7_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR7_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR7_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR7_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR7_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR7_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR7_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR7_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR7_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR7_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR7_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR7_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR7_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR7_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR7_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR7_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR7_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR7_RgRd(v);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR7_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR7_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR7_FTQ_Wr_Mask) | ((data & MTL_QTOMR7_FTQ_Mask)<<0));\
+		MTL_QTOMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR7_FTQ_UdfRd(data) do {\
+		MTL_QTOMR7_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR7_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR7_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR7_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR7_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR7_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR7_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR7_RgRd(v);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR7_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR7_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR7_TSF_Wr_Mask) | ((data & MTL_QTOMR7_TSF_Mask)<<1));\
+		MTL_QTOMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR7_TSF_UdfRd(data) do {\
+		MTL_QTOMR7_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR7_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR7_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR7_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR7_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR7_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR7_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR7_RgRd(v);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR7_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR7_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR7_TXQEN_Wr_Mask) | ((data & MTL_QTOMR7_TXQEN_Mask)<<2));\
+		MTL_QTOMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR7_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR7_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR7_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR7_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR7_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR7_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR7_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR7_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR7_RgRd(v);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR7_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR7_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR7_TTC_Wr_Mask) | ((data & MTL_QTOMR7_TTC_Mask)<<4));\
+		MTL_QTOMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR7_TTC_UdfRd(data) do {\
+		MTL_QTOMR7_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR7_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR7_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR7_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR7_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR7_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR7_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR7_RgRd(v);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR7_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR7_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR7_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR7_TQS_Wr_Mask) | ((data & MTL_QTOMR7_TQS_Mask)<<16));\
+		MTL_QTOMR7_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR7_TQS_UdfRd(data) do {\
+		MTL_QTOMR7_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR7_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe80))
+
+#define MTL_QTOMR6_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR6_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR6_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR6_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR6_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR6_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR6_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR6_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR6_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR6_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR6_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR6_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR6_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR6_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR6_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR6_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR6_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR6_RgRd(v);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR6_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR6_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR6_FTQ_Wr_Mask) | ((data & MTL_QTOMR6_FTQ_Mask)<<0));\
+		MTL_QTOMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR6_FTQ_UdfRd(data) do {\
+		MTL_QTOMR6_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR6_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR6_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR6_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR6_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR6_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR6_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR6_RgRd(v);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR6_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR6_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR6_TSF_Wr_Mask) | ((data & MTL_QTOMR6_TSF_Mask)<<1));\
+		MTL_QTOMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR6_TSF_UdfRd(data) do {\
+		MTL_QTOMR6_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR6_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR6_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR6_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR6_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR6_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR6_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR6_RgRd(v);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR6_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR6_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR6_TXQEN_Wr_Mask) | ((data & MTL_QTOMR6_TXQEN_Mask)<<2));\
+		MTL_QTOMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR6_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR6_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR6_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR6_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR6_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR6_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR6_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR6_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR6_RgRd(v);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR6_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR6_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR6_TTC_Wr_Mask) | ((data & MTL_QTOMR6_TTC_Mask)<<4));\
+		MTL_QTOMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR6_TTC_UdfRd(data) do {\
+		MTL_QTOMR6_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR6_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR6_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR6_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR6_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR6_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR6_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR6_RgRd(v);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR6_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR6_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR6_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR6_TQS_Wr_Mask) | ((data & MTL_QTOMR6_TQS_Mask)<<16));\
+		MTL_QTOMR6_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR6_TQS_UdfRd(data) do {\
+		MTL_QTOMR6_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR6_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe40))
+
+#define MTL_QTOMR5_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR5_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR5_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR5_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR5_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR5_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR5_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR5_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR5_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR5_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR5_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR5_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR5_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR5_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR5_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR5_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR5_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR5_RgRd(v);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR5_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR5_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR5_FTQ_Wr_Mask) | ((data & MTL_QTOMR5_FTQ_Mask)<<0));\
+		MTL_QTOMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR5_FTQ_UdfRd(data) do {\
+		MTL_QTOMR5_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR5_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR5_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR5_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR5_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR5_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR5_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR5_RgRd(v);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR5_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR5_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR5_TSF_Wr_Mask) | ((data & MTL_QTOMR5_TSF_Mask)<<1));\
+		MTL_QTOMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR5_TSF_UdfRd(data) do {\
+		MTL_QTOMR5_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR5_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR5_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR5_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR5_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR5_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR5_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR5_RgRd(v);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR5_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR5_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR5_TXQEN_Wr_Mask) | ((data & MTL_QTOMR5_TXQEN_Mask)<<2));\
+		MTL_QTOMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR5_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR5_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR5_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR5_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR5_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR5_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR5_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR5_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR5_RgRd(v);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR5_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR5_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR5_TTC_Wr_Mask) | ((data & MTL_QTOMR5_TTC_Mask)<<4));\
+		MTL_QTOMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR5_TTC_UdfRd(data) do {\
+		MTL_QTOMR5_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR5_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR5_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR5_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR5_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR5_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR5_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR5_RgRd(v);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR5_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR5_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR5_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR5_TQS_Wr_Mask) | ((data & MTL_QTOMR5_TQS_Mask)<<16));\
+		MTL_QTOMR5_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR5_TQS_UdfRd(data) do {\
+		MTL_QTOMR5_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR5_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xe00))
+
+#define MTL_QTOMR4_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR4_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR4_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR4_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR4_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR4_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR4_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR4_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR4_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR4_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR4_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR4_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR4_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR4_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR4_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR4_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR4_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR4_RgRd(v);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR4_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR4_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR4_FTQ_Wr_Mask) | ((data & MTL_QTOMR4_FTQ_Mask)<<0));\
+		MTL_QTOMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR4_FTQ_UdfRd(data) do {\
+		MTL_QTOMR4_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR4_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR4_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR4_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR4_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR4_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR4_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR4_RgRd(v);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR4_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR4_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR4_TSF_Wr_Mask) | ((data & MTL_QTOMR4_TSF_Mask)<<1));\
+		MTL_QTOMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR4_TSF_UdfRd(data) do {\
+		MTL_QTOMR4_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR4_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR4_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR4_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR4_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR4_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR4_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR4_RgRd(v);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR4_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR4_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR4_TXQEN_Wr_Mask) | ((data & MTL_QTOMR4_TXQEN_Mask)<<2));\
+		MTL_QTOMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR4_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR4_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR4_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR4_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR4_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR4_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR4_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR4_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR4_RgRd(v);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR4_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR4_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR4_TTC_Wr_Mask) | ((data & MTL_QTOMR4_TTC_Mask)<<4));\
+		MTL_QTOMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR4_TTC_UdfRd(data) do {\
+		MTL_QTOMR4_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR4_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR4_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR4_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR4_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR4_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR4_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR4_RgRd(v);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR4_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR4_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR4_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR4_TQS_Wr_Mask) | ((data & MTL_QTOMR4_TQS_Mask)<<16));\
+		MTL_QTOMR4_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR4_TQS_UdfRd(data) do {\
+		MTL_QTOMR4_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR4_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xdc0))
+
+#define MTL_QTOMR3_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR3_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR3_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR3_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR3_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR3_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR3_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR3_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR3_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR3_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR3_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR3_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR3_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR3_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR3_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR3_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR3_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR3_RgRd(v);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR3_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR3_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR3_FTQ_Wr_Mask) | ((data & MTL_QTOMR3_FTQ_Mask)<<0));\
+		MTL_QTOMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR3_FTQ_UdfRd(data) do {\
+		MTL_QTOMR3_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR3_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR3_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR3_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR3_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR3_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR3_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR3_RgRd(v);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR3_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR3_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR3_TSF_Wr_Mask) | ((data & MTL_QTOMR3_TSF_Mask)<<1));\
+		MTL_QTOMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR3_TSF_UdfRd(data) do {\
+		MTL_QTOMR3_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR3_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR3_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR3_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR3_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR3_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR3_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR3_RgRd(v);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR3_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR3_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR3_TXQEN_Wr_Mask) | ((data & MTL_QTOMR3_TXQEN_Mask)<<2));\
+		MTL_QTOMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR3_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR3_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR3_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR3_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR3_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR3_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR3_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR3_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR3_RgRd(v);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR3_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR3_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR3_TTC_Wr_Mask) | ((data & MTL_QTOMR3_TTC_Mask)<<4));\
+		MTL_QTOMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR3_TTC_UdfRd(data) do {\
+		MTL_QTOMR3_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR3_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR3_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR3_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR3_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR3_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR3_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR3_RgRd(v);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR3_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR3_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR3_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR3_TQS_Wr_Mask) | ((data & MTL_QTOMR3_TQS_Mask)<<16));\
+		MTL_QTOMR3_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR3_TQS_UdfRd(data) do {\
+		MTL_QTOMR3_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR3_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd80))
+
+#define MTL_QTOMR2_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR2_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR2_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR2_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR2_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR2_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR2_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR2_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR2_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR2_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR2_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR2_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR2_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR2_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR2_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR2_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR2_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR2_RgRd(v);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR2_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR2_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR2_FTQ_Wr_Mask) | ((data & MTL_QTOMR2_FTQ_Mask)<<0));\
+		MTL_QTOMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR2_FTQ_UdfRd(data) do {\
+		MTL_QTOMR2_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR2_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR2_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR2_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR2_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR2_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR2_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR2_RgRd(v);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR2_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR2_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR2_TSF_Wr_Mask) | ((data & MTL_QTOMR2_TSF_Mask)<<1));\
+		MTL_QTOMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR2_TSF_UdfRd(data) do {\
+		MTL_QTOMR2_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR2_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR2_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR2_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR2_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR2_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR2_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR2_RgRd(v);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR2_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR2_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR2_TXQEN_Wr_Mask) | ((data & MTL_QTOMR2_TXQEN_Mask)<<2));\
+		MTL_QTOMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR2_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR2_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR2_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR2_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR2_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR2_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR2_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR2_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR2_RgRd(v);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR2_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR2_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR2_TTC_Wr_Mask) | ((data & MTL_QTOMR2_TTC_Mask)<<4));\
+		MTL_QTOMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR2_TTC_UdfRd(data) do {\
+		MTL_QTOMR2_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR2_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR2_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR2_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR2_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR2_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR2_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR2_RgRd(v);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR2_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR2_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR2_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR2_TQS_Wr_Mask) | ((data & MTL_QTOMR2_TQS_Mask)<<16));\
+		MTL_QTOMR2_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR2_TQS_UdfRd(data) do {\
+		MTL_QTOMR2_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR2_TQS_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd40))
+
+#define MTL_QTOMR1_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_QTOMR1_RgOffAddr);\
+} while(0)
+
+#define MTL_QTOMR1_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_QTOMR1_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_QTOMR1_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR1_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR1_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR1_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define  MTL_QTOMR1_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR1_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR1_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR1_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MTL_QTOMR1_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR1_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR1_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR1_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR1_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR1_RgRd(v);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR1_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR1_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR1_FTQ_Wr_Mask) | ((data & MTL_QTOMR1_FTQ_Mask)<<0));\
+		MTL_QTOMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR1_FTQ_UdfRd(data) do {\
+		MTL_QTOMR1_RgRd(data);\
+		data = ((data >> 0) & MTL_QTOMR1_FTQ_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR1_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR1_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR1_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR1_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR1_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR1_RgRd(v);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR1_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR1_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR1_TSF_Wr_Mask) | ((data & MTL_QTOMR1_TSF_Mask)<<1));\
+		MTL_QTOMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR1_TSF_UdfRd(data) do {\
+		MTL_QTOMR1_RgRd(data);\
+		data = ((data >> 1) & MTL_QTOMR1_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR1_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR1_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR1_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR1_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR1_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR1_RgRd(v);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR1_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR1_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR1_TXQEN_Wr_Mask) | ((data & MTL_QTOMR1_TXQEN_Mask)<<2));\
+		MTL_QTOMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR1_TXQEN_UdfRd(data) do {\
+		MTL_QTOMR1_RgRd(data);\
+		data = ((data >> 2) & MTL_QTOMR1_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR1_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR1_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR1_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR1_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR1_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR1_RgRd(v);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR1_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR1_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR1_TTC_Wr_Mask) | ((data & MTL_QTOMR1_TTC_Mask)<<4));\
+		MTL_QTOMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR1_TTC_UdfRd(data) do {\
+		MTL_QTOMR1_RgRd(data);\
+		data = ((data >> 4) & MTL_QTOMR1_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR1_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR1_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR1_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR1_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR1_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_QTOMR1_RgRd(v);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR1_Mask_7))<<7);\
+		v = (v & (MTL_QTOMR1_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR1_Mask_26))<<26);\
+		v = ((v & MTL_QTOMR1_TQS_Wr_Mask) | ((data & MTL_QTOMR1_TQS_Mask)<<16));\
+		MTL_QTOMR1_RgWr(v);\
+} while(0)
+
+#define MTL_QTOMR1_TQS_UdfRd(data) do {\
+		MTL_QTOMR1_RgRd(data);\
+		data = ((data >> 16) & MTL_QTOMR1_TQS_Mask);\
+} while(0)
+
+
+#define MAC_PMTCSR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc0))
+
+#define MAC_PMTCSR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_PMTCSR_RgOffAddr);\
+} while(0)
+
+#define MAC_PMTCSR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_PMTCSR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_PMTCSR_Mask_27 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_PMTCSR_Mask_27 (ULONG)(0xf)
+
+/*#define MAC_PMTCSR_RES_Wr_Mask_27 (ULONG)(~((~(~0<<(4)))<<(27)))*/
+
+#define MAC_PMTCSR_RES_Wr_Mask_27 (ULONG)(0x87ffffff)
+
+/*#define  MAC_PMTCSR_Mask_10 (ULONG)(~(~0<<(14)))*/
+
+#define  MAC_PMTCSR_Mask_10 (ULONG)(0x3fff)
+
+/*#define MAC_PMTCSR_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(14)))<<(10)))*/
+
+#define MAC_PMTCSR_RES_Wr_Mask_10 (ULONG)(0xff0003ff)
+
+/*#define  MAC_PMTCSR_Mask_7 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_PMTCSR_Mask_7 (ULONG)(0x3)
+
+/*#define MAC_PMTCSR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(2)))<<(7)))*/
+
+#define MAC_PMTCSR_RES_Wr_Mask_7 (ULONG)(0xfffffe7f)
+
+/*#define  MAC_PMTCSR_Mask_3 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_PMTCSR_Mask_3 (ULONG)(0x3)
+
+/*#define MAC_PMTCSR_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(2)))<<(3)))*/
+
+#define MAC_PMTCSR_RES_Wr_Mask_3 (ULONG)(0xffffffe7)
+
+/*#define MAC_PMTCSR_RWKFILTRST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_RWKFILTRST_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_RWKFILTRST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PMTCSR_RWKFILTRST_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PMTCSR_RWKFILTRST_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_RWKFILTRST_Wr_Mask) | ((data & MAC_PMTCSR_RWKFILTRST_Mask)<<31));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_RWKFILTRST_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 31) & MAC_PMTCSR_RWKFILTRST_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_RWKPTR_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_PMTCSR_RWKPTR_Mask (ULONG)(0x7)
+
+#define MAC_PMTCSR_RWKPTR_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 24) & MAC_PMTCSR_RWKPTR_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_GLBLUCAST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_GLBLUCAST_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_GLBLUCAST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MAC_PMTCSR_GLBLUCAST_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MAC_PMTCSR_GLBLUCAST_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_GLBLUCAST_Wr_Mask) | ((data & MAC_PMTCSR_GLBLUCAST_Mask)<<9));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_GLBLUCAST_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 9) & MAC_PMTCSR_GLBLUCAST_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_RWKPRCVD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_RWKPRCVD_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_RWKPRCVD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MAC_PMTCSR_RWKPRCVD_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MAC_PMTCSR_RWKPRCVD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_RWKPRCVD_Wr_Mask) | ((data & MAC_PMTCSR_RWKPRCVD_Mask)<<6));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_RWKPRCVD_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 6) & MAC_PMTCSR_RWKPRCVD_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_MGKPRCVD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_MGKPRCVD_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_MGKPRCVD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_PMTCSR_MGKPRCVD_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_PMTCSR_MGKPRCVD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_MGKPRCVD_Wr_Mask) | ((data & MAC_PMTCSR_MGKPRCVD_Mask)<<5));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_MGKPRCVD_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 5) & MAC_PMTCSR_MGKPRCVD_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_RWKPKTEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_RWKPKTEN_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_RWKPKTEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_PMTCSR_RWKPKTEN_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_PMTCSR_RWKPKTEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_RWKPKTEN_Wr_Mask) | ((data & MAC_PMTCSR_RWKPKTEN_Mask)<<2));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_RWKPKTEN_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 2) & MAC_PMTCSR_RWKPKTEN_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_MGKPKTEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_MGKPKTEN_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_MGKPKTEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_PMTCSR_MGKPKTEN_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_PMTCSR_MGKPKTEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_MGKPKTEN_Wr_Mask) | ((data & MAC_PMTCSR_MGKPKTEN_Mask)<<1));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_MGKPKTEN_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 1) & MAC_PMTCSR_MGKPKTEN_Mask);\
+} while(0)
+
+/*#define MAC_PMTCSR_PWRDWN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PMTCSR_PWRDWN_Mask (ULONG)(0x1)
+
+/*#define MAC_PMTCSR_PWRDWN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_PMTCSR_PWRDWN_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_PMTCSR_PWRDWN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_PMTCSR_RgRd(v);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_27))|((( 0) & (MAC_PMTCSR_Mask_27))<<27);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_10))|((( 0) & (MAC_PMTCSR_Mask_10))<<10);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_7))|((( 0) & (MAC_PMTCSR_Mask_7))<<7);\
+		v = (v & (MAC_PMTCSR_RES_Wr_Mask_3))|((( 0) & (MAC_PMTCSR_Mask_3))<<3);\
+		v = ((v & MAC_PMTCSR_PWRDWN_Wr_Mask) | ((data & MAC_PMTCSR_PWRDWN_Mask)<<0));\
+		MAC_PMTCSR_RgWr(v);\
+} while(0)
+
+#define MAC_PMTCSR_PWRDWN_UdfRd(data) do {\
+		MAC_PMTCSR_RgRd(data);\
+		data = ((data >> 0) & MAC_PMTCSR_PWRDWN_Mask);\
+} while(0)
+
+
+#define MMC_RXICMP_ERR_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x884))
+
+#define MMC_RXICMP_ERR_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXICMP_ERR_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXICMP_ERR_OCTETS_RXICMP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_RXICMP_ERR_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXICMP_GD_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x880))
+
+#define MMC_RXICMP_GD_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXICMP_GD_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXICMP_GD_OCTETS_RXICMP_GD_OCTETS_UdfRd(data) do {\
+		MMC_RXICMP_GD_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXTCP_ERR_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x87c))
+
+#define MMC_RXTCP_ERR_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXTCP_ERR_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXTCP_ERR_OCTETS_RXTCP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_RXTCP_ERR_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXTCP_GD_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x878))
+
+#define MMC_RXTCP_GD_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXTCP_GD_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXTCP_GD_OCTETS_RXTCP_GD_OCTETS_UdfRd(data) do {\
+		MMC_RXTCP_GD_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUDP_ERR_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x874))
+
+#define MMC_RXUDP_ERR_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUDP_ERR_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUDP_ERR_OCTETS_RXUDP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_RXUDP_ERR_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUDP_GD_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x870))
+
+#define MMC_RXUDP_GD_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUDP_GD_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUDP_GD_OCTETS_RXUDP_GD_OCTETS_UdfRd(data) do {\
+		MMC_RXUDP_GD_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_NOPAY_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x86c))
+
+#define MMC_RXIPV6_NOPAY_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_NOPAY_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_NOPAY_OCTETS_RXIPV6_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV6_NOPAY_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_HDRERR_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x868))
+
+#define MMC_RXIPV6_HDRERR_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_HDRERR_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_HDRERR_OCTETS_RXIPV6_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV6_HDRERR_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_GD_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x864))
+
+#define MMC_RXIPV6_GD_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_GD_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_GD_OCTETS_RXIPV6_GD_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV6_GD_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_UDSBL_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x860))
+
+#define MMC_RXIPV4_UDSBL_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_UDSBL_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_UDSBL_OCTETS_RXIPV4_UDSBL_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV4_UDSBL_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_FRAG_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x85c))
+
+#define MMC_RXIPV4_FRAG_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_FRAG_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_FRAG_OCTETS_RXIPV4_FRAG_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV4_FRAG_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_NOPAY_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x858))
+
+#define MMC_RXIPV4_NOPAY_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_NOPAY_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_NOPAY_OCTETS_RXIPV4_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV4_NOPAY_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_HDRERR_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x854))
+
+#define MMC_RXIPV4_HDRERR_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_HDRERR_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_HDRERR_OCTETS_RXIPV4_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV4_HDRERR_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_GD_OCTETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x850))
+
+#define MMC_RXIPV4_GD_OCTETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_GD_OCTETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_GD_OCTETS_RXIPV4_GD_OCTETS_UdfRd(data) do {\
+		MMC_RXIPV4_GD_OCTETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXICMP_ERR_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x844))
+
+#define MMC_RXICMP_ERR_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXICMP_ERR_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXICMP_ERR_PKTS_RXICMP_ERR_PKTS_UdfRd(data) do {\
+		MMC_RXICMP_ERR_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXICMP_GD_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x840))
+
+#define MMC_RXICMP_GD_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXICMP_GD_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXICMP_GD_PKTS_RXICMP_GD_PKTS_UdfRd(data) do {\
+		MMC_RXICMP_GD_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXTCP_ERR_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x83c))
+
+#define MMC_RXTCP_ERR_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXTCP_ERR_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXTCP_ERR_PKTS_RXTCP_ERR_PKTS_UdfRd(data) do {\
+		MMC_RXTCP_ERR_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXTCP_GD_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x838))
+
+#define MMC_RXTCP_GD_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXTCP_GD_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXTCP_GD_PKTS_RXTCP_GD_PKTS_UdfRd(data) do {\
+		MMC_RXTCP_GD_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUDP_ERR_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x834))
+
+#define MMC_RXUDP_ERR_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUDP_ERR_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUDP_ERR_PKTS_RXUDP_ERR_PKTS_UdfRd(data) do {\
+		MMC_RXUDP_ERR_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUDP_GD_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x830))
+
+#define MMC_RXUDP_GD_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUDP_GD_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUDP_GD_PKTS_RXUDP_GD_PKTS_UdfRd(data) do {\
+		MMC_RXUDP_GD_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_NOPAY_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x82c))
+
+#define MMC_RXIPV6_NOPAY_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_NOPAY_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_NOPAY_PKTS_RXIPV6_NOPAY_PKTS_UdfRd(data) do {\
+		MMC_RXIPV6_NOPAY_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_HDRERR_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x828))
+
+#define MMC_RXIPV6_HDRERR_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_HDRERR_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_HDRERR_PKTS_RXIPV6_HDRERR_PKTS_UdfRd(data) do {\
+		MMC_RXIPV6_HDRERR_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV6_GD_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x824))
+
+#define MMC_RXIPV6_GD_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV6_GD_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV6_GD_PKTS_RXIPV6_GD_PKTS_UdfRd(data) do {\
+		MMC_RXIPV6_GD_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_UBSBL_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x820))
+
+#define MMC_RXIPV4_UBSBL_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_UBSBL_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_UBSBL_PKTS_RXIPV4_UBSBL_PKTS_UdfRd(data) do {\
+		MMC_RXIPV4_UBSBL_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_FRAG_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x81c))
+
+#define MMC_RXIPV4_FRAG_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_FRAG_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_FRAG_PKTS_RXIPV4_FRAG_PKTS_UdfRd(data) do {\
+		MMC_RXIPV4_FRAG_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_NOPAY_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x818))
+
+#define MMC_RXIPV4_NOPAY_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_NOPAY_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_NOPAY_PKTS_RXIPV4_NOPAY_PKTS_UdfRd(data) do {\
+		MMC_RXIPV4_NOPAY_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_HDRERR_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x814))
+
+#define MMC_RXIPV4_HDRERR_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_HDRERR_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_HDRERR_PKTS_RXIPV4_HDRERR_PKTS_UdfRd(data) do {\
+		MMC_RXIPV4_HDRERR_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXIPV4_GD_PKTS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x810))
+
+#define MMC_RXIPV4_GD_PKTS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXIPV4_GD_PKTS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXIPV4_GD_PKTS_RXIPV4_GD_PKTS_UdfRd(data) do {\
+		MMC_RXIPV4_GD_PKTS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXCTRLPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7e4))
+
+#define MMC_RXCTRLPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXCTRLPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXCTRLPACKETS_G_RXCTRLPACKETS_G_UdfRd(data) do {\
+		MMC_RXCTRLPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXRCVERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7e0))
+
+#define MMC_RXRCVERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXRCVERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXRCVERROR_RXRCVERROR_UdfRd(data) do {\
+		MMC_RXRCVERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXWATCHDOGERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7dc))
+
+#define MMC_RXWATCHDOGERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXWATCHDOGERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXWATCHDOGERROR_RXWATCHDOGERROR_UdfRd(data) do {\
+		MMC_RXWATCHDOGERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXVLANPACKETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7d8))
+
+#define MMC_RXVLANPACKETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXVLANPACKETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RXVLANPACKETS_GB_RXVLANPACKETS_GB_UdfRd(data) do {\
+		MMC_RXVLANPACKETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXFIFOOVERFLOW_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7d4))
+
+#define MMC_RXFIFOOVERFLOW_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXFIFOOVERFLOW_RgOffAddr);\
+} while(0)
+
+#define MMC_RXFIFOOVERFLOW_RXFIFOOVERFLOW_UdfRd(data) do {\
+		MMC_RXFIFOOVERFLOW_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXPAUSEPACKETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7d0))
+
+#define MMC_RXPAUSEPACKETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXPAUSEPACKETS_RgOffAddr);\
+} while(0)
+
+#define MMC_RXPAUSEPACKETS_RXPAUSEPACKETS_UdfRd(data) do {\
+		MMC_RXPAUSEPACKETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXOUTOFRANGETYPE_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7cc))
+
+#define MMC_RXOUTOFRANGETYPE_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXOUTOFRANGETYPE_RgOffAddr);\
+} while(0)
+
+#define MMC_RXOUTOFRANGETYPE_RXOUTOFRANGETYPE_UdfRd(data) do {\
+		MMC_RXOUTOFRANGETYPE_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXLENGTHERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7c8))
+
+#define MMC_RXLENGTHERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXLENGTHERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXLENGTHERROR_RXLENGTHERROR_UdfRd(data) do {\
+		MMC_RXLENGTHERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUNICASTPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7c4))
+
+#define MMC_RXUNICASTPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUNICASTPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUNICASTPACKETS_G_RXUNICASTPACKETS_G_UdfRd(data) do {\
+		MMC_RXUNICASTPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX1024TOMAXOCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7c0))
+
+#define MMC_RX1024TOMAXOCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX1024TOMAXOCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX1024TOMAXOCTETS_GB_RX1024TOMAXOCTETS_GB_UdfRd(data) do {\
+		MMC_RX1024TOMAXOCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX512TO1023OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7bc))
+
+#define MMC_RX512TO1023OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX512TO1023OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX512TO1023OCTETS_GB_RX512TO1023OCTETS_GB_UdfRd(data) do {\
+		MMC_RX512TO1023OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX256TO511OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7b8))
+
+#define MMC_RX256TO511OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX256TO511OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX256TO511OCTETS_GB_RX256TO511OCTETS_GB_UdfRd(data) do {\
+		MMC_RX256TO511OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX128TO255OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7b4))
+
+#define MMC_RX128TO255OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX128TO255OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX128TO255OCTETS_GB_RX128TO255OCTETS_GB_UdfRd(data) do {\
+		MMC_RX128TO255OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX65TO127OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7b0))
+
+#define MMC_RX65TO127OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX65TO127OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX65TO127OCTETS_GB_RX65TO127OCTETS_GB_UdfRd(data) do {\
+		MMC_RX65TO127OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RX64OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7ac))
+
+#define MMC_RX64OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RX64OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RX64OCTETS_GB_RX64OCTETS_GB_UdfRd(data) do {\
+		MMC_RX64OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXOVERSIZE_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7a8))
+
+#define MMC_RXOVERSIZE_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXOVERSIZE_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXOVERSIZE_G_RXOVERSIZE_G_UdfRd(data) do {\
+		MMC_RXOVERSIZE_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXUNDERSIZE_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7a4))
+
+#define MMC_RXUNDERSIZE_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXUNDERSIZE_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXUNDERSIZE_G_RXUNDERSIZE_G_UdfRd(data) do {\
+		MMC_RXUNDERSIZE_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXJABBERERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7a0))
+
+#define MMC_RXJABBERERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXJABBERERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXJABBERERROR_RXJABBERERROR_UdfRd(data) do {\
+		MMC_RXJABBERERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXRUNTERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x79c))
+
+#define MMC_RXRUNTERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXRUNTERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXRUNTERROR_RXRUNTERROR_UdfRd(data) do {\
+		MMC_RXRUNTERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXALIGNMENTERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x798))
+
+#define MMC_RXALIGNMENTERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXALIGNMENTERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXALIGNMENTERROR_RXALIGNMENTERROR_UdfRd(data) do {\
+		MMC_RXALIGNMENTERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXCRCERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x794))
+
+#define MMC_RXCRCERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXCRCERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_RXCRCERROR_RXCRCERROR_UdfRd(data) do {\
+		MMC_RXCRCERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXMULTICASTPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x790))
+
+#define MMC_RXMULTICASTPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXMULTICASTPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXMULTICASTPACKETS_G_RXMULTICASTPACKETS_G_UdfRd(data) do {\
+		MMC_RXMULTICASTPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXBROADCASTPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x78c))
+
+#define MMC_RXBROADCASTPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXBROADCASTPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXBROADCASTPACKETS_G_RXBROADCASTPACKETS_G_UdfRd(data) do {\
+		MMC_RXBROADCASTPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXOCTETCOUNT_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x788))
+
+#define MMC_RXOCTETCOUNT_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXOCTETCOUNT_G_RgOffAddr);\
+} while(0)
+
+#define MMC_RXOCTETCOUNT_G_RXOCTETCOUNT_G_UdfRd(data) do {\
+		MMC_RXOCTETCOUNT_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXOCTETCOUNT_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x784))
+
+#define MMC_RXOCTETCOUNT_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXOCTETCOUNT_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RXOCTETCOUNT_GB_RXOCTETCOUNT_GB_UdfRd(data) do {\
+		MMC_RXOCTETCOUNT_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_RXPACKETCOUNT_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x780))
+
+#define MMC_RXPACKETCOUNT_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_RXPACKETCOUNT_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_RXPACKETCOUNT_GB_RXPACKETCOUNT_GB_UdfRd(data) do {\
+		MMC_RXPACKETCOUNT_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXOVERSIZE_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x778))
+
+#define MMC_TXOVERSIZE_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXOVERSIZE_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXOVERSIZE_G_TXOVERSIZE_G_UdfRd(data) do {\
+		MMC_TXOVERSIZE_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXVLANPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x774))
+
+#define MMC_TXVLANPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXVLANPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXVLANPACKETS_G_TXVLANPACKETS_G_UdfRd(data) do {\
+		MMC_TXVLANPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXPAUSEPACKETS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x770))
+
+#define MMC_TXPAUSEPACKETS_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXPAUSEPACKETS_RgOffAddr);\
+} while(0)
+
+#define MMC_TXPAUSEPACKETS_TXPAUSEPACKETS_UdfRd(data) do {\
+		MMC_TXPAUSEPACKETS_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXEXCESSDEF_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x76c))
+
+#define MMC_TXEXCESSDEF_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXEXCESSDEF_RgOffAddr);\
+} while(0)
+
+#define MMC_TXEXCESSDEF_TXEXCESSDEF_UdfRd(data) do {\
+		MMC_TXEXCESSDEF_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXPACKETSCOUNT_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x768))
+
+#define MMC_TXPACKETSCOUNT_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXPACKETSCOUNT_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXPACKETSCOUNT_G_TXPACKETSCOUNT_G_UdfRd(data) do {\
+		MMC_TXPACKETSCOUNT_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXOCTETCOUNT_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x764))
+
+#define MMC_TXOCTETCOUNT_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXOCTETCOUNT_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXOCTETCOUNT_G_TXOCTETCOUNT_G_UdfRd(data) do {\
+		MMC_TXOCTETCOUNT_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXCARRIERERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x760))
+
+#define MMC_TXCARRIERERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXCARRIERERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_TXCARRIERERROR_TXCARRIERERROR_UdfRd(data) do {\
+		MMC_TXCARRIERERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXEXESSCOL_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x75c))
+
+#define MMC_TXEXESSCOL_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXEXESSCOL_RgOffAddr);\
+} while(0)
+
+#define MMC_TXEXESSCOL_TXEXESSCOL_UdfRd(data) do {\
+		MMC_TXEXESSCOL_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXLATECOL_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x758))
+
+#define MMC_TXLATECOL_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXLATECOL_RgOffAddr);\
+} while(0)
+
+#define MMC_TXLATECOL_TXLATECOL_UdfRd(data) do {\
+		MMC_TXLATECOL_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXDEFERRED_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x754))
+
+#define MMC_TXDEFERRED_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXDEFERRED_RgOffAddr);\
+} while(0)
+
+#define MMC_TXDEFERRED_TXDEFERRED_UdfRd(data) do {\
+		MMC_TXDEFERRED_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXMULTICOL_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x750))
+
+#define MMC_TXMULTICOL_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXMULTICOL_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXMULTICOL_G_TXMULTICOL_G_UdfRd(data) do {\
+		MMC_TXMULTICOL_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXSINGLECOL_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x74c))
+
+#define MMC_TXSINGLECOL_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXSINGLECOL_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXSINGLECOL_G_TXSINGLECOL_G_UdfRd(data) do {\
+		MMC_TXSINGLECOL_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXUNDERFLOWERROR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x748))
+
+#define MMC_TXUNDERFLOWERROR_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXUNDERFLOWERROR_RgOffAddr);\
+} while(0)
+
+#define MMC_TXUNDERFLOWERROR_TXUNDERFLOWERROR_UdfRd(data) do {\
+		MMC_TXUNDERFLOWERROR_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXBROADCASTPACKETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x744))
+
+#define MMC_TXBROADCASTPACKETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXBROADCASTPACKETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TXBROADCASTPACKETS_GB_TXBROADCASTPACKETS_GB_UdfRd(data) do {\
+		MMC_TXBROADCASTPACKETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXMULTICASTPACKETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x740))
+
+#define MMC_TXMULTICASTPACKETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXMULTICASTPACKETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TXMULTICASTPACKETS_GB_TXMULTICASTPACKETS_GB_UdfRd(data) do {\
+		MMC_TXMULTICASTPACKETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXUNICASTPACKETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x73c))
+
+#define MMC_TXUNICASTPACKETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXUNICASTPACKETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TXUNICASTPACKETS_GB_TXUNICASTPACKETS_GB_UdfRd(data) do {\
+		MMC_TXUNICASTPACKETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX1024TOMAXOCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x738))
+
+#define MMC_TX1024TOMAXOCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX1024TOMAXOCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX1024TOMAXOCTETS_GB_TX1024TOMAXOCTETS_GB_UdfRd(data) do {\
+		MMC_TX1024TOMAXOCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX512TO1023OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x734))
+
+#define MMC_TX512TO1023OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX512TO1023OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX512TO1023OCTETS_GB_TX512TO1023OCTETS_GB_UdfRd(data) do {\
+		MMC_TX512TO1023OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX256TO511OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x730))
+
+#define MMC_TX256TO511OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX256TO511OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX256TO511OCTETS_GB_TX256TO511OCTETS_GB_UdfRd(data) do {\
+		MMC_TX256TO511OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX128TO255OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x72c))
+
+#define MMC_TX128TO255OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX128TO255OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX128TO255OCTETS_GB_TX128TO255OCTETS_GB_UdfRd(data) do {\
+		MMC_TX128TO255OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX65TO127OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x728))
+
+#define MMC_TX65TO127OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX65TO127OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX65TO127OCTETS_GB_TX65TO127OCTETS_GB_UdfRd(data) do {\
+		MMC_TX65TO127OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TX64OCTETS_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x724))
+
+#define MMC_TX64OCTETS_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TX64OCTETS_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TX64OCTETS_GB_TX64OCTETS_GB_UdfRd(data) do {\
+		MMC_TX64OCTETS_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXMULTICASTPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x720))
+
+#define MMC_TXMULTICASTPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXMULTICASTPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXMULTICASTPACKETS_G_TXMULTICASTPACKETS_G_UdfRd(data) do {\
+		MMC_TXMULTICASTPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXBROADCASTPACKETS_G_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x71c))
+
+#define MMC_TXBROADCASTPACKETS_G_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXBROADCASTPACKETS_G_RgOffAddr);\
+} while(0)
+
+#define MMC_TXBROADCASTPACKETS_G_TXBROADCASTPACKETS_G_UdfRd(data) do {\
+		MMC_TXBROADCASTPACKETS_G_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXPACKETCOUNT_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x718))
+
+#define MMC_TXPACKETCOUNT_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXPACKETCOUNT_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TXPACKETCOUNT_GB_TXPACKETCOUNT_GB_UdfRd(data) do {\
+		MMC_TXPACKETCOUNT_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_TXOCTETCOUNT_GB_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x714))
+
+#define MMC_TXOCTETCOUNT_GB_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_TXOCTETCOUNT_GB_RgOffAddr);\
+} while(0)
+
+#define MMC_TXOCTETCOUNT_GB_TXOCTETCOUNT_GB_UdfRd(data) do {\
+		MMC_TXOCTETCOUNT_GB_RgRd(data);\
+} while(0)
+
+
+#define MMC_IPC_INTR_RX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x808))
+
+#define MMC_IPC_INTR_RX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_IPC_INTR_RX_RgOffAddr);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXICMP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXICMP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXICMP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 29) & MMC_IPC_INTR_RX_RXICMP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXICMP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXICMP_GD_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXICMP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 28) & MMC_IPC_INTR_RX_RXICMP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXTCP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXTCP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXTCP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 27) & MMC_IPC_INTR_RX_RXTCP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXTCP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXTCP_GD_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXTCP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 26) & MMC_IPC_INTR_RX_RXTCP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXUDP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXUDP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXUDP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 25) & MMC_IPC_INTR_RX_RXUDP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXUDP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXUDP_GD_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXUDP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 24) & MMC_IPC_INTR_RX_RXUDP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 23) & MMC_IPC_INTR_RX_RXIPV6_NOPAY_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 22) & MMC_IPC_INTR_RX_RXIPV6_HDRERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_GD_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 21) & MMC_IPC_INTR_RX_RXIPV6_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 20) & MMC_IPC_INTR_RX_RXIPV4_UDSBL_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_FRAG_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_FRAG_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_FRAG_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 19) & MMC_IPC_INTR_RX_RXIPV4_FRAG_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 18) & MMC_IPC_INTR_RX_RXIPV4_NOPAY_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 17) & MMC_IPC_INTR_RX_RXIPV4_HDRERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_GD_OCTETS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 16) & MMC_IPC_INTR_RX_RXIPV4_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXICMP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXICMP_ERR_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXICMP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 13) & MMC_IPC_INTR_RX_RXICMP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXICMP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXICMP_GD_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXICMP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 12) & MMC_IPC_INTR_RX_RXICMP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXTCP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXTCP_ERR_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXTCP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 11) & MMC_IPC_INTR_RX_RXTCP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXTCP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXTCP_GD_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXTCP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 10) & MMC_IPC_INTR_RX_RXTCP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXUDP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXUDP_ERR_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXUDP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 9) & MMC_IPC_INTR_RX_RXUDP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXUDP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXUDP_GD_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXUDP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 8) & MMC_IPC_INTR_RX_RXUDP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_NOPAY_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 7) & MMC_IPC_INTR_RX_RXIPV6_NOPAY_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_HDRERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 6) & MMC_IPC_INTR_RX_RXIPV6_HDRERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV6_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV6_GD_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV6_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 5) & MMC_IPC_INTR_RX_RXIPV6_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_UDSBL_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 4) & MMC_IPC_INTR_RX_RXIPV4_UDSBL_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_FRAG_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_FRAG_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_FRAG_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 3) & MMC_IPC_INTR_RX_RXIPV4_FRAG_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_NOPAY_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 2) & MMC_IPC_INTR_RX_RXIPV4_NOPAY_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_HDRERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 1) & MMC_IPC_INTR_RX_RXIPV4_HDRERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_RX_RXIPV4_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_RX_RXIPV4_GD_FRMS_Mask (ULONG)(0x1)
+
+#define MMC_IPC_INTR_RX_RXIPV4_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_RX_RgRd(data);\
+		data = ((data >> 0) & MMC_IPC_INTR_RX_RXIPV4_GD_FRMS_Mask);\
+} while(0)
+
+
+#define MMC_IPC_INTR_MASK_RX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x800))
+
+#define MMC_IPC_INTR_MASK_RX_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_IPC_INTR_MASK_RX_RgOffAddr);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_IPC_INTR_MASK_RX_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_IPC_INTR_MASK_RX_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MMC_IPC_INTR_MASK_RX_Mask_30 (ULONG)(0x3)
+
+/*#define MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define  MMC_IPC_INTR_MASK_RX_Mask_14 (ULONG)(~(~0<<(2)))*/
+
+#define  MMC_IPC_INTR_MASK_RX_Mask_14 (ULONG)(0x3)
+
+/*#define MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(2)))<<(14)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14 (ULONG)(0xffff3fff)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (29)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Wr_Mask (ULONG)(0xdfffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Mask)<<29));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 29) & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (28)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Wr_Mask (ULONG)(0xefffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Mask)<<28));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 28) & MMC_IPC_INTR_MASK_RX_RXICMP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Mask)<<27));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 27) & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Wr_Mask (ULONG)(0xfbffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Mask)<<26));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 26) & MMC_IPC_INTR_MASK_RX_RXTCP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Wr_Mask (ULONG)(0xfdffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Mask)<<25));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 25) & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Mask)<<24));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 24) & MMC_IPC_INTR_MASK_RX_RXUDP_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Mask)<<23));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 23) & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Mask)<<22));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 22) & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Mask)<<21));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 21) & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Wr_Mask (ULONG)(0xffefffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Mask)<<20));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 20) & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Mask)<<19));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 19) & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Mask)<<18));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 18) & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Mask)<<17));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 17) & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Mask)<<16));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 16) & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_OCTETS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Mask)<<13));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 13) & MMC_IPC_INTR_MASK_RX_RXICMP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Wr_Mask (ULONG)(0xffffefff)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Mask)<<12));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 12) & MMC_IPC_INTR_MASK_RX_RXICMP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Mask)<<11));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 11) & MMC_IPC_INTR_MASK_RX_RXTCP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Mask)<<10));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 10) & MMC_IPC_INTR_MASK_RX_RXTCP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Mask)<<9));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 9) & MMC_IPC_INTR_MASK_RX_RXUDP_ERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Mask)<<8));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 8) & MMC_IPC_INTR_MASK_RX_RXUDP_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Mask)<<7));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 7) & MMC_IPC_INTR_MASK_RX_RXIPV6_NOPAY_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Mask)<<6));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 6) & MMC_IPC_INTR_MASK_RX_RXIPV6_HDRERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Mask)<<5));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 5) & MMC_IPC_INTR_MASK_RX_RXIPV6_GD_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Mask)<<4));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 4) & MMC_IPC_INTR_MASK_RX_RXIPV4_UDSBL_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Mask)<<3));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 3) & MMC_IPC_INTR_MASK_RX_RXIPV4_FRAG_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Mask)<<2));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 2) & MMC_IPC_INTR_MASK_RX_RXIPV4_NOPAY_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Mask)<<1));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 1) & MMC_IPC_INTR_MASK_RX_RXIPV4_HDRERR_FRMS_Mask);\
+} while(0)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Mask (ULONG)(0x1)
+
+/*#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_IPC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_30))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_30))<<30);\
+		v = (v & (MMC_IPC_INTR_MASK_RX_RES_Wr_Mask_14))|((( 0) & (MMC_IPC_INTR_MASK_RX_Mask_14))<<14);\
+		v = ((v & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Wr_Mask) | ((data & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Mask)<<0));\
+		MMC_IPC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_UdfRd(data) do {\
+		MMC_IPC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 0) & MMC_IPC_INTR_MASK_RX_RXIPV4_GD_FRMS_Mask);\
+} while(0)
+
+
+#define MMC_INTR_MASK_TX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x710))
+
+#define MMC_INTR_MASK_TX_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_INTR_MASK_TX_RgOffAddr);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_INTR_MASK_TX_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_INTR_MASK_TX_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MMC_INTR_MASK_TX_Mask_25 (ULONG)(0x7f)
+
+/*#define MMC_INTR_MASK_TX_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MMC_INTR_MASK_TX_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXVLANFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXVLANFRAMES_G_Mask)<<24));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXVLANFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 24) & MMC_INTR_MASK_TX_TXVLANFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXPAUSEFRAMES_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXPAUSEFRAMES_Mask)<<23));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXPAUSEFRAMES_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 23) & MMC_INTR_MASK_TX_TXPAUSEFRAMES_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXEXCESSDEF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXEXCESSDEF_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXEXCESSDEF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MMC_INTR_MASK_TX_TXEXCESSDEF_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MMC_INTR_MASK_TX_TXEXCESSDEF_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXEXCESSDEF_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXEXCESSDEF_Mask)<<22));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXEXCESSDEF_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 22) & MMC_INTR_MASK_TX_TXEXCESSDEF_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Mask)<<21));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 21) & MMC_INTR_MASK_TX_TXFRAMECOUNT_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Wr_Mask (ULONG)(0xffefffff)
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Mask)<<20));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 20) & MMC_INTR_MASK_TX_TXOCTETCOUNT_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXCARRIERERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXCARRIERERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXCARRIERERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MMC_INTR_MASK_TX_TXCARRIERERROR_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MMC_INTR_MASK_TX_TXCARRIERERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXCARRIERERROR_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXCARRIERERROR_Mask)<<19));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXCARRIERERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 19) & MMC_INTR_MASK_TX_TXCARRIERERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXEXESSCOL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXEXESSCOL_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXEXESSCOL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MMC_INTR_MASK_TX_TXEXESSCOL_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MMC_INTR_MASK_TX_TXEXESSCOL_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXEXESSCOL_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXEXESSCOL_Mask)<<18));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXEXESSCOL_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 18) & MMC_INTR_MASK_TX_TXEXESSCOL_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXLATECOL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXLATECOL_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXLATECOL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MMC_INTR_MASK_TX_TXLATECOL_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MMC_INTR_MASK_TX_TXLATECOL_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXLATECOL_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXLATECOL_Mask)<<17));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXLATECOL_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 17) & MMC_INTR_MASK_TX_TXLATECOL_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXDEFERRED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXDEFERRED_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXDEFERRED_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MMC_INTR_MASK_TX_TXDEFERRED_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MMC_INTR_MASK_TX_TXDEFERRED_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXDEFERRED_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXDEFERRED_Mask)<<16));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXDEFERRED_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 16) & MMC_INTR_MASK_TX_TXDEFERRED_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICOL_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICOL_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICOL_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICOL_G_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MMC_INTR_MASK_TX_TXMULTICOL_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXMULTICOL_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXMULTICOL_G_Mask)<<15));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXMULTICOL_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 15) & MMC_INTR_MASK_TX_TXMULTICOL_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXSINGLECOL_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXSINGLECOL_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXSINGLECOL_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MMC_INTR_MASK_TX_TXSINGLECOL_G_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MMC_INTR_MASK_TX_TXSINGLECOL_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXSINGLECOL_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXSINGLECOL_G_Mask)<<14));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXSINGLECOL_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 14) & MMC_INTR_MASK_TX_TXSINGLECOL_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Mask)<<13));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXUNDERFLOWERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 13) & MMC_INTR_MASK_TX_TXUNDERFLOWERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Wr_Mask (ULONG)(0xffffefff)
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Mask)<<12));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 12) & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Mask)<<11));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 11) & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Mask)<<10));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 10) & MMC_INTR_MASK_TX_TXUNICASTFRAMES_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Mask)<<9));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 9) & MMC_INTR_MASK_TX_TX1024TOMAXOCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Mask)<<8));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 8) & MMC_INTR_MASK_TX_TX512TO1023OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Mask)<<7));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 7) & MMC_INTR_MASK_TX_TX256TO511OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Mask)<<6));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 6) & MMC_INTR_MASK_TX_TX128TO255OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Mask)<<5));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 5) & MMC_INTR_MASK_TX_TX65TO127OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TX64OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TX64OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TX64OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_INTR_MASK_TX_TX64OCTETS_GB_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_INTR_MASK_TX_TX64OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TX64OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TX64OCTETS_GB_Mask)<<4));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TX64OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 4) & MMC_INTR_MASK_TX_TX64OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Mask)<<3));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 3) & MMC_INTR_MASK_TX_TXMULTICASTFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Mask)<<2));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 2) & MMC_INTR_MASK_TX_TXBROADCASTFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Mask)<<1));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 1) & MMC_INTR_MASK_TX_TXFRAMECOUNT_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_TX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_TX_RES_Wr_Mask_25))|((( 0) & (MMC_INTR_MASK_TX_Mask_25))<<25);\
+		v = ((v & MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Wr_Mask) | ((data & MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Mask)<<0));\
+		MMC_INTR_MASK_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_TX_RgRd(data);\
+		data = ((data >> 0) & MMC_INTR_MASK_TX_TXOCTETCOUNT_GB_Mask);\
+} while(0)
+
+
+#define MMC_INTR_MASK_RX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x70c))
+
+#define MMC_INTR_MASK_RX_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_INTR_MASK_RX_RgOffAddr);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_INTR_MASK_RX_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_INTR_MASK_RX_Mask_24 (ULONG)(~(~0<<(8)))*/
+
+#define  MMC_INTR_MASK_RX_Mask_24 (ULONG)(0xff)
+
+/*#define MMC_INTR_MASK_RX_RES_Wr_Mask_24 (ULONG)(~((~(~0<<(8)))<<(24)))*/
+
+#define MMC_INTR_MASK_RX_RES_Wr_Mask_24 (ULONG)(0xffffff)
+
+/*#define MMC_INTR_MASK_RX_RXWATCHDOG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXWATCHDOG_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXWATCHDOG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MMC_INTR_MASK_RX_RXWATCHDOG_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MMC_INTR_MASK_RX_RXWATCHDOG_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXWATCHDOG_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXWATCHDOG_Mask)<<23));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXWATCHDOG_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 23) & MMC_INTR_MASK_RX_RXWATCHDOG_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Mask)<<22));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXVLANFRAMES_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 22) & MMC_INTR_MASK_RX_RXVLANFRAMES_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Mask)<<21));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXFIFOOVERFLOW_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 21) & MMC_INTR_MASK_RX_RXFIFOOVERFLOW_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_Wr_Mask (ULONG)(0xffefffff)
+
+#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXPAUSEFRAMES_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXPAUSEFRAMES_Mask)<<20));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXPAUSEFRAMES_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 20) & MMC_INTR_MASK_RX_RXPAUSEFRAMES_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Mask)<<19));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 19) & MMC_INTR_MASK_RX_RXOUTOFRANGETYPE_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXLENGTHERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXLENGTHERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXLENGTHERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MMC_INTR_MASK_RX_RXLENGTHERROR_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MMC_INTR_MASK_RX_RXLENGTHERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXLENGTHERROR_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXLENGTHERROR_Mask)<<18));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXLENGTHERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 18) & MMC_INTR_MASK_RX_RXLENGTHERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Mask)<<17));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 17) & MMC_INTR_MASK_RX_RXUNICASTFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Mask)<<16));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 16) & MMC_INTR_MASK_RX_RX1024TOMAXOCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Mask)<<15));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 15) & MMC_INTR_MASK_RX_RX512TO1023OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Mask)<<14));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 14) & MMC_INTR_MASK_RX_RX256TO511OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Mask)<<13));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 13) & MMC_INTR_MASK_RX_RX128TO255OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Wr_Mask (ULONG)(0xffffefff)
+
+#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Mask)<<12));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 12) & MMC_INTR_MASK_RX_RX65TO127OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RX64OCTETS_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RX64OCTETS_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RX64OCTETS_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MMC_INTR_MASK_RX_RX64OCTETS_GB_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MMC_INTR_MASK_RX_RX64OCTETS_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RX64OCTETS_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RX64OCTETS_GB_Mask)<<11));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RX64OCTETS_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 11) & MMC_INTR_MASK_RX_RX64OCTETS_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXOVERSIZE_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXOVERSIZE_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXOVERSIZE_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MMC_INTR_MASK_RX_RXOVERSIZE_G_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MMC_INTR_MASK_RX_RXOVERSIZE_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXOVERSIZE_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXOVERSIZE_G_Mask)<<10));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXOVERSIZE_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 10) & MMC_INTR_MASK_RX_RXOVERSIZE_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXUNDERSIZE_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXUNDERSIZE_G_Mask)<<9));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXUNDERSIZE_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 9) & MMC_INTR_MASK_RX_RXUNDERSIZE_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXJABBERERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXJABBERERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXJABBERERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_INTR_MASK_RX_RXJABBERERROR_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_INTR_MASK_RX_RXJABBERERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXJABBERERROR_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXJABBERERROR_Mask)<<8));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXJABBERERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 8) & MMC_INTR_MASK_RX_RXJABBERERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXRUNTERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXRUNTERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXRUNTERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MMC_INTR_MASK_RX_RXRUNTERROR_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MMC_INTR_MASK_RX_RXRUNTERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXRUNTERROR_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXRUNTERROR_Mask)<<7));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXRUNTERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 7) & MMC_INTR_MASK_RX_RXRUNTERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXALIGNMENTERROR_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXALIGNMENTERROR_Mask)<<6));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXALIGNMENTERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 6) & MMC_INTR_MASK_RX_RXALIGNMENTERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXCRCERROR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXCRCERROR_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXCRCERROR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_INTR_MASK_RX_RXCRCERROR_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_INTR_MASK_RX_RXCRCERROR_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXCRCERROR_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXCRCERROR_Mask)<<5));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXCRCERROR_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 5) & MMC_INTR_MASK_RX_RXCRCERROR_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Mask)<<4));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 4) & MMC_INTR_MASK_RX_RXMULTICASTFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Mask)<<3));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 3) & MMC_INTR_MASK_RX_RXBROADCASTFRAMES_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Mask)<<2));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_G_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 2) & MMC_INTR_MASK_RX_RXOCTETCOUNT_G_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Mask)<<1));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 1) & MMC_INTR_MASK_RX_RXOCTETCOUNT_GB_Mask);\
+} while(0)
+
+/*#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_MASK_RX_RgRd(v);\
+		v = (v & (MMC_INTR_MASK_RX_RES_Wr_Mask_24))|((( 0) & (MMC_INTR_MASK_RX_Mask_24))<<24);\
+		v = ((v & MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Wr_Mask) | ((data & MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Mask)<<0));\
+		MMC_INTR_MASK_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_UdfRd(data) do {\
+		MMC_INTR_MASK_RX_RgRd(data);\
+		data = ((data >> 0) & MMC_INTR_MASK_RX_RXFRAMECOUNT_GB_Mask);\
+} while(0)
+
+
+#define MMC_INTR_TX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x708))
+
+#define MMC_INTR_TX_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_INTR_TX_RgOffAddr);\
+} while(0)
+
+#define MMC_INTR_TX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_INTR_TX_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_INTR_TX_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MMC_INTR_TX_Mask_26 (ULONG)(0x3f)
+
+/*#define MMC_INTR_TX_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MMC_INTR_TX_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MMC_INTR_TX_TXOSIZEGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXOSIZEGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXOSIZEGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define MMC_INTR_TX_TXOSIZEGPIS_Wr_Mask (ULONG)(0xfdffffff)
+
+#define MMC_INTR_TX_TXOSIZEGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXOSIZEGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXOSIZEGPIS_Mask)<<25));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXOSIZEGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 25) & MMC_INTR_TX_TXOSIZEGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXVLANGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXVLANGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXVLANGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MMC_INTR_TX_TXVLANGPIS_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MMC_INTR_TX_TXVLANGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXVLANGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXVLANGPIS_Mask)<<24));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXVLANGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 24) & MMC_INTR_TX_TXVLANGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXPAUSPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXPAUSPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXPAUSPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MMC_INTR_TX_TXPAUSPIS_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MMC_INTR_TX_TXPAUSPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXPAUSPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXPAUSPIS_Mask)<<23));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXPAUSPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 23) & MMC_INTR_TX_TXPAUSPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXEXDEFPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXEXDEFPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXEXDEFPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MMC_INTR_TX_TXEXDEFPIS_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MMC_INTR_TX_TXEXDEFPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXEXDEFPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXEXDEFPIS_Mask)<<22));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXEXDEFPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 22) & MMC_INTR_TX_TXEXDEFPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXGPKTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXGPKTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXGPKTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MMC_INTR_TX_TXGPKTIS_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MMC_INTR_TX_TXGPKTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXGPKTIS_Wr_Mask) | ((data & MMC_INTR_TX_TXGPKTIS_Mask)<<21));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXGPKTIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 21) & MMC_INTR_TX_TXGPKTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXGOCTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXGOCTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXGOCTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MMC_INTR_TX_TXGOCTIS_Wr_Mask (ULONG)(0xffefffff)
+
+#define MMC_INTR_TX_TXGOCTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXGOCTIS_Wr_Mask) | ((data & MMC_INTR_TX_TXGOCTIS_Mask)<<20));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXGOCTIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 20) & MMC_INTR_TX_TXGOCTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXCARERPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXCARERPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXCARERPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MMC_INTR_TX_TXCARERPIS_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MMC_INTR_TX_TXCARERPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXCARERPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXCARERPIS_Mask)<<19));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXCARERPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 19) & MMC_INTR_TX_TXCARERPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXEXCOLPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXEXCOLPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXEXCOLPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MMC_INTR_TX_TXEXCOLPIS_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MMC_INTR_TX_TXEXCOLPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXEXCOLPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXEXCOLPIS_Mask)<<18));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXEXCOLPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 18) & MMC_INTR_TX_TXEXCOLPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXLATCOLPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXLATCOLPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXLATCOLPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MMC_INTR_TX_TXLATCOLPIS_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MMC_INTR_TX_TXLATCOLPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXLATCOLPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXLATCOLPIS_Mask)<<17));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXLATCOLPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 17) & MMC_INTR_TX_TXLATCOLPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXDEFPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXDEFPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXDEFPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MMC_INTR_TX_TXDEFPIS_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MMC_INTR_TX_TXDEFPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXDEFPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXDEFPIS_Mask)<<16));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXDEFPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 16) & MMC_INTR_TX_TXDEFPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXMCOLGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXMCOLGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXMCOLGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MMC_INTR_TX_TXMCOLGPIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MMC_INTR_TX_TXMCOLGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXMCOLGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXMCOLGPIS_Mask)<<15));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXMCOLGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 15) & MMC_INTR_TX_TXMCOLGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXSCOLGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXSCOLGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXSCOLGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MMC_INTR_TX_TXSCOLGPIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MMC_INTR_TX_TXSCOLGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXSCOLGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXSCOLGPIS_Mask)<<14));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXSCOLGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 14) & MMC_INTR_TX_TXSCOLGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXUFLOWERFIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXUFLOWERFIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXUFLOWERFIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MMC_INTR_TX_TXUFLOWERFIS_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MMC_INTR_TX_TXUFLOWERFIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXUFLOWERFIS_Wr_Mask) | ((data & MMC_INTR_TX_TXUFLOWERFIS_Mask)<<13));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXUFLOWERFIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 13) & MMC_INTR_TX_TXUFLOWERFIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXBCGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXBCGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXBCGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MMC_INTR_TX_TXBCGBPIS_Wr_Mask (ULONG)(0xffffefff)
+
+#define MMC_INTR_TX_TXBCGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXBCGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXBCGBPIS_Mask)<<12));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXBCGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 12) & MMC_INTR_TX_TXBCGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXMCGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXMCGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXMCGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MMC_INTR_TX_TXMCGBPIS_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MMC_INTR_TX_TXMCGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXMCGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXMCGBPIS_Mask)<<11));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXMCGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 11) & MMC_INTR_TX_TXMCGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXUCGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXUCGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXUCGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MMC_INTR_TX_TXUCGBPIS_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MMC_INTR_TX_TXUCGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXUCGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXUCGBPIS_Mask)<<10));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXUCGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 10) & MMC_INTR_TX_TXUCGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX1024TMAXOCTGBFIS_Wr_Mask) | ((data & MMC_INTR_TX_TX1024TMAXOCTGBFIS_Mask)<<9));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX1024TMAXOCTGBFIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 9) & MMC_INTR_TX_TX1024TMAXOCTGBFIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX512T1023OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX512T1023OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX512T1023OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_INTR_TX_TX512T1023OCTGBPIS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_INTR_TX_TX512T1023OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX512T1023OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TX512T1023OCTGBPIS_Mask)<<8));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX512T1023OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 8) & MMC_INTR_TX_TX512T1023OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX256T511OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX256T511OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX256T511OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MMC_INTR_TX_TX256T511OCTGBPIS_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MMC_INTR_TX_TX256T511OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX256T511OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TX256T511OCTGBPIS_Mask)<<7));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX256T511OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 7) & MMC_INTR_TX_TX256T511OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX128T255OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX128T255OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX128T255OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MMC_INTR_TX_TX128T255OCTGBPIS_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MMC_INTR_TX_TX128T255OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX128T255OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TX128T255OCTGBPIS_Mask)<<6));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX128T255OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 6) & MMC_INTR_TX_TX128T255OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX65T127OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX65T127OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX65T127OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_INTR_TX_TX65T127OCTGBPIS_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_INTR_TX_TX65T127OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX65T127OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TX65T127OCTGBPIS_Mask)<<5));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX65T127OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 5) & MMC_INTR_TX_TX65T127OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TX64OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TX64OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TX64OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_INTR_TX_TX64OCTGBPIS_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_INTR_TX_TX64OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TX64OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_TX_TX64OCTGBPIS_Mask)<<4));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TX64OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 4) & MMC_INTR_TX_TX64OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXMCGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXMCGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXMCGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_INTR_TX_TXMCGPIS_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_INTR_TX_TXMCGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXMCGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXMCGPIS_Mask)<<3));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXMCGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 3) & MMC_INTR_TX_TXMCGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXBCGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXBCGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXBCGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_INTR_TX_TXBCGPIS_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_INTR_TX_TXBCGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXBCGPIS_Wr_Mask) | ((data & MMC_INTR_TX_TXBCGPIS_Mask)<<2));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXBCGPIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 2) & MMC_INTR_TX_TXBCGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXGBPKTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXGBPKTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXGBPKTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_INTR_TX_TXGBPKTIS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_INTR_TX_TXGBPKTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXGBPKTIS_Wr_Mask) | ((data & MMC_INTR_TX_TXGBPKTIS_Mask)<<1));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXGBPKTIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 1) & MMC_INTR_TX_TXGBPKTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_TX_TXGBOCTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_TX_TXGBOCTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_TX_TXGBOCTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_INTR_TX_TXGBOCTIS_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_INTR_TX_TXGBOCTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_TX_RgRd(v);\
+		v = (v & (MMC_INTR_TX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_TX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_TX_TXGBOCTIS_Wr_Mask) | ((data & MMC_INTR_TX_TXGBOCTIS_Mask)<<0));\
+		MMC_INTR_TX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_TX_TXGBOCTIS_UdfRd(data) do {\
+		MMC_INTR_TX_RgRd(data);\
+		data = ((data >> 0) & MMC_INTR_TX_TXGBOCTIS_Mask);\
+} while(0)
+
+
+#define MMC_INTR_RX_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x704))
+
+#define MMC_INTR_RX_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_INTR_RX_RgOffAddr);\
+} while(0)
+
+#define MMC_INTR_RX_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_INTR_RX_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_INTR_RX_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MMC_INTR_RX_Mask_26 (ULONG)(0x3f)
+
+/*#define MMC_INTR_RX_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MMC_INTR_RX_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define MMC_INTR_RX_RXCTRLPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXCTRLPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXCTRLPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define MMC_INTR_RX_RXCTRLPIS_Wr_Mask (ULONG)(0xfdffffff)
+
+#define MMC_INTR_RX_RXCTRLPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXCTRLPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXCTRLPIS_Mask)<<25));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXCTRLPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 25) & MMC_INTR_RX_RXCTRLPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXRCVERRPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXRCVERRPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXRCVERRPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MMC_INTR_RX_RXRCVERRPIS_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MMC_INTR_RX_RXRCVERRPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXRCVERRPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXRCVERRPIS_Mask)<<24));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXRCVERRPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 24) & MMC_INTR_RX_RXRCVERRPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXWDOGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXWDOGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXWDOGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MMC_INTR_RX_RXWDOGPIS_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MMC_INTR_RX_RXWDOGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXWDOGPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXWDOGPIS_Mask)<<23));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXWDOGPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 23) & MMC_INTR_RX_RXWDOGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXVLANGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXVLANGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXVLANGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MMC_INTR_RX_RXVLANGBPIS_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MMC_INTR_RX_RXVLANGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXVLANGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXVLANGBPIS_Mask)<<22));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXVLANGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 22) & MMC_INTR_RX_RXVLANGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXFOVPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXFOVPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXFOVPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MMC_INTR_RX_RXFOVPIS_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MMC_INTR_RX_RXFOVPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXFOVPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXFOVPIS_Mask)<<21));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXFOVPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 21) & MMC_INTR_RX_RXFOVPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXPAUSPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXPAUSPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXPAUSPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MMC_INTR_RX_RXPAUSPIS_Wr_Mask (ULONG)(0xffefffff)
+
+#define MMC_INTR_RX_RXPAUSPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXPAUSPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXPAUSPIS_Mask)<<20));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXPAUSPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 20) & MMC_INTR_RX_RXPAUSPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXORANGEPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXORANGEPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXORANGEPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MMC_INTR_RX_RXORANGEPIS_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MMC_INTR_RX_RXORANGEPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXORANGEPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXORANGEPIS_Mask)<<19));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXORANGEPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 19) & MMC_INTR_RX_RXORANGEPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXLENERPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXLENERPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXLENERPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MMC_INTR_RX_RXLENERPIS_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MMC_INTR_RX_RXLENERPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXLENERPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXLENERPIS_Mask)<<18));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXLENERPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 18) & MMC_INTR_RX_RXLENERPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXUCBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXUCBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXUCBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MMC_INTR_RX_RXUCBPIS_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MMC_INTR_RX_RXUCBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXUCBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXUCBPIS_Mask)<<17));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXUCBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 17) & MMC_INTR_RX_RXUCBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX1024TMAXOCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX1024TMAXOCTGBPIS_Mask)<<16));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX1024TMAXOCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 16) & MMC_INTR_RX_RX1024TMAXOCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX512T1023OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX512T1023OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX512T1023OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MMC_INTR_RX_RX512T1023OCTGBPIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MMC_INTR_RX_RX512T1023OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX512T1023OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX512T1023OCTGBPIS_Mask)<<15));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX512T1023OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 15) & MMC_INTR_RX_RX512T1023OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX256T511OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX256T511OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX256T511OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MMC_INTR_RX_RX256T511OCTGBPIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MMC_INTR_RX_RX256T511OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX256T511OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX256T511OCTGBPIS_Mask)<<14));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX256T511OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 14) & MMC_INTR_RX_RX256T511OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX128T255OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX128T255OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX128T255OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MMC_INTR_RX_RX128T255OCTGBPIS_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MMC_INTR_RX_RX128T255OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX128T255OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX128T255OCTGBPIS_Mask)<<13));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX128T255OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 13) & MMC_INTR_RX_RX128T255OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX65T127OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX65T127OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX65T127OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MMC_INTR_RX_RX65T127OCTGBPIS_Wr_Mask (ULONG)(0xffffefff)
+
+#define MMC_INTR_RX_RX65T127OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX65T127OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX65T127OCTGBPIS_Mask)<<12));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX65T127OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 12) & MMC_INTR_RX_RX65T127OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RX64OCTGBPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RX64OCTGBPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RX64OCTGBPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MMC_INTR_RX_RX64OCTGBPIS_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MMC_INTR_RX_RX64OCTGBPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RX64OCTGBPIS_Wr_Mask) | ((data & MMC_INTR_RX_RX64OCTGBPIS_Mask)<<11));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RX64OCTGBPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 11) & MMC_INTR_RX_RX64OCTGBPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXOSIZEGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXOSIZEGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXOSIZEGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MMC_INTR_RX_RXOSIZEGPIS_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MMC_INTR_RX_RXOSIZEGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXOSIZEGPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXOSIZEGPIS_Mask)<<10));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXOSIZEGPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 10) & MMC_INTR_RX_RXOSIZEGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXUSIZEGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXUSIZEGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXUSIZEGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MMC_INTR_RX_RXUSIZEGPIS_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MMC_INTR_RX_RXUSIZEGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXUSIZEGPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXUSIZEGPIS_Mask)<<9));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXUSIZEGPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 9) & MMC_INTR_RX_RXUSIZEGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXJABERPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXJABERPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXJABERPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_INTR_RX_RXJABERPIS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_INTR_RX_RXJABERPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXJABERPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXJABERPIS_Mask)<<8));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXJABERPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 8) & MMC_INTR_RX_RXJABERPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXRUNTRIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXRUNTRIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXRUNTRIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MMC_INTR_RX_RXRUNTRIS_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MMC_INTR_RX_RXRUNTRIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXRUNTRIS_Wr_Mask) | ((data & MMC_INTR_RX_RXRUNTRIS_Mask)<<7));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXRUNTRIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 7) & MMC_INTR_RX_RXRUNTRIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXALGNERPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXALGNERPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXALGNERPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MMC_INTR_RX_RXALGNERPIS_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MMC_INTR_RX_RXALGNERPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXALGNERPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXALGNERPIS_Mask)<<6));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXALGNERPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 6) & MMC_INTR_RX_RXALGNERPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXCRCERPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXCRCERPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXCRCERPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_INTR_RX_RXCRCERPIS_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_INTR_RX_RXCRCERPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXCRCERPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXCRCERPIS_Mask)<<5));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXCRCERPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 5) & MMC_INTR_RX_RXCRCERPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXMCGPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXMCGPIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXMCGPIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_INTR_RX_RXMCGPIS_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_INTR_RX_RXMCGPIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXMCGPIS_Wr_Mask) | ((data & MMC_INTR_RX_RXMCGPIS_Mask)<<4));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXMCGPIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 4) & MMC_INTR_RX_RXMCGPIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXBCGTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXBCGTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXBCGTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_INTR_RX_RXBCGTIS_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_INTR_RX_RXBCGTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXBCGTIS_Wr_Mask) | ((data & MMC_INTR_RX_RXBCGTIS_Mask)<<3));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXBCGTIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 3) & MMC_INTR_RX_RXBCGTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXGOCTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXGOCTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXGOCTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_INTR_RX_RXGOCTIS_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_INTR_RX_RXGOCTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXGOCTIS_Wr_Mask) | ((data & MMC_INTR_RX_RXGOCTIS_Mask)<<2));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXGOCTIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 2) & MMC_INTR_RX_RXGOCTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXGBOCTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXGBOCTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXGBOCTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_INTR_RX_RXGBOCTIS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_INTR_RX_RXGBOCTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXGBOCTIS_Wr_Mask) | ((data & MMC_INTR_RX_RXGBOCTIS_Mask)<<1));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXGBOCTIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 1) & MMC_INTR_RX_RXGBOCTIS_Mask);\
+} while(0)
+
+/*#define MMC_INTR_RX_RXGBPKTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_INTR_RX_RXGBPKTIS_Mask (ULONG)(0x1)
+
+/*#define MMC_INTR_RX_RXGBPKTIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_INTR_RX_RXGBPKTIS_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_INTR_RX_RXGBPKTIS_UdfWr(data) do {\
+		ULONG v;\
+		MMC_INTR_RX_RgRd(v);\
+		v = (v & (MMC_INTR_RX_RES_Wr_Mask_26))|((( 0) & (MMC_INTR_RX_Mask_26))<<26);\
+		v = ((v & MMC_INTR_RX_RXGBPKTIS_Wr_Mask) | ((data & MMC_INTR_RX_RXGBPKTIS_Mask)<<0));\
+		MMC_INTR_RX_RgWr(v);\
+} while(0)
+
+#define MMC_INTR_RX_RXGBPKTIS_UdfRd(data) do {\
+		MMC_INTR_RX_RgRd(data);\
+		data = ((data >> 0) & MMC_INTR_RX_RXGBPKTIS_Mask);\
+} while(0)
+
+
+#define MMC_CNTRL_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x700))
+
+#define MMC_CNTRL_RgWr(data) do {\
+		iowrite32(data, (void *)MMC_CNTRL_RgOffAddr);\
+} while(0)
+
+#define MMC_CNTRL_RgRd(data) do {\
+		(data) = ioread32((void *)MMC_CNTRL_RgOffAddr);\
+} while(0)
+
+/*#define  MMC_CNTRL_Mask_9 (ULONG)(~(~0<<(23)))*/
+
+#define  MMC_CNTRL_Mask_9 (ULONG)(0x7fffff)
+
+/*#define MMC_CNTRL_RES_Wr_Mask_9 (ULONG)(~((~(~0<<(23)))<<(9)))*/
+
+#define MMC_CNTRL_RES_Wr_Mask_9 (ULONG)(0x1ff)
+
+/*#define  MMC_CNTRL_Mask_6 (ULONG)(~(~0<<(2)))*/
+
+#define  MMC_CNTRL_Mask_6 (ULONG)(0x3)
+
+/*#define MMC_CNTRL_RES_Wr_Mask_6 (ULONG)(~((~(~0<<(2)))<<(6)))*/
+
+#define MMC_CNTRL_RES_Wr_Mask_6 (ULONG)(0xffffff3f)
+
+/*#define MMC_CNTRL_UCDBC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_UCDBC_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_UCDBC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MMC_CNTRL_UCDBC_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MMC_CNTRL_UCDBC_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_UCDBC_Wr_Mask) | ((data & MMC_CNTRL_UCDBC_Mask)<<8));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_UCDBC_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 8) & MMC_CNTRL_UCDBC_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_CNPRSTLVL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_CNPRSTLVL_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_CNPRSTLVL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MMC_CNTRL_CNPRSTLVL_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MMC_CNTRL_CNPRSTLVL_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_CNPRSTLVL_Wr_Mask) | ((data & MMC_CNTRL_CNPRSTLVL_Mask)<<5));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_CNPRSTLVL_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 5) & MMC_CNTRL_CNPRSTLVL_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_CNTPRST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_CNTPRST_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_CNTPRST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MMC_CNTRL_CNTPRST_Wr_Mask (ULONG)(0xffffffef)
+
+#define MMC_CNTRL_CNTPRST_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_CNTPRST_Wr_Mask) | ((data & MMC_CNTRL_CNTPRST_Mask)<<4));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_CNTPRST_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 4) & MMC_CNTRL_CNTPRST_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_CNTFREEZ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_CNTFREEZ_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_CNTFREEZ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MMC_CNTRL_CNTFREEZ_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MMC_CNTRL_CNTFREEZ_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_CNTFREEZ_Wr_Mask) | ((data & MMC_CNTRL_CNTFREEZ_Mask)<<3));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_CNTFREEZ_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 3) & MMC_CNTRL_CNTFREEZ_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_RSTONRD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_RSTONRD_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_RSTONRD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MMC_CNTRL_RSTONRD_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MMC_CNTRL_RSTONRD_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_RSTONRD_Wr_Mask) | ((data & MMC_CNTRL_RSTONRD_Mask)<<2));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_RSTONRD_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 2) & MMC_CNTRL_RSTONRD_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_CNTSTOPRO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_CNTSTOPRO_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_CNTSTOPRO_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MMC_CNTRL_CNTSTOPRO_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MMC_CNTRL_CNTSTOPRO_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_CNTSTOPRO_Wr_Mask) | ((data & MMC_CNTRL_CNTSTOPRO_Mask)<<1));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_CNTSTOPRO_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 1) & MMC_CNTRL_CNTSTOPRO_Mask);\
+} while(0)
+
+/*#define MMC_CNTRL_CNTRST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MMC_CNTRL_CNTRST_Mask (ULONG)(0x1)
+
+/*#define MMC_CNTRL_CNTRST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MMC_CNTRL_CNTRST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MMC_CNTRL_CNTRST_UdfWr(data) do {\
+		ULONG v;\
+		MMC_CNTRL_RgRd(v);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_9))|((( 0) & (MMC_CNTRL_Mask_9))<<9);\
+		v = (v & (MMC_CNTRL_RES_Wr_Mask_6))|((( 0) & (MMC_CNTRL_Mask_6))<<6);\
+		v = ((v & MMC_CNTRL_CNTRST_Wr_Mask) | ((data & MMC_CNTRL_CNTRST_Mask)<<0));\
+		MMC_CNTRL_RgWr(v);\
+} while(0)
+
+#define MMC_CNTRL_CNTRST_UdfRd(data) do {\
+		MMC_CNTRL_RgRd(data);\
+		data = ((data >> 0) & MMC_CNTRL_CNTRST_Mask);\
+} while(0)
+
+
+#define MAC_MA1LR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x30c))
+
+#define MAC_MA1LR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MA1LR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA1LR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MA1LR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA1LR_ADDRLO_UdfWr(data) do {\
+		MAC_MA1LR_RgWr(data);\
+} while(0)
+
+#define MAC_MA1LR_ADDRLO_UdfRd(data) do {\
+		MAC_MA1LR_RgRd(data);\
+} while(0)
+
+
+#define MAC_MA1HR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x308))
+
+#define MAC_MA1HR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MA1HR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA1HR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MA1HR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_MA1HR_Mask_19 (ULONG)(~(~0<<(5)))*/
+
+#define  MAC_MA1HR_Mask_19 (ULONG)(0x1f)
+
+/*#define MAC_MA1HR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(5)))<<(19)))*/
+
+#define MAC_MA1HR_RES_Wr_Mask_19 (ULONG)(0xff07ffff)
+
+/*#define MAC_MA1HR_AE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA1HR_AE_Mask (ULONG)(0x1)
+
+/*#define MAC_MA1HR_AE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MA1HR_AE_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MA1HR_AE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA1HR_RgRd(v);\
+		v = (v & (MAC_MA1HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1HR_AE_Wr_Mask) | ((data & MAC_MA1HR_AE_Mask)<<31));\
+		MAC_MA1HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA1HR_AE_UdfRd(data) do {\
+		MAC_MA1HR_RgRd(data);\
+		data = ((data >> 31) & MAC_MA1HR_AE_Mask);\
+} while(0)
+
+/*#define MAC_MA1HR_SA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA1HR_SA_Mask (ULONG)(0x1)
+
+/*#define MAC_MA1HR_SA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (30)))*/
+
+#define MAC_MA1HR_SA_Wr_Mask (ULONG)(0xbfffffff)
+
+#define MAC_MA1HR_SA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA1HR_RgRd(v);\
+		v = (v & (MAC_MA1HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1HR_SA_Wr_Mask) | ((data & MAC_MA1HR_SA_Mask)<<30));\
+		MAC_MA1HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA1HR_SA_UdfRd(data) do {\
+		MAC_MA1HR_RgRd(data);\
+		data = ((data >> 30) & MAC_MA1HR_SA_Mask);\
+} while(0)
+
+/*#define MAC_MA1HR_MBC_Mask (ULONG)(~(~0<<(6)))*/
+
+#define MAC_MA1HR_MBC_Mask (ULONG)(0x3f)
+
+/*#define MAC_MA1HR_MBC_Wr_Mask (ULONG)(~((~(~0 << (6))) << (24)))*/
+
+#define MAC_MA1HR_MBC_Wr_Mask (ULONG)(0xc0ffffff)
+
+#define MAC_MA1HR_MBC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA1HR_RgRd(v);\
+		v = (v & (MAC_MA1HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1HR_MBC_Wr_Mask) | ((data & MAC_MA1HR_MBC_Mask)<<24));\
+		MAC_MA1HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA1HR_MBC_UdfRd(data) do {\
+		MAC_MA1HR_RgRd(data);\
+		data = ((data >> 24) & MAC_MA1HR_MBC_Mask);\
+} while(0)
+
+/*#define MAC_MA1HR_DCS_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MA1HR_DCS_Mask (ULONG)(0x7)
+
+/*#define MAC_MA1HR_DCS_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MAC_MA1HR_DCS_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MAC_MA1HR_DCS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA1HR_RgRd(v);\
+		v = (v & (MAC_MA1HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1HR_DCS_Wr_Mask) | ((data & MAC_MA1HR_DCS_Mask)<<16));\
+		MAC_MA1HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA1HR_DCS_UdfRd(data) do {\
+		MAC_MA1HR_RgRd(data);\
+		data = ((data >> 16) & MAC_MA1HR_DCS_Mask);\
+} while(0)
+
+/*#define MAC_MA1HR_ADDRHI_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_MA1HR_ADDRHI_Mask (ULONG)(0xffff)
+
+/*#define MAC_MA1HR_ADDRHI_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_MA1HR_ADDRHI_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_MA1HR_ADDRHI_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA1HR_RgRd(v);\
+		v = (v & (MAC_MA1HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1HR_ADDRHI_Wr_Mask) | ((data & MAC_MA1HR_ADDRHI_Mask)<<0));\
+		MAC_MA1HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA1HR_ADDRHI_UdfRd(data) do {\
+		MAC_MA1HR_RgRd(data);\
+		data = ((data >> 0) & MAC_MA1HR_ADDRHI_Mask);\
+} while(0)
+
+
+#define MAC_MA0LR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x304))
+
+#define MAC_MA0LR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MA0LR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA0LR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MA0LR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA0LR_ADDRLO_UdfWr(data) do {\
+		MAC_MA0LR_RgWr(data);\
+} while(0)
+
+#define MAC_MA0LR_ADDRLO_UdfRd(data) do {\
+		MAC_MA0LR_RgRd(data);\
+} while(0)
+
+
+#define MAC_MA0HR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x300))
+
+#define MAC_MA0HR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MA0HR_RgOffAddr);\
+} while(0)
+
+#define MAC_MA0HR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MA0HR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_MA0HR_Mask_19 (ULONG)(~(~0<<(12)))*/
+
+#define  MAC_MA0HR_Mask_19 (ULONG)(0xfff)
+
+/*#define MAC_MA0HR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(12)))<<(19)))*/
+
+#define MAC_MA0HR_RES_Wr_Mask_19 (ULONG)(0x8007ffff)
+
+/*#define MAC_MA0HR_AE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA0HR_AE_Mask (ULONG)(0x1)
+
+/*#define MAC_MA0HR_AE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MA0HR_AE_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MA0HR_AE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA0HR_RgRd(v);\
+		v = (v & (MAC_MA0HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA0HR_Mask_19))<<19);\
+		v = ((v & MAC_MA0HR_AE_Wr_Mask) | ((data & MAC_MA0HR_AE_Mask)<<31));\
+		MAC_MA0HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA0HR_AE_UdfRd(data) do {\
+		MAC_MA0HR_RgRd(data);\
+		data = ((data >> 31) & MAC_MA0HR_AE_Mask);\
+} while(0)
+
+/*#define MAC_MA0HR_DCS_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MA0HR_DCS_Mask (ULONG)(0x7)
+
+/*#define MAC_MA0HR_DCS_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MAC_MA0HR_DCS_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MAC_MA0HR_DCS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA0HR_RgRd(v);\
+		v = (v & (MAC_MA0HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA0HR_Mask_19))<<19);\
+		v = ((v & MAC_MA0HR_DCS_Wr_Mask) | ((data & MAC_MA0HR_DCS_Mask)<<16));\
+		MAC_MA0HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA0HR_DCS_UdfRd(data) do {\
+		MAC_MA0HR_RgRd(data);\
+		data = ((data >> 16) & MAC_MA0HR_DCS_Mask);\
+} while(0)
+
+/*#define MAC_MA0HR_ADDRHI_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_MA0HR_ADDRHI_Mask (ULONG)(0xffff)
+
+/*#define MAC_MA0HR_ADDRHI_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_MA0HR_ADDRHI_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_MA0HR_ADDRHI_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MA0HR_RgRd(v);\
+		v = (v & (MAC_MA0HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA0HR_Mask_19))<<19);\
+		v = ((v & MAC_MA0HR_ADDRHI_Wr_Mask) | ((data & MAC_MA0HR_ADDRHI_Mask)<<0));\
+		MAC_MA0HR_RgWr(v);\
+} while(0)
+
+#define MAC_MA0HR_ADDRHI_UdfRd(data) do {\
+		MAC_MA0HR_RgRd(data);\
+		data = ((data >> 0) & MAC_MA0HR_ADDRHI_Mask);\
+} while(0)
+
+
+#define MAC_GPIOR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x208))
+
+#define MAC_GPIOR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_GPIOR_RgOffAddr);\
+} while(0)
+
+#define MAC_GPIOR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_GPIOR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_GPIOR_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_GPIOR_Mask_28 (ULONG)(0xf)
+
+/*#define MAC_GPIOR_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MAC_GPIOR_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define  MAC_GPIOR_Mask_20 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_GPIOR_Mask_20 (ULONG)(0xf)
+
+/*#define MAC_GPIOR_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(4)))<<(20)))*/
+
+#define MAC_GPIOR_RES_Wr_Mask_20 (ULONG)(0xff0fffff)
+
+/*#define  MAC_GPIOR_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_GPIOR_Mask_12 (ULONG)(0xf)
+
+/*#define MAC_GPIOR_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MAC_GPIOR_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MAC_GPIOR_Mask_4 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_GPIOR_Mask_4 (ULONG)(0xf)
+
+/*#define MAC_GPIOR_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(4)))<<(4)))*/
+
+#define MAC_GPIOR_RES_Wr_Mask_4 (ULONG)(0xffffff0f)
+
+/*#define MAC_GPIOR_GPIT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_GPIOR_GPIT_Mask (ULONG)(0xf)
+
+/*#define MAC_GPIOR_GPIT_Wr_Mask (ULONG)(~((~(~0 << (4))) << (24)))*/
+
+#define MAC_GPIOR_GPIT_Wr_Mask (ULONG)(0xf0ffffff)
+
+#define MAC_GPIOR_GPIT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GPIOR_RgRd(v);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_28))|((( 0) & (MAC_GPIOR_Mask_28))<<28);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_20))|((( 0) & (MAC_GPIOR_Mask_20))<<20);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_12))|((( 0) & (MAC_GPIOR_Mask_12))<<12);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_4))|((( 0) & (MAC_GPIOR_Mask_4))<<4);\
+		v = ((v & MAC_GPIOR_GPIT_Wr_Mask) | ((data & MAC_GPIOR_GPIT_Mask)<<24));\
+		MAC_GPIOR_RgWr(v);\
+} while(0)
+
+#define MAC_GPIOR_GPIT_UdfRd(data) do {\
+		MAC_GPIOR_RgRd(data);\
+		data = ((data >> 24) & MAC_GPIOR_GPIT_Mask);\
+} while(0)
+
+/*#define MAC_GPIOR_GPIE_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_GPIOR_GPIE_Mask (ULONG)(0xf)
+
+/*#define MAC_GPIOR_GPIE_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define MAC_GPIOR_GPIE_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define MAC_GPIOR_GPIE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GPIOR_RgRd(v);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_28))|((( 0) & (MAC_GPIOR_Mask_28))<<28);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_20))|((( 0) & (MAC_GPIOR_Mask_20))<<20);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_12))|((( 0) & (MAC_GPIOR_Mask_12))<<12);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_4))|((( 0) & (MAC_GPIOR_Mask_4))<<4);\
+		v = ((v & MAC_GPIOR_GPIE_Wr_Mask) | ((data & MAC_GPIOR_GPIE_Mask)<<16));\
+		MAC_GPIOR_RgWr(v);\
+} while(0)
+
+#define MAC_GPIOR_GPIE_UdfRd(data) do {\
+		MAC_GPIOR_RgRd(data);\
+		data = ((data >> 16) & MAC_GPIOR_GPIE_Mask);\
+} while(0)
+
+/*#define MAC_GPIOR_GPO_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_GPIOR_GPO_Mask (ULONG)(0xf)
+
+/*#define MAC_GPIOR_GPO_Wr_Mask (ULONG)(~((~(~0 << (4))) << (8)))*/
+
+#define MAC_GPIOR_GPO_Wr_Mask (ULONG)(0xfffff0ff)
+
+#define MAC_GPIOR_GPO_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GPIOR_RgRd(v);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_28))|((( 0) & (MAC_GPIOR_Mask_28))<<28);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_20))|((( 0) & (MAC_GPIOR_Mask_20))<<20);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_12))|((( 0) & (MAC_GPIOR_Mask_12))<<12);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_4))|((( 0) & (MAC_GPIOR_Mask_4))<<4);\
+		v = ((v & MAC_GPIOR_GPO_Wr_Mask) | ((data & MAC_GPIOR_GPO_Mask)<<8));\
+		MAC_GPIOR_RgWr(v);\
+} while(0)
+
+#define MAC_GPIOR_GPO_UdfRd(data) do {\
+		MAC_GPIOR_RgRd(data);\
+		data = ((data >> 8) & MAC_GPIOR_GPO_Mask);\
+} while(0)
+
+/*#define MAC_GPIOR_GPIS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_GPIOR_GPIS_Mask (ULONG)(0xf)
+
+/*#define MAC_GPIOR_GPIS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define MAC_GPIOR_GPIS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define MAC_GPIOR_GPIS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GPIOR_RgRd(v);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_28))|((( 0) & (MAC_GPIOR_Mask_28))<<28);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_20))|((( 0) & (MAC_GPIOR_Mask_20))<<20);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_12))|((( 0) & (MAC_GPIOR_Mask_12))<<12);\
+		v = (v & (MAC_GPIOR_RES_Wr_Mask_4))|((( 0) & (MAC_GPIOR_Mask_4))<<4);\
+		v = ((v & MAC_GPIOR_GPIS_Wr_Mask) | ((data & MAC_GPIOR_GPIS_Mask)<<0));\
+		MAC_GPIOR_RgWr(v);\
+} while(0)
+
+#define MAC_GPIOR_GPIS_UdfRd(data) do {\
+		MAC_GPIOR_RgRd(data);\
+		data = ((data >> 0) & MAC_GPIOR_GPIS_Mask);\
+} while(0)
+
+
+#define MAC_GMIIDR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x204))
+
+#define MAC_GMIIDR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_GMIIDR_RgOffAddr);\
+} while(0)
+
+#define MAC_GMIIDR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_GMIIDR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_GMIIDR_RA_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_GMIIDR_RA_Mask (ULONG)(0xffff)
+
+/*#define MAC_GMIIDR_RA_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_GMIIDR_RA_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_GMIIDR_RA_UdfWr(data) do{\
+		ULONG v;\
+		MAC_GMIIDR_RgRd(v);\
+		v = ((v & MAC_GMIIDR_RA_Wr_Mask) | ((data & MAC_GMIIDR_RA_Mask)<<16));\
+		MAC_GMIIDR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIDR_RA_UdfRd(data) do {\
+		MAC_GMIIDR_RgRd(data);\
+		data = ((data >> 16) & MAC_GMIIDR_RA_Mask);\
+} while(0)
+
+/*#define MAC_GMIIDR_GD_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_GMIIDR_GD_Mask (ULONG)(0xffff)
+
+/*#define MAC_GMIIDR_GD_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_GMIIDR_GD_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_GMIIDR_GD_UdfWr(data) do{\
+		ULONG v;\
+		MAC_GMIIDR_RgRd(v);\
+		v = ((v & MAC_GMIIDR_GD_Wr_Mask) | ((data & MAC_GMIIDR_GD_Mask)<<0));\
+		MAC_GMIIDR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIDR_GD_UdfRd(data) do {\
+		MAC_GMIIDR_RgRd(data);\
+		data = ((data >> 0) & MAC_GMIIDR_GD_Mask);\
+} while(0)
+
+
+#define MAC_GMIIAR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x200))
+
+#define MAC_GMIIAR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_GMIIAR_RgOffAddr);\
+} while(0)
+
+#define MAC_GMIIAR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_GMIIAR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_GMIIAR_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MAC_GMIIAR_Mask_26 (ULONG)(0x3f)
+
+/*#define MAC_GMIIAR_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MAC_GMIIAR_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define  MAC_GMIIAR_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MAC_GMIIAR_Mask_12 (ULONG)(0xf)
+
+/*#define MAC_GMIIAR_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MAC_GMIIAR_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define  MAC_GMIIAR_Mask_5 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_GMIIAR_Mask_5 (ULONG)(0x7)
+
+/*#define MAC_GMIIAR_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(3)))<<(5)))*/
+
+#define MAC_GMIIAR_RES_Wr_Mask_5 (ULONG)(0xffffff1f)
+
+/*#define MAC_GMIIAR_PA_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_GMIIAR_PA_Mask (ULONG)(0x1f)
+
+/*#define MAC_GMIIAR_PA_Wr_Mask (ULONG)(~((~(~0 << (5))) << (21)))*/
+
+#define MAC_GMIIAR_PA_Wr_Mask (ULONG)(0xfc1fffff)
+
+#define MAC_GMIIAR_PA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_PA_Wr_Mask) | ((data & MAC_GMIIAR_PA_Mask)<<21));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_PA_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 21) & MAC_GMIIAR_PA_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_GR_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_GMIIAR_GR_Mask (ULONG)(0x1f)
+
+/*#define MAC_GMIIAR_GR_Wr_Mask (ULONG)(~((~(~0 << (5))) << (16)))*/
+
+#define MAC_GMIIAR_GR_Wr_Mask (ULONG)(0xffe0ffff)
+
+#define MAC_GMIIAR_GR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_GR_Wr_Mask) | ((data & MAC_GMIIAR_GR_Mask)<<16));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_GR_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 16) & MAC_GMIIAR_GR_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_CR_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_GMIIAR_CR_Mask (ULONG)(0xf)
+
+/*#define MAC_GMIIAR_CR_Wr_Mask (ULONG)(~((~(~0 << (4))) << (8)))*/
+
+#define MAC_GMIIAR_CR_Wr_Mask (ULONG)(0xfffff0ff)
+
+#define MAC_GMIIAR_CR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_CR_Wr_Mask) | ((data & MAC_GMIIAR_CR_Mask)<<8));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_CR_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 8) & MAC_GMIIAR_CR_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_SKAP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_GMIIAR_SKAP_Mask (ULONG)(0x1)
+
+/*#define MAC_GMIIAR_SKAP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_GMIIAR_SKAP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_GMIIAR_SKAP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_SKAP_Wr_Mask) | ((data & MAC_GMIIAR_SKAP_Mask)<<4));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_SKAP_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 4) & MAC_GMIIAR_SKAP_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_GOC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_GMIIAR_GOC_Mask (ULONG)(0x3)
+
+/*#define MAC_GMIIAR_GOC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MAC_GMIIAR_GOC_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MAC_GMIIAR_GOC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_GOC_Wr_Mask) | ((data & MAC_GMIIAR_GOC_Mask)<<2));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_GOC_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 2) & MAC_GMIIAR_GOC_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_C45E_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_GMIIAR_C45E_Mask (ULONG)(0x1)
+
+/*#define MAC_GMIIAR_C45E_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_GMIIAR_C45E_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_GMIIAR_C45E_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_C45E_Wr_Mask) | ((data & MAC_GMIIAR_C45E_Mask)<<1));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_C45E_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 1) & MAC_GMIIAR_C45E_Mask);\
+} while(0)
+
+/*#define MAC_GMIIAR_GB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_GMIIAR_GB_Mask (ULONG)(0x1)
+
+/*#define MAC_GMIIAR_GB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_GMIIAR_GB_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_GMIIAR_GB_UdfWr(data) do {\
+		ULONG v;\
+		MAC_GMIIAR_RgRd(v);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_26))|((( 0) & (MAC_GMIIAR_Mask_26))<<26);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_12))|((( 0) & (MAC_GMIIAR_Mask_12))<<12);\
+		v = (v & (MAC_GMIIAR_RES_Wr_Mask_5))|((( 0) & (MAC_GMIIAR_Mask_5))<<5);\
+		v = ((v & MAC_GMIIAR_GB_Wr_Mask) | ((data & MAC_GMIIAR_GB_Mask)<<0));\
+		MAC_GMIIAR_RgWr(v);\
+} while(0)
+
+#define MAC_GMIIAR_GB_UdfRd(data) do {\
+		MAC_GMIIAR_RgRd(data);\
+		data = ((data >> 0) & MAC_GMIIAR_GB_Mask);\
+} while(0)
+
+
+#define MAC_HFR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x124))
+
+#define MAC_HFR2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HFR2_RgOffAddr);\
+} while(0)
+
+/*#define MAC_HFR2_AUXSNAPNUM_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_HFR2_AUXSNAPNUM_Mask (ULONG)(0x7)
+
+#define MAC_HFR2_AUXSNAPNUM_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 28) & MAC_HFR2_AUXSNAPNUM_Mask);\
+} while(0)
+
+/*#define MAC_HFR2_PPSOUTNUM_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_HFR2_PPSOUTNUM_Mask (ULONG)(0x7)
+
+#define MAC_HFR2_PPSOUTNUM_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 24) & MAC_HFR2_PPSOUTNUM_Mask);\
+} while(0)
+
+/*#define MAC_HFR2_TXCHCNT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_HFR2_TXCHCNT_Mask (ULONG)(0xf)
+
+#define MAC_HFR2_TXCHCNT_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 18) & MAC_HFR2_TXCHCNT_Mask);\
+} while(0)
+
+/*#define MAC_HFR2_RXCHCNT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_HFR2_RXCHCNT_Mask (ULONG)(0xf)
+
+#define MAC_HFR2_RXCHCNT_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 12) & MAC_HFR2_RXCHCNT_Mask);\
+} while(0)
+
+/*#define MAC_HFR2_TXQCNT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_HFR2_TXQCNT_Mask (ULONG)(0xf)
+
+#define MAC_HFR2_TXQCNT_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 6) & MAC_HFR2_TXQCNT_Mask);\
+} while(0)
+
+/*#define MAC_HFR2_RXQCNT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_HFR2_RXQCNT_Mask (ULONG)(0xf)
+
+#define MAC_HFR2_RXQCNT_UdfRd(data) do {\
+		MAC_HFR2_RgRd(data);\
+		data = ((data >> 0) & MAC_HFR2_RXQCNT_Mask);\
+} while(0)
+
+
+#define MAC_HFR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x120))
+
+#define MAC_HFR1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HFR1_RgOffAddr);\
+} while(0)
+
+/*#define MAC_HFR1_L3L4FILTERNUM_Mask (ULONG)(~(~0<<(4)))*/
+
+#define MAC_HFR1_L3L4FILTERNUM_Mask (ULONG)(0xf)
+
+#define MAC_HFR1_L3L4FILTERNUM_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 27) & MAC_HFR1_L3L4FILTERNUM_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_HASHTBLSZ_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_HFR1_HASHTBLSZ_Mask (ULONG)(0x3)
+
+#define MAC_HFR1_HASHTBLSZ_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 24) & MAC_HFR1_HASHTBLSZ_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_LPMODEEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_LPMODEEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_LPMODEEN_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 23) & MAC_HFR1_LPMODEEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_AVSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_AVSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_AVSEL_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 20) & MAC_HFR1_AVSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_DMADEBUGEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_DMADEBUGEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_DMADEBUGEN_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 19) & MAC_HFR1_DMADEBUGEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_TSOEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_TSOEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_TSOEN_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 18) & MAC_HFR1_TSOEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_SPHEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_SPHEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_SPHEN_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 17) & MAC_HFR1_SPHEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_DCBEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_DCBEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_DCBEN_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 16) & MAC_HFR1_DCBEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_ADVTHWORD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR1_ADVTHWORD_Mask (ULONG)(0x1)
+
+#define MAC_HFR1_ADVTHWORD_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 13) & MAC_HFR1_ADVTHWORD_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_TXFIFOSIZE_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_HFR1_TXFIFOSIZE_Mask (ULONG)(0x1f)
+
+#define MAC_HFR1_TXFIFOSIZE_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 6) & MAC_HFR1_TXFIFOSIZE_Mask);\
+} while(0)
+
+/*#define MAC_HFR1_RXFIFOSIZE_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_HFR1_RXFIFOSIZE_Mask (ULONG)(0x1f)
+
+#define MAC_HFR1_RXFIFOSIZE_UdfRd(data) do {\
+		MAC_HFR1_RgRd(data);\
+		data = ((data >> 0) & MAC_HFR1_RXFIFOSIZE_Mask);\
+} while(0)
+
+
+#define MAC_HFR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11c))
+
+#define MAC_HFR0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HFR0_RgOffAddr);\
+} while(0)
+
+/*#define MAC_HFR0_ACTPHYSEL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_HFR0_ACTPHYSEL_Mask (ULONG)(0x7)
+
+#define MAC_HFR0_ACTPHYSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 28) & MAC_HFR0_ACTPHYSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_SAVLANINS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_SAVLANINS_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_SAVLANINS_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 27) & MAC_HFR0_SAVLANINS_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_TSINTSEL_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_HFR0_TSINTSEL_Mask (ULONG)(0x3)
+
+#define MAC_HFR0_TSINTSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 25) & MAC_HFR0_TSINTSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_MACADR64SEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_MACADR64SEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_MACADR64SEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 24) & MAC_HFR0_MACADR64SEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_MACADR32SEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_MACADR32SEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_MACADR32SEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 23) & MAC_HFR0_MACADR32SEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_ADDMACADRSEL_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_HFR0_ADDMACADRSEL_Mask (ULONG)(0x1f)
+
+#define MAC_HFR0_ADDMACADRSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 18) & MAC_HFR0_ADDMACADRSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_RXCOE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_RXCOE_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_RXCOE_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 16) & MAC_HFR0_RXCOE_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_TXCOESEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_TXCOESEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_TXCOESEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 14) & MAC_HFR0_TXCOESEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_EEESEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_EEESEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_EEESEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 13) & MAC_HFR0_EEESEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_TSSSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_TSSSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_TSSSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 12) & MAC_HFR0_TSSSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_ARPOFFLDEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_ARPOFFLDEN_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_ARPOFFLDEN_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 9) & MAC_HFR0_ARPOFFLDEN_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_MMCSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_MMCSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_MMCSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 8) & MAC_HFR0_MMCSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_MGKSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_MGKSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_MGKSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 7) & MAC_HFR0_MGKSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_RWKSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_RWKSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_RWKSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 6) & MAC_HFR0_RWKSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_SMASEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_SMASEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_SMASEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 5) & MAC_HFR0_SMASEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_VLANHASEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_VLANHASEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_VLANHASEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 4) & MAC_HFR0_VLANHASEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_PCSSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_PCSSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_PCSSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 3) & MAC_HFR0_PCSSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_HDSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_HDSEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_HDSEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 2) & MAC_HFR0_HDSEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_GMIISEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_GMIISEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_GMIISEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 1) & MAC_HFR0_GMIISEL_Mask);\
+} while(0)
+
+/*#define MAC_HFR0_MIISEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_HFR0_MIISEL_Mask (ULONG)(0x1)
+
+#define MAC_HFR0_MIISEL_UdfRd(data) do {\
+		MAC_HFR0_RgRd(data);\
+		data = ((data >> 0) & MAC_HFR0_MIISEL_Mask);\
+} while(0)
+
+
+#define MAC_MDR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x114))
+
+#define MAC_MDR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MDR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_MDR_TFCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_MDR_TFCSTS_Mask (ULONG)(0x3)
+
+#define MAC_MDR_TFCSTS_UdfRd(data) do {\
+		MAC_MDR_RgRd(data);\
+		data = ((data >> 17) & MAC_MDR_TFCSTS_Mask);\
+} while(0)
+
+/*#define MAC_MDR_TPESTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MDR_TPESTS_Mask (ULONG)(0x1)
+
+#define MAC_MDR_TPESTS_UdfRd(data) do {\
+		MAC_MDR_RgRd(data);\
+		data = ((data >> 16) & MAC_MDR_TPESTS_Mask);\
+} while(0)
+
+/*#define MAC_MDR_RFCFCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_MDR_RFCFCSTS_Mask (ULONG)(0x3)
+
+#define MAC_MDR_RFCFCSTS_UdfRd(data) do {\
+		MAC_MDR_RgRd(data);\
+		data = ((data >> 1) & MAC_MDR_RFCFCSTS_Mask);\
+} while(0)
+
+/*#define MAC_MDR_RPESTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MDR_RPESTS_Mask (ULONG)(0x1)
+
+#define MAC_MDR_RPESTS_UdfRd(data) do {\
+		MAC_MDR_RgRd(data);\
+		data = ((data >> 0) & MAC_MDR_RPESTS_Mask);\
+} while(0)
+
+
+#define MAC_VR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x110))
+
+#define MAC_VR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_VR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_VR_USERVER_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_VR_USERVER_Mask (ULONG)(0xff)
+
+#define MAC_VR_USERVER_UdfRd(data) do {\
+		MAC_VR_RgRd(data);\
+		data = ((data >> 8) & MAC_VR_USERVER_Mask);\
+} while(0)
+
+/*#define MAC_VR_SNPSVER_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_VR_SNPSVER_Mask (ULONG)(0xff)
+
+#define MAC_VR_SNPSVER_UdfRd(data) do {\
+		MAC_VR_RgRd(data);\
+		data = ((data >> 0) & MAC_VR_SNPSVER_Mask);\
+} while(0)
+
+
+#define MAC_HTR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x2c))
+
+#define MAC_HTR7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR7_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR7_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR7_HT_UdfWr(data) do {\
+		MAC_HTR7_RgWr(data);\
+} while(0)
+
+#define MAC_HTR7_HT_UdfRd(data) do {\
+		MAC_HTR7_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x28))
+
+#define MAC_HTR6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR6_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR6_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR6_HT_UdfWr(data) do {\
+		MAC_HTR6_RgWr(data);\
+} while(0)
+
+#define MAC_HTR6_HT_UdfRd(data) do {\
+		MAC_HTR6_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x24))
+
+#define MAC_HTR5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR5_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR5_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR5_HT_UdfWr(data) do {\
+		MAC_HTR5_RgWr(data);\
+} while(0)
+
+#define MAC_HTR5_HT_UdfRd(data) do {\
+		MAC_HTR5_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x20))
+
+#define MAC_HTR4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR4_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR4_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR4_HT_UdfWr(data) do {\
+		MAC_HTR4_RgWr(data);\
+} while(0)
+
+#define MAC_HTR4_HT_UdfRd(data) do {\
+		MAC_HTR4_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1c))
+
+#define MAC_HTR3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR3_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR3_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR3_HT_UdfWr(data) do {\
+		MAC_HTR3_RgWr(data);\
+} while(0)
+
+#define MAC_HTR3_HT_UdfRd(data) do {\
+		MAC_HTR3_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x18))
+
+#define MAC_HTR2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR2_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR2_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR2_HT_UdfWr(data) do {\
+		MAC_HTR2_RgWr(data);\
+} while(0)
+
+#define MAC_HTR2_HT_UdfRd(data) do {\
+		MAC_HTR2_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14))
+
+#define MAC_HTR1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR1_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR1_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR1_HT_UdfWr(data) do {\
+		MAC_HTR1_RgWr(data);\
+} while(0)
+
+#define MAC_HTR1_HT_UdfRd(data) do {\
+		MAC_HTR1_RgRd(data);\
+} while(0)
+
+
+#define MAC_HTR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x10))
+
+#define MAC_HTR0_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_HTR0_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR0_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_HTR0_RgOffAddr);\
+} while(0)
+
+#define MAC_HTR0_HT_UdfWr(data) do {\
+		MAC_HTR0_RgWr(data);\
+} while(0)
+
+#define MAC_HTR0_HT_UdfRd(data) do {\
+		MAC_HTR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_RIWTR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14b8))
+
+#define DMA_RIWTR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR7_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR7_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR7_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR7_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR7_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR7_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR7_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR7_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR7_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR7_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR7_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR7_RWT_Wr_Mask) | ((data & DMA_RIWTR7_RWT_Mask)<<0));\
+		DMA_RIWTR7_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR7_RWT_UdfRd(data) do {\
+		DMA_RIWTR7_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR7_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1438))
+
+#define DMA_RIWTR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR6_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR6_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR6_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR6_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR6_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR6_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR6_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR6_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR6_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR6_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR6_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR6_RWT_Wr_Mask) | ((data & DMA_RIWTR6_RWT_Mask)<<0));\
+		DMA_RIWTR6_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR6_RWT_UdfRd(data) do {\
+		DMA_RIWTR6_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR6_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13b8))
+
+#define DMA_RIWTR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR5_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR5_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR5_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR5_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR5_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR5_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR5_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR5_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR5_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR5_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR5_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR5_RWT_Wr_Mask) | ((data & DMA_RIWTR5_RWT_Mask)<<0));\
+		DMA_RIWTR5_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR5_RWT_UdfRd(data) do {\
+		DMA_RIWTR5_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR5_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1338))
+
+#define DMA_RIWTR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR4_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR4_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR4_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR4_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR4_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR4_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR4_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR4_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR4_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR4_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR4_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR4_RWT_Wr_Mask) | ((data & DMA_RIWTR4_RWT_Mask)<<0));\
+		DMA_RIWTR4_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR4_RWT_UdfRd(data) do {\
+		DMA_RIWTR4_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR4_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12b8))
+
+#define DMA_RIWTR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR3_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR3_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR3_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR3_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR3_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR3_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR3_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR3_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR3_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR3_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR3_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR3_RWT_Wr_Mask) | ((data & DMA_RIWTR3_RWT_Mask)<<0));\
+		DMA_RIWTR3_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR3_RWT_UdfRd(data) do {\
+		DMA_RIWTR3_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR3_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1238))
+
+#define DMA_RIWTR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR2_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR2_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR2_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR2_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR2_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR2_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR2_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR2_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR2_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR2_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR2_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR2_RWT_Wr_Mask) | ((data & DMA_RIWTR2_RWT_Mask)<<0));\
+		DMA_RIWTR2_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR2_RWT_UdfRd(data) do {\
+		DMA_RIWTR2_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR2_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11b8))
+
+#define DMA_RIWTR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR1_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR1_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR1_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR1_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR1_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR1_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR1_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR1_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR1_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR1_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR1_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR1_RWT_Wr_Mask) | ((data & DMA_RIWTR1_RWT_Mask)<<0));\
+		DMA_RIWTR1_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR1_RWT_UdfRd(data) do {\
+		DMA_RIWTR1_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR1_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RIWTR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1138))
+
+#define DMA_RIWTR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RIWTR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RIWTR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RIWTR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RIWTR0_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR0_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR0_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR0_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR0_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR0_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR0_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR0_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR0_RWT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR0_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR0_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR0_RWT_Wr_Mask) | ((data & DMA_RIWTR0_RWT_Mask)<<0));\
+		DMA_RIWTR0_RgWr(v);\
+} while(0)
+
+#define DMA_RIWTR0_RWT_UdfRd(data) do {\
+		DMA_RIWTR0_RgRd(data);\
+		data = ((data >> 0) & DMA_RIWTR0_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14b0))
+
+#define DMA_RDRLR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR7_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR7_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR7_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR7_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR7_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR7_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR7_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR7_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR7_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR7_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR7_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR7_RDRL_Wr_Mask) | ((data & DMA_RDRLR7_RDRL_Mask)<<0));\
+		DMA_RDRLR7_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR7_RDRL_UdfRd(data) do {\
+		DMA_RDRLR7_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR7_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1430))
+
+#define DMA_RDRLR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR6_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR6_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR6_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR6_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR6_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR6_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR6_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR6_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR6_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR6_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR6_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR6_RDRL_Wr_Mask) | ((data & DMA_RDRLR6_RDRL_Mask)<<0));\
+		DMA_RDRLR6_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR6_RDRL_UdfRd(data) do {\
+		DMA_RDRLR6_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR6_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13b0))
+
+#define DMA_RDRLR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR5_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR5_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR5_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR5_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR5_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR5_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR5_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR5_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR5_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR5_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR5_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR5_RDRL_Wr_Mask) | ((data & DMA_RDRLR5_RDRL_Mask)<<0));\
+		DMA_RDRLR5_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR5_RDRL_UdfRd(data) do {\
+		DMA_RDRLR5_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR5_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1330))
+
+#define DMA_RDRLR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR4_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR4_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR4_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR4_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR4_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR4_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR4_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR4_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR4_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR4_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR4_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR4_RDRL_Wr_Mask) | ((data & DMA_RDRLR4_RDRL_Mask)<<0));\
+		DMA_RDRLR4_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR4_RDRL_UdfRd(data) do {\
+		DMA_RDRLR4_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR4_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12b0))
+
+#define DMA_RDRLR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR3_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR3_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR3_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR3_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR3_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR3_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR3_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR3_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR3_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR3_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR3_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR3_RDRL_Wr_Mask) | ((data & DMA_RDRLR3_RDRL_Mask)<<0));\
+		DMA_RDRLR3_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR3_RDRL_UdfRd(data) do {\
+		DMA_RDRLR3_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR3_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1230))
+
+#define DMA_RDRLR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR2_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR2_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR2_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR2_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR2_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR2_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR2_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR2_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR2_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR2_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR2_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR2_RDRL_Wr_Mask) | ((data & DMA_RDRLR2_RDRL_Mask)<<0));\
+		DMA_RDRLR2_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR2_RDRL_UdfRd(data) do {\
+		DMA_RDRLR2_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR2_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11b0))
+
+#define DMA_RDRLR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR1_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR1_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR1_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR1_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR1_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR1_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR1_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR1_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR1_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR1_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR1_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR1_RDRL_Wr_Mask) | ((data & DMA_RDRLR1_RDRL_Mask)<<0));\
+		DMA_RDRLR1_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR1_RDRL_UdfRd(data) do {\
+		DMA_RDRLR1_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR1_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1130))
+
+#define DMA_RDRLR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDRLR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RDRLR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDRLR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RDRLR0_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR0_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR0_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR0_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR0_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR0_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR0_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR0_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR0_RDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR0_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR0_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR0_RDRL_Wr_Mask) | ((data & DMA_RDRLR0_RDRL_Mask)<<0));\
+		DMA_RDRLR0_RgWr(v);\
+} while(0)
+
+#define DMA_RDRLR0_RDRL_UdfRd(data) do {\
+		DMA_RDRLR0_RgRd(data);\
+		data = ((data >> 0) & DMA_RDRLR0_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14ac))
+
+#define DMA_TDRLR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR7_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR7_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR7_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR7_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR7_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR7_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR7_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR7_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR7_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR7_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR7_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR7_TDRL_Wr_Mask) | ((data & DMA_TDRLR7_TDRL_Mask)<<0));\
+		DMA_TDRLR7_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR7_TDRL_UdfRd(data) do {\
+		DMA_TDRLR7_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR7_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x142c))
+
+#define DMA_TDRLR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR6_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR6_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR6_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR6_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR6_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR6_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR6_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR6_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR6_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR6_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR6_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR6_TDRL_Wr_Mask) | ((data & DMA_TDRLR6_TDRL_Mask)<<0));\
+		DMA_TDRLR6_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR6_TDRL_UdfRd(data) do {\
+		DMA_TDRLR6_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR6_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13ac))
+
+#define DMA_TDRLR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR5_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR5_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR5_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR5_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR5_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR5_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR5_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR5_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR5_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR5_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR5_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR5_TDRL_Wr_Mask) | ((data & DMA_TDRLR5_TDRL_Mask)<<0));\
+		DMA_TDRLR5_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR5_TDRL_UdfRd(data) do {\
+		DMA_TDRLR5_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR5_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x132c))
+
+#define DMA_TDRLR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR4_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR4_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR4_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR4_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR4_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR4_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR4_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR4_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR4_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR4_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR4_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR4_TDRL_Wr_Mask) | ((data & DMA_TDRLR4_TDRL_Mask)<<0));\
+		DMA_TDRLR4_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR4_TDRL_UdfRd(data) do {\
+		DMA_TDRLR4_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR4_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12ac))
+
+#define DMA_TDRLR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR3_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR3_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR3_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR3_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR3_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR3_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR3_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR3_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR3_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR3_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR3_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR3_TDRL_Wr_Mask) | ((data & DMA_TDRLR3_TDRL_Mask)<<0));\
+		DMA_TDRLR3_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR3_TDRL_UdfRd(data) do {\
+		DMA_TDRLR3_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR3_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x122c))
+
+#define DMA_TDRLR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR2_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR2_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR2_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR2_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR2_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR2_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR2_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR2_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR2_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR2_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR2_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR2_TDRL_Wr_Mask) | ((data & DMA_TDRLR2_TDRL_Mask)<<0));\
+		DMA_TDRLR2_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR2_TDRL_UdfRd(data) do {\
+		DMA_TDRLR2_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR2_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11ac))
+
+#define DMA_TDRLR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR1_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR1_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR1_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR1_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR1_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR1_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR1_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR1_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR1_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR1_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR1_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR1_TDRL_Wr_Mask) | ((data & DMA_TDRLR1_TDRL_Mask)<<0));\
+		DMA_TDRLR1_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR1_TDRL_UdfRd(data) do {\
+		DMA_TDRLR1_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR1_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x112c))
+
+#define DMA_TDRLR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDRLR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TDRLR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDRLR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TDRLR0_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR0_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR0_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR0_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR0_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR0_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR0_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR0_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR0_TDRL_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR0_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR0_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR0_TDRL_Wr_Mask) | ((data & DMA_TDRLR0_TDRL_Mask)<<0));\
+		DMA_TDRLR0_RgWr(v);\
+} while(0)
+
+#define DMA_TDRLR0_TDRL_UdfRd(data) do {\
+		DMA_TDRLR0_RgRd(data);\
+		data = ((data >> 0) & DMA_TDRLR0_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14a8))
+
+#define DMA_RDTP_RPDR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR7_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR7_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR7_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1428))
+
+#define DMA_RDTP_RPDR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR6_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR6_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR6_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13a8))
+
+#define DMA_RDTP_RPDR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR5_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR5_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR5_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1328))
+
+#define DMA_RDTP_RPDR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR4_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR4_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR4_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12a8))
+
+#define DMA_RDTP_RPDR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR3_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR3_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR3_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1228))
+
+#define DMA_RDTP_RPDR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR2_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR2_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR2_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11a8))
+
+#define DMA_RDTP_RPDR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR1_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR1_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR1_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1128))
+
+#define DMA_RDTP_RPDR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RDTP_RPDR0_RDT_UdfWr(data) do {\
+		DMA_RDTP_RPDR0_RgWr(data);\
+} while(0)
+
+#define DMA_RDTP_RPDR0_RDT_UdfRd(data) do {\
+		DMA_RDTP_RPDR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14a0))
+
+#define DMA_TDTP_TPDR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR7_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR7_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR7_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1420))
+
+#define DMA_TDTP_TPDR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR6_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR6_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR6_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13a0))
+
+#define DMA_TDTP_TPDR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR5_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR5_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR5_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1320))
+
+#define DMA_TDTP_TPDR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR4_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR4_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR4_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12a0))
+
+#define DMA_TDTP_TPDR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR3_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR3_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR3_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1220))
+
+#define DMA_TDTP_TPDR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR2_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR2_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR2_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11a0))
+
+#define DMA_TDTP_TPDR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR1_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR1_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR1_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1120))
+
+#define DMA_TDTP_TPDR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TDTP_TPDR0_TDT_UdfWr(data) do {\
+		DMA_TDTP_TPDR0_RgWr(data);\
+} while(0)
+
+#define DMA_TDTP_TPDR0_TDT_UdfRd(data) do {\
+		DMA_TDTP_TPDR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x149c))
+
+#define DMA_RDLAR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR7_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR7_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR7_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x141c))
+
+#define DMA_RDLAR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR6_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR6_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR6_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x139c))
+
+#define DMA_RDLAR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR5_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR5_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR5_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x131c))
+
+#define DMA_RDLAR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR4_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR4_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR4_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x129c))
+
+#define DMA_RDLAR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR3_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR3_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR3_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x121c))
+
+#define DMA_RDLAR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR2_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR2_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR2_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x119c))
+
+#define DMA_RDLAR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR1_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR1_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR1_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_RDLAR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x111c))
+
+#define DMA_RDLAR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RDLAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RDLAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RDLAR0_RDESLA_UdfWr(data) do {\
+		DMA_RDLAR0_RgWr(data);\
+} while(0)
+
+#define DMA_RDLAR0_RDESLA_UdfRd(data) do {\
+		DMA_RDLAR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1494))
+
+#define DMA_TDLAR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR7_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR7_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR7_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1414))
+
+#define DMA_TDLAR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR6_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR6_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR6_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1394))
+
+#define DMA_TDLAR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR5_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR5_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR5_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1314))
+
+#define DMA_TDLAR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR4_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR4_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR4_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1294))
+
+#define DMA_TDLAR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR3_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR3_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR3_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1214))
+
+#define DMA_TDLAR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR2_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR2_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR2_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1194))
+
+#define DMA_TDLAR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR1_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR1_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR1_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_TDLAR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1114))
+
+#define DMA_TDLAR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TDLAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TDLAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TDLAR0_TDESLA_UdfWr(data) do {\
+		DMA_TDLAR0_RgWr(data);\
+} while(0)
+
+#define DMA_TDLAR0_TDESLA_UdfRd(data) do {\
+		DMA_TDLAR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_IER7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14b4))
+
+#define DMA_IER7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER7_RgOffAddr);\
+} while(0)
+
+#define DMA_IER7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER7_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER7_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER7_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER7_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER7_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER7_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER7_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER7_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER7_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER7_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER7_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER7_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER7_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER7_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER7_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_TIE_Wr_Mask) | ((data & DMA_IER7_TIE_Mask)<<0));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_TIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 0) & DMA_IER7_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER7_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER7_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_TXSE_Wr_Mask) | ((data & DMA_IER7_TXSE_Mask)<<1));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_TXSE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 1) & DMA_IER7_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER7_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER7_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_TBUE_Wr_Mask) | ((data & DMA_IER7_TBUE_Mask)<<2));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_TBUE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 2) & DMA_IER7_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER7_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER7_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_RIE_Wr_Mask) | ((data & DMA_IER7_RIE_Mask)<<6));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_RIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 6) & DMA_IER7_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER7_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER7_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_RBUE_Wr_Mask) | ((data & DMA_IER7_RBUE_Mask)<<7));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_RBUE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 7) & DMA_IER7_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER7_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER7_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_RSE_Wr_Mask) | ((data & DMA_IER7_RSE_Mask)<<8));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_RSE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 8) & DMA_IER7_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER7_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER7_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_RWTE_Wr_Mask) | ((data & DMA_IER7_RWTE_Mask)<<9));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_RWTE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 9) & DMA_IER7_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER7_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER7_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_ETIE_Wr_Mask) | ((data & DMA_IER7_ETIE_Mask)<<10));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_ETIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 10) & DMA_IER7_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER7_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER7_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_ERIE_Wr_Mask) | ((data & DMA_IER7_ERIE_Mask)<<11));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_ERIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 11) & DMA_IER7_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER7_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER7_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_FBEE_Wr_Mask) | ((data & DMA_IER7_FBEE_Mask)<<12));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_FBEE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 12) & DMA_IER7_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER7_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER7_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_CDEE_Wr_Mask) | ((data & DMA_IER7_CDEE_Mask)<<13));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_CDEE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 13) & DMA_IER7_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER7_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER7_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_AIE_Wr_Mask) | ((data & DMA_IER7_AIE_Mask)<<15));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_AIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 15) & DMA_IER7_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER7_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER7_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER7_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER7_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER7_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER7_RgRd(v);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_3))|((( 0) & (DMA_IER7_Mask_3))<<3);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_14))|((( 0) & (DMA_IER7_Mask_14))<<14);\
+		v = (v & (DMA_IER7_RES_Wr_Mask_17))|((( 0) & (DMA_IER7_Mask_17))<<17);\
+		v = ((v & DMA_IER7_NIE_Wr_Mask) | ((data & DMA_IER7_NIE_Mask)<<16));\
+		DMA_IER7_RgWr(v);\
+} while(0)
+
+#define DMA_IER7_NIE_UdfRd(data) do {\
+		DMA_IER7_RgRd(data);\
+		data = ((data >> 16) & DMA_IER7_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1434))
+
+#define DMA_IER6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER6_RgOffAddr);\
+} while(0)
+
+#define DMA_IER6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER6_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER6_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER6_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER6_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER6_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER6_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER6_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER6_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER6_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER6_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER6_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER6_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER6_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER6_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER6_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_TIE_Wr_Mask) | ((data & DMA_IER6_TIE_Mask)<<0));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_TIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 0) & DMA_IER6_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER6_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER6_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_TXSE_Wr_Mask) | ((data & DMA_IER6_TXSE_Mask)<<1));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_TXSE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 1) & DMA_IER6_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER6_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER6_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_TBUE_Wr_Mask) | ((data & DMA_IER6_TBUE_Mask)<<2));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_TBUE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 2) & DMA_IER6_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER6_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER6_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_RIE_Wr_Mask) | ((data & DMA_IER6_RIE_Mask)<<6));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_RIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 6) & DMA_IER6_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER6_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER6_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_RBUE_Wr_Mask) | ((data & DMA_IER6_RBUE_Mask)<<7));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_RBUE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 7) & DMA_IER6_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER6_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER6_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_RSE_Wr_Mask) | ((data & DMA_IER6_RSE_Mask)<<8));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_RSE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 8) & DMA_IER6_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER6_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER6_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_RWTE_Wr_Mask) | ((data & DMA_IER6_RWTE_Mask)<<9));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_RWTE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 9) & DMA_IER6_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER6_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER6_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_ETIE_Wr_Mask) | ((data & DMA_IER6_ETIE_Mask)<<10));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_ETIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 10) & DMA_IER6_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER6_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER6_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_ERIE_Wr_Mask) | ((data & DMA_IER6_ERIE_Mask)<<11));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_ERIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 11) & DMA_IER6_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER6_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER6_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_FBEE_Wr_Mask) | ((data & DMA_IER6_FBEE_Mask)<<12));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_FBEE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 12) & DMA_IER6_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER6_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER6_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_CDEE_Wr_Mask) | ((data & DMA_IER6_CDEE_Mask)<<13));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_CDEE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 13) & DMA_IER6_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER6_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER6_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_AIE_Wr_Mask) | ((data & DMA_IER6_AIE_Mask)<<15));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_AIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 15) & DMA_IER6_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER6_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER6_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER6_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER6_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER6_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER6_RgRd(v);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_3))|((( 0) & (DMA_IER6_Mask_3))<<3);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_14))|((( 0) & (DMA_IER6_Mask_14))<<14);\
+		v = (v & (DMA_IER6_RES_Wr_Mask_17))|((( 0) & (DMA_IER6_Mask_17))<<17);\
+		v = ((v & DMA_IER6_NIE_Wr_Mask) | ((data & DMA_IER6_NIE_Mask)<<16));\
+		DMA_IER6_RgWr(v);\
+} while(0)
+
+#define DMA_IER6_NIE_UdfRd(data) do {\
+		DMA_IER6_RgRd(data);\
+		data = ((data >> 16) & DMA_IER6_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13b4))
+
+#define DMA_IER5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER5_RgOffAddr);\
+} while(0)
+
+#define DMA_IER5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER5_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER5_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER5_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER5_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER5_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER5_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER5_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER5_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER5_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER5_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER5_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER5_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER5_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER5_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER5_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_TIE_Wr_Mask) | ((data & DMA_IER5_TIE_Mask)<<0));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_TIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 0) & DMA_IER5_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER5_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER5_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_TXSE_Wr_Mask) | ((data & DMA_IER5_TXSE_Mask)<<1));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_TXSE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 1) & DMA_IER5_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER5_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER5_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_TBUE_Wr_Mask) | ((data & DMA_IER5_TBUE_Mask)<<2));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_TBUE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 2) & DMA_IER5_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER5_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER5_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_RIE_Wr_Mask) | ((data & DMA_IER5_RIE_Mask)<<6));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_RIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 6) & DMA_IER5_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER5_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER5_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_RBUE_Wr_Mask) | ((data & DMA_IER5_RBUE_Mask)<<7));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_RBUE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 7) & DMA_IER5_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER5_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER5_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_RSE_Wr_Mask) | ((data & DMA_IER5_RSE_Mask)<<8));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_RSE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 8) & DMA_IER5_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER5_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER5_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_RWTE_Wr_Mask) | ((data & DMA_IER5_RWTE_Mask)<<9));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_RWTE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 9) & DMA_IER5_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER5_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER5_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_ETIE_Wr_Mask) | ((data & DMA_IER5_ETIE_Mask)<<10));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_ETIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 10) & DMA_IER5_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER5_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER5_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_ERIE_Wr_Mask) | ((data & DMA_IER5_ERIE_Mask)<<11));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_ERIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 11) & DMA_IER5_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER5_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER5_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_FBEE_Wr_Mask) | ((data & DMA_IER5_FBEE_Mask)<<12));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_FBEE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 12) & DMA_IER5_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER5_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER5_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_CDEE_Wr_Mask) | ((data & DMA_IER5_CDEE_Mask)<<13));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_CDEE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 13) & DMA_IER5_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER5_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER5_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_AIE_Wr_Mask) | ((data & DMA_IER5_AIE_Mask)<<15));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_AIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 15) & DMA_IER5_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER5_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER5_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER5_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER5_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER5_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER5_RgRd(v);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_3))|((( 0) & (DMA_IER5_Mask_3))<<3);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_14))|((( 0) & (DMA_IER5_Mask_14))<<14);\
+		v = (v & (DMA_IER5_RES_Wr_Mask_17))|((( 0) & (DMA_IER5_Mask_17))<<17);\
+		v = ((v & DMA_IER5_NIE_Wr_Mask) | ((data & DMA_IER5_NIE_Mask)<<16));\
+		DMA_IER5_RgWr(v);\
+} while(0)
+
+#define DMA_IER5_NIE_UdfRd(data) do {\
+		DMA_IER5_RgRd(data);\
+		data = ((data >> 16) & DMA_IER5_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1334))
+
+#define DMA_IER4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER4_RgOffAddr);\
+} while(0)
+
+#define DMA_IER4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER4_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER4_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER4_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER4_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER4_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER4_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER4_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER4_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER4_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER4_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER4_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER4_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER4_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER4_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER4_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_TIE_Wr_Mask) | ((data & DMA_IER4_TIE_Mask)<<0));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_TIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 0) & DMA_IER4_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER4_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER4_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_TXSE_Wr_Mask) | ((data & DMA_IER4_TXSE_Mask)<<1));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_TXSE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 1) & DMA_IER4_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER4_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER4_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_TBUE_Wr_Mask) | ((data & DMA_IER4_TBUE_Mask)<<2));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_TBUE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 2) & DMA_IER4_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER4_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER4_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_RIE_Wr_Mask) | ((data & DMA_IER4_RIE_Mask)<<6));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_RIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 6) & DMA_IER4_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER4_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER4_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_RBUE_Wr_Mask) | ((data & DMA_IER4_RBUE_Mask)<<7));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_RBUE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 7) & DMA_IER4_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER4_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER4_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_RSE_Wr_Mask) | ((data & DMA_IER4_RSE_Mask)<<8));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_RSE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 8) & DMA_IER4_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER4_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER4_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_RWTE_Wr_Mask) | ((data & DMA_IER4_RWTE_Mask)<<9));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_RWTE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 9) & DMA_IER4_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER4_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER4_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_ETIE_Wr_Mask) | ((data & DMA_IER4_ETIE_Mask)<<10));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_ETIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 10) & DMA_IER4_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER4_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER4_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_ERIE_Wr_Mask) | ((data & DMA_IER4_ERIE_Mask)<<11));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_ERIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 11) & DMA_IER4_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER4_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER4_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_FBEE_Wr_Mask) | ((data & DMA_IER4_FBEE_Mask)<<12));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_FBEE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 12) & DMA_IER4_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER4_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER4_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_CDEE_Wr_Mask) | ((data & DMA_IER4_CDEE_Mask)<<13));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_CDEE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 13) & DMA_IER4_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER4_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER4_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_AIE_Wr_Mask) | ((data & DMA_IER4_AIE_Mask)<<15));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_AIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 15) & DMA_IER4_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER4_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER4_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER4_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER4_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER4_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER4_RgRd(v);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_3))|((( 0) & (DMA_IER4_Mask_3))<<3);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_14))|((( 0) & (DMA_IER4_Mask_14))<<14);\
+		v = (v & (DMA_IER4_RES_Wr_Mask_17))|((( 0) & (DMA_IER4_Mask_17))<<17);\
+		v = ((v & DMA_IER4_NIE_Wr_Mask) | ((data & DMA_IER4_NIE_Mask)<<16));\
+		DMA_IER4_RgWr(v);\
+} while(0)
+
+#define DMA_IER4_NIE_UdfRd(data) do {\
+		DMA_IER4_RgRd(data);\
+		data = ((data >> 16) & DMA_IER4_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12b4))
+
+#define DMA_IER3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER3_RgOffAddr);\
+} while(0)
+
+#define DMA_IER3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER3_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER3_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER3_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER3_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER3_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER3_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER3_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER3_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER3_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER3_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER3_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER3_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER3_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER3_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER3_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_TIE_Wr_Mask) | ((data & DMA_IER3_TIE_Mask)<<0));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_TIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 0) & DMA_IER3_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER3_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER3_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_TXSE_Wr_Mask) | ((data & DMA_IER3_TXSE_Mask)<<1));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_TXSE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 1) & DMA_IER3_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER3_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER3_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_TBUE_Wr_Mask) | ((data & DMA_IER3_TBUE_Mask)<<2));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_TBUE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 2) & DMA_IER3_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER3_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER3_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_RIE_Wr_Mask) | ((data & DMA_IER3_RIE_Mask)<<6));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_RIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 6) & DMA_IER3_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER3_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER3_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_RBUE_Wr_Mask) | ((data & DMA_IER3_RBUE_Mask)<<7));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_RBUE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 7) & DMA_IER3_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER3_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER3_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_RSE_Wr_Mask) | ((data & DMA_IER3_RSE_Mask)<<8));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_RSE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 8) & DMA_IER3_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER3_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER3_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_RWTE_Wr_Mask) | ((data & DMA_IER3_RWTE_Mask)<<9));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_RWTE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 9) & DMA_IER3_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER3_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER3_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_ETIE_Wr_Mask) | ((data & DMA_IER3_ETIE_Mask)<<10));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_ETIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 10) & DMA_IER3_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER3_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER3_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_ERIE_Wr_Mask) | ((data & DMA_IER3_ERIE_Mask)<<11));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_ERIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 11) & DMA_IER3_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER3_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER3_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_FBEE_Wr_Mask) | ((data & DMA_IER3_FBEE_Mask)<<12));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_FBEE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 12) & DMA_IER3_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER3_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER3_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_CDEE_Wr_Mask) | ((data & DMA_IER3_CDEE_Mask)<<13));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_CDEE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 13) & DMA_IER3_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER3_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER3_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_AIE_Wr_Mask) | ((data & DMA_IER3_AIE_Mask)<<15));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_AIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 15) & DMA_IER3_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER3_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER3_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER3_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER3_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER3_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER3_RgRd(v);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_3))|((( 0) & (DMA_IER3_Mask_3))<<3);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_14))|((( 0) & (DMA_IER3_Mask_14))<<14);\
+		v = (v & (DMA_IER3_RES_Wr_Mask_17))|((( 0) & (DMA_IER3_Mask_17))<<17);\
+		v = ((v & DMA_IER3_NIE_Wr_Mask) | ((data & DMA_IER3_NIE_Mask)<<16));\
+		DMA_IER3_RgWr(v);\
+} while(0)
+
+#define DMA_IER3_NIE_UdfRd(data) do {\
+		DMA_IER3_RgRd(data);\
+		data = ((data >> 16) & DMA_IER3_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1234))
+
+#define DMA_IER2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER2_RgOffAddr);\
+} while(0)
+
+#define DMA_IER2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER2_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER2_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER2_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER2_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER2_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER2_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER2_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER2_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER2_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER2_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER2_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER2_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER2_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER2_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER2_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_TIE_Wr_Mask) | ((data & DMA_IER2_TIE_Mask)<<0));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_TIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 0) & DMA_IER2_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER2_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER2_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_TXSE_Wr_Mask) | ((data & DMA_IER2_TXSE_Mask)<<1));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_TXSE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 1) & DMA_IER2_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER2_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER2_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_TBUE_Wr_Mask) | ((data & DMA_IER2_TBUE_Mask)<<2));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_TBUE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 2) & DMA_IER2_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER2_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER2_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_RIE_Wr_Mask) | ((data & DMA_IER2_RIE_Mask)<<6));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_RIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 6) & DMA_IER2_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER2_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER2_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_RBUE_Wr_Mask) | ((data & DMA_IER2_RBUE_Mask)<<7));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_RBUE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 7) & DMA_IER2_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER2_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER2_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_RSE_Wr_Mask) | ((data & DMA_IER2_RSE_Mask)<<8));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_RSE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 8) & DMA_IER2_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER2_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER2_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_RWTE_Wr_Mask) | ((data & DMA_IER2_RWTE_Mask)<<9));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_RWTE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 9) & DMA_IER2_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER2_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER2_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_ETIE_Wr_Mask) | ((data & DMA_IER2_ETIE_Mask)<<10));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_ETIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 10) & DMA_IER2_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER2_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER2_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_ERIE_Wr_Mask) | ((data & DMA_IER2_ERIE_Mask)<<11));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_ERIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 11) & DMA_IER2_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER2_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER2_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_FBEE_Wr_Mask) | ((data & DMA_IER2_FBEE_Mask)<<12));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_FBEE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 12) & DMA_IER2_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER2_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER2_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_CDEE_Wr_Mask) | ((data & DMA_IER2_CDEE_Mask)<<13));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_CDEE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 13) & DMA_IER2_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER2_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER2_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_AIE_Wr_Mask) | ((data & DMA_IER2_AIE_Mask)<<15));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_AIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 15) & DMA_IER2_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER2_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER2_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER2_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER2_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER2_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER2_RgRd(v);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_3))|((( 0) & (DMA_IER2_Mask_3))<<3);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_14))|((( 0) & (DMA_IER2_Mask_14))<<14);\
+		v = (v & (DMA_IER2_RES_Wr_Mask_17))|((( 0) & (DMA_IER2_Mask_17))<<17);\
+		v = ((v & DMA_IER2_NIE_Wr_Mask) | ((data & DMA_IER2_NIE_Mask)<<16));\
+		DMA_IER2_RgWr(v);\
+} while(0)
+
+#define DMA_IER2_NIE_UdfRd(data) do {\
+		DMA_IER2_RgRd(data);\
+		data = ((data >> 16) & DMA_IER2_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11b4))
+
+#define DMA_IER1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER1_RgOffAddr);\
+} while(0)
+
+#define DMA_IER1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER1_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER1_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER1_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER1_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER1_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER1_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER1_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER1_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER1_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER1_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER1_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER1_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER1_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER1_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER1_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_TIE_Wr_Mask) | ((data & DMA_IER1_TIE_Mask)<<0));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_TIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 0) & DMA_IER1_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER1_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER1_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_TXSE_Wr_Mask) | ((data & DMA_IER1_TXSE_Mask)<<1));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_TXSE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 1) & DMA_IER1_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER1_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER1_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_TBUE_Wr_Mask) | ((data & DMA_IER1_TBUE_Mask)<<2));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_TBUE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 2) & DMA_IER1_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER1_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER1_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_RIE_Wr_Mask) | ((data & DMA_IER1_RIE_Mask)<<6));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_RIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 6) & DMA_IER1_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER1_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER1_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_RBUE_Wr_Mask) | ((data & DMA_IER1_RBUE_Mask)<<7));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_RBUE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 7) & DMA_IER1_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER1_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER1_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_RSE_Wr_Mask) | ((data & DMA_IER1_RSE_Mask)<<8));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_RSE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 8) & DMA_IER1_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER1_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER1_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_RWTE_Wr_Mask) | ((data & DMA_IER1_RWTE_Mask)<<9));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_RWTE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 9) & DMA_IER1_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER1_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER1_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_ETIE_Wr_Mask) | ((data & DMA_IER1_ETIE_Mask)<<10));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_ETIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 10) & DMA_IER1_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER1_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER1_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_ERIE_Wr_Mask) | ((data & DMA_IER1_ERIE_Mask)<<11));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_ERIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 11) & DMA_IER1_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER1_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER1_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_FBEE_Wr_Mask) | ((data & DMA_IER1_FBEE_Mask)<<12));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_FBEE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 12) & DMA_IER1_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER1_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER1_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_CDEE_Wr_Mask) | ((data & DMA_IER1_CDEE_Mask)<<13));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_CDEE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 13) & DMA_IER1_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER1_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER1_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_AIE_Wr_Mask) | ((data & DMA_IER1_AIE_Mask)<<15));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_AIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 15) & DMA_IER1_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER1_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER1_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER1_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER1_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER1_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER1_RgRd(v);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_3))|((( 0) & (DMA_IER1_Mask_3))<<3);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_14))|((( 0) & (DMA_IER1_Mask_14))<<14);\
+		v = (v & (DMA_IER1_RES_Wr_Mask_17))|((( 0) & (DMA_IER1_Mask_17))<<17);\
+		v = ((v & DMA_IER1_NIE_Wr_Mask) | ((data & DMA_IER1_NIE_Mask)<<16));\
+		DMA_IER1_RgWr(v);\
+} while(0)
+
+#define DMA_IER1_NIE_UdfRd(data) do {\
+		DMA_IER1_RgRd(data);\
+		data = ((data >> 16) & DMA_IER1_NIE_Mask);\
+} while(0)
+
+
+#define DMA_IER0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1134))
+
+#define DMA_IER0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_IER0_RgOffAddr);\
+} while(0)
+
+#define DMA_IER0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_IER0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_IER0_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER0_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER0_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER0_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_IER0_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER0_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER0_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER0_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER0_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER0_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER0_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER0_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define DMA_IER0_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER0_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER0_TIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_TIE_Wr_Mask) | ((data & DMA_IER0_TIE_Mask)<<0));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_TIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 0) & DMA_IER0_TIE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER0_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER0_TXSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_TXSE_Wr_Mask) | ((data & DMA_IER0_TXSE_Mask)<<1));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_TXSE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 1) & DMA_IER0_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER0_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER0_TBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_TBUE_Wr_Mask) | ((data & DMA_IER0_TBUE_Mask)<<2));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_TBUE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 2) & DMA_IER0_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER0_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER0_RIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_RIE_Wr_Mask) | ((data & DMA_IER0_RIE_Mask)<<6));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_RIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 6) & DMA_IER0_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER0_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER0_RBUE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_RBUE_Wr_Mask) | ((data & DMA_IER0_RBUE_Mask)<<7));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_RBUE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 7) & DMA_IER0_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER0_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER0_RSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_RSE_Wr_Mask) | ((data & DMA_IER0_RSE_Mask)<<8));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_RSE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 8) & DMA_IER0_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER0_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER0_RWTE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_RWTE_Wr_Mask) | ((data & DMA_IER0_RWTE_Mask)<<9));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_RWTE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 9) & DMA_IER0_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER0_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER0_ETIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_ETIE_Wr_Mask) | ((data & DMA_IER0_ETIE_Mask)<<10));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_ETIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 10) & DMA_IER0_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER0_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER0_ERIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_ERIE_Wr_Mask) | ((data & DMA_IER0_ERIE_Mask)<<11));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_ERIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 11) & DMA_IER0_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER0_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER0_FBEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_FBEE_Wr_Mask) | ((data & DMA_IER0_FBEE_Mask)<<12));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_FBEE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 12) & DMA_IER0_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER0_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER0_CDEE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_CDEE_Wr_Mask) | ((data & DMA_IER0_CDEE_Mask)<<13));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_CDEE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 13) & DMA_IER0_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER0_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER0_AIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_AIE_Wr_Mask) | ((data & DMA_IER0_AIE_Mask)<<15));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_AIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 15) & DMA_IER0_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER0_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER0_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER0_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER0_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER0_NIE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_IER0_RgRd(v);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_3))|((( 0) & (DMA_IER0_Mask_3))<<3);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_14))|((( 0) & (DMA_IER0_Mask_14))<<14);\
+		v = (v & (DMA_IER0_RES_Wr_Mask_17))|((( 0) & (DMA_IER0_Mask_17))<<17);\
+		v = ((v & DMA_IER0_NIE_Wr_Mask) | ((data & DMA_IER0_NIE_Mask)<<16));\
+		DMA_IER0_RgWr(v);\
+} while(0)
+
+#define DMA_IER0_NIE_UdfRd(data) do {\
+		DMA_IER0_RgRd(data);\
+		data = ((data >> 16) & DMA_IER0_NIE_Mask);\
+} while(0)
+
+
+#define MAC_IMR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb4))
+
+#define MAC_IMR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_IMR_RgOffAddr);\
+} while(0)
+
+#define MAC_IMR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_IMR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_IMR_Mask_13 (ULONG)(~(~0<<(19)))*/
+
+#define  MAC_IMR_Mask_13 (ULONG)(0x7ffff)
+
+/*#define MAC_IMR_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(19)))<<(13)))*/
+
+#define MAC_IMR_RES_Wr_Mask_13 (ULONG)(0x1fff)
+
+/*#define  MAC_IMR_Mask_6 (ULONG)(~(~0<<(6)))*/
+
+#define  MAC_IMR_Mask_6 (ULONG)(0x3f)
+
+/*#define MAC_IMR_RES_Wr_Mask_6 (ULONG)(~((~(~0<<(6)))<<(6)))*/
+
+#define MAC_IMR_RES_Wr_Mask_6 (ULONG)(0xfffff03f)
+
+/*#define MAC_IMR_TSIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_TSIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_TSIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MAC_IMR_TSIM_Wr_Mask (ULONG)(0xffffefff)
+
+#define MAC_IMR_TSIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_TSIM_Wr_Mask) | ((data & MAC_IMR_TSIM_Mask)<<12));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_TSIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 12) & MAC_IMR_TSIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_LPIIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_LPIIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_LPIIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_IMR_LPIIM_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_IMR_LPIIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_LPIIM_Wr_Mask) | ((data & MAC_IMR_LPIIM_Mask)<<5));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_LPIIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 5) & MAC_IMR_LPIIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_PMTIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_PMTIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_PMTIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_IMR_PMTIM_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_IMR_PMTIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_PMTIM_Wr_Mask) | ((data & MAC_IMR_PMTIM_Mask)<<4));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_PMTIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 4) & MAC_IMR_PMTIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_PHYIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_PHYIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_PHYIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_IMR_PHYIM_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_IMR_PHYIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_PHYIM_Wr_Mask) | ((data & MAC_IMR_PHYIM_Mask)<<3));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_PHYIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 3) & MAC_IMR_PHYIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_PCSANCIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_PCSANCIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_PCSANCIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_IMR_PCSANCIM_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_IMR_PCSANCIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_PCSANCIM_Wr_Mask) | ((data & MAC_IMR_PCSANCIM_Mask)<<2));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_PCSANCIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 2) & MAC_IMR_PCSANCIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_PCSLCHGIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_PCSLCHGIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_PCSLCHGIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_IMR_PCSLCHGIM_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_IMR_PCSLCHGIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_PCSLCHGIM_Wr_Mask) | ((data & MAC_IMR_PCSLCHGIM_Mask)<<1));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_PCSLCHGIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 1) & MAC_IMR_PCSLCHGIM_Mask);\
+} while(0)
+
+/*#define MAC_IMR_RGSMIIIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IMR_RGSMIIIM_Mask (ULONG)(0x1)
+
+/*#define MAC_IMR_RGSMIIIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_IMR_RGSMIIIM_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_IMR_RGSMIIIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IMR_RgRd(v);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_13))|((( 0) & (MAC_IMR_Mask_13))<<13);\
+		v = (v & (MAC_IMR_RES_Wr_Mask_6))|((( 0) & (MAC_IMR_Mask_6))<<6);\
+		v = ((v & MAC_IMR_RGSMIIIM_Wr_Mask) | ((data & MAC_IMR_RGSMIIIM_Mask)<<0));\
+		MAC_IMR_RgWr(v);\
+} while(0)
+
+#define MAC_IMR_RGSMIIIM_UdfRd(data) do {\
+		MAC_IMR_RgRd(data);\
+		data = ((data >> 0) & MAC_IMR_RGSMIIIM_Mask);\
+} while(0)
+
+
+#define MAC_ISR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xb0))
+
+#define MAC_ISR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_ISR_RgOffAddr);\
+} while(0)
+
+/*#define MAC_ISR_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_RWT_Mask (ULONG)(0x1)
+
+#define MAC_ISR_RWT_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 14) & MAC_ISR_RWT_Mask);\
+} while(0)
+
+/*#define MAC_ISR_TJT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_TJT_Mask (ULONG)(0x1)
+
+#define MAC_ISR_TJT_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 13) & MAC_ISR_TJT_Mask);\
+} while(0)
+
+/*#define MAC_ISR_TSIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_TSIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_TSIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 12) & MAC_ISR_TSIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_MMCRXIPIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_MMCRXIPIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_MMCRXIPIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 11) & MAC_ISR_MMCRXIPIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_MMCTXIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_MMCTXIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_MMCTXIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 10) & MAC_ISR_MMCTXIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_MMCRXIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_MMCRXIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_MMCRXIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 9) & MAC_ISR_MMCRXIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_MMCIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_MMCIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_MMCIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 8) & MAC_ISR_MMCIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_LPIIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_LPIIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_LPIIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 5) & MAC_ISR_LPIIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_PMTIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_PMTIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_PMTIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 4) & MAC_ISR_PMTIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_PHYIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_PHYIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_PHYIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 3) & MAC_ISR_PHYIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_PCSANCIA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_PCSANCIA_Mask (ULONG)(0x1)
+
+#define MAC_ISR_PCSANCIA_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 2) & MAC_ISR_PCSANCIA_Mask);\
+} while(0)
+
+/*#define MAC_ISR_PCSLCHGIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_PCSLCHGIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_PCSLCHGIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 1) & MAC_ISR_PCSLCHGIS_Mask);\
+} while(0)
+
+/*#define MAC_ISR_RGSMIIIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_ISR_RGSMIIIS_Mask (ULONG)(0x1)
+
+#define MAC_ISR_RGSMIIIS_UdfRd(data) do {\
+		MAC_ISR_RgRd(data);\
+		data = ((data >> 0) & MAC_ISR_RGSMIIIS_Mask);\
+} while(0)
+
+
+#define MTL_ISR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc20))
+
+#define MTL_ISR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_ISR_RgOffAddr);\
+} while(0)
+
+/*#define MTL_ISR_MACIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_MACIS_Mask (ULONG)(0x1)
+
+#define MTL_ISR_MACIS_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 16) & MTL_ISR_MACIS_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q7RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q7RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q7RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 15) & MTL_ISR_Q7RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q7TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q7TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q7TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 14) & MTL_ISR_Q7TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q6RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q6RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q6RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 13) & MTL_ISR_Q6RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q6TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q6TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q6TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 12) & MTL_ISR_Q6TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q5RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q5RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q5RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 11) & MTL_ISR_Q5RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q5TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q5TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q5TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 10) & MTL_ISR_Q5TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q4RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q4RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q4RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 9) & MTL_ISR_Q4RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q4TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q4TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q4TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 8) & MTL_ISR_Q4TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q3RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q3RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q3RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 7) & MTL_ISR_Q3RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q3TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q3TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q3TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 6) & MTL_ISR_Q3TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q2RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q2RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q2RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 5) & MTL_ISR_Q2RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q2TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q2TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q2TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 4) & MTL_ISR_Q2TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q1RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q1RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q1RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 3) & MTL_ISR_Q1RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q1TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q1TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q1TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 2) & MTL_ISR_Q1TXU_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q0RXO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q0RXO_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q0RXO_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 1) & MTL_ISR_Q0RXO_Mask);\
+} while(0)
+
+/*#define MTL_ISR_Q0TXU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_ISR_Q0TXU_Mask (ULONG)(0x1)
+
+#define MTL_ISR_Q0TXU_UdfRd(data) do {\
+		MTL_ISR_RgRd(data);\
+		data = ((data >> 0) & MTL_ISR_Q0TXU_Mask);\
+} while(0)
+
+
+#define DMA_SR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14e0))
+
+#define DMA_SR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR7_RgOffAddr);\
+} while(0)
+
+#define DMA_SR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR7_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR7_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR7_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR7_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR7_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR7_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR7_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR7_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR7_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR7_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR7_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_TI_Wr_Mask) | ((data & DMA_SR7_TI_Mask)<<0));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_TI_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 0) & DMA_SR7_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR7_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR7_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR7_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_TPS_Wr_Mask) | ((data & DMA_SR7_TPS_Mask)<<1));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_TPS_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 1) & DMA_SR7_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR7_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR7_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR7_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_TBU_Wr_Mask) | ((data & DMA_SR7_TBU_Mask)<<2));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_TBU_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 2) & DMA_SR7_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR7_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR7_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR7_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_RI_Wr_Mask) | ((data & DMA_SR7_RI_Mask)<<6));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_RI_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 6) & DMA_SR7_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR7_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR7_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR7_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_RBU_Wr_Mask) | ((data & DMA_SR7_RBU_Mask)<<7));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_RBU_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 7) & DMA_SR7_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR7_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR7_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR7_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_RPS_Wr_Mask) | ((data & DMA_SR7_RPS_Mask)<<8));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_RPS_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 8) & DMA_SR7_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR7_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR7_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR7_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_RWT_Wr_Mask) | ((data & DMA_SR7_RWT_Mask)<<9));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_RWT_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 9) & DMA_SR7_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR7_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR7_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR7_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_ETI_Wr_Mask) | ((data & DMA_SR7_ETI_Mask)<<10));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_ETI_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 10) & DMA_SR7_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR7_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR7_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR7_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_ERI_Wr_Mask) | ((data & DMA_SR7_ERI_Mask)<<11));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_ERI_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 11) & DMA_SR7_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR7_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR7_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR7_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_FBE_Wr_Mask) | ((data & DMA_SR7_FBE_Mask)<<12));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_FBE_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 12) & DMA_SR7_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR7_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR7_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR7_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_CDE_Wr_Mask) | ((data & DMA_SR7_CDE_Mask)<<13));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_CDE_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 13) & DMA_SR7_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR7_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR7_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR7_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_AIS_Wr_Mask) | ((data & DMA_SR7_AIS_Mask)<<14));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_AIS_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 14) & DMA_SR7_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR7_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR7_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR7_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR7_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR7_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR7_RgRd(v);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_3))|((( 0) & (DMA_SR7_Mask_3))<<3);\
+		v = (v & (DMA_SR7_RES_Wr_Mask_19))|((( 0) & (DMA_SR7_Mask_19))<<19);\
+		v = ((v & DMA_SR7_NIS_Wr_Mask) | ((data & DMA_SR7_NIS_Mask)<<15));\
+		DMA_SR7_RgWr(v);\
+} while(0)
+
+#define DMA_SR7_NIS_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 15) & DMA_SR7_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR7_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR7_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR7_EB_UdfRd(data) do {\
+		DMA_SR7_RgRd(data);\
+		data = ((data >> 16) & DMA_SR7_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1460))
+
+#define DMA_SR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR6_RgOffAddr);\
+} while(0)
+
+#define DMA_SR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR6_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR6_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR6_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR6_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR6_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR6_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR6_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR6_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR6_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR6_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR6_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_TI_Wr_Mask) | ((data & DMA_SR6_TI_Mask)<<0));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_TI_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 0) & DMA_SR6_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR6_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR6_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR6_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_TPS_Wr_Mask) | ((data & DMA_SR6_TPS_Mask)<<1));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_TPS_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 1) & DMA_SR6_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR6_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR6_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR6_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_TBU_Wr_Mask) | ((data & DMA_SR6_TBU_Mask)<<2));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_TBU_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 2) & DMA_SR6_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR6_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR6_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR6_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_RI_Wr_Mask) | ((data & DMA_SR6_RI_Mask)<<6));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_RI_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 6) & DMA_SR6_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR6_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR6_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR6_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_RBU_Wr_Mask) | ((data & DMA_SR6_RBU_Mask)<<7));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_RBU_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 7) & DMA_SR6_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR6_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR6_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR6_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_RPS_Wr_Mask) | ((data & DMA_SR6_RPS_Mask)<<8));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_RPS_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 8) & DMA_SR6_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR6_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR6_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR6_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_RWT_Wr_Mask) | ((data & DMA_SR6_RWT_Mask)<<9));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_RWT_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 9) & DMA_SR6_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR6_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR6_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR6_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_ETI_Wr_Mask) | ((data & DMA_SR6_ETI_Mask)<<10));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_ETI_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 10) & DMA_SR6_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR6_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR6_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR6_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_ERI_Wr_Mask) | ((data & DMA_SR6_ERI_Mask)<<11));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_ERI_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 11) & DMA_SR6_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR6_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR6_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR6_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_FBE_Wr_Mask) | ((data & DMA_SR6_FBE_Mask)<<12));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_FBE_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 12) & DMA_SR6_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR6_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR6_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR6_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_CDE_Wr_Mask) | ((data & DMA_SR6_CDE_Mask)<<13));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_CDE_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 13) & DMA_SR6_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR6_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR6_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR6_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_AIS_Wr_Mask) | ((data & DMA_SR6_AIS_Mask)<<14));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_AIS_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 14) & DMA_SR6_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR6_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR6_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR6_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR6_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR6_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR6_RgRd(v);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_3))|((( 0) & (DMA_SR6_Mask_3))<<3);\
+		v = (v & (DMA_SR6_RES_Wr_Mask_19))|((( 0) & (DMA_SR6_Mask_19))<<19);\
+		v = ((v & DMA_SR6_NIS_Wr_Mask) | ((data & DMA_SR6_NIS_Mask)<<15));\
+		DMA_SR6_RgWr(v);\
+} while(0)
+
+#define DMA_SR6_NIS_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 15) & DMA_SR6_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR6_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR6_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR6_EB_UdfRd(data) do {\
+		DMA_SR6_RgRd(data);\
+		data = ((data >> 16) & DMA_SR6_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13e0))
+
+#define DMA_SR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR5_RgOffAddr);\
+} while(0)
+
+#define DMA_SR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR5_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR5_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR5_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR5_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR5_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR5_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR5_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR5_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR5_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR5_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR5_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_TI_Wr_Mask) | ((data & DMA_SR5_TI_Mask)<<0));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_TI_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 0) & DMA_SR5_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR5_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR5_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR5_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_TPS_Wr_Mask) | ((data & DMA_SR5_TPS_Mask)<<1));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_TPS_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 1) & DMA_SR5_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR5_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR5_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR5_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_TBU_Wr_Mask) | ((data & DMA_SR5_TBU_Mask)<<2));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_TBU_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 2) & DMA_SR5_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR5_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR5_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR5_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_RI_Wr_Mask) | ((data & DMA_SR5_RI_Mask)<<6));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_RI_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 6) & DMA_SR5_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR5_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR5_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR5_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_RBU_Wr_Mask) | ((data & DMA_SR5_RBU_Mask)<<7));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_RBU_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 7) & DMA_SR5_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR5_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR5_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR5_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_RPS_Wr_Mask) | ((data & DMA_SR5_RPS_Mask)<<8));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_RPS_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 8) & DMA_SR5_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR5_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR5_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR5_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_RWT_Wr_Mask) | ((data & DMA_SR5_RWT_Mask)<<9));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_RWT_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 9) & DMA_SR5_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR5_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR5_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR5_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_ETI_Wr_Mask) | ((data & DMA_SR5_ETI_Mask)<<10));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_ETI_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 10) & DMA_SR5_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR5_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR5_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR5_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_ERI_Wr_Mask) | ((data & DMA_SR5_ERI_Mask)<<11));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_ERI_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 11) & DMA_SR5_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR5_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR5_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR5_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_FBE_Wr_Mask) | ((data & DMA_SR5_FBE_Mask)<<12));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_FBE_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 12) & DMA_SR5_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR5_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR5_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR5_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_CDE_Wr_Mask) | ((data & DMA_SR5_CDE_Mask)<<13));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_CDE_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 13) & DMA_SR5_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR5_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR5_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR5_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_AIS_Wr_Mask) | ((data & DMA_SR5_AIS_Mask)<<14));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_AIS_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 14) & DMA_SR5_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR5_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR5_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR5_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR5_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR5_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR5_RgRd(v);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_3))|((( 0) & (DMA_SR5_Mask_3))<<3);\
+		v = (v & (DMA_SR5_RES_Wr_Mask_19))|((( 0) & (DMA_SR5_Mask_19))<<19);\
+		v = ((v & DMA_SR5_NIS_Wr_Mask) | ((data & DMA_SR5_NIS_Mask)<<15));\
+		DMA_SR5_RgWr(v);\
+} while(0)
+
+#define DMA_SR5_NIS_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 15) & DMA_SR5_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR5_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR5_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR5_EB_UdfRd(data) do {\
+		DMA_SR5_RgRd(data);\
+		data = ((data >> 16) & DMA_SR5_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1360))
+
+#define DMA_SR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR4_RgOffAddr);\
+} while(0)
+
+#define DMA_SR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR4_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR4_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR4_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR4_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR4_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR4_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR4_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR4_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR4_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR4_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR4_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_TI_Wr_Mask) | ((data & DMA_SR4_TI_Mask)<<0));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_TI_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 0) & DMA_SR4_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR4_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR4_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR4_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_TPS_Wr_Mask) | ((data & DMA_SR4_TPS_Mask)<<1));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_TPS_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 1) & DMA_SR4_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR4_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR4_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR4_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_TBU_Wr_Mask) | ((data & DMA_SR4_TBU_Mask)<<2));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_TBU_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 2) & DMA_SR4_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR4_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR4_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR4_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_RI_Wr_Mask) | ((data & DMA_SR4_RI_Mask)<<6));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_RI_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 6) & DMA_SR4_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR4_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR4_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR4_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_RBU_Wr_Mask) | ((data & DMA_SR4_RBU_Mask)<<7));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_RBU_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 7) & DMA_SR4_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR4_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR4_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR4_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_RPS_Wr_Mask) | ((data & DMA_SR4_RPS_Mask)<<8));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_RPS_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 8) & DMA_SR4_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR4_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR4_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR4_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_RWT_Wr_Mask) | ((data & DMA_SR4_RWT_Mask)<<9));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_RWT_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 9) & DMA_SR4_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR4_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR4_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR4_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_ETI_Wr_Mask) | ((data & DMA_SR4_ETI_Mask)<<10));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_ETI_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 10) & DMA_SR4_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR4_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR4_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR4_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_ERI_Wr_Mask) | ((data & DMA_SR4_ERI_Mask)<<11));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_ERI_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 11) & DMA_SR4_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR4_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR4_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR4_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_FBE_Wr_Mask) | ((data & DMA_SR4_FBE_Mask)<<12));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_FBE_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 12) & DMA_SR4_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR4_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR4_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR4_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_CDE_Wr_Mask) | ((data & DMA_SR4_CDE_Mask)<<13));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_CDE_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 13) & DMA_SR4_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR4_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR4_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR4_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_AIS_Wr_Mask) | ((data & DMA_SR4_AIS_Mask)<<14));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_AIS_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 14) & DMA_SR4_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR4_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR4_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR4_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR4_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR4_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR4_RgRd(v);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_3))|((( 0) & (DMA_SR4_Mask_3))<<3);\
+		v = (v & (DMA_SR4_RES_Wr_Mask_19))|((( 0) & (DMA_SR4_Mask_19))<<19);\
+		v = ((v & DMA_SR4_NIS_Wr_Mask) | ((data & DMA_SR4_NIS_Mask)<<15));\
+		DMA_SR4_RgWr(v);\
+} while(0)
+
+#define DMA_SR4_NIS_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 15) & DMA_SR4_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR4_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR4_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR4_EB_UdfRd(data) do {\
+		DMA_SR4_RgRd(data);\
+		data = ((data >> 16) & DMA_SR4_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12e0))
+
+#define DMA_SR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR3_RgOffAddr);\
+} while(0)
+
+#define DMA_SR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR3_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR3_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR3_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR3_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR3_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR3_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR3_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR3_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR3_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR3_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR3_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_TI_Wr_Mask) | ((data & DMA_SR3_TI_Mask)<<0));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_TI_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 0) & DMA_SR3_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR3_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR3_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR3_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_TPS_Wr_Mask) | ((data & DMA_SR3_TPS_Mask)<<1));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_TPS_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 1) & DMA_SR3_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR3_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR3_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR3_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_TBU_Wr_Mask) | ((data & DMA_SR3_TBU_Mask)<<2));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_TBU_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 2) & DMA_SR3_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR3_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR3_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR3_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_RI_Wr_Mask) | ((data & DMA_SR3_RI_Mask)<<6));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_RI_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 6) & DMA_SR3_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR3_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR3_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR3_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_RBU_Wr_Mask) | ((data & DMA_SR3_RBU_Mask)<<7));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_RBU_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 7) & DMA_SR3_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR3_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR3_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR3_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_RPS_Wr_Mask) | ((data & DMA_SR3_RPS_Mask)<<8));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_RPS_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 8) & DMA_SR3_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR3_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR3_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR3_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_RWT_Wr_Mask) | ((data & DMA_SR3_RWT_Mask)<<9));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_RWT_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 9) & DMA_SR3_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR3_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR3_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR3_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_ETI_Wr_Mask) | ((data & DMA_SR3_ETI_Mask)<<10));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_ETI_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 10) & DMA_SR3_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR3_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR3_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR3_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_ERI_Wr_Mask) | ((data & DMA_SR3_ERI_Mask)<<11));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_ERI_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 11) & DMA_SR3_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR3_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR3_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR3_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_FBE_Wr_Mask) | ((data & DMA_SR3_FBE_Mask)<<12));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_FBE_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 12) & DMA_SR3_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR3_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR3_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR3_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_CDE_Wr_Mask) | ((data & DMA_SR3_CDE_Mask)<<13));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_CDE_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 13) & DMA_SR3_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR3_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR3_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR3_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_AIS_Wr_Mask) | ((data & DMA_SR3_AIS_Mask)<<14));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_AIS_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 14) & DMA_SR3_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR3_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR3_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR3_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR3_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR3_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR3_RgRd(v);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_3))|((( 0) & (DMA_SR3_Mask_3))<<3);\
+		v = (v & (DMA_SR3_RES_Wr_Mask_19))|((( 0) & (DMA_SR3_Mask_19))<<19);\
+		v = ((v & DMA_SR3_NIS_Wr_Mask) | ((data & DMA_SR3_NIS_Mask)<<15));\
+		DMA_SR3_RgWr(v);\
+} while(0)
+
+#define DMA_SR3_NIS_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 15) & DMA_SR3_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR3_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR3_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR3_EB_UdfRd(data) do {\
+		DMA_SR3_RgRd(data);\
+		data = ((data >> 16) & DMA_SR3_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1260))
+
+#define DMA_SR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR2_RgOffAddr);\
+} while(0)
+
+#define DMA_SR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR2_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR2_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR2_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR2_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR2_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR2_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR2_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR2_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR2_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR2_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR2_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_TI_Wr_Mask) | ((data & DMA_SR2_TI_Mask)<<0));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_TI_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 0) & DMA_SR2_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR2_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR2_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR2_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_TPS_Wr_Mask) | ((data & DMA_SR2_TPS_Mask)<<1));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_TPS_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 1) & DMA_SR2_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR2_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR2_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR2_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_TBU_Wr_Mask) | ((data & DMA_SR2_TBU_Mask)<<2));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_TBU_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 2) & DMA_SR2_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR2_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR2_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR2_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_RI_Wr_Mask) | ((data & DMA_SR2_RI_Mask)<<6));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_RI_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 6) & DMA_SR2_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR2_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR2_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR2_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_RBU_Wr_Mask) | ((data & DMA_SR2_RBU_Mask)<<7));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_RBU_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 7) & DMA_SR2_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR2_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR2_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR2_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_RPS_Wr_Mask) | ((data & DMA_SR2_RPS_Mask)<<8));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_RPS_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 8) & DMA_SR2_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR2_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR2_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR2_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_RWT_Wr_Mask) | ((data & DMA_SR2_RWT_Mask)<<9));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_RWT_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 9) & DMA_SR2_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR2_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR2_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR2_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_ETI_Wr_Mask) | ((data & DMA_SR2_ETI_Mask)<<10));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_ETI_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 10) & DMA_SR2_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR2_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR2_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR2_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_ERI_Wr_Mask) | ((data & DMA_SR2_ERI_Mask)<<11));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_ERI_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 11) & DMA_SR2_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR2_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR2_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR2_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_FBE_Wr_Mask) | ((data & DMA_SR2_FBE_Mask)<<12));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_FBE_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 12) & DMA_SR2_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR2_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR2_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR2_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_CDE_Wr_Mask) | ((data & DMA_SR2_CDE_Mask)<<13));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_CDE_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 13) & DMA_SR2_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR2_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR2_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR2_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_AIS_Wr_Mask) | ((data & DMA_SR2_AIS_Mask)<<14));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_AIS_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 14) & DMA_SR2_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR2_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR2_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR2_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR2_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR2_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR2_RgRd(v);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_3))|((( 0) & (DMA_SR2_Mask_3))<<3);\
+		v = (v & (DMA_SR2_RES_Wr_Mask_19))|((( 0) & (DMA_SR2_Mask_19))<<19);\
+		v = ((v & DMA_SR2_NIS_Wr_Mask) | ((data & DMA_SR2_NIS_Mask)<<15));\
+		DMA_SR2_RgWr(v);\
+} while(0)
+
+#define DMA_SR2_NIS_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 15) & DMA_SR2_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR2_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR2_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR2_EB_UdfRd(data) do {\
+		DMA_SR2_RgRd(data);\
+		data = ((data >> 16) & DMA_SR2_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11e0))
+
+#define DMA_SR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR1_RgOffAddr);\
+} while(0)
+
+#define DMA_SR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR1_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR1_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR1_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR1_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR1_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR1_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR1_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR1_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR1_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR1_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR1_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_TI_Wr_Mask) | ((data & DMA_SR1_TI_Mask)<<0));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_TI_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 0) & DMA_SR1_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR1_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR1_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR1_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_TPS_Wr_Mask) | ((data & DMA_SR1_TPS_Mask)<<1));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_TPS_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 1) & DMA_SR1_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR1_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR1_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR1_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_TBU_Wr_Mask) | ((data & DMA_SR1_TBU_Mask)<<2));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_TBU_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 2) & DMA_SR1_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR1_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR1_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR1_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_RI_Wr_Mask) | ((data & DMA_SR1_RI_Mask)<<6));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_RI_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 6) & DMA_SR1_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR1_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR1_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR1_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_RBU_Wr_Mask) | ((data & DMA_SR1_RBU_Mask)<<7));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_RBU_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 7) & DMA_SR1_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR1_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR1_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR1_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_RPS_Wr_Mask) | ((data & DMA_SR1_RPS_Mask)<<8));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_RPS_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 8) & DMA_SR1_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR1_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR1_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR1_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_RWT_Wr_Mask) | ((data & DMA_SR1_RWT_Mask)<<9));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_RWT_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 9) & DMA_SR1_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR1_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR1_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR1_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_ETI_Wr_Mask) | ((data & DMA_SR1_ETI_Mask)<<10));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_ETI_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 10) & DMA_SR1_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR1_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR1_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR1_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_ERI_Wr_Mask) | ((data & DMA_SR1_ERI_Mask)<<11));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_ERI_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 11) & DMA_SR1_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR1_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR1_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR1_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_FBE_Wr_Mask) | ((data & DMA_SR1_FBE_Mask)<<12));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_FBE_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 12) & DMA_SR1_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR1_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR1_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR1_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_CDE_Wr_Mask) | ((data & DMA_SR1_CDE_Mask)<<13));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_CDE_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 13) & DMA_SR1_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR1_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR1_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR1_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_AIS_Wr_Mask) | ((data & DMA_SR1_AIS_Mask)<<14));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_AIS_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 14) & DMA_SR1_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR1_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR1_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR1_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR1_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR1_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR1_RgRd(v);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_3))|((( 0) & (DMA_SR1_Mask_3))<<3);\
+		v = (v & (DMA_SR1_RES_Wr_Mask_19))|((( 0) & (DMA_SR1_Mask_19))<<19);\
+		v = ((v & DMA_SR1_NIS_Wr_Mask) | ((data & DMA_SR1_NIS_Mask)<<15));\
+		DMA_SR1_RgWr(v);\
+} while(0)
+
+#define DMA_SR1_NIS_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 15) & DMA_SR1_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR1_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR1_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR1_EB_UdfRd(data) do {\
+		DMA_SR1_RgRd(data);\
+		data = ((data >> 16) & DMA_SR1_EB_Mask);\
+} while(0)
+
+
+#define DMA_SR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1160))
+
+#define DMA_SR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SR0_RgOffAddr);\
+} while(0)
+
+#define DMA_SR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SR0_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR0_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR0_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR0_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define  DMA_SR0_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR0_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR0_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR0_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define DMA_SR0_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR0_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR0_TI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_TI_Wr_Mask) | ((data & DMA_SR0_TI_Mask)<<0));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_TI_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 0) & DMA_SR0_TI_Mask);\
+} while(0)
+
+/*#define DMA_SR0_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR0_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR0_TPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_TPS_Wr_Mask) | ((data & DMA_SR0_TPS_Mask)<<1));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_TPS_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 1) & DMA_SR0_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR0_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR0_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR0_TBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_TBU_Wr_Mask) | ((data & DMA_SR0_TBU_Mask)<<2));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_TBU_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 2) & DMA_SR0_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR0_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR0_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR0_RI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_RI_Wr_Mask) | ((data & DMA_SR0_RI_Mask)<<6));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_RI_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 6) & DMA_SR0_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR0_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR0_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR0_RBU_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_RBU_Wr_Mask) | ((data & DMA_SR0_RBU_Mask)<<7));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_RBU_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 7) & DMA_SR0_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR0_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR0_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR0_RPS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_RPS_Wr_Mask) | ((data & DMA_SR0_RPS_Mask)<<8));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_RPS_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 8) & DMA_SR0_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR0_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR0_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR0_RWT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_RWT_Wr_Mask) | ((data & DMA_SR0_RWT_Mask)<<9));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_RWT_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 9) & DMA_SR0_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR0_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR0_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR0_ETI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_ETI_Wr_Mask) | ((data & DMA_SR0_ETI_Mask)<<10));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_ETI_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 10) & DMA_SR0_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR0_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR0_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR0_ERI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_ERI_Wr_Mask) | ((data & DMA_SR0_ERI_Mask)<<11));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_ERI_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 11) & DMA_SR0_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR0_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR0_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR0_FBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_FBE_Wr_Mask) | ((data & DMA_SR0_FBE_Mask)<<12));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_FBE_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 12) & DMA_SR0_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR0_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR0_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR0_CDE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_CDE_Wr_Mask) | ((data & DMA_SR0_CDE_Mask)<<13));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_CDE_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 13) & DMA_SR0_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR0_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR0_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR0_AIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_AIS_Wr_Mask) | ((data & DMA_SR0_AIS_Mask)<<14));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_AIS_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 14) & DMA_SR0_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR0_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR0_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR0_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR0_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR0_NIS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SR0_RgRd(v);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_3))|((( 0) & (DMA_SR0_Mask_3))<<3);\
+		v = (v & (DMA_SR0_RES_Wr_Mask_19))|((( 0) & (DMA_SR0_Mask_19))<<19);\
+		v = ((v & DMA_SR0_NIS_Wr_Mask) | ((data & DMA_SR0_NIS_Mask)<<15));\
+		DMA_SR0_RgWr(v);\
+} while(0)
+
+#define DMA_SR0_NIS_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 15) & DMA_SR0_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR0_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR0_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR0_EB_UdfRd(data) do {\
+		DMA_SR0_RgRd(data);\
+		data = ((data >> 16) & DMA_SR0_EB_Mask);\
+} while(0)
+
+
+#define DMA_ISR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1008))
+
+#define DMA_ISR_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_ISR_RgOffAddr);\
+} while(0)
+
+/*#define DMA_ISR_MACIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_MACIS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_MACIS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 17) & DMA_ISR_MACIS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_MTLIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_MTLIS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_MTLIS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 16) & DMA_ISR_MTLIS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC7IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC7IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC7IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 7) & DMA_ISR_DC7IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC6IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC6IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC6IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 6) & DMA_ISR_DC6IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC5IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC5IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC5IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 5) & DMA_ISR_DC5IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC4IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC4IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC4IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 4) & DMA_ISR_DC4IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC3IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC3IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC3IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 3) & DMA_ISR_DC3IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC2IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC2IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC2IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 2) & DMA_ISR_DC2IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC1IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC1IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC1IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 1) & DMA_ISR_DC1IS_Mask);\
+} while(0)
+
+/*#define DMA_ISR_DC0IS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_ISR_DC0IS_Mask (ULONG)(0x1)
+
+#define DMA_ISR_DC0IS_UdfRd(data) do {\
+		DMA_ISR_RgRd(data);\
+		data = ((data >> 0) & DMA_ISR_DC0IS_Mask);\
+} while(0)
+
+
+#define DMA_DSR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1014))
+
+#define DMA_DSR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_DSR2_RgOffAddr);\
+} while(0)
+
+/*#define DMA_DSR2_TPS7_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR2_TPS7_Mask (ULONG)(0xf)
+
+#define DMA_DSR2_TPS7_UdfRd(data) do {\
+		DMA_DSR2_RgRd(data);\
+		data = ((data >> 4) & DMA_DSR2_TPS7_Mask);\
+} while(0)
+
+/*#define DMA_DSR2_RPS7_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR2_RPS7_Mask (ULONG)(0xf)
+
+#define DMA_DSR2_RPS7_UdfRd(data) do {\
+		DMA_DSR2_RgRd(data);\
+		data = ((data >> 0) & DMA_DSR2_RPS7_Mask);\
+} while(0)
+
+
+#define DMA_DSR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1010))
+
+#define DMA_DSR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_DSR1_RgOffAddr);\
+} while(0)
+
+/*#define DMA_DSR1_TPS6_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_TPS6_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_TPS6_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 28) & DMA_DSR1_TPS6_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_RPS6_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_RPS6_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_RPS6_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 24) & DMA_DSR1_RPS6_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_TPS5_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_TPS5_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_TPS5_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 20) & DMA_DSR1_TPS5_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_RPS5_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_RPS5_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_RPS5_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 16) & DMA_DSR1_RPS5_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_TPS4_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_TPS4_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_TPS4_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 12) & DMA_DSR1_TPS4_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_RPS4_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_RPS4_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_RPS4_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 8) & DMA_DSR1_RPS4_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_TPS3_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_TPS3_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_TPS3_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 4) & DMA_DSR1_TPS3_Mask);\
+} while(0)
+
+/*#define DMA_DSR1_RPS3_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR1_RPS3_Mask (ULONG)(0xf)
+
+#define DMA_DSR1_RPS3_UdfRd(data) do {\
+		DMA_DSR1_RgRd(data);\
+		data = ((data >> 0) & DMA_DSR1_RPS3_Mask);\
+} while(0)
+
+
+#define DMA_DSR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x100c))
+
+#define DMA_DSR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_DSR0_RgOffAddr);\
+} while(0)
+
+/*#define DMA_DSR0_TPS2_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_TPS2_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_TPS2_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 28) & DMA_DSR0_TPS2_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_RPS2_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_RPS2_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_RPS2_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 24) & DMA_DSR0_RPS2_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_TPS1_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_TPS1_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_TPS1_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 20) & DMA_DSR0_TPS1_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_RPS1_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_RPS1_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_RPS1_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 16) & DMA_DSR0_RPS1_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_TPS0_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_TPS0_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_TPS0_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 12) & DMA_DSR0_TPS0_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_RPS0_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_DSR0_RPS0_Mask (ULONG)(0xf)
+
+#define DMA_DSR0_RPS0_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 8) & DMA_DSR0_RPS0_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_AXRHSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_DSR0_AXRHSTS_Mask (ULONG)(0x1)
+
+#define DMA_DSR0_AXRHSTS_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 1) & DMA_DSR0_AXRHSTS_Mask);\
+} while(0)
+
+/*#define DMA_DSR0_AXWHSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_DSR0_AXWHSTS_Mask (ULONG)(0x1)
+
+#define DMA_DSR0_AXWHSTS_UdfRd(data) do {\
+		DMA_DSR0_RgRd(data);\
+		data = ((data >> 0) & DMA_DSR0_AXWHSTS_Mask);\
+} while(0)
+
+
+#define MTL_Q0RDR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd38))
+
+#define MTL_Q0RDR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0RDR_RgOffAddr);\
+} while(0)
+
+/*#define MTL_Q0RDR_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_Q0RDR_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_Q0RDR_PRXQ_UdfRd(data) do {\
+		MTL_Q0RDR_RgRd(data);\
+		data = ((data >> 16) & MTL_Q0RDR_PRXQ_Mask);\
+} while(0)
+
+/*#define MTL_Q0RDR_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_Q0RDR_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_Q0RDR_RXQSTS_UdfRd(data) do {\
+		MTL_Q0RDR_RgRd(data);\
+		data = ((data >> 4) & MTL_Q0RDR_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0RDR_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_Q0RDR_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_Q0RDR_RRCSTS_UdfRd(data) do {\
+		MTL_Q0RDR_RgRd(data);\
+		data = ((data >> 1) & MTL_Q0RDR_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0RDR_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0RDR_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_Q0RDR_RWCSTS_UdfRd(data) do {\
+		MTL_Q0RDR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0RDR_RWCSTS_Mask);\
+} while(0)
+
+
+#define MTL_Q0ESR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd14))
+
+#define MTL_Q0ESR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0ESR_RgOffAddr);\
+} while(0)
+
+/*#define MTL_Q0ESR_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ESR_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_Q0ESR_ABSU_UdfRd(data) do {\
+		MTL_Q0ESR_RgRd(data);\
+		data = ((data >> 24) & MTL_Q0ESR_ABSU_Mask);\
+} while(0)
+
+/*#define MTL_Q0ESR_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_Q0ESR_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_Q0ESR_ABS_UdfRd(data) do {\
+		MTL_Q0ESR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0ESR_ABS_Mask);\
+} while(0)
+
+
+#define MTL_Q0TDR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd08))
+
+#define MTL_Q0TDR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0TDR_RgOffAddr);\
+} while(0)
+
+/*#define MTL_Q0TDR_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0TDR_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_Q0TDR_STXSTSF_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 20) & MTL_Q0TDR_STXSTSF_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0TDR_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_Q0TDR_PTXQ_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 16) & MTL_Q0TDR_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TDR_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_Q0TDR_TXSTSFSTS_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 5) & MTL_Q0TDR_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TDR_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_Q0TDR_TXQSTS_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 4) & MTL_Q0TDR_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TDR_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_Q0TDR_TWCSTS_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 3) & MTL_Q0TDR_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_Q0TDR_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_Q0TDR_TRCSTS_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 1) & MTL_Q0TDR_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_Q0TDR_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TDR_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_Q0TDR_TXQPAUSED_UdfRd(data) do {\
+		MTL_Q0TDR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0TDR_TXQPAUSED_Mask);\
+} while(0)
+
+
+#define DMA_CHRBAR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14dc))
+
+#define DMA_CHRBAR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR7_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x145c))
+
+#define DMA_CHRBAR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR6_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13dc))
+
+#define DMA_CHRBAR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR5_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x135c))
+
+#define DMA_CHRBAR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR4_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12dc))
+
+#define DMA_CHRBAR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR3_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x125c))
+
+#define DMA_CHRBAR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR2_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11dc))
+
+#define DMA_CHRBAR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR1_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRBAR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x115c))
+
+#define DMA_CHRBAR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRBAR0_CURRBUFAPTR_UdfRd(data) do {\
+		DMA_CHRBAR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14d4))
+
+#define DMA_CHTBAR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR7_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR7_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1454))
+
+#define DMA_CHTBAR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR6_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR6_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13d4))
+
+#define DMA_CHTBAR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR5_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR5_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1354))
+
+#define DMA_CHTBAR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR4_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR4_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12d4))
+
+#define DMA_CHTBAR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR3_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR3_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1254))
+
+#define DMA_CHTBAR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR2_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR2_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11d4))
+
+#define DMA_CHTBAR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR1_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR1_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTBAR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1154))
+
+#define DMA_CHTBAR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR0_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTBAR0_CURTBUFAPTR_UdfRd(data) do {\
+		DMA_CHTBAR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14cc))
+
+#define DMA_CHRDR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR7_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x144c))
+
+#define DMA_CHRDR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR6_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13cc))
+
+#define DMA_CHRDR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR5_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x134c))
+
+#define DMA_CHRDR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR4_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12cc))
+
+#define DMA_CHRDR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR3_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x124c))
+
+#define DMA_CHRDR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR2_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11cc))
+
+#define DMA_CHRDR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR1_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHRDR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x114c))
+
+#define DMA_CHRDR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHRDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_CHRDR0_CURRDESAPTR_UdfRd(data) do {\
+		DMA_CHRDR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14c4))
+
+#define DMA_CHTDR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR7_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR7_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR7_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1444))
+
+#define DMA_CHTDR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR6_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR6_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR6_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13c4))
+
+#define DMA_CHTDR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR5_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR5_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR5_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1344))
+
+#define DMA_CHTDR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR4_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR4_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR4_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12c4))
+
+#define DMA_CHTDR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR3_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR3_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR3_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1244))
+
+#define DMA_CHTDR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR2_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR2_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR2_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11c4))
+
+#define DMA_CHTDR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR1_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR1_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR1_RgRd(data);\
+} while(0)
+
+
+#define DMA_CHTDR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1144))
+
+#define DMA_CHTDR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CHTDR0_RgOffAddr);\
+} while(0)
+
+#define DMA_CHTDR0_CURTDESAPTR_UdfRd(data) do {\
+		DMA_CHTDR0_RgRd(data);\
+} while(0)
+
+
+#define DMA_SFCSR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14bc))
+
+#define DMA_SFCSR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR7_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR7_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR7_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR7_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR7_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR7_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR7_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR7_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR7_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR7_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR7_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR7_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR7_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR7_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR7_RgRd(v);\
+		v = (v & (DMA_SFCSR7_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR7_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR7_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR7_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR7_ESC_Wr_Mask) | ((data & DMA_SFCSR7_ESC_Mask)<<0));\
+		DMA_SFCSR7_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR7_ESC_UdfRd(data) do {\
+		DMA_SFCSR7_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR7_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR7_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR7_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR7_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR7_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR7_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR7_RgRd(v);\
+		v = (v & (DMA_SFCSR7_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR7_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR7_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR7_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR7_ASC_Wr_Mask) | ((data & DMA_SFCSR7_ASC_Mask)<<1));\
+		DMA_SFCSR7_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR7_ASC_UdfRd(data) do {\
+		DMA_SFCSR7_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR7_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR7_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR7_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR7_RSN_UdfRd(data) do {\
+		DMA_SFCSR7_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR7_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x143c))
+
+#define DMA_SFCSR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR6_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR6_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR6_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR6_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR6_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR6_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR6_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR6_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR6_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR6_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR6_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR6_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR6_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR6_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR6_RgRd(v);\
+		v = (v & (DMA_SFCSR6_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR6_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR6_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR6_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR6_ESC_Wr_Mask) | ((data & DMA_SFCSR6_ESC_Mask)<<0));\
+		DMA_SFCSR6_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR6_ESC_UdfRd(data) do {\
+		DMA_SFCSR6_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR6_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR6_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR6_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR6_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR6_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR6_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR6_RgRd(v);\
+		v = (v & (DMA_SFCSR6_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR6_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR6_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR6_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR6_ASC_Wr_Mask) | ((data & DMA_SFCSR6_ASC_Mask)<<1));\
+		DMA_SFCSR6_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR6_ASC_UdfRd(data) do {\
+		DMA_SFCSR6_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR6_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR6_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR6_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR6_RSN_UdfRd(data) do {\
+		DMA_SFCSR6_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR6_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13bc))
+
+#define DMA_SFCSR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR5_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR5_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR5_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR5_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR5_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR5_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR5_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR5_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR5_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR5_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR5_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR5_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR5_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR5_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR5_RgRd(v);\
+		v = (v & (DMA_SFCSR5_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR5_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR5_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR5_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR5_ESC_Wr_Mask) | ((data & DMA_SFCSR5_ESC_Mask)<<0));\
+		DMA_SFCSR5_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR5_ESC_UdfRd(data) do {\
+		DMA_SFCSR5_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR5_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR5_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR5_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR5_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR5_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR5_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR5_RgRd(v);\
+		v = (v & (DMA_SFCSR5_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR5_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR5_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR5_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR5_ASC_Wr_Mask) | ((data & DMA_SFCSR5_ASC_Mask)<<1));\
+		DMA_SFCSR5_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR5_ASC_UdfRd(data) do {\
+		DMA_SFCSR5_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR5_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR5_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR5_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR5_RSN_UdfRd(data) do {\
+		DMA_SFCSR5_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR5_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x133c))
+
+#define DMA_SFCSR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR4_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR4_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR4_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR4_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR4_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR4_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR4_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR4_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR4_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR4_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR4_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR4_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR4_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR4_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR4_RgRd(v);\
+		v = (v & (DMA_SFCSR4_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR4_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR4_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR4_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR4_ESC_Wr_Mask) | ((data & DMA_SFCSR4_ESC_Mask)<<0));\
+		DMA_SFCSR4_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR4_ESC_UdfRd(data) do {\
+		DMA_SFCSR4_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR4_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR4_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR4_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR4_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR4_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR4_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR4_RgRd(v);\
+		v = (v & (DMA_SFCSR4_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR4_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR4_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR4_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR4_ASC_Wr_Mask) | ((data & DMA_SFCSR4_ASC_Mask)<<1));\
+		DMA_SFCSR4_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR4_ASC_UdfRd(data) do {\
+		DMA_SFCSR4_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR4_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR4_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR4_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR4_RSN_UdfRd(data) do {\
+		DMA_SFCSR4_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR4_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12bc))
+
+#define DMA_SFCSR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR3_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR3_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR3_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR3_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR3_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR3_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR3_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR3_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR3_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR3_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR3_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR3_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR3_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR3_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR3_RgRd(v);\
+		v = (v & (DMA_SFCSR3_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR3_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR3_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR3_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR3_ESC_Wr_Mask) | ((data & DMA_SFCSR3_ESC_Mask)<<0));\
+		DMA_SFCSR3_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR3_ESC_UdfRd(data) do {\
+		DMA_SFCSR3_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR3_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR3_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR3_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR3_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR3_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR3_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR3_RgRd(v);\
+		v = (v & (DMA_SFCSR3_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR3_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR3_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR3_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR3_ASC_Wr_Mask) | ((data & DMA_SFCSR3_ASC_Mask)<<1));\
+		DMA_SFCSR3_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR3_ASC_UdfRd(data) do {\
+		DMA_SFCSR3_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR3_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR3_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR3_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR3_RSN_UdfRd(data) do {\
+		DMA_SFCSR3_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR3_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x123c))
+
+#define DMA_SFCSR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR2_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR2_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR2_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR2_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR2_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR2_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR2_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR2_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR2_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR2_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR2_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR2_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR2_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR2_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR2_RgRd(v);\
+		v = (v & (DMA_SFCSR2_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR2_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR2_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR2_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR2_ESC_Wr_Mask) | ((data & DMA_SFCSR2_ESC_Mask)<<0));\
+		DMA_SFCSR2_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR2_ESC_UdfRd(data) do {\
+		DMA_SFCSR2_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR2_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR2_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR2_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR2_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR2_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR2_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR2_RgRd(v);\
+		v = (v & (DMA_SFCSR2_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR2_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR2_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR2_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR2_ASC_Wr_Mask) | ((data & DMA_SFCSR2_ASC_Mask)<<1));\
+		DMA_SFCSR2_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR2_ASC_UdfRd(data) do {\
+		DMA_SFCSR2_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR2_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR2_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR2_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR2_RSN_UdfRd(data) do {\
+		DMA_SFCSR2_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR2_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11bc))
+
+#define DMA_SFCSR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR1_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR1_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR1_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR1_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR1_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR1_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR1_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR1_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR1_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR1_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR1_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR1_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR1_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR1_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR1_RgRd(v);\
+		v = (v & (DMA_SFCSR1_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR1_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR1_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR1_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR1_ESC_Wr_Mask) | ((data & DMA_SFCSR1_ESC_Mask)<<0));\
+		DMA_SFCSR1_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR1_ESC_UdfRd(data) do {\
+		DMA_SFCSR1_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR1_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR1_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR1_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR1_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR1_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR1_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR1_RgRd(v);\
+		v = (v & (DMA_SFCSR1_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR1_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR1_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR1_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR1_ASC_Wr_Mask) | ((data & DMA_SFCSR1_ASC_Mask)<<1));\
+		DMA_SFCSR1_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR1_ASC_UdfRd(data) do {\
+		DMA_SFCSR1_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR1_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR1_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR1_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR1_RSN_UdfRd(data) do {\
+		DMA_SFCSR1_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR1_RSN_Mask);\
+} while(0)
+
+
+#define DMA_SFCSR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x113c))
+
+#define DMA_SFCSR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SFCSR0_RgOffAddr);\
+} while(0)
+
+#define DMA_SFCSR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SFCSR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SFCSR0_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR0_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR0_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR0_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define  DMA_SFCSR0_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR0_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR0_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR0_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_SFCSR0_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR0_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR0_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR0_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR0_ESC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR0_RgRd(v);\
+		v = (v & (DMA_SFCSR0_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR0_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR0_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR0_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR0_ESC_Wr_Mask) | ((data & DMA_SFCSR0_ESC_Mask)<<0));\
+		DMA_SFCSR0_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR0_ESC_UdfRd(data) do {\
+		DMA_SFCSR0_RgRd(data);\
+		data = ((data >> 0) & DMA_SFCSR0_ESC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR0_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR0_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR0_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR0_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR0_ASC_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SFCSR0_RgRd(v);\
+		v = (v & (DMA_SFCSR0_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR0_Mask_2))<<2);\
+		v = (v & (DMA_SFCSR0_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR0_Mask_20))<<20);\
+		v = ((v & DMA_SFCSR0_ASC_Wr_Mask) | ((data & DMA_SFCSR0_ASC_Mask)<<1));\
+		DMA_SFCSR0_RgWr(v);\
+} while(0)
+
+#define DMA_SFCSR0_ASC_UdfRd(data) do {\
+		DMA_SFCSR0_RgRd(data);\
+		data = ((data >> 1) & DMA_SFCSR0_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR0_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR0_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR0_RSN_UdfRd(data) do {\
+		DMA_SFCSR0_RgRd(data);\
+		data = ((data >> 16) & DMA_SFCSR0_RSN_Mask);\
+} while(0)
+
+
+#define MAC_IVLANTIRR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x64))
+
+#define MAC_IVLANTIRR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_IVLANTIRR_RgOffAddr);\
+} while(0)
+
+#define MAC_IVLANTIRR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_IVLANTIRR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_IVLANTIRR_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MAC_IVLANTIRR_Mask_21 (ULONG)(0x7ff)
+
+/*#define MAC_IVLANTIRR_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MAC_IVLANTIRR_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MAC_IVLANTIRR_VLTI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IVLANTIRR_VLTI_Mask (ULONG)(0x1)
+
+/*#define MAC_IVLANTIRR_VLTI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_IVLANTIRR_VLTI_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_IVLANTIRR_VLTI_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IVLANTIRR_RgRd(v);\
+		v = (v & (MAC_IVLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_IVLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_IVLANTIRR_VLTI_Wr_Mask) | ((data & MAC_IVLANTIRR_VLTI_Mask)<<20));\
+		MAC_IVLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_IVLANTIRR_VLTI_UdfRd(data) do {\
+		MAC_IVLANTIRR_RgRd(data);\
+		data = ((data >> 20) & MAC_IVLANTIRR_VLTI_Mask);\
+} while(0)
+
+/*#define MAC_IVLANTIRR_CSVL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IVLANTIRR_CSVL_Mask (ULONG)(0x1)
+
+/*#define MAC_IVLANTIRR_CSVL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_IVLANTIRR_CSVL_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_IVLANTIRR_CSVL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IVLANTIRR_RgRd(v);\
+		v = (v & (MAC_IVLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_IVLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_IVLANTIRR_CSVL_Wr_Mask) | ((data & MAC_IVLANTIRR_CSVL_Mask)<<19));\
+		MAC_IVLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_IVLANTIRR_CSVL_UdfRd(data) do {\
+		MAC_IVLANTIRR_RgRd(data);\
+		data = ((data >> 19) & MAC_IVLANTIRR_CSVL_Mask);\
+} while(0)
+
+/*#define MAC_IVLANTIRR_VLP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_IVLANTIRR_VLP_Mask (ULONG)(0x1)
+
+/*#define MAC_IVLANTIRR_VLP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_IVLANTIRR_VLP_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_IVLANTIRR_VLP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IVLANTIRR_RgRd(v);\
+		v = (v & (MAC_IVLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_IVLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_IVLANTIRR_VLP_Wr_Mask) | ((data & MAC_IVLANTIRR_VLP_Mask)<<18));\
+		MAC_IVLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_IVLANTIRR_VLP_UdfRd(data) do {\
+		MAC_IVLANTIRR_RgRd(data);\
+		data = ((data >> 18) & MAC_IVLANTIRR_VLP_Mask);\
+} while(0)
+
+/*#define MAC_IVLANTIRR_VLC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_IVLANTIRR_VLC_Mask (ULONG)(0x3)
+
+/*#define MAC_IVLANTIRR_VLC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (16)))*/
+
+#define MAC_IVLANTIRR_VLC_Wr_Mask (ULONG)(0xfffcffff)
+
+#define MAC_IVLANTIRR_VLC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IVLANTIRR_RgRd(v);\
+		v = (v & (MAC_IVLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_IVLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_IVLANTIRR_VLC_Wr_Mask) | ((data & MAC_IVLANTIRR_VLC_Mask)<<16));\
+		MAC_IVLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_IVLANTIRR_VLC_UdfRd(data) do {\
+		MAC_IVLANTIRR_RgRd(data);\
+		data = ((data >> 16) & MAC_IVLANTIRR_VLC_Mask);\
+} while(0)
+
+/*#define MAC_IVLANTIRR_VLT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_IVLANTIRR_VLT_Mask (ULONG)(0xffff)
+
+/*#define MAC_IVLANTIRR_VLT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_IVLANTIRR_VLT_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_IVLANTIRR_VLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_IVLANTIRR_RgRd(v);\
+		v = (v & (MAC_IVLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_IVLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_IVLANTIRR_VLT_Wr_Mask) | ((data & MAC_IVLANTIRR_VLT_Mask)<<0));\
+		MAC_IVLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_IVLANTIRR_VLT_UdfRd(data) do {\
+		MAC_IVLANTIRR_RgRd(data);\
+		data = ((data >> 0) & MAC_IVLANTIRR_VLT_Mask);\
+} while(0)
+
+
+#define MAC_VLANTIRR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x60))
+
+#define MAC_VLANTIRR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_VLANTIRR_RgOffAddr);\
+} while(0)
+
+#define MAC_VLANTIRR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_VLANTIRR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_VLANTIRR_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MAC_VLANTIRR_Mask_21 (ULONG)(0x7ff)
+
+/*#define MAC_VLANTIRR_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MAC_VLANTIRR_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MAC_VLANTIRR_VLTI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTIRR_VLTI_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTIRR_VLTI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_VLANTIRR_VLTI_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_VLANTIRR_VLTI_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTIRR_RgRd(v);\
+		v = (v & (MAC_VLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_VLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_VLANTIRR_VLTI_Wr_Mask) | ((data & MAC_VLANTIRR_VLTI_Mask)<<20));\
+		MAC_VLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTIRR_VLTI_UdfRd(data) do {\
+		MAC_VLANTIRR_RgRd(data);\
+		data = ((data >> 20) & MAC_VLANTIRR_VLTI_Mask);\
+} while(0)
+
+/*#define MAC_VLANTIRR_CSVL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTIRR_CSVL_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTIRR_CSVL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_VLANTIRR_CSVL_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_VLANTIRR_CSVL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTIRR_RgRd(v);\
+		v = (v & (MAC_VLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_VLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_VLANTIRR_CSVL_Wr_Mask) | ((data & MAC_VLANTIRR_CSVL_Mask)<<19));\
+		MAC_VLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTIRR_CSVL_UdfRd(data) do {\
+		MAC_VLANTIRR_RgRd(data);\
+		data = ((data >> 19) & MAC_VLANTIRR_CSVL_Mask);\
+} while(0)
+
+/*#define MAC_VLANTIRR_VLP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTIRR_VLP_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTIRR_VLP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_VLANTIRR_VLP_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_VLANTIRR_VLP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTIRR_RgRd(v);\
+		v = (v & (MAC_VLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_VLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_VLANTIRR_VLP_Wr_Mask) | ((data & MAC_VLANTIRR_VLP_Mask)<<18));\
+		MAC_VLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTIRR_VLP_UdfRd(data) do {\
+		MAC_VLANTIRR_RgRd(data);\
+		data = ((data >> 18) & MAC_VLANTIRR_VLP_Mask);\
+} while(0)
+
+/*#define MAC_VLANTIRR_VLC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_VLANTIRR_VLC_Mask (ULONG)(0x3)
+
+/*#define MAC_VLANTIRR_VLC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (16)))*/
+
+#define MAC_VLANTIRR_VLC_Wr_Mask (ULONG)(0xfffcffff)
+
+#define MAC_VLANTIRR_VLC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTIRR_RgRd(v);\
+		v = (v & (MAC_VLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_VLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_VLANTIRR_VLC_Wr_Mask) | ((data & MAC_VLANTIRR_VLC_Mask)<<16));\
+		MAC_VLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTIRR_VLC_UdfRd(data) do {\
+		MAC_VLANTIRR_RgRd(data);\
+		data = ((data >> 16) & MAC_VLANTIRR_VLC_Mask);\
+} while(0)
+
+/*#define MAC_VLANTIRR_VLT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_VLANTIRR_VLT_Mask (ULONG)(0xffff)
+
+/*#define MAC_VLANTIRR_VLT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_VLANTIRR_VLT_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_VLANTIRR_VLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTIRR_RgRd(v);\
+		v = (v & (MAC_VLANTIRR_RES_Wr_Mask_21))|((( 0) & (MAC_VLANTIRR_Mask_21))<<21);\
+		v = ((v & MAC_VLANTIRR_VLT_Wr_Mask) | ((data & MAC_VLANTIRR_VLT_Mask)<<0));\
+		MAC_VLANTIRR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTIRR_VLT_UdfRd(data) do {\
+		MAC_VLANTIRR_RgRd(data);\
+		data = ((data >> 0) & MAC_VLANTIRR_VLT_Mask);\
+} while(0)
+
+
+#define MAC_VLANHTR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x58))
+
+#define MAC_VLANHTR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_VLANHTR_RgOffAddr);\
+} while(0)
+
+#define MAC_VLANHTR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_VLANHTR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_VLANHTR_Mask_16 (ULONG)(~(~0<<(16)))*/
+
+#define  MAC_VLANHTR_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_VLANHTR_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(16)))<<(16)))*/
+
+#define MAC_VLANHTR_RES_Wr_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_VLANHTR_VLHT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_VLANHTR_VLHT_Mask (ULONG)(0xffff)
+
+/*#define MAC_VLANHTR_VLHT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_VLANHTR_VLHT_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_VLANHTR_VLHT_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MAC_VLANHTR_RES_Wr_Mask_16))|((( 0) & (MAC_VLANHTR_Mask_16))<<16);\
+		(v) = ((v & MAC_VLANHTR_VLHT_Wr_Mask) | ((data & MAC_VLANHTR_VLHT_Mask)<<0));\
+		MAC_VLANHTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANHTR_VLHT_UdfRd(data) do {\
+		MAC_VLANHTR_RgRd(data);\
+		data = ((data >> 0) & MAC_VLANHTR_VLHT_Mask);\
+} while(0)
+
+
+#define MAC_VLANTR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x50))
+
+#define MAC_VLANTR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_VLANTR_RgOffAddr);\
+} while(0)
+
+#define MAC_VLANTR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_VLANTR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_VLANTR_Mask_30 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_VLANTR_Mask_30 (ULONG)(0x1)
+
+/*#define MAC_VLANTR_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(1)))<<(30)))*/
+
+#define MAC_VLANTR_RES_Wr_Mask_30 (ULONG)(0xbfffffff)
+
+/*#define  MAC_VLANTR_Mask_23 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_VLANTR_Mask_23 (ULONG)(0x1)
+
+/*#define MAC_VLANTR_RES_Wr_Mask_23 (ULONG)(~((~(~0<<(1)))<<(23)))*/
+
+#define MAC_VLANTR_RES_Wr_Mask_23 (ULONG)(0xff7fffff)
+
+/*#define MAC_VLANTR_EIVLRXS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_EIVLRXS_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_EIVLRXS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_VLANTR_EIVLRXS_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_VLANTR_EIVLRXS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_EIVLRXS_Wr_Mask) | ((data & MAC_VLANTR_EIVLRXS_Mask)<<31));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_EIVLRXS_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 31) & MAC_VLANTR_EIVLRXS_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_EIVLS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_VLANTR_EIVLS_Mask (ULONG)(0x3)
+
+/*#define MAC_VLANTR_EIVLS_Wr_Mask (ULONG)(~((~(~0 << (2))) << (28)))*/
+
+#define MAC_VLANTR_EIVLS_Wr_Mask (ULONG)(0xcfffffff)
+
+#define MAC_VLANTR_EIVLS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_EIVLS_Wr_Mask) | ((data & MAC_VLANTR_EIVLS_Mask)<<28));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_EIVLS_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 28) & MAC_VLANTR_EIVLS_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_ERIVLT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_ERIVLT_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_ERIVLT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MAC_VLANTR_ERIVLT_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MAC_VLANTR_ERIVLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_ERIVLT_Wr_Mask) | ((data & MAC_VLANTR_ERIVLT_Mask)<<27));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_ERIVLT_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 27) & MAC_VLANTR_ERIVLT_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_EDVLP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_EDVLP_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_EDVLP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define MAC_VLANTR_EDVLP_Wr_Mask (ULONG)(0xfbffffff)
+
+#define MAC_VLANTR_EDVLP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_EDVLP_Wr_Mask) | ((data & MAC_VLANTR_EDVLP_Mask)<<26));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_EDVLP_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 26) & MAC_VLANTR_EDVLP_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_VTHM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_VTHM_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_VTHM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define MAC_VLANTR_VTHM_Wr_Mask (ULONG)(0xfdffffff)
+
+#define MAC_VLANTR_VTHM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_VTHM_Wr_Mask) | ((data & MAC_VLANTR_VTHM_Mask)<<25));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_VTHM_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 25) & MAC_VLANTR_VTHM_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_EVLRXS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_EVLRXS_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_EVLRXS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MAC_VLANTR_EVLRXS_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MAC_VLANTR_EVLRXS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_EVLRXS_Wr_Mask) | ((data & MAC_VLANTR_EVLRXS_Mask)<<24));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_EVLRXS_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 24) & MAC_VLANTR_EVLRXS_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_EVLS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_VLANTR_EVLS_Mask (ULONG)(0x3)
+
+/*#define MAC_VLANTR_EVLS_Wr_Mask (ULONG)(~((~(~0 << (2))) << (21)))*/
+
+#define MAC_VLANTR_EVLS_Wr_Mask (ULONG)(0xff9fffff)
+
+#define MAC_VLANTR_EVLS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_EVLS_Wr_Mask) | ((data & MAC_VLANTR_EVLS_Mask)<<21));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_EVLS_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 21) & MAC_VLANTR_EVLS_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_DOVLTC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_DOVLTC_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_DOVLTC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_VLANTR_DOVLTC_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_VLANTR_DOVLTC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_DOVLTC_Wr_Mask) | ((data & MAC_VLANTR_DOVLTC_Mask)<<20));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_DOVLTC_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 20) & MAC_VLANTR_DOVLTC_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_ERSVLM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_ERSVLM_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_ERSVLM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_VLANTR_ERSVLM_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_VLANTR_ERSVLM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_ERSVLM_Wr_Mask) | ((data & MAC_VLANTR_ERSVLM_Mask)<<19));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_ERSVLM_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 19) & MAC_VLANTR_ERSVLM_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_ESVL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_ESVL_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_ESVL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_VLANTR_ESVL_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_VLANTR_ESVL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_ESVL_Wr_Mask) | ((data & MAC_VLANTR_ESVL_Mask)<<18));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_ESVL_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 18) & MAC_VLANTR_ESVL_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_VTIM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_VTIM_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_VTIM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MAC_VLANTR_VTIM_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MAC_VLANTR_VTIM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_VTIM_Wr_Mask) | ((data & MAC_VLANTR_VTIM_Mask)<<17));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_VTIM_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 17) & MAC_VLANTR_VTIM_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_ETV_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_VLANTR_ETV_Mask (ULONG)(0x1)
+
+/*#define MAC_VLANTR_ETV_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_VLANTR_ETV_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_VLANTR_ETV_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_ETV_Wr_Mask) | ((data & MAC_VLANTR_ETV_Mask)<<16));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_ETV_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 16) & MAC_VLANTR_ETV_Mask);\
+} while(0)
+
+/*#define MAC_VLANTR_VL_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_VLANTR_VL_Mask (ULONG)(0xffff)
+
+/*#define MAC_VLANTR_VL_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_VLANTR_VL_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_VLANTR_VL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_VLANTR_RgRd(v);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_30))|((( 0) & (MAC_VLANTR_Mask_30))<<30);\
+		v = (v & (MAC_VLANTR_RES_Wr_Mask_23))|((( 0) & (MAC_VLANTR_Mask_23))<<23);\
+		v = ((v & MAC_VLANTR_VL_Wr_Mask) | ((data & MAC_VLANTR_VL_Mask)<<0));\
+		MAC_VLANTR_RgWr(v);\
+} while(0)
+
+#define MAC_VLANTR_VL_UdfRd(data) do {\
+		MAC_VLANTR_RgRd(data);\
+		data = ((data >> 0) & MAC_VLANTR_VL_Mask);\
+} while(0)
+
+
+#define DMA_SBUS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1004))
+
+#define DMA_SBUS_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_SBUS_RgOffAddr);\
+} while(0)
+
+#define DMA_SBUS_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_SBUS_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_SBUS_Mask_25 (ULONG)(~(~0<<(5)))*/
+
+#define  DMA_SBUS_Mask_25 (ULONG)(0x1f)
+
+/*#define DMA_SBUS_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(5)))<<(25)))*/
+
+#define DMA_SBUS_RES_Wr_Mask_25 (ULONG)(0xc1ffffff)
+
+/*#define  DMA_SBUS_Mask_20 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_SBUS_Mask_20 (ULONG)(0x1)
+
+/*#define DMA_SBUS_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(1)))<<(20)))*/
+
+#define DMA_SBUS_RES_Wr_Mask_20 (ULONG)(0xffefffff)
+
+/*#define  DMA_SBUS_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_SBUS_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_SBUS_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_SBUS_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_SBUS_Mask_8 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_SBUS_Mask_8 (ULONG)(0xf)
+
+/*#define DMA_SBUS_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(4)))<<(8)))*/
+
+#define DMA_SBUS_RES_Wr_Mask_8 (ULONG)(0xfffff0ff)
+
+/*#define DMA_SBUS_EN_LPI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_EN_LPI_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_EN_LPI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define DMA_SBUS_EN_LPI_Wr_Mask (ULONG)(0x7fffffff)
+
+#define DMA_SBUS_EN_LPI_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_EN_LPI_Wr_Mask) | ((data & DMA_SBUS_EN_LPI_Mask)<<31));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_EN_LPI_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 31) & DMA_SBUS_EN_LPI_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_LPI_XIT_PKT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_LPI_XIT_PKT_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_LPI_XIT_PKT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (30)))*/
+
+#define DMA_SBUS_LPI_XIT_PKT_Wr_Mask (ULONG)(0xbfffffff)
+
+#define DMA_SBUS_LPI_XIT_PKT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_LPI_XIT_PKT_Wr_Mask) | ((data & DMA_SBUS_LPI_XIT_PKT_Mask)<<30));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_LPI_XIT_PKT_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 30) & DMA_SBUS_LPI_XIT_PKT_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_WR_OSR_LMT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SBUS_WR_OSR_LMT_Mask (ULONG)(0xf)
+
+/*#define DMA_SBUS_WR_OSR_LMT_Wr_Mask (ULONG)(~((~(~0 << (4))) << (21)))*/
+
+#define DMA_SBUS_WR_OSR_LMT_Wr_Mask (ULONG)(0xfe1fffff)
+
+#define DMA_SBUS_WR_OSR_LMT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_WR_OSR_LMT_Wr_Mask) | ((data & DMA_SBUS_WR_OSR_LMT_Mask)<<21));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_WR_OSR_LMT_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 21) & DMA_SBUS_WR_OSR_LMT_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_RD_OSR_LMT_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SBUS_RD_OSR_LMT_Mask (ULONG)(0xf)
+
+/*#define DMA_SBUS_RD_OSR_LMT_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_SBUS_RD_OSR_LMT_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_SBUS_RD_OSR_LMT_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_RD_OSR_LMT_Wr_Mask) | ((data & DMA_SBUS_RD_OSR_LMT_Mask)<<16));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_RD_OSR_LMT_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 16) & DMA_SBUS_RD_OSR_LMT_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_MB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_MB_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_MB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SBUS_MB_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SBUS_MB_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_MB_Wr_Mask) | ((data & DMA_SBUS_MB_Mask)<<14));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_MB_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 14) & DMA_SBUS_MB_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_ONEKBBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_ONEKBBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_ONEKBBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SBUS_ONEKBBE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SBUS_ONEKBBE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_ONEKBBE_Wr_Mask) | ((data & DMA_SBUS_ONEKBBE_Mask)<<13));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_ONEKBBE_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 13) & DMA_SBUS_ONEKBBE_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_AAL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_AAL_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_AAL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SBUS_AAL_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SBUS_AAL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_AAL_Wr_Mask) | ((data & DMA_SBUS_AAL_Mask)<<12));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_AAL_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 12) & DMA_SBUS_AAL_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN256_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN256_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN256_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SBUS_BLEN256_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SBUS_BLEN256_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN256_Wr_Mask) | ((data & DMA_SBUS_BLEN256_Mask)<<7));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN256_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 7) & DMA_SBUS_BLEN256_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN128_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN128_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN128_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SBUS_BLEN128_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SBUS_BLEN128_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN128_Wr_Mask) | ((data & DMA_SBUS_BLEN128_Mask)<<6));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN128_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 6) & DMA_SBUS_BLEN128_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN64_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN64_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN64_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define DMA_SBUS_BLEN64_Wr_Mask (ULONG)(0xffffffdf)
+
+#define DMA_SBUS_BLEN64_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN64_Wr_Mask) | ((data & DMA_SBUS_BLEN64_Mask)<<5));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN64_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 5) & DMA_SBUS_BLEN64_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN32_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN32_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN32_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_SBUS_BLEN32_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_SBUS_BLEN32_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN32_Wr_Mask) | ((data & DMA_SBUS_BLEN32_Mask)<<4));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN32_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 4) & DMA_SBUS_BLEN32_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN16_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN16_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN16_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define DMA_SBUS_BLEN16_Wr_Mask (ULONG)(0xfffffff7)
+
+#define DMA_SBUS_BLEN16_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN16_Wr_Mask) | ((data & DMA_SBUS_BLEN16_Mask)<<3));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN16_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 3) & DMA_SBUS_BLEN16_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN8_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SBUS_BLEN8_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SBUS_BLEN8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN8_Wr_Mask) | ((data & DMA_SBUS_BLEN8_Mask)<<2));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN8_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 2) & DMA_SBUS_BLEN8_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_BLEN4_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_BLEN4_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_BLEN4_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SBUS_BLEN4_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SBUS_BLEN4_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_BLEN4_Wr_Mask) | ((data & DMA_SBUS_BLEN4_Mask)<<1));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_BLEN4_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 1) & DMA_SBUS_BLEN4_Mask);\
+} while(0)
+
+/*#define DMA_SBUS_UNDEF_FB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SBUS_UNDEF_FB_Mask (ULONG)(0x1)
+
+/*#define DMA_SBUS_UNDEF_FB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SBUS_UNDEF_FB_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SBUS_UNDEF_FB_UdfWr(data) do {\
+		ULONG v;\
+		DMA_SBUS_RgRd(v);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_25))|((( 0) & (DMA_SBUS_Mask_25))<<25);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_20))|((( 0) & (DMA_SBUS_Mask_20))<<20);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_15))|((( 0) & (DMA_SBUS_Mask_15))<<15);\
+		v = (v & (DMA_SBUS_RES_Wr_Mask_8))|((( 0) & (DMA_SBUS_Mask_8))<<8);\
+		v = ((v & DMA_SBUS_UNDEF_FB_Wr_Mask) | ((data & DMA_SBUS_UNDEF_FB_Mask)<<0));\
+		DMA_SBUS_RgWr(v);\
+} while(0)
+
+#define DMA_SBUS_UNDEF_FB_UdfRd(data) do {\
+		DMA_SBUS_RgRd(data);\
+		data = ((data >> 0) & DMA_SBUS_UNDEF_FB_Mask);\
+} while(0)
+
+
+#define DMA_BMR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1000))
+
+#define DMA_BMR_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_BMR_RgOffAddr);\
+} while(0)
+
+#define DMA_BMR_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_BMR_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_BMR_Mask_15 (ULONG)(~(~0<<(16)))*/
+
+#define  DMA_BMR_Mask_15 (ULONG)(0xffff)
+
+/*#define DMA_BMR_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(16)))<<(15)))*/
+
+#define DMA_BMR_RES_Wr_Mask_15 (ULONG)(0x80007fff)
+
+/*#define  DMA_BMR_Mask_6 (ULONG)(~(~0<<(5)))*/
+
+#define  DMA_BMR_Mask_6 (ULONG)(0x1f)
+
+/*#define DMA_BMR_RES_Wr_Mask_6 (ULONG)(~((~(~0<<(5)))<<(6)))*/
+
+#define DMA_BMR_RES_Wr_Mask_6 (ULONG)(0xfffff83f)
+
+/*#define DMA_BMR_RIB_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_BMR_RIB_Mask (ULONG)(0x1)
+
+/*#define DMA_BMR_RIB_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define DMA_BMR_RIB_Wr_Mask (ULONG)(0x7fffffff)
+
+#define DMA_BMR_RIB_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_RIB_Wr_Mask) | ((data & DMA_BMR_RIB_Mask)<<31));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_RIB_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 31) & DMA_BMR_RIB_Mask);\
+} while(0)
+
+/*#define DMA_BMR_PR_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_BMR_PR_Mask (ULONG)(0x7)
+
+/*#define DMA_BMR_PR_Wr_Mask (ULONG)(~((~(~0 << (3))) << (12)))*/
+
+#define DMA_BMR_PR_Wr_Mask (ULONG)(0xffff8fff)
+
+#define DMA_BMR_PR_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_PR_Wr_Mask) | ((data & DMA_BMR_PR_Mask)<<12));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_PR_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 12) & DMA_BMR_PR_Mask);\
+} while(0)
+
+/*#define DMA_BMR_TXPR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_BMR_TXPR_Mask (ULONG)(0x1)
+
+/*#define DMA_BMR_TXPR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_BMR_TXPR_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_BMR_TXPR_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_TXPR_Wr_Mask) | ((data & DMA_BMR_TXPR_Mask)<<11));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_TXPR_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 11) & DMA_BMR_TXPR_Mask);\
+} while(0)
+
+/*#define DMA_BMR_DTXSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_BMR_DTXSTS_Mask (ULONG)(0x1)
+
+/*#define DMA_BMR_DTXSTS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define DMA_BMR_DTXSTS_Wr_Mask (ULONG)(0xffffffdf)
+
+#define DMA_BMR_DTXSTS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_DTXSTS_Wr_Mask) | ((data & DMA_BMR_DTXSTS_Mask)<<5));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_DTXSTS_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 5) & DMA_BMR_DTXSTS_Mask);\
+} while(0)
+
+/*#define DMA_BMR_TAA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_BMR_TAA_Mask (ULONG)(0x7)
+
+/*#define DMA_BMR_TAA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (2)))*/
+
+#define DMA_BMR_TAA_Wr_Mask (ULONG)(0xffffffe3)
+
+#define DMA_BMR_TAA_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_TAA_Wr_Mask) | ((data & DMA_BMR_TAA_Mask)<<2));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_TAA_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 2) & DMA_BMR_TAA_Mask);\
+} while(0)
+
+/*#define DMA_BMR_DA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_BMR_DA_Mask (ULONG)(0x1)
+
+/*#define DMA_BMR_DA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_BMR_DA_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_BMR_DA_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_DA_Wr_Mask) | ((data & DMA_BMR_DA_Mask)<<1));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_DA_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 1) & DMA_BMR_DA_Mask);\
+} while(0)
+
+/*#define DMA_BMR_SWR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_BMR_SWR_Mask (ULONG)(0x1)
+
+/*#define DMA_BMR_SWR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_BMR_SWR_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_BMR_SWR_UdfWr(data) do {\
+		ULONG v;\
+		DMA_BMR_RgRd(v);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_15))|((( 0) & (DMA_BMR_Mask_15))<<15);\
+		v = (v & (DMA_BMR_RES_Wr_Mask_6))|((( 0) & (DMA_BMR_Mask_6))<<6);\
+		v = ((v & DMA_BMR_SWR_Wr_Mask) | ((data & DMA_BMR_SWR_Mask)<<0));\
+		DMA_BMR_RgWr(v);\
+} while(0)
+
+#define DMA_BMR_SWR_UdfRd(data) do {\
+		DMA_BMR_RgRd(data);\
+		data = ((data >> 0) & DMA_BMR_SWR_Mask);\
+} while(0)
+
+
+#define MTL_Q0RCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd3c))
+
+#define MTL_Q0RCR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0RCR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0RCR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0RCR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0RCR_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_Q0RCR_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_Q0RCR_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_Q0RCR_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_Q0RCR_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0RCR_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0RCR_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_Q0RCR_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_Q0RCR_RXQ_PKT_ARBIT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0RCR_RgRd(v);\
+		v = (v & (MTL_Q0RCR_RES_Wr_Mask_4))|((( 0) & (MTL_Q0RCR_Mask_4))<<4);\
+		v = ((v & MTL_Q0RCR_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_Q0RCR_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_Q0RCR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0RCR_RXQ_PKT_ARBIT_UdfRd(data) do {\
+		MTL_Q0RCR_RgRd(data);\
+		data = ((data >> 3) & MTL_Q0RCR_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+/*#define MTL_Q0RCR_RQW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0RCR_RQW_Mask (ULONG)(0x7)
+
+/*#define MTL_Q0RCR_RQW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_Q0RCR_RQW_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_Q0RCR_RQW_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0RCR_RgRd(v);\
+		v = (v & (MTL_Q0RCR_RES_Wr_Mask_4))|((( 0) & (MTL_Q0RCR_Mask_4))<<4);\
+		v = ((v & MTL_Q0RCR_RQW_Wr_Mask) | ((data & MTL_Q0RCR_RQW_Mask)<<0));\
+		MTL_Q0RCR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0RCR_RQW_UdfRd(data) do {\
+		MTL_Q0RCR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0RCR_RQW_Mask);\
+} while(0)
+
+
+#define MTL_Q0OCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd34))
+
+#define MTL_Q0OCR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0OCR_RgOffAddr);\
+} while(0)
+
+/*#define MTL_Q0OCR_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0OCR_MISCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_Q0OCR_MISCNTOVF_UdfRd(data) do {\
+		MTL_Q0OCR_RgRd(data);\
+		data = ((data >> 27) & MTL_Q0OCR_MISCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_Q0OCR_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_Q0OCR_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+#define MTL_Q0OCR_MISPKTCNT_UdfRd(data) do {\
+		MTL_Q0OCR_RgRd(data);\
+		data = ((data >> 16) & MTL_Q0OCR_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_Q0OCR_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0OCR_OVFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_Q0OCR_OVFCNTOVF_UdfRd(data) do {\
+		MTL_Q0OCR_RgRd(data);\
+		data = ((data >> 11) & MTL_Q0OCR_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_Q0OCR_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_Q0OCR_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+#define MTL_Q0OCR_OVFPKTCNT_UdfRd(data) do {\
+		MTL_Q0OCR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0OCR_OVFPKTCNT_Mask);\
+} while(0)
+
+
+#define MTL_Q0ROMR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd30))
+
+#define MTL_Q0ROMR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0ROMR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0ROMR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0ROMR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0ROMR_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_Q0ROMR_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_Q0ROMR_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_Q0ROMR_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define  MTL_Q0ROMR_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_Q0ROMR_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_Q0ROMR_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_Q0ROMR_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_Q0ROMR_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_Q0ROMR_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_Q0ROMR_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_Q0ROMR_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_Q0ROMR_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_Q0ROMR_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_Q0ROMR_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define MTL_Q0ROMR_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_Q0ROMR_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_Q0ROMR_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_Q0ROMR_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_Q0ROMR_RQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_RQS_Wr_Mask) | ((data & MTL_Q0ROMR_RQS_Mask)<<20));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_RQS_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 20) & MTL_Q0ROMR_RQS_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0ROMR_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_Q0ROMR_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_Q0ROMR_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_Q0ROMR_RFD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_RFD_Wr_Mask) | ((data & MTL_Q0ROMR_RFD_Mask)<<13));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_RFD_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 13) & MTL_Q0ROMR_RFD_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0ROMR_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_Q0ROMR_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_Q0ROMR_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_Q0ROMR_RFA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_RFA_Wr_Mask) | ((data & MTL_Q0ROMR_RFA_Mask)<<8));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_RFA_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 8) & MTL_Q0ROMR_RFA_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_EFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ROMR_EFC_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_EFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_Q0ROMR_EFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_Q0ROMR_EFC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_EFC_Wr_Mask) | ((data & MTL_Q0ROMR_EFC_Mask)<<7));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_EFC_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 7) & MTL_Q0ROMR_EFC_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_DT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ROMR_DT_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_DT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_Q0ROMR_DT_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_Q0ROMR_DT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_DT_Wr_Mask) | ((data & MTL_Q0ROMR_DT_Mask)<<6));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_DT_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 6) & MTL_Q0ROMR_DT_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ROMR_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_Q0ROMR_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_Q0ROMR_RSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_RSF_Wr_Mask) | ((data & MTL_Q0ROMR_RSF_Mask)<<5));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_RSF_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 5) & MTL_Q0ROMR_RSF_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ROMR_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_Q0ROMR_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_Q0ROMR_FEP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_FEP_Wr_Mask) | ((data & MTL_Q0ROMR_FEP_Mask)<<4));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_FEP_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 4) & MTL_Q0ROMR_FEP_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ROMR_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ROMR_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_Q0ROMR_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_Q0ROMR_FUP_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_FUP_Wr_Mask) | ((data & MTL_Q0ROMR_FUP_Mask)<<3));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_FUP_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 3) & MTL_Q0ROMR_FUP_Mask);\
+} while(0)
+
+/*#define MTL_Q0ROMR_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_Q0ROMR_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_Q0ROMR_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_Q0ROMR_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_Q0ROMR_RTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0ROMR_RgRd(v);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_30))|((( 0) & (MTL_Q0ROMR_Mask_30))<<30);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_16))|((( 0) & (MTL_Q0ROMR_Mask_16))<<16);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_11))|((( 0) & (MTL_Q0ROMR_Mask_11))<<11);\
+		v = (v & (MTL_Q0ROMR_RES_Wr_Mask_2))|((( 0) & (MTL_Q0ROMR_Mask_2))<<2);\
+		v = ((v & MTL_Q0ROMR_RTC_Wr_Mask) | ((data & MTL_Q0ROMR_RTC_Mask)<<0));\
+		MTL_Q0ROMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ROMR_RTC_UdfRd(data) do {\
+		MTL_Q0ROMR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0ROMR_RTC_Mask);\
+} while(0)
+
+
+#define MTL_Q0QR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd18))
+
+#define MTL_Q0QR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0QR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0QR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0QR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0QR_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_Q0QR_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_Q0QR_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_Q0QR_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_Q0QR_QW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_Q0QR_QW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_Q0QR_QW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_Q0QR_QW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_Q0QR_QW_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_Q0QR_RES_Wr_Mask_21))|((( 0) & (MTL_Q0QR_Mask_21))<<21);\
+		(v) = ((v & MTL_Q0QR_QW_Wr_Mask) | ((data & MTL_Q0QR_QW_Mask)<<0));\
+		MTL_Q0QR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0QR_QW_UdfRd(data) do {\
+		MTL_Q0QR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0QR_QW_Mask);\
+} while(0)
+
+
+#define MTL_Q0ECR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd10))
+
+#define MTL_Q0ECR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0ECR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0ECR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0ECR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0ECR_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_Q0ECR_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_Q0ECR_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_Q0ECR_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define  MTL_Q0ECR_Mask_0 (ULONG)(~(~0<<(24)))*/
+
+#define  MTL_Q0ECR_Mask_0 (ULONG)(0xffffff)
+
+/*#define MTL_Q0ECR_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(24)))<<(0)))*/
+
+#define MTL_Q0ECR_RES_Wr_Mask_0 (ULONG)(0xff000000)
+
+/*#define MTL_Q0ECR_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0ECR_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0ECR_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_Q0ECR_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_Q0ECR_ABPSSIE_UdfWr(data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_Q0ECR_RES_Wr_Mask_25))|((( 0) & (MTL_Q0ECR_Mask_25))<<25);\
+		v = (v & (MTL_Q0ECR_RES_Wr_Mask_0))|((( 0) & (MTL_Q0ECR_Mask_0))<<0);\
+		(v) = ((v & MTL_Q0ECR_ABPSSIE_Wr_Mask) | ((data & MTL_Q0ECR_ABPSSIE_Mask)<<24));\
+		MTL_Q0ECR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0ECR_ABPSSIE_UdfRd(data) do {\
+		MTL_Q0ECR_RgRd(data);\
+		data = ((data >> 24) & MTL_Q0ECR_ABPSSIE_Mask);\
+} while(0)
+
+
+#define MTL_Q0UCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd04))
+
+#define MTL_Q0UCR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0UCR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0UCR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0UCR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0UCR_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_Q0UCR_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_Q0UCR_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_Q0UCR_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_Q0UCR_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0UCR_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_Q0UCR_UFCNTOVF_UdfRd(data) do {\
+		MTL_Q0UCR_RgRd(data);\
+		data = ((data >> 11) & MTL_Q0UCR_UFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_Q0UCR_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_Q0UCR_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_Q0UCR_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_Q0UCR_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_Q0UCR_UFPKTCNT_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0UCR_RgRd(v);\
+		v = (v & (MTL_Q0UCR_RES_Wr_Mask_12))|((( 0) & (MTL_Q0UCR_Mask_12))<<12);\
+		v = ((v & MTL_Q0UCR_UFPKTCNT_Wr_Mask) | ((data & MTL_Q0UCR_UFPKTCNT_Mask)<<0));\
+		MTL_Q0UCR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0UCR_UFPKTCNT_UdfRd(data) do {\
+		MTL_Q0UCR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0UCR_UFPKTCNT_Mask);\
+} while(0)
+
+
+#define MTL_Q0TOMR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xd00))
+
+#define MTL_Q0TOMR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_Q0TOMR_RgOffAddr);\
+} while(0)
+
+#define MTL_Q0TOMR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_Q0TOMR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_Q0TOMR_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_Q0TOMR_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_Q0TOMR_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_Q0TOMR_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define  MTL_Q0TOMR_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_Q0TOMR_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_Q0TOMR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_Q0TOMR_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define MTL_Q0TOMR_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_Q0TOMR_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_Q0TOMR_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_Q0TOMR_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_Q0TOMR_TQS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0TOMR_RgRd(v);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_26))|((( 0) & (MTL_Q0TOMR_Mask_26))<<26);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_7))|((( 0) & (MTL_Q0TOMR_Mask_7))<<7);\
+		v = ((v & MTL_Q0TOMR_TQS_Wr_Mask) | ((data & MTL_Q0TOMR_TQS_Mask)<<16));\
+		MTL_Q0TOMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0TOMR_TQS_UdfRd(data) do {\
+		MTL_Q0TOMR_RgRd(data);\
+		data = ((data >> 16) & MTL_Q0TOMR_TQS_Mask);\
+} while(0)
+
+/*#define MTL_Q0TOMR_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_Q0TOMR_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_Q0TOMR_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_Q0TOMR_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_Q0TOMR_TTC_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0TOMR_RgRd(v);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_26))|((( 0) & (MTL_Q0TOMR_Mask_26))<<26);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_7))|((( 0) & (MTL_Q0TOMR_Mask_7))<<7);\
+		v = ((v & MTL_Q0TOMR_TTC_Wr_Mask) | ((data & MTL_Q0TOMR_TTC_Mask)<<4));\
+		MTL_Q0TOMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0TOMR_TTC_UdfRd(data) do {\
+		MTL_Q0TOMR_RgRd(data);\
+		data = ((data >> 4) & MTL_Q0TOMR_TTC_Mask);\
+} while(0)
+
+/*#define MTL_Q0TOMR_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_Q0TOMR_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_Q0TOMR_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_Q0TOMR_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_Q0TOMR_TXQEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0TOMR_RgRd(v);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_26))|((( 0) & (MTL_Q0TOMR_Mask_26))<<26);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_7))|((( 0) & (MTL_Q0TOMR_Mask_7))<<7);\
+		v = ((v & MTL_Q0TOMR_TXQEN_Wr_Mask) | ((data & MTL_Q0TOMR_TXQEN_Mask)<<2));\
+		MTL_Q0TOMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0TOMR_TXQEN_UdfRd(data) do {\
+		MTL_Q0TOMR_RgRd(data);\
+		data = ((data >> 2) & MTL_Q0TOMR_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_Q0TOMR_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TOMR_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0TOMR_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_Q0TOMR_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_Q0TOMR_TSF_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0TOMR_RgRd(v);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_26))|((( 0) & (MTL_Q0TOMR_Mask_26))<<26);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_7))|((( 0) & (MTL_Q0TOMR_Mask_7))<<7);\
+		v = ((v & MTL_Q0TOMR_TSF_Wr_Mask) | ((data & MTL_Q0TOMR_TSF_Mask)<<1));\
+		MTL_Q0TOMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0TOMR_TSF_UdfRd(data) do {\
+		MTL_Q0TOMR_RgRd(data);\
+		data = ((data >> 1) & MTL_Q0TOMR_TSF_Mask);\
+} while(0)
+
+/*#define MTL_Q0TOMR_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_Q0TOMR_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_Q0TOMR_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_Q0TOMR_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_Q0TOMR_FTQ_UdfWr(data) do {\
+		ULONG v;\
+		MTL_Q0TOMR_RgRd(v);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_26))|((( 0) & (MTL_Q0TOMR_Mask_26))<<26);\
+		v = (v & (MTL_Q0TOMR_RES_Wr_Mask_7))|((( 0) & (MTL_Q0TOMR_Mask_7))<<7);\
+		v = ((v & MTL_Q0TOMR_FTQ_Wr_Mask) | ((data & MTL_Q0TOMR_FTQ_Mask)<<0));\
+		MTL_Q0TOMR_RgWr(v);\
+} while(0)
+
+#define MTL_Q0TOMR_FTQ_UdfRd(data) do {\
+		MTL_Q0TOMR_RgRd(data);\
+		data = ((data >> 0) & MTL_Q0TOMR_FTQ_Mask);\
+} while(0)
+
+
+#define MTL_RQDCM1R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc34))
+
+#define MTL_RQDCM1R_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_RQDCM1R_RgOffAddr);\
+} while(0)
+
+#define MTL_RQDCM1R_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_RQDCM1R_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_RQDCM1R_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM1R_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define  MTL_RQDCM1R_Mask_27 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM1R_Mask_27 (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_27 (ULONG)(~((~(~0<<(1)))<<(27)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_27 (ULONG)(0xf7ffffff)
+
+/*#define  MTL_RQDCM1R_Mask_21 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM1R_Mask_21 (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(3)))<<(21)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_21 (ULONG)(0xff1fffff)
+
+/*#define  MTL_RQDCM1R_Mask_19 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM1R_Mask_19 (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(1)))<<(19)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_19 (ULONG)(0xfff7ffff)
+
+/*#define  MTL_RQDCM1R_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM1R_Mask_13 (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  MTL_RQDCM1R_Mask_11 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM1R_Mask_11 (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(1)))<<(11)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_11 (ULONG)(0xfffff7ff)
+
+/*#define  MTL_RQDCM1R_Mask_5 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM1R_Mask_5 (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(3)))<<(5)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_5 (ULONG)(0xffffff1f)
+
+/*#define  MTL_RQDCM1R_Mask_3 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM1R_Mask_3 (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(1)))<<(3)))*/
+
+#define MTL_RQDCM1R_RES_Wr_Mask_3 (ULONG)(0xfffffff7)
+
+/*#define MTL_RQDCM1R_RXQ7DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM1R_RXQ7DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RXQ7DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (28)))*/
+
+#define MTL_RQDCM1R_RXQ7DADMACH_Wr_Mask (ULONG)(0xefffffff)
+
+#define MTL_RQDCM1R_RXQ7DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ7DADMACH_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ7DADMACH_Mask)<<28));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ7DADMACH_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 28) & MTL_RQDCM1R_RXQ7DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ72DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM1R_RXQ72DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RXQ72DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (24)))*/
+
+#define MTL_RQDCM1R_RXQ72DMA_Wr_Mask (ULONG)(0xf8ffffff)
+
+#define MTL_RQDCM1R_RXQ72DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ72DMA_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ72DMA_Mask)<<24));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ72DMA_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 24) & MTL_RQDCM1R_RXQ72DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ6DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM1R_RXQ6DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RXQ6DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MTL_RQDCM1R_RXQ6DADMACH_Wr_Mask (ULONG)(0xffefffff)
+
+#define MTL_RQDCM1R_RXQ6DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ6DADMACH_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ6DADMACH_Mask)<<20));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ6DADMACH_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 20) & MTL_RQDCM1R_RXQ6DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ26DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM1R_RXQ26DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RXQ26DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MTL_RQDCM1R_RXQ26DMA_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MTL_RQDCM1R_RXQ26DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ26DMA_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ26DMA_Mask)<<16));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ26DMA_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 16) & MTL_RQDCM1R_RXQ26DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ5DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM1R_RXQ5DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RXQ5DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MTL_RQDCM1R_RXQ5DADMACH_Wr_Mask (ULONG)(0xffffefff)
+
+#define MTL_RQDCM1R_RXQ5DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ5DADMACH_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ5DADMACH_Mask)<<12));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ5DADMACH_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 12) & MTL_RQDCM1R_RXQ5DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ25DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM1R_RXQ25DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RXQ25DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_RQDCM1R_RXQ25DMA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_RQDCM1R_RXQ25DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ25DMA_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ25DMA_Mask)<<8));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ25DMA_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 8) & MTL_RQDCM1R_RXQ25DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ4DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM1R_RXQ4DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM1R_RXQ4DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_RQDCM1R_RXQ4DADMACH_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_RQDCM1R_RXQ4DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ4DADMACH_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ4DADMACH_Mask)<<4));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ4DADMACH_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 4) & MTL_RQDCM1R_RXQ4DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM1R_RXQ42DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM1R_RXQ42DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM1R_RXQ42DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_RQDCM1R_RXQ42DMA_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_RQDCM1R_RXQ42DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM1R_RgRd(v);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM1R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM1R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM1R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM1R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM1R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM1R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM1R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM1R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM1R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM1R_RXQ42DMA_Wr_Mask) | ((data & MTL_RQDCM1R_RXQ42DMA_Mask)<<0));\
+		MTL_RQDCM1R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM1R_RXQ42DMA_UdfRd(data) do {\
+		MTL_RQDCM1R_RgRd(data);\
+		data = ((data >> 0) & MTL_RQDCM1R_RXQ42DMA_Mask);\
+} while(0)
+
+
+#define MTL_RQDCM0R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc30))
+
+#define MTL_RQDCM0R_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_RQDCM0R_RgOffAddr);\
+} while(0)
+
+#define MTL_RQDCM0R_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_RQDCM0R_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_RQDCM0R_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM0R_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define  MTL_RQDCM0R_Mask_27 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM0R_Mask_27 (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_27 (ULONG)(~((~(~0<<(1)))<<(27)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_27 (ULONG)(0xf7ffffff)
+
+/*#define  MTL_RQDCM0R_Mask_21 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM0R_Mask_21 (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(3)))<<(21)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_21 (ULONG)(0xff1fffff)
+
+/*#define  MTL_RQDCM0R_Mask_19 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM0R_Mask_19 (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(1)))<<(19)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_19 (ULONG)(0xfff7ffff)
+
+/*#define  MTL_RQDCM0R_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM0R_Mask_13 (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  MTL_RQDCM0R_Mask_11 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM0R_Mask_11 (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(1)))<<(11)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_11 (ULONG)(0xfffff7ff)
+
+/*#define  MTL_RQDCM0R_Mask_5 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_RQDCM0R_Mask_5 (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(3)))<<(5)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_5 (ULONG)(0xffffff1f)
+
+/*#define  MTL_RQDCM0R_Mask_3 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_RQDCM0R_Mask_3 (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(1)))<<(3)))*/
+
+#define MTL_RQDCM0R_RES_Wr_Mask_3 (ULONG)(0xfffffff7)
+
+/*#define MTL_RQDCM0R_RXQ3DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM0R_RXQ3DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RXQ3DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (28)))*/
+
+#define MTL_RQDCM0R_RXQ3DADMACH_Wr_Mask (ULONG)(0xefffffff)
+
+#define MTL_RQDCM0R_RXQ3DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ3DADMACH_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ3DADMACH_Mask)<<28));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ3DADMACH_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 28) & MTL_RQDCM0R_RXQ3DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ32DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM0R_RXQ32DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RXQ32DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (24)))*/
+
+#define MTL_RQDCM0R_RXQ32DMA_Wr_Mask (ULONG)(0xf8ffffff)
+
+#define MTL_RQDCM0R_RXQ32DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ32DMA_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ32DMA_Mask)<<24));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ32DMA_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 24) & MTL_RQDCM0R_RXQ32DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ2DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM0R_RXQ2DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RXQ2DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MTL_RQDCM0R_RXQ2DADMACH_Wr_Mask (ULONG)(0xffefffff)
+
+#define MTL_RQDCM0R_RXQ2DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ2DADMACH_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ2DADMACH_Mask)<<20));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ2DADMACH_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 20) & MTL_RQDCM0R_RXQ2DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ22DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM0R_RXQ22DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RXQ22DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MTL_RQDCM0R_RXQ22DMA_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MTL_RQDCM0R_RXQ22DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ22DMA_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ22DMA_Mask)<<16));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ22DMA_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 16) & MTL_RQDCM0R_RXQ22DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ1DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM0R_RXQ1DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RXQ1DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MTL_RQDCM0R_RXQ1DADMACH_Wr_Mask (ULONG)(0xffffefff)
+
+#define MTL_RQDCM0R_RXQ1DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ1DADMACH_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ1DADMACH_Mask)<<12));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ1DADMACH_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 12) & MTL_RQDCM0R_RXQ1DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ12DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM0R_RXQ12DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RXQ12DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_RQDCM0R_RXQ12DMA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_RQDCM0R_RXQ12DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ12DMA_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ12DMA_Mask)<<8));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ12DMA_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 8) & MTL_RQDCM0R_RXQ12DMA_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ0DADMACH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_RQDCM0R_RXQ0DADMACH_Mask (ULONG)(0x1)
+
+/*#define MTL_RQDCM0R_RXQ0DADMACH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_RQDCM0R_RXQ0DADMACH_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_RQDCM0R_RXQ0DADMACH_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ0DADMACH_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ0DADMACH_Mask)<<4));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ0DADMACH_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 4) & MTL_RQDCM0R_RXQ0DADMACH_Mask);\
+} while(0)
+
+/*#define MTL_RQDCM0R_RXQ02DMA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_RQDCM0R_RXQ02DMA_Mask (ULONG)(0x7)
+
+/*#define MTL_RQDCM0R_RXQ02DMA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_RQDCM0R_RXQ02DMA_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_RQDCM0R_RXQ02DMA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_RQDCM0R_RgRd(v);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_29))|((( 0) & (MTL_RQDCM0R_Mask_29))<<29);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_27))|((( 0) & (MTL_RQDCM0R_Mask_27))<<27);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_21))|((( 0) & (MTL_RQDCM0R_Mask_21))<<21);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_19))|((( 0) & (MTL_RQDCM0R_Mask_19))<<19);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_13))|((( 0) & (MTL_RQDCM0R_Mask_13))<<13);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_11))|((( 0) & (MTL_RQDCM0R_Mask_11))<<11);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_5))|((( 0) & (MTL_RQDCM0R_Mask_5))<<5);\
+		v = (v & (MTL_RQDCM0R_RES_Wr_Mask_3))|((( 0) & (MTL_RQDCM0R_Mask_3))<<3);\
+		v = ((v & MTL_RQDCM0R_RXQ02DMA_Wr_Mask) | ((data & MTL_RQDCM0R_RXQ02DMA_Mask)<<0));\
+		MTL_RQDCM0R_RgWr(v);\
+} while(0)
+
+#define MTL_RQDCM0R_RXQ02DMA_UdfRd(data) do {\
+		MTL_RQDCM0R_RgRd(data);\
+		data = ((data >> 0) & MTL_RQDCM0R_RXQ02DMA_Mask);\
+} while(0)
+
+
+#define MTL_FDDR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc10))
+
+#define MTL_FDDR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_FDDR_RgOffAddr);\
+} while(0)
+
+#define MTL_FDDR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_FDDR_RgOffAddr);\
+} while(0)
+
+#define MTL_FDDR_FDBGDATA_UdfWr(data) do {\
+		MTL_FDDR_RgWr(data);\
+} while(0)
+
+#define MTL_FDDR_FDBGDATA_UdfRd(data) do {\
+		MTL_FDDR_RgRd(data);\
+} while(0)
+
+
+#define MTL_FDACS_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc08))
+
+#define MTL_FDACS_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_FDACS_RgOffAddr);\
+} while(0)
+
+#define MTL_FDACS_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_FDACS_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_FDACS_Mask_16 (ULONG)(~(~0<<(16)))*/
+
+#define  MTL_FDACS_Mask_16 (ULONG)(0xffff)
+
+/*#define MTL_FDACS_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(16)))<<(16)))*/
+
+#define MTL_FDACS_RES_Wr_Mask_16 (ULONG)(0xffff)
+
+/*#define  MTL_FDACS_Mask_7 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_FDACS_Mask_7 (ULONG)(0x1)
+
+/*#define MTL_FDACS_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(1)))<<(7)))*/
+
+#define MTL_FDACS_RES_Wr_Mask_7 (ULONG)(0xffffff7f)
+
+/*#define  MTL_FDACS_Mask_4 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_FDACS_Mask_4 (ULONG)(0x1)
+
+/*#define MTL_FDACS_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(1)))<<(4)))*/
+
+#define MTL_FDACS_RES_Wr_Mask_4 (ULONG)(0xffffffef)
+
+/*#define MTL_FDACS_STSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_STSE_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_STSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MTL_FDACS_STSE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MTL_FDACS_STSE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_STSE_Wr_Mask) | ((data & MTL_FDACS_STSE_Mask)<<15));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_STSE_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 15) & MTL_FDACS_STSE_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_PKTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_PKTE_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_PKTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MTL_FDACS_PKTE_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MTL_FDACS_PKTE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_PKTE_Wr_Mask) | ((data & MTL_FDACS_PKTE_Mask)<<14));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_PKTE_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 14) & MTL_FDACS_PKTE_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_FIFOSEL_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_FDACS_FIFOSEL_Mask (ULONG)(0x3)
+
+/*#define MTL_FDACS_FIFOSEL_Wr_Mask (ULONG)(~((~(~0 << (2))) << (12)))*/
+
+#define MTL_FDACS_FIFOSEL_Wr_Mask (ULONG)(0xffffcfff)
+
+#define MTL_FDACS_FIFOSEL_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_FIFOSEL_Wr_Mask) | ((data & MTL_FDACS_FIFOSEL_Mask)<<12));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_FIFOSEL_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 12) & MTL_FDACS_FIFOSEL_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_FIFOWREN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_FIFOWREN_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_FIFOWREN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_FDACS_FIFOWREN_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_FDACS_FIFOWREN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_FIFOWREN_Wr_Mask) | ((data & MTL_FDACS_FIFOWREN_Mask)<<11));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_FIFOWREN_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 11) & MTL_FDACS_FIFOWREN_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_FIFORDEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_FIFORDEN_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_FIFORDEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MTL_FDACS_FIFORDEN_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MTL_FDACS_FIFORDEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_FIFORDEN_Wr_Mask) | ((data & MTL_FDACS_FIFORDEN_Mask)<<10));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_FIFORDEN_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 10) & MTL_FDACS_FIFORDEN_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_RSTSEL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_RSTSEL_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_RSTSEL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MTL_FDACS_RSTSEL_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MTL_FDACS_RSTSEL_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_RSTSEL_Wr_Mask) | ((data & MTL_FDACS_RSTSEL_Mask)<<9));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_RSTSEL_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 9) & MTL_FDACS_RSTSEL_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_RSTALL_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_RSTALL_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_RSTALL_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MTL_FDACS_RSTALL_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MTL_FDACS_RSTALL_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_RSTALL_Wr_Mask) | ((data & MTL_FDACS_RSTALL_Mask)<<8));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_RSTALL_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 8) & MTL_FDACS_RSTALL_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_PKTSTATE_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_FDACS_PKTSTATE_Mask (ULONG)(0x3)
+
+/*#define MTL_FDACS_PKTSTATE_Wr_Mask (ULONG)(~((~(~0 << (2))) << (5)))*/
+
+#define MTL_FDACS_PKTSTATE_Wr_Mask (ULONG)(0xffffff9f)
+
+#define MTL_FDACS_PKTSTATE_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_PKTSTATE_Wr_Mask) | ((data & MTL_FDACS_PKTSTATE_Mask)<<5));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_PKTSTATE_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 5) & MTL_FDACS_PKTSTATE_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_BYTEEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_FDACS_BYTEEN_Mask (ULONG)(0x3)
+
+/*#define MTL_FDACS_BYTEEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_FDACS_BYTEEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_FDACS_BYTEEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_BYTEEN_Wr_Mask) | ((data & MTL_FDACS_BYTEEN_Mask)<<2));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_BYTEEN_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 2) & MTL_FDACS_BYTEEN_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_DEGMOD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_DEGMOD_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_DEGMOD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_FDACS_DEGMOD_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_FDACS_DEGMOD_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_DEGMOD_Wr_Mask) | ((data & MTL_FDACS_DEGMOD_Mask)<<1));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_DEGMOD_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 1) & MTL_FDACS_DEGMOD_Mask);\
+} while(0)
+
+/*#define MTL_FDACS_FDBGEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_FDACS_FDBGEN_Mask (ULONG)(0x1)
+
+/*#define MTL_FDACS_FDBGEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_FDACS_FDBGEN_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_FDACS_FDBGEN_UdfWr(data) do {\
+		ULONG v;\
+		MTL_FDACS_RgRd(v);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_16))|((( 0) & (MTL_FDACS_Mask_16))<<16);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_7))|((( 0) & (MTL_FDACS_Mask_7))<<7);\
+		v = (v & (MTL_FDACS_RES_Wr_Mask_4))|((( 0) & (MTL_FDACS_Mask_4))<<4);\
+		v = ((v & MTL_FDACS_FDBGEN_Wr_Mask) | ((data & MTL_FDACS_FDBGEN_Mask)<<0));\
+		MTL_FDACS_RgWr(v);\
+} while(0)
+
+#define MTL_FDACS_FDBGEN_UdfRd(data) do {\
+		MTL_FDACS_RgRd(data);\
+		data = ((data >> 0) & MTL_FDACS_FDBGEN_Mask);\
+} while(0)
+
+
+#define MTL_OMR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc00))
+
+#define MTL_OMR_RgWr(data) do {\
+		iowrite32(data, (void *)MTL_OMR_RgOffAddr);\
+} while(0)
+
+#define MTL_OMR_RgRd(data) do {\
+		(data) = ioread32((void *)MTL_OMR_RgOffAddr);\
+} while(0)
+
+/*#define  MTL_OMR_Mask_7 (ULONG)(~(~0<<(25)))*/
+
+#define  MTL_OMR_Mask_7 (ULONG)(0x1ffffff)
+
+/*#define MTL_OMR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(25)))<<(7)))*/
+
+#define MTL_OMR_RES_Wr_Mask_7 (ULONG)(0x7f)
+
+/*#define  MTL_OMR_Mask_0 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_OMR_Mask_0 (ULONG)(0x1)
+
+/*#define MTL_OMR_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(1)))<<(0)))*/
+
+#define MTL_OMR_RES_Wr_Mask_0 (ULONG)(0xfffffffe)
+
+/*#define MTL_OMR_SCHALG_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_OMR_SCHALG_Mask (ULONG)(0x3)
+
+/*#define MTL_OMR_SCHALG_Wr_Mask (ULONG)(~((~(~0 << (2))) << (5)))*/
+
+#define MTL_OMR_SCHALG_Wr_Mask (ULONG)(0xffffff9f)
+
+#define MTL_OMR_SCHALG_UdfWr(data) do {\
+		ULONG v;\
+		MTL_OMR_RgRd(v);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_7))|((( 0) & (MTL_OMR_Mask_7))<<7);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_0))|((( 0) & (MTL_OMR_Mask_0))<<0);\
+		v = ((v & MTL_OMR_SCHALG_Wr_Mask) | ((data & MTL_OMR_SCHALG_Mask)<<5));\
+		MTL_OMR_RgWr(v);\
+} while(0)
+
+#define MTL_OMR_SCHALG_UdfRd(data) do {\
+		MTL_OMR_RgRd(data);\
+		data = ((data >> 5) & MTL_OMR_SCHALG_Mask);\
+} while(0)
+
+/*#define MTL_OMR_RAA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_OMR_RAA_Mask (ULONG)(0x7)
+
+/*#define MTL_OMR_RAA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (2)))*/
+
+#define MTL_OMR_RAA_Wr_Mask (ULONG)(0xffffffe3)
+
+#define MTL_OMR_RAA_UdfWr(data) do {\
+		ULONG v;\
+		MTL_OMR_RgRd(v);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_7))|((( 0) & (MTL_OMR_Mask_7))<<7);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_0))|((( 0) & (MTL_OMR_Mask_0))<<0);\
+		v = ((v & MTL_OMR_RAA_Wr_Mask) | ((data & MTL_OMR_RAA_Mask)<<2));\
+		MTL_OMR_RgWr(v);\
+} while(0)
+
+#define MTL_OMR_RAA_UdfRd(data) do {\
+		MTL_OMR_RgRd(data);\
+		data = ((data >> 2) & MTL_OMR_RAA_Mask);\
+} while(0)
+
+/*#define MTL_OMR_DTXSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_OMR_DTXSTS_Mask (ULONG)(0x1)
+
+/*#define MTL_OMR_DTXSTS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_OMR_DTXSTS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_OMR_DTXSTS_UdfWr(data) do {\
+		ULONG v;\
+		MTL_OMR_RgRd(v);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_7))|((( 0) & (MTL_OMR_Mask_7))<<7);\
+		v = (v & (MTL_OMR_RES_Wr_Mask_0))|((( 0) & (MTL_OMR_Mask_0))<<0);\
+		v = ((v & MTL_OMR_DTXSTS_Wr_Mask) | ((data & MTL_OMR_DTXSTS_Mask)<<1));\
+		MTL_OMR_RgWr(v);\
+} while(0)
+
+#define MTL_OMR_DTXSTS_UdfRd(data) do {\
+		MTL_OMR_RgRd(data);\
+		data = ((data >> 1) & MTL_OMR_DTXSTS_Mask);\
+} while(0)
+
+
+#define MAC_RQC3R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xac))
+
+#define MAC_RQC3R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RQC3R_RgOffAddr);\
+} while(0)
+
+#define MAC_RQC3R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RQC3R_RgOffAddr);\
+} while(0)
+
+/*#define MAC_RQC3R_PSRQ7_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC3R_PSRQ7_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC3R_PSRQ7_Wr_Mask (ULONG)(~((~(~0 << (8))) << (24)))*/
+
+#define MAC_RQC3R_PSRQ7_Wr_Mask (ULONG)(0xffffff)
+
+#define MAC_RQC3R_PSRQ7_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC3R_RgRd(v);\
+		v = ((v & MAC_RQC3R_PSRQ7_Wr_Mask) | ((data & MAC_RQC3R_PSRQ7_Mask)<<24));\
+		MAC_RQC3R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC3R_PSRQ7_UdfRd(data) do {\
+		MAC_RQC3R_RgRd(data);\
+		data = ((data >> 24) & MAC_RQC3R_PSRQ7_Mask);\
+} while(0)
+
+/*#define MAC_RQC3R_PSRQ6_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC3R_PSRQ6_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC3R_PSRQ6_Wr_Mask (ULONG)(~((~(~0 << (8))) << (16)))*/
+
+#define MAC_RQC3R_PSRQ6_Wr_Mask (ULONG)(0xff00ffff)
+
+#define MAC_RQC3R_PSRQ6_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC3R_RgRd(v);\
+		v = ((v & MAC_RQC3R_PSRQ6_Wr_Mask) | ((data & MAC_RQC3R_PSRQ6_Mask)<<16));\
+		MAC_RQC3R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC3R_PSRQ6_UdfRd(data) do {\
+		MAC_RQC3R_RgRd(data);\
+		data = ((data >> 16) & MAC_RQC3R_PSRQ6_Mask);\
+} while(0)
+
+/*#define MAC_RQC3R_PSRQ5_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC3R_PSRQ5_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC3R_PSRQ5_Wr_Mask (ULONG)(~((~(~0 << (8))) << (8)))*/
+
+#define MAC_RQC3R_PSRQ5_Wr_Mask (ULONG)(0xffff00ff)
+
+#define MAC_RQC3R_PSRQ5_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC3R_RgRd(v);\
+		v = ((v & MAC_RQC3R_PSRQ5_Wr_Mask) | ((data & MAC_RQC3R_PSRQ5_Mask)<<8));\
+		MAC_RQC3R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC3R_PSRQ5_UdfRd(data) do {\
+		MAC_RQC3R_RgRd(data);\
+		data = ((data >> 8) & MAC_RQC3R_PSRQ5_Mask);\
+} while(0)
+
+/*#define MAC_RQC3R_PSRQ4_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC3R_PSRQ4_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC3R_PSRQ4_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define MAC_RQC3R_PSRQ4_Wr_Mask (ULONG)(0xffffff00)
+
+#define MAC_RQC3R_PSRQ4_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC3R_RgRd(v);\
+		v = ((v & MAC_RQC3R_PSRQ4_Wr_Mask) | ((data & MAC_RQC3R_PSRQ4_Mask)<<0));\
+		MAC_RQC3R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC3R_PSRQ4_UdfRd(data) do {\
+		MAC_RQC3R_RgRd(data);\
+		data = ((data >> 0) & MAC_RQC3R_PSRQ4_Mask);\
+} while(0)
+
+
+#define MAC_RQC2R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa8))
+
+#define MAC_RQC2R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RQC2R_RgOffAddr);\
+} while(0)
+
+#define MAC_RQC2R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RQC2R_RgOffAddr);\
+} while(0)
+
+/*#define MAC_RQC2R_PSRQ3_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC2R_PSRQ3_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC2R_PSRQ3_Wr_Mask (ULONG)(~((~(~0 << (8))) << (24)))*/
+
+#define MAC_RQC2R_PSRQ3_Wr_Mask (ULONG)(0xffffff)
+
+#define MAC_RQC2R_PSRQ3_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC2R_RgRd(v);\
+		v = ((v & MAC_RQC2R_PSRQ3_Wr_Mask) | ((data & MAC_RQC2R_PSRQ3_Mask)<<24));\
+		MAC_RQC2R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC2R_PSRQ3_UdfRd(data) do {\
+		MAC_RQC2R_RgRd(data);\
+		data = ((data >> 24) & MAC_RQC2R_PSRQ3_Mask);\
+} while(0)
+
+/*#define MAC_RQC2R_PSRQ2_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC2R_PSRQ2_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC2R_PSRQ2_Wr_Mask (ULONG)(~((~(~0 << (8))) << (16)))*/
+
+#define MAC_RQC2R_PSRQ2_Wr_Mask (ULONG)(0xff00ffff)
+
+#define MAC_RQC2R_PSRQ2_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC2R_RgRd(v);\
+		v = ((v & MAC_RQC2R_PSRQ2_Wr_Mask) | ((data & MAC_RQC2R_PSRQ2_Mask)<<16));\
+		MAC_RQC2R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC2R_PSRQ2_UdfRd(data) do {\
+		MAC_RQC2R_RgRd(data);\
+		data = ((data >> 16) & MAC_RQC2R_PSRQ2_Mask);\
+} while(0)
+
+/*#define MAC_RQC2R_PSRQ1_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC2R_PSRQ1_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC2R_PSRQ1_Wr_Mask (ULONG)(~((~(~0 << (8))) << (8)))*/
+
+#define MAC_RQC2R_PSRQ1_Wr_Mask (ULONG)(0xffff00ff)
+
+#define MAC_RQC2R_PSRQ1_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC2R_RgRd(v);\
+		v = ((v & MAC_RQC2R_PSRQ1_Wr_Mask) | ((data & MAC_RQC2R_PSRQ1_Mask)<<8));\
+		MAC_RQC2R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC2R_PSRQ1_UdfRd(data) do {\
+		MAC_RQC2R_RgRd(data);\
+		data = ((data >> 8) & MAC_RQC2R_PSRQ1_Mask);\
+} while(0)
+
+/*#define MAC_RQC2R_PSRQ0_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_RQC2R_PSRQ0_Mask (ULONG)(0xff)
+
+/*#define MAC_RQC2R_PSRQ0_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define MAC_RQC2R_PSRQ0_Wr_Mask (ULONG)(0xffffff00)
+
+#define MAC_RQC2R_PSRQ0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_RQC2R_RgRd(v);\
+		v = ((v & MAC_RQC2R_PSRQ0_Wr_Mask) | ((data & MAC_RQC2R_PSRQ0_Mask)<<0));\
+		MAC_RQC2R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC2R_PSRQ0_UdfRd(data) do {\
+		MAC_RQC2R_RgRd(data);\
+		data = ((data >> 0) & MAC_RQC2R_PSRQ0_Mask);\
+} while(0)
+
+
+#define MAC_RQC1R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa4))
+
+#define MAC_RQC1R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RQC1R_RgOffAddr);\
+} while(0)
+
+#define MAC_RQC1R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RQC1R_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_RQC1R_Mask_11 (ULONG)(~(~0<<(21)))*/
+
+#define  MAC_RQC1R_Mask_11 (ULONG)(0x1fffff)
+
+/*#define MAC_RQC1R_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(21)))<<(11)))*/
+
+#define MAC_RQC1R_RES_Wr_Mask_11 (ULONG)(0x7ff)
+
+/*#define  MAC_RQC1R_Mask_7 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_RQC1R_Mask_7 (ULONG)(0x1)
+
+/*#define MAC_RQC1R_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(1)))<<(7)))*/
+
+#define MAC_RQC1R_RES_Wr_Mask_7 (ULONG)(0xffffff7f)
+
+/*#define  MAC_RQC1R_Mask_3 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_RQC1R_Mask_3 (ULONG)(0x1)
+
+/*#define MAC_RQC1R_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(1)))<<(3)))*/
+
+#define MAC_RQC1R_RES_Wr_Mask_3 (ULONG)(0xfffffff7)
+
+/*#define MAC_RQC1R_DCBCPQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_RQC1R_DCBCPQ_Mask (ULONG)(0x7)
+
+/*#define MAC_RQC1R_DCBCPQ_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MAC_RQC1R_DCBCPQ_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MAC_RQC1R_DCBCPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC1R_RgRd(v);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_11))|((( 0) & (MAC_RQC1R_Mask_11))<<11);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_7))|((( 0) & (MAC_RQC1R_Mask_7))<<7);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_3))|((( 0) & (MAC_RQC1R_Mask_3))<<3);\
+		v = ((v & MAC_RQC1R_DCBCPQ_Wr_Mask) | ((data & MAC_RQC1R_DCBCPQ_Mask)<<8));\
+		MAC_RQC1R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC1R_DCBCPQ_UdfRd(data) do {\
+		MAC_RQC1R_RgRd(data);\
+		data = ((data >> 8) & MAC_RQC1R_DCBCPQ_Mask);\
+} while(0)
+
+/*#define MAC_RQC1R_AVPTPQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_RQC1R_AVPTPQ_Mask (ULONG)(0x7)
+
+/*#define MAC_RQC1R_AVPTPQ_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_RQC1R_AVPTPQ_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_RQC1R_AVPTPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC1R_RgRd(v);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_11))|((( 0) & (MAC_RQC1R_Mask_11))<<11);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_7))|((( 0) & (MAC_RQC1R_Mask_7))<<7);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_3))|((( 0) & (MAC_RQC1R_Mask_3))<<3);\
+		v = ((v & MAC_RQC1R_AVPTPQ_Wr_Mask) | ((data & MAC_RQC1R_AVPTPQ_Mask)<<4));\
+		MAC_RQC1R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC1R_AVPTPQ_UdfRd(data) do {\
+		MAC_RQC1R_RgRd(data);\
+		data = ((data >> 4) & MAC_RQC1R_AVPTPQ_Mask);\
+} while(0)
+
+/*#define MAC_RQC1R_AVUCPQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_RQC1R_AVUCPQ_Mask (ULONG)(0x7)
+
+/*#define MAC_RQC1R_AVUCPQ_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MAC_RQC1R_AVUCPQ_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MAC_RQC1R_AVUCPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC1R_RgRd(v);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_11))|((( 0) & (MAC_RQC1R_Mask_11))<<11);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_7))|((( 0) & (MAC_RQC1R_Mask_7))<<7);\
+		v = (v & (MAC_RQC1R_RES_Wr_Mask_3))|((( 0) & (MAC_RQC1R_Mask_3))<<3);\
+		v = ((v & MAC_RQC1R_AVUCPQ_Wr_Mask) | ((data & MAC_RQC1R_AVUCPQ_Mask)<<0));\
+		MAC_RQC1R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC1R_AVUCPQ_UdfRd(data) do {\
+		MAC_RQC1R_RgRd(data);\
+		data = ((data >> 0) & MAC_RQC1R_AVUCPQ_Mask);\
+} while(0)
+
+
+#define MAC_RQC0R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xa0))
+
+#define MAC_RQC0R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RQC0R_RgOffAddr);\
+} while(0)
+
+#define MAC_RQC0R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RQC0R_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_RQC0R_Mask_16 (ULONG)(~(~0<<(16)))*/
+
+#define  MAC_RQC0R_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_RQC0R_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(16)))<<(16)))*/
+
+#define MAC_RQC0R_RES_Wr_Mask_16 (ULONG)(0xffff)
+
+/*#define MAC_RQC0R_RXQEN7_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN7_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN7_Wr_Mask (ULONG)(~((~(~0 << (2))) << (14)))*/
+
+#define MAC_RQC0R_RXQEN7_Wr_Mask (ULONG)(0xffff3fff)
+
+#define MAC_RQC0R_RXQEN7_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN7_Wr_Mask) | ((data & MAC_RQC0R_RXQEN7_Mask)<<14));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN7_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 14) & MAC_RQC0R_RXQEN7_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN6_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN6_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN6_Wr_Mask (ULONG)(~((~(~0 << (2))) << (12)))*/
+
+#define MAC_RQC0R_RXQEN6_Wr_Mask (ULONG)(0xffffcfff)
+
+#define MAC_RQC0R_RXQEN6_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN6_Wr_Mask) | ((data & MAC_RQC0R_RXQEN6_Mask)<<12));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN6_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 12) & MAC_RQC0R_RXQEN6_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN5_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN5_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN5_Wr_Mask (ULONG)(~((~(~0 << (2))) << (10)))*/
+
+#define MAC_RQC0R_RXQEN5_Wr_Mask (ULONG)(0xfffff3ff)
+
+#define MAC_RQC0R_RXQEN5_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN5_Wr_Mask) | ((data & MAC_RQC0R_RXQEN5_Mask)<<10));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN5_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 10) & MAC_RQC0R_RXQEN5_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN4_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN4_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN4_Wr_Mask (ULONG)(~((~(~0 << (2))) << (8)))*/
+
+#define MAC_RQC0R_RXQEN4_Wr_Mask (ULONG)(0xfffffcff)
+
+#define MAC_RQC0R_RXQEN4_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN4_Wr_Mask) | ((data & MAC_RQC0R_RXQEN4_Mask)<<8));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN4_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 8) & MAC_RQC0R_RXQEN4_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN3_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN3_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN3_Wr_Mask (ULONG)(~((~(~0 << (2))) << (6)))*/
+
+#define MAC_RQC0R_RXQEN3_Wr_Mask (ULONG)(0xffffff3f)
+
+#define MAC_RQC0R_RXQEN3_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN3_Wr_Mask) | ((data & MAC_RQC0R_RXQEN3_Mask)<<6));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN3_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 6) & MAC_RQC0R_RXQEN3_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN2_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN2_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN2_Wr_Mask (ULONG)(~((~(~0 << (2))) << (4)))*/
+
+#define MAC_RQC0R_RXQEN2_Wr_Mask (ULONG)(0xffffffcf)
+
+#define MAC_RQC0R_RXQEN2_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN2_Wr_Mask) | ((data & MAC_RQC0R_RXQEN2_Mask)<<4));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN2_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 4) & MAC_RQC0R_RXQEN2_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN1_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN1_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN1_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MAC_RQC0R_RXQEN1_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MAC_RQC0R_RXQEN1_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN1_Wr_Mask) | ((data & MAC_RQC0R_RXQEN1_Mask)<<2));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN1_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 2) & MAC_RQC0R_RXQEN1_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN0_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN0_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN0_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MAC_RQC0R_RXQEN0_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MAC_RQC0R_RXQEN0_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN0_Wr_Mask) | ((data & MAC_RQC0R_RXQEN0_Mask)<<0));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN0_UdfRd(data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> 0) & MAC_RQC0R_RXQEN0_Mask);\
+} while(0)
+
+/*#define MAC_RQC0R_RXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_RQC0R_RXQEN_Mask (ULONG)(0x3)
+
+/*#define MAC_RQC0R_RXQEN_Wr_Mask(i) (ULONG)(~((~(~0 << (2))) << (0 + (i * 2))))*/
+
+#define MAC_RQC0R_RXQEN_Wr_Mask(i)  (ULONG)(~((~(~0 << (2))) << (0 + (i * 2))))
+
+#define MAC_RQC0R_RXQEN_UdfWr(i, data) do {\
+		ULONG v;\
+		MAC_RQC0R_RgRd(v);\
+		v = (v & (MAC_RQC0R_RES_Wr_Mask_16))|((( 0) & (MAC_RQC0R_Mask_16))<<16);\
+		v = ((v & MAC_RQC0R_RXQEN_Wr_Mask(i)) | ((data & MAC_RQC0R_RXQEN_Mask)<<(0 + i*2)));\
+		MAC_RQC0R_RgWr(v);\
+} while(0)
+
+#define MAC_RQC0R_RXQEN_UdfRd(i, data) do {\
+		MAC_RQC0R_RgRd(data);\
+		data = ((data >> (0 + (i*2))) & MAC_RQC0R_RXQEN_Mask);\
+} while(0)
+
+
+#define MAC_TQPM1R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x9c))
+
+#define MAC_TQPM1R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TQPM1R_RgOffAddr);\
+} while(0)
+
+#define MAC_TQPM1R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TQPM1R_RgOffAddr);\
+} while(0)
+
+/*#define MAC_TQPM1R_PSTQ7_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM1R_PSTQ7_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM1R_PSTQ7_Wr_Mask (ULONG)(~((~(~0 << (8))) << (24)))*/
+
+#define MAC_TQPM1R_PSTQ7_Wr_Mask (ULONG)(0xffffff)
+
+#define MAC_TQPM1R_PSTQ7_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM1R_RgRd(v);\
+		v = ((v & MAC_TQPM1R_PSTQ7_Wr_Mask) | ((data & MAC_TQPM1R_PSTQ7_Mask)<<24));\
+		MAC_TQPM1R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM1R_PSTQ7_UdfRd(data) do {\
+		MAC_TQPM1R_RgRd(data);\
+		data = ((data >> 24) & MAC_TQPM1R_PSTQ7_Mask);\
+} while(0)
+
+/*#define MAC_TQPM1R_PSTQ6_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM1R_PSTQ6_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM1R_PSTQ6_Wr_Mask (ULONG)(~((~(~0 << (8))) << (16)))*/
+
+#define MAC_TQPM1R_PSTQ6_Wr_Mask (ULONG)(0xff00ffff)
+
+#define MAC_TQPM1R_PSTQ6_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM1R_RgRd(v);\
+		v = ((v & MAC_TQPM1R_PSTQ6_Wr_Mask) | ((data & MAC_TQPM1R_PSTQ6_Mask)<<16));\
+		MAC_TQPM1R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM1R_PSTQ6_UdfRd(data) do {\
+		MAC_TQPM1R_RgRd(data);\
+		data = ((data >> 16) & MAC_TQPM1R_PSTQ6_Mask);\
+} while(0)
+
+/*#define MAC_TQPM1R_PSTQ5_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM1R_PSTQ5_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM1R_PSTQ5_Wr_Mask (ULONG)(~((~(~0 << (8))) << (8)))*/
+
+#define MAC_TQPM1R_PSTQ5_Wr_Mask (ULONG)(0xffff00ff)
+
+#define MAC_TQPM1R_PSTQ5_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM1R_RgRd(v);\
+		v = ((v & MAC_TQPM1R_PSTQ5_Wr_Mask) | ((data & MAC_TQPM1R_PSTQ5_Mask)<<8));\
+		MAC_TQPM1R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM1R_PSTQ5_UdfRd(data) do {\
+		MAC_TQPM1R_RgRd(data);\
+		data = ((data >> 8) & MAC_TQPM1R_PSTQ5_Mask);\
+} while(0)
+
+/*#define MAC_TQPM1R_PSTQ4_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM1R_PSTQ4_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM1R_PSTQ4_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define MAC_TQPM1R_PSTQ4_Wr_Mask (ULONG)(0xffffff00)
+
+#define MAC_TQPM1R_PSTQ4_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM1R_RgRd(v);\
+		v = ((v & MAC_TQPM1R_PSTQ4_Wr_Mask) | ((data & MAC_TQPM1R_PSTQ4_Mask)<<0));\
+		MAC_TQPM1R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM1R_PSTQ4_UdfRd(data) do {\
+		MAC_TQPM1R_RgRd(data);\
+		data = ((data >> 0) & MAC_TQPM1R_PSTQ4_Mask);\
+} while(0)
+
+
+#define MAC_TQPM0R_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x98))
+
+#define MAC_TQPM0R_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_TQPM0R_RgOffAddr);\
+} while(0)
+
+#define MAC_TQPM0R_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_TQPM0R_RgOffAddr);\
+} while(0)
+
+/*#define MAC_TQPM0R_PSTQ3_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM0R_PSTQ3_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM0R_PSTQ3_Wr_Mask (ULONG)(~((~(~0 << (8))) << (24)))*/
+
+#define MAC_TQPM0R_PSTQ3_Wr_Mask (ULONG)(0xffffff)
+
+#define MAC_TQPM0R_PSTQ3_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM0R_RgRd(v);\
+		v = ((v & MAC_TQPM0R_PSTQ3_Wr_Mask) | ((data & MAC_TQPM0R_PSTQ3_Mask)<<24));\
+		MAC_TQPM0R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM0R_PSTQ3_UdfRd(data) do {\
+		MAC_TQPM0R_RgRd(data);\
+		data = ((data >> 24) & MAC_TQPM0R_PSTQ3_Mask);\
+} while(0)
+
+/*#define MAC_TQPM0R_PSTQ2_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM0R_PSTQ2_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM0R_PSTQ2_Wr_Mask (ULONG)(~((~(~0 << (8))) << (16)))*/
+
+#define MAC_TQPM0R_PSTQ2_Wr_Mask (ULONG)(0xff00ffff)
+
+#define MAC_TQPM0R_PSTQ2_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM0R_RgRd(v);\
+		v = ((v & MAC_TQPM0R_PSTQ2_Wr_Mask) | ((data & MAC_TQPM0R_PSTQ2_Mask)<<16));\
+		MAC_TQPM0R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM0R_PSTQ2_UdfRd(data) do {\
+		MAC_TQPM0R_RgRd(data);\
+		data = ((data >> 16) & MAC_TQPM0R_PSTQ2_Mask);\
+} while(0)
+
+/*#define MAC_TQPM0R_PSTQ1_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM0R_PSTQ1_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM0R_PSTQ1_Wr_Mask (ULONG)(~((~(~0 << (8))) << (8)))*/
+
+#define MAC_TQPM0R_PSTQ1_Wr_Mask (ULONG)(0xffff00ff)
+
+#define MAC_TQPM0R_PSTQ1_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM0R_RgRd(v);\
+		v = ((v & MAC_TQPM0R_PSTQ1_Wr_Mask) | ((data & MAC_TQPM0R_PSTQ1_Mask)<<8));\
+		MAC_TQPM0R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM0R_PSTQ1_UdfRd(data) do {\
+		MAC_TQPM0R_RgRd(data);\
+		data = ((data >> 8) & MAC_TQPM0R_PSTQ1_Mask);\
+} while(0)
+
+/*#define MAC_TQPM0R_PSTQ0_Mask (ULONG)(~(~0<<(8)))*/
+
+#define MAC_TQPM0R_PSTQ0_Mask (ULONG)(0xff)
+
+/*#define MAC_TQPM0R_PSTQ0_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define MAC_TQPM0R_PSTQ0_Wr_Mask (ULONG)(0xffffff00)
+
+#define MAC_TQPM0R_PSTQ0_UdfWr(data) do{\
+		ULONG v;\
+		MAC_TQPM0R_RgRd(v);\
+		v = ((v & MAC_TQPM0R_PSTQ0_Wr_Mask) | ((data & MAC_TQPM0R_PSTQ0_Mask)<<0));\
+		MAC_TQPM0R_RgWr(v);\
+} while(0)
+
+#define MAC_TQPM0R_PSTQ0_UdfRd(data) do {\
+		MAC_TQPM0R_RgRd(data);\
+		data = ((data >> 0) & MAC_TQPM0R_PSTQ0_Mask);\
+} while(0)
+
+
+#define MAC_RFCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x90))
+
+#define MAC_RFCR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_RFCR_RgOffAddr);\
+} while(0)
+
+#define MAC_RFCR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_RFCR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_RFCR_Mask_9 (ULONG)(~(~0<<(23)))*/
+
+#define  MAC_RFCR_Mask_9 (ULONG)(0x7fffff)
+
+/*#define MAC_RFCR_RES_Wr_Mask_9 (ULONG)(~((~(~0<<(23)))<<(9)))*/
+
+#define MAC_RFCR_RES_Wr_Mask_9 (ULONG)(0x1ff)
+
+/*#define  MAC_RFCR_Mask_2 (ULONG)(~(~0<<(6)))*/
+
+#define  MAC_RFCR_Mask_2 (ULONG)(0x3f)
+
+/*#define MAC_RFCR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(6)))<<(2)))*/
+
+#define MAC_RFCR_RES_Wr_Mask_2 (ULONG)(0xffffff03)
+
+/*#define MAC_RFCR_PFCE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RFCR_PFCE_Mask (ULONG)(0x1)
+
+/*#define MAC_RFCR_PFCE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MAC_RFCR_PFCE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MAC_RFCR_PFCE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RFCR_RgRd(v);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_9))|((( 0) & (MAC_RFCR_Mask_9))<<9);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_2))|((( 0) & (MAC_RFCR_Mask_2))<<2);\
+		v = ((v & MAC_RFCR_PFCE_Wr_Mask) | ((data & MAC_RFCR_PFCE_Mask)<<8));\
+		MAC_RFCR_RgWr(v);\
+} while(0)
+
+#define MAC_RFCR_PFCE_UdfRd(data) do {\
+		MAC_RFCR_RgRd(data);\
+		data = ((data >> 8) & MAC_RFCR_PFCE_Mask);\
+} while(0)
+
+/*#define MAC_RFCR_UP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RFCR_UP_Mask (ULONG)(0x1)
+
+/*#define MAC_RFCR_UP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_RFCR_UP_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_RFCR_UP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RFCR_RgRd(v);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_9))|((( 0) & (MAC_RFCR_Mask_9))<<9);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_2))|((( 0) & (MAC_RFCR_Mask_2))<<2);\
+		v = ((v & MAC_RFCR_UP_Wr_Mask) | ((data & MAC_RFCR_UP_Mask)<<1));\
+		MAC_RFCR_RgWr(v);\
+} while(0)
+
+#define MAC_RFCR_UP_UdfRd(data) do {\
+		MAC_RFCR_RgRd(data);\
+		data = ((data >> 1) & MAC_RFCR_UP_Mask);\
+} while(0)
+
+/*#define MAC_RFCR_RFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_RFCR_RFE_Mask (ULONG)(0x1)
+
+/*#define MAC_RFCR_RFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_RFCR_RFE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_RFCR_RFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_RFCR_RgRd(v);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_9))|((( 0) & (MAC_RFCR_Mask_9))<<9);\
+		v = (v & (MAC_RFCR_RES_Wr_Mask_2))|((( 0) & (MAC_RFCR_Mask_2))<<2);\
+		v = ((v & MAC_RFCR_RFE_Wr_Mask) | ((data & MAC_RFCR_RFE_Mask)<<0));\
+		MAC_RFCR_RgWr(v);\
+} while(0)
+
+#define MAC_RFCR_RFE_UdfRd(data) do {\
+		MAC_RFCR_RgRd(data);\
+		data = ((data >> 0) & MAC_RFCR_RFE_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x8c))
+
+#define MAC_QTFCR7_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR7_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR7_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR7_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR7_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR7_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR7_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR7_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR7_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR7_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR7_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR7_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR7_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR7_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR7_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR7_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR7_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR7_RgRd(v);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR7_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR7_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR7_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR7_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR7_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR7_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR7_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR7_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR7_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR7_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR7_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR7_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR7_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR7_RgRd(v);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR7_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR7_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR7_TFE_Wr_Mask) | ((data & MAC_QTFCR7_TFE_Mask)<<1));\
+		MAC_QTFCR7_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR7_TFE_UdfRd(data) do {\
+		MAC_QTFCR7_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR7_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR7_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR7_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR7_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR7_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR7_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR7_RgRd(v);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR7_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR7_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR7_PLT_Wr_Mask) | ((data & MAC_QTFCR7_PLT_Mask)<<4));\
+		MAC_QTFCR7_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR7_PLT_UdfRd(data) do {\
+		MAC_QTFCR7_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR7_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR7_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR7_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR7_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR7_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR7_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR7_RgRd(v);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR7_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR7_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR7_DZPQ_Wr_Mask) | ((data & MAC_QTFCR7_DZPQ_Mask)<<7));\
+		MAC_QTFCR7_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR7_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR7_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR7_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR7_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR7_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR7_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR7_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR7_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR7_RgRd(v);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR7_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR7_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR7_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR7_PT_Wr_Mask) | ((data & MAC_QTFCR7_PT_Mask)<<16));\
+		MAC_QTFCR7_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR7_PT_UdfRd(data) do {\
+		MAC_QTFCR7_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR7_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x88))
+
+#define MAC_QTFCR6_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR6_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR6_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR6_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR6_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR6_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR6_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR6_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR6_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR6_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR6_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR6_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR6_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR6_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR6_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR6_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR6_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR6_RgRd(v);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR6_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR6_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR6_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR6_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR6_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR6_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR6_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR6_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR6_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR6_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR6_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR6_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR6_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR6_RgRd(v);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR6_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR6_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR6_TFE_Wr_Mask) | ((data & MAC_QTFCR6_TFE_Mask)<<1));\
+		MAC_QTFCR6_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR6_TFE_UdfRd(data) do {\
+		MAC_QTFCR6_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR6_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR6_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR6_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR6_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR6_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR6_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR6_RgRd(v);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR6_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR6_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR6_PLT_Wr_Mask) | ((data & MAC_QTFCR6_PLT_Mask)<<4));\
+		MAC_QTFCR6_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR6_PLT_UdfRd(data) do {\
+		MAC_QTFCR6_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR6_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR6_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR6_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR6_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR6_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR6_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR6_RgRd(v);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR6_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR6_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR6_DZPQ_Wr_Mask) | ((data & MAC_QTFCR6_DZPQ_Mask)<<7));\
+		MAC_QTFCR6_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR6_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR6_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR6_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR6_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR6_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR6_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR6_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR6_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR6_RgRd(v);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR6_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR6_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR6_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR6_PT_Wr_Mask) | ((data & MAC_QTFCR6_PT_Mask)<<16));\
+		MAC_QTFCR6_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR6_PT_UdfRd(data) do {\
+		MAC_QTFCR6_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR6_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x84))
+
+#define MAC_QTFCR5_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR5_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR5_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR5_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR5_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR5_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR5_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR5_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR5_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR5_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR5_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR5_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR5_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR5_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR5_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR5_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR5_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR5_RgRd(v);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR5_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR5_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR5_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR5_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR5_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR5_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR5_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR5_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR5_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR5_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR5_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR5_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR5_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR5_RgRd(v);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR5_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR5_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR5_TFE_Wr_Mask) | ((data & MAC_QTFCR5_TFE_Mask)<<1));\
+		MAC_QTFCR5_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR5_TFE_UdfRd(data) do {\
+		MAC_QTFCR5_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR5_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR5_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR5_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR5_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR5_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR5_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR5_RgRd(v);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR5_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR5_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR5_PLT_Wr_Mask) | ((data & MAC_QTFCR5_PLT_Mask)<<4));\
+		MAC_QTFCR5_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR5_PLT_UdfRd(data) do {\
+		MAC_QTFCR5_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR5_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR5_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR5_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR5_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR5_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR5_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR5_RgRd(v);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR5_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR5_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR5_DZPQ_Wr_Mask) | ((data & MAC_QTFCR5_DZPQ_Mask)<<7));\
+		MAC_QTFCR5_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR5_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR5_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR5_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR5_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR5_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR5_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR5_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR5_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR5_RgRd(v);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR5_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR5_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR5_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR5_PT_Wr_Mask) | ((data & MAC_QTFCR5_PT_Mask)<<16));\
+		MAC_QTFCR5_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR5_PT_UdfRd(data) do {\
+		MAC_QTFCR5_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR5_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x80))
+
+#define MAC_QTFCR4_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR4_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR4_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR4_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR4_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR4_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR4_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR4_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR4_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR4_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR4_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR4_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR4_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR4_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR4_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR4_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR4_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR4_RgRd(v);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR4_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR4_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR4_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR4_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR4_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR4_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR4_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR4_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR4_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR4_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR4_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR4_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR4_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR4_RgRd(v);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR4_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR4_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR4_TFE_Wr_Mask) | ((data & MAC_QTFCR4_TFE_Mask)<<1));\
+		MAC_QTFCR4_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR4_TFE_UdfRd(data) do {\
+		MAC_QTFCR4_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR4_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR4_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR4_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR4_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR4_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR4_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR4_RgRd(v);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR4_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR4_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR4_PLT_Wr_Mask) | ((data & MAC_QTFCR4_PLT_Mask)<<4));\
+		MAC_QTFCR4_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR4_PLT_UdfRd(data) do {\
+		MAC_QTFCR4_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR4_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR4_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR4_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR4_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR4_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR4_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR4_RgRd(v);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR4_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR4_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR4_DZPQ_Wr_Mask) | ((data & MAC_QTFCR4_DZPQ_Mask)<<7));\
+		MAC_QTFCR4_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR4_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR4_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR4_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR4_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR4_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR4_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR4_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR4_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR4_RgRd(v);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR4_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR4_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR4_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR4_PT_Wr_Mask) | ((data & MAC_QTFCR4_PT_Mask)<<16));\
+		MAC_QTFCR4_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR4_PT_UdfRd(data) do {\
+		MAC_QTFCR4_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR4_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x7c))
+
+#define MAC_QTFCR3_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR3_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR3_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR3_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR3_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR3_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR3_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR3_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR3_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR3_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR3_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR3_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR3_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR3_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR3_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR3_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR3_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR3_RgRd(v);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR3_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR3_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR3_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR3_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR3_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR3_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR3_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR3_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR3_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR3_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR3_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR3_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR3_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR3_RgRd(v);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR3_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR3_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR3_TFE_Wr_Mask) | ((data & MAC_QTFCR3_TFE_Mask)<<1));\
+		MAC_QTFCR3_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR3_TFE_UdfRd(data) do {\
+		MAC_QTFCR3_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR3_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR3_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR3_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR3_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR3_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR3_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR3_RgRd(v);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR3_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR3_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR3_PLT_Wr_Mask) | ((data & MAC_QTFCR3_PLT_Mask)<<4));\
+		MAC_QTFCR3_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR3_PLT_UdfRd(data) do {\
+		MAC_QTFCR3_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR3_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR3_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR3_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR3_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR3_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR3_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR3_RgRd(v);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR3_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR3_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR3_DZPQ_Wr_Mask) | ((data & MAC_QTFCR3_DZPQ_Mask)<<7));\
+		MAC_QTFCR3_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR3_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR3_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR3_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR3_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR3_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR3_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR3_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR3_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR3_RgRd(v);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR3_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR3_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR3_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR3_PT_Wr_Mask) | ((data & MAC_QTFCR3_PT_Mask)<<16));\
+		MAC_QTFCR3_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR3_PT_UdfRd(data) do {\
+		MAC_QTFCR3_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR3_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x78))
+
+#define MAC_QTFCR2_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR2_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR2_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR2_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR2_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR2_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR2_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR2_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR2_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR2_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR2_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR2_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR2_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR2_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR2_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR2_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR2_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR2_RgRd(v);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR2_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR2_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR2_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR2_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR2_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR2_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR2_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR2_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR2_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR2_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR2_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR2_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR2_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR2_RgRd(v);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR2_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR2_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR2_TFE_Wr_Mask) | ((data & MAC_QTFCR2_TFE_Mask)<<1));\
+		MAC_QTFCR2_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR2_TFE_UdfRd(data) do {\
+		MAC_QTFCR2_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR2_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR2_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR2_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR2_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR2_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR2_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR2_RgRd(v);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR2_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR2_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR2_PLT_Wr_Mask) | ((data & MAC_QTFCR2_PLT_Mask)<<4));\
+		MAC_QTFCR2_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR2_PLT_UdfRd(data) do {\
+		MAC_QTFCR2_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR2_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR2_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR2_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR2_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR2_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR2_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR2_RgRd(v);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR2_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR2_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR2_DZPQ_Wr_Mask) | ((data & MAC_QTFCR2_DZPQ_Mask)<<7));\
+		MAC_QTFCR2_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR2_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR2_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR2_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR2_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR2_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR2_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR2_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR2_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR2_RgRd(v);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR2_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR2_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR2_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR2_PT_Wr_Mask) | ((data & MAC_QTFCR2_PT_Mask)<<16));\
+		MAC_QTFCR2_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR2_PT_UdfRd(data) do {\
+		MAC_QTFCR2_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR2_PT_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x74))
+
+#define MAC_QTFCR1_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_QTFCR1_RgOffAddr);\
+} while(0)
+
+#define MAC_QTFCR1_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_QTFCR1_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_QTFCR1_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR1_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR1_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR1_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR1_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR1_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR1_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR1_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR1_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR1_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR1_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR1_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR1_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR1_RgRd(v);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR1_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR1_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR1_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR1_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR1_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR1_FCB_BPA_UdfRd(data) do {\
+		MAC_QTFCR1_RgRd(data);\
+		data = ((data >> 0) & MAC_QTFCR1_FCB_BPA_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR1_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR1_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR1_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR1_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR1_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR1_RgRd(v);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR1_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR1_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR1_TFE_Wr_Mask) | ((data & MAC_QTFCR1_TFE_Mask)<<1));\
+		MAC_QTFCR1_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR1_TFE_UdfRd(data) do {\
+		MAC_QTFCR1_RgRd(data);\
+		data = ((data >> 1) & MAC_QTFCR1_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR1_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR1_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR1_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR1_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR1_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR1_RgRd(v);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR1_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR1_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR1_PLT_Wr_Mask) | ((data & MAC_QTFCR1_PLT_Mask)<<4));\
+		MAC_QTFCR1_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR1_PLT_UdfRd(data) do {\
+		MAC_QTFCR1_RgRd(data);\
+		data = ((data >> 4) & MAC_QTFCR1_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR1_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR1_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR1_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR1_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR1_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR1_RgRd(v);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR1_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR1_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR1_DZPQ_Wr_Mask) | ((data & MAC_QTFCR1_DZPQ_Mask)<<7));\
+		MAC_QTFCR1_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR1_DZPQ_UdfRd(data) do {\
+		MAC_QTFCR1_RgRd(data);\
+		data = ((data >> 7) & MAC_QTFCR1_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR1_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR1_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR1_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR1_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR1_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_QTFCR1_RgRd(v);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR1_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR1_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR1_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR1_PT_Wr_Mask) | ((data & MAC_QTFCR1_PT_Mask)<<16));\
+		MAC_QTFCR1_RgWr(v);\
+} while(0)
+
+#define MAC_QTFCR1_PT_UdfRd(data) do {\
+		MAC_QTFCR1_RgRd(data);\
+		data = ((data >> 16) & MAC_QTFCR1_PT_Mask);\
+} while(0)
+
+
+#define MAC_Q0TFCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x70))
+
+#define MAC_Q0TFCR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_Q0TFCR_RgOffAddr);\
+} while(0)
+
+#define MAC_Q0TFCR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_Q0TFCR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_Q0TFCR_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_Q0TFCR_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_Q0TFCR_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_Q0TFCR_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_Q0TFCR_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_Q0TFCR_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_Q0TFCR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_Q0TFCR_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_Q0TFCR_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_Q0TFCR_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_Q0TFCR_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_Q0TFCR_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_Q0TFCR_PT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_Q0TFCR_RgRd(v);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_8))|((( 0) & (MAC_Q0TFCR_Mask_8))<<8);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_2))|((( 0) & (MAC_Q0TFCR_Mask_2))<<2);\
+		v = ((v & MAC_Q0TFCR_PT_Wr_Mask) | ((data & MAC_Q0TFCR_PT_Mask)<<16));\
+		MAC_Q0TFCR_RgWr(v);\
+} while(0)
+
+#define MAC_Q0TFCR_PT_UdfRd(data) do {\
+		MAC_Q0TFCR_RgRd(data);\
+		data = ((data >> 16) & MAC_Q0TFCR_PT_Mask);\
+} while(0)
+
+/*#define MAC_Q0TFCR_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_Q0TFCR_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_Q0TFCR_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_Q0TFCR_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_Q0TFCR_DZPQ_UdfWr(data) do {\
+		ULONG v;\
+		MAC_Q0TFCR_RgRd(v);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_8))|((( 0) & (MAC_Q0TFCR_Mask_8))<<8);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_2))|((( 0) & (MAC_Q0TFCR_Mask_2))<<2);\
+		v = ((v & MAC_Q0TFCR_DZPQ_Wr_Mask) | ((data & MAC_Q0TFCR_DZPQ_Mask)<<7));\
+		MAC_Q0TFCR_RgWr(v);\
+} while(0)
+
+#define MAC_Q0TFCR_DZPQ_UdfRd(data) do {\
+		MAC_Q0TFCR_RgRd(data);\
+		data = ((data >> 7) & MAC_Q0TFCR_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_Q0TFCR_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_Q0TFCR_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_Q0TFCR_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_Q0TFCR_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_Q0TFCR_PLT_UdfWr(data) do {\
+		ULONG v;\
+		MAC_Q0TFCR_RgRd(v);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_8))|((( 0) & (MAC_Q0TFCR_Mask_8))<<8);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_2))|((( 0) & (MAC_Q0TFCR_Mask_2))<<2);\
+		v = ((v & MAC_Q0TFCR_PLT_Wr_Mask) | ((data & MAC_Q0TFCR_PLT_Mask)<<4));\
+		MAC_Q0TFCR_RgWr(v);\
+} while(0)
+
+#define MAC_Q0TFCR_PLT_UdfRd(data) do {\
+		MAC_Q0TFCR_RgRd(data);\
+		data = ((data >> 4) & MAC_Q0TFCR_PLT_Mask);\
+} while(0)
+
+/*#define MAC_Q0TFCR_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_Q0TFCR_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_Q0TFCR_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_Q0TFCR_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_Q0TFCR_TFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_Q0TFCR_RgRd(v);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_8))|((( 0) & (MAC_Q0TFCR_Mask_8))<<8);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_2))|((( 0) & (MAC_Q0TFCR_Mask_2))<<2);\
+		v = ((v & MAC_Q0TFCR_TFE_Wr_Mask) | ((data & MAC_Q0TFCR_TFE_Mask)<<1));\
+		MAC_Q0TFCR_RgWr(v);\
+} while(0)
+
+#define MAC_Q0TFCR_TFE_UdfRd(data) do {\
+		MAC_Q0TFCR_RgRd(data);\
+		data = ((data >> 1) & MAC_Q0TFCR_TFE_Mask);\
+} while(0)
+
+/*#define MAC_Q0TFCR_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_Q0TFCR_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_Q0TFCR_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_Q0TFCR_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_Q0TFCR_FCB_BPA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_Q0TFCR_RgRd(v);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_8))|((( 0) & (MAC_Q0TFCR_Mask_8))<<8);\
+		v = (v & (MAC_Q0TFCR_RES_Wr_Mask_2))|((( 0) & (MAC_Q0TFCR_Mask_2))<<2);\
+		v = ((v & MAC_Q0TFCR_FCB_BPA_Wr_Mask) | ((data & MAC_Q0TFCR_FCB_BPA_Mask)<<0));\
+		MAC_Q0TFCR_RgWr(v);\
+} while(0)
+
+#define MAC_Q0TFCR_FCB_BPA_UdfRd(data) do {\
+		MAC_Q0TFCR_RgRd(data);\
+		data = ((data >> 0) & MAC_Q0TFCR_FCB_BPA_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x14e4))
+
+#define DMA_AXI4CR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR7_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR7_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR7_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR7_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR7_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR7_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR7_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR7_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR7_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR7_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR7_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR7_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR7_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR7_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR7_RgRd(v);\
+		v = (v & (DMA_AXI4CR7_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR7_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR7_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR7_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR7_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR7_AWQOS_Mask)<<0));\
+		DMA_AXI4CR7_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR7_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR7_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR7_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR7_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR7_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR7_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR7_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR7_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR7_RgRd(v);\
+		v = (v & (DMA_AXI4CR7_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR7_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR7_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR7_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR7_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR7_ARQOS_Mask)<<16));\
+		DMA_AXI4CR7_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR7_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR7_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR7_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1464))
+
+#define DMA_AXI4CR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR6_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR6_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR6_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR6_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR6_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR6_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR6_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR6_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR6_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR6_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR6_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR6_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR6_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR6_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR6_RgRd(v);\
+		v = (v & (DMA_AXI4CR6_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR6_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR6_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR6_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR6_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR6_AWQOS_Mask)<<0));\
+		DMA_AXI4CR6_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR6_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR6_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR6_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR6_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR6_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR6_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR6_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR6_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR6_RgRd(v);\
+		v = (v & (DMA_AXI4CR6_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR6_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR6_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR6_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR6_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR6_ARQOS_Mask)<<16));\
+		DMA_AXI4CR6_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR6_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR6_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR6_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x13e4))
+
+#define DMA_AXI4CR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR5_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR5_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR5_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR5_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR5_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR5_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR5_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR5_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR5_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR5_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR5_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR5_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR5_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR5_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR5_RgRd(v);\
+		v = (v & (DMA_AXI4CR5_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR5_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR5_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR5_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR5_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR5_AWQOS_Mask)<<0));\
+		DMA_AXI4CR5_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR5_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR5_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR5_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR5_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR5_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR5_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR5_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR5_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR5_RgRd(v);\
+		v = (v & (DMA_AXI4CR5_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR5_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR5_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR5_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR5_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR5_ARQOS_Mask)<<16));\
+		DMA_AXI4CR5_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR5_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR5_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR5_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1364))
+
+#define DMA_AXI4CR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR4_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR4_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR4_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR4_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR4_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR4_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR4_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR4_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR4_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR4_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR4_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR4_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR4_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR4_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR4_RgRd(v);\
+		v = (v & (DMA_AXI4CR4_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR4_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR4_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR4_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR4_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR4_AWQOS_Mask)<<0));\
+		DMA_AXI4CR4_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR4_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR4_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR4_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR4_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR4_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR4_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR4_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR4_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR4_RgRd(v);\
+		v = (v & (DMA_AXI4CR4_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR4_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR4_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR4_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR4_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR4_ARQOS_Mask)<<16));\
+		DMA_AXI4CR4_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR4_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR4_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR4_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x12e4))
+
+#define DMA_AXI4CR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR3_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR3_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR3_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR3_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR3_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR3_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR3_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR3_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR3_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR3_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR3_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR3_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR3_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR3_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR3_RgRd(v);\
+		v = (v & (DMA_AXI4CR3_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR3_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR3_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR3_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR3_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR3_AWQOS_Mask)<<0));\
+		DMA_AXI4CR3_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR3_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR3_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR3_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR3_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR3_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR3_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR3_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR3_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR3_RgRd(v);\
+		v = (v & (DMA_AXI4CR3_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR3_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR3_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR3_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR3_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR3_ARQOS_Mask)<<16));\
+		DMA_AXI4CR3_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR3_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR3_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR3_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1264))
+
+#define DMA_AXI4CR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR2_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR2_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR2_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR2_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR2_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR2_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR2_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR2_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR2_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR2_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR2_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR2_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR2_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR2_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR2_RgRd(v);\
+		v = (v & (DMA_AXI4CR2_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR2_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR2_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR2_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR2_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR2_AWQOS_Mask)<<0));\
+		DMA_AXI4CR2_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR2_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR2_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR2_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR2_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR2_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR2_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR2_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR2_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR2_RgRd(v);\
+		v = (v & (DMA_AXI4CR2_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR2_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR2_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR2_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR2_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR2_ARQOS_Mask)<<16));\
+		DMA_AXI4CR2_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR2_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR2_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR2_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x11e4))
+
+#define DMA_AXI4CR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR1_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR1_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR1_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR1_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR1_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR1_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR1_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR1_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR1_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR1_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR1_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR1_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR1_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR1_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR1_RgRd(v);\
+		v = (v & (DMA_AXI4CR1_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR1_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR1_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR1_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR1_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR1_AWQOS_Mask)<<0));\
+		DMA_AXI4CR1_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR1_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR1_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR1_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR1_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR1_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR1_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR1_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR1_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR1_RgRd(v);\
+		v = (v & (DMA_AXI4CR1_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR1_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR1_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR1_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR1_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR1_ARQOS_Mask)<<16));\
+		DMA_AXI4CR1_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR1_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR1_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR1_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1164))
+
+#define DMA_AXI4CR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR0_RgOffAddr);\
+} while(0)
+
+#define DMA_AXI4CR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_AXI4CR0_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR0_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR0_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR0_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define  DMA_AXI4CR0_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR0_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR0_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR0_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define DMA_AXI4CR0_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR0_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR0_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR0_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR0_AWQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR0_RgRd(v);\
+		v = (v & (DMA_AXI4CR0_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR0_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR0_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR0_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR0_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR0_AWQOS_Mask)<<0));\
+		DMA_AXI4CR0_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR0_AWQOS_UdfRd(data) do {\
+		DMA_AXI4CR0_RgRd(data);\
+		data = ((data >> 0) & DMA_AXI4CR0_AWQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR0_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR0_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR0_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR0_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR0_ARQOS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_AXI4CR0_RgRd(v);\
+		v = (v & (DMA_AXI4CR0_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR0_Mask_4))<<4);\
+		v = (v & (DMA_AXI4CR0_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR0_Mask_20))<<20);\
+		v = ((v & DMA_AXI4CR0_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR0_ARQOS_Mask)<<16));\
+		DMA_AXI4CR0_RgWr(v);\
+} while(0)
+
+#define DMA_AXI4CR0_ARQOS_UdfRd(data) do {\
+		DMA_AXI4CR0_RgRd(data);\
+		data = ((data >> 16) & DMA_AXI4CR0_ARQOS_Mask);\
+} while(0)
+
+
+#define DMA_RCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1488))
+
+#define DMA_RCR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR7_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR7_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR7_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR7_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR7_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR7_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR7_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR7_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR7_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR7_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR7_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR7_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR7_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR7_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR7_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR7_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR7_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR7_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_ST_Wr_Mask) | ((data & DMA_RCR7_ST_Mask)<<0));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_ST_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR7_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR7_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR7_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR7_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR7_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR7_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_RBSZ_Wr_Mask) | ((data & DMA_RCR7_RBSZ_Mask)<<1));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_RBSZ_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR7_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR7_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR7_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR7_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR7_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR7_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_PBL_Wr_Mask) | ((data & DMA_RCR7_PBL_Mask)<<16));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_PBL_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR7_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR7_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR7_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR7_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR7_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR7_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_RES_Wr_Mask) | ((data & DMA_RCR7_RES_Mask)<<25));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_RES_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR7_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR7_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR7_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR7_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR7_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR7_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_DFF_Wr_Mask) | ((data & DMA_RCR7_DFF_Mask)<<26));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_DFF_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR7_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR7_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR7_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR7_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR7_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR7_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR7_RgRd(v);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_15))|((( 0) & (DMA_RCR7_Mask_15))<<15);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_22))|((( 0) & (DMA_RCR7_Mask_22))<<22);\
+		v = (v & (DMA_RCR7_RES_Wr_Mask_28))|((( 0) & (DMA_RCR7_Mask_28))<<28);\
+		v = ((v & DMA_RCR7_MAMS_Wr_Mask) | ((data & DMA_RCR7_MAMS_Mask)<<27));\
+		DMA_RCR7_RgWr(v);\
+} while(0)
+
+#define DMA_RCR7_MAMS_UdfRd(data) do {\
+		DMA_RCR7_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR7_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1408))
+
+#define DMA_RCR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR6_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR6_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR6_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR6_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR6_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR6_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR6_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR6_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR6_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR6_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR6_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR6_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR6_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR6_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR6_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR6_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR6_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR6_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_ST_Wr_Mask) | ((data & DMA_RCR6_ST_Mask)<<0));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_ST_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR6_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR6_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR6_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR6_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR6_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR6_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_RBSZ_Wr_Mask) | ((data & DMA_RCR6_RBSZ_Mask)<<1));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_RBSZ_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR6_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR6_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR6_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR6_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR6_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR6_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_PBL_Wr_Mask) | ((data & DMA_RCR6_PBL_Mask)<<16));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_PBL_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR6_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR6_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR6_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR6_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR6_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR6_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_RES_Wr_Mask) | ((data & DMA_RCR6_RES_Mask)<<25));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_RES_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR6_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR6_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR6_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR6_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR6_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR6_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_DFF_Wr_Mask) | ((data & DMA_RCR6_DFF_Mask)<<26));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_DFF_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR6_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR6_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR6_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR6_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR6_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR6_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR6_RgRd(v);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_15))|((( 0) & (DMA_RCR6_Mask_15))<<15);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_22))|((( 0) & (DMA_RCR6_Mask_22))<<22);\
+		v = (v & (DMA_RCR6_RES_Wr_Mask_28))|((( 0) & (DMA_RCR6_Mask_28))<<28);\
+		v = ((v & DMA_RCR6_MAMS_Wr_Mask) | ((data & DMA_RCR6_MAMS_Mask)<<27));\
+		DMA_RCR6_RgWr(v);\
+} while(0)
+
+#define DMA_RCR6_MAMS_UdfRd(data) do {\
+		DMA_RCR6_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR6_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1388))
+
+#define DMA_RCR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR5_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR5_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR5_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR5_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR5_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR5_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR5_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR5_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR5_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR5_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR5_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR5_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR5_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR5_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR5_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR5_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR5_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR5_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_ST_Wr_Mask) | ((data & DMA_RCR5_ST_Mask)<<0));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_ST_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR5_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR5_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR5_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR5_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR5_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR5_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_RBSZ_Wr_Mask) | ((data & DMA_RCR5_RBSZ_Mask)<<1));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_RBSZ_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR5_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR5_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR5_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR5_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR5_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR5_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_PBL_Wr_Mask) | ((data & DMA_RCR5_PBL_Mask)<<16));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_PBL_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR5_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR5_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR5_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR5_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR5_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR5_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_RES_Wr_Mask) | ((data & DMA_RCR5_RES_Mask)<<25));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_RES_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR5_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR5_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR5_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR5_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR5_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR5_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_DFF_Wr_Mask) | ((data & DMA_RCR5_DFF_Mask)<<26));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_DFF_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR5_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR5_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR5_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR5_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR5_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR5_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR5_RgRd(v);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_15))|((( 0) & (DMA_RCR5_Mask_15))<<15);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_22))|((( 0) & (DMA_RCR5_Mask_22))<<22);\
+		v = (v & (DMA_RCR5_RES_Wr_Mask_28))|((( 0) & (DMA_RCR5_Mask_28))<<28);\
+		v = ((v & DMA_RCR5_MAMS_Wr_Mask) | ((data & DMA_RCR5_MAMS_Mask)<<27));\
+		DMA_RCR5_RgWr(v);\
+} while(0)
+
+#define DMA_RCR5_MAMS_UdfRd(data) do {\
+		DMA_RCR5_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR5_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1308))
+
+#define DMA_RCR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR4_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR4_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR4_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR4_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR4_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR4_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR4_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR4_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR4_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR4_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR4_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR4_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR4_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR4_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR4_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR4_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR4_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR4_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_ST_Wr_Mask) | ((data & DMA_RCR4_ST_Mask)<<0));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_ST_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR4_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR4_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR4_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR4_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR4_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR4_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_RBSZ_Wr_Mask) | ((data & DMA_RCR4_RBSZ_Mask)<<1));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_RBSZ_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR4_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR4_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR4_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR4_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR4_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR4_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_PBL_Wr_Mask) | ((data & DMA_RCR4_PBL_Mask)<<16));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_PBL_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR4_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR4_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR4_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR4_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR4_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR4_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_RES_Wr_Mask) | ((data & DMA_RCR4_RES_Mask)<<25));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_RES_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR4_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR4_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR4_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR4_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR4_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR4_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_DFF_Wr_Mask) | ((data & DMA_RCR4_DFF_Mask)<<26));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_DFF_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR4_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR4_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR4_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR4_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR4_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR4_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR4_RgRd(v);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_15))|((( 0) & (DMA_RCR4_Mask_15))<<15);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_22))|((( 0) & (DMA_RCR4_Mask_22))<<22);\
+		v = (v & (DMA_RCR4_RES_Wr_Mask_28))|((( 0) & (DMA_RCR4_Mask_28))<<28);\
+		v = ((v & DMA_RCR4_MAMS_Wr_Mask) | ((data & DMA_RCR4_MAMS_Mask)<<27));\
+		DMA_RCR4_RgWr(v);\
+} while(0)
+
+#define DMA_RCR4_MAMS_UdfRd(data) do {\
+		DMA_RCR4_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR4_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1288))
+
+#define DMA_RCR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR3_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR3_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR3_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR3_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR3_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR3_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR3_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR3_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR3_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR3_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR3_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR3_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR3_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR3_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR3_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR3_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR3_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR3_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_ST_Wr_Mask) | ((data & DMA_RCR3_ST_Mask)<<0));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_ST_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR3_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR3_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR3_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR3_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR3_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR3_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_RBSZ_Wr_Mask) | ((data & DMA_RCR3_RBSZ_Mask)<<1));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_RBSZ_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR3_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR3_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR3_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR3_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR3_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR3_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_PBL_Wr_Mask) | ((data & DMA_RCR3_PBL_Mask)<<16));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_PBL_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR3_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR3_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR3_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR3_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR3_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR3_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_RES_Wr_Mask) | ((data & DMA_RCR3_RES_Mask)<<25));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_RES_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR3_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR3_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR3_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR3_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR3_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR3_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_DFF_Wr_Mask) | ((data & DMA_RCR3_DFF_Mask)<<26));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_DFF_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR3_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR3_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR3_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR3_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR3_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR3_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR3_RgRd(v);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_15))|((( 0) & (DMA_RCR3_Mask_15))<<15);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_22))|((( 0) & (DMA_RCR3_Mask_22))<<22);\
+		v = (v & (DMA_RCR3_RES_Wr_Mask_28))|((( 0) & (DMA_RCR3_Mask_28))<<28);\
+		v = ((v & DMA_RCR3_MAMS_Wr_Mask) | ((data & DMA_RCR3_MAMS_Mask)<<27));\
+		DMA_RCR3_RgWr(v);\
+} while(0)
+
+#define DMA_RCR3_MAMS_UdfRd(data) do {\
+		DMA_RCR3_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR3_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1208))
+
+#define DMA_RCR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR2_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR2_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR2_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR2_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR2_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR2_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR2_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR2_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR2_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR2_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR2_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR2_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR2_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR2_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR2_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR2_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR2_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR2_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_ST_Wr_Mask) | ((data & DMA_RCR2_ST_Mask)<<0));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_ST_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR2_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR2_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR2_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR2_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR2_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR2_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_RBSZ_Wr_Mask) | ((data & DMA_RCR2_RBSZ_Mask)<<1));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_RBSZ_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR2_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR2_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR2_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR2_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR2_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR2_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_PBL_Wr_Mask) | ((data & DMA_RCR2_PBL_Mask)<<16));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_PBL_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR2_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR2_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR2_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR2_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR2_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR2_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_RES_Wr_Mask) | ((data & DMA_RCR2_RES_Mask)<<25));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_RES_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR2_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR2_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR2_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR2_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR2_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR2_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_DFF_Wr_Mask) | ((data & DMA_RCR2_DFF_Mask)<<26));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_DFF_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR2_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR2_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR2_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR2_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR2_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR2_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR2_RgRd(v);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_15))|((( 0) & (DMA_RCR2_Mask_15))<<15);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_22))|((( 0) & (DMA_RCR2_Mask_22))<<22);\
+		v = (v & (DMA_RCR2_RES_Wr_Mask_28))|((( 0) & (DMA_RCR2_Mask_28))<<28);\
+		v = ((v & DMA_RCR2_MAMS_Wr_Mask) | ((data & DMA_RCR2_MAMS_Mask)<<27));\
+		DMA_RCR2_RgWr(v);\
+} while(0)
+
+#define DMA_RCR2_MAMS_UdfRd(data) do {\
+		DMA_RCR2_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR2_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1188))
+
+#define DMA_RCR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR1_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR1_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR1_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR1_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR1_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR1_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR1_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR1_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR1_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR1_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR1_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR1_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR1_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR1_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR1_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR1_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR1_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR1_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_ST_Wr_Mask) | ((data & DMA_RCR1_ST_Mask)<<0));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_ST_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR1_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR1_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR1_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR1_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR1_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR1_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_RBSZ_Wr_Mask) | ((data & DMA_RCR1_RBSZ_Mask)<<1));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_RBSZ_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR1_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR1_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR1_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR1_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR1_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR1_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_PBL_Wr_Mask) | ((data & DMA_RCR1_PBL_Mask)<<16));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_PBL_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR1_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR1_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR1_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR1_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR1_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR1_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_RES_Wr_Mask) | ((data & DMA_RCR1_RES_Mask)<<25));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_RES_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR1_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR1_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR1_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR1_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR1_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR1_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_DFF_Wr_Mask) | ((data & DMA_RCR1_DFF_Mask)<<26));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_DFF_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR1_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR1_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR1_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR1_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR1_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR1_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR1_RgRd(v);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_15))|((( 0) & (DMA_RCR1_Mask_15))<<15);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_22))|((( 0) & (DMA_RCR1_Mask_22))<<22);\
+		v = (v & (DMA_RCR1_RES_Wr_Mask_28))|((( 0) & (DMA_RCR1_Mask_28))<<28);\
+		v = ((v & DMA_RCR1_MAMS_Wr_Mask) | ((data & DMA_RCR1_MAMS_Mask)<<27));\
+		DMA_RCR1_RgWr(v);\
+} while(0)
+
+#define DMA_RCR1_MAMS_UdfRd(data) do {\
+		DMA_RCR1_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR1_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_RCR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1108))
+
+#define DMA_RCR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_RCR0_RgOffAddr);\
+} while(0)
+
+#define DMA_RCR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_RCR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_RCR0_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR0_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR0_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR0_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define  DMA_RCR0_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR0_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR0_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR0_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR0_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR0_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR0_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR0_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define DMA_RCR0_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR0_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR0_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR0_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR0_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_ST_Wr_Mask) | ((data & DMA_RCR0_ST_Mask)<<0));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_ST_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 0) & DMA_RCR0_ST_Mask);\
+} while(0)
+
+/*#define DMA_RCR0_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR0_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR0_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR0_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR0_RBSZ_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_RBSZ_Wr_Mask) | ((data & DMA_RCR0_RBSZ_Mask)<<1));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_RBSZ_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 1) & DMA_RCR0_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR0_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR0_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR0_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR0_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR0_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_PBL_Wr_Mask) | ((data & DMA_RCR0_PBL_Mask)<<16));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_PBL_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 16) & DMA_RCR0_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR0_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR0_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR0_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR0_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR0_RES_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_RES_Wr_Mask) | ((data & DMA_RCR0_RES_Mask)<<25));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_RES_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 25) & DMA_RCR0_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR0_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR0_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR0_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR0_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR0_DFF_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_DFF_Wr_Mask) | ((data & DMA_RCR0_DFF_Mask)<<26));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_DFF_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 26) & DMA_RCR0_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR0_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR0_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR0_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR0_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR0_MAMS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_RCR0_RgRd(v);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_15))|((( 0) & (DMA_RCR0_Mask_15))<<15);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_22))|((( 0) & (DMA_RCR0_Mask_22))<<22);\
+		v = (v & (DMA_RCR0_RES_Wr_Mask_28))|((( 0) & (DMA_RCR0_Mask_28))<<28);\
+		v = ((v & DMA_RCR0_MAMS_Wr_Mask) | ((data & DMA_RCR0_MAMS_Mask)<<27));\
+		DMA_RCR0_RgWr(v);\
+} while(0)
+
+#define DMA_RCR0_MAMS_UdfRd(data) do {\
+		DMA_RCR0_RgRd(data);\
+		data = ((data >> 27) & DMA_RCR0_MAMS_Mask);\
+} while(0)
+
+
+#define DMA_TCR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1484))
+
+#define DMA_TCR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR7_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR7_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR7_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR7_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR7_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR7_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR7_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR7_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR7_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR7_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR7_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR7_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR7_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR7_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR7_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR7_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR7_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR7_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR7_RgRd(v);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_5))|((( 0) & (DMA_TCR7_Mask_5))<<5);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_13))|((( 0) & (DMA_TCR7_Mask_13))<<13);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_22))|((( 0) & (DMA_TCR7_Mask_22))<<22);\
+		v = ((v & DMA_TCR7_ST_Wr_Mask) | ((data & DMA_TCR7_ST_Mask)<<0));\
+		DMA_TCR7_RgWr(v);\
+} while(0)
+
+#define DMA_TCR7_ST_UdfRd(data) do {\
+		DMA_TCR7_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR7_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR7_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR7_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR7_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR7_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR7_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR7_RgRd(v);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_5))|((( 0) & (DMA_TCR7_Mask_5))<<5);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_13))|((( 0) & (DMA_TCR7_Mask_13))<<13);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_22))|((( 0) & (DMA_TCR7_Mask_22))<<22);\
+		v = ((v & DMA_TCR7_TCW_Wr_Mask) | ((data & DMA_TCR7_TCW_Mask)<<1));\
+		DMA_TCR7_RgWr(v);\
+} while(0)
+
+#define DMA_TCR7_TCW_UdfRd(data) do {\
+		DMA_TCR7_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR7_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR7_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR7_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR7_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR7_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR7_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR7_RgRd(v);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_5))|((( 0) & (DMA_TCR7_Mask_5))<<5);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_13))|((( 0) & (DMA_TCR7_Mask_13))<<13);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_22))|((( 0) & (DMA_TCR7_Mask_22))<<22);\
+		v = ((v & DMA_TCR7_OSP_Wr_Mask) | ((data & DMA_TCR7_OSP_Mask)<<4));\
+		DMA_TCR7_RgWr(v);\
+} while(0)
+
+#define DMA_TCR7_OSP_UdfRd(data) do {\
+		DMA_TCR7_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR7_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR7_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR7_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR7_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR7_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR7_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR7_RgRd(v);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_5))|((( 0) & (DMA_TCR7_Mask_5))<<5);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_13))|((( 0) & (DMA_TCR7_Mask_13))<<13);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_22))|((( 0) & (DMA_TCR7_Mask_22))<<22);\
+		v = ((v & DMA_TCR7_TSE_Wr_Mask) | ((data & DMA_TCR7_TSE_Mask)<<12));\
+		DMA_TCR7_RgWr(v);\
+} while(0)
+
+#define DMA_TCR7_TSE_UdfRd(data) do {\
+		DMA_TCR7_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR7_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR7_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR7_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR7_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR7_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR7_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR7_RgRd(v);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_5))|((( 0) & (DMA_TCR7_Mask_5))<<5);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_13))|((( 0) & (DMA_TCR7_Mask_13))<<13);\
+		v = (v & (DMA_TCR7_RES_Wr_Mask_22))|((( 0) & (DMA_TCR7_Mask_22))<<22);\
+		v = ((v & DMA_TCR7_PBL_Wr_Mask) | ((data & DMA_TCR7_PBL_Mask)<<16));\
+		DMA_TCR7_RgWr(v);\
+} while(0)
+
+#define DMA_TCR7_PBL_UdfRd(data) do {\
+		DMA_TCR7_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR7_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1404))
+
+#define DMA_TCR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR6_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR6_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR6_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR6_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR6_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR6_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR6_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR6_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR6_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR6_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR6_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR6_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR6_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR6_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR6_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR6_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR6_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR6_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR6_RgRd(v);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_5))|((( 0) & (DMA_TCR6_Mask_5))<<5);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_13))|((( 0) & (DMA_TCR6_Mask_13))<<13);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_22))|((( 0) & (DMA_TCR6_Mask_22))<<22);\
+		v = ((v & DMA_TCR6_ST_Wr_Mask) | ((data & DMA_TCR6_ST_Mask)<<0));\
+		DMA_TCR6_RgWr(v);\
+} while(0)
+
+#define DMA_TCR6_ST_UdfRd(data) do {\
+		DMA_TCR6_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR6_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR6_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR6_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR6_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR6_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR6_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR6_RgRd(v);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_5))|((( 0) & (DMA_TCR6_Mask_5))<<5);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_13))|((( 0) & (DMA_TCR6_Mask_13))<<13);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_22))|((( 0) & (DMA_TCR6_Mask_22))<<22);\
+		v = ((v & DMA_TCR6_TCW_Wr_Mask) | ((data & DMA_TCR6_TCW_Mask)<<1));\
+		DMA_TCR6_RgWr(v);\
+} while(0)
+
+#define DMA_TCR6_TCW_UdfRd(data) do {\
+		DMA_TCR6_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR6_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR6_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR6_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR6_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR6_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR6_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR6_RgRd(v);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_5))|((( 0) & (DMA_TCR6_Mask_5))<<5);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_13))|((( 0) & (DMA_TCR6_Mask_13))<<13);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_22))|((( 0) & (DMA_TCR6_Mask_22))<<22);\
+		v = ((v & DMA_TCR6_OSP_Wr_Mask) | ((data & DMA_TCR6_OSP_Mask)<<4));\
+		DMA_TCR6_RgWr(v);\
+} while(0)
+
+#define DMA_TCR6_OSP_UdfRd(data) do {\
+		DMA_TCR6_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR6_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR6_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR6_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR6_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR6_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR6_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR6_RgRd(v);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_5))|((( 0) & (DMA_TCR6_Mask_5))<<5);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_13))|((( 0) & (DMA_TCR6_Mask_13))<<13);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_22))|((( 0) & (DMA_TCR6_Mask_22))<<22);\
+		v = ((v & DMA_TCR6_TSE_Wr_Mask) | ((data & DMA_TCR6_TSE_Mask)<<12));\
+		DMA_TCR6_RgWr(v);\
+} while(0)
+
+#define DMA_TCR6_TSE_UdfRd(data) do {\
+		DMA_TCR6_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR6_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR6_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR6_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR6_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR6_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR6_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR6_RgRd(v);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_5))|((( 0) & (DMA_TCR6_Mask_5))<<5);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_13))|((( 0) & (DMA_TCR6_Mask_13))<<13);\
+		v = (v & (DMA_TCR6_RES_Wr_Mask_22))|((( 0) & (DMA_TCR6_Mask_22))<<22);\
+		v = ((v & DMA_TCR6_PBL_Wr_Mask) | ((data & DMA_TCR6_PBL_Mask)<<16));\
+		DMA_TCR6_RgWr(v);\
+} while(0)
+
+#define DMA_TCR6_PBL_UdfRd(data) do {\
+		DMA_TCR6_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR6_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1384))
+
+#define DMA_TCR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR5_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR5_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR5_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR5_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR5_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR5_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR5_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR5_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR5_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR5_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR5_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR5_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR5_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR5_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR5_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR5_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR5_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR5_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR5_RgRd(v);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_5))|((( 0) & (DMA_TCR5_Mask_5))<<5);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_13))|((( 0) & (DMA_TCR5_Mask_13))<<13);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_22))|((( 0) & (DMA_TCR5_Mask_22))<<22);\
+		v = ((v & DMA_TCR5_ST_Wr_Mask) | ((data & DMA_TCR5_ST_Mask)<<0));\
+		DMA_TCR5_RgWr(v);\
+} while(0)
+
+#define DMA_TCR5_ST_UdfRd(data) do {\
+		DMA_TCR5_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR5_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR5_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR5_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR5_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR5_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR5_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR5_RgRd(v);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_5))|((( 0) & (DMA_TCR5_Mask_5))<<5);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_13))|((( 0) & (DMA_TCR5_Mask_13))<<13);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_22))|((( 0) & (DMA_TCR5_Mask_22))<<22);\
+		v = ((v & DMA_TCR5_TCW_Wr_Mask) | ((data & DMA_TCR5_TCW_Mask)<<1));\
+		DMA_TCR5_RgWr(v);\
+} while(0)
+
+#define DMA_TCR5_TCW_UdfRd(data) do {\
+		DMA_TCR5_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR5_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR5_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR5_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR5_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR5_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR5_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR5_RgRd(v);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_5))|((( 0) & (DMA_TCR5_Mask_5))<<5);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_13))|((( 0) & (DMA_TCR5_Mask_13))<<13);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_22))|((( 0) & (DMA_TCR5_Mask_22))<<22);\
+		v = ((v & DMA_TCR5_OSP_Wr_Mask) | ((data & DMA_TCR5_OSP_Mask)<<4));\
+		DMA_TCR5_RgWr(v);\
+} while(0)
+
+#define DMA_TCR5_OSP_UdfRd(data) do {\
+		DMA_TCR5_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR5_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR5_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR5_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR5_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR5_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR5_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR5_RgRd(v);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_5))|((( 0) & (DMA_TCR5_Mask_5))<<5);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_13))|((( 0) & (DMA_TCR5_Mask_13))<<13);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_22))|((( 0) & (DMA_TCR5_Mask_22))<<22);\
+		v = ((v & DMA_TCR5_TSE_Wr_Mask) | ((data & DMA_TCR5_TSE_Mask)<<12));\
+		DMA_TCR5_RgWr(v);\
+} while(0)
+
+#define DMA_TCR5_TSE_UdfRd(data) do {\
+		DMA_TCR5_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR5_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR5_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR5_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR5_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR5_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR5_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR5_RgRd(v);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_5))|((( 0) & (DMA_TCR5_Mask_5))<<5);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_13))|((( 0) & (DMA_TCR5_Mask_13))<<13);\
+		v = (v & (DMA_TCR5_RES_Wr_Mask_22))|((( 0) & (DMA_TCR5_Mask_22))<<22);\
+		v = ((v & DMA_TCR5_PBL_Wr_Mask) | ((data & DMA_TCR5_PBL_Mask)<<16));\
+		DMA_TCR5_RgWr(v);\
+} while(0)
+
+#define DMA_TCR5_PBL_UdfRd(data) do {\
+		DMA_TCR5_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR5_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1304))
+
+#define DMA_TCR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR4_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR4_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR4_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR4_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR4_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR4_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR4_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR4_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR4_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR4_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR4_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR4_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR4_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR4_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR4_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR4_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR4_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR4_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR4_RgRd(v);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_5))|((( 0) & (DMA_TCR4_Mask_5))<<5);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_13))|((( 0) & (DMA_TCR4_Mask_13))<<13);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_22))|((( 0) & (DMA_TCR4_Mask_22))<<22);\
+		v = ((v & DMA_TCR4_ST_Wr_Mask) | ((data & DMA_TCR4_ST_Mask)<<0));\
+		DMA_TCR4_RgWr(v);\
+} while(0)
+
+#define DMA_TCR4_ST_UdfRd(data) do {\
+		DMA_TCR4_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR4_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR4_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR4_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR4_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR4_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR4_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR4_RgRd(v);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_5))|((( 0) & (DMA_TCR4_Mask_5))<<5);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_13))|((( 0) & (DMA_TCR4_Mask_13))<<13);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_22))|((( 0) & (DMA_TCR4_Mask_22))<<22);\
+		v = ((v & DMA_TCR4_TCW_Wr_Mask) | ((data & DMA_TCR4_TCW_Mask)<<1));\
+		DMA_TCR4_RgWr(v);\
+} while(0)
+
+#define DMA_TCR4_TCW_UdfRd(data) do {\
+		DMA_TCR4_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR4_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR4_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR4_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR4_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR4_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR4_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR4_RgRd(v);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_5))|((( 0) & (DMA_TCR4_Mask_5))<<5);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_13))|((( 0) & (DMA_TCR4_Mask_13))<<13);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_22))|((( 0) & (DMA_TCR4_Mask_22))<<22);\
+		v = ((v & DMA_TCR4_OSP_Wr_Mask) | ((data & DMA_TCR4_OSP_Mask)<<4));\
+		DMA_TCR4_RgWr(v);\
+} while(0)
+
+#define DMA_TCR4_OSP_UdfRd(data) do {\
+		DMA_TCR4_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR4_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR4_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR4_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR4_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR4_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR4_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR4_RgRd(v);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_5))|((( 0) & (DMA_TCR4_Mask_5))<<5);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_13))|((( 0) & (DMA_TCR4_Mask_13))<<13);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_22))|((( 0) & (DMA_TCR4_Mask_22))<<22);\
+		v = ((v & DMA_TCR4_TSE_Wr_Mask) | ((data & DMA_TCR4_TSE_Mask)<<12));\
+		DMA_TCR4_RgWr(v);\
+} while(0)
+
+#define DMA_TCR4_TSE_UdfRd(data) do {\
+		DMA_TCR4_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR4_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR4_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR4_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR4_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR4_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR4_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR4_RgRd(v);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_5))|((( 0) & (DMA_TCR4_Mask_5))<<5);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_13))|((( 0) & (DMA_TCR4_Mask_13))<<13);\
+		v = (v & (DMA_TCR4_RES_Wr_Mask_22))|((( 0) & (DMA_TCR4_Mask_22))<<22);\
+		v = ((v & DMA_TCR4_PBL_Wr_Mask) | ((data & DMA_TCR4_PBL_Mask)<<16));\
+		DMA_TCR4_RgWr(v);\
+} while(0)
+
+#define DMA_TCR4_PBL_UdfRd(data) do {\
+		DMA_TCR4_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR4_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1284))
+
+#define DMA_TCR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR3_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR3_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR3_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR3_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR3_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR3_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR3_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR3_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR3_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR3_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR3_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR3_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR3_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR3_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR3_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR3_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR3_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR3_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR3_RgRd(v);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_5))|((( 0) & (DMA_TCR3_Mask_5))<<5);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_13))|((( 0) & (DMA_TCR3_Mask_13))<<13);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_22))|((( 0) & (DMA_TCR3_Mask_22))<<22);\
+		v = ((v & DMA_TCR3_ST_Wr_Mask) | ((data & DMA_TCR3_ST_Mask)<<0));\
+		DMA_TCR3_RgWr(v);\
+} while(0)
+
+#define DMA_TCR3_ST_UdfRd(data) do {\
+		DMA_TCR3_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR3_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR3_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR3_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR3_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR3_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR3_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR3_RgRd(v);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_5))|((( 0) & (DMA_TCR3_Mask_5))<<5);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_13))|((( 0) & (DMA_TCR3_Mask_13))<<13);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_22))|((( 0) & (DMA_TCR3_Mask_22))<<22);\
+		v = ((v & DMA_TCR3_TCW_Wr_Mask) | ((data & DMA_TCR3_TCW_Mask)<<1));\
+		DMA_TCR3_RgWr(v);\
+} while(0)
+
+#define DMA_TCR3_TCW_UdfRd(data) do {\
+		DMA_TCR3_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR3_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR3_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR3_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR3_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR3_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR3_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR3_RgRd(v);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_5))|((( 0) & (DMA_TCR3_Mask_5))<<5);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_13))|((( 0) & (DMA_TCR3_Mask_13))<<13);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_22))|((( 0) & (DMA_TCR3_Mask_22))<<22);\
+		v = ((v & DMA_TCR3_OSP_Wr_Mask) | ((data & DMA_TCR3_OSP_Mask)<<4));\
+		DMA_TCR3_RgWr(v);\
+} while(0)
+
+#define DMA_TCR3_OSP_UdfRd(data) do {\
+		DMA_TCR3_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR3_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR3_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR3_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR3_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR3_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR3_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR3_RgRd(v);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_5))|((( 0) & (DMA_TCR3_Mask_5))<<5);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_13))|((( 0) & (DMA_TCR3_Mask_13))<<13);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_22))|((( 0) & (DMA_TCR3_Mask_22))<<22);\
+		v = ((v & DMA_TCR3_TSE_Wr_Mask) | ((data & DMA_TCR3_TSE_Mask)<<12));\
+		DMA_TCR3_RgWr(v);\
+} while(0)
+
+#define DMA_TCR3_TSE_UdfRd(data) do {\
+		DMA_TCR3_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR3_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR3_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR3_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR3_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR3_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR3_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR3_RgRd(v);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_5))|((( 0) & (DMA_TCR3_Mask_5))<<5);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_13))|((( 0) & (DMA_TCR3_Mask_13))<<13);\
+		v = (v & (DMA_TCR3_RES_Wr_Mask_22))|((( 0) & (DMA_TCR3_Mask_22))<<22);\
+		v = ((v & DMA_TCR3_PBL_Wr_Mask) | ((data & DMA_TCR3_PBL_Mask)<<16));\
+		DMA_TCR3_RgWr(v);\
+} while(0)
+
+#define DMA_TCR3_PBL_UdfRd(data) do {\
+		DMA_TCR3_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR3_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1204))
+
+#define DMA_TCR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR2_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR2_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR2_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR2_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR2_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR2_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR2_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR2_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR2_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR2_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR2_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR2_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR2_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR2_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR2_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR2_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR2_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR2_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR2_RgRd(v);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_5))|((( 0) & (DMA_TCR2_Mask_5))<<5);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_13))|((( 0) & (DMA_TCR2_Mask_13))<<13);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_22))|((( 0) & (DMA_TCR2_Mask_22))<<22);\
+		v = ((v & DMA_TCR2_ST_Wr_Mask) | ((data & DMA_TCR2_ST_Mask)<<0));\
+		DMA_TCR2_RgWr(v);\
+} while(0)
+
+#define DMA_TCR2_ST_UdfRd(data) do {\
+		DMA_TCR2_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR2_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR2_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR2_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR2_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR2_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR2_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR2_RgRd(v);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_5))|((( 0) & (DMA_TCR2_Mask_5))<<5);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_13))|((( 0) & (DMA_TCR2_Mask_13))<<13);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_22))|((( 0) & (DMA_TCR2_Mask_22))<<22);\
+		v = ((v & DMA_TCR2_TCW_Wr_Mask) | ((data & DMA_TCR2_TCW_Mask)<<1));\
+		DMA_TCR2_RgWr(v);\
+} while(0)
+
+#define DMA_TCR2_TCW_UdfRd(data) do {\
+		DMA_TCR2_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR2_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR2_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR2_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR2_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR2_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR2_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR2_RgRd(v);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_5))|((( 0) & (DMA_TCR2_Mask_5))<<5);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_13))|((( 0) & (DMA_TCR2_Mask_13))<<13);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_22))|((( 0) & (DMA_TCR2_Mask_22))<<22);\
+		v = ((v & DMA_TCR2_OSP_Wr_Mask) | ((data & DMA_TCR2_OSP_Mask)<<4));\
+		DMA_TCR2_RgWr(v);\
+} while(0)
+
+#define DMA_TCR2_OSP_UdfRd(data) do {\
+		DMA_TCR2_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR2_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR2_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR2_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR2_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR2_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR2_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR2_RgRd(v);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_5))|((( 0) & (DMA_TCR2_Mask_5))<<5);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_13))|((( 0) & (DMA_TCR2_Mask_13))<<13);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_22))|((( 0) & (DMA_TCR2_Mask_22))<<22);\
+		v = ((v & DMA_TCR2_TSE_Wr_Mask) | ((data & DMA_TCR2_TSE_Mask)<<12));\
+		DMA_TCR2_RgWr(v);\
+} while(0)
+
+#define DMA_TCR2_TSE_UdfRd(data) do {\
+		DMA_TCR2_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR2_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR2_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR2_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR2_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR2_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR2_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR2_RgRd(v);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_5))|((( 0) & (DMA_TCR2_Mask_5))<<5);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_13))|((( 0) & (DMA_TCR2_Mask_13))<<13);\
+		v = (v & (DMA_TCR2_RES_Wr_Mask_22))|((( 0) & (DMA_TCR2_Mask_22))<<22);\
+		v = ((v & DMA_TCR2_PBL_Wr_Mask) | ((data & DMA_TCR2_PBL_Mask)<<16));\
+		DMA_TCR2_RgWr(v);\
+} while(0)
+
+#define DMA_TCR2_PBL_UdfRd(data) do {\
+		DMA_TCR2_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR2_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1184))
+
+#define DMA_TCR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR1_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR1_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR1_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR1_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR1_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR1_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR1_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR1_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR1_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR1_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR1_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR1_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR1_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR1_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR1_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR1_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR1_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR1_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR1_RgRd(v);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_5))|((( 0) & (DMA_TCR1_Mask_5))<<5);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_13))|((( 0) & (DMA_TCR1_Mask_13))<<13);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_22))|((( 0) & (DMA_TCR1_Mask_22))<<22);\
+		v = ((v & DMA_TCR1_ST_Wr_Mask) | ((data & DMA_TCR1_ST_Mask)<<0));\
+		DMA_TCR1_RgWr(v);\
+} while(0)
+
+#define DMA_TCR1_ST_UdfRd(data) do {\
+		DMA_TCR1_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR1_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR1_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR1_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR1_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR1_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR1_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR1_RgRd(v);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_5))|((( 0) & (DMA_TCR1_Mask_5))<<5);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_13))|((( 0) & (DMA_TCR1_Mask_13))<<13);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_22))|((( 0) & (DMA_TCR1_Mask_22))<<22);\
+		v = ((v & DMA_TCR1_TCW_Wr_Mask) | ((data & DMA_TCR1_TCW_Mask)<<1));\
+		DMA_TCR1_RgWr(v);\
+} while(0)
+
+#define DMA_TCR1_TCW_UdfRd(data) do {\
+		DMA_TCR1_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR1_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR1_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR1_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR1_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR1_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR1_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR1_RgRd(v);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_5))|((( 0) & (DMA_TCR1_Mask_5))<<5);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_13))|((( 0) & (DMA_TCR1_Mask_13))<<13);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_22))|((( 0) & (DMA_TCR1_Mask_22))<<22);\
+		v = ((v & DMA_TCR1_OSP_Wr_Mask) | ((data & DMA_TCR1_OSP_Mask)<<4));\
+		DMA_TCR1_RgWr(v);\
+} while(0)
+
+#define DMA_TCR1_OSP_UdfRd(data) do {\
+		DMA_TCR1_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR1_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR1_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR1_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR1_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR1_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR1_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR1_RgRd(v);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_5))|((( 0) & (DMA_TCR1_Mask_5))<<5);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_13))|((( 0) & (DMA_TCR1_Mask_13))<<13);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_22))|((( 0) & (DMA_TCR1_Mask_22))<<22);\
+		v = ((v & DMA_TCR1_TSE_Wr_Mask) | ((data & DMA_TCR1_TSE_Mask)<<12));\
+		DMA_TCR1_RgWr(v);\
+} while(0)
+
+#define DMA_TCR1_TSE_UdfRd(data) do {\
+		DMA_TCR1_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR1_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR1_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR1_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR1_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR1_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR1_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR1_RgRd(v);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_5))|((( 0) & (DMA_TCR1_Mask_5))<<5);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_13))|((( 0) & (DMA_TCR1_Mask_13))<<13);\
+		v = (v & (DMA_TCR1_RES_Wr_Mask_22))|((( 0) & (DMA_TCR1_Mask_22))<<22);\
+		v = ((v & DMA_TCR1_PBL_Wr_Mask) | ((data & DMA_TCR1_PBL_Mask)<<16));\
+		DMA_TCR1_RgWr(v);\
+} while(0)
+
+#define DMA_TCR1_PBL_UdfRd(data) do {\
+		DMA_TCR1_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR1_PBL_Mask);\
+} while(0)
+
+
+#define DMA_TCR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1104))
+
+#define DMA_TCR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_TCR0_RgOffAddr);\
+} while(0)
+
+#define DMA_TCR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_TCR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_TCR0_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR0_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR0_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR0_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define  DMA_TCR0_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR0_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR0_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR0_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR0_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR0_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR0_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR0_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define DMA_TCR0_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR0_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR0_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR0_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR0_ST_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR0_RgRd(v);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_5))|((( 0) & (DMA_TCR0_Mask_5))<<5);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_13))|((( 0) & (DMA_TCR0_Mask_13))<<13);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_22))|((( 0) & (DMA_TCR0_Mask_22))<<22);\
+		v = ((v & DMA_TCR0_ST_Wr_Mask) | ((data & DMA_TCR0_ST_Mask)<<0));\
+		DMA_TCR0_RgWr(v);\
+} while(0)
+
+#define DMA_TCR0_ST_UdfRd(data) do {\
+		DMA_TCR0_RgRd(data);\
+		data = ((data >> 0) & DMA_TCR0_ST_Mask);\
+} while(0)
+
+/*#define DMA_TCR0_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR0_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR0_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR0_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR0_TCW_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR0_RgRd(v);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_5))|((( 0) & (DMA_TCR0_Mask_5))<<5);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_13))|((( 0) & (DMA_TCR0_Mask_13))<<13);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_22))|((( 0) & (DMA_TCR0_Mask_22))<<22);\
+		v = ((v & DMA_TCR0_TCW_Wr_Mask) | ((data & DMA_TCR0_TCW_Mask)<<1));\
+		DMA_TCR0_RgWr(v);\
+} while(0)
+
+#define DMA_TCR0_TCW_UdfRd(data) do {\
+		DMA_TCR0_RgRd(data);\
+		data = ((data >> 1) & DMA_TCR0_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR0_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR0_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR0_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR0_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR0_OSP_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR0_RgRd(v);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_5))|((( 0) & (DMA_TCR0_Mask_5))<<5);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_13))|((( 0) & (DMA_TCR0_Mask_13))<<13);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_22))|((( 0) & (DMA_TCR0_Mask_22))<<22);\
+		v = ((v & DMA_TCR0_OSP_Wr_Mask) | ((data & DMA_TCR0_OSP_Mask)<<4));\
+		DMA_TCR0_RgWr(v);\
+} while(0)
+
+#define DMA_TCR0_OSP_UdfRd(data) do {\
+		DMA_TCR0_RgRd(data);\
+		data = ((data >> 4) & DMA_TCR0_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR0_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR0_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR0_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR0_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR0_TSE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR0_RgRd(v);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_5))|((( 0) & (DMA_TCR0_Mask_5))<<5);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_13))|((( 0) & (DMA_TCR0_Mask_13))<<13);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_22))|((( 0) & (DMA_TCR0_Mask_22))<<22);\
+		v = ((v & DMA_TCR0_TSE_Wr_Mask) | ((data & DMA_TCR0_TSE_Mask)<<12));\
+		DMA_TCR0_RgWr(v);\
+} while(0)
+
+#define DMA_TCR0_TSE_UdfRd(data) do {\
+		DMA_TCR0_RgRd(data);\
+		data = ((data >> 12) & DMA_TCR0_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR0_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR0_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR0_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR0_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR0_PBL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_TCR0_RgRd(v);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_5))|((( 0) & (DMA_TCR0_Mask_5))<<5);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_13))|((( 0) & (DMA_TCR0_Mask_13))<<13);\
+		v = (v & (DMA_TCR0_RES_Wr_Mask_22))|((( 0) & (DMA_TCR0_Mask_22))<<22);\
+		v = ((v & DMA_TCR0_PBL_Wr_Mask) | ((data & DMA_TCR0_PBL_Mask)<<16));\
+		DMA_TCR0_RgWr(v);\
+} while(0)
+
+#define DMA_TCR0_PBL_UdfRd(data) do {\
+		DMA_TCR0_RgRd(data);\
+		data = ((data >> 16) & DMA_TCR0_PBL_Mask);\
+} while(0)
+
+
+#define DMA_CR7_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1480))
+
+#define DMA_CR7_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR7_RgOffAddr);\
+} while(0)
+
+#define DMA_CR7_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR7_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR7_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR7_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR7_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR7_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR7_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR7_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR7_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR7_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR7_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR7_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR7_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR7_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR7_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_MSS_Wr_Mask) | ((data & DMA_CR7_MSS_Mask)<<0));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_MSS_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 0) & DMA_CR7_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR7_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR7_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR7_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR7_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR7_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_PBLx8_Wr_Mask) | ((data & DMA_CR7_PBLx8_Mask)<<16));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_PBLx8_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 16) & DMA_CR7_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR7_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR7_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR7_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR7_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR7_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_DPE_Wr_Mask) | ((data & DMA_CR7_DPE_Mask)<<17));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_DPE_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 17) & DMA_CR7_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR7_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR7_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR7_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR7_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR7_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_DSL_Wr_Mask) | ((data & DMA_CR7_DSL_Mask)<<18));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_DSL_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 18) & DMA_CR7_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR7_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR7_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR7_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR7_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR7_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_CH_Wr_Mask) | ((data & DMA_CR7_CH_Mask)<<23));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_CH_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 23) & DMA_CR7_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR7_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR7_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR7_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR7_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR7_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR7_RgRd(v);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_21))|((( 0) & (DMA_CR7_Mask_21))<<21);\
+		v = (v & (DMA_CR7_RES_Wr_Mask_25))|((( 0) & (DMA_CR7_Mask_25))<<25);\
+		v = ((v & DMA_CR7_SPH_Wr_Mask) | ((data & DMA_CR7_SPH_Mask)<<24));\
+		DMA_CR7_RgWr(v);\
+} while(0)
+
+#define DMA_CR7_SPH_UdfRd(data) do {\
+		DMA_CR7_RgRd(data);\
+		data = ((data >> 24) & DMA_CR7_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR6_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1400))
+
+#define DMA_CR6_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR6_RgOffAddr);\
+} while(0)
+
+#define DMA_CR6_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR6_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR6_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR6_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR6_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR6_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR6_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR6_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR6_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR6_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR6_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR6_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR6_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR6_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR6_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_MSS_Wr_Mask) | ((data & DMA_CR6_MSS_Mask)<<0));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_MSS_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 0) & DMA_CR6_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR6_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR6_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR6_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR6_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR6_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_PBLx8_Wr_Mask) | ((data & DMA_CR6_PBLx8_Mask)<<16));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_PBLx8_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 16) & DMA_CR6_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR6_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR6_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR6_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR6_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR6_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_DPE_Wr_Mask) | ((data & DMA_CR6_DPE_Mask)<<17));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_DPE_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 17) & DMA_CR6_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR6_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR6_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR6_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR6_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR6_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_DSL_Wr_Mask) | ((data & DMA_CR6_DSL_Mask)<<18));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_DSL_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 18) & DMA_CR6_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR6_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR6_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR6_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR6_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR6_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_CH_Wr_Mask) | ((data & DMA_CR6_CH_Mask)<<23));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_CH_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 23) & DMA_CR6_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR6_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR6_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR6_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR6_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR6_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR6_RgRd(v);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_21))|((( 0) & (DMA_CR6_Mask_21))<<21);\
+		v = (v & (DMA_CR6_RES_Wr_Mask_25))|((( 0) & (DMA_CR6_Mask_25))<<25);\
+		v = ((v & DMA_CR6_SPH_Wr_Mask) | ((data & DMA_CR6_SPH_Mask)<<24));\
+		DMA_CR6_RgWr(v);\
+} while(0)
+
+#define DMA_CR6_SPH_UdfRd(data) do {\
+		DMA_CR6_RgRd(data);\
+		data = ((data >> 24) & DMA_CR6_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR5_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1380))
+
+#define DMA_CR5_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR5_RgOffAddr);\
+} while(0)
+
+#define DMA_CR5_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR5_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR5_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR5_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR5_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR5_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR5_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR5_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR5_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR5_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR5_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR5_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR5_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR5_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR5_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_MSS_Wr_Mask) | ((data & DMA_CR5_MSS_Mask)<<0));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_MSS_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 0) & DMA_CR5_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR5_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR5_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR5_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR5_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR5_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_PBLx8_Wr_Mask) | ((data & DMA_CR5_PBLx8_Mask)<<16));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_PBLx8_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 16) & DMA_CR5_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR5_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR5_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR5_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR5_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR5_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_DPE_Wr_Mask) | ((data & DMA_CR5_DPE_Mask)<<17));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_DPE_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 17) & DMA_CR5_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR5_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR5_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR5_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR5_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR5_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_DSL_Wr_Mask) | ((data & DMA_CR5_DSL_Mask)<<18));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_DSL_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 18) & DMA_CR5_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR5_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR5_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR5_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR5_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR5_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_CH_Wr_Mask) | ((data & DMA_CR5_CH_Mask)<<23));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_CH_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 23) & DMA_CR5_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR5_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR5_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR5_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR5_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR5_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR5_RgRd(v);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_21))|((( 0) & (DMA_CR5_Mask_21))<<21);\
+		v = (v & (DMA_CR5_RES_Wr_Mask_25))|((( 0) & (DMA_CR5_Mask_25))<<25);\
+		v = ((v & DMA_CR5_SPH_Wr_Mask) | ((data & DMA_CR5_SPH_Mask)<<24));\
+		DMA_CR5_RgWr(v);\
+} while(0)
+
+#define DMA_CR5_SPH_UdfRd(data) do {\
+		DMA_CR5_RgRd(data);\
+		data = ((data >> 24) & DMA_CR5_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR4_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1300))
+
+#define DMA_CR4_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR4_RgOffAddr);\
+} while(0)
+
+#define DMA_CR4_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR4_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR4_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR4_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR4_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR4_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR4_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR4_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR4_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR4_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR4_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR4_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR4_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR4_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR4_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_MSS_Wr_Mask) | ((data & DMA_CR4_MSS_Mask)<<0));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_MSS_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 0) & DMA_CR4_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR4_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR4_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR4_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR4_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR4_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_PBLx8_Wr_Mask) | ((data & DMA_CR4_PBLx8_Mask)<<16));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_PBLx8_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 16) & DMA_CR4_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR4_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR4_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR4_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR4_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR4_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_DPE_Wr_Mask) | ((data & DMA_CR4_DPE_Mask)<<17));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_DPE_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 17) & DMA_CR4_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR4_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR4_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR4_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR4_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR4_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_DSL_Wr_Mask) | ((data & DMA_CR4_DSL_Mask)<<18));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_DSL_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 18) & DMA_CR4_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR4_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR4_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR4_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR4_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR4_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_CH_Wr_Mask) | ((data & DMA_CR4_CH_Mask)<<23));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_CH_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 23) & DMA_CR4_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR4_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR4_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR4_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR4_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR4_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR4_RgRd(v);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_21))|((( 0) & (DMA_CR4_Mask_21))<<21);\
+		v = (v & (DMA_CR4_RES_Wr_Mask_25))|((( 0) & (DMA_CR4_Mask_25))<<25);\
+		v = ((v & DMA_CR4_SPH_Wr_Mask) | ((data & DMA_CR4_SPH_Mask)<<24));\
+		DMA_CR4_RgWr(v);\
+} while(0)
+
+#define DMA_CR4_SPH_UdfRd(data) do {\
+		DMA_CR4_RgRd(data);\
+		data = ((data >> 24) & DMA_CR4_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR3_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1280))
+
+#define DMA_CR3_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR3_RgOffAddr);\
+} while(0)
+
+#define DMA_CR3_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR3_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR3_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR3_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR3_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR3_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR3_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR3_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR3_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR3_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR3_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR3_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR3_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR3_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR3_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_MSS_Wr_Mask) | ((data & DMA_CR3_MSS_Mask)<<0));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_MSS_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 0) & DMA_CR3_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR3_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR3_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR3_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR3_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR3_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_PBLx8_Wr_Mask) | ((data & DMA_CR3_PBLx8_Mask)<<16));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_PBLx8_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 16) & DMA_CR3_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR3_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR3_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR3_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR3_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR3_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_DPE_Wr_Mask) | ((data & DMA_CR3_DPE_Mask)<<17));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_DPE_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 17) & DMA_CR3_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR3_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR3_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR3_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR3_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR3_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_DSL_Wr_Mask) | ((data & DMA_CR3_DSL_Mask)<<18));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_DSL_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 18) & DMA_CR3_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR3_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR3_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR3_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR3_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR3_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_CH_Wr_Mask) | ((data & DMA_CR3_CH_Mask)<<23));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_CH_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 23) & DMA_CR3_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR3_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR3_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR3_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR3_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR3_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR3_RgRd(v);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_21))|((( 0) & (DMA_CR3_Mask_21))<<21);\
+		v = (v & (DMA_CR3_RES_Wr_Mask_25))|((( 0) & (DMA_CR3_Mask_25))<<25);\
+		v = ((v & DMA_CR3_SPH_Wr_Mask) | ((data & DMA_CR3_SPH_Mask)<<24));\
+		DMA_CR3_RgWr(v);\
+} while(0)
+
+#define DMA_CR3_SPH_UdfRd(data) do {\
+		DMA_CR3_RgRd(data);\
+		data = ((data >> 24) & DMA_CR3_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR2_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1200))
+
+#define DMA_CR2_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR2_RgOffAddr);\
+} while(0)
+
+#define DMA_CR2_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR2_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR2_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR2_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR2_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR2_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR2_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR2_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR2_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR2_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR2_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR2_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR2_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR2_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR2_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_MSS_Wr_Mask) | ((data & DMA_CR2_MSS_Mask)<<0));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_MSS_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 0) & DMA_CR2_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR2_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR2_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR2_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR2_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR2_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_PBLx8_Wr_Mask) | ((data & DMA_CR2_PBLx8_Mask)<<16));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_PBLx8_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 16) & DMA_CR2_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR2_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR2_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR2_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR2_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR2_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_DPE_Wr_Mask) | ((data & DMA_CR2_DPE_Mask)<<17));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_DPE_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 17) & DMA_CR2_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR2_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR2_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR2_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR2_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR2_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_DSL_Wr_Mask) | ((data & DMA_CR2_DSL_Mask)<<18));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_DSL_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 18) & DMA_CR2_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR2_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR2_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR2_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR2_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR2_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_CH_Wr_Mask) | ((data & DMA_CR2_CH_Mask)<<23));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_CH_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 23) & DMA_CR2_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR2_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR2_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR2_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR2_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR2_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR2_RgRd(v);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_21))|((( 0) & (DMA_CR2_Mask_21))<<21);\
+		v = (v & (DMA_CR2_RES_Wr_Mask_25))|((( 0) & (DMA_CR2_Mask_25))<<25);\
+		v = ((v & DMA_CR2_SPH_Wr_Mask) | ((data & DMA_CR2_SPH_Mask)<<24));\
+		DMA_CR2_RgWr(v);\
+} while(0)
+
+#define DMA_CR2_SPH_UdfRd(data) do {\
+		DMA_CR2_RgRd(data);\
+		data = ((data >> 24) & DMA_CR2_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR1_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1180))
+
+#define DMA_CR1_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR1_RgOffAddr);\
+} while(0)
+
+#define DMA_CR1_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR1_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR1_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR1_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR1_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR1_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR1_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR1_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR1_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR1_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR1_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR1_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR1_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR1_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR1_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_MSS_Wr_Mask) | ((data & DMA_CR1_MSS_Mask)<<0));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_MSS_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 0) & DMA_CR1_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR1_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR1_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR1_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR1_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR1_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_PBLx8_Wr_Mask) | ((data & DMA_CR1_PBLx8_Mask)<<16));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_PBLx8_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 16) & DMA_CR1_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR1_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR1_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR1_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR1_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR1_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_DPE_Wr_Mask) | ((data & DMA_CR1_DPE_Mask)<<17));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_DPE_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 17) & DMA_CR1_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR1_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR1_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR1_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR1_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR1_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_DSL_Wr_Mask) | ((data & DMA_CR1_DSL_Mask)<<18));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_DSL_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 18) & DMA_CR1_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR1_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR1_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR1_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR1_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR1_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_CH_Wr_Mask) | ((data & DMA_CR1_CH_Mask)<<23));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_CH_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 23) & DMA_CR1_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR1_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR1_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR1_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR1_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR1_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR1_RgRd(v);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_21))|((( 0) & (DMA_CR1_Mask_21))<<21);\
+		v = (v & (DMA_CR1_RES_Wr_Mask_25))|((( 0) & (DMA_CR1_Mask_25))<<25);\
+		v = ((v & DMA_CR1_SPH_Wr_Mask) | ((data & DMA_CR1_SPH_Mask)<<24));\
+		DMA_CR1_RgWr(v);\
+} while(0)
+
+#define DMA_CR1_SPH_UdfRd(data) do {\
+		DMA_CR1_RgRd(data);\
+		data = ((data >> 24) & DMA_CR1_SPH_Mask);\
+} while(0)
+
+
+#define DMA_CR0_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x1100))
+
+#define DMA_CR0_RgWr(data) do {\
+		iowrite32(data, (void *)DMA_CR0_RgOffAddr);\
+} while(0)
+
+#define DMA_CR0_RgRd(data) do {\
+		(data) = ioread32((void *)DMA_CR0_RgOffAddr);\
+} while(0)
+
+/*#define  DMA_CR0_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR0_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR0_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR0_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define  DMA_CR0_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR0_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR0_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR0_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define DMA_CR0_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR0_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR0_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR0_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR0_MSS_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_MSS_Wr_Mask) | ((data & DMA_CR0_MSS_Mask)<<0));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_MSS_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 0) & DMA_CR0_MSS_Mask);\
+} while(0)
+
+/*#define DMA_CR0_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR0_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR0_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR0_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR0_PBLx8_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_PBLx8_Wr_Mask) | ((data & DMA_CR0_PBLx8_Mask)<<16));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_PBLx8_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 16) & DMA_CR0_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR0_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR0_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR0_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR0_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR0_DPE_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_DPE_Wr_Mask) | ((data & DMA_CR0_DPE_Mask)<<17));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_DPE_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 17) & DMA_CR0_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR0_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR0_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR0_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR0_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR0_DSL_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_DSL_Wr_Mask) | ((data & DMA_CR0_DSL_Mask)<<18));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_DSL_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 18) & DMA_CR0_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR0_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR0_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR0_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR0_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR0_CH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_CH_Wr_Mask) | ((data & DMA_CR0_CH_Mask)<<23));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_CH_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 23) & DMA_CR0_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR0_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR0_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR0_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR0_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR0_SPH_UdfWr(data) do {\
+		ULONG v;\
+		DMA_CR0_RgRd(v);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_21))|((( 0) & (DMA_CR0_Mask_21))<<21);\
+		v = (v & (DMA_CR0_RES_Wr_Mask_25))|((( 0) & (DMA_CR0_Mask_25))<<25);\
+		v = ((v & DMA_CR0_SPH_Wr_Mask) | ((data & DMA_CR0_SPH_Mask)<<24));\
+		DMA_CR0_RgWr(v);\
+} while(0)
+
+#define DMA_CR0_SPH_UdfRd(data) do {\
+		DMA_CR0_RgRd(data);\
+		data = ((data >> 24) & DMA_CR0_SPH_Mask);\
+} while(0)
+
+
+#define MAC_WTR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0xc))
+
+#define MAC_WTR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_WTR_RgOffAddr);\
+} while(0)
+
+#define MAC_WTR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_WTR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_WTR_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  MAC_WTR_Mask_17 (ULONG)(0x7fff)
+
+/*#define MAC_WTR_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define MAC_WTR_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define  MAC_WTR_Mask_14 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_WTR_Mask_14 (ULONG)(0x3)
+
+/*#define MAC_WTR_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(2)))<<(14)))*/
+
+#define MAC_WTR_RES_Wr_Mask_14 (ULONG)(0xffff3fff)
+
+/*#define MAC_WTR_PWE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_WTR_PWE_Mask (ULONG)(0x1)
+
+/*#define MAC_WTR_PWE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_WTR_PWE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_WTR_PWE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_WTR_RgRd(v);\
+		v = (v & (MAC_WTR_RES_Wr_Mask_17))|((( 0) & (MAC_WTR_Mask_17))<<17);\
+		v = (v & (MAC_WTR_RES_Wr_Mask_14))|((( 0) & (MAC_WTR_Mask_14))<<14);\
+		v = ((v & MAC_WTR_PWE_Wr_Mask) | ((data & MAC_WTR_PWE_Mask)<<16));\
+		MAC_WTR_RgWr(v);\
+} while(0)
+
+#define MAC_WTR_PWE_UdfRd(data) do {\
+		MAC_WTR_RgRd(data);\
+		data = ((data >> 16) & MAC_WTR_PWE_Mask);\
+} while(0)
+
+/*#define MAC_WTR_WTO_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MAC_WTR_WTO_Mask (ULONG)(0x3fff)
+
+/*#define MAC_WTR_WTO_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MAC_WTR_WTO_Wr_Mask (ULONG)(0xffffc000)
+
+#define MAC_WTR_WTO_UdfWr(data) do {\
+		ULONG v;\
+		MAC_WTR_RgRd(v);\
+		v = (v & (MAC_WTR_RES_Wr_Mask_17))|((( 0) & (MAC_WTR_Mask_17))<<17);\
+		v = (v & (MAC_WTR_RES_Wr_Mask_14))|((( 0) & (MAC_WTR_Mask_14))<<14);\
+		v = ((v & MAC_WTR_WTO_Wr_Mask) | ((data & MAC_WTR_WTO_Mask)<<0));\
+		MAC_WTR_RgWr(v);\
+} while(0)
+
+#define MAC_WTR_WTO_UdfRd(data) do {\
+		MAC_WTR_RgRd(data);\
+		data = ((data >> 0) & MAC_WTR_WTO_Mask);\
+} while(0)
+
+
+#define MAC_MPFR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x8))
+
+#define MAC_MPFR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MPFR_RgOffAddr);\
+} while(0)
+
+#define MAC_MPFR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MPFR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_MPFR_Mask_22 (ULONG)(~(~0<<(9)))*/
+
+#define  MAC_MPFR_Mask_22 (ULONG)(0x1ff)
+
+/*#define MAC_MPFR_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(9)))<<(22)))*/
+
+#define MAC_MPFR_RES_Wr_Mask_22 (ULONG)(0x803fffff)
+
+/*#define  MAC_MPFR_Mask_17 (ULONG)(~(~0<<(3)))*/
+
+#define  MAC_MPFR_Mask_17 (ULONG)(0x7)
+
+/*#define MAC_MPFR_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(3)))<<(17)))*/
+
+#define MAC_MPFR_RES_Wr_Mask_17 (ULONG)(0xfff1ffff)
+
+/*#define  MAC_MPFR_Mask_11 (ULONG)(~(~0<<(5)))*/
+
+#define  MAC_MPFR_Mask_11 (ULONG)(0x1f)
+
+/*#define MAC_MPFR_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(5)))<<(11)))*/
+
+#define MAC_MPFR_RES_Wr_Mask_11 (ULONG)(0xffff07ff)
+
+/*#define MAC_MPFR_RA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_RA_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_RA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MPFR_RA_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MPFR_RA_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_RA_Wr_Mask) | ((data & MAC_MPFR_RA_Mask)<<31));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_RA_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 31) & MAC_MPFR_RA_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_DNTU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_DNTU_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_DNTU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_MPFR_DNTU_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_MPFR_DNTU_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_DNTU_Wr_Mask) | ((data & MAC_MPFR_DNTU_Mask)<<21));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_DNTU_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 21) & MAC_MPFR_DNTU_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_IPFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_IPFE_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_IPFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_MPFR_IPFE_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_MPFR_IPFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_IPFE_Wr_Mask) | ((data & MAC_MPFR_IPFE_Mask)<<20));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_IPFE_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 20) & MAC_MPFR_IPFE_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_VTFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_VTFE_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_VTFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_MPFR_VTFE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_MPFR_VTFE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_VTFE_Wr_Mask) | ((data & MAC_MPFR_VTFE_Mask)<<16));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_VTFE_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 16) & MAC_MPFR_VTFE_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_HPF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_HPF_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_HPF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MAC_MPFR_HPF_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MAC_MPFR_HPF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_HPF_Wr_Mask) | ((data & MAC_MPFR_HPF_Mask)<<10));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_HPF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 10) & MAC_MPFR_HPF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_SAF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_SAF_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_SAF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MAC_MPFR_SAF_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MAC_MPFR_SAF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_SAF_Wr_Mask) | ((data & MAC_MPFR_SAF_Mask)<<9));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_SAF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 9) & MAC_MPFR_SAF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_SAIF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_SAIF_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_SAIF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MAC_MPFR_SAIF_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MAC_MPFR_SAIF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_SAIF_Wr_Mask) | ((data & MAC_MPFR_SAIF_Mask)<<8));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_SAIF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 8) & MAC_MPFR_SAIF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_PCF_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_MPFR_PCF_Mask (ULONG)(0x3)
+
+/*#define MAC_MPFR_PCF_Wr_Mask (ULONG)(~((~(~0 << (2))) << (6)))*/
+
+#define MAC_MPFR_PCF_Wr_Mask (ULONG)(0xffffff3f)
+
+#define MAC_MPFR_PCF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_PCF_Wr_Mask) | ((data & MAC_MPFR_PCF_Mask)<<6));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_PCF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 6) & MAC_MPFR_PCF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_DBF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_DBF_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_DBF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_MPFR_DBF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_MPFR_DBF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_DBF_Wr_Mask) | ((data & MAC_MPFR_DBF_Mask)<<5));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_DBF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 5) & MAC_MPFR_DBF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_PM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_PM_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_PM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_MPFR_PM_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_MPFR_PM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_PM_Wr_Mask) | ((data & MAC_MPFR_PM_Mask)<<4));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_PM_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 4) & MAC_MPFR_PM_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_DAIF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_DAIF_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_DAIF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_MPFR_DAIF_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_MPFR_DAIF_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_DAIF_Wr_Mask) | ((data & MAC_MPFR_DAIF_Mask)<<3));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_DAIF_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 3) & MAC_MPFR_DAIF_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_HMC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_HMC_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_HMC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_MPFR_HMC_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_MPFR_HMC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_HMC_Wr_Mask) | ((data & MAC_MPFR_HMC_Mask)<<2));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_HMC_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 2) & MAC_MPFR_HMC_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_HUC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_HUC_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_HUC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_MPFR_HUC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_MPFR_HUC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_HUC_Wr_Mask) | ((data & MAC_MPFR_HUC_Mask)<<1));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_HUC_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 1) & MAC_MPFR_HUC_Mask);\
+} while(0)
+
+/*#define MAC_MPFR_PR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MPFR_PR_Mask (ULONG)(0x1)
+
+/*#define MAC_MPFR_PR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_MPFR_PR_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_MPFR_PR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MPFR_RgRd(v);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_22))|((( 0) & (MAC_MPFR_Mask_22))<<22);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_17))|((( 0) & (MAC_MPFR_Mask_17))<<17);\
+		v = (v & (MAC_MPFR_RES_Wr_Mask_11))|((( 0) & (MAC_MPFR_Mask_11))<<11);\
+		v = ((v & MAC_MPFR_PR_Wr_Mask) | ((data & MAC_MPFR_PR_Mask)<<0));\
+		MAC_MPFR_RgWr(v);\
+} while(0)
+
+#define MAC_MPFR_PR_UdfRd(data) do {\
+		MAC_MPFR_RgRd(data);\
+		data = ((data >> 0) & MAC_MPFR_PR_Mask);\
+} while(0)
+
+
+#define MAC_MECR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0x4))
+
+#define MAC_MECR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MECR_RgOffAddr);\
+} while(0)
+
+#define MAC_MECR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MECR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_MECR_Mask_23 (ULONG)(~(~0<<(9)))*/
+
+#define  MAC_MECR_Mask_23 (ULONG)(0x1ff)
+
+/*#define MAC_MECR_RES_Wr_Mask_23 (ULONG)(~((~(~0<<(9)))<<(23)))*/
+
+#define MAC_MECR_RES_Wr_Mask_23 (ULONG)(0x7fffff)
+
+/*#define  MAC_MECR_Mask_19 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_MECR_Mask_19 (ULONG)(0x1)
+
+/*#define MAC_MECR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(1)))<<(19)))*/
+
+#define MAC_MECR_RES_Wr_Mask_19 (ULONG)(0xfff7ffff)
+
+/*#define  MAC_MECR_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_MECR_Mask_15 (ULONG)(0x1)
+
+/*#define MAC_MECR_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define MAC_MECR_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define MAC_MECR_HDSMS_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MECR_HDSMS_Mask (ULONG)(0x7)
+
+/*#define MAC_MECR_HDSMS_Wr_Mask (ULONG)(~((~(~0 << (3))) << (20)))*/
+
+#define MAC_MECR_HDSMS_Wr_Mask (ULONG)(0xff8fffff)
+
+#define MAC_MECR_HDSMS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MECR_RgRd(v);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_23))|((( 0) & (MAC_MECR_Mask_23))<<23);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_19))|((( 0) & (MAC_MECR_Mask_19))<<19);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_15))|((( 0) & (MAC_MECR_Mask_15))<<15);\
+		v = ((v & MAC_MECR_HDSMS_Wr_Mask) | ((data & MAC_MECR_HDSMS_Mask)<<20));\
+		MAC_MECR_RgWr(v);\
+} while(0)
+
+#define MAC_MECR_HDSMS_UdfRd(data) do {\
+		MAC_MECR_RgRd(data);\
+		data = ((data >> 20) & MAC_MECR_HDSMS_Mask);\
+} while(0)
+
+/*#define MAC_MECR_USP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MECR_USP_Mask (ULONG)(0x1)
+
+/*#define MAC_MECR_USP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_MECR_USP_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_MECR_USP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MECR_RgRd(v);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_23))|((( 0) & (MAC_MECR_Mask_23))<<23);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_19))|((( 0) & (MAC_MECR_Mask_19))<<19);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_15))|((( 0) & (MAC_MECR_Mask_15))<<15);\
+		v = ((v & MAC_MECR_USP_Wr_Mask) | ((data & MAC_MECR_USP_Mask)<<18));\
+		MAC_MECR_RgWr(v);\
+} while(0)
+
+#define MAC_MECR_USP_UdfRd(data) do {\
+		MAC_MECR_RgRd(data);\
+		data = ((data >> 18) & MAC_MECR_USP_Mask);\
+} while(0)
+
+/*#define MAC_MECR_SPEN_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MECR_SPEN_Mask (ULONG)(0x1)
+
+/*#define MAC_MECR_SPEN_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MAC_MECR_SPEN_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MAC_MECR_SPEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MECR_RgRd(v);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_23))|((( 0) & (MAC_MECR_Mask_23))<<23);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_19))|((( 0) & (MAC_MECR_Mask_19))<<19);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_15))|((( 0) & (MAC_MECR_Mask_15))<<15);\
+		v = ((v & MAC_MECR_SPEN_Wr_Mask) | ((data & MAC_MECR_SPEN_Mask)<<17));\
+		MAC_MECR_RgWr(v);\
+} while(0)
+
+#define MAC_MECR_SPEN_UdfRd(data) do {\
+		MAC_MECR_RgRd(data);\
+		data = ((data >> 17) & MAC_MECR_SPEN_Mask);\
+} while(0)
+
+/*#define MAC_MECR_DCRCC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MECR_DCRCC_Mask (ULONG)(0x1)
+
+/*#define MAC_MECR_DCRCC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_MECR_DCRCC_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_MECR_DCRCC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MECR_RgRd(v);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_23))|((( 0) & (MAC_MECR_Mask_23))<<23);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_19))|((( 0) & (MAC_MECR_Mask_19))<<19);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_15))|((( 0) & (MAC_MECR_Mask_15))<<15);\
+		v = ((v & MAC_MECR_DCRCC_Wr_Mask) | ((data & MAC_MECR_DCRCC_Mask)<<16));\
+		MAC_MECR_RgWr(v);\
+} while(0)
+
+#define MAC_MECR_DCRCC_UdfRd(data) do {\
+		MAC_MECR_RgRd(data);\
+		data = ((data >> 16) & MAC_MECR_DCRCC_Mask);\
+} while(0)
+
+/*#define MAC_MECR_GPSL_Mask (ULONG)(~(~0<<(15)))*/
+
+#define MAC_MECR_GPSL_Mask (ULONG)(0x7fff)
+
+/*#define MAC_MECR_GPSL_Wr_Mask (ULONG)(~((~(~0 << (15))) << (0)))*/
+
+#define MAC_MECR_GPSL_Wr_Mask (ULONG)(0xffff8000)
+
+#define MAC_MECR_GPSL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MECR_RgRd(v);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_23))|((( 0) & (MAC_MECR_Mask_23))<<23);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_19))|((( 0) & (MAC_MECR_Mask_19))<<19);\
+		v = (v & (MAC_MECR_RES_Wr_Mask_15))|((( 0) & (MAC_MECR_Mask_15))<<15);\
+		v = ((v & MAC_MECR_GPSL_Wr_Mask) | ((data & MAC_MECR_GPSL_Mask)<<0));\
+		MAC_MECR_RgWr(v);\
+} while(0)
+
+#define MAC_MECR_GPSL_UdfRd(data) do {\
+		MAC_MECR_RgRd(data);\
+		data = ((data >> 0) & MAC_MECR_GPSL_Mask);\
+} while(0)
+
+
+#define MAC_MCR_RgOffAddr ((volatile ULONG *)(BASE_ADDRESS + 0))
+
+#define MAC_MCR_RgWr(data) do {\
+		iowrite32(data, (void *)MAC_MCR_RgOffAddr);\
+} while(0)
+
+#define MAC_MCR_RgRd(data) do {\
+		(data) = ioread32((void *)MAC_MCR_RgOffAddr);\
+} while(0)
+
+/*#define  MAC_MCR_Mask_7 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_MCR_Mask_7 (ULONG)(0x1)
+
+/*#define MAC_MCR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(1)))<<(7)))*/
+
+#define MAC_MCR_RES_Wr_Mask_7 (ULONG)(0xffffff7f)
+
+/*#define MAC_MCR_ARPEN_Mask (unsigned long)(~(~0<<(1)))*/
+
+#define MAC_MCR_ARPEN_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_ARPEN_Wr_Mask (unsigned long)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MCR_ARPEN_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MCR_ARPEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_ARPEN_Wr_Mask) | ((data & MAC_MCR_ARPEN_Mask)<<31));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_ARPEN_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 31) & MAC_MCR_ARPEN_Mask);\
+} while(0)
+
+/*#define MAC_MCR_SARC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MCR_SARC_Mask (ULONG)(0x7)
+
+/*#define MAC_MCR_SARC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (28)))*/
+
+#define MAC_MCR_SARC_Wr_Mask (ULONG)(0x8fffffff)
+
+#define MAC_MCR_SARC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_SARC_Wr_Mask) | ((data & MAC_MCR_SARC_Mask)<<28));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_SARC_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 28) & MAC_MCR_SARC_Mask);\
+} while(0)
+
+/*#define MAC_MCR_IPC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_IPC_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_IPC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MAC_MCR_IPC_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MAC_MCR_IPC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_IPC_Wr_Mask) | ((data & MAC_MCR_IPC_Mask)<<27));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_IPC_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 27) & MAC_MCR_IPC_Mask);\
+} while(0)
+
+/*#define MAC_MCR_IFG_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MCR_IFG_Mask (ULONG)(0x7)
+
+/*#define MAC_MCR_IFG_Wr_Mask (ULONG)(~((~(~0 << (3))) << (24)))*/
+
+#define MAC_MCR_IFG_Wr_Mask (ULONG)(0xf8ffffff)
+
+#define MAC_MCR_IFG_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_IFG_Wr_Mask) | ((data & MAC_MCR_IFG_Mask)<<24));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_IFG_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 24) & MAC_MCR_IFG_Mask);\
+} while(0)
+
+/*#define MAC_MCR_GPSLCE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_GPSLCE_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_GPSLCE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define MAC_MCR_GPSLCE_Wr_Mask (ULONG)(0xff7fffff)
+
+#define MAC_MCR_GPSLCE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_GPSLCE_Wr_Mask) | ((data & MAC_MCR_GPSLCE_Mask)<<23));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_GPSLCE_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 23) & MAC_MCR_GPSLCE_Mask);\
+} while(0)
+
+/*#define MAC_MCR_S2KP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_S2KP_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_S2KP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (22)))*/
+
+#define MAC_MCR_S2KP_Wr_Mask (ULONG)(0xffbfffff)
+
+#define MAC_MCR_S2KP_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_S2KP_Wr_Mask) | ((data & MAC_MCR_S2KP_Mask)<<22));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_S2KP_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 22) & MAC_MCR_S2KP_Mask);\
+} while(0)
+
+/*#define MAC_MCR_CST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_CST_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_CST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_MCR_CST_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_MCR_CST_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_CST_Wr_Mask) | ((data & MAC_MCR_CST_Mask)<<21));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_CST_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 21) & MAC_MCR_CST_Mask);\
+} while(0)
+
+/*#define MAC_MCR_ACS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_ACS_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_ACS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_MCR_ACS_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_MCR_ACS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_ACS_Wr_Mask) | ((data & MAC_MCR_ACS_Mask)<<20));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_ACS_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 20) & MAC_MCR_ACS_Mask);\
+} while(0)
+
+/*#define MAC_MCR_WD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_WD_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_WD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_MCR_WD_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_MCR_WD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_WD_Wr_Mask) | ((data & MAC_MCR_WD_Mask)<<19));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_WD_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 19) & MAC_MCR_WD_Mask);\
+} while(0)
+
+/*#define MAC_MCR_BE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_BE_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_BE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_MCR_BE_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_MCR_BE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_BE_Wr_Mask) | ((data & MAC_MCR_BE_Mask)<<18));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_BE_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 18) & MAC_MCR_BE_Mask);\
+} while(0)
+
+/*#define MAC_MCR_JD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_JD_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_JD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define MAC_MCR_JD_Wr_Mask (ULONG)(0xfffdffff)
+
+#define MAC_MCR_JD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_JD_Wr_Mask) | ((data & MAC_MCR_JD_Mask)<<17));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_JD_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 17) & MAC_MCR_JD_Mask);\
+} while(0)
+
+/*#define MAC_MCR_JE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_JE_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_JE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_MCR_JE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_MCR_JE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_JE_Wr_Mask) | ((data & MAC_MCR_JE_Mask)<<16));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_JE_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 16) & MAC_MCR_JE_Mask);\
+} while(0)
+
+/*#define MAC_MCR_PS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_PS_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_PS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define MAC_MCR_PS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define MAC_MCR_PS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_PS_Wr_Mask) | ((data & MAC_MCR_PS_Mask)<<15));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_PS_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 15) & MAC_MCR_PS_Mask);\
+} while(0)
+
+/*#define MAC_MCR_FES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_FES_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_FES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define MAC_MCR_FES_Wr_Mask (ULONG)(0xffffbfff)
+
+#define MAC_MCR_FES_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_FES_Wr_Mask) | ((data & MAC_MCR_FES_Mask)<<14));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_FES_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 14) & MAC_MCR_FES_Mask);\
+} while(0)
+
+/*#define MAC_MCR_DM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_DM_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_DM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define MAC_MCR_DM_Wr_Mask (ULONG)(0xffffdfff)
+
+#define MAC_MCR_DM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_DM_Wr_Mask) | ((data & MAC_MCR_DM_Mask)<<13));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_DM_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 13) & MAC_MCR_DM_Mask);\
+} while(0)
+
+/*#define MAC_MCR_LM_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_LM_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_LM_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define MAC_MCR_LM_Wr_Mask (ULONG)(0xffffefff)
+
+#define MAC_MCR_LM_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_LM_Wr_Mask) | ((data & MAC_MCR_LM_Mask)<<12));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_LM_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 12) & MAC_MCR_LM_Mask);\
+} while(0)
+
+/*#define MAC_MCR_ECRSFD_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_ECRSFD_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_ECRSFD_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MAC_MCR_ECRSFD_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MAC_MCR_ECRSFD_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_ECRSFD_Wr_Mask) | ((data & MAC_MCR_ECRSFD_Mask)<<11));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_ECRSFD_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 11) & MAC_MCR_ECRSFD_Mask);\
+} while(0)
+
+/*#define MAC_MCR_DRO_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_DRO_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_DRO_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define MAC_MCR_DRO_Wr_Mask (ULONG)(0xfffffbff)
+
+#define MAC_MCR_DRO_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_DRO_Wr_Mask) | ((data & MAC_MCR_DRO_Mask)<<10));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_DRO_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 10) & MAC_MCR_DRO_Mask);\
+} while(0)
+
+/*#define MAC_MCR_DCRS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_DCRS_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_DCRS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define MAC_MCR_DCRS_Wr_Mask (ULONG)(0xfffffdff)
+
+#define MAC_MCR_DCRS_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_DCRS_Wr_Mask) | ((data & MAC_MCR_DCRS_Mask)<<9));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_DCRS_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 9) & MAC_MCR_DCRS_Mask);\
+} while(0)
+
+/*#define MAC_MCR_DR_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_DR_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_DR_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define MAC_MCR_DR_Wr_Mask (ULONG)(0xfffffeff)
+
+#define MAC_MCR_DR_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_DR_Wr_Mask) | ((data & MAC_MCR_DR_Mask)<<8));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_DR_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 8) & MAC_MCR_DR_Mask);\
+} while(0)
+
+/*#define MAC_MCR_BL_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_MCR_BL_Mask (ULONG)(0x3)
+
+/*#define MAC_MCR_BL_Wr_Mask (ULONG)(~((~(~0 << (2))) << (5)))*/
+
+#define MAC_MCR_BL_Wr_Mask (ULONG)(0xffffff9f)
+
+#define MAC_MCR_BL_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_BL_Wr_Mask) | ((data & MAC_MCR_BL_Mask)<<5));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_BL_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 5) & MAC_MCR_BL_Mask);\
+} while(0)
+
+/*#define MAC_MCR_DEFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_DEFC_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_DEFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_MCR_DEFC_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_MCR_DEFC_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_DEFC_Wr_Mask) | ((data & MAC_MCR_DEFC_Mask)<<4));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_DEFC_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 4) & MAC_MCR_DEFC_Mask);\
+} while(0)
+
+/*#define MAC_MCR_PRELEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MAC_MCR_PRELEN_Mask (ULONG)(0x3)
+
+/*#define MAC_MCR_PRELEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MAC_MCR_PRELEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MAC_MCR_PRELEN_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_PRELEN_Wr_Mask) | ((data & MAC_MCR_PRELEN_Mask)<<2));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_PRELEN_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 2) & MAC_MCR_PRELEN_Mask);\
+} while(0)
+
+/*#define MAC_MCR_TE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_TE_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_TE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_MCR_TE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_MCR_TE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_TE_Wr_Mask) | ((data & MAC_MCR_TE_Mask)<<1));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_TE_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 1) & MAC_MCR_TE_Mask);\
+} while(0)
+
+/*#define MAC_MCR_RE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MCR_RE_Mask (ULONG)(0x1)
+
+/*#define MAC_MCR_RE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_MCR_RE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_MCR_RE_UdfWr(data) do {\
+		ULONG v;\
+		MAC_MCR_RgRd(v);\
+		v = (v & (MAC_MCR_RES_Wr_Mask_7))|((( 0) & (MAC_MCR_Mask_7))<<7);\
+		v = ((v & MAC_MCR_RE_Wr_Mask) | ((data & MAC_MCR_RE_Mask)<<0));\
+		MAC_MCR_RgWr(v);\
+} while(0)
+
+#define MAC_MCR_RE_UdfRd(data) do {\
+		MAC_MCR_RgRd(data);\
+		data = ((data >> 0) & MAC_MCR_RE_Mask);\
+} while(0)
+
+
+#define MAC_MA32_127LR_RgOffAddr (BASE_ADDRESS + 0x404)
+
+#define MAC_MA32_127LR_RgOffAddress(i) ((volatile ULONG *)(MAC_MA32_127LR_RgOffAddr + ((i-32)*8)))
+
+#define MAC_MA32_127LR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_MA32_127LR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA32_127LR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_MA32_127LR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA32_127LR_ADDRLO_UdfWr(i,data) do {\
+		MAC_MA32_127LR_RgWr(i,data);\
+} while(0)
+
+#define MAC_MA32_127LR_ADDRLO_UdfRd(i,data) do {\
+		MAC_MA32_127LR_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_MA32_127HR_RgOffAddr (BASE_ADDRESS + 0x400)
+
+#define MAC_MA32_127HR_RgOffAddress(i) ((volatile ULONG *)(MAC_MA32_127HR_RgOffAddr + ((i-32)*8)))
+
+#define MAC_MA32_127HR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_MA32_127HR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA32_127HR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_MA32_127HR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MAC_MA32_127HR_Mask_19 (ULONG)(~(~0<<(12)))*/
+
+#define  MAC_MA32_127HR_Mask_19 (ULONG)(0xfff)
+
+/*#define MAC_MA32_127HR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(12)))<<(19)))*/
+
+#define MAC_MA32_127HR_RES_Wr_Mask_19 (ULONG)(0x8007ffff)
+
+/*#define MAC_MA32_127HR_AE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA32_127HR_AE_Mask (ULONG)(0x1)
+
+/*#define MAC_MA32_127HR_AE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MA32_127HR_AE_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MA32_127HR_AE_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA32_127HR_RgRd(i,v);\
+		v = (v & (MAC_MA32_127HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA32_127HR_Mask_19))<<19);\
+		v = ((v & MAC_MA32_127HR_AE_Wr_Mask) | ((data & MAC_MA32_127HR_AE_Mask)<<31));\
+		MAC_MA32_127HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA32_127HR_AE_UdfRd(i,data) do {\
+		MAC_MA32_127HR_RgRd(i,data);\
+		data = ((data >> 31) & MAC_MA32_127HR_AE_Mask);\
+} while(0)
+
+/*#define MAC_MA32_127HR_DCS_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MA32_127HR_DCS_Mask (ULONG)(0x7)
+
+/*#define MAC_MA32_127HR_DCS_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MAC_MA32_127HR_DCS_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MAC_MA32_127HR_DCS_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA32_127HR_RgRd(i,v);\
+		v = (v & (MAC_MA32_127HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA32_127HR_Mask_19))<<19);\
+		v = ((v & MAC_MA32_127HR_DCS_Wr_Mask) | ((data & MAC_MA32_127HR_DCS_Mask)<<16));\
+		MAC_MA32_127HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA32_127HR_DCS_UdfRd(i,data) do {\
+		MAC_MA32_127HR_RgRd(i,data);\
+		data = ((data >> 16) & MAC_MA32_127HR_DCS_Mask);\
+} while(0)
+
+/*#define MAC_MA32_127HR_ADDRHI_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_MA32_127HR_ADDRHI_Mask (ULONG)(0xffff)
+
+/*#define MAC_MA32_127HR_ADDRHI_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_MA32_127HR_ADDRHI_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_MA32_127HR_ADDRHI_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA32_127HR_RgRd(i,v);\
+		v = (v & (MAC_MA32_127HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA32_127HR_Mask_19))<<19);\
+		v = ((v & MAC_MA32_127HR_ADDRHI_Wr_Mask) | ((data & MAC_MA32_127HR_ADDRHI_Mask)<<0));\
+		MAC_MA32_127HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA32_127HR_ADDRHI_UdfRd(i,data) do {\
+		MAC_MA32_127HR_RgRd(i,data);\
+		data = ((data >> 0) & MAC_MA32_127HR_ADDRHI_Mask);\
+} while(0)
+
+
+#define MAC_MA1_31LR_RgOffAddr (BASE_ADDRESS + 0x30c)
+
+#define MAC_MA1_31LR_RgOffAddress(i) ((volatile ULONG *)(MAC_MA1_31LR_RgOffAddr + ((i-1)*8)))
+
+#define MAC_MA1_31LR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_MA1_31LR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA1_31LR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_MA1_31LR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA1_31LR_ADDRLO_UdfWr(i,data) do {\
+		MAC_MA1_31LR_RgWr(i,data);\
+} while(0)
+
+#define MAC_MA1_31LR_ADDRLO_UdfRd(i,data) do {\
+		MAC_MA1_31LR_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_MA1_31HR_RgOffAddr (BASE_ADDRESS + 0x308)
+
+#define MAC_MA1_31HR_RgOffAddress(i) ((volatile ULONG *)(MAC_MA1_31HR_RgOffAddr + ((i-1)*8)))
+
+#define MAC_MA1_31HR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_MA1_31HR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_MA1_31HR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_MA1_31HR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MAC_MA1_31HR_Mask_19 (ULONG)(~(~0<<(5)))*/
+
+#define  MAC_MA1_31HR_Mask_19 (ULONG)(0x1f)
+
+/*#define MAC_MA1_31HR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(5)))<<(19)))*/
+
+#define MAC_MA1_31HR_RES_Wr_Mask_19 (ULONG)(0xff07ffff)
+
+/*#define MAC_MA1_31HR_AE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA1_31HR_AE_Mask (ULONG)(0x1)
+
+/*#define MAC_MA1_31HR_AE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_MA1_31HR_AE_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_MA1_31HR_AE_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA1_31HR_RgRd(i,v);\
+		v = (v & (MAC_MA1_31HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1_31HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1_31HR_AE_Wr_Mask) | ((data & MAC_MA1_31HR_AE_Mask)<<31));\
+		MAC_MA1_31HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA1_31HR_AE_UdfRd(i,data) do {\
+		MAC_MA1_31HR_RgRd(i,data);\
+		data = ((data >> 31) & MAC_MA1_31HR_AE_Mask);\
+} while(0)
+
+/*#define MAC_MA1_31HR_SA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_MA1_31HR_SA_Mask (ULONG)(0x1)
+
+/*#define MAC_MA1_31HR_SA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (30)))*/
+
+#define MAC_MA1_31HR_SA_Wr_Mask (ULONG)(0xbfffffff)
+
+#define MAC_MA1_31HR_SA_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA1_31HR_RgRd(i,v);\
+		v = (v & (MAC_MA1_31HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1_31HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1_31HR_SA_Wr_Mask) | ((data & MAC_MA1_31HR_SA_Mask)<<30));\
+		MAC_MA1_31HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA1_31HR_SA_UdfRd(i,data) do {\
+		MAC_MA1_31HR_RgRd(i,data);\
+		data = ((data >> 30) & MAC_MA1_31HR_SA_Mask);\
+} while(0)
+
+/*#define MAC_MA1_31HR_MBC_Mask (ULONG)(~(~0<<(6)))*/
+
+#define MAC_MA1_31HR_MBC_Mask (ULONG)(0x3f)
+
+/*#define MAC_MA1_31HR_MBC_Wr_Mask (ULONG)(~((~(~0 << (6))) << (24)))*/
+
+#define MAC_MA1_31HR_MBC_Wr_Mask (ULONG)(0xc0ffffff)
+
+#define MAC_MA1_31HR_MBC_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA1_31HR_RgRd(i,v);\
+		v = (v & (MAC_MA1_31HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1_31HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1_31HR_MBC_Wr_Mask) | ((data & MAC_MA1_31HR_MBC_Mask)<<24));\
+		MAC_MA1_31HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA1_31HR_MBC_UdfRd(i,data) do {\
+		MAC_MA1_31HR_RgRd(i,data);\
+		data = ((data >> 24) & MAC_MA1_31HR_MBC_Mask);\
+} while(0)
+
+/*#define MAC_MA1_31HR_DCS_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_MA1_31HR_DCS_Mask (ULONG)(0x7)
+
+/*#define MAC_MA1_31HR_DCS_Wr_Mask (ULONG)(~((~(~0 << (3))) << (16)))*/
+
+#define MAC_MA1_31HR_DCS_Wr_Mask (ULONG)(0xfff8ffff)
+
+#define MAC_MA1_31HR_DCS_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA1_31HR_RgRd(i,v);\
+		v = (v & (MAC_MA1_31HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1_31HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1_31HR_DCS_Wr_Mask) | ((data & MAC_MA1_31HR_DCS_Mask)<<16));\
+		MAC_MA1_31HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA1_31HR_DCS_UdfRd(i,data) do {\
+		MAC_MA1_31HR_RgRd(i,data);\
+		data = ((data >> 16) & MAC_MA1_31HR_DCS_Mask);\
+} while(0)
+
+/*#define MAC_MA1_31HR_ADDRHI_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_MA1_31HR_ADDRHI_Mask (ULONG)(0xffff)
+
+/*#define MAC_MA1_31HR_ADDRHI_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_MA1_31HR_ADDRHI_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_MA1_31HR_ADDRHI_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_MA1_31HR_RgRd(i,v);\
+		v = (v & (MAC_MA1_31HR_RES_Wr_Mask_19))|((( 0) & (MAC_MA1_31HR_Mask_19))<<19);\
+		v = ((v & MAC_MA1_31HR_ADDRHI_Wr_Mask) | ((data & MAC_MA1_31HR_ADDRHI_Mask)<<0));\
+		MAC_MA1_31HR_RgWr(i,v);\
+} while(0)
+
+#define MAC_MA1_31HR_ADDRHI_UdfRd(i,data) do {\
+		MAC_MA1_31HR_RgRd(i,data);\
+		data = ((data >> 0) & MAC_MA1_31HR_ADDRHI_Mask);\
+} while(0)
+
+
+#define MAC_L3A3R_RgOffAddr (BASE_ADDRESS + 0x91c)
+
+#define MAC_L3A3R_RgOffAddress(i) ((volatile ULONG *)(MAC_L3A3R_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L3A3R_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L3A3R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A3R_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L3A3R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A3R_L3A30_UdfWr(i,data) do {\
+		MAC_L3A3R_RgWr(i,data);\
+} while(0)
+
+#define MAC_L3A3R_L3A30_UdfRd(i,data) do {\
+		MAC_L3A3R_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_L3A2R_RgOffAddr (BASE_ADDRESS + 0x918)
+
+#define MAC_L3A2R_RgOffAddress(i) ((volatile ULONG *)(MAC_L3A2R_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L3A2R_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L3A2R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A2R_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L3A2R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A2R_L3A20_UdfWr(i,data) do {\
+		MAC_L3A2R_RgWr(i,data);\
+} while(0)
+
+#define MAC_L3A2R_L3A20_UdfRd(i,data) do {\
+		MAC_L3A2R_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_L3A1R_RgOffAddr (BASE_ADDRESS + 0x914)
+
+#define MAC_L3A1R_RgOffAddress(i) ((volatile ULONG *)(MAC_L3A1R_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L3A1R_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L3A1R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A1R_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L3A1R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A1R_L3A10_UdfWr(i,data) do {\
+		MAC_L3A1R_RgWr(i,data);\
+} while(0)
+
+#define MAC_L3A1R_L3A10_UdfRd(i,data) do {\
+		MAC_L3A1R_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_L3A0R_RgOffAddr (BASE_ADDRESS + 0x910)
+
+#define MAC_L3A0R_RgOffAddress(i) ((volatile ULONG *)(MAC_L3A0R_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L3A0R_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L3A0R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A0R_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L3A0R_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3A0R_L3A00_UdfWr(i,data) do {\
+		MAC_L3A0R_RgWr(i,data);\
+} while(0)
+
+#define MAC_L3A0R_L3A00_UdfRd(i,data) do {\
+		MAC_L3A0R_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_L4AR_RgOffAddr (BASE_ADDRESS + 0x904)
+
+#define MAC_L4AR_RgOffAddress(i) ((volatile ULONG *)(MAC_L4AR_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L4AR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L4AR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L4AR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L4AR_RgOffAddress(i));\
+} while(0)
+
+/*#define MAC_L4AR_L4DP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR_L4DP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR_L4DP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_L4AR_L4DP0_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_L4AR_L4DP0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L4AR_RgRd(i,v);\
+		v = ((v & MAC_L4AR_L4DP0_Wr_Mask) | ((data & MAC_L4AR_L4DP0_Mask)<<16));\
+		MAC_L4AR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L4AR_L4DP0_UdfRd(i,data) do {\
+		MAC_L4AR_RgRd(i,data);\
+		data = ((data >> 16) & MAC_L4AR_L4DP0_Mask);\
+} while(0)
+
+/*#define MAC_L4AR_L4SP0_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_L4AR_L4SP0_Mask (ULONG)(0xffff)
+
+/*#define MAC_L4AR_L4SP0_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define MAC_L4AR_L4SP0_Wr_Mask (ULONG)(0xffff0000)
+
+#define MAC_L4AR_L4SP0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L4AR_RgRd(i,v);\
+		v = ((v & MAC_L4AR_L4SP0_Wr_Mask) | ((data & MAC_L4AR_L4SP0_Mask)<<0));\
+		MAC_L4AR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L4AR_L4SP0_UdfRd(i,data) do {\
+		MAC_L4AR_RgRd(i,data);\
+		data = ((data >> 0) & MAC_L4AR_L4SP0_Mask);\
+} while(0)
+
+
+#define MAC_L3L4CR_RgOffAddr (BASE_ADDRESS + 0x900)
+
+#define MAC_L3L4CR_RgOffAddress(i) ((volatile ULONG *)(MAC_L3L4CR_RgOffAddr + ((i-0)*48)))
+
+#define MAC_L3L4CR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_L3L4CR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_L3L4CR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_L3L4CR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MAC_L3L4CR_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  MAC_L3L4CR_Mask_22 (ULONG)(0x3ff)
+
+/*#define MAC_L3L4CR_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define MAC_L3L4CR_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define  MAC_L3L4CR_Mask_17 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR_Mask_17 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(1)))<<(17)))*/
+
+#define MAC_L3L4CR_RES_Wr_Mask_17 (ULONG)(0xfffdffff)
+
+/*#define  MAC_L3L4CR_Mask_1 (ULONG)(~(~0<<(1)))*/
+
+#define  MAC_L3L4CR_Mask_1 (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_RES_Wr_Mask_1 (ULONG)(~((~(~0<<(1)))<<(1)))*/
+
+#define MAC_L3L4CR_RES_Wr_Mask_1 (ULONG)(0xfffffffd)
+
+/*#define MAC_L3L4CR_L4DPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L4DPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L4DPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (21)))*/
+
+#define MAC_L3L4CR_L4DPIM0_Wr_Mask (ULONG)(0xffdfffff)
+
+#define MAC_L3L4CR_L4DPIM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L4DPIM0_Wr_Mask) | ((data & MAC_L3L4CR_L4DPIM0_Mask)<<21));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L4DPIM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 21) & MAC_L3L4CR_L4DPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L4DPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L4DPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L4DPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (20)))*/
+
+#define MAC_L3L4CR_L4DPM0_Wr_Mask (ULONG)(0xffefffff)
+
+#define MAC_L3L4CR_L4DPM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L4DPM0_Wr_Mask) | ((data & MAC_L3L4CR_L4DPM0_Mask)<<20));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L4DPM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 20) & MAC_L3L4CR_L4DPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L4SPIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L4SPIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L4SPIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (19)))*/
+
+#define MAC_L3L4CR_L4SPIM0_Wr_Mask (ULONG)(0xfff7ffff)
+
+#define MAC_L3L4CR_L4SPIM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L4SPIM0_Wr_Mask) | ((data & MAC_L3L4CR_L4SPIM0_Mask)<<19));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L4SPIM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 19) & MAC_L3L4CR_L4SPIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L4SPM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L4SPM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L4SPM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (18)))*/
+
+#define MAC_L3L4CR_L4SPM0_Wr_Mask (ULONG)(0xfffbffff)
+
+#define MAC_L3L4CR_L4SPM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L4SPM0_Wr_Mask) | ((data & MAC_L3L4CR_L4SPM0_Mask)<<18));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L4SPM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 18) & MAC_L3L4CR_L4SPM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L4PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L4PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L4PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define MAC_L3L4CR_L4PEN0_Wr_Mask (ULONG)(0xfffeffff)
+
+#define MAC_L3L4CR_L4PEN0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L4PEN0_Wr_Mask) | ((data & MAC_L3L4CR_L4PEN0_Mask)<<16));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L4PEN0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 16) & MAC_L3L4CR_L4PEN0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3HDBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR_L3HDBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR_L3HDBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (11)))*/
+
+#define MAC_L3L4CR_L3HDBM0_Wr_Mask (ULONG)(0xffff07ff)
+
+#define MAC_L3L4CR_L3HDBM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3HDBM0_Wr_Mask) | ((data & MAC_L3L4CR_L3HDBM0_Mask)<<11));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3HDBM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 11) & MAC_L3L4CR_L3HDBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3HSBM0_Mask (ULONG)(~(~0<<(5)))*/
+
+#define MAC_L3L4CR_L3HSBM0_Mask (ULONG)(0x1f)
+
+/*#define MAC_L3L4CR_L3HSBM0_Wr_Mask (ULONG)(~((~(~0 << (5))) << (6)))*/
+
+#define MAC_L3L4CR_L3HSBM0_Wr_Mask (ULONG)(0xfffff83f)
+
+#define MAC_L3L4CR_L3HSBM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3HSBM0_Wr_Mask) | ((data & MAC_L3L4CR_L3HSBM0_Mask)<<6));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3HSBM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 6) & MAC_L3L4CR_L3HSBM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3DAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L3DAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L3DAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MAC_L3L4CR_L3DAIM0_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MAC_L3L4CR_L3DAIM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3DAIM0_Wr_Mask) | ((data & MAC_L3L4CR_L3DAIM0_Mask)<<5));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3DAIM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 5) & MAC_L3L4CR_L3DAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3DAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L3DAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L3DAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MAC_L3L4CR_L3DAM0_Wr_Mask (ULONG)(0xffffffef)
+
+#define MAC_L3L4CR_L3DAM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3DAM0_Wr_Mask) | ((data & MAC_L3L4CR_L3DAM0_Mask)<<4));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3DAM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 4) & MAC_L3L4CR_L3DAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3SAIM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L3SAIM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L3SAIM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MAC_L3L4CR_L3SAIM0_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MAC_L3L4CR_L3SAIM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3SAIM0_Wr_Mask) | ((data & MAC_L3L4CR_L3SAIM0_Mask)<<3));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3SAIM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 3) & MAC_L3L4CR_L3SAIM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3SAM0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L3SAM0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L3SAM0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MAC_L3L4CR_L3SAM0_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MAC_L3L4CR_L3SAM0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3SAM0_Wr_Mask) | ((data & MAC_L3L4CR_L3SAM0_Mask)<<2));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3SAM0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 2) & MAC_L3L4CR_L3SAM0_Mask);\
+} while(0)
+
+/*#define MAC_L3L4CR_L3PEN0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_L3L4CR_L3PEN0_Mask (ULONG)(0x1)
+
+/*#define MAC_L3L4CR_L3PEN0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_L3L4CR_L3PEN0_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_L3L4CR_L3PEN0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_L3L4CR_RgRd(i,v);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_22))|((( 0) & (MAC_L3L4CR_Mask_22))<<22);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_17))|((( 0) & (MAC_L3L4CR_Mask_17))<<17);\
+		v = (v & (MAC_L3L4CR_RES_Wr_Mask_1))|((( 0) & (MAC_L3L4CR_Mask_1))<<1);\
+		v = ((v & MAC_L3L4CR_L3PEN0_Wr_Mask) | ((data & MAC_L3L4CR_L3PEN0_Mask)<<0));\
+		MAC_L3L4CR_RgWr(i,v);\
+} while(0)
+
+#define MAC_L3L4CR_L3PEN0_UdfRd(i,data) do {\
+		MAC_L3L4CR_RgRd(i,data);\
+		data = ((data >> 0) & MAC_L3L4CR_L3PEN0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_WIDTH_RgOffAddr (BASE_ADDRESS + 0xb8c)
+
+#define MAC_PPS_WIDTH_RgOffAddress(i) ((volatile ULONG *)(MAC_PPS_WIDTH_RgOffAddr + ((i-0)*16)))
+
+#define MAC_PPS_WIDTH_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_PPS_WIDTH_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_WIDTH_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_PPS_WIDTH_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_WIDTH_PPSWIDTH0_UdfWr(i,data) do {\
+		MAC_PPS_WIDTH_RgWr(i,data);\
+} while(0)
+
+#define MAC_PPS_WIDTH_PPSWIDTH0_UdfRd(i,data) do {\
+		MAC_PPS_WIDTH_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_PPS_INTVAL_RgOffAddr (BASE_ADDRESS + 0xb88)
+
+#define MAC_PPS_INTVAL_RgOffAddress(i) ((volatile ULONG *)(MAC_PPS_INTVAL_RgOffAddr + ((i-0)*16)))
+
+#define MAC_PPS_INTVAL_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_PPS_INTVAL_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_INTVAL_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_PPS_INTVAL_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_INTVAL_PPSINT0_UdfWr(i,data) do {\
+		MAC_PPS_INTVAL_RgWr(i,data);\
+} while(0)
+
+#define MAC_PPS_INTVAL_PPSINT0_UdfRd(i,data) do {\
+		MAC_PPS_INTVAL_RgRd(i,data);\
+} while(0)
+
+
+#define MAC_PPS_TTNS_RgOffAddr (BASE_ADDRESS + 0xb84)
+
+#define MAC_PPS_TTNS_RgOffAddress(i) ((volatile ULONG *)(MAC_PPS_TTNS_RgOffAddr + ((i-0)*16)))
+
+#define MAC_PPS_TTNS_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTNS_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_TTNS_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTNS_RgOffAddress(i));\
+} while(0)
+
+/*#define MAC_PPS_TTNS_TRGTBUSY0_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_PPS_TTNS_TRGTBUSY0_Mask (ULONG)(0x1)
+
+/*#define MAC_PPS_TTNS_TRGTBUSY0_Wr_Mask (ULONG)(~((~(~0 << (1))) << (31)))*/
+
+#define MAC_PPS_TTNS_TRGTBUSY0_Wr_Mask (ULONG)(0x7fffffff)
+
+#define MAC_PPS_TTNS_TRGTBUSY0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_PPS_TTNS_RgRd(i,v);\
+		v = ((v & MAC_PPS_TTNS_TRGTBUSY0_Wr_Mask) | ((data & MAC_PPS_TTNS_TRGTBUSY0_Mask)<<31));\
+		MAC_PPS_TTNS_RgWr(i,v);\
+} while(0)
+
+#define MAC_PPS_TTNS_TRGTBUSY0_UdfRd(i,data) do {\
+		MAC_PPS_TTNS_RgRd(i,data);\
+		data = ((data >> 31) & MAC_PPS_TTNS_TRGTBUSY0_Mask);\
+} while(0)
+
+/*#define MAC_PPS_TTNS_TTSL0_Mask (ULONG)(~(~0<<(31)))*/
+
+#define MAC_PPS_TTNS_TTSL0_Mask (ULONG)(0x7fffffff)
+
+/*#define MAC_PPS_TTNS_TTSL0_Wr_Mask (ULONG)(~((~(~0 << (31))) << (0)))*/
+
+#define MAC_PPS_TTNS_TTSL0_Wr_Mask (ULONG)(0x80000000)
+
+#define MAC_PPS_TTNS_TTSL0_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_PPS_TTNS_RgRd(i,v);\
+		v = ((v & MAC_PPS_TTNS_TTSL0_Wr_Mask) | ((data & MAC_PPS_TTNS_TTSL0_Mask)<<0));\
+		MAC_PPS_TTNS_RgWr(i,v);\
+} while(0)
+
+#define MAC_PPS_TTNS_TTSL0_UdfRd(i,data) do {\
+		MAC_PPS_TTNS_RgRd(i,data);\
+		data = ((data >> 0) & MAC_PPS_TTNS_TTSL0_Mask);\
+} while(0)
+
+
+#define MAC_PPS_TTS_RgOffAddr (BASE_ADDRESS + 0xb80)
+
+#define MAC_PPS_TTS_RgOffAddress(i) ((volatile ULONG *)(MAC_PPS_TTS_RgOffAddr + ((i-0)*16)))
+
+#define MAC_PPS_TTS_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_PPS_TTS_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_TTS_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_PPS_TTS_RgOffAddress(i));\
+} while(0)
+
+#define MAC_PPS_TTS_TSTRH0_UdfWr(i,data) do {\
+		MAC_PPS_TTS_RgWr(i,data);\
+} while(0)
+
+#define MAC_PPS_TTS_TSTRH0_UdfRd(i,data) do {\
+		MAC_PPS_TTS_RgRd(i,data);\
+} while(0)
+
+
+#define MTL_QRCR_RgOffAddr (BASE_ADDRESS + 0xd3c)
+
+#define MTL_QRCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QRCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QRCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QRCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QRCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QRCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QRCR_Mask_4 (ULONG)(~(~0<<(28)))*/
+
+#define  MTL_QRCR_Mask_4 (ULONG)(0xfffffff)
+
+/*#define MTL_QRCR_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(28)))<<(4)))*/
+
+#define MTL_QRCR_RES_Wr_Mask_4 (ULONG)(0xf)
+
+/*#define MTL_QRCR_RXQ_PKT_ARBIT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRCR_RXQ_PKT_ARBIT_Mask (ULONG)(0x1)
+
+/*#define MTL_QRCR_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QRCR_RXQ_PKT_ARBIT_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QRCR_RXQ_PKT_ARBIT_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QRCR_RgRd(i,v);\
+		v = (v & (MTL_QRCR_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR_Mask_4))<<4);\
+		v = ((v & MTL_QRCR_RXQ_PKT_ARBIT_Wr_Mask) | ((data & MTL_QRCR_RXQ_PKT_ARBIT_Mask)<<3));\
+		MTL_QRCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QRCR_RXQ_PKT_ARBIT_UdfRd(i,data) do {\
+		MTL_QRCR_RgRd(i,data);\
+		data = ((data >> 3) & MTL_QRCR_RXQ_PKT_ARBIT_Mask);\
+} while(0)
+
+/*#define MTL_QRCR_RXQ_WEGT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QRCR_RXQ_WEGT_Mask (ULONG)(0x7)
+
+/*#define MTL_QRCR_RXQ_WEGT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (0)))*/
+
+#define MTL_QRCR_RXQ_WEGT_Wr_Mask (ULONG)(0xfffffff8)
+
+#define MTL_QRCR_RXQ_WEGT_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QRCR_RgRd(i,v);\
+		v = (v & (MTL_QRCR_RES_Wr_Mask_4))|((( 0) & (MTL_QRCR_Mask_4))<<4);\
+		v = ((v & MTL_QRCR_RXQ_WEGT_Wr_Mask) | ((data & MTL_QRCR_RXQ_WEGT_Mask)<<0));\
+		MTL_QRCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QRCR_RXQ_WEGT_UdfRd(i,data) do {\
+		MTL_QRCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QRCR_RXQ_WEGT_Mask);\
+} while(0)
+
+
+#define MTL_QRDR_RgOffAddr (BASE_ADDRESS + 0xd38)
+
+#define MTL_QRDR_RgOffAddress(i) ((volatile ULONG *)(MTL_QRDR_RgOffAddr + ((i-3)*64)))
+
+#define MTL_QRDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QRDR_RgOffAddress(i));\
+} while(0)
+
+/*#define MTL_QRDR_PRXQ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QRDR_PRXQ_Mask (ULONG)(0x3fff)
+
+#define MTL_QRDR_PRXQ_UdfRd(i,data) do {\
+		MTL_QRDR_RgRd(i,data);\
+		data = ((data >> 16) & MTL_QRDR_PRXQ_Mask);\
+} while(0)
+
+/*#define MTL_QRDR_RXQSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR_RXQSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR_RXQSTS_UdfRd(i,data) do {\
+		MTL_QRDR_RgRd(i,data);\
+		data = ((data >> 4) & MTL_QRDR_RXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR_RRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QRDR_RRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QRDR_RRCSTS_UdfRd(i,data) do {\
+		MTL_QRDR_RgRd(i,data);\
+		data = ((data >> 1) & MTL_QRDR_RRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QRDR_RWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QRDR_RWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QRDR_RWCSTS_UdfRd(i,data) do {\
+		MTL_QRDR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QRDR_RWCSTS_Mask);\
+} while(0)
+
+
+#define MTL_QOCR_RgOffAddr (BASE_ADDRESS + 0xd34)
+
+#define MTL_QOCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QOCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QOCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QOCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QOCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QOCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QOCR_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR_Mask_28 (ULONG)(0xf)
+
+/*#define MTL_QOCR_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define MTL_QOCR_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define  MTL_QOCR_Mask_12 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QOCR_Mask_12 (ULONG)(0xf)
+
+/*#define MTL_QOCR_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(4)))<<(12)))*/
+
+#define MTL_QOCR_RES_Wr_Mask_12 (ULONG)(0xffff0fff)
+
+/*#define MTL_QOCR_MISCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR_MISCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR_MISCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define MTL_QOCR_MISCNTOVF_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define MTL_QOCR_MISCNTOVF_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QOCR_RgRd(i,v);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR_Mask_28))<<28);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR_Mask_12))<<12);\
+		v = ((v & MTL_QOCR_MISCNTOVF_Wr_Mask) | ((data & MTL_QOCR_MISCNTOVF_Mask)<<27));\
+		MTL_QOCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QOCR_MISCNTOVF_UdfRd(i,data) do {\
+		MTL_QOCR_RgRd(i,data);\
+		data = ((data >> 27) & MTL_QOCR_MISCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR_MISPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR_MISPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR_MISPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (16)))*/
+
+#define MTL_QOCR_MISPKTCNT_Wr_Mask (ULONG)(0xf800ffff)
+
+#define MTL_QOCR_MISPKTCNT_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QOCR_RgRd(i,v);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR_Mask_28))<<28);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR_Mask_12))<<12);\
+		v = ((v & MTL_QOCR_MISPKTCNT_Wr_Mask) | ((data & MTL_QOCR_MISPKTCNT_Mask)<<16));\
+		MTL_QOCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QOCR_MISPKTCNT_UdfRd(i,data) do {\
+		MTL_QOCR_RgRd(i,data);\
+		data = ((data >> 16) & MTL_QOCR_MISPKTCNT_Mask);\
+} while(0)
+
+/*#define MTL_QOCR_OVFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QOCR_OVFCNTOVF_Mask (ULONG)(0x1)
+
+/*#define MTL_QOCR_OVFCNTOVF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define MTL_QOCR_OVFCNTOVF_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define MTL_QOCR_OVFCNTOVF_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QOCR_RgRd(i,v);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR_Mask_28))<<28);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR_Mask_12))<<12);\
+		v = ((v & MTL_QOCR_OVFCNTOVF_Wr_Mask) | ((data & MTL_QOCR_OVFCNTOVF_Mask)<<11));\
+		MTL_QOCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QOCR_OVFCNTOVF_UdfRd(i,data) do {\
+		MTL_QOCR_RgRd(i,data);\
+		data = ((data >> 11) & MTL_QOCR_OVFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QOCR_OVFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QOCR_OVFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QOCR_OVFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QOCR_OVFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QOCR_OVFPKTCNT_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QOCR_RgRd(i,v);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_28))|((( 0) & (MTL_QOCR_Mask_28))<<28);\
+		v = (v & (MTL_QOCR_RES_Wr_Mask_12))|((( 0) & (MTL_QOCR_Mask_12))<<12);\
+		v = ((v & MTL_QOCR_OVFPKTCNT_Wr_Mask) | ((data & MTL_QOCR_OVFPKTCNT_Mask)<<0));\
+		MTL_QOCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QOCR_OVFPKTCNT_UdfRd(i,data) do {\
+		MTL_QOCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QOCR_OVFPKTCNT_Mask);\
+} while(0)
+
+
+#define MTL_QROMR_RgOffAddr (BASE_ADDRESS + 0xd30)
+
+#define MTL_QROMR_RgOffAddress(i) ((volatile ULONG *)(MTL_QROMR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QROMR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QROMR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QROMR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QROMR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QROMR_Mask_30 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR_Mask_30 (ULONG)(0x3)
+
+/*#define MTL_QROMR_RES_Wr_Mask_30 (ULONG)(~((~(~0<<(2)))<<(30)))*/
+
+#define MTL_QROMR_RES_Wr_Mask_30 (ULONG)(0x3fffffff)
+
+/*#define  MTL_QROMR_Mask_16 (ULONG)(~(~0<<(4)))*/
+
+#define  MTL_QROMR_Mask_16 (ULONG)(0xf)
+
+/*#define MTL_QROMR_RES_Wr_Mask_16 (ULONG)(~((~(~0<<(4)))<<(16)))*/
+
+#define MTL_QROMR_RES_Wr_Mask_16 (ULONG)(0xfff0ffff)
+
+/*#define  MTL_QROMR_Mask_11 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QROMR_Mask_11 (ULONG)(0x3)
+
+/*#define MTL_QROMR_RES_Wr_Mask_11 (ULONG)(~((~(~0<<(2)))<<(11)))*/
+
+#define MTL_QROMR_RES_Wr_Mask_11 (ULONG)(0xffffe7ff)
+
+/*#define  MTL_QROMR_Mask_2 (ULONG)(~(~0<<(1)))*/
+
+#define  MTL_QROMR_Mask_2 (ULONG)(0x1)
+
+/*#define MTL_QROMR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(1)))<<(2)))*/
+
+#define MTL_QROMR_RES_Wr_Mask_2 (ULONG)(0xfffffffb)
+
+/*#define MTL_QROMR_RQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QROMR_RQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QROMR_RQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (20)))*/
+
+#define MTL_QROMR_RQS_Wr_Mask (ULONG)(0xc00fffff)
+
+#define MTL_QROMR_RQS_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_RQS_Wr_Mask) | ((data & MTL_QROMR_RQS_Mask)<<20));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_RQS_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 20) & MTL_QROMR_RQS_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_RFD_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR_RFD_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR_RFD_Wr_Mask (ULONG)(~((~(~0 << (3))) << (13)))*/
+
+#define MTL_QROMR_RFD_Wr_Mask (ULONG)(0xffff1fff)
+
+#define MTL_QROMR_RFD_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_RFD_Wr_Mask) | ((data & MTL_QROMR_RFD_Mask)<<13));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_RFD_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 13) & MTL_QROMR_RFD_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_RFA_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QROMR_RFA_Mask (ULONG)(0x7)
+
+/*#define MTL_QROMR_RFA_Wr_Mask (ULONG)(~((~(~0 << (3))) << (8)))*/
+
+#define MTL_QROMR_RFA_Wr_Mask (ULONG)(0xfffff8ff)
+
+#define MTL_QROMR_RFA_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_RFA_Wr_Mask) | ((data & MTL_QROMR_RFA_Mask)<<8));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_RFA_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 8) & MTL_QROMR_RFA_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_EHFC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR_EHFC_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR_EHFC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MTL_QROMR_EHFC_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MTL_QROMR_EHFC_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_EHFC_Wr_Mask) | ((data & MTL_QROMR_EHFC_Mask)<<7));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_EHFC_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 7) & MTL_QROMR_EHFC_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_DIS_TCP_EF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR_DIS_TCP_EF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR_DIS_TCP_EF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define MTL_QROMR_DIS_TCP_EF_Wr_Mask (ULONG)(0xffffffbf)
+
+#define MTL_QROMR_DIS_TCP_EF_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_DIS_TCP_EF_Wr_Mask) | ((data & MTL_QROMR_DIS_TCP_EF_Mask)<<6));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_DIS_TCP_EF_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 6) & MTL_QROMR_DIS_TCP_EF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_RSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR_RSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR_RSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (5)))*/
+
+#define MTL_QROMR_RSF_Wr_Mask (ULONG)(0xffffffdf)
+
+#define MTL_QROMR_RSF_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_RSF_Wr_Mask) | ((data & MTL_QROMR_RSF_Mask)<<5));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_RSF_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 5) & MTL_QROMR_RSF_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_FEP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR_FEP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR_FEP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define MTL_QROMR_FEP_Wr_Mask (ULONG)(0xffffffef)
+
+#define MTL_QROMR_FEP_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_FEP_Wr_Mask) | ((data & MTL_QROMR_FEP_Mask)<<4));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_FEP_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 4) & MTL_QROMR_FEP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_FUP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QROMR_FUP_Mask (ULONG)(0x1)
+
+/*#define MTL_QROMR_FUP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QROMR_FUP_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QROMR_FUP_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_FUP_Wr_Mask) | ((data & MTL_QROMR_FUP_Mask)<<3));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_FUP_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 3) & MTL_QROMR_FUP_Mask);\
+} while(0)
+
+/*#define MTL_QROMR_RTC_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QROMR_RTC_Mask (ULONG)(0x3)
+
+/*#define MTL_QROMR_RTC_Wr_Mask (ULONG)(~((~(~0 << (2))) << (0)))*/
+
+#define MTL_QROMR_RTC_Wr_Mask (ULONG)(0xfffffffc)
+
+#define MTL_QROMR_RTC_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QROMR_RgRd(i,v);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_30))|((( 0) & (MTL_QROMR_Mask_30))<<30);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_16))|((( 0) & (MTL_QROMR_Mask_16))<<16);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_11))|((( 0) & (MTL_QROMR_Mask_11))<<11);\
+		v = (v & (MTL_QROMR_RES_Wr_Mask_2))|((( 0) & (MTL_QROMR_Mask_2))<<2);\
+		v = ((v & MTL_QROMR_RTC_Wr_Mask) | ((data & MTL_QROMR_RTC_Mask)<<0));\
+		MTL_QROMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QROMR_RTC_UdfRd(i,data) do {\
+		MTL_QROMR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QROMR_RTC_Mask);\
+} while(0)
+
+
+#define MTL_QLCR_RgOffAddr (BASE_ADDRESS + 0xd24)
+
+#define MTL_QLCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QLCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QLCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QLCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QLCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QLCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QLCR_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QLCR_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QLCR_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QLCR_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR_LC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QLCR_LC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QLCR_LC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QLCR_LC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QLCR_LC_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QLCR_RES_Wr_Mask_29))|((( 0) & (MTL_QLCR_Mask_29))<<29);\
+		(v) = ((v & MTL_QLCR_LC_Wr_Mask) | ((data & MTL_QLCR_LC_Mask)<<0));\
+		MTL_QLCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QLCR_LC_UdfRd(i,data) do {\
+		MTL_QLCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QLCR_LC_Mask);\
+} while(0)
+
+
+#define MTL_QHCR_RgOffAddr (BASE_ADDRESS + 0xd20)
+
+#define MTL_QHCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QHCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QHCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QHCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QHCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QHCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QHCR_Mask_29 (ULONG)(~(~0<<(3)))*/
+
+#define  MTL_QHCR_Mask_29 (ULONG)(0x7)
+
+/*#define MTL_QHCR_RES_Wr_Mask_29 (ULONG)(~((~(~0<<(3)))<<(29)))*/
+
+#define MTL_QHCR_RES_Wr_Mask_29 (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR_HC_Mask (ULONG)(~(~0<<(29)))*/
+
+#define MTL_QHCR_HC_Mask (ULONG)(0x1fffffff)
+
+/*#define MTL_QHCR_HC_Wr_Mask (ULONG)(~((~(~0 << (29))) << (0)))*/
+
+#define MTL_QHCR_HC_Wr_Mask (ULONG)(0xe0000000)
+
+#define MTL_QHCR_HC_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QHCR_RES_Wr_Mask_29))|((( 0) & (MTL_QHCR_Mask_29))<<29);\
+		(v) = ((v & MTL_QHCR_HC_Wr_Mask) | ((data & MTL_QHCR_HC_Mask)<<0));\
+		MTL_QHCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QHCR_HC_UdfRd(i,data) do {\
+		MTL_QHCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QHCR_HC_Mask);\
+} while(0)
+
+
+#define MTL_QSSCR_RgOffAddr (BASE_ADDRESS + 0xd1c)
+
+#define MTL_QSSCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QSSCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QSSCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QSSCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QSSCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QSSCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QSSCR_Mask_14 (ULONG)(~(~0<<(18)))*/
+
+#define  MTL_QSSCR_Mask_14 (ULONG)(0x3ffff)
+
+/*#define MTL_QSSCR_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(18)))<<(14)))*/
+
+#define MTL_QSSCR_RES_Wr_Mask_14 (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR_SSC_Mask (ULONG)(~(~0<<(14)))*/
+
+#define MTL_QSSCR_SSC_Mask (ULONG)(0x3fff)
+
+/*#define MTL_QSSCR_SSC_Wr_Mask (ULONG)(~((~(~0 << (14))) << (0)))*/
+
+#define MTL_QSSCR_SSC_Wr_Mask (ULONG)(0xffffc000)
+
+#define MTL_QSSCR_SSC_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QSSCR_RES_Wr_Mask_14))|((( 0) & (MTL_QSSCR_Mask_14))<<14);\
+		(v) = ((v & MTL_QSSCR_SSC_Wr_Mask) | ((data & MTL_QSSCR_SSC_Mask)<<0));\
+		MTL_QSSCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QSSCR_SSC_UdfRd(i,data) do {\
+		MTL_QSSCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QSSCR_SSC_Mask);\
+} while(0)
+
+
+#define MTL_QW_RgOffAddr (BASE_ADDRESS + 0xd18)
+
+#define MTL_QW_RgOffAddress(i) ((volatile ULONG *)(MTL_QW_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QW_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QW_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QW_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QW_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QW_Mask_21 (ULONG)(~(~0<<(11)))*/
+
+#define  MTL_QW_Mask_21 (ULONG)(0x7ff)
+
+/*#define MTL_QW_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(11)))<<(21)))*/
+
+#define MTL_QW_RES_Wr_Mask_21 (ULONG)(0x1fffff)
+
+/*#define MTL_QW_ISCQW_Mask (ULONG)(~(~0<<(21)))*/
+
+#define MTL_QW_ISCQW_Mask (ULONG)(0x1fffff)
+
+/*#define MTL_QW_ISCQW_Wr_Mask (ULONG)(~((~(~0 << (21))) << (0)))*/
+
+#define MTL_QW_ISCQW_Wr_Mask (ULONG)(0xffe00000)
+
+#define MTL_QW_ISCQW_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (MTL_QW_RES_Wr_Mask_21))|((( 0) & (MTL_QW_Mask_21))<<21);\
+		(v) = ((v & MTL_QW_ISCQW_Wr_Mask) | ((data & MTL_QW_ISCQW_Mask)<<0));\
+		MTL_QW_RgWr(i,v);\
+} while(0)
+
+#define MTL_QW_ISCQW_UdfRd(i,data) do {\
+		MTL_QW_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QW_ISCQW_Mask);\
+} while(0)
+
+
+#define MTL_QESR_RgOffAddr (BASE_ADDRESS + 0xd14)
+
+#define MTL_QESR_RgOffAddress(i) ((volatile ULONG *)(MTL_QESR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QESR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QESR_RgOffAddress(i));\
+} while(0)
+
+/*#define MTL_QESR_ABSU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QESR_ABSU_Mask (ULONG)(0x1)
+
+#define MTL_QESR_ABSU_UdfRd(i,data) do {\
+		MTL_QESR_RgRd(i,data);\
+		data = ((data >> 24) & MTL_QESR_ABSU_Mask);\
+} while(0)
+
+/*#define MTL_QESR_ABS_Mask (ULONG)(~(~0<<(24)))*/
+
+#define MTL_QESR_ABS_Mask (ULONG)(0xffffff)
+
+#define MTL_QESR_ABS_UdfRd(i,data) do {\
+		MTL_QESR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QESR_ABS_Mask);\
+} while(0)
+
+
+#define MTL_QECR_RgOffAddr (BASE_ADDRESS + 0xd10)
+
+#define MTL_QECR_RgOffAddress(i) ((volatile ULONG *)(MTL_QECR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QECR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QECR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QECR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QECR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QECR_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  MTL_QECR_Mask_25 (ULONG)(0x7f)
+
+/*#define MTL_QECR_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define MTL_QECR_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define  MTL_QECR_Mask_7 (ULONG)(~(~0<<(17)))*/
+
+#define  MTL_QECR_Mask_7 (ULONG)(0x1ffff)
+
+/*#define MTL_QECR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(17)))<<(7)))*/
+
+#define MTL_QECR_RES_Wr_Mask_7 (ULONG)(0xff00007f)
+
+/*#define  MTL_QECR_Mask_0 (ULONG)(~(~0<<(2)))*/
+
+#define  MTL_QECR_Mask_0 (ULONG)(0x3)
+
+/*#define MTL_QECR_RES_Wr_Mask_0 (ULONG)(~((~(~0<<(2)))<<(0)))*/
+
+#define MTL_QECR_RES_Wr_Mask_0 (ULONG)(0xfffffffc)
+
+/*#define MTL_QECR_ABPSSIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR_ABPSSIE_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR_ABPSSIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define MTL_QECR_ABPSSIE_Wr_Mask (ULONG)(0xfeffffff)
+
+#define MTL_QECR_ABPSSIE_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QECR_RgRd(i,v);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_25))|((( 0) & (MTL_QECR_Mask_25))<<25);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_7))|((( 0) & (MTL_QECR_Mask_7))<<7);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_0))|((( 0) & (MTL_QECR_Mask_0))<<0);\
+		v = ((v & MTL_QECR_ABPSSIE_Wr_Mask) | ((data & MTL_QECR_ABPSSIE_Mask)<<24));\
+		MTL_QECR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QECR_ABPSSIE_UdfRd(i,data) do {\
+		MTL_QECR_RgRd(i,data);\
+		data = ((data >> 24) & MTL_QECR_ABPSSIE_Mask);\
+} while(0)
+
+/*#define MTL_QECR_SLC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QECR_SLC_Mask (ULONG)(0x7)
+
+/*#define MTL_QECR_SLC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QECR_SLC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QECR_SLC_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QECR_RgRd(i,v);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_25))|((( 0) & (MTL_QECR_Mask_25))<<25);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_7))|((( 0) & (MTL_QECR_Mask_7))<<7);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_0))|((( 0) & (MTL_QECR_Mask_0))<<0);\
+		v = ((v & MTL_QECR_SLC_Wr_Mask) | ((data & MTL_QECR_SLC_Mask)<<4));\
+		MTL_QECR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QECR_SLC_UdfRd(i,data) do {\
+		MTL_QECR_RgRd(i,data);\
+		data = ((data >> 4) & MTL_QECR_SLC_Mask);\
+} while(0)
+
+/*#define MTL_QECR_CC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR_CC_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR_CC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (3)))*/
+
+#define MTL_QECR_CC_Wr_Mask (ULONG)(0xfffffff7)
+
+#define MTL_QECR_CC_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QECR_RgRd(i,v);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_25))|((( 0) & (MTL_QECR_Mask_25))<<25);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_7))|((( 0) & (MTL_QECR_Mask_7))<<7);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_0))|((( 0) & (MTL_QECR_Mask_0))<<0);\
+		v = ((v & MTL_QECR_CC_Wr_Mask) | ((data & MTL_QECR_CC_Mask)<<3));\
+		MTL_QECR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QECR_CC_UdfRd(i,data) do {\
+		MTL_QECR_RgRd(i,data);\
+		data = ((data >> 3) & MTL_QECR_CC_Mask);\
+} while(0)
+
+/*#define MTL_QECR_AVALG_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QECR_AVALG_Mask (ULONG)(0x1)
+
+/*#define MTL_QECR_AVALG_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define MTL_QECR_AVALG_Wr_Mask (ULONG)(0xfffffffb)
+
+#define MTL_QECR_AVALG_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QECR_RgRd(i,v);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_25))|((( 0) & (MTL_QECR_Mask_25))<<25);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_7))|((( 0) & (MTL_QECR_Mask_7))<<7);\
+		v = (v & (MTL_QECR_RES_Wr_Mask_0))|((( 0) & (MTL_QECR_Mask_0))<<0);\
+		v = ((v & MTL_QECR_AVALG_Wr_Mask) | ((data & MTL_QECR_AVALG_Mask)<<2));\
+		MTL_QECR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QECR_AVALG_UdfRd(i,data) do {\
+		MTL_QECR_RgRd(i,data);\
+		data = ((data >> 2) & MTL_QECR_AVALG_Mask);\
+} while(0)
+
+
+#define MTL_QTDR_RgOffAddr (BASE_ADDRESS + 0xd08)
+
+#define MTL_QTDR_RgOffAddress(i) ((volatile ULONG *)(MTL_QTDR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QTDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QTDR_RgOffAddress(i));\
+} while(0)
+
+/*#define MTL_QTDR_STXSTSF_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR_STXSTSF_Mask (ULONG)(0x7)
+
+#define MTL_QTDR_STXSTSF_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 20) & MTL_QTDR_STXSTSF_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_PTXQ_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTDR_PTXQ_Mask (ULONG)(0x7)
+
+#define MTL_QTDR_PTXQ_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 16) & MTL_QTDR_PTXQ_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_TXSTSFSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR_TXSTSFSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR_TXSTSFSTS_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 5) & MTL_QTDR_TXSTSFSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_TXQSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR_TXQSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR_TXQSTS_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 4) & MTL_QTDR_TXQSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_TWCSTS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR_TWCSTS_Mask (ULONG)(0x1)
+
+#define MTL_QTDR_TWCSTS_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 3) & MTL_QTDR_TWCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_TRCSTS_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTDR_TRCSTS_Mask (ULONG)(0x3)
+
+#define MTL_QTDR_TRCSTS_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 1) & MTL_QTDR_TRCSTS_Mask);\
+} while(0)
+
+/*#define MTL_QTDR_TXQPAUSED_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTDR_TXQPAUSED_Mask (ULONG)(0x1)
+
+#define MTL_QTDR_TXQPAUSED_UdfRd(i,data) do {\
+		MTL_QTDR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QTDR_TXQPAUSED_Mask);\
+} while(0)
+
+
+#define MTL_QUCR_RgOffAddr (BASE_ADDRESS + 0xd04)
+
+#define MTL_QUCR_RgOffAddress(i) ((volatile ULONG *)(MTL_QUCR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QUCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QUCR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QUCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QUCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QUCR_Mask_12 (ULONG)(~(~0<<(20)))*/
+
+#define  MTL_QUCR_Mask_12 (ULONG)(0xfffff)
+
+/*#define MTL_QUCR_RES_Wr_Mask_12 (ULONG)(~((~(~0<<(20)))<<(12)))*/
+
+#define MTL_QUCR_RES_Wr_Mask_12 (ULONG)(0xfff)
+
+/*#define MTL_QUCR_UFCNTOVF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QUCR_UFCNTOVF_Mask (ULONG)(0x1)
+
+#define MTL_QUCR_UFCNTOVF_UdfRd(i,data) do {\
+		MTL_QUCR_RgRd(i,data);\
+		data = ((data >> 11) & MTL_QUCR_UFCNTOVF_Mask);\
+} while(0)
+
+/*#define MTL_QUCR_UFPKTCNT_Mask (ULONG)(~(~0<<(11)))*/
+
+#define MTL_QUCR_UFPKTCNT_Mask (ULONG)(0x7ff)
+
+/*#define MTL_QUCR_UFPKTCNT_Wr_Mask (ULONG)(~((~(~0 << (11))) << (0)))*/
+
+#define MTL_QUCR_UFPKTCNT_Wr_Mask (ULONG)(0xfffff800)
+
+#define MTL_QUCR_UFPKTCNT_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QUCR_RgRd(i,v);\
+		v = (v & (MTL_QUCR_RES_Wr_Mask_12))|((( 0) & (MTL_QUCR_Mask_12))<<12);\
+		v = ((v & MTL_QUCR_UFPKTCNT_Wr_Mask) | ((data & MTL_QUCR_UFPKTCNT_Mask)<<0));\
+		MTL_QUCR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QUCR_UFPKTCNT_UdfRd(i,data) do {\
+		MTL_QUCR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QUCR_UFPKTCNT_Mask);\
+} while(0)
+
+
+#define MTL_QTOMR_RgOffAddr (BASE_ADDRESS + 0xd00)
+
+#define MTL_QTOMR_RgOffAddress(i) ((volatile ULONG *)(MTL_QTOMR_RgOffAddr + ((i-0)*64)))
+
+#define MTL_QTOMR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MTL_QTOMR_RgOffAddress(i));\
+} while(0)
+
+#define MTL_QTOMR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MTL_QTOMR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MTL_QTOMR_Mask_26 (ULONG)(~(~0<<(6)))*/
+
+#define  MTL_QTOMR_Mask_26 (ULONG)(0x3f)
+
+/*#define MTL_QTOMR_RES_Wr_Mask_26 (ULONG)(~((~(~0<<(6)))<<(26)))*/
+
+#define MTL_QTOMR_RES_Wr_Mask_26 (ULONG)(0x3ffffff)
+
+/*#define  MTL_QTOMR_Mask_7 (ULONG)(~(~0<<(9)))*/
+
+#define  MTL_QTOMR_Mask_7 (ULONG)(0x1ff)
+
+/*#define MTL_QTOMR_RES_Wr_Mask_7 (ULONG)(~((~(~0<<(9)))<<(7)))*/
+
+#define MTL_QTOMR_RES_Wr_Mask_7 (ULONG)(0xffff007f)
+
+/*#define MTL_QTOMR_TQS_Mask (ULONG)(~(~0<<(10)))*/
+
+#define MTL_QTOMR_TQS_Mask (ULONG)(0x3ff)
+
+/*#define MTL_QTOMR_TQS_Wr_Mask (ULONG)(~((~(~0 << (10))) << (16)))*/
+
+#define MTL_QTOMR_TQS_Wr_Mask (ULONG)(0xfc00ffff)
+
+#define MTL_QTOMR_TQS_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QTOMR_RgRd(i,v);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR_Mask_26))<<26);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR_Mask_7))<<7);\
+		v = ((v & MTL_QTOMR_TQS_Wr_Mask) | ((data & MTL_QTOMR_TQS_Mask)<<16));\
+		MTL_QTOMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QTOMR_TQS_UdfRd(i,data) do {\
+		MTL_QTOMR_RgRd(i,data);\
+		data = ((data >> 16) & MTL_QTOMR_TQS_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR_TTC_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MTL_QTOMR_TTC_Mask (ULONG)(0x7)
+
+/*#define MTL_QTOMR_TTC_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MTL_QTOMR_TTC_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MTL_QTOMR_TTC_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QTOMR_RgRd(i,v);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR_Mask_26))<<26);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR_Mask_7))<<7);\
+		v = ((v & MTL_QTOMR_TTC_Wr_Mask) | ((data & MTL_QTOMR_TTC_Mask)<<4));\
+		MTL_QTOMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QTOMR_TTC_UdfRd(i,data) do {\
+		MTL_QTOMR_RgRd(i,data);\
+		data = ((data >> 4) & MTL_QTOMR_TTC_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR_TXQEN_Mask (ULONG)(~(~0<<(2)))*/
+
+#define MTL_QTOMR_TXQEN_Mask (ULONG)(0x3)
+
+/*#define MTL_QTOMR_TXQEN_Wr_Mask (ULONG)(~((~(~0 << (2))) << (2)))*/
+
+#define MTL_QTOMR_TXQEN_Wr_Mask (ULONG)(0xfffffff3)
+
+#define MTL_QTOMR_TXQEN_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QTOMR_RgRd(i,v);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR_Mask_26))<<26);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR_Mask_7))<<7);\
+		v = ((v & MTL_QTOMR_TXQEN_Wr_Mask) | ((data & MTL_QTOMR_TXQEN_Mask)<<2));\
+		MTL_QTOMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QTOMR_TXQEN_UdfRd(i,data) do {\
+		MTL_QTOMR_RgRd(i,data);\
+		data = ((data >> 2) & MTL_QTOMR_TXQEN_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR_TSF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR_TSF_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR_TSF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MTL_QTOMR_TSF_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MTL_QTOMR_TSF_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QTOMR_RgRd(i,v);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR_Mask_26))<<26);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR_Mask_7))<<7);\
+		v = ((v & MTL_QTOMR_TSF_Wr_Mask) | ((data & MTL_QTOMR_TSF_Mask)<<1));\
+		MTL_QTOMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QTOMR_TSF_UdfRd(i,data) do {\
+		MTL_QTOMR_RgRd(i,data);\
+		data = ((data >> 1) & MTL_QTOMR_TSF_Mask);\
+} while(0)
+
+/*#define MTL_QTOMR_FTQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MTL_QTOMR_FTQ_Mask (ULONG)(0x1)
+
+/*#define MTL_QTOMR_FTQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MTL_QTOMR_FTQ_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MTL_QTOMR_FTQ_UdfWr(i,data) do {\
+		ULONG v;\
+		MTL_QTOMR_RgRd(i,v);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_26))|((( 0) & (MTL_QTOMR_Mask_26))<<26);\
+		v = (v & (MTL_QTOMR_RES_Wr_Mask_7))|((( 0) & (MTL_QTOMR_Mask_7))<<7);\
+		v = ((v & MTL_QTOMR_FTQ_Wr_Mask) | ((data & MTL_QTOMR_FTQ_Mask)<<0));\
+		MTL_QTOMR_RgWr(i,v);\
+} while(0)
+
+#define MTL_QTOMR_FTQ_UdfRd(i,data) do {\
+		MTL_QTOMR_RgRd(i,data);\
+		data = ((data >> 0) & MTL_QTOMR_FTQ_Mask);\
+} while(0)
+
+
+#define MAC_HTR_RgOffAddr (BASE_ADDRESS + 0x10)
+
+#define MAC_HTR_RgOffAddress(i) ((volatile ULONG *)(MAC_HTR_RgOffAddr + ((i-0)*4)))
+
+#define MAC_HTR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_HTR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_HTR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_HTR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_HTR_HT_UdfWr(i,data) do {\
+		MAC_HTR_RgWr(i,data);\
+} while(0)
+
+#define MAC_HTR_HT_UdfRd(i,data) do {\
+		MAC_HTR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_RIWTR_RgOffAddr (BASE_ADDRESS + 0x1138)
+
+#define DMA_RIWTR_RgOffAddress(i) ((volatile ULONG *)(DMA_RIWTR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_RIWTR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_RIWTR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RIWTR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_RIWTR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_RIWTR_Mask_8 (ULONG)(~(~0<<(24)))*/
+
+#define  DMA_RIWTR_Mask_8 (ULONG)(0xffffff)
+
+/*#define DMA_RIWTR_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(24)))<<(8)))*/
+
+#define DMA_RIWTR_RES_Wr_Mask_8 (ULONG)(0xff)
+
+/*#define DMA_RIWTR_RWT_Mask (ULONG)(~(~0<<(8)))*/
+
+#define DMA_RIWTR_RWT_Mask (ULONG)(0xff)
+
+/*#define DMA_RIWTR_RWT_Wr_Mask (ULONG)(~((~(~0 << (8))) << (0)))*/
+
+#define DMA_RIWTR_RWT_Wr_Mask (ULONG)(0xffffff00)
+
+#define DMA_RIWTR_RWT_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RIWTR_RES_Wr_Mask_8))|((( 0) & (DMA_RIWTR_Mask_8))<<8);\
+		(v) = ((v & DMA_RIWTR_RWT_Wr_Mask) | ((data & DMA_RIWTR_RWT_Mask)<<0));\
+		DMA_RIWTR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RIWTR_RWT_UdfRd(i,data) do {\
+		DMA_RIWTR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_RIWTR_RWT_Mask);\
+} while(0)
+
+
+#define DMA_RDRLR_RgOffAddr (BASE_ADDRESS + 0x1130)
+
+#define DMA_RDRLR_RgOffAddress(i) ((volatile ULONG *)(DMA_RDRLR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_RDRLR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_RDRLR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RDRLR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_RDRLR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_RDRLR_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_RDRLR_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_RDRLR_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_RDRLR_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR_RDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_RDRLR_RDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_RDRLR_RDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_RDRLR_RDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_RDRLR_RDRL_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_RDRLR_RES_Wr_Mask_10))|((( 0) & (DMA_RDRLR_Mask_10))<<10);\
+		(v) = ((v & DMA_RDRLR_RDRL_Wr_Mask) | ((data & DMA_RDRLR_RDRL_Mask)<<0));\
+		DMA_RDRLR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RDRLR_RDRL_UdfRd(i,data) do {\
+		DMA_RDRLR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_RDRLR_RDRL_Mask);\
+} while(0)
+
+
+#define DMA_TDRLR_RgOffAddr (BASE_ADDRESS + 0x112c)
+
+#define DMA_TDRLR_RgOffAddress(i) ((volatile ULONG *)(DMA_TDRLR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_TDRLR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_TDRLR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TDRLR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_TDRLR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_TDRLR_Mask_10 (ULONG)(~(~0<<(22)))*/
+
+#define  DMA_TDRLR_Mask_10 (ULONG)(0x3fffff)
+
+/*#define DMA_TDRLR_RES_Wr_Mask_10 (ULONG)(~((~(~0<<(22)))<<(10)))*/
+
+#define DMA_TDRLR_RES_Wr_Mask_10 (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR_TDRL_Mask (ULONG)(~(~0<<(10)))*/
+
+#define DMA_TDRLR_TDRL_Mask (ULONG)(0x3ff)
+
+/*#define DMA_TDRLR_TDRL_Wr_Mask (ULONG)(~((~(~0 << (10))) << (0)))*/
+
+#define DMA_TDRLR_TDRL_Wr_Mask (ULONG)(0xfffffc00)
+
+#define DMA_TDRLR_TDRL_UdfWr(i,data) do {\
+		ULONG v = 0; \
+		v = (v & (DMA_TDRLR_RES_Wr_Mask_10))|((( 0) & (DMA_TDRLR_Mask_10))<<10);\
+		(v) = ((v & DMA_TDRLR_TDRL_Wr_Mask) | ((data & DMA_TDRLR_TDRL_Mask)<<0));\
+		DMA_TDRLR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TDRLR_TDRL_UdfRd(i,data) do {\
+		DMA_TDRLR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_TDRLR_TDRL_Mask);\
+} while(0)
+
+
+#define DMA_RDTP_RPDR_RgOffAddr (BASE_ADDRESS + 0x1128)
+
+#define DMA_RDTP_RPDR_RgOffAddress(i) ((volatile ULONG *)(DMA_RDTP_RPDR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_RDTP_RPDR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_RDTP_RPDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RDTP_RPDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_RDTP_RPDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RDTP_RPDR_RDT_UdfWr(i,data) do {\
+		DMA_RDTP_RPDR_RgWr(i,data);\
+} while(0)
+
+#define DMA_RDTP_RPDR_RDT_UdfRd(i,data) do {\
+		DMA_RDTP_RPDR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_TDTP_TPDR_RgOffAddr (BASE_ADDRESS + 0x1120)
+
+#define DMA_TDTP_TPDR_RgOffAddress(i) ((volatile ULONG *)(DMA_TDTP_TPDR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_TDTP_TPDR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_TDTP_TPDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TDTP_TPDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_TDTP_TPDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TDTP_TPDR_TDT_UdfWr(i,data) do {\
+		DMA_TDTP_TPDR_RgWr(i,data);\
+} while(0)
+
+#define DMA_TDTP_TPDR_TDT_UdfRd(i,data) do {\
+		DMA_TDTP_TPDR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_RDLAR_RgOffAddr (BASE_ADDRESS + 0x111c)
+
+#define DMA_RDLAR_RgOffAddress(i) ((volatile ULONG *)(DMA_RDLAR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_RDLAR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_RDLAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RDLAR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_RDLAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RDLAR_RDESLA_UdfWr(i,data) do {\
+		DMA_RDLAR_RgWr(i,data);\
+} while(0)
+
+#define DMA_RDLAR_RDESLA_UdfRd(i,data) do {\
+		DMA_RDLAR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_TDLAR_RgOffAddr (BASE_ADDRESS + 0x1114)
+
+#define DMA_TDLAR_RgOffAddress(i) ((volatile ULONG *)(DMA_TDLAR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_TDLAR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_TDLAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TDLAR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_TDLAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TDLAR_TDESLA_UdfWr(i,data) do {\
+		DMA_TDLAR_RgWr(i,data);\
+} while(0)
+
+#define DMA_TDLAR_TDESLA_UdfRd(i,data) do {\
+		DMA_TDLAR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_IER_RgOffAddr (BASE_ADDRESS + 0x1134)
+
+#define DMA_IER_RgOffAddress(i) ((volatile ULONG *)(DMA_IER_RgOffAddr + ((i-0)*128)))
+
+#define DMA_IER_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_IER_RgOffAddress(i));\
+} while(0)
+
+#define DMA_IER_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_IER_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_IER_Mask_17 (ULONG)(~(~0<<(15)))*/
+
+#define  DMA_IER_Mask_17 (ULONG)(0x7fff)
+
+/*#define DMA_IER_RES_Wr_Mask_17 (ULONG)(~((~(~0<<(15)))<<(17)))*/
+
+#define DMA_IER_RES_Wr_Mask_17 (ULONG)(0x1ffff)
+
+/*#define  DMA_IER_Mask_14 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_IER_Mask_14 (ULONG)(0x1)
+
+/*#define DMA_IER_RES_Wr_Mask_14 (ULONG)(~((~(~0<<(1)))<<(14)))*/
+
+#define DMA_IER_RES_Wr_Mask_14 (ULONG)(0xffffbfff)
+
+/*#define  DMA_IER_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_IER_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_IER_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_IER_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define DMA_IER_NIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_NIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_NIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_IER_NIE_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_IER_NIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_NIE_Wr_Mask) | ((data & DMA_IER_NIE_Mask)<<16));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_NIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 16) & DMA_IER_NIE_Mask);\
+} while(0)
+
+/*#define DMA_IER_AIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_AIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_AIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_IER_AIE_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_IER_AIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_AIE_Wr_Mask) | ((data & DMA_IER_AIE_Mask)<<15));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_AIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 15) & DMA_IER_AIE_Mask);\
+} while(0)
+
+/*#define DMA_IER_CDEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_CDEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_CDEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_IER_CDEE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_IER_CDEE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_CDEE_Wr_Mask) | ((data & DMA_IER_CDEE_Mask)<<13));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_CDEE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 13) & DMA_IER_CDEE_Mask);\
+} while(0)
+
+/*#define DMA_IER_FBEE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_FBEE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_FBEE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_IER_FBEE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_IER_FBEE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_FBEE_Wr_Mask) | ((data & DMA_IER_FBEE_Mask)<<12));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_FBEE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 12) & DMA_IER_FBEE_Mask);\
+} while(0)
+
+/*#define DMA_IER_ERIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_ERIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_ERIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_IER_ERIE_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_IER_ERIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_ERIE_Wr_Mask) | ((data & DMA_IER_ERIE_Mask)<<11));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_ERIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 11) & DMA_IER_ERIE_Mask);\
+} while(0)
+
+/*#define DMA_IER_ETIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_ETIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_ETIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_IER_ETIE_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_IER_ETIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_ETIE_Wr_Mask) | ((data & DMA_IER_ETIE_Mask)<<10));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_ETIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 10) & DMA_IER_ETIE_Mask);\
+} while(0)
+
+/*#define DMA_IER_RWTE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_RWTE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_RWTE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_IER_RWTE_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_IER_RWTE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_RWTE_Wr_Mask) | ((data & DMA_IER_RWTE_Mask)<<9));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_RWTE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 9) & DMA_IER_RWTE_Mask);\
+} while(0)
+
+/*#define DMA_IER_RSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_RSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_RSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_IER_RSE_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_IER_RSE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_RSE_Wr_Mask) | ((data & DMA_IER_RSE_Mask)<<8));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_RSE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 8) & DMA_IER_RSE_Mask);\
+} while(0)
+
+/*#define DMA_IER_RBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_RBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_RBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_IER_RBUE_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_IER_RBUE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_RBUE_Wr_Mask) | ((data & DMA_IER_RBUE_Mask)<<7));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_RBUE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 7) & DMA_IER_RBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER_RIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_RIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_RIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_IER_RIE_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_IER_RIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_RIE_Wr_Mask) | ((data & DMA_IER_RIE_Mask)<<6));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_RIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 6) & DMA_IER_RIE_Mask);\
+} while(0)
+
+/*#define DMA_IER_TBUE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_TBUE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_TBUE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_IER_TBUE_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_IER_TBUE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_TBUE_Wr_Mask) | ((data & DMA_IER_TBUE_Mask)<<2));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_TBUE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 2) & DMA_IER_TBUE_Mask);\
+} while(0)
+
+/*#define DMA_IER_TXSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_TXSE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_TXSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_IER_TXSE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_IER_TXSE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_TXSE_Wr_Mask) | ((data & DMA_IER_TXSE_Mask)<<1));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_TXSE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 1) & DMA_IER_TXSE_Mask);\
+} while(0)
+
+/*#define DMA_IER_TIE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_IER_TIE_Mask (ULONG)(0x1)
+
+/*#define DMA_IER_TIE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_IER_TIE_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_IER_TIE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_IER_RgRd(i,v);\
+		v = (v & (DMA_IER_RES_Wr_Mask_17))|((( 0) & (DMA_IER_Mask_17))<<17);\
+		v = (v & (DMA_IER_RES_Wr_Mask_14))|((( 0) & (DMA_IER_Mask_14))<<14);\
+		v = (v & (DMA_IER_RES_Wr_Mask_3))|((( 0) & (DMA_IER_Mask_3))<<3);\
+		v = ((v & DMA_IER_TIE_Wr_Mask) | ((data & DMA_IER_TIE_Mask)<<0));\
+		DMA_IER_RgWr(i,v);\
+} while(0)
+
+#define DMA_IER_TIE_UdfRd(i,data) do {\
+		DMA_IER_RgRd(i,data);\
+		data = ((data >> 0) & DMA_IER_TIE_Mask);\
+} while(0)
+
+
+#define DMA_SR_RgOffAddr (BASE_ADDRESS + 0x1160)
+
+#define DMA_SR_RgOffAddress(i) ((volatile ULONG *)(DMA_SR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_SR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_SR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_SR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_SR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_SR_Mask_19 (ULONG)(~(~0<<(13)))*/
+
+#define  DMA_SR_Mask_19 (ULONG)(0x1fff)
+
+/*#define DMA_SR_RES_Wr_Mask_19 (ULONG)(~((~(~0<<(13)))<<(19)))*/
+
+#define DMA_SR_RES_Wr_Mask_19 (ULONG)(0x7ffff)
+
+/*#define  DMA_SR_Mask_3 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_SR_Mask_3 (ULONG)(0x7)
+
+/*#define DMA_SR_RES_Wr_Mask_3 (ULONG)(~((~(~0<<(3)))<<(3)))*/
+
+#define DMA_SR_RES_Wr_Mask_3 (ULONG)(0xffffffc7)
+
+/*#define DMA_SR_EB_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_SR_EB_Mask (ULONG)(0x7)
+
+#define DMA_SR_EB_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_SR_EB_Mask);\
+} while(0)
+
+/*#define DMA_SR_NIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_NIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_NIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (15)))*/
+
+#define DMA_SR_NIS_Wr_Mask (ULONG)(0xffff7fff)
+
+#define DMA_SR_NIS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_NIS_Wr_Mask) | ((data & DMA_SR_NIS_Mask)<<15));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_NIS_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 15) & DMA_SR_NIS_Mask);\
+} while(0)
+
+/*#define DMA_SR_AIS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_AIS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_AIS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (14)))*/
+
+#define DMA_SR_AIS_Wr_Mask (ULONG)(0xffffbfff)
+
+#define DMA_SR_AIS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_AIS_Wr_Mask) | ((data & DMA_SR_AIS_Mask)<<14));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_AIS_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 14) & DMA_SR_AIS_Mask);\
+} while(0)
+
+/*#define DMA_SR_CDE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_CDE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_CDE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (13)))*/
+
+#define DMA_SR_CDE_Wr_Mask (ULONG)(0xffffdfff)
+
+#define DMA_SR_CDE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_CDE_Wr_Mask) | ((data & DMA_SR_CDE_Mask)<<13));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_CDE_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 13) & DMA_SR_CDE_Mask);\
+} while(0)
+
+/*#define DMA_SR_FBE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_FBE_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_FBE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_SR_FBE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_SR_FBE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_FBE_Wr_Mask) | ((data & DMA_SR_FBE_Mask)<<12));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_FBE_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 12) & DMA_SR_FBE_Mask);\
+} while(0)
+
+/*#define DMA_SR_ERI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_ERI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_ERI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (11)))*/
+
+#define DMA_SR_ERI_Wr_Mask (ULONG)(0xfffff7ff)
+
+#define DMA_SR_ERI_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_ERI_Wr_Mask) | ((data & DMA_SR_ERI_Mask)<<11));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_ERI_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 11) & DMA_SR_ERI_Mask);\
+} while(0)
+
+/*#define DMA_SR_ETI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_ETI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_ETI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (10)))*/
+
+#define DMA_SR_ETI_Wr_Mask (ULONG)(0xfffffbff)
+
+#define DMA_SR_ETI_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_ETI_Wr_Mask) | ((data & DMA_SR_ETI_Mask)<<10));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_ETI_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 10) & DMA_SR_ETI_Mask);\
+} while(0)
+
+/*#define DMA_SR_RWT_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_RWT_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_RWT_Wr_Mask (ULONG)(~((~(~0 << (1))) << (9)))*/
+
+#define DMA_SR_RWT_Wr_Mask (ULONG)(0xfffffdff)
+
+#define DMA_SR_RWT_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_RWT_Wr_Mask) | ((data & DMA_SR_RWT_Mask)<<9));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_RWT_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 9) & DMA_SR_RWT_Mask);\
+} while(0)
+
+/*#define DMA_SR_RPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_RPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_RPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (8)))*/
+
+#define DMA_SR_RPS_Wr_Mask (ULONG)(0xfffffeff)
+
+#define DMA_SR_RPS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_RPS_Wr_Mask) | ((data & DMA_SR_RPS_Mask)<<8));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_RPS_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 8) & DMA_SR_RPS_Mask);\
+} while(0)
+
+/*#define DMA_SR_RBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_RBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_RBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define DMA_SR_RBU_Wr_Mask (ULONG)(0xffffff7f)
+
+#define DMA_SR_RBU_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_RBU_Wr_Mask) | ((data & DMA_SR_RBU_Mask)<<7));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_RBU_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 7) & DMA_SR_RBU_Mask);\
+} while(0)
+
+/*#define DMA_SR_RI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_RI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_RI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (6)))*/
+
+#define DMA_SR_RI_Wr_Mask (ULONG)(0xffffffbf)
+
+#define DMA_SR_RI_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_RI_Wr_Mask) | ((data & DMA_SR_RI_Mask)<<6));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_RI_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 6) & DMA_SR_RI_Mask);\
+} while(0)
+
+/*#define DMA_SR_TBU_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_TBU_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_TBU_Wr_Mask (ULONG)(~((~(~0 << (1))) << (2)))*/
+
+#define DMA_SR_TBU_Wr_Mask (ULONG)(0xfffffffb)
+
+#define DMA_SR_TBU_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_TBU_Wr_Mask) | ((data & DMA_SR_TBU_Mask)<<2));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_TBU_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 2) & DMA_SR_TBU_Mask);\
+} while(0)
+
+/*#define DMA_SR_TPS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_TPS_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_TPS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SR_TPS_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SR_TPS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_TPS_Wr_Mask) | ((data & DMA_SR_TPS_Mask)<<1));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_TPS_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 1) & DMA_SR_TPS_Mask);\
+} while(0)
+
+/*#define DMA_SR_TI_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SR_TI_Mask (ULONG)(0x1)
+
+/*#define DMA_SR_TI_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SR_TI_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SR_TI_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SR_RgRd(i,v);\
+		v = (v & (DMA_SR_RES_Wr_Mask_19))|((( 0) & (DMA_SR_Mask_19))<<19);\
+		v = (v & (DMA_SR_RES_Wr_Mask_3))|((( 0) & (DMA_SR_Mask_3))<<3);\
+		v = ((v & DMA_SR_TI_Wr_Mask) | ((data & DMA_SR_TI_Mask)<<0));\
+		DMA_SR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SR_TI_UdfRd(i,data) do {\
+		DMA_SR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_SR_TI_Mask);\
+} while(0)
+
+
+#define DMA_CHRBAR_RgOffAddr (BASE_ADDRESS + 0x115c)
+
+#define DMA_CHRBAR_RgOffAddress(i) ((volatile ULONG *)(DMA_CHRBAR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_CHRBAR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_CHRBAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_CHRBAR_CURRBUFAPTR_UdfRd(i,data) do {\
+		DMA_CHRBAR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_CHTBAR_RgOffAddr (BASE_ADDRESS + 0x1154)
+
+#define DMA_CHTBAR_RgOffAddress(i) ((volatile ULONG *)(DMA_CHTBAR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_CHTBAR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_CHTBAR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_CHTBAR_CURTBUFAPTR_UdfRd(i,data) do {\
+		DMA_CHTBAR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_CHRDR_RgOffAddr (BASE_ADDRESS + 0x114c)
+
+#define DMA_CHRDR_RgOffAddress(i) ((volatile ULONG *)(DMA_CHRDR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_CHRDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_CHRDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_CHRDR_CURRDESAPTR_UdfRd(i,data) do {\
+		DMA_CHRDR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_CHTDR_RgOffAddr (BASE_ADDRESS + 0x1144)
+
+#define DMA_CHTDR_RgOffAddress(i) ((volatile ULONG *)(DMA_CHTDR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_CHTDR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_CHTDR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_CHTDR_CURTDESAPTR_UdfRd(i,data) do {\
+		DMA_CHTDR_RgRd(i,data);\
+} while(0)
+
+
+#define DMA_SFCSR_RgOffAddr (BASE_ADDRESS + 0x113c)
+
+#define DMA_SFCSR_RgOffAddress(i) ((volatile ULONG *)(DMA_SFCSR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_SFCSR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_SFCSR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_SFCSR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_SFCSR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_SFCSR_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_SFCSR_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_SFCSR_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_SFCSR_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define  DMA_SFCSR_Mask_2 (ULONG)(~(~0<<(14)))*/
+
+#define  DMA_SFCSR_Mask_2 (ULONG)(0x3fff)
+
+/*#define DMA_SFCSR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(14)))<<(2)))*/
+
+#define DMA_SFCSR_RES_Wr_Mask_2 (ULONG)(0xffff0003)
+
+/*#define DMA_SFCSR_RSN_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_SFCSR_RSN_Mask (ULONG)(0xf)
+
+#define DMA_SFCSR_RSN_UdfRd(i,data) do {\
+		DMA_SFCSR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_SFCSR_RSN_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR_ASC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR_ASC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR_ASC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define DMA_SFCSR_ASC_Wr_Mask (ULONG)(0xfffffffd)
+
+#define DMA_SFCSR_ASC_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SFCSR_RgRd(i,v);\
+		v = (v & (DMA_SFCSR_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR_Mask_20))<<20);\
+		v = (v & (DMA_SFCSR_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR_Mask_2))<<2);\
+		v = ((v & DMA_SFCSR_ASC_Wr_Mask) | ((data & DMA_SFCSR_ASC_Mask)<<1));\
+		DMA_SFCSR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SFCSR_ASC_UdfRd(i,data) do {\
+		DMA_SFCSR_RgRd(i,data);\
+		data = ((data >> 1) & DMA_SFCSR_ASC_Mask);\
+} while(0)
+
+/*#define DMA_SFCSR_ESC_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_SFCSR_ESC_Mask (ULONG)(0x1)
+
+/*#define DMA_SFCSR_ESC_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_SFCSR_ESC_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_SFCSR_ESC_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_SFCSR_RgRd(i,v);\
+		v = (v & (DMA_SFCSR_RES_Wr_Mask_20))|((( 0) & (DMA_SFCSR_Mask_20))<<20);\
+		v = (v & (DMA_SFCSR_RES_Wr_Mask_2))|((( 0) & (DMA_SFCSR_Mask_2))<<2);\
+		v = ((v & DMA_SFCSR_ESC_Wr_Mask) | ((data & DMA_SFCSR_ESC_Mask)<<0));\
+		DMA_SFCSR_RgWr(i,v);\
+} while(0)
+
+#define DMA_SFCSR_ESC_UdfRd(i,data) do {\
+		DMA_SFCSR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_SFCSR_ESC_Mask);\
+} while(0)
+
+
+#define MAC_QTFCR_RgOffAddr (BASE_ADDRESS + 0x70)
+
+#define MAC_QTFCR_RgOffAddress(i) ((volatile ULONG *)(MAC_QTFCR_RgOffAddr + ((i-0)*4)))
+
+#define MAC_QTFCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)MAC_QTFCR_RgOffAddress(i));\
+} while(0)
+
+#define MAC_QTFCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)MAC_QTFCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  MAC_QTFCR_Mask_8 (ULONG)(~(~0<<(8)))*/
+
+#define  MAC_QTFCR_Mask_8 (ULONG)(0xff)
+
+/*#define MAC_QTFCR_RES_Wr_Mask_8 (ULONG)(~((~(~0<<(8)))<<(8)))*/
+
+#define MAC_QTFCR_RES_Wr_Mask_8 (ULONG)(0xffff00ff)
+
+/*#define  MAC_QTFCR_Mask_2 (ULONG)(~(~0<<(2)))*/
+
+#define  MAC_QTFCR_Mask_2 (ULONG)(0x3)
+
+/*#define MAC_QTFCR_RES_Wr_Mask_2 (ULONG)(~((~(~0<<(2)))<<(2)))*/
+
+#define MAC_QTFCR_RES_Wr_Mask_2 (ULONG)(0xfffffff3)
+
+/*#define MAC_QTFCR_PT_Mask (ULONG)(~(~0<<(16)))*/
+
+#define MAC_QTFCR_PT_Mask (ULONG)(0xffff)
+
+/*#define MAC_QTFCR_PT_Wr_Mask (ULONG)(~((~(~0 << (16))) << (16)))*/
+
+#define MAC_QTFCR_PT_Wr_Mask (ULONG)(0xffff)
+
+#define MAC_QTFCR_PT_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_QTFCR_RgRd(i,v);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR_PT_Wr_Mask) | ((data & MAC_QTFCR_PT_Mask)<<16));\
+		MAC_QTFCR_RgWr(i,v);\
+} while(0)
+
+#define MAC_QTFCR_PT_UdfRd(i,data) do {\
+		MAC_QTFCR_RgRd(i,data);\
+		data = ((data >> 16) & MAC_QTFCR_PT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR_DZPQ_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR_DZPQ_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR_DZPQ_Wr_Mask (ULONG)(~((~(~0 << (1))) << (7)))*/
+
+#define MAC_QTFCR_DZPQ_Wr_Mask (ULONG)(0xffffff7f)
+
+#define MAC_QTFCR_DZPQ_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_QTFCR_RgRd(i,v);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR_DZPQ_Wr_Mask) | ((data & MAC_QTFCR_DZPQ_Mask)<<7));\
+		MAC_QTFCR_RgWr(i,v);\
+} while(0)
+
+#define MAC_QTFCR_DZPQ_UdfRd(i,data) do {\
+		MAC_QTFCR_RgRd(i,data);\
+		data = ((data >> 7) & MAC_QTFCR_DZPQ_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR_PLT_Mask (ULONG)(~(~0<<(3)))*/
+
+#define MAC_QTFCR_PLT_Mask (ULONG)(0x7)
+
+/*#define MAC_QTFCR_PLT_Wr_Mask (ULONG)(~((~(~0 << (3))) << (4)))*/
+
+#define MAC_QTFCR_PLT_Wr_Mask (ULONG)(0xffffff8f)
+
+#define MAC_QTFCR_PLT_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_QTFCR_RgRd(i,v);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR_PLT_Wr_Mask) | ((data & MAC_QTFCR_PLT_Mask)<<4));\
+		MAC_QTFCR_RgWr(i,v);\
+} while(0)
+
+#define MAC_QTFCR_PLT_UdfRd(i,data) do {\
+		MAC_QTFCR_RgRd(i,data);\
+		data = ((data >> 4) & MAC_QTFCR_PLT_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR_TFE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR_TFE_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR_TFE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (1)))*/
+
+#define MAC_QTFCR_TFE_Wr_Mask (ULONG)(0xfffffffd)
+
+#define MAC_QTFCR_TFE_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_QTFCR_RgRd(i,v);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR_TFE_Wr_Mask) | ((data & MAC_QTFCR_TFE_Mask)<<1));\
+		MAC_QTFCR_RgWr(i,v);\
+} while(0)
+
+#define MAC_QTFCR_TFE_UdfRd(i,data) do {\
+		MAC_QTFCR_RgRd(i,data);\
+		data = ((data >> 1) & MAC_QTFCR_TFE_Mask);\
+} while(0)
+
+/*#define MAC_QTFCR_FCB_BPA_Mask (ULONG)(~(~0<<(1)))*/
+
+#define MAC_QTFCR_FCB_BPA_Mask (ULONG)(0x1)
+
+/*#define MAC_QTFCR_FCB_BPA_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define MAC_QTFCR_FCB_BPA_Wr_Mask (ULONG)(0xfffffffe)
+
+#define MAC_QTFCR_FCB_BPA_UdfWr(i,data) do {\
+		ULONG v;\
+		MAC_QTFCR_RgRd(i,v);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_8))|((( 0) & (MAC_QTFCR_Mask_8))<<8);\
+		v = (v & (MAC_QTFCR_RES_Wr_Mask_2))|((( 0) & (MAC_QTFCR_Mask_2))<<2);\
+		v = ((v & MAC_QTFCR_FCB_BPA_Wr_Mask) | ((data & MAC_QTFCR_FCB_BPA_Mask)<<0));\
+		MAC_QTFCR_RgWr(i,v);\
+} while(0)
+
+#define MAC_QTFCR_FCB_BPA_UdfRd(i,data) do {\
+		MAC_QTFCR_RgRd(i,data);\
+		data = ((data >> 0) & MAC_QTFCR_FCB_BPA_Mask);\
+} while(0)
+
+
+#define DMA_AXI4CR_RgOffAddr (BASE_ADDRESS + 0x1164)
+
+#define DMA_AXI4CR_RgOffAddress(i) ((volatile ULONG *)(DMA_AXI4CR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_AXI4CR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_AXI4CR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_AXI4CR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_AXI4CR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_AXI4CR_Mask_20 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR_Mask_20 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR_RES_Wr_Mask_20 (ULONG)(~((~(~0<<(12)))<<(20)))*/
+
+#define DMA_AXI4CR_RES_Wr_Mask_20 (ULONG)(0xfffff)
+
+/*#define  DMA_AXI4CR_Mask_4 (ULONG)(~(~0<<(12)))*/
+
+#define  DMA_AXI4CR_Mask_4 (ULONG)(0xfff)
+
+/*#define DMA_AXI4CR_RES_Wr_Mask_4 (ULONG)(~((~(~0<<(12)))<<(4)))*/
+
+#define DMA_AXI4CR_RES_Wr_Mask_4 (ULONG)(0xffff000f)
+
+/*#define DMA_AXI4CR_ARQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR_ARQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR_ARQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (16)))*/
+
+#define DMA_AXI4CR_ARQOS_Wr_Mask (ULONG)(0xfff0ffff)
+
+#define DMA_AXI4CR_ARQOS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_AXI4CR_RgRd(i,v);\
+		v = (v & (DMA_AXI4CR_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR_Mask_20))<<20);\
+		v = (v & (DMA_AXI4CR_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR_Mask_4))<<4);\
+		v = ((v & DMA_AXI4CR_ARQOS_Wr_Mask) | ((data & DMA_AXI4CR_ARQOS_Mask)<<16));\
+		DMA_AXI4CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_AXI4CR_ARQOS_UdfRd(i,data) do {\
+		DMA_AXI4CR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_AXI4CR_ARQOS_Mask);\
+} while(0)
+
+/*#define DMA_AXI4CR_AWQOS_Mask (ULONG)(~(~0<<(4)))*/
+
+#define DMA_AXI4CR_AWQOS_Mask (ULONG)(0xf)
+
+/*#define DMA_AXI4CR_AWQOS_Wr_Mask (ULONG)(~((~(~0 << (4))) << (0)))*/
+
+#define DMA_AXI4CR_AWQOS_Wr_Mask (ULONG)(0xfffffff0)
+
+#define DMA_AXI4CR_AWQOS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_AXI4CR_RgRd(i,v);\
+		v = (v & (DMA_AXI4CR_RES_Wr_Mask_20))|((( 0) & (DMA_AXI4CR_Mask_20))<<20);\
+		v = (v & (DMA_AXI4CR_RES_Wr_Mask_4))|((( 0) & (DMA_AXI4CR_Mask_4))<<4);\
+		v = ((v & DMA_AXI4CR_AWQOS_Wr_Mask) | ((data & DMA_AXI4CR_AWQOS_Mask)<<0));\
+		DMA_AXI4CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_AXI4CR_AWQOS_UdfRd(i,data) do {\
+		DMA_AXI4CR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_AXI4CR_AWQOS_Mask);\
+} while(0)
+
+
+#define DMA_RCR_RgOffAddr (BASE_ADDRESS + 0x1108)
+
+#define DMA_RCR_RgOffAddress(i) ((volatile ULONG *)(DMA_RCR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_RCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_RCR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_RCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_RCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_RCR_Mask_28 (ULONG)(~(~0<<(4)))*/
+
+#define  DMA_RCR_Mask_28 (ULONG)(0xf)
+
+/*#define DMA_RCR_RES_Wr_Mask_28 (ULONG)(~((~(~0<<(4)))<<(28)))*/
+
+#define DMA_RCR_RES_Wr_Mask_28 (ULONG)(0xfffffff)
+
+/*#define  DMA_RCR_Mask_22 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_RCR_Mask_22 (ULONG)(0x7)
+
+/*#define DMA_RCR_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(3)))<<(22)))*/
+
+#define DMA_RCR_RES_Wr_Mask_22 (ULONG)(0xfe3fffff)
+
+/*#define  DMA_RCR_Mask_15 (ULONG)(~(~0<<(1)))*/
+
+#define  DMA_RCR_Mask_15 (ULONG)(0x1)
+
+/*#define DMA_RCR_RES_Wr_Mask_15 (ULONG)(~((~(~0<<(1)))<<(15)))*/
+
+#define DMA_RCR_RES_Wr_Mask_15 (ULONG)(0xffff7fff)
+
+/*#define DMA_RCR_MAMS_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR_MAMS_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR_MAMS_Wr_Mask (ULONG)(~((~(~0 << (1))) << (27)))*/
+
+#define DMA_RCR_MAMS_Wr_Mask (ULONG)(0xf7ffffff)
+
+#define DMA_RCR_MAMS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_MAMS_Wr_Mask) | ((data & DMA_RCR_MAMS_Mask)<<27));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_MAMS_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 27) & DMA_RCR_MAMS_Mask);\
+} while(0)
+
+/*#define DMA_RCR_DFF_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR_DFF_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR_DFF_Wr_Mask (ULONG)(~((~(~0 << (1))) << (26)))*/
+
+#define DMA_RCR_DFF_Wr_Mask (ULONG)(0xfbffffff)
+
+#define DMA_RCR_DFF_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_DFF_Wr_Mask) | ((data & DMA_RCR_DFF_Mask)<<26));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_DFF_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 26) & DMA_RCR_DFF_Mask);\
+} while(0)
+
+/*#define DMA_RCR_RES_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR_RES_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR_RES_Wr_Mask (ULONG)(~((~(~0 << (1))) << (25)))*/
+
+#define DMA_RCR_RES_Wr_Mask (ULONG)(0xfdffffff)
+
+#define DMA_RCR_RES_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_RES_Wr_Mask) | ((data & DMA_RCR_RES_Mask)<<25));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_RES_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 25) & DMA_RCR_RES_Mask);\
+} while(0)
+
+/*#define DMA_RCR_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_RCR_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_RCR_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_RCR_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_RCR_PBL_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_PBL_Wr_Mask) | ((data & DMA_RCR_PBL_Mask)<<16));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_PBL_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_RCR_PBL_Mask);\
+} while(0)
+
+/*#define DMA_RCR_RBSZ_Mask (ULONG)(~(~0<<(14)))*/
+
+#define DMA_RCR_RBSZ_Mask (ULONG)(0x3fff)
+
+/*#define DMA_RCR_RBSZ_Wr_Mask (ULONG)(~((~(~0 << (14))) << (1)))*/
+
+#define DMA_RCR_RBSZ_Wr_Mask (ULONG)(0xffff8001)
+
+#define DMA_RCR_RBSZ_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_RBSZ_Wr_Mask) | ((data & DMA_RCR_RBSZ_Mask)<<1));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_RBSZ_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 1) & DMA_RCR_RBSZ_Mask);\
+} while(0)
+
+/*#define DMA_RCR_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_RCR_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_RCR_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_RCR_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_RCR_ST_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_RCR_RgRd(i,v);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_28))|((( 0) & (DMA_RCR_Mask_28))<<28);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_22))|((( 0) & (DMA_RCR_Mask_22))<<22);\
+		v = (v & (DMA_RCR_RES_Wr_Mask_15))|((( 0) & (DMA_RCR_Mask_15))<<15);\
+		v = ((v & DMA_RCR_ST_Wr_Mask) | ((data & DMA_RCR_ST_Mask)<<0));\
+		DMA_RCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_RCR_ST_UdfRd(i,data) do {\
+		DMA_RCR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_RCR_ST_Mask);\
+} while(0)
+
+
+#define DMA_TCR_RgOffAddr (BASE_ADDRESS + 0x1104)
+
+#define DMA_TCR_RgOffAddress(i) ((volatile ULONG *)(DMA_TCR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_TCR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_TCR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_TCR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_TCR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_TCR_Mask_22 (ULONG)(~(~0<<(10)))*/
+
+#define  DMA_TCR_Mask_22 (ULONG)(0x3ff)
+
+/*#define DMA_TCR_RES_Wr_Mask_22 (ULONG)(~((~(~0<<(10)))<<(22)))*/
+
+#define DMA_TCR_RES_Wr_Mask_22 (ULONG)(0x3fffff)
+
+/*#define  DMA_TCR_Mask_13 (ULONG)(~(~0<<(3)))*/
+
+#define  DMA_TCR_Mask_13 (ULONG)(0x7)
+
+/*#define DMA_TCR_RES_Wr_Mask_13 (ULONG)(~((~(~0<<(3)))<<(13)))*/
+
+#define DMA_TCR_RES_Wr_Mask_13 (ULONG)(0xffff1fff)
+
+/*#define  DMA_TCR_Mask_5 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_TCR_Mask_5 (ULONG)(0x7f)
+
+/*#define DMA_TCR_RES_Wr_Mask_5 (ULONG)(~((~(~0<<(7)))<<(5)))*/
+
+#define DMA_TCR_RES_Wr_Mask_5 (ULONG)(0xfffff01f)
+
+/*#define DMA_TCR_PBL_Mask (ULONG)(~(~0<<(6)))*/
+
+#define DMA_TCR_PBL_Mask (ULONG)(0x3f)
+
+/*#define DMA_TCR_PBL_Wr_Mask (ULONG)(~((~(~0 << (6))) << (16)))*/
+
+#define DMA_TCR_PBL_Wr_Mask (ULONG)(0xffc0ffff)
+
+#define DMA_TCR_PBL_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_TCR_RgRd(i,v);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_22))|((( 0) & (DMA_TCR_Mask_22))<<22);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_13))|((( 0) & (DMA_TCR_Mask_13))<<13);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_5))|((( 0) & (DMA_TCR_Mask_5))<<5);\
+		v = ((v & DMA_TCR_PBL_Wr_Mask) | ((data & DMA_TCR_PBL_Mask)<<16));\
+		DMA_TCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TCR_PBL_UdfRd(i,data) do {\
+		DMA_TCR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_TCR_PBL_Mask);\
+} while(0)
+
+/*#define DMA_TCR_TSE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR_TSE_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR_TSE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (12)))*/
+
+#define DMA_TCR_TSE_Wr_Mask (ULONG)(0xffffefff)
+
+#define DMA_TCR_TSE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_TCR_RgRd(i,v);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_22))|((( 0) & (DMA_TCR_Mask_22))<<22);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_13))|((( 0) & (DMA_TCR_Mask_13))<<13);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_5))|((( 0) & (DMA_TCR_Mask_5))<<5);\
+		v = ((v & DMA_TCR_TSE_Wr_Mask) | ((data & DMA_TCR_TSE_Mask)<<12));\
+		DMA_TCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TCR_TSE_UdfRd(i,data) do {\
+		DMA_TCR_RgRd(i,data);\
+		data = ((data >> 12) & DMA_TCR_TSE_Mask);\
+} while(0)
+
+/*#define DMA_TCR_OSP_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR_OSP_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR_OSP_Wr_Mask (ULONG)(~((~(~0 << (1))) << (4)))*/
+
+#define DMA_TCR_OSP_Wr_Mask (ULONG)(0xffffffef)
+
+#define DMA_TCR_OSP_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_TCR_RgRd(i,v);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_22))|((( 0) & (DMA_TCR_Mask_22))<<22);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_13))|((( 0) & (DMA_TCR_Mask_13))<<13);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_5))|((( 0) & (DMA_TCR_Mask_5))<<5);\
+		v = ((v & DMA_TCR_OSP_Wr_Mask) | ((data & DMA_TCR_OSP_Mask)<<4));\
+		DMA_TCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TCR_OSP_UdfRd(i,data) do {\
+		DMA_TCR_RgRd(i,data);\
+		data = ((data >> 4) & DMA_TCR_OSP_Mask);\
+} while(0)
+
+/*#define DMA_TCR_TCW_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_TCR_TCW_Mask (ULONG)(0x7)
+
+/*#define DMA_TCR_TCW_Wr_Mask (ULONG)(~((~(~0 << (3))) << (1)))*/
+
+#define DMA_TCR_TCW_Wr_Mask (ULONG)(0xfffffff1)
+
+#define DMA_TCR_TCW_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_TCR_RgRd(i,v);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_22))|((( 0) & (DMA_TCR_Mask_22))<<22);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_13))|((( 0) & (DMA_TCR_Mask_13))<<13);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_5))|((( 0) & (DMA_TCR_Mask_5))<<5);\
+		v = ((v & DMA_TCR_TCW_Wr_Mask) | ((data & DMA_TCR_TCW_Mask)<<1));\
+		DMA_TCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TCR_TCW_UdfRd(i,data) do {\
+		DMA_TCR_RgRd(i,data);\
+		data = ((data >> 1) & DMA_TCR_TCW_Mask);\
+} while(0)
+
+/*#define DMA_TCR_ST_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_TCR_ST_Mask (ULONG)(0x1)
+
+/*#define DMA_TCR_ST_Wr_Mask (ULONG)(~((~(~0 << (1))) << (0)))*/
+
+#define DMA_TCR_ST_Wr_Mask (ULONG)(0xfffffffe)
+
+#define DMA_TCR_ST_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_TCR_RgRd(i,v);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_22))|((( 0) & (DMA_TCR_Mask_22))<<22);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_13))|((( 0) & (DMA_TCR_Mask_13))<<13);\
+		v = (v & (DMA_TCR_RES_Wr_Mask_5))|((( 0) & (DMA_TCR_Mask_5))<<5);\
+		v = ((v & DMA_TCR_ST_Wr_Mask) | ((data & DMA_TCR_ST_Mask)<<0));\
+		DMA_TCR_RgWr(i,v);\
+} while(0)
+
+#define DMA_TCR_ST_UdfRd(i,data) do {\
+		DMA_TCR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_TCR_ST_Mask);\
+} while(0)
+
+
+#define DMA_CR_RgOffAddr (BASE_ADDRESS + 0x1100)
+
+#define DMA_CR_RgOffAddress(i) ((volatile ULONG *)(DMA_CR_RgOffAddr + ((i-0)*128)))
+
+#define DMA_CR_RgWr(i,data) do {\
+		iowrite32(data, (void *)DMA_CR_RgOffAddress(i));\
+} while(0)
+
+#define DMA_CR_RgRd(i,data) do {\
+		(data) = ioread32((void *)DMA_CR_RgOffAddress(i));\
+} while(0)
+
+/*#define  DMA_CR_Mask_25 (ULONG)(~(~0<<(7)))*/
+
+#define  DMA_CR_Mask_25 (ULONG)(0x7f)
+
+/*#define DMA_CR_RES_Wr_Mask_25 (ULONG)(~((~(~0<<(7)))<<(25)))*/
+
+#define DMA_CR_RES_Wr_Mask_25 (ULONG)(0x1ffffff)
+
+/*#define  DMA_CR_Mask_21 (ULONG)(~(~0<<(2)))*/
+
+#define  DMA_CR_Mask_21 (ULONG)(0x3)
+
+/*#define DMA_CR_RES_Wr_Mask_21 (ULONG)(~((~(~0<<(2)))<<(21)))*/
+
+#define DMA_CR_RES_Wr_Mask_21 (ULONG)(0xff9fffff)
+
+/*#define DMA_CR_SPH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR_SPH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR_SPH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (24)))*/
+
+#define DMA_CR_SPH_Wr_Mask (ULONG)(0xfeffffff)
+
+#define DMA_CR_SPH_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_SPH_Wr_Mask) | ((data & DMA_CR_SPH_Mask)<<24));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_SPH_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 24) & DMA_CR_SPH_Mask);\
+} while(0)
+
+/*#define DMA_CR_CH_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR_CH_Mask (ULONG)(0x1)
+
+/*#define DMA_CR_CH_Wr_Mask (ULONG)(~((~(~0 << (1))) << (23)))*/
+
+#define DMA_CR_CH_Wr_Mask (ULONG)(0xff7fffff)
+
+#define DMA_CR_CH_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_CH_Wr_Mask) | ((data & DMA_CR_CH_Mask)<<23));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_CH_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 23) & DMA_CR_CH_Mask);\
+} while(0)
+
+/*#define DMA_CR_DSL_Mask (ULONG)(~(~0<<(3)))*/
+
+#define DMA_CR_DSL_Mask (ULONG)(0x7)
+
+/*#define DMA_CR_DSL_Wr_Mask (ULONG)(~((~(~0 << (3))) << (18)))*/
+
+#define DMA_CR_DSL_Wr_Mask (ULONG)(0xffe3ffff)
+
+#define DMA_CR_DSL_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_DSL_Wr_Mask) | ((data & DMA_CR_DSL_Mask)<<18));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_DSL_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 18) & DMA_CR_DSL_Mask);\
+} while(0)
+
+/*#define DMA_CR_DPE_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR_DPE_Mask (ULONG)(0x1)
+
+/*#define DMA_CR_DPE_Wr_Mask (ULONG)(~((~(~0 << (1))) << (17)))*/
+
+#define DMA_CR_DPE_Wr_Mask (ULONG)(0xfffdffff)
+
+#define DMA_CR_DPE_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_DPE_Wr_Mask) | ((data & DMA_CR_DPE_Mask)<<17));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_DPE_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 17) & DMA_CR_DPE_Mask);\
+} while(0)
+
+/*#define DMA_CR_PBLx8_Mask (ULONG)(~(~0<<(1)))*/
+
+#define DMA_CR_PBLx8_Mask (ULONG)(0x1)
+
+/*#define DMA_CR_PBLx8_Wr_Mask (ULONG)(~((~(~0 << (1))) << (16)))*/
+
+#define DMA_CR_PBLx8_Wr_Mask (ULONG)(0xfffeffff)
+
+#define DMA_CR_PBLx8_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_PBLx8_Wr_Mask) | ((data & DMA_CR_PBLx8_Mask)<<16));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_PBLx8_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 16) & DMA_CR_PBLx8_Mask);\
+} while(0)
+
+/*#define DMA_CR_MSS_Mask (ULONG)(~(~0<<(16)))*/
+
+#define DMA_CR_MSS_Mask (ULONG)(0xffff)
+
+/*#define DMA_CR_MSS_Wr_Mask (ULONG)(~((~(~0 << (16))) << (0)))*/
+
+#define DMA_CR_MSS_Wr_Mask (ULONG)(0xffff0000)
+
+#define DMA_CR_MSS_UdfWr(i,data) do {\
+		ULONG v;\
+		DMA_CR_RgRd(i,v);\
+		v = (v & (DMA_CR_RES_Wr_Mask_25))|((( 0) & (DMA_CR_Mask_25))<<25);\
+		v = (v & (DMA_CR_RES_Wr_Mask_21))|((( 0) & (DMA_CR_Mask_21))<<21);\
+		v = ((v & DMA_CR_MSS_Wr_Mask) | ((data & DMA_CR_MSS_Mask)<<0));\
+		DMA_CR_RgWr(i,v);\
+} while(0)
+
+#define DMA_CR_MSS_UdfRd(i,data) do {\
+		DMA_CR_RgRd(i,data);\
+		data = ((data >> 0) & DMA_CR_MSS_Mask);\
+} while(0)
+
+#define MAC_ALPA_PSE_LPOS 7
+#define MAC_ALPA_PSE_HPOS 8
+
+#define MAC_ALPA_FD_LPOS 5
+#define MAC_ALPA_FD_HPOS 5
+
+#define MAC_AAD_PSE_LPOS 7
+#define MAC_AAD_PSE_HPOS 8
+
+#define MAC_AAD_FD_LPOS 5
+#define MAC_AAD_FD_HPOS 5
+
+#define MAC_TTN_TXTSSTSHI_LPOS 0
+#define MAC_TTN_TXTSSTSHI_HPOS 31
+
+#define MAC_TTSN_TXTSSTSMIS_LPOS 31
+#define MAC_TTSN_TXTSSTSMIS_HPOS 31
+
+#define MAC_TTSN_TXTSSTSLO_LPOS 0
+#define MAC_TTSN_TXTSSTSLO_HPOS 30
+
+#define MAC_STNSR_TSSS_LPOS 0
+#define MAC_STNSR_TSSS_HPOS 30
+
+#define MAC_TCR_TXTSSTSM_LPOS 24
+#define MAC_TCR_TXTSSTSM_HPOS 24
+
+#define MAC_TCR_TSCTRLSSR_LPOS 9
+#define MAC_TCR_TSCTRLSSR_HPOS 9
+
+#define MAC_TCR_TSADDREG_LPOS 5
+#define MAC_TCR_TSADDREG_HPOS 5
+
+#define MAC_TCR_TSUPDT_LPOS 3
+#define MAC_TCR_TSUPDT_HPOS 3
+
+#define MAC_TCR_TSINIT_LPOS 2
+#define MAC_TCR_TSINIT_HPOS 2
+
+#define MAC_TCR_TSCFUPDT_LPOS 1
+#define MAC_TCR_TSCFUPDT_HPOS 1
+
+#define MAC_GMIIDR_GD_LPOS 0
+#define MAC_GMIIDR_GD_HPOS 15
+
+#define MAC_GMIIAR_GB_LPOS 0
+#define MAC_GMIIAR_GB_HPOS 0
+
+#define MAC_HFR2_TXQCNT_LPOS 6
+#define MAC_HFR2_TXQCNT_HPOS 9
+
+#define MAC_HFR2_RXQCNT_LPOS 0
+#define MAC_HFR2_RXQCNT_HPOS 3
+
+#define DMA_SR_TI_LPOS 0
+#define DMA_SR_TI_HPOS 0
+
+#define DMA_SR_TPS_LPOS 1
+#define DMA_SR_TPS_HPOS 1
+
+#define DMA_SR_TBU_LPOS 2
+#define DMA_SR_TBU_HPOS 2
+
+#define DMA_SR_RI_LPOS 6
+#define DMA_SR_RI_HPOS 6
+
+#define DMA_SR_RBU_LPOS 7
+#define DMA_SR_RBU_HPOS 7
+
+#define DMA_SR_RPS_LPOS 8
+#define DMA_SR_RPS_HPOS 8
+
+#define DMA_SR_RWT_LPOS 9
+#define DMA_SR_RWT_HPOS 9
+
+#define DMA_SR_FBE_LPOS 12
+#define DMA_SR_FBE_HPOS 12
+
+#define DMA_ISR_DC0IS_LPOS 0
+#define DMA_ISR_DC0IS_HPOS 0
+
+#define DMA_ISR_MTLIS_LPOS 16
+#define DMA_ISR_MTLIS_HPOS 16
+
+#define DMA_ISR_MACIS_LPOS 17
+#define DMA_ISR_MACIS_HPOS 17
+
+#define DMA_DSR2_TPS7_LPOS 4
+#define DMA_DSR2_TPS7_HPOS 7
+
+#define DMA_DSR2_RPS7_LPOS 0
+#define DMA_DSR2_RPS7_HPOS 3
+
+#define DMA_DSR1_TPS6_LPOS 28
+#define DMA_DSR1_TPS6_HPOS 31
+
+#define DMA_DSR1_RPS6_LPOS 24
+#define DMA_DSR1_RPS6_HPOS 27
+
+#define DMA_DSR1_TPS5_LPOS 20
+#define DMA_DSR1_TPS5_HPOS 23
+
+#define DMA_DSR1_RPS5_LPOS 16
+#define DMA_DSR1_RPS5_HPOS 19
+
+#define DMA_DSR1_TPS4_LPOS 12
+#define DMA_DSR1_TPS4_HPOS 15
+
+#define DMA_DSR1_RPS4_LPOS 8
+#define DMA_DSR1_RPS4_HPOS 11
+
+#define DMA_DSR1_TPS3_LPOS 4
+#define DMA_DSR1_TPS3_HPOS 7
+
+#define DMA_DSR1_RPS3_LPOS 0
+#define DMA_DSR1_RPS3_HPOS 3
+
+#define DMA_DSR0_TPS2_LPOS 28
+#define DMA_DSR0_TPS2_HPOS 31
+
+#define DMA_DSR0_RPS2_LPOS 24
+#define DMA_DSR0_RPS2_HPOS 27
+
+#define DMA_DSR0_TPS1_LPOS 20
+#define DMA_DSR0_TPS1_HPOS 23
+
+#define DMA_DSR0_RPS1_LPOS 16
+#define DMA_DSR0_RPS1_HPOS 19
+
+#define DMA_DSR0_TPS0_LPOS 12
+#define DMA_DSR0_TPS0_HPOS 15
+
+#define DMA_DSR0_RPS0_LPOS 8
+#define DMA_DSR0_RPS0_HPOS 11
+
+#define MAC_VLANHTR_VLHT_LPOS 0
+#define MAC_VLANHTR_VLHT_HPOS 15
+
+#define DMA_BMR_SWR_LPOS 0
+#define DMA_BMR_SWR_HPOS 0
+
+#define MTL_Q0TOMR_FTQ_LPOS 0
+#define MTL_Q0TOMR_FTQ_HPOS 0
+
+#define MTL_QTOMR_FTQ_LPOS 0
+#define MTL_QTOMR_FTQ_HPOS 0
+
+#define MTL_OMR_DTXSTS_LPOS 1
+#define MTL_OMR_DTXSTS_HPOS 1
+
+#define MAC_MCR_IPC_LPOS 27
+#define MAC_MCR_IPC_HPOS 27
+
+#define MAC_ISR_PMTIS_LPOS 4
+#define MAC_ISR_PMTIS_HPOS 4
+
+#define MAC_ISR_PCSANCIS_LPOS 2
+#define MAC_ISR_PCSANCIS_HPOS 2
+
+#define MAC_ISR_PCSLCHGIS_LPOS 1
+#define MAC_ISR_PCSLCHGIS_HPOS 1
+
+#define MAC_ISR_RGSMIIS_LPOS 0
+#define MAC_ISR_RGSMIIS_HPOS 0
+
+#define MTL_QECR_ABPSSIE_LPOS 24
+#define MTL_QECR_ABPSSIE_HPOS 24
+
+#define MAC_ANS_LS_LPOS 2
+#define MAC_ANS_LS_HPOS 2
+
+#define MAC_ISR_LPI_LPOS 5
+#define MAC_ISR_LPI_HPOS 5
+
+#define GET_VALUE(data, lbit, hbit) ((data >>lbit) & (~(~0<<(hbit-lbit+1))))
+
+#define GET_INDEXED_VALUE(data, lbit, hbit,index)\
+  (GET_VALUE(data,(lbit+(index)*(hbit-lbit+1)),(hbit+(index)*(hbit-lbit+1))))
+#endif
diff --git a/drivers/net/ethernet/synopsys/Kconfig b/drivers/net/ethernet/synopsys/Kconfig
new file mode 100755
index 0000000..da788e9
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/Kconfig
@@ -0,0 +1,30 @@
+config DWC_QOS
+	tristate "Synopsys Ethernet QOS driver"
+	default y
+	depends on ARCH_GEN3 && PCI
+	---help---
+	  This driver supports Synopsys QOS GMAC core controller.
+	  To compile this driver as a module, choose M here: the
+	  module will be called DWC_ETH_QOS.ko
+
+if DWC_QOS
+
+config DWC_QOS_DEBUGFS
+	bool "Debug FS interface support"
+	default y
+	help
+	  Adds debugfs interface support.
+
+config DWC_QOS_PTP
+	bool "Precision time protocol support"
+	default n
+	help
+	  Adds PTP support.
+
+config DWC_QOS_PG
+	bool "Packet generator support"
+	default n
+	help
+	  Adds PG support.
+
+endif # DWC_QOS
diff --git a/drivers/net/ethernet/synopsys/Makefile b/drivers/net/ethernet/synopsys/Makefile
new file mode 100755
index 0000000..522604d
--- /dev/null
+++ b/drivers/net/ethernet/synopsys/Makefile
@@ -0,0 +1,46 @@
+export DWC_QOS_PG CONFIG_PGTEST_OBJ DWC_ETH_QOS_CONFIG_PGTEST
+export DWC_QOS_DEBUGFS CONFIG_DEBUGFS_OBJ DWC_ETH_QOS_CONFIG_DEBUGFS
+export DWC_QOS_PTP CONFIG_PTPSUPPORT_OBJ DWC_ETH_QOS_CONFIG_PTP
+
+#default values
+#PGTEST=n	#pg(packet generator) is disabled	
+#DEBUGFS=y	#debugfs is enabled
+#PTPSUPPORT=n	#ptp is disabled
+
+ifeq "$(DWC_QOS_PG)" "y"
+CONFIG_PGTEST_OBJ=y
+DWC_ETH_QOS_CONFIG_PGTEST=-DPGTEST
+EXTRA_CFLAGS+=-DCONFIG_PGTEST_OBJ
+else
+CONFIG_PGTEST_OBJ=n
+endif
+
+ifeq "$(DWC_QOS_DEBUGFS)" "y"
+CONFIG_DEBUGFS_OBJ=y
+DWC_ETH_QOS_CONFIG_DEBUGFS=-DDEBUGFS
+EXTRA_CFLAGS+=-DCONFIG_DEBUGFS_OBJ
+else
+CONFIG_DEBUGFS_OBJ=n
+endif
+
+ifeq "$(DWC_QOS_PTP)" "y"
+CONFIG_PTPSUPPORT_OBJ=y
+DWC_ETH_QOS_CONFIG_PTP=-DPTPSUPPORT
+EXTRA_CFLAGS+=-DCONFIG_PTPSUPPORT_OBJ
+else
+CONFIG_PTPSUPPORT_OBJ=n
+endif
+
+obj-$(CONFIG_DWC_QOS) := DWC_ETH_QOS.o
+
+DWC_ETH_QOS-y += DWC_ETH_QOS_dev.o \
+			DWC_ETH_QOS_drv.o \
+			DWC_ETH_QOS_desc.o \
+			DWC_ETH_QOS_ethtool.o \
+			DWC_ETH_QOS_pci.o \
+			DWC_ETH_QOS_mdio.o \
+			DWC_ETH_QOS_eee.o
+
+DWC_ETH_QOS-$(CONFIG_DEBUGFS_OBJ) += DWC_ETH_QOS_debug_operation.o
+DWC_ETH_QOS-$(CONFIG_PGTEST_OBJ) += DWC_ETH_QOS_pktgen.o
+DWC_ETH_QOS-$(CONFIG_PTPSUPPORT_OBJ) += DWC_ETH_QOS_ptp.o
-- 
1.7.9.5

