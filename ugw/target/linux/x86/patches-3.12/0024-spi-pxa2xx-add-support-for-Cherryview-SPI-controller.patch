From 5c570e1947e19d37cbc9dc42f55c04b636fde365 Mon Sep 17 00:00:00 2001
From: Huiquan Zhong <huiquan.zhong@intel.com>
Date: Wed, 20 Aug 2014 15:34:08 +0800
Subject: [PATCH] spi/pxa2xx: add support for Cherryview SPI controllers

Cherryview has three SPI controllers, the acpi ID is 8086228E. each
controllers have two chip select.

When using the SSCR0.SCR the M/N divider must be set to M=1, N=1.
The Sclk is 100Mhz, also for BYT platform.

Change-Id: I37bff05d0b818fc46347d0c20f3c47ea6db0b867
Signed-off-by: Huiquan Zhong <huiquan.zhong@intel.com>
(cherry picked from commit c61693429afec2e96b2a3e5c909ba941c0b29b6d)
Signed-off-by: Maladau Mou <maladau.mou@intel.com>
---
 drivers/acpi/acpi_lpss.c   |    2 +-
 drivers/spi/spi-pxa2xx.c   |  130 ++++++++++++++++++++++++++++++++++++--------
 drivers/spi/spi-pxa2xx.h   |    5 ++
 include/linux/pxa2xx_ssp.h |    2 +
 4 files changed, 115 insertions(+), 24 deletions(-)

diff --git a/drivers/acpi/acpi_lpss.c b/drivers/acpi/acpi_lpss.c
index fb78bb9..00439e4 100644
--- a/drivers/acpi/acpi_lpss.c
+++ b/drivers/acpi/acpi_lpss.c
@@ -111,7 +111,7 @@ static struct lpss_device_desc byt_uart_dev_desc = {
 
 static struct lpss_shared_clock spi_clock = {
 	.name = "spi_clk",
-	.rate = 50000000,
+	.rate = 100000000,
 };
 
 static struct lpss_device_desc byt_spi_dev_desc = {
diff --git a/drivers/spi/spi-pxa2xx.c b/drivers/spi/spi-pxa2xx.c
index 28361f7..80f5d81 100644
--- a/drivers/spi/spi-pxa2xx.c
+++ b/drivers/spi/spi-pxa2xx.c
@@ -69,12 +69,26 @@ MODULE_ALIAS("platform:pxa2xx-spi");
 #define LPSS_TX_HITHRESH_DFLT	224
 
 /* Offset from drv_data->lpss_base */
+#define PRV_CLK_PARAMS		0x00
+#define PRV_CLK_EN		BIT(0)
+#define PRV_CLK_M_VAL_SHIFT	1
+#define PRV_CLK_N_VAL_SHIFT	16
+#define PRV_CLK_UPDATE		BIT(31)
+
+#define SSP_RESETS		0x04
+#define SSP_RESETS_APB		BIT(0)
+#define SSP_RESETS_FUNC		BIT(1)
+
 #define GENERAL_REG		0x08
 #define GENERAL_REG_RXTO_HOLDOFF_DISABLE BIT(24)
+
 #define SSP_REG			0x0c
+#define DISABLE_SSP_DMA_FINISH	BIT(0)
+
 #define SPI_CS_CONTROL		0x18
 #define SPI_CS_CONTROL_SW_MODE	BIT(0)
 #define SPI_CS_CONTROL_CS_HIGH	BIT(1)
+#define SPI_CS_CONTROL_CS_SEL	BIT(2)
 
 static bool is_lpss_ssp(const struct driver_data *drv_data)
 {
@@ -98,6 +112,43 @@ static void __lpss_ssp_write_priv(struct driver_data *drv_data,
 	writel(value, drv_data->lpss_base + offset);
 }
 
+static void lpss_ssp_init(struct driver_data *drv_data)
+{
+	u32 param;
+	u32 m = 1, n = 1;
+	u32 value;
+
+	if (!is_lpss_ssp(drv_data))
+		return;
+
+	/* Reset apb and clock domain */
+	__lpss_ssp_write_priv(drv_data, SSP_RESETS, 0x0);
+	usleep_range(10, 100);
+	__lpss_ssp_write_priv(drv_data, SSP_RESETS,
+				SSP_RESETS_APB | SSP_RESETS_FUNC);
+	usleep_range(10, 100);
+
+	/* Setting the clock divisor */
+	param = (m << PRV_CLK_M_VAL_SHIFT) | (n << PRV_CLK_N_VAL_SHIFT)
+			| PRV_CLK_EN;
+	__lpss_ssp_write_priv(drv_data, PRV_CLK_PARAMS, param);
+	__lpss_ssp_write_priv(drv_data, PRV_CLK_PARAMS, param | PRV_CLK_UPDATE);
+
+	/* Enable software chip select control */
+	value = SPI_CS_CONTROL_SW_MODE | SPI_CS_CONTROL_CS_HIGH;
+	__lpss_ssp_write_priv(drv_data, SPI_CS_CONTROL, value);
+
+	/* Enable multiblock DMA transfers */
+	if (drv_data->master_info->enable_dma) {
+		__lpss_ssp_write_priv(drv_data, SSP_REG,
+					DISABLE_SSP_DMA_FINISH);
+
+		value = __lpss_ssp_read_priv(drv_data, GENERAL_REG);
+		value |= GENERAL_REG_RXTO_HOLDOFF_DISABLE;
+		__lpss_ssp_write_priv(drv_data, GENERAL_REG, value);
+	}
+}
+
 /*
  * lpss_ssp_setup - perform LPSS SSP specific setup
  * @drv_data: pointer to the driver private data
@@ -139,22 +190,13 @@ detection_done:
 	/* Now set the LPSS base */
 	drv_data->lpss_base = drv_data->ioaddr + offset;
 
-	/* Enable software chip select control */
-	value = SPI_CS_CONTROL_SW_MODE | SPI_CS_CONTROL_CS_HIGH;
-	__lpss_ssp_write_priv(drv_data, SPI_CS_CONTROL, value);
-
-	/* Enable multiblock DMA transfers */
-	if (drv_data->master_info->enable_dma) {
-		__lpss_ssp_write_priv(drv_data, SSP_REG, 1);
-
-		value = __lpss_ssp_read_priv(drv_data, GENERAL_REG);
-		value |= GENERAL_REG_RXTO_HOLDOFF_DISABLE;
-		__lpss_ssp_write_priv(drv_data, GENERAL_REG, value);
-	}
+	/* Init LPSS private register bits */
+	lpss_ssp_init(drv_data);
 }
 
 static void lpss_ssp_cs_control(struct driver_data *drv_data, bool enable)
 {
+	struct chip_data *chip = drv_data->cur_chip;
 	u32 value;
 
 	if (!is_lpss_ssp(drv_data))
@@ -165,6 +207,12 @@ static void lpss_ssp_cs_control(struct driver_data *drv_data, bool enable)
 		value &= ~SPI_CS_CONTROL_CS_HIGH;
 	else
 		value |= SPI_CS_CONTROL_CS_HIGH;
+
+	if (chip->chip_select)
+		value |= SPI_CS_CONTROL_CS_SEL;
+	else
+		value &= ~SPI_CS_CONTROL_CS_SEL;
+
 	__lpss_ssp_write_priv(drv_data, SPI_CS_CONTROL, value);
 }
 
@@ -226,13 +274,22 @@ int pxa2xx_spi_flush(struct driver_data *drv_data)
 	return limit;
 }
 
+static bool is_tx_fifo_full(struct driver_data *drv_data)
+{
+	void __iomem *reg = drv_data->ioaddr;
+
+	if (!is_lpss_ssp(drv_data))
+		return (read_SSSR(reg) & SSSR_TFL_MASK) == SSSR_TFL_MASK;
+	else
+		return (read_SSITF(reg) & SSITF_TFL_MASK) == SSITF_TFL_MASK;
+}
+
 static int null_writer(struct driver_data *drv_data)
 {
 	void __iomem *reg = drv_data->ioaddr;
 	u8 n_bytes = drv_data->n_bytes;
 
-	if (((read_SSSR(reg) & SSSR_TFL_MASK) == SSSR_TFL_MASK)
-		|| (drv_data->tx == drv_data->tx_end))
+	if (is_tx_fifo_full(drv_data) || (drv_data->tx == drv_data->tx_end))
 		return 0;
 
 	write_SSDR(0, reg);
@@ -259,8 +316,7 @@ static int u8_writer(struct driver_data *drv_data)
 {
 	void __iomem *reg = drv_data->ioaddr;
 
-	if (((read_SSSR(reg) & SSSR_TFL_MASK) == SSSR_TFL_MASK)
-		|| (drv_data->tx == drv_data->tx_end))
+	if (is_tx_fifo_full(drv_data) || (drv_data->tx == drv_data->tx_end))
 		return 0;
 
 	write_SSDR(*(u8 *)(drv_data->tx), reg);
@@ -286,8 +342,7 @@ static int u16_writer(struct driver_data *drv_data)
 {
 	void __iomem *reg = drv_data->ioaddr;
 
-	if (((read_SSSR(reg) & SSSR_TFL_MASK) == SSSR_TFL_MASK)
-		|| (drv_data->tx == drv_data->tx_end))
+	if (is_tx_fifo_full(drv_data) || (drv_data->tx == drv_data->tx_end))
 		return 0;
 
 	write_SSDR(*(u16 *)(drv_data->tx), reg);
@@ -313,8 +368,7 @@ static int u32_writer(struct driver_data *drv_data)
 {
 	void __iomem *reg = drv_data->ioaddr;
 
-	if (((read_SSSR(reg) & SSSR_TFL_MASK) == SSSR_TFL_MASK)
-		|| (drv_data->tx == drv_data->tx_end))
+	if (is_tx_fifo_full(drv_data) || (drv_data->tx == drv_data->tx_end))
 		return 0;
 
 	write_SSDR(*(u32 *)(drv_data->tx), reg);
@@ -940,6 +994,11 @@ static int setup(struct spi_device *spi)
 		chip->enable_dma = drv_data->master_info->enable_dma;
 	}
 
+	if (is_lpss_ssp(drv_data)) {
+		chip->chip_select = spi->chip_select;
+		chip->enable_dma = drv_data->master_info->enable_dma;
+	}
+
 	chip->threshold = (SSCR1_RxTresh(rx_thres) & SSCR1_RFT) |
 			(SSCR1_TxTresh(tx_thres) & SSCR1_TFT);
 
@@ -1031,6 +1090,8 @@ static void cleanup(struct spi_device *spi)
 static struct pxa2xx_spi_master *
 pxa2xx_spi_acpi_get_pdata(struct platform_device *pdev)
 {
+	struct pxa2xx_spi_acpi_desc *acpi_desc;
+	const struct acpi_device_id *id;
 	struct pxa2xx_spi_master *pdata;
 	struct acpi_device *adev;
 	struct ssp_device *ssp;
@@ -1041,6 +1102,10 @@ pxa2xx_spi_acpi_get_pdata(struct platform_device *pdev)
 	    acpi_bus_get_device(ACPI_HANDLE(&pdev->dev), &adev))
 		return NULL;
 
+	id = acpi_match_device(pdev->dev.driver->acpi_match_table, &pdev->dev);
+	if (!id)
+		return NULL;
+
 	pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
 	if (!pdata) {
 		dev_err(&pdev->dev,
@@ -1071,15 +1136,29 @@ pxa2xx_spi_acpi_get_pdata(struct platform_device *pdev)
 	pdata->num_chipselect = 1;
 	pdata->enable_dma = true;
 
+
+	acpi_desc = (struct pxa2xx_spi_acpi_desc *)id->driver_data;
+	if (acpi_desc)
+		pdata->num_chipselect = acpi_desc->cs_num;
+
 	return pdata;
 }
 
+static struct pxa2xx_spi_acpi_desc byt_spi_desc = {
+	.cs_num = 1,
+};
+
+static struct pxa2xx_spi_acpi_desc cht_spi_desc = {
+	.cs_num = 2,
+};
+
 static struct acpi_device_id pxa2xx_spi_acpi_match[] = {
 	{ "INT33C0", 0 },
 	{ "INT33C1", 0 },
 	{ "INT3430", 0 },
 	{ "INT3431", 0 },
-	{ "80860F0E", 0 },
+	{ "80860F0E", (kernel_ulong_t)&byt_spi_desc },
+	{ "8086228E", (kernel_ulong_t)&cht_spi_desc },
 	{ },
 };
 MODULE_DEVICE_TABLE(acpi, pxa2xx_spi_acpi_match);
@@ -1187,6 +1266,9 @@ static int pxa2xx_spi_probe(struct platform_device *pdev)
 
 	drv_data->max_clk_rate = clk_get_rate(ssp->clk);
 
+	/* Setup and Reset LPSS SPI first */
+	lpss_ssp_setup(drv_data);
+
 	/* Load default SSP configuration */
 	write_SSCR0(0, drv_data->ioaddr);
 	write_SSCR1(SSCR1_RxTresh(RX_THRESH_DFLT) |
@@ -1200,8 +1282,6 @@ static int pxa2xx_spi_probe(struct platform_device *pdev)
 		write_SSTO(0, drv_data->ioaddr);
 	write_SSPSP(0, drv_data->ioaddr);
 
-	lpss_ssp_setup(drv_data);
-
 	tasklet_init(&drv_data->pump_transfers, pump_transfers,
 		     (unsigned long)drv_data);
 
@@ -1325,6 +1405,10 @@ static int pxa2xx_spi_runtime_resume(struct device *dev)
 	struct driver_data *drv_data = dev_get_drvdata(dev);
 
 	clk_prepare_enable(drv_data->ssp->clk);
+
+	/* Init LPSS private register bits */
+	lpss_ssp_init(drv_data);
+
 	return 0;
 }
 #endif
diff --git a/drivers/spi/spi-pxa2xx.h b/drivers/spi/spi-pxa2xx.h
index 5adc2a1..1847958 100644
--- a/drivers/spi/spi-pxa2xx.h
+++ b/drivers/spi/spi-pxa2xx.h
@@ -104,6 +104,7 @@ struct chip_data {
 	u8 enable_dma;
 	u8 bits_per_word;
 	u32 speed_hz;
+	u8 chip_select;
 	union {
 		int gpio_cs;
 		unsigned int frm;
@@ -114,6 +115,10 @@ struct chip_data {
 	void (*cs_control)(u32 command);
 };
 
+struct pxa2xx_spi_acpi_desc {
+	unsigned int cs_num;
+};
+
 #define DEFINE_SSP_REG(reg, off) \
 static inline u32 read_##reg(void const __iomem *p) \
 { return __raw_readl(p + (off)); } \
diff --git a/include/linux/pxa2xx_ssp.h b/include/linux/pxa2xx_ssp.h
index 4944420..c3ed2cf 100644
--- a/include/linux/pxa2xx_ssp.h
+++ b/include/linux/pxa2xx_ssp.h
@@ -161,9 +161,11 @@
 #define SSITF			0x44		/* TX FIFO trigger level */
 #define SSITF_TxLoThresh(x)	(((x) - 1) << 8)
 #define SSITF_TxHiThresh(x)	((x) - 1)
+#define SSITF_TFL_MASK		(0xff << 16)	/* Transmit FIFO Level mask */
 
 #define SSIRF			0x48		/* RX FIFO trigger level */
 #define SSIRF_RxThresh(x)	((x) - 1)
+#define SSIRF_RFL_MASK		(0xff << 8)	/* Receive FIFO Level mask */
 
 enum pxa_ssp_type {
 	SSP_UNDEFINED = 0,
-- 
1.7.9.5

