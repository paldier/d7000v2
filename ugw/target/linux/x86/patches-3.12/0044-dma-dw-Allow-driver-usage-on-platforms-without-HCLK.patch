From 7760d2292022284237665ad7b4cd7c52ced22874 Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date: Wed, 5 Feb 2014 09:51:25 +0000
Subject: [PATCH] dma: dw: Allow driver usage on platforms without HCLK.

Some Intel platforms that use the DW DMA driver dont clock the DMA
engine with HCLK. Add some platform data and DT entry to disable HCLK
usage for these systems.

Change-Id: I70718521125201726d55c6fed0b8943742aea269
Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
(cherry picked from commit bafe01a90b9e0ff6ba47299c84b38a6796a228e0)

Signed-off-by: Brett T. Warden <brett.t.warden@intel.com>
---
 drivers/dma/dw/core.c     |   19 ++++++++++++-------
 drivers/dma/dw/platform.c |    3 +++
 include/linux/dw_dmac.h   |    2 ++
 3 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/drivers/dma/dw/core.c b/drivers/dma/dw/core.c
index 2a0f526..e58ef9f 100644
--- a/drivers/dma/dw/core.c
+++ b/drivers/dma/dw/core.c
@@ -1535,10 +1535,12 @@ int dw_dma_probe(struct dw_dma_chip *chip, struct dw_dma_platform_data *pdata)
 	if (!dw)
 		return -ENOMEM;
 
-	dw->clk = devm_clk_get(chip->dev, "hclk");
-	if (IS_ERR(dw->clk))
-		return PTR_ERR(dw->clk);
-	clk_prepare_enable(dw->clk);
+	if (!pdata->no_hclk) {
+		dw->clk = devm_clk_get(chip->dev, "hclk");
+		if (IS_ERR(dw->clk))
+			return PTR_ERR(dw->clk);
+		clk_prepare_enable(dw->clk);
+	}
 
 	dw->regs = chip->regs;
 	chip->dw = dw;
@@ -1703,7 +1705,8 @@ void dw_dma_shutdown(struct dw_dma_chip *chip)
 	struct dw_dma *dw = chip->dw;
 
 	dw_dma_off(dw);
-	clk_disable_unprepare(dw->clk);
+	if (dw->clk)
+		clk_disable_unprepare(dw->clk);
 }
 EXPORT_SYMBOL_GPL(dw_dma_shutdown);
 
@@ -1714,7 +1717,8 @@ int dw_dma_suspend(struct dw_dma_chip *chip)
 	struct dw_dma *dw = chip->dw;
 
 	dw_dma_off(dw);
-	clk_disable_unprepare(dw->clk);
+	if (dw->clk)
+		clk_disable_unprepare(dw->clk);
 
 	return 0;
 }
@@ -1724,7 +1728,8 @@ int dw_dma_resume(struct dw_dma_chip *chip)
 {
 	struct dw_dma *dw = chip->dw;
 
-	clk_prepare_enable(dw->clk);
+	if (dw->clk)
+		clk_prepare_enable(dw->clk);
 	dma_writel(dw, CFG, DW_CFG_DMA_EN);
 
 	return 0;
diff --git a/drivers/dma/dw/platform.c b/drivers/dma/dw/platform.c
index e35d975..9f61821 100644
--- a/drivers/dma/dw/platform.c
+++ b/drivers/dma/dw/platform.c
@@ -139,6 +139,9 @@ dw_dma_parse_dt(struct platform_device *pdev)
 	if (of_property_read_bool(np, "is_private"))
 		pdata->is_private = true;
 
+	if (of_property_read_bool(np, "no_hclk"))
+		pdata->no_hclk = true;
+
 	if (!of_property_read_u32(np, "chan_allocation_order", &tmp))
 		pdata->chan_allocation_order = (unsigned char)tmp;
 
diff --git a/include/linux/dw_dmac.h b/include/linux/dw_dmac.h
index 481ab23..0ac524b 100644
--- a/include/linux/dw_dmac.h
+++ b/include/linux/dw_dmac.h
@@ -38,6 +38,7 @@ struct dw_dma_slave {
  * @nr_channels: Number of channels supported by hardware (max 8)
  * @is_private: The device channels should be marked as private and not for
  *	by the general purpose DMA channel allocator.
+ * @no_hclk: No HCLK is required by driver for operation.
  * @chan_allocation_order: Allocate channels starting from 0 or 7
  * @chan_priority: Set channel priority increasing from 0 to 7 or 7 to 0.
  * @block_size: Maximum block size supported by the controller
@@ -50,6 +51,7 @@ struct dw_dma_slave {
 struct dw_dma_platform_data {
 	unsigned int	nr_channels;
 	bool		is_private;
+	bool		no_hclk;
 #define CHAN_ALLOCATION_ASCENDING	0	/* zero to seven */
 #define CHAN_ALLOCATION_DESCENDING	1	/* seven to zero */
 	unsigned char	chan_allocation_order;
-- 
1.7.9.5

