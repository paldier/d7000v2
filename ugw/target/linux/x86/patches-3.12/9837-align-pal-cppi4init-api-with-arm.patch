# HG changeset patch
# Parent d2aa87219f24220a7543cfd061ece0fe18f98e8a
diff --git a/arch/x86/pal_cppi41/pal_cppi41.c b/arch/x86/pal_cppi41/pal_cppi41.c
--- a/arch/x86/pal_cppi41/pal_cppi41.c
+++ b/arch/x86/pal_cppi41/pal_cppi41.c
@@ -79,7 +79,8 @@
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
-#include<linux/slab.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
 #include <asm/io.h>
 #include <asm/byteorder.h>
 #include <linux/avalanche/puma7/puma7.h>
@@ -134,7 +135,8 @@
 unsigned int qMgrs_qMngBase [PAL_CPPI41_NUM_QUEUE_MGR] = { 0 };     /* queue manager's queue management base */
 unsigned int qMgrs_qStatBase[PAL_CPPI41_NUM_QUEUE_MGR] = { 0 };     /* queue manager's queue stats base */
 unsigned int qMgrs_regsBase [PAL_CPPI41_NUM_QUEUE_MGR] = { 0 };     /* queue manager's managment registers */
-
+static bool initialized = false;
+static spinlock_t init_lock;
 
 /***************************************/
 /*  enum for endianness conversion    **/
@@ -177,18 +179,25 @@ typedef enum
 /*********************************/
 /**  Functions Implementations  **/
 /*********************************/
+PAL_Handle PAL_cppi4Init (void * initCfg, Ptr param)
+{
+    unsigned long flags;
+    unsigned long qMgr1Base;
+    unsigned long qMgr2Base;
 
-PAL_Handle PAL_cppi4Init(unsigned int qMgr1Base, unsigned int qMgr2Base)
-{
+    /* currently on ATOM, only pp domain is suported */
+    BUG_ON(param != CPPI41_DOMAIN_PP);
+
+    spin_lock_irqsave(&init_lock, flags);
+
+    if (initialized)
+        goto done;
+
+    qMgr1Base = PAL_CPPI_PP_QMGR_G1_QUEUES_BASE;
+    qMgr2Base = PAL_CPPI_PP_QMGR_G2_QUEUES_BASE;
+
     DPRINTK("qMgr1Base = 0x%08x, qMgr2Base = 0x%08x", qMgr1Base, qMgr2Base);
 
-    if (!qMgr1Base || !qMgr2Base) {
-        EPRINTK("Cannot initiate with NULL addresses");
-        return NULL;
-    }
-
-
-
     qMgrs_qMngBase [PAL_CPPI_PP_QMGR_G1] = (unsigned long)(qMgr1Base);
     qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G1] = (unsigned long)(qMgr1Base) + QUEUE_MNG_TO_QUEUE_STAT_OFFSET;
     qMgrs_regsBase [PAL_CPPI_PP_QMGR_G1] = (unsigned long)(qMgr1Base) + QUEUE_MNG_TO_QMGR_REGS_OFFSET;
@@ -197,26 +206,24 @@ PAL_Handle PAL_cppi4Init(unsigned int qM
     qMgrs_regsBase [PAL_CPPI_PP_QMGR_G2] = (unsigned long)(qMgr2Base) + QUEUE_MNG_TO_QMGR_REGS_OFFSET;
 
     DPRINTK("qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G1] = 0x%08x, qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G1] = 0x%08x, qMgrs_regsBase[PAL_CPPI_PP_QMGR_G1] = 0x%08x\n",
-            qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G1], qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G1], qMgrs_regsBase [PAL_CPPI_PP_QMGR_G1]);
+	    qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G1], qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G1], qMgrs_regsBase [PAL_CPPI_PP_QMGR_G1]);
     DPRINTK("qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G2] = 0x%08x, qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G2] = 0x%08x, Mgrs_regsBase[PAL_CPPI_PP_QMGR_G2] = 0x%08x",
-            qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G2], qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G2], qMgrs_regsBase [PAL_CPPI_PP_QMGR_G2]);
+	    qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G2], qMgrs_qStatBase[PAL_CPPI_PP_QMGR_G2], qMgrs_regsBase [PAL_CPPI_PP_QMGR_G2]);
 
-    return NULL;
+    initialized = true;
+
+    /* pal handle is not used in ATOM implementation, return dummy value
+       to avoid the null checks in shared code */
+done:
+
+    spin_unlock_irqrestore(&init_lock, flags);
+
+    return 0xDEADBEEF;
 }
 EXPORT_SYMBOL(PAL_cppi4Init);
 
 int PAL_cppi4Exit(PAL_Handle hnd, void *param)
 {
-    DPRINTK(" cleanup... qMgr1Base = 0x%08x, qMgr2Base = 0x%08x",\
-    qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G1], qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G2]);
-    if( qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G1] != (unsigned int)NULL )
-    {
-        DPRINTK("unmap will be done in datapipe exit");
-    }
-    if(  qMgrs_qMngBase[PAL_CPPI_PP_QMGR_G2] != (unsigned int)NULL )
-    {
-        DPRINTK("unmap will be done in datapipe exit");
-    }
     return 0;
 }
 EXPORT_SYMBOL(PAL_cppi4Exit);
@@ -584,13 +591,14 @@ EXPORT_SYMBOL(PAL_cppi4Control);
 
 static int __init pal_cppi41_init(void)
 {
-	DPRINTK("pal_cppi41_init\n");
-	return 0;
+    spin_lock_init(&init_lock);
+    DPRINTK("pal_cppi41_init\n");
+    return 0;
 }
 
 static void __exit pal_cppi41_exit(void)
 {
-	DPRINTK("pal_cppi41_exit\n");
+    DPRINTK("pal_cppi41_exit\n");
 }
 
 module_init(pal_cppi41_init);
diff --git a/arch/x86/pp_init/puma7_pp_init.c b/arch/x86/pp_init/puma7_pp_init.c
--- a/arch/x86/pp_init/puma7_pp_init.c
+++ b/arch/x86/pp_init/puma7_pp_init.c
@@ -419,7 +419,7 @@ static int __init tx_comp_init(void)
         ret = -1;
         goto tx_comp_exit;
     }
-    palHnd = PAL_cppi4Init(PAL_CPPI_PP_QMGR_G1_QUEUES_BASE, PAL_CPPI_PP_QMGR_G2_QUEUES_BASE);
+    palHnd = PAL_cppi4Init(NULL, CPPI41_DOMAIN_PP);
     if (replace_npcpu_memory(palHnd))
     {
         pr_err("%s(%d): Error - replace_npcpu_memory failed!\n", __FUNCTION__, __LINE__);
diff --git a/include/linux/avalanche/generic/pal_cppi41.h b/include/linux/avalanche/generic/pal_cppi41.h
--- a/include/linux/avalanche/generic/pal_cppi41.h
+++ b/include/linux/avalanche/generic/pal_cppi41.h
@@ -95,6 +95,14 @@
  */
 #define PAL_CPPI_TESTS 0
 
+typedef enum cppi_domain
+{
+    CPPI41_DOMAIN_PP = 0,
+    CPPI41_DOMAIN_DSG,
+    CPPI41_DOMAIN_DOCSIS_US,
+    CPPI41_DOMAIN_NUM
+} CPPI41_DOMAIN;
+
 typedef volatile unsigned int CSL_Reg32;                    /* 32bit register */
 //#define PAL_CPPI_PP_QMGR_GLOBAL_DEFAULT_DESC_SIZE           (64)
 
@@ -498,17 +506,32 @@ typedef enum desc_type
 /**
  *  \brief PAL CPPI4.1 Initialization.
  *
- *  This function initializes the CPPI4.1 PAL layer.
- *  configure queue managers 1&2 queues base address.
+ *  This function initializes the CPPI4.1 PAL layer.  This is the first function to be
+ *  called by a module requiring CPPI4.1 support.  Multiple upper layers may call
+ *  this function, although only one actual instance will be created.  After the
+ *  first call, subsequent callers will simply be given the PAL Handle that was
+ *  allocated during the first call.
  *
- *  \param qMgr1Base [in] - queue manager 1 queues base address.
- *  \param qMgr2Base [in] - queue manager 2 queues base address.
- *  \param qMgr2BaseVirt [in] - queue manager 2 queues virtual base address.
- *  \param qMgr2BaseVirt [in] - queue manager 2 queues virtual base address.
+ *  In the typical scenerio, this API will be called once during system boot-up
+ *  and other drivers/modules can call the API will NULL parameters to retrieve
+ *  the PAL handle
  *
- *  @return 0 on success, non zero value otherwise.
+ *  The PAL handle that is returned must be used to close the PAL interface.
+ *
+ *  This function will bring the networking subsystem, out of reset, and
+ *  initialize the queue manager/buffer manager and DMA hardware.
+ *
+ *  \note: The initCfg parameter values are only valid for the first caller - i.e.
+ *  the CPPI4 PAL is initialized only once, regardless of the number of calls to
+ *  this function.
+ *
+ *  @param  initCfg      [IN]      Pointer to CPPI4 config structure, to be
+ *                                 allocated and loaded with values by the caller.
+ *  @param  param        [IN]      Not used in this implementation. For future use.
+ *
+ *  @return a valid ::PAL_Handle on success, NULL otherwise.
  */
-PAL_Handle PAL_cppi4Init(unsigned int qMgr1Base, unsigned int qMgr2Base);
+PAL_Handle PAL_cppi4Init (void * initCfg, Ptr param);
 
 /**
  *  \brief PAL CPPI4.1 de-initialization.
