diff --git a/arch/x86/NetIP_SubSystem/netip_mem_util.c b/arch/x86/NetIP_SubSystem/netip_mem_util.c
--- a/arch/x86/NetIP_SubSystem/netip_mem_util.c
+++ b/arch/x86/NetIP_SubSystem/netip_mem_util.c
@@ -107,7 +107,8 @@ static struct netip_mem_rgion_device mem
     {NETSS_DEV_TDM1, NULL, false, 0xF0120000, NULL, "NETSS_DEV_TDM1"},
     {NETSS_DEV_TIMER2, NULL, false, 0xF0130000, NULL, "NETSS_DEV_TIMER2"},
     {NETSS_DEV_TDM2, NULL, false, 0xF0180000, NULL, "NETSS_DEV_TDM2"},
-    {NETSS_DEV_VCODEC, NULL, false, 0xF00F6000, NULL, "NETSS_DEV_VCODEC"},    
+    {NETSS_DEV_VCODEC, NULL, false, 0xF00F6000, NULL, "NETSS_DEV_VCODEC"},
+    {NETSS_DEV_BOOT_RAM, NULL, false, 0xFFFF0000, NULL, "NETSS_DEV_BOOT_RAM"},
 };
 
 int netip_memmap_init(void)
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_config.c b/arch/x86/NetIP_SubSystem/netip_subsystem_config.c
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_config.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_config.c
@@ -31,7 +31,8 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 
-#define NETSS_DEV_BOOTCFG_BASE 0xF00C0000
+#define NETSS_DEV_BOOTCFG_BASE    0xF00C0000
+#define NETSS_SILICON_STEPPING         0xFFFF3FF4
 
 #define MAX_DOMAIN_REGS             (38)
 #define LOCK_REG1_OFF               (0x007c)
@@ -77,6 +78,39 @@ static struct file_operations g_proc_fil
     .release = single_release,
 };
 
+unsigned int netss_subsystem_get_silicon_step(void)
+{
+    unsigned int siliconStep;
+    unsigned int *siliconStepReg;
+
+    siliconStepReg = netip_mmio_to_virtual(NETSS_SILICON_STEPPING);
+
+    siliconStep = be32_to_cpu(*siliconStepReg);
+
+    return siliconStep;
+}
+EXPORT_SYMBOL(netss_subsystem_get_silicon_step);
+
+static int netss_subsystem_proc_read_silicon_step(struct seq_file *seq, void *v)
+{
+    seq_printf(seq, "%d\n", netss_subsystem_get_silicon_step());
+
+    return 0;
+}
+
+static int netss_subsystem_proc_open_silicon_step(struct inode *inode, struct file *file)
+{
+    return single_open(file, netss_subsystem_proc_read_silicon_step, NULL);
+}
+
+static struct file_operations g_proc_file_silicon_step_seq_fops = {
+    .owner = THIS_MODULE,
+    .open = netss_subsystem_proc_open_silicon_step,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .release = single_release,
+};
+
 void netss_bootcfg_init(void)
 {
     /* Check if bootcfg folder already exists */
@@ -92,6 +126,7 @@ void netss_bootcfg_init(void)
     }
 
     proc_create("ipsec_disable", S_IRUGO, g_netss_subsystem_proc_dir, &g_proc_file_ipsec_seq_fops);
+    proc_create("silicon_step", S_IRUGO, g_netss_subsystem_proc_dir, &g_proc_file_silicon_step_seq_fops);
 }
 
 void netss_enable_snooped_mode(void)
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -332,7 +332,12 @@ int netss_device_get_info(netss_dev_t su
          mmio->base = net_ip_mmios.region1_base + NETSS_DEV_VCODEC_MMIO_OFFSET;
          mmio->size = NETSS_DEV_VCODEC_MMIO_SIZE;
          ret = 0;
-      break;      
+      break;
+      case NETSS_DEV_BOOT_RAM:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_BOOT_RAM_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_BOOT_RAM_MMIO_SIZE;
+         ret = 0;
+      break;
       default:
          ret = -1;
    }
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -96,6 +96,8 @@
 #define NETSS_DEV_VCODEC_MMIO_OFFSET  (0xF6000)
 #define NETSS_DEV_VCODEC_MMIO_SIZE    (0x150)
 
+#define NETSS_DEV_BOOT_RAM_MMIO_OFFSET  (0xFFF0000)
+#define NETSS_DEV_BOOT_RAM_MMIO_SIZE    (0x4000)
 
 #define NETSS_DEV_CLK_CTRL_MMIO_OFFSET (0xD0000)
 #define NETSS_DEV_CLK_CTRL_MMIO_SIZE (0x10000)
@@ -134,6 +136,7 @@ typedef enum {
    NETSS_DEV_TIMER2,
    NETSS_DEV_TDM2,
    NETSS_DEV_VCODEC,
+   NETSS_DEV_BOOT_RAM,
    NETSS_DEV_MAX
 }netss_dev_t;
 
@@ -187,6 +190,7 @@ void netss_interrupt_enable(netss_interr
 void netss_interrupt_disable(netss_interrupt_t intrpt);
 void netss_interrupt_ack(netss_interrupt_t intrpt);
 int netss_request_npcpu_irq(int irq_num, char* irq_name, netss_subdevice_irq_func func, void *args);
+unsigned int netss_subsystem_get_silicon_step(void);
 
 #endif
 
