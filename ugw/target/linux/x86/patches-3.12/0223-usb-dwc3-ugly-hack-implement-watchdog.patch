From 068b1dea9de087f2fc74602f440f09b3ef26c1b0 Mon Sep 17 00:00:00 2001
From: David A Cohen <david.a.cohen@intel.com>
Date: Thu, 9 Oct 2014 19:18:19 -0700
Subject: [PATCH] usb: dwc3: ugly hack: implement watchdog

We have an stability issue going on with dwc3 driver. We don't know the exact
cause yet, but we isolated the problem. It happens because either the
controller or phy is getting stuck just after we receive USB RESET event:
instead of the connection start right away, we don't see any usb activity. The
only solution so far is to do a soft reset.

This watchdog is enabled as soon as we receive the USB RESET event. If no
connecting comes in 1 second, the watchdog power cycles the controller.

Change-Id: I5da255e978e21c64dd05aaad2eb79cf9f87d7e38
Signed-off-by: David A Cohen <david.a.cohen@intel.com>
Signed-off-by: Fei Yang <fei.yang@intel.com>
Signed-off-by: Eric Ernst <eric.ernst@intel.com>
(cherry picked from commit b82e231ba72e92ed9d37189905ce6438d93b43b0)

Signed-off-by: Brett T. Warden <brett.t.warden@intel.com>
---
 drivers/usb/dwc3/core.c   |   14 ++++++++++--
 drivers/usb/dwc3/core.h   |    3 +++
 drivers/usb/dwc3/ep0.c    |    8 +++++--
 drivers/usb/dwc3/gadget.c |   56 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/usb/dwc3/gadget.h |    2 ++
 5 files changed, 79 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 9d51724..8a418b7 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -878,8 +878,13 @@ static int dwc3_suspend_common(struct device *dev)
 	struct dwc3	*dwc = dev_get_drvdata(dev);
 	unsigned long	flags;
 
-	if (atomic_inc_return(&dwc->suspend_depth) > 1)
+	if (atomic_inc_return(&dwc->suspend_depth) > 1) {
+		dev_info(dev, "%s: skipping suspend. suspend_depth = %d\n",
+			 __func__, atomic_read(&dwc->suspend_depth));
 		return 0;
+	}
+
+	dev_info(dev, "%s\n", __func__);
 
 	spin_lock_irqsave(&dwc->lock, flags);
 
@@ -914,8 +919,13 @@ static int dwc3_resume_common(struct device *dev)
 	struct dwc3	*dwc = dev_get_drvdata(dev);
 	unsigned long	flags;
 
-	if (atomic_dec_return(&dwc->suspend_depth) > 0)
+	if (atomic_dec_return(&dwc->suspend_depth) > 0) {
+		dev_info(dev, "%s: skipping resume. suspend_depth = %d\n",
+			 __func__, atomic_read(&dwc->suspend_depth));
 		return 0;
+	}
+
+	dev_info(dev, "%s\n", __func__);
 
 	usb_phy_init(dwc->usb3_phy);
 	usb_phy_init(dwc->usb2_phy);
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index 466ae4b..e1cb885 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -26,6 +26,7 @@
 #include <linux/dma-mapping.h>
 #include <linux/mm.h>
 #include <linux/debugfs.h>
+#include <linux/workqueue.h>
 
 #include <linux/usb/ch9.h>
 #include <linux/usb/gadget.h>
@@ -734,6 +735,8 @@ struct dwc3 {
 	bool			runtime_suspend;
 	struct notifier_block	nb;
 	atomic_t		suspend_depth;
+
+	struct delayed_work	watchdog;
 };
 
 /* -------------------------------------------------------------------------- */
diff --git a/drivers/usb/dwc3/ep0.c b/drivers/usb/dwc3/ep0.c
index cf7399c..09c9442 100644
--- a/drivers/usb/dwc3/ep0.c
+++ b/drivers/usb/dwc3/ep0.c
@@ -554,9 +554,11 @@ static int dwc3_ep0_set_config(struct dwc3 *dwc, struct usb_ctrlrequest *ctrl)
 			 * USB_GADGET_DELAYED_STATUS, we will wait
 			 * to change the state on the next usb_ep_queue()
 			 */
-			if (ret == 0)
+			if (ret == 0) {
+				dwc3_gadget_pet_dog(dwc);
 				usb_gadget_set_state(&dwc->gadget,
 						USB_STATE_CONFIGURED);
+			}
 
 			/*
 			 * Enable transition to U1/U2 state when
@@ -573,9 +575,11 @@ static int dwc3_ep0_set_config(struct dwc3 *dwc, struct usb_ctrlrequest *ctrl)
 
 	case USB_STATE_CONFIGURED:
 		ret = dwc3_ep0_delegate_req(dwc, ctrl);
-		if (!cfg && !ret)
+		if (!cfg && !ret) {
+			dwc3_gadget_pet_dog(dwc);
 			usb_gadget_set_state(&dwc->gadget,
 					USB_STATE_ADDRESS);
+		}
 		break;
 	default:
 		ret = -EINVAL;
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index ea983c2..1e7f6be 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -26,6 +26,7 @@
 #include <linux/io.h>
 #include <linux/list.h>
 #include <linux/dma-mapping.h>
+#include <linux/workqueue.h>
 
 #include <linux/usb/ch9.h>
 #include <linux/usb/gadget.h>
@@ -1286,6 +1287,42 @@ static const struct usb_ep_ops dwc3_gadget_ep_ops = {
 
 /* -------------------------------------------------------------------------- */
 
+static void dwc3_gadget_watchdog(struct work_struct *work)
+{
+	struct delayed_work *dwork = to_delayed_work(work);
+	struct dwc3 *dwc = container_of(dwork, struct dwc3, watchdog);
+	int ret;
+
+	dev_info(dwc->dev, "%s: controller in bad state. reset via watchdog.\n",
+		__func__);
+
+	ret = pm_runtime_put_sync(dwc->dev);
+	if (ret)
+		dev_err(dwc->dev, "%s: sw watchdog failed to suspend controller: err = %d\n",
+			__func__, ret);
+
+	ret = pm_runtime_get(dwc->dev);
+	if (ret < 0)
+		dev_err(dwc->dev, "%s: sw watchdog failed to restart controller: err = %d\n",
+			__func__, ret);
+	else if (ret)
+		dev_info(dwc->dev, "%s: controller was already enabled\n", __func__);
+}
+
+void dwc3_gadget_pet_dog(struct dwc3 *dwc)
+{
+	if (cancel_delayed_work(&dwc->watchdog))
+		dev_info(dwc->dev, "%s: dog going to sleep\n", __func__);
+}
+
+static void dwc3_gadget_kick_dog(struct dwc3 *dwc)
+{
+	if (schedule_delayed_work(&dwc->watchdog, msecs_to_jiffies(1000)))
+		dev_info(dwc->dev, "%s: the dog has been awakened\n", __func__);
+	else
+		dev_info(dwc->dev, "%s: the dog was already awake\n", __func__);
+}
+
 static int dwc3_gadget_get_frame(struct usb_gadget *g)
 {
 	struct dwc3		*dwc = gadget_to_dwc(g);
@@ -2225,6 +2262,22 @@ static void dwc3_gadget_reset_interrupt(struct dwc3 *dwc)
 	reg = dwc3_readl(dwc->regs, DWC3_DCFG);
 	reg &= ~(DWC3_DCFG_DEVADDR_MASK);
 	dwc3_writel(dwc->regs, DWC3_DCFG, reg);
+
+	/*
+	 * HACK: When coming from USB RESET EVENT from host, TUSB121x phy may
+	 * become unstable and hang. The current way to know when we reach this
+	 * hw issue is by raising a time out if it takes too long to receive
+	 * first ep0 interrupt afterwards.
+	 *
+	 * In order to do that, we start a sw watchdog from here. It will be
+	 * disabled after usb gadget enters into configured state. If it times
+	 * out, we'll soft reset the OTG controller, which makes usb phy stable
+	 * again.
+	 *
+	 * In case TUSB121x phy is not used, this watchdog will create no harm
+	 * since we're not expecting it to be ever triggered.
+	 */
+	dwc3_gadget_kick_dog(dwc);
 }
 
 static void dwc3_update_ram_clk_sel(struct dwc3 *dwc, u32 speed)
@@ -2613,6 +2666,7 @@ static irqreturn_t dwc3_interrupt(int irq, void *_dwc)
 	return ret;
 }
 
+
 /**
  * dwc3_gadget_init - Initializes gadget related registers
  * @dwc: pointer to our controller context structure
@@ -2676,6 +2730,8 @@ int dwc3_gadget_init(struct dwc3 *dwc)
 		goto err4;
 	}
 
+	INIT_DELAYED_WORK(&dwc->watchdog, dwc3_gadget_watchdog);
+
 	return 0;
 
 err4:
diff --git a/drivers/usb/dwc3/gadget.h b/drivers/usb/dwc3/gadget.h
index febe1aa..c7d3249 100644
--- a/drivers/usb/dwc3/gadget.h
+++ b/drivers/usb/dwc3/gadget.h
@@ -99,6 +99,8 @@ int dwc3_send_gadget_ep_cmd(struct dwc3 *dwc, unsigned ep,
 		unsigned cmd, struct dwc3_gadget_ep_cmd_params *params);
 int dwc3_send_gadget_generic_command(struct dwc3 *dwc, int cmd, u32 param);
 
+void dwc3_gadget_pet_dog(struct dwc3 *dwc);
+
 /**
  * dwc3_gadget_ep_get_transfer_index - Gets transfer index from HW
  * @dwc: DesignWare USB3 Pointer
-- 
1.7.9.5

