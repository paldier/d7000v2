From a73fc5dd4b61092643b295065b0ed60a616c55be Mon Sep 17 00:00:00 2001
From: "Brett T. Warden" <brett.t.warden@intel.com>
Date: Fri, 22 May 2015 13:27:26 -0700
Subject: [PATCH] sdhci: Fine-tune HW Mutex to specific controller

Add specific probe function for first eMMC controller in Cougar Mountain
to set the HW Mutex support flag only for that controller.
Remove logic that applies the HW Mutex flag to all controllers when a
specific device exists.
---
 drivers/mmc/host/sdhci-pci.c |   28 +++++++++++++++++++---------
 1 file changed, 19 insertions(+), 9 deletions(-)

diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index 43672a5..a8e96ad 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -347,6 +347,19 @@ static int byt_sdio_probe_slot(struct sdhci_pci_slot *slot)
 	return 0;
 }
 
+static int cgm_emmc_probe_shared_slot(struct sdhci_pci_slot *slot)
+{
+	slot->host->mmc->caps |= MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE |
+				 MMC_CAP_HW_RESET;
+	slot->host->mmc->caps2 |= MMC_CAP2_HC_ERASE_SZ;
+	slot->hw_reset = sdhci_pci_int_hw_reset;
+#ifdef CONFIG_HW_MUTEXES
+    /* First eMMC controller is shared with NetIP subsystem */
+    slot->host->flags |= SDHCI_SUPPORT_HW_MUTEX;
+#endif
+	return 0;
+}
+
 static const struct sdhci_pci_fixes sdhci_intel_byt_emmc = {
 	.allow_runtime_pm = true,
 	.probe_slot	= byt_emmc_probe_slot,
@@ -364,6 +377,11 @@ static const struct sdhci_pci_fixes sdhci_intel_byt_sd = {
 	.own_cd_for_runtime_pm = true,
 };
 
+static const struct sdhci_pci_fixes sdhci_intel_cgm_shared_emmc = {
+	.allow_runtime_pm = true,
+	.probe_slot	= cgm_emmc_probe_shared_slot,
+};
+
 /* O2Micro extra registers */
 #define O2_SD_LOCK_WP		0xD3
 #define O2_SD_MULTI_VCC3V	0xEE
@@ -952,7 +970,7 @@ static const struct pci_device_id pci_ids[] = {
 		.device		= PCI_DEVICE_ID_INTEL_CGM_EMMC,
 		.subvendor	= PCI_ANY_ID,
 		.subdevice	= PCI_ANY_ID,
-		.driver_data	= (kernel_ulong_t)&sdhci_intel_byt_emmc,
+		.driver_data	= (kernel_ulong_t)&sdhci_intel_cgm_shared_emmc,
 	},
 
 	{
@@ -1315,9 +1333,6 @@ static struct sdhci_pci_slot *sdhci_pci_probe_slot(
 	struct sdhci_pci_slot *slot;
 	struct sdhci_host *host;
 	int ret, bar = first_bar + slotno;
-#ifdef CONFIG_HW_MUTEXES
-	struct pci_dev *tmp_dev = NULL;
-#endif
 
 	if (!(pci_resource_flags(pdev, bar) & IORESOURCE_MEM)) {
 		dev_err(&pdev->dev, "BAR %d is not iomem. Aborting.\n", bar);
@@ -1413,11 +1428,6 @@ static struct sdhci_pci_slot *sdhci_pci_probe_slot(
 #ifdef CONFIG_HW_MUTEXES
 	/* If there's a HW Mutex controller that exists, then we'll need to use a HW Mutex
 	 * to make sure and use exclusive controller access from different processors */
-	tmp_dev = pci_get_device(0x8086, HW_MUTEX_DEV_ID, NULL);
-	if (tmp_dev) {
-	  host->flags |= SDHCI_SUPPORT_HW_MUTEX;
-	  pci_dev_put(tmp_dev);
-	}
 
 	//Lock the HW Mutex (Gain Control)
 	LOCK_EMMC_HW_MUTEX(host->mmc);
-- 
1.7.9.5

