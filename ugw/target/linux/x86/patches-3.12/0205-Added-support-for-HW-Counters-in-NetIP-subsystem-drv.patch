From a75fe36a42fa008f8ad568ae7243a6f4d48d364f Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Tue, 13 Oct 2015 17:04:11 -0700
Subject: [PATCH] Added support for HW Counters in NetIP subsystem drvier.

---
 arch/x86/NetIP_SubSystem/netip_subsystem_lld.c  |   96 +++++++++++++++--------
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c |    6 +-
 include/linux/netip_subsystem.h                 |   50 +++++++-----
 3 files changed, 97 insertions(+), 55 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
index 9d63df6..ccde131 100755
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -70,13 +70,13 @@ void netss_stop_handshake_thread(void);
 struct net_subsystem_drv_data *pnetss_drv_data;
 extern netss_sysfs_attributes_info_t g_netss_sysfs_attributes_info;
 
-void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, netss_subdev_irq_info_t *irq_info)
+void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, netss_subdev_irq_info_t *irq_info)
 {
    spin_lock(&pnetss_drv_data->irq_lock);
-   if(subdevice != NETSS_ARM11) 
+   if(intrpt != NETSS_ARM11_INTRPT) 
    {
-        pnetss_drv_data->irqs[subdevice].func = irq_info->func;
-        pnetss_drv_data->irqs[subdevice].args = irq_info->args;
+        pnetss_drv_data->irqs[intrpt].func = irq_info->func;
+        pnetss_drv_data->irqs[intrpt].args = irq_info->args;
     }
     else
     {   
@@ -85,14 +85,14 @@ void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, n
     }
     if(irq_info->func != NULL)
     {
-        if(subdevice != NETSS_ARM11)
+        if(intrpt != NETSS_ARM11_INTRPT)
         {
-            if(pnetss_drv_data->pending_interrupts & (1<<subdevice))
+            if(pnetss_drv_data->pending_interrupts & (1<<intrpt))
             {
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
-                netss_ack_irq(subdevice);
-                pnetss_drv_data->pending_interrupts &= ~(1<<subdevice);
-                printk("Cleared pending interrupt for device %d IIR %08x pending %08x\n", subdevice, 
+                netss_ack_irq(intrpt);
+                pnetss_drv_data->pending_interrupts &= ~(1<<intrpt);
+                printk("Cleared pending interrupt for device %d IIR %08x pending %08x\n", intrpt, 
                             __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET), 
                                                                pnetss_drv_data->pending_interrupts);
              }
@@ -104,9 +104,9 @@ void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, n
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
                 /*Clear interrupt in bridge only if it is present 
                  *For ARM11 interrupt bundle this might hvae got cleared by some other irq handle */
-                if( __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET) & (1<<subdevice))
+                if( __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET) & (1<<intrpt))
                 {
-                    netss_ack_irq(subdevice);   
+                    netss_ack_irq(intrpt);   
                 }
 
                 pnetss_drv_data->pending_arm11_interrupts &= ~(1<<arm11_int_id);
@@ -115,7 +115,7 @@ void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, n
                                                             pnetss_drv_data->pending_arm11_interrupts);
             }
         }
-        netss_enable_irq(subdevice);
+        netss_enable_irq(intrpt);
     }
     spin_unlock(&pnetss_drv_data->irq_lock);
 }
@@ -148,16 +148,32 @@ int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_
           mmio->size = NETSS_SUBDEV_HWMBX_MMIO_SIZE;
           ret = 0;
       break;
-      case NETSS_PP_DPIPROXY:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_DPIPROXY_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_DPIPROXY_MMIO_SIZE;
+      case NETSS_PACKET_PROCESSOR1:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_PP1_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_PP1_MMIO_SIZE;
          ret = 0;
       break; 
-      case NETSS_PP_HOSTPROXY:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HOSTPROXY_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_HOSTPROXY_MMIO_SIZE;
+      case NETSS_PACKET_PROCESSOR2:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_PP2_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_PP2_MMIO_SIZE;
          ret = 0;
       break;
+      case NETSS_ATOM_INTC:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_ATOM_INTC_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_ATOM_INTC_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_HW_COUNTERS:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HW_COUNTERS_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_HW_COUNTERS_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_MOCA:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_MOCA_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_MOCA_MMIO_SIZE;
+         ret = 0;
+      break;
+
       case NETSS_GBE:
          mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_GBE_MMIO_OFFSET;
          mmio->size = NETSS_SUBDEV_GBE_MMIO_SIZE;
@@ -171,33 +187,48 @@ int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_
 
 EXPORT_SYMBOL(netss_get_subdevice_mmio_info);
 
-void netss_enable_irq(netss_subdevices_t subdevice)
+void netss_enable_irq(netss_interrupt_id_t intrpt)
 {
    uint32_t reg_val;
+   if(intrpt > NETSS_INTRPT_MAX) 
+   {
+      printk("Invalid NetIP interrupt %d\n", intrpt);
+      return;
+   }
    reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-   if(!(reg_val & (1 << subdevice))) {
-      __raw_writel((reg_val | (1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-      printk(KERN_INFO "Enabling Net IP subdevice %d interrupts reg %x\n", subdevice, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
+   if(!(reg_val & (1 << intrpt))) {
+      __raw_writel((reg_val | (1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+      printk(KERN_INFO "Enabling Net IP subdevice %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
    } 
 }
 EXPORT_SYMBOL(netss_enable_irq);
 
-void netss_disable_irq(netss_subdevices_t subdevice)
+void netss_disable_irq(netss_interrupt_id_t intrpt)
 {
    uint32_t reg_val;
+   if(intrpt > NETSS_INTRPT_MAX) 
+   {
+      printk("Invalid NetIP interrupt %d\n", intrpt);
+      return;
+   }
    reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-   if(reg_val & (1 << subdevice)) {
-      __raw_writel((reg_val & ~(1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-      printk(KERN_INFO "Disabling Net IP subdevice %d interrupts reg %x\n", subdevice, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
+   if(reg_val & (1 << intrpt)) {
+      __raw_writel((reg_val & ~(1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+      printk(KERN_INFO "Disabling Net IP interrupt id %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
    } 
 }
 EXPORT_SYMBOL(netss_disable_irq);
 
-void netss_ack_irq(netss_subdevices_t subdevice)
+void netss_ack_irq(netss_interrupt_id_t intrpt)
 {
    uint32_t reg_val;
+   if(intrpt > NETSS_INTRPT_MAX) 
+   {
+      printk("Invalid NetIP interrupt %d\n", intrpt);
+      return;
+   }
    reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
-   __raw_writel((reg_val & (1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
+   __raw_writel((reg_val & (1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
 }
 EXPORT_SYMBOL(netss_ack_irq);
 
@@ -217,10 +248,12 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
     reg_val = __raw_readl(pnet_ss->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
 
     NETSS_DBG_PRINT("Net IP ISR called\n");
-    for(i=0; i<NETSS_SUBDEVICE_MAX; i++)
+    /**Check for interrupts 0 to 7, 8th bit indicates GBE interrupt
+     * which is handled by GBE driver. */
+    for(i=0; i<(NETSS_INTRPT_MAX-1); i++)
     {
         if((reg_val >> i) & 1)  {
-            if(i != NETSS_ARM11) {
+            if(i != NETSS_ARM11_INTRPT) {
                 if(pnet_ss->irqs[i].func != NULL) {
                     NETSS_DBG_PRINT("Interrupt of subdevice %d\n", i);
                     pnet_ss->irqs[i].func(irq, pnet_ss->irqs[i].args);
@@ -239,7 +272,8 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
                         if(pnet_ss->arm11_irqs[j].func != NULL) 
                         {
                             pnet_ss->arm11_irqs[j].func(irq, pnet_ss->arm11_irqs[j].args);
-                            ack_intr |= (1 << i);
+                            /*Arm11 bottom half will clear the NetIP bridge interrupt */
+                            //ack_intr |= (1 << i);
                         }
                         else
                         {
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
index b1731ef..ea0372c 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -638,7 +638,7 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 			DWC_ETH_QOS_handle_eee_interrupt(pdata);
 		}
 	}
-	netss_ack_irq(NETSS_GBE);
+	netss_ack_irq(NETSS_GBE_INTRPT);
 	DBGPR("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
 
 	return IRQ_HANDLED;
@@ -1464,7 +1464,7 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 		ret = -EBUSY;
 		goto err_irq_0;
 	}
-	netss_enable_irq(NETSS_GBE);
+	netss_enable_irq(NETSS_GBE_INTRPT);
 
 	ret = desc_if->alloc_buff_and_desc(pdata);
 	if (ret < 0) {
@@ -1556,7 +1556,7 @@ static int DWC_ETH_QOS_close(struct net_device *dev)
 	struct desc_if_struct *desc_if = &pdata->desc_if;
 
 	DBGPR("-->DWC_ETH_QOS_close\n");
-	netss_disable_irq(NETSS_GBE);
+	netss_disable_irq(NETSS_GBE_INTRPT);
 #ifdef GBE_POLLING
 	hrtimer_cancel(&pdata->gbe_timer);
 #endif
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
index 3453821..6cb6746 100755
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -43,16 +43,14 @@
 #define NETSS_SUBDEV_HWMUTEX_MMIO_SIZE (0x10000)
 #define NETSS_SUBDEV_HWMBX_MMIO_OFFSET (0x1A0000)
 #define NETSS_SUBDEV_HWMBX_MMIO_SIZE (0x20000)
-#define NETSS_SUBDEV_WIFIPROXY1_MMIO_OFFSET (0)
-#define NETSS_SUBDEV_WIFIPROXY1_MMIO_SIZE (0)
-#define NETSS_SUBDEV_WIFIPROXY2_MMIO_OFFSET (0)
-#define NETSS_SUBDEV_WIFIPROXY2_MMIO_SIZE (0)
-#define NETSS_SUBDEV_DPIPROXY_MMIO_OFFSET (0x3000000)
-#define NETSS_SUBDEV_DPIPROXY_MMIO_SIZE (0x1000000)
-#define NETSS_SUBDEV_HOSTPROXY_MMIO_OFFSET (0x9000000)
-#define NETSS_SUBDEV_HOSTPROXY_MMIO_SIZE (0x1000000)
-#define NETSS_SUBDEV_ARM11_MMIO_OFFSET (0x1A0000)
-#define NETSS_SUBDEV_ARM11_MMIO_SIZE (0x20000)
+#define NETSS_SUBDEV_PP1_MMIO_OFFSET (0x3000000)
+#define NETSS_SUBDEV_PP1_MMIO_SIZE (0x1000000)
+#define NETSS_SUBDEV_PP2_MMIO_OFFSET (0x9000000)
+#define NETSS_SUBDEV_PP2_MMIO_SIZE (0x1000000)
+#define NETSS_SUBDEV_ATOM_INTC_MMIO_OFFSET (0xE0000)
+#define NETSS_SUBDEV_ATOM_INTC_MMIO_SIZE (0x10000)
+#define NETSS_SUBDEV_HW_COUNTERS_MMIO_OFFSET (0x150000)
+#define NETSS_SUBDEV_HW_COUNTERS_MMIO_SIZE (0x10000)
 #define NETSS_SUBDEV_MOCA_MMIO_OFFSET (0xE800000)
 #define NETSS_SUBDEV_MOCA_MMIO_SIZE (0x800000)
 #define NETSS_SUBDEV_GBE_MMIO_OFFSET (0x318000)
@@ -63,17 +61,27 @@
 typedef enum {
    NETSS_HW_MAILBOX = 0,
    NETSS_HW_MUTEX,
-   NETSS_PP_WIFIPROXY1,
-   NETSS_PP_WIFIPROXY2,
-   NETSS_PP_DPIPROXY,
-   NETSS_PP_HOSTPROXY,
-   NETSS_ARM11,
+   NETSS_PACKET_PROCESSOR1,
+   NETSS_PACKET_PROCESSOR2,
+   NETSS_ATOM_INTC,
+   NETSS_HW_COUNTERS,
    NETSS_MOCA,
+   NETSS_GBE,
    NETSS_SUBDEVICE_MAX
 }netss_subdevices_t;
 
-/* GMAC5 is BIT8 in SAP registers */
-#define NETSS_GBE ( 8 )
+typedef enum {
+   NETSS_HWMBOX_INTRPT = 0,
+   NETSS_HWMUTEX_INTRPT,
+   NETSS_PP_WIFIPROXY1_INTRPT,
+   NETSS_PP_WIFIPROXY2_INTRPT,
+   NETSS_PP_DPIPROXY_INTRPT,
+   NETSS_PP_HOSTPROXY_INTRPT,
+   NETSS_ARM11_INTRPT,
+   NETSS_MOCA_INTRPT,
+   NETSS_GBE_INTRPT,
+   NETSS_INTRPT_MAX
+}netss_interrupt_id_t;
 
 typedef irqreturn_t (* netss_subdevice_irq_func)(int irqnum, void *);
 
@@ -88,12 +96,12 @@ typedef struct netss_subdevice_mmio {
 }netss_subdevice_mmio_t;
 
 
-void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, netss_subdev_irq_info_t *irq_info);
+void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, netss_subdev_irq_info_t *irq_info);
 bool netss_driver_ready(void);
 int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_mmio_t *mmio);
-void netss_enable_irq(netss_subdevices_t subdevice);
-void netss_disable_irq(netss_subdevices_t subdevice);
-void netss_ack_irq(netss_subdevices_t subdevice);
+void netss_enable_irq(netss_interrupt_id_t intrpt);
+void netss_disable_irq(netss_interrupt_id_t intrpt);
+void netss_ack_irq(netss_interrupt_id_t intrpt);
 
 #endif
 
-- 
1.7.9.5

