# HG changeset patch
# Parent a7361edf44d16e4ec734e9577205daadf9545e13
--- a/include/linux/avalanche/generic/avalanche_pdsp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pdsp_api.h
@@ -63,15 +63,12 @@
 #ifndef _AVALANCHE_PDSP_H
 #define _AVALANCHE_PDSP_H
 
-////////////////////////////////////////////////////// 
-
 #ifdef CONFIG_ARM_AVALANCHE_SOC
 #include <asm-arm/arch-avalanche/generic/_tistdtypes.h>
 #else
 #include <linux/avalanche/puma7/puma7_defs.h>
 #include <linux/avalanche/generic/_tistdtypes.h>
 #endif
-
 #include <linux/ioctl.h>
 
 #ifndef __KERNEL__
@@ -83,7 +80,7 @@
 #if defined(CONFIG_MACH_PUMA7_FPGA_PP) || defined (CONFIG_MACH_PUMA7_BOARD)
     //#define FPGA_SANITY_UNITEST     0
 #endif
-#elif defined(PUMA6_SOC_TYPE)
+#elif defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
     #define AVALANCHE_PDSP_H_PUMA6
 #else
     #undef  AVALANCHE_PDSP_H_PUMA6
--- a/include/linux/avalanche/generic/avalanche_pp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pp_api.h
@@ -29,7 +29,6 @@
 
 #ifndef     _AVALANCHE_PP_H
 #define     _AVALANCHE_PP_H
-
 #ifndef CONFIG_ARM_AVALANCHE_SOC
 #include <linux/avalanche/generic/_tistdtypes.h>
 #else
@@ -41,8 +40,7 @@
 #ifndef CONFIG_ARM_AVALANCHE_SOC
 #include <linux/avalanche/puma7/puma7_defs.h>
 #endif
-
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 #include <asm-arm/arch-avalanche/puma6/puma6_cppi_prv.h>
 #endif
 
@@ -56,7 +54,7 @@
 
 #else
 #include <puma_autoconf.h>
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 #include <puma6_cppi_prv.h>
 #endif
 #ifdef PUMA7_SOC_TYPE
@@ -73,7 +71,7 @@
 
 
 /* These are the maximum number of PID,VPID & Sessions that are supported.*/
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 #define AVALANCHE_PP_MAX_PID                            32
 #define AVALANCHE_PP_MAX_VPID                           32
 #define AVALANCHE_PP_MAX_ACCELERATED_SESSIONS           2048
@@ -280,7 +278,7 @@ AVALANCHE_PP_PID_RANGE_t;
 /*                                                                      */
 /*                                                                      */
 /* ******************************************************************** */
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 #define AVALANCHE_PP_QOS_CLST_MAX_INDX          31
 #define AVALANCHE_PP_QOS_QUEUE_MAX_INDX         (PAL_CPPI41_SR_QPDSP_QOS_Q_LAST - PAL_CPPI41_SR_QPDSP_QOS_Q_BASE)
 #endif
@@ -300,10 +298,10 @@ typedef struct // former TI_PP_QOS_QUEUE
     Uint8               flags;                  /* Control how packets in the queue should be handled. Available options: AVALANCHE_PP_QOS_Q_REALTIME - Disable scaling of the credit. */
     Uint16              egr_q;                  /* Queue manager and queue index of forwarding queue */
 
-    Uint32              it_credit_bytes;        /* The amount of forwarding byte ?credit? that the queue receives every 25us. */
-    Uint16              it_credit_packets;      /* The amount of forwarding packets ?credit? that the queue receives every 25us. */
-    Uint32              max_credit_bytes;       /* The maximum amount of forwarding byte ?credit? that the queue is allowed to hold at the end of the 25us iteration. */
-    Uint16              max_credit_packets;     /* The maximum amount of forwarding byte ?credit? that the queue is allowed to hold at the end of the 25us iteration. */
+    Uint32              it_credit_bytes;        /* The amount of forwarding byte “credit” that the queue receives every 25us. */
+    Uint16              it_credit_packets;      /* The amount of forwarding packets “credit” that the queue receives every 25us. */
+    Uint32              max_credit_bytes;       /* The maximum amount of forwarding byte “credit” that the queue is allowed to hold at the end of the 25us iteration. */
+    Uint16              max_credit_packets;     /* The maximum amount of forwarding byte “credit” that the queue is allowed to hold at the end of the 25us iteration. */
     Uint32              congst_thrsh_bytes;     /* The size in bytes at which point the QOS queue is considered to be congested. */
     Uint16              congst_thrsh_packets;   /* The maximum number of packets to be kept in QOS queue */
 }
@@ -439,7 +437,7 @@ typedef struct // former TI_PP_VPID
      * or AVALANCHE_PP_VLAN_PPPoE */
     Uint16                          vlan_identifier;
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
     /* These are the QoS related settings */
     AVALANCHE_PP_QOS_CLST_CFG_t *   qos_cluster[ MAX_ALLOWED_QOS_CLUSTERS_PER_DEVICE ];
     unsigned char                   qos_clusters_count;
@@ -506,7 +504,7 @@ typedef struct // former TI_PP_VPID_STAT
 /*                                                                      */
 /*                                                                      */
 /* ******************************************************************** */
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 typedef enum
 {
     AVALANCHE_PP_LUT_ENTRY_L2_ETHERNET,
@@ -712,18 +710,17 @@ __Avalanche_PP_LUTs_Data_t;
 
 /* Define for EtherType 0xFFFF - special MoCA packets */
 #define ETH_P_CTP_MOCA          (0xFFFF)
-/* Enum for MoCA Classification mode */
+
+/* Enum for Classification mode */
 typedef enum
 {
     CLASSIFICATION_MODE_IPV4_IPV6_L4   = 0,   // Accelerate packets with ip v4/6 and tcp/udp (L4 is mandatory)
     CLASSIFICATION_MODE_IPV4_IPV6      = 1,   // Accelerate packets with ip v4/6 (L4 is optional)
     CLASSIFICATION_MODE_MOCA_IRREG     = 2    // Accelerate packets with ip v4/6/ and L3=ffff for MoCA only (L4 is optional)
 }PP_CLASSIFICATION_MODE_e;
-//#ifdef CONFIG_SYSTEM_MOCA2_0
-//#define MOCA_CLASSIFICATION_MODE_DEFAULT MOCA_CLASSIFICATION_MODE_RESTRICTIVE
-//#else
+
 #define CLASSIFICATION_MODE_DEFAULT CLASSIFICATION_MODE_IPV4_IPV6
-//#endif
+
 
 typedef enum
 {
@@ -833,7 +830,7 @@ typedef struct // former TI_PP_SESSION_P
 #endif
     Uint16                              reserved1;
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
     Bool                                isTunnel;
 #endif
 
@@ -1069,7 +1066,7 @@ typedef struct // former TI_PP_SESSION
      * successful creation of the session. */
     Uint32                  session_handle;
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
     /* Session Timeout indicates the number of micro-seconds of inactivity
      * after which the PP generates an event to the host. The field if set
      * to 0 indicates that the session needs to be configured permanently
@@ -1577,7 +1574,7 @@ extern AVALANCHE_PP_RET_e   avalanche_pp
 extern AVALANCHE_PP_RET_e   avalanche_pp_event_handler_unregister   ( Uint32    handle_event_handler );
 extern AVALANCHE_PP_RET_e   avalanche_pp_event_report( AVALANCHE_PP_EVENT_e  event, Uint32 param1, Uint32 param2 );
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 /* QoS API. */
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_cluster_setup      ( Uint8     clst_indx,  AVALANCHE_PP_QOS_CLST_CFG_t*    clst_cfg );
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_cluster_enable     ( Uint8     clst_indx );
@@ -1615,7 +1612,7 @@ typedef struct
     Uint32                              lut2_starvation;
     Uint32                              tdox_starvation;
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
     Uint32                              lut1_histogram[AVALANCHE_PP_LUT_HISTOGRAM_SIZE];
     Uint32                              lut1_starvation;
     Uint32                              active_lut1_keys;
@@ -1659,7 +1656,7 @@ typedef     Uint8     avalanche_pp_psm_i
 typedef     Uint32    avalanche_pp_frag_mode_ioctl_param_t;
 typedef     Uint8     avalanche_pp_mtaMacAddr_ioctl_param_t[6];
 
-#ifdef PUMA6_SOC_TYPE
+#if defined(PUMA6_SOC_TYPE) && PUMA6_SOC_TYPE
 typedef     struct
 {
 
