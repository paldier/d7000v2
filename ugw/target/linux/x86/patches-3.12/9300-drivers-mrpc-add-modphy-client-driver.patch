# HG changeset patch
# Parent 94c6a593e827bfed99478473398fb973c3583e9a

--- a/drivers/mrpc/Kconfig
+++ b/drivers/mrpc/Kconfig
@@ -26,3 +26,9 @@ config MRPC_SERVER_EXAMPLE
     help
        RPC over HW mailbox example server
 
+config MRPC_MODPHY_CLIENT
+    tristate "modphy mrpc client"
+    depends on MRPC
+    default n
+    help
+       modphy mrpc client
--- a/drivers/mrpc/Makefile
+++ b/drivers/mrpc/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_MRPC)		+= core/
 obj-$(CONFIG_MRPC_EXAMPLES)	+= examples/
+obj-$(CONFIG_MRPC_MODPHY_CLIENT) += modphy_client.o
--- /dev/null
+++ b/drivers/mrpc/modphy_client.c
@@ -0,0 +1,307 @@
+/*
+ *
+ * modphy_client.c
+ * Description:
+ * modphy mrpc client driver
+ *
+ *
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2016 Intel Corporation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *  Intel Corporation
+ *  2200 Mission College Blvd.
+ *  Santa Clara, CA  97052
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ":%s:%d " fmt "\n", __func__, __LINE__
+
+/************************************************/
+/**                    Includes                 */
+/************************************************/
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/err.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mrpc.h>
+#include <linux/avalanche/generic/modphy_mrpc_api.h>
+
+#ifdef DEBUG
+#define DBG(fmt, ...) pr_err(fmt, ##__VA_ARGS__)
+#else
+#define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
+#endif
+
+/* driver private database */
+struct modphy_private {
+    struct platform_device *pdev;   /* platform device */
+    struct mrpc_client *mrpc;       /* mrpc client handle */
+};
+
+static struct modphy_private *this;
+
+struct modphy_args {
+    unsigned int client;
+    unsigned int lane;
+};
+
+enum {
+    MODPHY_INIT_PROC = 0,
+    MODPHY_LANE_CONFIGURE_PROC,
+    MODPHY_TX_DISABLE_PROC,
+    MODPHY_RESET_K_ALIGN_PROC,
+    MODPHY_RESET_CLIENT_PROC,
+};
+
+static inline int modphy_mrpc_call(__u8 procid,
+                                   ModphyLanes_e lane,
+                                   ModphyController_e modphyClientId)
+{
+    struct modphy_private *priv = this;
+    struct modphy_args args;
+    int ret, errcode;
+
+    if (!priv) {
+        pr_err("ERROR: mrpc modphy not initialized");
+        return MODPHY_FAIL;
+    }
+
+    args.client = htonl(modphyClientId);
+    args.lane = htonl(lane);
+
+    ret = mrpc_call(priv->mrpc, procid, &args, sizeof(struct modphy_args), NULL, 0, 0, &errcode);
+
+    if (ret || errcode) {
+        pr_err("ERROR: ret=%d, errcode=%d", ret, errcode);
+        return MODPHY_FAIL;
+    }
+
+    return MODPHY_OK;
+}
+
+/*********************************************************************************************************/
+/*! \fn int modphy_init(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function inits the modphy for a specific client.
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_init(ModphyController_e modphyClientId)
+{
+    return modphy_mrpc_call(MODPHY_INIT_PROC, -1, modphyClientId);
+}
+EXPORT_SYMBOL(modphy_init);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_configure(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function configure the modphy for a specific client.
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_lane_configure(ModphyLanes_e lane,
+                          ModphyController_e modphyClientId)
+{
+    return modphy_mrpc_call(MODPHY_LANE_CONFIGURE_PROC, lane, modphyClientId);
+}
+EXPORT_SYMBOL(modphy_lane_configure);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_tx_disable(ModphyLanes_e lane, ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function disable TX lanes
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_tx_disable(ModphyLanes_e lane,
+                      ModphyController_e modphyClientId)
+{
+    return modphy_mrpc_call(MODPHY_TX_DISABLE_PROC, lane, modphyClientId);
+}
+EXPORT_SYMBOL(modphy_tx_disable);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_reset_k_align(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function reset K alignment in modphy
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_reset_k_align(ModphyController_e modphyClientId)
+{
+    return modphy_mrpc_call(MODPHY_RESET_K_ALIGN_PROC, -1, modphyClientId);
+}
+EXPORT_SYMBOL(modphy_reset_k_align);
+
+/*********************************************************************************************************/
+/*! \fn void modphy_reset_client(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function resets ModPhy client. Used for ext.switches WA. Can be scheduled out.
+ *  \param[in] modphyClientId : Client ID
+ *  \return void
+ ********************************************************************************************************/
+void modphy_reset_client(ModphyController_e modphyClientId)
+{
+    modphy_mrpc_call(MODPHY_RESET_CLIENT_PROC, -1, modphyClientId);
+}
+EXPORT_SYMBOL(modphy_reset_client);
+
+/* sysfs for future use */
+static ssize_t status_show(struct device *dev,
+                           struct device_attribute *attr, char *buf)
+{
+    struct modphy_private *priv = dev_get_drvdata(dev);
+
+    if (!priv)
+        return -EINVAL;
+
+    return scnprintf(buf, PAGE_SIZE, "status ok");
+}
+
+static DEVICE_ATTR(status, S_IRUGO, status_show, NULL);
+
+static struct attribute *modphy_attrs[] = {
+    &dev_attr_status.attr,
+    NULL
+};
+
+static struct attribute_group modphy_attrs_group = {
+    .attrs = modphy_attrs,
+};
+
+/**
+ * modphy_mrpc_probe
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int modphy_mrpc_probe(struct platform_device *pdev)
+{
+    struct modphy_private *priv;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv) {
+        pr_err("memory allocation failed");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+    priv->pdev = pdev;
+
+    ret = sysfs_create_group(&priv->pdev->dev.kobj, &modphy_attrs_group);
+    if (ret) {
+        pr_err("sysfs_create_group failed (ret=%d)", ret);
+        return ret;
+    }
+
+    priv->mrpc = mrpc_client_register(MRPC_RESERVED_ID_MODPHY, "modphy");
+    if (!priv->mrpc) {
+        pr_err("failed to register modphy");
+        ret = -ENODEV;
+        goto out_remove_group;
+    }
+
+    this = priv;
+    return 0;
+
+out_remove_group:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &modphy_attrs_group);
+    return 0;
+}
+
+/**
+ * modphy_mrpc_remove
+ *
+ * This function is called when the modphy mrpc driver is
+ * removed.
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int modphy_mrpc_remove(struct platform_device *pdev)
+{
+    struct modphy_private *priv = platform_get_drvdata(pdev);
+    mrpc_client_unregister(priv->mrpc);
+    sysfs_remove_group(&priv->pdev->dev.kobj, &modphy_attrs_group);
+    dev_set_drvdata(&pdev->dev, NULL);
+    this = NULL;
+
+    return 0;
+}
+
+static struct platform_driver modphy_driver = {
+    .driver = {
+        .name   = "modphy",
+    },
+    .probe = modphy_mrpc_probe,
+    .remove = modphy_mrpc_remove,
+};
+
+static struct platform_device *modphy_device;
+
+static int __init modphy_mrpc_init(void)
+{
+    int ret;
+
+    ret = platform_driver_register(&modphy_driver);
+    if (ret < 0) {
+        pr_err("Failed to register modphy platform driver: %d\n", ret);
+        return ret;
+    }
+
+    modphy_device = platform_device_register_simple("modphy", -1, NULL, 0);
+    if (IS_ERR(modphy_device)) {
+        pr_err("Failed to register modphy platform device\n");
+        platform_driver_unregister(&modphy_driver);
+        return PTR_ERR(modphy_device);
+    }
+
+    return 0;
+}
+
+static void __exit modphy_mrpc_exit(void)
+{
+    platform_device_unregister(modphy_device);
+    platform_driver_unregister(&modphy_driver);
+}
+
+/******************************************************/
+/**    Module Declarations                           **/
+/******************************************************/
+module_init(modphy_mrpc_init);
+module_exit(modphy_mrpc_exit);
+
+MODULE_AUTHOR("Intel Corporation");
+MODULE_AUTHOR("Tomer Eliyahu tomer.b.eliyahu@intel.com");
+MODULE_DESCRIPTION("modphy mrpc client");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
--- /dev/null
+++ b/include/linux/avalanche/generic/modphy_mrpc_api.h
@@ -0,0 +1,159 @@
+/*
+
+  This file is provided under a dual BSD/GPLv2 license.  When using or
+  redistributing this file, you may do so under either license.
+
+  GPL LICENSE SUMMARY
+
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of version 2 of the GNU General Public License as
+  published by the Free Software Foundation.
+
+  This program is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+  The full GNU General Public License is included in this distribution
+  in the file called LICENSE.GPL.
+
+
+  Contact Information:
+  Intel Corporation
+  2200 Mission College Blvd.
+  Santa Clara, CA  97052
+
+  BSD LICENSE
+
+  Copyright(c) 2014 Intel Corporation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions
+  are met:
+
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in
+      the documentation and/or other materials provided with the
+      distribution.
+
+    * Neither the name of Intel Corporation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+
+/*------------------------------------------------------------------------------
+* File Name: modphy_mrpc_api.h
+* Description:
+* modphy mrpc client driver api
+*------------------------------------------------------------------------------
+*/
+
+#ifndef  MODPHY_MRPC_API_H
+#define  MODPHY_MRPC_API_H
+/**************************************************************************/
+/*      INCLUDES:                                                         */
+/**************************************************************************/
+
+/**************************************************************************/
+/*      INTERFACE  DEFINES AND STRUCTS                                    */
+/**************************************************************************/
+
+#define MODPHY_OK   (0)
+#define MODPHY_FAIL (-1)
+
+typedef enum modphyController_e
+{
+    MODPHY_MOCA_CLIENT_ID,
+    MODPHY_DOCSIS_QAM_25MHZ_CLIENT_ID,
+	MODPHY_DOCSIS_OFDM_25MHZ_CLIENT_ID,
+    MODPHY_SGMII0_1G_CLIENT_ID,
+	MODPHY_SGMII1_1G_CLIENT_ID,
+    MODPHY_SGMII0_2_5G_CLIENT_ID,
+    MODPHY_SGMII1_2_5G_CLIENT_ID,
+    MODPHY_MOCA_50MHZ_CLIENT_ID,
+    MODPHY_DOCSIS_QAM_50MHZ_CLIENT_ID,
+	MODPHY_DOCSIS_OFDM_50MHZ_CLIENT_ID,
+    MODPHY_NUM_OF_CLIENTS
+}ModphyController_e;
+
+typedef enum modphyLanes_e
+{
+    MODPHY_LANE_0,
+    MODPHY_LANE_1,
+	MODPHY_LANE_2,
+    MODPHY_MAX_NUM_OF_LANES
+}ModphyLanes_e;
+
+typedef struct modphyClient_t
+{
+    ModphyController_e clientId;
+    ModphyLanes_e      laneId;
+}ModphyClient_t;
+
+/*********************************************************************************************************/
+/*! \fn int modphy_init(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function inits the modphy for a specific client.
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_init(ModphyController_e modphyClientId);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_configure(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function configure the modphy for a specific client.
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_lane_configure(ModphyLanes_e lane, ModphyController_e modphyClientId);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_tx_disable(ModphyLanes_e lane, ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function disable TX lanes
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_tx_disable(ModphyLanes_e lane, ModphyController_e modphyClientId);
+
+/*********************************************************************************************************/
+/*! \fn int modphy_reset_k_align(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function reset K alignment in modphy
+ *  \param[in] modphyClientId : Client ID
+ *  \return MODPHY_OK if writing succeed otherwise MODPHY_FAIL
+ ********************************************************************************************************/
+int modphy_reset_k_align(ModphyController_e modphyClientId);
+
+/*********************************************************************************************************/
+/*! \fn void modphy_reset_client(ModphyController_e modphyClientId)
+ *********************************************************************************************************
+ *  \brief  This function resets ModPhy client. Used for ext.switches WA. Can be scheduled out.
+ *  \param[in] modphyClientId : Client ID
+ *  \return void
+ ********************************************************************************************************/
+void modphy_reset_client(ModphyController_e modphyClientId);
+
+#endif
--- a/include/linux/mrpc.h
+++ b/include/linux/mrpc.h
@@ -73,6 +73,7 @@ enum {
     MRPC_RESERVED_ID_PP_DEBUG,
     MRPC_RESERVED_ID_NETEVENTS,
     MRPC_RESERVED_ID_NETHOOKS,
+    MRPC_RESERVED_ID_MODPHY,
     MRPC_RESERVED_ID_LAST,
 };
 
