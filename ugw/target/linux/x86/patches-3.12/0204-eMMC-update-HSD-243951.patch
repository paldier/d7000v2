From c71b0344db7bb042326ebc7a6179a27ff3b11db7 Mon Sep 17 00:00:00 2001
From: Bryce Poole <Bryce.Poole@intel.com>
Date: Fri, 9 Oct 2015 08:34:42 -0700
Subject: [PATCH] eMMC update - HSD #243951

Update includes:
 - Added new function to switch back to the user partition
 - Refactored locking macros to be explicit about which host is used
 - Removed SW mutex protecting the data structures as the HW Mutex has a
   SW mutex that performs the same duty now.
 - Removed the ignore boot partitions flag
 - Removed debugging lines
 - Consolidated all HW Mutex support checking to the macros
---
 drivers/mmc/card/block.c      |   16 +++++++++-
 drivers/mmc/core/bus.c        |    3 --
 drivers/mmc/core/core.c       |   49 +++++++-----------------------
 drivers/mmc/host/sdhci-acpi.c |   38 +++---------------------
 drivers/mmc/host/sdhci-pci.c  |    4 +--
 drivers/mmc/host/sdhci.c      |   64 ++++-----------------------------------
 drivers/mmc/pm.h              |   42 ++++++++++++++++++++++----
 include/linux/mmc/host.h      |    1 -
 include/linux/mmc/sdhci.h     |   66 ++++++++++++++++++++++++-----------------
 9 files changed, 113 insertions(+), 170 deletions(-)

diff --git a/drivers/mmc/card/block.c b/drivers/mmc/card/block.c
index 3497970..b23a915 100644
--- a/drivers/mmc/card/block.c
+++ b/drivers/mmc/card/block.c
@@ -137,6 +137,7 @@ enum {
 module_param(perdev_minors, int, 0444);
 MODULE_PARM_DESC(perdev_minors, "Minors numbers to allocate per device");
 
+static inline int mmc_blk_part_switch_to_up(struct mmc_card *card);
 static inline int mmc_blk_part_switch(struct mmc_card *card,
 				      struct mmc_blk_data *md);
 static int get_card_status(struct mmc_card *card, u32 *status, int retries);
@@ -241,6 +242,7 @@ static ssize_t power_ro_lock_store(struct device *dev,
 	else
 		card->ext_csd.boot_ro_lock |= EXT_CSD_BOOT_WP_B_PWR_WP_EN;
 
+	mmc_blk_part_switch_to_up(card);
 	mmc_put_card(card);
 
 	if (!ret) {
@@ -608,6 +610,7 @@ static int mmc_blk_ioctl_cmd(struct block_device *bdev,
 	}
 
 cmd_rel_host:
+	mmc_blk_part_switch_to_up(card);
 	mmc_put_card(card);
 
 cmd_done:
@@ -646,6 +649,15 @@ static const struct block_device_operations mmc_bdops = {
 #endif
 };
 
+static inline int mmc_blk_part_switch_to_up(struct mmc_card *card)
+{
+	struct mmc_blk_data *main_md = mmc_get_drvdata(card);
+	// The mmc_get_drvdata function returns the main md structure which describes
+	// the user partition. Warning indicates this assumption is no longer true.
+	WARN_ON(main_md->part_type != EXT_CSD_PART_CONFIG_USER);
+	return mmc_blk_part_switch(card, main_md);
+}
+
 static inline int mmc_blk_part_switch(struct mmc_card *card,
 				      struct mmc_blk_data *md)
 {
@@ -2481,6 +2493,8 @@ static int mmc_blk_issue_rq(struct mmc_queue *mq,
 	}
 
 out:
+	mmc_blk_part_switch_to_up(card);
+
 	if (!atomic_read(&mq->active_slots))
 		/*
 		 * Release host when there are no more requests
@@ -2926,7 +2940,7 @@ static void mmc_blk_remove(struct mmc_card *card)
 	mmc_blk_remove_parts(card, md);
 	pm_runtime_get_sync(&card->dev);
 	mmc_claim_host(card->host);
-	mmc_blk_part_switch(card, md);
+	mmc_blk_part_switch_to_up(card);
 	mmc_release_host(card->host);
 	if (card->type != MMC_TYPE_SD_COMBO)
 		pm_runtime_disable(&card->dev);
diff --git a/drivers/mmc/core/bus.c b/drivers/mmc/core/bus.c
index 584d07b..9870029 100644
--- a/drivers/mmc/core/bus.c
+++ b/drivers/mmc/core/bus.c
@@ -214,19 +214,16 @@ static int mmc_runtime_idle(struct device *dev)
 #else
 static int mmc_runtime_suspend(struct device *dev)
 {
-    mDBG("Disabled PM_RUNTIME");
 	return 0;
 }
 
 static int mmc_runtime_resume(struct device *dev)
 {
-    mDBG("Disabled PM_RUNTIME");
 	return 0;
 }
 
 static int mmc_runtime_idle(struct device *dev)
 {
-    mDBG("Disabled PM_RUNTIME");
 	return 0;
 }
 
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 204b024..292151e 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -1049,10 +1049,7 @@ int __mmc_claim_host(struct mmc_host *host, atomic_t *abort)
 
 	if((host->claimer == current) && (host->claim_cnt == 1)) {
 	  spin_unlock_irqrestore(&host->lock, flags);
-      if ((host->caps2 & MMC_CAP2_DISABLE_HW_MUTEX_LOCK) == 0)
-      {
-          LOCK_EMMC_HW_MUTEX(host);
-      }
+      MMC_LOCK_HW_MUTEX(host);
 	}
 	else {
 	  spin_unlock_irqrestore(&host->lock, flags);
@@ -1093,14 +1090,8 @@ void mmc_release_host(struct mmc_host *host)
 		spin_unlock_irqrestore(&host->lock, flags);
 
 #ifdef CONFIG_HW_MUTEXES
-
-      if ((host->caps2 & MMC_CAP2_DISABLE_HW_MUTEX_LOCK) == 0)
-      {
-		UNLOCK_EMMC_HW_MUTEX(host);
-      }
-
+        MMC_UNLOCK_HW_MUTEX(host);
 #endif
-
 		wake_up(&host->wq);
 	}
 }
@@ -2649,27 +2640,17 @@ void mmc_rescan(struct work_struct *work)
 
 	mmc_claim_host(host);
 
-    if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)
+#ifdef CONFIG_HW_MUTEXES
+    if (MMC_HOST_SUPPORTS_HW_MUTEX(host))
     {
-        /*
-        printk(KERN_WARNING "DBG: %s():%d Preparing to scan %s\n", __FUNCTION__, __LINE__,
-                mmc_hostname(host));
-        printk(KERN_WARNING "DBG: %s():%d Disabling HW Mutex locking.\n", __FUNCTION__, __LINE__);
-         */
-        host->caps2 |= MMC_CAP2_DISABLE_HW_MUTEX_LOCK;
-        /*
-        printk(KERN_WARNING "DBG: %s():%d Power on- emmc before freq rescan\n", __FUNCTION__, __LINE__);
-         */
-        mmc_power_up(host, host->ocr_avail);
-        /*
-        printk(KERN_WARNING "DBG: %s():%d Done-Power on emmc before freq rescan\n", __FUNCTION__, __LINE__);
-        printk(KERN_WARNING "DBG: %s():%d Power cycling emmc before freq rescan\n", __FUNCTION__, __LINE__);
-         */
-        mmc_power_cycle(host, host->ocr_avail);
-        /*
-        printk(KERN_WARNING "DBG: %s():%d Done-Power cycling emmc before freq rescan\n", __FUNCTION__, __LINE__);
-         */
+		// We disabled register writes during initialization and the host is not
+		// currently initialized. Power up then power cycle the emmc/host to 
+		// ensure it is configured as it believes it is currently off and during
+		// the cycle, the off is ignored when it shouldn't be.
+		mmc_power_up(host, host->ocr_avail);
+		mmc_power_cycle(host, host->ocr_avail);
     }
+#endif
 
 	for (i = 0; i < ARRAY_SIZE(freqs); i++) {
 		if (!mmc_rescan_try_freq(host, max(freqs[i], host->f_min))) {
@@ -2680,14 +2661,6 @@ void mmc_rescan(struct work_struct *work)
 			break;
 	}
 
-    if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)
-    {
-        host->caps2 &= ~MMC_CAP2_DISABLE_HW_MUTEX_LOCK;
-        /*
-        printk(KERN_WARNING "DBG: %s():%d Enabling HW Mutex locking.\n", __FUNCTION__, __LINE__);
-         */
-    }
-
 	mmc_release_host(host);
 
  out:
diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index 1ab2dbf..5edbef5 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -113,47 +113,20 @@ static void sdhci_acpi_int_hw_reset(struct sdhci_host *host)
 
 void cgm_write_l(struct sdhci_host *host, u32 val, int reg)
 {
-    if (!EMMC_HW_MUTEX_IS_LOCKED(host))
-    {
-        mDBG("----------------------------------------------------");
-        mDBG("WRITE CALLED WITHOUT HW_MUTEX BEING LOCKED!!!!!!!!!!");
-        mDBG("----------------------------------------------------");
-    }
-
     if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
         writel(val, host->ioaddr + reg);
-    else
-        printk(KERN_WARNING "DBG: %s:%d Skipping write\n", __FUNCTION__, __LINE__);
 }
 
 void cgm_write_w(struct sdhci_host *host, u16 val, int reg)
 {
-    if (!EMMC_HW_MUTEX_IS_LOCKED(host))
-    {
-        mDBG("----------------------------------------------------");
-        mDBG("WRITE CALLED WITHOUT HW_MUTEX BEING LOCKED!!!!!!!!!!");
-        mDBG("----------------------------------------------------");
-    }
-
     if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
         writew(val, host->ioaddr + reg);
-    else
-        printk(KERN_WARNING "DBG: %s:%d Skipping write\n", __FUNCTION__, __LINE__);
 }
 
 void cgm_write_b(struct sdhci_host *host, u8 val, int reg)
 {
-    if (!EMMC_HW_MUTEX_IS_LOCKED(host))
-    {
-        mDBG("----------------------------------------------------");
-        mDBG("WRITE CALLED WITHOUT HW_MUTEX BEING LOCKED!!!!!!!!!!");
-        mDBG("----------------------------------------------------");
-    }
-
     if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
         writeb(val, host->ioaddr + reg);
-    else
-        printk(KERN_WARNING "DBG: %s:%d Skipping write\n", __FUNCTION__, __LINE__);
 }
 
 static const struct sdhci_ops sdhci_acpi_ops_dflt = {
@@ -168,9 +141,11 @@ static const struct sdhci_ops sdhci_acpi_ops_int = {
 static const struct sdhci_ops sdhci_acpi_ops_int_cgm = {
 	.enable_dma = sdhci_acpi_enable_dma,
 	.hw_reset   = sdhci_acpi_int_hw_reset,
+#ifdef CONFIG_HW_MUTEXES
 	.write_l = cgm_write_l,
 	.write_w = cgm_write_w,
 	.write_b = cgm_write_b,
+#endif
 };
 
 static const struct sdhci_acpi_chip sdhci_acpi_chip_int = {
@@ -277,7 +252,6 @@ static const struct sdhci_acpi_slot sdhci_acpi_slot_int_cgm_emmc = {
 		| MMC_CAP_1_8V_DDR,
 	.caps2   = MMC_CAP2_HC_ERASE_SZ | MMC_CAP2_POLL_R1B_BUSY |
 		MMC_CAP2_CACHE_CTRL | MMC_CAP2_HS200_1_8V_SDR |
-		MMC_CAP2_BOOTPART_NOACC | // Temporarily disabled to protect NetIP
 		MMC_CAP2_CAN_DO_CMDQ,
 	.flags   = SDHCI_ACPI_RUNTIME_PM,
 	.quirks2 = SDHCI_QUIRK2_TUNING_POLL | SDHCI_QUIRK2_PRESET_VALUE_BROKEN,
@@ -527,17 +501,13 @@ static int sdhci_acpi_probe(struct platform_device *pdev)
 	
 #ifdef CONFIG_HW_MUTEXES
 
-	LOCK_EMMC_HW_MUTEX(host->mmc);
+	MMC_LOCK_HW_MUTEX(host->mmc);
 
     host->flags |= SDHCI_DISABLE_REGISTER_WRITE;
-    printk(KERN_WARNING "DBG: %s():%d Disabling writes. Flags:0x%08X\n", __FUNCTION__, __LINE__, host->flags);
-
 	err = sdhci_add_host(host);
-
     host->flags &= ~SDHCI_DISABLE_REGISTER_WRITE;
-    printk(KERN_WARNING "DBG: %s():%d Clearing disable write. Flags:0x%08X\n", __FUNCTION__, __LINE__, host->flags);
 
-	UNLOCK_EMMC_HW_MUTEX(host->mmc);
+	MMC_UNLOCK_HW_MUTEX(host->mmc);
 
 #else 
 
diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index 612369e..f71e2bb 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -1431,12 +1431,12 @@ static struct sdhci_pci_slot *sdhci_pci_probe_slot(
 	 * to make sure and use exclusive controller access from different processors */
 
 	//Lock the HW Mutex (Gain Control)
-	LOCK_EMMC_HW_MUTEX(host->mmc);
+	MMC_LOCK_HW_MUTEX(host->mmc);
 
 	ret = sdhci_add_host(host);
 
 	//Unlock the HW Mutex (Release Control)
-	UNLOCK_EMMC_HW_MUTEX(host->mmc);
+	MMC_UNLOCK_HW_MUTEX(host->mmc);
 
 #else
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 91c1d41..9a13de9 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -67,21 +67,17 @@ static void sdhci_runtime_pm_bus_off(struct sdhci_host *host);
 #else
 static inline int sdhci_runtime_pm_get(struct sdhci_host *host)
 {
-    mDBG();
 	return 0;
 }
 static inline int sdhci_runtime_pm_put(struct sdhci_host *host)
 {
-    mDBG();
 	return 0;
 }
 static void sdhci_runtime_pm_bus_on(struct sdhci_host *host)
 {
-    mDBG();
 }
 static void sdhci_runtime_pm_bus_off(struct sdhci_host *host)
 {
-    mDBG();
 }
 #endif
 
@@ -134,24 +130,6 @@ static void sdhci_dumpregs(struct sdhci_host *host)
 	pr_err(DRIVER_NAME ": ===========================================\n");
 }
 
-#ifdef CONFIG_HW_MUTEXES
-/*
- * Mutex to protect enable/disable_irq calls within HW_MUTEX macros when HW
- * Mutex is not yet initialized
- */
-static DEFINE_MUTEX(mmc_access_lock);
-void lock_emmc_access(void)
-{
-  might_sleep();
-  mutex_lock(&mmc_access_lock);
-}
-
-void unlock_emmc_access(void)
-{
-  mutex_unlock(&mmc_access_lock);
-}
-#endif
-
 /*****************************************************************************\
  *                                                                           *
  * Low level functions                                                       *
@@ -162,7 +140,6 @@ static void sdhci_clear_set_irqs(struct sdhci_host *host, u32 clear, u32 set)
 {
 	u32 ier;
 
-    mDBG("clear:0x%08x set:0x%08x", clear, set);
 	ier = sdhci_readl(host, SDHCI_INT_ENABLE);
 	ier &= ~clear;
 	ier |= set;
@@ -200,13 +177,11 @@ static void sdhci_set_card_detection(struct sdhci_host *host, bool enable)
 
 static void sdhci_enable_card_detection(struct sdhci_host *host)
 {
-    mDBG();
 	sdhci_set_card_detection(host, true);
 }
 
 static void sdhci_disable_card_detection(struct sdhci_host *host)
 {
-    mDBG();
 	sdhci_set_card_detection(host, false);
 }
 
@@ -215,7 +190,6 @@ static void sdhci_reset(struct sdhci_host *host, u8 mask)
 	unsigned long timeout;
 	u32 uninitialized_var(ier);
 
-    mDBG("mask:0x%x\n", mask);
 	if (host->quirks & SDHCI_QUIRK_NO_CARD_NO_RESET) {
 		if (!(sdhci_readl(host, SDHCI_PRESENT_STATE) &
 			SDHCI_CARD_PRESENT))
@@ -268,7 +242,6 @@ static void sdhci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios);
 
 static void sdhci_init(struct sdhci_host *host, int soft)
 {
-    mDBG("soft:%d", soft);
 	if (soft)
 		sdhci_reset(host, SDHCI_RESET_CMD|SDHCI_RESET_DATA);
 	else
@@ -289,7 +262,6 @@ static void sdhci_init(struct sdhci_host *host, int soft)
 
 static void sdhci_reinit(struct sdhci_host *host)
 {
-    mDBG();
 	sdhci_init(host, 0);
 	/*
 	 * Retuning stuffs are affected by different cards inserted and only
@@ -931,13 +903,11 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 	u16 mode;
 	struct mmc_data *data = cmd->data;
 
-    mDBG();
 	if (data == NULL) {
 		/* clear Auto CMD settings for no data CMDs */
 		mode = sdhci_readw(host, SDHCI_TRANSFER_MODE);
 		sdhci_writew(host, mode & ~(SDHCI_TRNS_AUTO_CMD12 |
 				SDHCI_TRNS_AUTO_CMD23), SDHCI_TRANSFER_MODE);
-        mDBG("Clear Auto CMD: Transfer mode:0x%04x", mode);
 		return;
 	}
 
@@ -967,7 +937,6 @@ static void sdhci_set_transfer_mode(struct sdhci_host *host,
 	if (host->flags & SDHCI_REQ_USE_DMA)
 		mode |= SDHCI_TRNS_DMA;
 
-    mDBG("Normal: Transfer mode:0x%04x", mode);
 	sdhci_writew(host, mode, SDHCI_TRANSFER_MODE);
 }
 
@@ -1163,7 +1132,6 @@ static u16 sdhci_get_preset_value(struct sdhci_host *host)
 {
 	u16 ctrl, preset = 0;
 
-    mDBG();
 	ctrl = sdhci_readw(host, SDHCI_HOST_CONTROL2);
 
 	switch (ctrl & SDHCI_CTRL_UHS_MASK) {
@@ -1201,7 +1169,6 @@ static void sdhci_set_clock(struct sdhci_host *host, unsigned int clock)
 	u16 clk = 0;
 	unsigned long timeout;
 
-    mDBG();
 	if (clock && clock == host->clock)
 		return;
 
@@ -1315,7 +1282,6 @@ static inline void sdhci_update_clock(struct sdhci_host *host)
 {
 	unsigned int clock;
 
-    mDBG();
 	clock = host->clock;
 	host->clock = 0;
 	sdhci_set_clock(host, clock);
@@ -1325,7 +1291,6 @@ static int sdhci_set_power(struct sdhci_host *host, unsigned short power)
 {
 	u8 pwr = 0;
 
-    mDBG();
 	if (power != (unsigned short)-1) {
 		switch (1 << power) {
 		case MMC_VDD_165_195:
@@ -1400,7 +1365,6 @@ static void sdhci_request(struct mmc_host *mmc, struct mmc_request *mrq)
 	unsigned long flags;
 	u32 tuning_opcode;
 
-    mDBG();
 	host = mmc_priv(mmc);
 
 	sdhci_runtime_pm_get(host);
@@ -1534,7 +1498,6 @@ static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
 	int vdd_bit = -1;
 	u8 ctrl;
 
-    mDBG();
 	spin_lock_irqsave(&host->lock, flags);
 
 	if (host->flags & SDHCI_DEVICE_DEAD) {
@@ -1549,7 +1512,6 @@ static void sdhci_do_set_ios(struct sdhci_host *host, struct mmc_ios *ios)
 	 * Should clear out any weird states.
 	 */
 	if (ios->power_mode == MMC_POWER_OFF) {
-        mDBG("Requesting power off. Set Signal to 0.");
 		sdhci_writel(host, 0, SDHCI_SIGNAL_ENABLE);
 		sdhci_reinit(host);
 	}
@@ -1749,7 +1711,6 @@ static void sdhci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 {
 	struct sdhci_host *host = mmc_priv(mmc);
 
-    mDBG();
 	sdhci_runtime_pm_get(host);
 	sdhci_do_set_ios(host, ios);
 	sdhci_runtime_pm_put(host);
@@ -1759,7 +1720,6 @@ static int sdhci_do_get_cd(struct sdhci_host *host)
 {
 	int gpio_cd = mmc_gpio_get_cd(host->mmc);
 
-    mDBG();
 	if (host->flags & SDHCI_DEVICE_DEAD)
 		return 0;
 
@@ -1781,7 +1741,6 @@ static int sdhci_get_cd(struct mmc_host *mmc)
 	struct sdhci_host *host = mmc_priv(mmc);
 	int ret;
 
-    mDBG();
 	sdhci_runtime_pm_get(host);
 	ret = sdhci_do_get_cd(host);
 	sdhci_runtime_pm_put(host);
@@ -1793,7 +1752,6 @@ static int sdhci_check_ro(struct sdhci_host *host)
 	unsigned long flags;
 	int is_readonly;
 
-    mDBG();
 	spin_lock_irqsave(&host->lock, flags);
 
 	if (host->flags & SDHCI_DEVICE_DEAD)
@@ -1817,7 +1775,6 @@ static int sdhci_do_get_ro(struct sdhci_host *host)
 {
 	int i, ro_count;
 
-    mDBG();
 	if (!(host->quirks & SDHCI_QUIRK_UNSTABLE_RO_DETECT))
 		return sdhci_check_ro(host);
 
@@ -1836,7 +1793,6 @@ static void sdhci_hw_reset(struct mmc_host *mmc)
 {
 	struct sdhci_host *host = mmc_priv(mmc);
 
-    mDBG();
 	if (host->ops && host->ops->hw_reset)
 		host->ops->hw_reset(host);
 }
@@ -1846,7 +1802,6 @@ static int sdhci_get_ro(struct mmc_host *mmc)
 	struct sdhci_host *host = mmc_priv(mmc);
 	int ret;
 
-    mDBG();
 	sdhci_runtime_pm_get(host);
 	ret = sdhci_do_get_ro(host);
 	sdhci_runtime_pm_put(host);
@@ -1891,7 +1846,6 @@ static int sdhci_do_start_signal_voltage_switch(struct sdhci_host *host,
 	u16 ctrl;
 	int ret;
 
-    mDBG();
 	/*
 	 * Signal Voltage Switching is only applicable for Host Controllers
 	 * v3.00 and above.
@@ -1979,7 +1933,6 @@ static int sdhci_start_signal_voltage_switch(struct mmc_host *mmc,
 	struct sdhci_host *host = mmc_priv(mmc);
 	int err;
 
-    mDBG();
 	if (host->version < SDHCI_SPEC_300)
 		return 0;
 	sdhci_runtime_pm_get(host);
@@ -1993,7 +1946,6 @@ static int sdhci_card_busy(struct mmc_host *mmc)
 	struct sdhci_host *host = mmc_priv(mmc);
 	u32 present_state;
 
-    mDBG();
 	sdhci_runtime_pm_get(host);
 	/* Check whether DAT[3:0] is 0000 */
 	present_state = sdhci_readl(host, SDHCI_PRESENT_STATE);
@@ -2012,7 +1964,6 @@ static int sdhci_execute_tuning(struct mmc_host *mmc, u32 opcode)
 	bool requires_tuning_nonuhs = false;
 	unsigned long flags;
 
-    mDBG();
 	host = mmc_priv(mmc);
 
 	sdhci_runtime_pm_get(host);
@@ -2228,7 +2179,6 @@ static void sdhci_enable_preset_value(struct sdhci_host *host, bool enable)
 {
 	u16 ctrl;
 
-    mDBG();
 	/* Host Controller v3.00 defines preset value registers */
 	if (host->version < SDHCI_SPEC_300)
 		return;
@@ -2440,7 +2390,6 @@ static void sdhci_timeout_timer(unsigned long data)
 	struct sdhci_host *host;
 	unsigned long flags;
 
-    mDBG();
 	host = (struct sdhci_host*)data;
 
 	spin_lock_irqsave(&host->lock, flags);
@@ -2472,7 +2421,6 @@ static void sdhci_tuning_timer(unsigned long data)
 	struct sdhci_host *host;
 	unsigned long flags;
 
-    mDBG();
 	host = (struct sdhci_host *)data;
 
 	spin_lock_irqsave(&host->lock, flags);
@@ -2695,8 +2643,8 @@ static irqreturn_t sdhci_irq(int irq, void *dev_id)
 	 * HW Mutex
 	 */
 	
-	if (host->flags & SDHCI_SUPPORT_HW_MUTEX) {
-	  if (!EMMC_HW_MUTEX_IS_LOCKED(host->mmc)) {
+    if (MMC_HOST_SUPPORTS_HW_MUTEX(host->mmc)) {
+	  if (!EMMC_HW_MUTEX_IS_LOCKED()) {
           mDBG("HW MUTEX NOT LOCKED. IGNORING INTERRUPT.");
 	      return IRQ_NONE;
 	  }
@@ -2822,7 +2770,6 @@ void sdhci_enable_irq_wakeups(struct sdhci_host *host)
 	u8 val;
 	u8 mask = SDHCI_WAKE_ON_INSERT | SDHCI_WAKE_ON_REMOVE
 			| SDHCI_WAKE_ON_INT;
-    mDBG();
 
 	val = sdhci_readb(host, SDHCI_WAKE_UP_CONTROL);
 	val |= mask ;
@@ -2839,7 +2786,6 @@ void sdhci_disable_irq_wakeups(struct sdhci_host *host)
 	u8 mask = SDHCI_WAKE_ON_INSERT | SDHCI_WAKE_ON_REMOVE
 			| SDHCI_WAKE_ON_INT;
 
-    mDBG();
 	val = sdhci_readb(host, SDHCI_WAKE_UP_CONTROL);
 	val &= ~mask;
 	sdhci_writeb(host, val, SDHCI_WAKE_UP_CONTROL);
@@ -2848,7 +2794,6 @@ EXPORT_SYMBOL_GPL(sdhci_disable_irq_wakeups);
 
 int sdhci_suspend_host(struct sdhci_host *host)
 {
-    mDBG();
 	if (host->ops->platform_suspend)
 		host->ops->platform_suspend(host);
 
@@ -2876,7 +2821,6 @@ int sdhci_resume_host(struct sdhci_host *host)
 {
 	int ret = 0;
 
-    mDBG();
 	if (host->flags & (SDHCI_USE_SDMA | SDHCI_USE_ADMA)) {
 		if (host->ops->enable_dma)
 			host->ops->enable_dma(host);
@@ -3042,6 +2986,10 @@ struct sdhci_host *sdhci_alloc_host(struct device *dev,
 	host = mmc_priv(mmc);
 	host->mmc = mmc;
 
+#ifdef CONFIG_HW_MUTEXES
+	host->irq_enable_count = 0;
+#endif
+
 	return host;
 }
 
diff --git a/drivers/mmc/pm.h b/drivers/mmc/pm.h
index feda8b1..eea4b44 100644
--- a/drivers/mmc/pm.h
+++ b/drivers/mmc/pm.h
@@ -1,10 +1,40 @@
 #undef CONFIG_PM_RUNTIME
 
+#if 1
+#define mDBG(M, ...) {}
+#define mDBG_mmc_host(mmc_host) {}
+#define mDBG_sd_host(host) {}
+#else
+////////////////////////////////////////////////////////////////////////////////////
+// DEBUG
+#include <../host/sdhci.h>
+#include <linux/string.h>
+#include <linux/sched.h>
+extern int trace_level[];
+int get_pid_index(void);
+void setString(char *pStr, int len, int val);
 #define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
-#define mDBG(M, ...)                                                                     \
-{                                                                                        \
-    printk(KERN_WARNING "pid:%d DBG: %s()-%d:%s " M "\n",                                \
-            current->pid,  __FUNCTION__, __LINE__,                                       \
-            __FILENAME__, ##__VA_ARGS__);                                                \
+#define mDBG(M, ...)                                                           \
+{                                                                              \
+    printk(KERN_WARNING "%d-DBG: %s()-%d:%s " M "\n",                          \
+            current->pid, __FUNCTION__, __LINE__,                              \
+            __FILENAME__, ##__VA_ARGS__);                                      \
+
+#define mDBG_mmc_host(mmc_host)                                                \
+{                                                                              \
+	struct sdhci_host *sdhci_host = mmc_priv(mmc_host);                        \
+    u8 val = sdhci_readb(sdhci_host, SDHCI_SOFTWARE_RESET);                    \
+    printk(KERN_WARNING "%d-DBG: %s()-%d:%s pid:%d reset:(0x%x)\n",            \
+            current->pid, __FUNCTION__, __LINE__,                              \
+            __FILENAME__, current->pid, val);                                  \
 }
-#define mDBG(M, ...) {}
+#define mDBG_sd_host(host)                                                     \
+{                                                                              \
+    u8 val = sdhci_readb(host, SDHCI_SOFTWARE_RESET);                          \
+    printk(KERN_WARNING "%d-DBG: %s()-%d:%s pid:%d reset:(0x%x)\n",            \
+            current->pid, __FUNCTION__, __LINE__,                              \
+            __FILENAME__, current->pid, val);                                  \
+}
+///////////////////////////////////////////////////////////////////////////////
+
+#endif
diff --git a/include/linux/mmc/host.h b/include/linux/mmc/host.h
index dbfd478..1cda74f 100755
--- a/include/linux/mmc/host.h
+++ b/include/linux/mmc/host.h
@@ -293,7 +293,6 @@ struct mmc_host {
 #define MMC_CAP2_HS400		(MMC_CAP2_HS400_1_8V | \
 				 MMC_CAP2_HS400_1_2V)
 #define MMC_CAP2_CAN_DO_CMDQ	(1 << 19)
-#define MMC_CAP2_DISABLE_HW_MUTEX_LOCK (1 << 21)
 
 	mmc_pm_flag_t		pm_caps;	/* supported pm features */
 
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index 72224d2..e36c87f 100755
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -191,6 +191,11 @@ struct sdhci_host {
 
 	unsigned int		tuning_count;	/* Timer count for re-tuning */
 	unsigned int		tuning_mode;	/* Re-tuning mode supported by host */
+
+#ifdef CONFIG_HW_MUTEXES
+    unsigned int irq_enable_count; /* Count to enable recursive locking */
+#endif
+
 #define SDHCI_TUNING_MODE_1	0
 	struct timer_list	tuning_timer;	/* Timer for tuning */
 
@@ -198,33 +203,40 @@ struct sdhci_host {
 };
 
 #ifdef CONFIG_HW_MUTEXES
-void lock_emmc_access(void);
-void unlock_emmc_access(void);
-
-#define EMMC_HW_MUTEX_IS_LOCKED(host) (!netss_driver_ready() ||\
-  hw_mutex_is_locked(HW_MUTEX_EMMC))
-
-#define LOCK_EMMC_HW_MUTEX(host) do{\
-  if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
-    {\
-      if (netss_driver_ready()) \
-        hw_mutex_lock(HW_MUTEX_EMMC);\
-      lock_emmc_access();\
-      enable_irq(((struct sdhci_host *)host->private)->irq);\
-    }\
-  } while(0)
-
-#define UNLOCK_EMMC_HW_MUTEX(host) do{\
-  if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
-    {\
-      disable_irq(((struct sdhci_host *)host->private)->irq);\
-      unlock_emmc_access();\
-      if (netss_driver_ready()) \
-        hw_mutex_unlock(HW_MUTEX_EMMC);\
-    }\
-  } while(0)
-
-#define SDHCI_HOST_HAS_HW_MUTEX(host) ((host)->flags & SDHCI_SUPPORT_HW_MUTEX)
+
+#define SDHCI_HOST_SUPPORTS_HW_MUTEX(sdhci) ((sdhci)->flags & SDHCI_SUPPORT_HW_MUTEX)
+#define MMC_HOST_SUPPORTS_HW_MUTEX(mmc) SDHCI_HOST_SUPPORTS_HW_MUTEX( ((struct sdhci_host*)mmc->private))
+
+#define EMMC_HW_MUTEX_IS_LOCKED() hw_mutex_is_locked(HW_MUTEX_EMMC)
+
+#define MMC_LOCK_HW_MUTEX(mmc)                                               \
+do {                                                                         \
+  struct sdhci_host *sdhci = (struct sdhci_host*)mmc->private;               \
+  if (SDHCI_HOST_SUPPORTS_HW_MUTEX(sdhci))                                   \
+  {                                                                          \
+    hw_mutex_lock(HW_MUTEX_EMMC);                                            \
+    if (sdhci->irq_enable_count == 0)                                        \
+    {                                                                        \
+      enable_irq(sdhci->irq);                                                \
+    }                                                                        \
+    sdhci->irq_enable_count++;                                               \
+  }                                                                          \
+} while(0)
+
+#define MMC_UNLOCK_HW_MUTEX(mmc)                                             \
+do{                                                                          \
+  struct sdhci_host *sdhci = (struct sdhci_host*)mmc->private;               \
+  if (SDHCI_HOST_SUPPORTS_HW_MUTEX(sdhci))                                   \
+  {                                                                          \
+    WARN_ON(sdhci->irq_enable_count == 0);                                   \
+    if (sdhci->irq_enable_count == 1)                                        \
+    {                                                                        \
+      disable_irq(sdhci->irq);                                               \
+    }                                                                        \
+    sdhci->irq_enable_count -= (sdhci->irq_enable_count == 0) ? 0 : 1;       \
+    hw_mutex_unlock(HW_MUTEX_EMMC);                                          \
+  }                                                                          \
+} while(0)
 
 #endif /* CONFIG_HW_MUTEXES */
 
-- 
1.7.9.5

