From fe8b2b21dc2a5d0f0ed27f64672ae54e7ce5548a Mon Sep 17 00:00:00 2001
From: Larry Wu <larry.wu@intel.com>
Date: Tue, 8 Mar 2016 17:22:36 -0700
Subject: [PATCH] Title: Workaround for the issue that Punit SCI GPE enable
 bit is read only. Issue:   HSD 245787 IssueType: Defect
 Symptom:   Punit SCI GPE control method is not invoked when
 the interrupt is triggered. RootCause: Punit SCI GPE enable
 bit is read only. Resolution: 1. Alway assume the Punit SCI
 GPE enable bit is set.             2. Disable master SCI_EN
 bit before dispatching control method.             3.
 Enable master SCI_EN bit after dispatching control method.
 Approvers:  CCID-129572

---
 drivers/acpi/acpica/evgpe.c |   67 +++++++++++++++++++++++++++++++++++++------
 1 file changed, 59 insertions(+), 8 deletions(-)

diff --git a/drivers/acpi/acpica/evgpe.c b/drivers/acpi/acpica/evgpe.c
index c8a1f7d..0aa761c 100644
--- a/drivers/acpi/acpica/evgpe.c
+++ b/drivers/acpi/acpica/evgpe.c
@@ -5,7 +5,7 @@
  *****************************************************************************/
 
 /*
- * Copyright (C) 2000 - 2013, Intel Corp.
+ * Copyright (C) 2000 - 2016, Intel Corp.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,6 +47,17 @@
 #include "acnamesp.h"
 
 #define _COMPONENT          ACPI_EVENTS
+//PM1_CTRL register address
+#define PM1_CTRL_ADDRESS        0x404
+//Base GPE number for the Punit SCI interrupt event
+#define PUNIT_SCI_BASE_GPE_NUM  0x0
+//GPE number for the Punit SCI interrupt event
+#define PUNIT_SCI_GPE_NUM       0x4
+//Punit SCI bit mask for GPE0a_EN register
+#define PUNIT_SCI_BIT_MASK      0x10
+//SCI_EN bit in PM1_CNT register
+#define SCI_EN_BIT_MASK         0x1
+
 ACPI_MODULE_NAME("evgpe")
 #if (!ACPI_REDUCED_HARDWARE)	/* Entire module */
 /* Local prototypes */
@@ -411,6 +422,10 @@ u32 acpi_ev_gpe_detect(struct acpi_gpe_xrupt_info * gpe_xrupt_list)
 			status =
 			    acpi_hw_read(&enable_reg,
 					 &gpe_register_info->enable_address);
+			//Workaround for the issue that PUNIT GPE event doesn't have enable bit.
+			if(gpe_register_info->base_gpe_number == PUNIT_SCI_BASE_GPE_NUM){
+				enable_reg = enable_reg | PUNIT_SCI_BIT_MASK;
+			}
 			if (ACPI_FAILURE(status)) {
 				goto unlock_and_exit;
 			}
@@ -638,7 +653,9 @@ static void ACPI_SYSTEM_XFACE acpi_ev_asynch_enable_gpe(void *context)
 acpi_status acpi_ev_finish_gpe(struct acpi_gpe_event_info *gpe_event_info)
 {
 	acpi_status status;
-
+	u32 reg_value;
+	struct acpi_generic_address pm1_ctrl_address;
+   
 	if ((gpe_event_info->flags & ACPI_GPE_XRUPT_TYPE_MASK) ==
 	    ACPI_GPE_LEVEL_TRIGGERED) {
 		/*
@@ -656,7 +673,23 @@ acpi_status acpi_ev_finish_gpe(struct acpi_gpe_event_info *gpe_event_info)
 	 * only be physically enabled if the enable_for_run bit is set
 	 * in the event_info.
 	 */
-	(void)acpi_hw_low_set_gpe(gpe_event_info, ACPI_GPE_CONDITIONAL_ENABLE);
+
+	/*Workaround for the issue that PUNIT GPE event doesn't have enable bit. 
+	  Instead of enabling the individual punit enable bit, we enable the master 
+	  SCI_EN.*/
+	if(gpe_event_info->gpe_number == PUNIT_SCI_GPE_NUM){
+		/*Since GPE0a_Status register and PM1_CNT register are under the same 
+		  register block, we can reuse all the setting.*/
+		pm1_ctrl_address = gpe_event_info->register_info->status_address;
+		pm1_ctrl_address.address = PM1_CTRL_ADDRESS;
+		status = acpi_hw_read(&reg_value, &pm1_ctrl_address);
+		//Set SCI_EN bit in PM1_CTRL register.
+		reg_value = reg_value | SCI_EN_BIT_MASK;
+		status = acpi_hw_write(reg_value, &pm1_ctrl_address);
+	}
+	else{
+		(void)acpi_hw_low_set_gpe(gpe_event_info, ACPI_GPE_CONDITIONAL_ENABLE);
+	}
 	return (AE_OK);
 }
 
@@ -684,6 +717,8 @@ acpi_ev_gpe_dispatch(struct acpi_namespace_node *gpe_device,
 {
 	acpi_status status;
 	u32 return_value;
+	u32 reg_value;
+	struct acpi_generic_address pm1_ctrl_address;
 
 	ACPI_FUNCTION_TRACE(ev_gpe_dispatch);
 
@@ -719,11 +754,27 @@ acpi_ev_gpe_dispatch(struct acpi_namespace_node *gpe_device,
 	 * GPE and leave it disabled permanently to prevent further such
 	 * pointless events from firing.
 	 */
-	status = acpi_hw_low_set_gpe(gpe_event_info, ACPI_GPE_DISABLE);
-	if (ACPI_FAILURE(status)) {
-		ACPI_EXCEPTION((AE_INFO, status,
-				"Unable to disable GPE%02X", gpe_number));
-		return_UINT32(ACPI_INTERRUPT_NOT_HANDLED);
+
+	/*Workaround for the issue that PUNIT GPE event doesn't have enable bit. 
+	  Instead of disabling the individual punit enable bit, we disable the master 
+	  SCI_EN.*/
+	if(gpe_event_info->gpe_number == PUNIT_SCI_GPE_NUM){
+		/*Since GPE0a_Status register and PM1_CNT register are under the same 
+		  register block, we can reuse all the setting.*/
+		pm1_ctrl_address = gpe_event_info->register_info->status_address;
+		pm1_ctrl_address.address = PM1_CTRL_ADDRESS;
+		status = acpi_hw_read(&reg_value, &pm1_ctrl_address);
+		//Clear SCI_EN bit in PM1_CTRL register.
+		reg_value = reg_value & (~SCI_EN_BIT_MASK);
+		status = acpi_hw_write(reg_value, &pm1_ctrl_address);
+	}
+	else{
+		status = acpi_hw_low_set_gpe(gpe_event_info, ACPI_GPE_DISABLE);
+		if (ACPI_FAILURE(status)) {
+			ACPI_EXCEPTION((AE_INFO, status,
+					"Unable to disable GPE%02X", gpe_number));
+			return_UINT32(ACPI_INTERRUPT_NOT_HANDLED);
+		}
 	}
 
 	/*
-- 
1.7.9.5

