# HG changeset patch
# Parent c84847576bff986c2ab2735d0d77157d3bcafe11
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -463,6 +463,14 @@ config NET_SUBSYSTEM_SYSFS
         ---help---
           Exposes sysfs interface to get and set NET-IP subsystem attributes.
 
+config NET_SUBSYSTEM_SNOOPED_MODE
+    bool "Net IP controller support for HW managed cache coherency"
+        depends on NET_SUBSYSTEM
+        default n
+        ---help---
+          select this to enable net ip snooped mode - cache coherency
+          automatically managed by the net ip hw.
+
 config AVALANCHE_INTD_APPCPU
 	bool "avalance intd interrupt controller support for Intel CE2600 platform"
         depends on ARCH_GEN3
diff --git a/arch/x86/NetIP_SubSystem/Makefile b/arch/x86/NetIP_SubSystem/Makefile
--- a/arch/x86/NetIP_SubSystem/Makefile
+++ b/arch/x86/NetIP_SubSystem/Makefile
@@ -22,4 +22,5 @@ netip_subsystem-objs += netip_subsystem_
 netip_subsystem-objs += netip_subsystem_pm.o
 netip_subsystem-objs += avalanche_intc.o
 netip_subsystem-objs += netip_mem_util.o
+netip_subsystem-objs += netip_subsystem_config.o
 obj-$(CONFIG_NET_SUBSYSTEM_SYSFS) += netip_subsystem_sysfs.o
diff --git a/arch/x86/NetIP_SubSystem/netip_mem_util.c b/arch/x86/NetIP_SubSystem/netip_mem_util.c
--- a/arch/x86/NetIP_SubSystem/netip_mem_util.c
+++ b/arch/x86/NetIP_SubSystem/netip_mem_util.c
@@ -66,6 +66,7 @@
 #include <asm/cacheflush.h>
 #include <linux/netip_mem_util.h>
 #include <linux/netip_subsystem.h>
+#include "netip_subsystem_config.h"
 
 /*************************************************************************/
 /*      Define                                                          */
@@ -109,7 +110,6 @@ static struct netip_mem_rgion_device mem
     {NETSS_DEV_VCODEC, NULL, false, 0xF00F6000, NULL, "NETSS_DEV_VCODEC"},    
 };
 
-
 int netip_memmap_init(void)
 {
     int i, ret = 0;
@@ -150,6 +150,10 @@ int netip_memmap_init(void)
         return -2;
     }
 
+#ifdef CONFIG_NET_SUBSYSTEM_SNOOPED_MODE
+    netss_enable_snooped_mode();
+#endif
+
     return ret;
 }
 EXPORT_SYMBOL(netip_memmap_init);
@@ -181,6 +185,12 @@ void *netip_mmio_to_virtual(unsigned lon
     unsigned long offset = 0;
     int i;
 
+    if( (netip_phys_addr >= NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE) && (netip_phys_addr < (NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + NPCPU_DESCRIPTOR_PHYSICAL_MEM_SIZE))) {
+        offset = (netip_phys_addr - NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE);
+        pr_debug(" netip_phys_addr=%p virt_addr=%p offset=%x\n", netip_phys_addr, (NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE + offset), offset);
+        return (void *)(NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE + offset);
+    }
+
     for (i=0; i < ARRAY_SIZE(mem_util_dev); i++) {
 
         if (!mem_util_dev[i].ioremapped)
@@ -197,13 +207,6 @@ void *netip_mmio_to_virtual(unsigned lon
         return (mem_util_dev[i].virtual_base_address + offset);
     }
 
-    if( (netip_phys_addr >= NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE) && (netip_phys_addr < (NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + NPCPU_DESCRIPTOR_PHYSICAL_MEM_SIZE))) {
-        offset = (netip_phys_addr - NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE);
-        pr_debug(" netip_phys_addr=%p virt_addr=%p offset=%x\n", netip_phys_addr, (NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE + offset), offset);
-        return (void *)(NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE + offset);
-    }
-
-
     pr_debug("%s:%d: No region found for 0x%p, return as Kernel map instead\n", __func__, __LINE__, netip_phys_addr);
     return phys_to_virt(netip_phys_addr);
 }
@@ -214,6 +217,12 @@ void *netip_mmio_to_physical(void* virt_
     unsigned long offset = 0;
     int i;
 
+    if( (virt_addr >= NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE) && (virt_addr < ((unsigned long)NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE + (unsigned long)NPCPU_DESCRIPTOR_PHYSICAL_MEM_SIZE))) {
+        offset = (virt_addr - NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE);
+        pr_debug("virt_addr=%p phys_addr=%p offset=%x\n",virt_addr,(NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + offset),offset);
+        return (void*)(NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + offset);
+    }
+
     for (i=0; i < ARRAY_SIZE(mem_util_dev); i++) {
 
         if (!mem_util_dev[i].ioremapped)
@@ -230,13 +239,6 @@ void *netip_mmio_to_physical(void* virt_
         return (mem_util_dev[i].arm_start_address + offset);
     }
 
-    if( (virt_addr >= NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE) && (virt_addr < ((unsigned long)NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE +
-                                                                          (unsigned long)NPCPU_DESCRIPTOR_PHYSICAL_MEM_SIZE))) {
-        offset = (virt_addr - NPCPU_DESCRIPTOR_VIRTUAL_MEM_BASE);
-        pr_debug("virt_addr=%p phys_addr=%p offset=%x\n",virt_addr,(NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + offset),offset);
-        return (void*)(NPCPU_DESCRIPTOR_PHYSICAL_MEM_BASE + offset);
-    }
-
     pr_debug("%s:%d: No region found for 0x%p, return as Kernel map instead\n", __func__, __LINE__, virt_addr);
     return virt_to_phys(virt_addr);
 }
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_config.c b/arch/x86/NetIP_SubSystem/netip_subsystem_config.c
new file mode 100644
--- /dev/null
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_config.c
@@ -0,0 +1,72 @@
+/*
+ * netip_subsystem_config.c
+ *
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2015-2016 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+#include <linux/netip_subsystem.h>
+#include <linux/netip_mem_util.h>
+
+#define NETSS_DEV_BOOTCFG_BASE 0xF00C0000
+
+#define MAX_DOMAIN_REGS     (38)
+#define LOCK_REG1_OFF       (0x007c)
+#define LOCK_REG2_OFF       (0x0080)
+#define DOMAIN_BASE_REG_OFF (0x028c)
+#define ENABLE_SNOOPED_MODE (0x0000a000)
+#define UNLOCK1_VALUE       (0x20406080)
+#define UNLOCK2_VALUE       (0x10305070)
+#define LOCK1_VALUE         (0x0204060f)
+
+static bool snooped_en = false;
+
+void netss_enable_snooped_mode(void)
+{
+    int i;
+    unsigned long *lock1;
+    unsigned long *lock2;
+    unsigned long *domain_base;
+
+    if (snooped_en)
+        return;
+
+    lock1 = netip_mmio_to_virtual(NETSS_DEV_BOOTCFG_BASE + LOCK_REG1_OFF);
+    lock2 = netip_mmio_to_virtual(NETSS_DEV_BOOTCFG_BASE + LOCK_REG2_OFF);
+    domain_base = netip_mmio_to_virtual(NETSS_DEV_BOOTCFG_BASE + DOMAIN_BASE_REG_OFF);
+
+    *lock1 = cpu_to_be32(UNLOCK1_VALUE);
+    *lock2 = cpu_to_be32(UNLOCK2_VALUE);
+
+    for (i=0; i < MAX_DOMAIN_REGS; i++) {
+        *domain_base = cpu_to_be32(ENABLE_SNOOPED_MODE);
+        domain_base++;
+    }
+
+    *lock1 = cpu_to_be32(LOCK1_VALUE);
+
+    snooped_en = true;
+    pr_info("netip snooped mode enabled!\n");
+}
+
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_config.h b/arch/x86/NetIP_SubSystem/netip_subsystem_config.h
new file mode 100644
--- /dev/null
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_config.h
@@ -0,0 +1,34 @@
+/*
+ * netip_subsystem_config.h
+ *
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2015-2016 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+#ifndef _NETIP_SUBSYSTEM_CONFIG_H
+#define _NETIP_SUBSYSTEM_CONFIG_H
+
+void netss_enable_snooped_mode(void);
+
+#endif
diff --git a/include/linux/avalanche/generic/pal_cppi41.h b/include/linux/avalanche/generic/pal_cppi41.h
--- a/include/linux/avalanche/generic/pal_cppi41.h
+++ b/include/linux/avalanche/generic/pal_cppi41.h
@@ -497,11 +497,20 @@ typedef enum desc_type
 #define PAL_CPPI4_PHYS_2_VIRT(addr)                        (netip_mmio_to_virtual(addr))  /* X86 implementation here */
 /* convert DDR virtual address to DDR physical address */
 #define PAL_CPPI4_VIRT_2_PHYS(addr)                        (netip_mmio_to_physical(addr))  /* X86 implementation here */
-/* force writing to HW */
-#define PAL_CPPI4_CACHE_WRITEBACK(addr, size)          clflush_cache_range(addr, size)     /* X86 cache writeback implementation here */
-/* force reading from HW and not from cache */
-#define PAL_CPPI4_CACHE_WRITEBACK_INVALIDATE(addr, size)  clflush_cache_range(addr, size)   /* X86 cache invalidate implementation here */
-#define PAL_CPPI4_CACHE_INVALIDATE(addr, size)  clflush_cache_range(addr, size)   /* X86 cache invalidate implementation here */
+
+#ifdef CONFIG_NET_SUBSYSTEM_SNOOPED_MODE
+
+#define PAL_CPPI4_CACHE_WRITEBACK(addr, size)			do {} while(0);
+#define PAL_CPPI4_CACHE_WRITEBACK_INVALIDATE(addr, size)	do {} while(0);
+#define PAL_CPPI4_CACHE_INVALIDATE(addr, size)			do {} while(0);
+
+#else
+
+#define PAL_CPPI4_CACHE_WRITEBACK(addr, size)			clflush_cache_range(addr, size)
+#define PAL_CPPI4_CACHE_WRITEBACK_INVALIDATE(addr, size)	clflush_cache_range(addr, size)
+#define PAL_CPPI4_CACHE_INVALIDATE(addr, size)			clflush_cache_range(addr, size)
+
+#endif
 
 /**
  *  \brief PAL CPPI4.1 Initialization.
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -73,7 +73,7 @@
 #define NETSS_DEV_CLK_MMIO_SIZE (0x10000)
 
 #define NETSS_DEV_BOOTCFG_MMIO_OFFSET (0xC0000)
-#define NETSS_DEV_BOOTCFG_MMIO_SIZE   (0x100)
+#define NETSS_DEV_BOOTCFG_MMIO_SIZE   (0x10000)
 
 #define NETSS_DEV_TDM_MMIO_OFFSET     (0x100000)
 #define NETSS_DEV_TDM_MMIO_SIZE       (0x100)
