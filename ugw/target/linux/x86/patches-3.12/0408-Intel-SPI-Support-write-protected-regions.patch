From 3273bcd66bbfaf3fc6c237cf5bd57a1843e2c874 Mon Sep 17 00:00:00 2001
From: "Martinez, Ricardo" <ricardo.martinez@intel.com>
Date: Tue, 3 May 2016 10:57:51 -0700
Subject: [PATCH] Intel-SPI: Support write protected regions

BIOS will lock BIOS and Platform Data SPI partitions using PR0 and
PR1 registers from the SPI controller so the SPI driver has to
disable this protection temporarly before writing.
---
 drivers/mtd/spi-nor/intel-spi.c |   87 +++++++++++++++++++++++++++++++++++----
 1 file changed, 79 insertions(+), 8 deletions(-)
 mode change 100644 => 100755 drivers/mtd/spi-nor/intel-spi.c

diff --git a/drivers/mtd/spi-nor/intel-spi.c b/drivers/mtd/spi-nor/intel-spi.c
old mode 100644
new mode 100755
index 900ffed..35cab35
--- a/drivers/mtd/spi-nor/intel-spi.c
+++ b/drivers/mtd/spi-nor/intel-spi.c
@@ -1,7 +1,7 @@
 /*
  * Intel PCH/PCU SPI flash driver.
  *
- * Copyright (C) 2015, Intel Corporation
+ * Copyright (C) 2015-2016, Intel Corporation
  * Author: Mika Westerberg <mika.westerberg@linux.intel.com>
  *
  * This program is free software; you can redistribute it and/or modify
@@ -63,6 +63,8 @@
 #define PR_LIMIT_MASK		(0x3fff << PR_LIMIT_SHIFT)
 #define PR_READ_ENABLE		BIT(15)
 #define PR_BASE_MASK		0x3fff
+#define PR_ADDR_SHIFT		12
+#define PR_NUMBER		5
 
 /* Offsets are from @ispi->sregs */
 #define SSFSTS_CTL		0x00
@@ -109,6 +111,14 @@ struct intel_spi {
 	u8 preopcodes[2];
 };
 
+struct protected_region {
+	u32 base;
+	u32 limit;
+	u32 reg;
+};
+
+static struct protected_region pr[PR_NUMBER];
+
 static const char *intel_spi_partition_names[] = {
 	"Descriptor",
 	"BIOS",
@@ -249,6 +259,44 @@ static int intel_spi_wait_busy(struct intel_spi *ispi)
 	return timeout <= 0 ? -ETIMEDOUT : 0;
 }
 
+/*
+ * Disables write protection of the region that contains 'offset'.
+ * No action is performed if 'offset' is not contained in any protected region.
+ */
+static inline void intel_spi_unprotect(u32 offset)
+{
+	u32 val;
+	int i;
+
+	for (i = 0; i < PR_NUMBER; i++) {
+		if (offset>= pr[i].base && offset<= pr[i].limit) {
+			val = readl(pr[i].reg);
+			val &= (u32)~PR_WRITE_ENABLE;
+			writel(val, pr[i].reg);
+			break;
+		}
+	}
+}
+
+/*
+ * Enables write protection of the region that contains 'offset'.
+ * No action is performed if 'offset' is not contained in any protected region.
+ */
+static inline void intel_spi_protect(u32 offset)
+{
+	u32 val;
+	int i;
+
+	for (i = 0; i < PR_NUMBER; i++) {
+		if (offset>= pr[i].base && offset<= pr[i].limit) {
+			val = readl(pr[i].reg);
+			val |= (u32)PR_WRITE_ENABLE;
+			writel(val, pr[i].reg);
+			break;
+		}
+	}
+}
+
 static int intel_spi_init(struct intel_spi *ispi)
 {
 	u32 opmenu0, opmenu1, val;
@@ -303,6 +351,23 @@ static int intel_spi_init(struct intel_spi *ispi)
 	ispi->preopcodes[0] = val;
 	ispi->preopcodes[1] = val >> 8;
 
+
+	/* Detect if there is any write protected region. */
+	for (i = 0; i < PR_NUMBER; i++) {
+
+		val = readl(ispi->base + PR(i));
+		if (val & PR_WRITE_ENABLE) {
+			pr[i].limit = ((val & PR_LIMIT_MASK) >> (PR_LIMIT_SHIFT-PR_ADDR_SHIFT))|0xFFF;
+			pr[i].base = (val & PR_BASE_MASK)<<PR_ADDR_SHIFT;
+			pr[i].reg = ispi->base + PR(i);
+		} else {
+			/* Invalidate this entry */
+			pr[i].limit = 0;
+			pr[i].base = (u32)~0;
+		}
+
+	}
+
 	dump_regs(ispi);
 
 	return 0;
@@ -495,6 +560,8 @@ static void intel_spi_write(struct spi_nor *nor, loff_t to, size_t len,
 	u32 val, status;
 	int ret;
 
+	intel_spi_unprotect(to);
+
 	while (len > 0) {
 		block_size = min_t(size_t, len, 64);
 
@@ -540,14 +607,17 @@ static void intel_spi_write(struct spi_nor *nor, loff_t to, size_t len,
 		*retlen += block_size;
 		write_buf += block_size;
 	}
+	intel_spi_protect(to);
 }
 
 static int intel_spi_erase(struct spi_nor *nor, loff_t offs)
 {
 	struct intel_spi *ispi = nor->priv;
-	u32 val, status;
+	u32 val, status=0;
 	int ret;
 
+	intel_spi_unprotect(offs);
+
 	writel(offs, ispi->base + FADDR);
 
 	val = readl(ispi->base + HSFSTS_CTL);
@@ -559,16 +629,17 @@ static int intel_spi_erase(struct spi_nor *nor, loff_t offs)
 	writel(val, ispi->base + HSFSTS_CTL);
 
 	ret = intel_spi_wait_busy(ispi);
-	if (ret)
-		return ret;
+	if (0 == ret)
+		status = readl(ispi->base + HSFSTS_CTL);
 
-	status = readl(ispi->base + HSFSTS_CTL);
 	if (status & HSFSTS_CTL_FCERR)
-		return -EIO;
+		ret = -EIO;
 	else if (status & HSFSTS_CTL_AEL)
-		return -EACCES;
+		ret = -EACCES;
 
-	return 0;
+	intel_spi_protect(offs);
+
+	return ret;
 }
 
 static int intel_spi_fill_partitions(const struct intel_spi *ispi,
-- 
1.7.9.5

