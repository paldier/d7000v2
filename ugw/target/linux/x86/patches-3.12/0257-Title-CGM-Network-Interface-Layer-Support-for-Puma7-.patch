From 6e89bca047994d0d1bddb9c2a9a46617532fac4e Mon Sep 17 00:00:00 2001
From: chandrap <prakash1.chandra@intel.com>
Date: Thu, 17 Dec 2015 13:41:52 -0700
Subject: [PATCH] Title: CGM: Network Interface Layer Support for Puma7
 (Parent ECR) HSD#1363471 Issue:  HSD:1363471 IssueType: 
 Feature Symptom: Incorporated Review comments. RootCause:
 Incorporated Review comments. Resolution: Incorporated
 Review comments. Impact: Packet Ptrocessor related
 funtionality for datapipe. Review ID:
 https://fm-codecollab.intel.com/ui#review:id=112226

---
 arch/x86/NetIP_SubSystem/avalanche_intc.c |   42 +++++++++--------------------
 1 file changed, 12 insertions(+), 30 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/avalanche_intc.c b/arch/x86/NetIP_SubSystem/avalanche_intc.c
index f50efb2..0d521c9 100755
--- a/arch/x86/NetIP_SubSystem/avalanche_intc.c
+++ b/arch/x86/NetIP_SubSystem/avalanche_intc.c
@@ -108,21 +108,14 @@
 /**  Globals  **/
 /***************/
 
-/* AVALANCHE_INTC_BASE  IOPHYTOVIRT(0xF00E0000) */
-void*  AVALANCHE_INTC_BASE = NULL;  
+/* Avalance Intc registers */
 struct avalanche_ictrl_regs  *avalanche_hw0_icregs;
+/* NetIp PCI bridge sub devices structure */
 extern net_ip_mmios_t net_ip_mmios;
 
 /****************************************************************************
  * Interrupt Mapping APIs
  ****************************************************************************/
-/* Channel Map Registers */
-static int avalanche_intc_map_system_int_to_channel( unsigned int sys_irq,
-        unsigned int channel_num);
-/* Host  Interrupt  Map Registers */
-static int avalanche_intc_map_channel_to_host_int( unsigned int channel_num,
-        unsigned int host_irq);
-
 /*****************************************************************************
  * Utility Functions
  ****************************************************************************/
@@ -152,19 +145,6 @@ int avalanche_intc_clear_status( unsigned int irq )
     return(1);
 }
 
-/* Channel Map Registers */
-static int avalanche_intc_map_system_int_to_channel( unsigned int sys_irq,
-        unsigned int channel_num )
-{
-    unsigned int chnl_reg_indx = sys_irq/NUM_SYS_INTS_PER_REG;
-    /* There is one register per 4 system Interrupts, so get the proper
-     * register base for the given interrupt.
-     */
-    avalanche_hw0_icregs->icchnlmpr[chnl_reg_indx] |=
-        (channel_num << ((sys_irq % NUM_SYS_INTS_PER_REG) * 8));
-    return(0);
-}
-
 /* Host  Interrupt  Map Registers */
 static int avalanche_intc_map_channel_to_host_int( unsigned int channel_num,
         unsigned int host_irq )
@@ -216,28 +196,26 @@ int avalanche_intc_init(void)
 
     unsigned int cntrl_ver, chnl_num;
     /* ioremap ATM_INTC IO memory */
-    AVALANCHE_INTC_BASE = ioremap_nocache( (net_ip_mmios.region1_base + (ATOM_INTC_BASE & 0x0FFFFFFF)), sizeof(struct avalanche_ictrl_regs));
-    if(!AVALANCHE_INTC_BASE)
+    /*setting up ATOM_INTC base address */
+    avalanche_hw0_icregs = (struct avalanche_ictrl_regs *)ioremap_nocache( (net_ip_mmios.region1_base + (ATOM_INTC_BASE & 0x0FFFFFFF)), sizeof(struct avalanche_ictrl_regs));
+    if(!avalanche_hw0_icregs)
     {
         EPRINTK(" ATOM_INTC_BASE memory map fail : %x\n",ATOM_INTC_BASE );
         return -1;
     }
-    /*setting up ATOM_INTC base address */
-    avalanche_hw0_icregs =   (struct avalanche_ictrl_regs *)AVALANCHE_INTC_BASE;
 
     /* read ATOM_INTC revision register */
     /**ARM11 big endian to CPU  read register and call the corresponding value */
     cntrl_ver = be32_to_cpu(avalanche_hw0_icregs->icrevr);
     DPRINTK("ATOM_INTC Interrupt controller revision : %x\n", cntrl_ver);
     /* As VIC is disabled, All the channel will map to to either nFIQ or nIRQ.
-     * ARM11 have only one IRQ line,so map all the channels to this single host
-     * ARM11 IRQ line.
      */
+
     for( chnl_num = 0; chnl_num < (NUM_HOST_INT_MAP_REGS * NUM_CHANNELS_PER_REG); chnl_num++ )
     {
         avalanche_intc_map_channel_to_host_int(chnl_num, HOST_ARM_IRQ_NUM);
     }
-    /* enable host interrupts */
+    /* enable host interrupts 0x3 will enable HOST IRQ */
     avalanche_hw0_icregs->ichinter[0] = cpu_to_be32(0x3);
     /* set global enable */
     avalanche_hw0_icregs->icglber = cpu_to_be32(INTC_SET_BIT_0);
@@ -249,7 +227,11 @@ int avalanche_intc_init(void)
 }
 void avalanche_intc_cleanup(void)
 {
-    iounmap(AVALANCHE_INTC_BASE);
+    if(avalanche_hw0_icregs != NULL)
+    {
+        iounmap(avalanche_hw0_icregs);
+        avalanche_hw0_icregs = NULL;
+    }
 }
 EXPORT_SYMBOL(avalanche_intc_get_status);
 EXPORT_SYMBOL(avalanche_intc_clear_status);
-- 
1.7.9.5

