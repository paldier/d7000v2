# HG changeset patch
# Parent a1c78db80ae2644171fc3f66fdc17fe73d1255e3

diff --git a/net/bridge/ltq_br_mcast_snooping.c b/net/bridge/ltq_br_mcast_snooping.c
--- a/net/bridge/ltq_br_mcast_snooping.c
+++ b/net/bridge/ltq_br_mcast_snooping.c
@@ -433,13 +433,27 @@ update_mg_client_count(struct net_bridge
 			if (entry->gaddr.type == IPV4) {
 				/* TODO: This is not proper way to delete session from PP but as of now to avoid adding new API in hil, I am using Hil MultiCast delete session API.
 					ti_hil_pp_event API is only matching gaddr, So I am setting that only */
+		#if 0
 				struct mfc_cache mc;
 				memset(&mc, 0, sizeof(mc));
 				mc.mfc_mcastgrp = gaddr->addr.ip4.s_addr;
 				printk(KERN_INFO "Deleting MC session from PP, mc.mfc_mcastgrp: 0x%X\n", mc.mfc_mcastgrp);
 				ti_hil_pp_event(TI_MC_SESSION_DELETED, (void *)&mc);
+		#else
+				struct ipaddr ipaddr;
+				memset(&ipaddr, 0, sizeof(ipaddr));
+				ipaddr.type = IPV4;
+				memcpy(&ipaddr.addr.ip4, &gaddr->addr.ip4, sizeof(ipaddr.addr.ip4));
+				printk(KERN_INFO "Deleting MC session from PP, mc.mfc_mcastgrp: 0x%X\n", ipaddr.addr.ip4.s_addr);
+				ti_hil_pp_event(TI_MC_SESSION_DELETED, (void *)&ipaddr);
+		#endif
 			} else {
-				/* TODO: ipv6 session delete API */
+				printk(KERN_INFO "Deleting MC session from PP -- IPV6\n");
+				struct ipaddr ipaddr;
+				memset(&ipaddr, 0, sizeof(ipaddr));
+				ipaddr.type = IPV6;
+				memcpy(&ipaddr.addr.ip6, &gaddr->addr.ip6, sizeof(ipaddr.addr.ip6));
+				ti_hil_pp_event(TI_MC_SESSION_DELETED, (void *)&ipaddr);
 			}
 		} else if (entry->client_count < 1) {
 			printk(KERN_CRIT "This should not happened !! entry->client_count: %d < 1\n", entry->client_count);
diff --git a/net/ipv4/ipmr.c b/net/ipv4/ipmr.c
--- a/net/ipv4/ipmr.c
+++ b/net/ipv4/ipmr.c
@@ -68,6 +68,8 @@
 #include <net/fib_rules.h>
 #include <linux/netconf.h>
 
+#include "../bridge/br_private.h"
+
 #if defined(CONFIG_IP_PIMSM_V1) || defined(CONFIG_IP_PIMSM_V2)
 #define CONFIG_IP_PIMSM	1
 #endif
@@ -1125,7 +1127,14 @@ static int ipmr_mfc_delete(struct mr_tab
 		    (parent == -1 || parent == c->mfc_parent)) {
 			list_del_rcu(&c->list);
 #ifdef CONFIG_TI_PACKET_PROCESSOR
-            ti_hil_pp_event (TI_MC_SESSION_DELETED,(void *)c);
+			{
+				struct ipaddr ipaddr;
+				memset(&ipaddr, 0, sizeof(ipaddr));
+				ipaddr.type = IPV4;
+				ipaddr.addr.ip4.s_addr = c->mfc_mcastgrp;
+				printk(KERN_INFO "%s: Deleting MC session from PP, mc.mfc_mcastgrp: 0x%X\n", __FUNCTION__, ipaddr.addr.ip4.s_addr);
+				ti_hil_pp_event(TI_MC_SESSION_DELETED, (void *)&ipaddr);
+			}
 #endif// CONFIG_TI_PACKET_PROCESSOR
 			mroute_netlink_event(mrt, c, RTM_DELROUTE);
 			ipmr_cache_free(c);
