# HG changeset patch
# Parent 1e3ae2419873e002630bd4824cd38e1db619a6aa

--- a/drivers/mrpc/Kconfig
+++ b/drivers/mrpc/Kconfig
@@ -32,3 +32,10 @@ config MRPC_MODPHY_CLIENT
     default n
     help
        modphy mrpc client
+
+config MRPC_PP_CLIENT
+    tristate "Packet Processor mrpc client"
+    depends on MRPC
+    default n
+    help
+       Packet Processor mrpc client
--- a/drivers/mrpc/Makefile
+++ b/drivers/mrpc/Makefile
@@ -1,3 +1,5 @@
 obj-$(CONFIG_MRPC)		+= core/
 obj-$(CONFIG_MRPC_EXAMPLES)	+= examples/
-obj-$(CONFIG_MRPC_MODPHY_CLIENT) += modphy_client.o
+obj-$(CONFIG_MRPC_MODPHY_CLIENT)	+= modphy_client.o
+obj-$(CONFIG_MRPC_PP_CLIENT)		+= pp_client.o
+
--- /dev/null
+++ b/drivers/mrpc/pp_client.c
@@ -0,0 +1,285 @@
+/*
+ *
+ * pp_client.c
+ * Description:
+ * pp mrpc client driver
+ *
+ *
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2016 Intel Corporation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *  Intel Corporation
+ *  2200 Mission College Blvd.
+ *  Santa Clara, CA  97052
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ":%s:%d " fmt "\n", __func__, __LINE__
+
+/************************************************/
+/**                    Includes                 */
+/************************************************/
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/err.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mrpc.h>
+
+#ifdef DEBUG
+#define DBG(fmt, ...) pr_err(fmt, ##__VA_ARGS__)
+#else
+#define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
+#endif
+
+/* driver private database */
+struct pp_private {
+    struct platform_device *pdev;   /* platform device */
+    struct mrpc_client *mrpc;       /* mrpc client handle */
+};
+
+static struct pp_private *this;
+
+struct pp_args {
+    AVALANCHE_PP_PID_t pid;
+    AVALANCHE_PP_PID_RANGE_t pid_range;
+    __u8 pid_number;
+    unsigned int flags;
+};
+
+enum {
+    PP_PID_CREATE_PROC = 0,
+    PP_PID_SET_FLAGS_PROC,
+    PP_PID_CONFIG_RANGE_PROC,
+};
+
+/* args must be in network byte order ! */
+static inline int pp_mrpc_call(__u8 procid, struct pp_args *args)
+
+{
+    struct pp_private *priv = this;
+    int ret, errcode;
+
+    if (!priv) {
+        pr_err("ERROR: mrpc pp not initialized");
+        return PP_RC_FAILURE;
+    }
+
+    ret = mrpc_call(priv->mrpc, procid, args, sizeof(*args), NULL, 0, 0, &errcode);
+
+    if (ret || errcode) {
+        pr_err("ERROR: ret=%d, errcode=%d", ret, errcode);
+        return PP_RC_FAILURE;
+    }
+
+    return PP_RC_SUCCESS;
+}
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_create(AVALANCHE_PP_PID_t *ptr_pid, void *ptr_netdev)
+{
+    struct pp_args args;
+    AVALANCHE_PP_PID_t *pid = &args.pid; 
+    int i;
+
+    /* copy pid from network */
+    pid->pid_handle = ptr_pid->pid_handle; 
+    pid->priv_flags = ptr_pid->priv_flags;
+    pid->type = ptr_pid->type;
+    pid->ingress_framing = ptr_pid->ingress_framing;
+    pid->dflt_pri_drp = ptr_pid->dflt_pri_drp;
+    pid->pri_mapping = ptr_pid->pri_mapping;
+    pid->dflt_fwd_q = htons(ptr_pid->dflt_fwd_q);
+    pid->dflt_dst_tag = htons(ptr_pid->dflt_dst_tag);
+    for (i = 0; i < ARRAY_SIZE(pid->tx_pri_q_map); i++)
+        pid->tx_pri_q_map[i] = htons(ptr_pid->tx_pri_q_map[i]);
+    memcpy(pid->tx_hw_data, ptr_pid->tx_hw_data, ARRAY_SIZE(pid->tx_hw_data));
+    pid->tx_hw_data_len = ptr_pid->tx_hw_data_len;
+
+    pr_info("call avalanche_pp_pid_create");
+    return pp_mrpc_call(PP_PID_CREATE_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_create);
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_set_flags(Uint8 pid_handle, Uint32  new_flags)
+{
+    struct pp_args args;
+
+    args.pid_number = pid_handle;
+    args.flags = htonl(new_flags);
+    pr_info("call avalanche_pp_pid_set_flags(pid_number=%d, flags=%x)",
+            args.pid_number, ntohl(args.flags));
+    return pp_mrpc_call(PP_PID_SET_FLAGS_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_set_flags);
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_config_range(AVALANCHE_PP_PID_RANGE_t *pid_range)
+{
+    struct pp_args args;
+
+    args.pid_range = *pid_range;
+    pr_info("call avalanche_pp_pid_config_range(port_num=%d, type=%d, count=%d, base_index=%d)",
+            args.pid_range.port_num, args.pid_range.type,
+            args.pid_range.count, args.pid_range.base_index);
+    return pp_mrpc_call(PP_PID_CONFIG_RANGE_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_config_range);
+
+/* sysfs for future use */
+static ssize_t status_show(struct device *dev,
+                           struct device_attribute *attr, char *buf)
+{
+    struct pp_private *priv = dev_get_drvdata(dev);
+
+    if (!priv)
+        return -EINVAL;
+
+    return scnprintf(buf, PAGE_SIZE, "status ok");
+}
+
+static DEVICE_ATTR(status, S_IRUGO, status_show, NULL);
+
+static struct attribute *pp_attrs[] = {
+    &dev_attr_status.attr,
+    NULL
+};
+
+static struct attribute_group pp_attrs_group = {
+    .attrs = pp_attrs,
+};
+
+/**
+ * pp_mrpc_probe
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int pp_mrpc_probe(struct platform_device *pdev)
+{
+    struct pp_private *priv;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv) {
+        pr_err("memory allocation failed");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+    priv->pdev = pdev;
+
+    ret = sysfs_create_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    if (ret) {
+        pr_err("sysfs_create_group failed (ret=%d)", ret);
+        return ret;
+    }
+
+    priv->mrpc = mrpc_client_register(MRPC_RESERVED_ID_PP_PID,
+                                      "Packet Processor");
+    if (!priv->mrpc) {
+        pr_err("failed to register pp");
+        ret = -ENODEV;
+        goto out_remove_group;
+    }
+
+    this = priv;
+    return 0;
+
+out_remove_group:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    return 0;
+}
+
+/**
+ * pp_mrpc_remove
+ *
+ * This function is called when the pp mrpc driver is
+ * removed.
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int pp_mrpc_remove(struct platform_device *pdev)
+{
+    struct pp_private *priv = platform_get_drvdata(pdev);
+    mrpc_client_unregister(priv->mrpc);
+    sysfs_remove_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    dev_set_drvdata(&pdev->dev, NULL);
+    this = NULL;
+
+    return 0;
+}
+
+static struct platform_driver pp_driver = {
+    .driver = {
+        .name   = "pp_mrpc_client",
+    },
+    .probe = pp_mrpc_probe,
+    .remove = pp_mrpc_remove,
+};
+
+static struct platform_device *pp_device;
+
+static int __init pp_mrpc_init(void)
+{
+    int ret;
+
+    ret = platform_driver_register(&pp_driver);
+    if (ret < 0) {
+        pr_err("Failed to register pp platform driver: %d\n", ret);
+        return ret;
+    }
+
+    pp_device = platform_device_register_simple("pp_mrpc_client", -1, NULL, 0);
+    if (IS_ERR(pp_device)) {
+        pr_err("Failed to register pp platform device\n");
+        platform_driver_unregister(&pp_driver);
+        return PTR_ERR(pp_device);
+    }
+
+    return 0;
+}
+
+static void __exit pp_mrpc_exit(void)
+{
+    platform_device_unregister(pp_device);
+    platform_driver_unregister(&pp_driver);
+}
+
+/******************************************************/
+/**    Module Declarations                           **/
+/******************************************************/
+module_init(pp_mrpc_init);
+module_exit(pp_mrpc_exit);
+
+MODULE_AUTHOR("Intel Corporation");
+MODULE_AUTHOR("Tomer Eliyahu tomer.b.eliyahu@intel.com");
+MODULE_DESCRIPTION("pp mrpc client");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
--- a/include/linux/mrpc.h
+++ b/include/linux/mrpc.h
@@ -71,6 +71,7 @@ struct mrpc_procinfo {
 enum {
     MRPC_RESERVED_ID_PP_CONTROL = 0,
     MRPC_RESERVED_ID_PP_DEBUG,
+    MRPC_RESERVED_ID_PP_PID, /* temporary until PP core and PP HAL are ready */
     MRPC_RESERVED_ID_NETEVENTS,
     MRPC_RESERVED_ID_NETHOOKS,
     MRPC_RESERVED_ID_MODPHY,
