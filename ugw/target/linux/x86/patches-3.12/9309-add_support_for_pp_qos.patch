# HG changeset patch
# Parent bc5db31bc0e615a34074a9781dc64f98b6815039

--- /dev/null
+++ b/include/linux/avalanche/generic/pp_qos_p7.h
@@ -0,0 +1,544 @@
+/* 
+ * pp_qos_p7.h
+ * Description:
+ * QoS Manager driver APIs
+ 
+ 
+  This file is provided under a dual BSD/GPLv2 license.  When using or
+  redistributing this file, you may do so under either license.
+
+  GPL LICENSE SUMMARY
+
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of version 2 of the GNU General Public License as
+  published by the Free Software Foundation.
+
+  This program is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+  The full GNU General Public License is included in this distribution
+  in the file called LICENSE.GPL.
+
+
+  Contact Information:
+  Intel Corporation
+  2200 Mission College Blvd.
+  Santa Clara, CA  97052
+
+  BSD LICENSE
+
+  Copyright(c) 2016 Intel Corporation. All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions
+  are met:
+
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in
+      the documentation and/or other materials provided with the
+      distribution.
+
+    * Neither the name of Intel Corporation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+*/
+
+#ifndef PP_QOS_P7_H
+#define PP_QOS_P7_H
+/************************************************/
+/*                    Includes                  */
+/************************************************/
+
+/************************************************/
+/*                    Defines                   */
+/************************************************/
+
+#define PP_QOS_MAX_CLUSTERS          (64)
+#define PP_QOS_MAX_QUEUES            (192)
+#define PP_QOS_MAX_QUEUES_IN_CLUSTER AVALANCHE_PP_QOS_CLST_MAX_QCNT
+
+#define PP_QOS_MAX_QUEUE_INDEX       (PP_QOS_MAX_QUEUES - 1)
+#define PP_QOS_MAX_CLUSTER_INDEX     (PP_QOS_MAX_CLUSTERS - 1)
+
+#define PP_QOS_Q_REALTIME_FLAG       (1<<0)
+#define PP_QOS_Q_NO_QOS_FLAG         (1<<1)
+
+
+#define PP_QOS_ITERATION_TICK_USEC   (25)
+#define PP_QOS_ITERATION_PER_SECOND  (1000000 / PP_QOS_ITERATION_TICK_USEC)
+
+#define INVALID_QDA_THREAD_ID        (32)
+#define INVALID_QDA_QUEUE            (255)
+#define PP_QOS_INVALID_CLUSTER       (255)
+#define PP_QOS_DEFAULT_PRIORITY      (0)
+
+#define PP_QOS_FW_QCFG_BLK_BASE_PHY  (0xF3E10200)
+#define PP_QOS_FW_CLST_BLK_BASE_PHY  (0xF3E12200)
+
+/* Rate(in Mbps) * 1M) / iteration per second / 8(bits in byte) */
+#define PP_QOS_MEGA_BIT_PER_SEC_TO_IT_CREDIT_BYTES(x)    ((Uint32)(((Uint64)(x * 1000 * 1000)) / PP_QOS_ITERATION_PER_SECOND / 8 ))
+#define PP_QOS_PPS_TO_IT_CREDIT_PACKETS(x)               ((Uint16)(x / PP_QOS_ITERATION_PER_SECOND))
+
+/************************************************/
+/*                 Structures                   */
+/************************************************/
+/* QoS manager return code */
+typedef enum
+{
+    PP_QOS_RC_SUCCESS,
+    PP_QOS_RC_FAILURE,
+    PP_QOS_RC_INVALID_PARAM,
+    PP_QOS_RC_OUT_OF_MEMORY,
+    PP_QOS_RC_OBJECTS_STARVATION
+}
+PP_QOS_MGR_RET_e;
+
+/* QoS manager scheduling mode */
+typedef enum
+{
+    PP_QOS_SCH_STRICT,
+    PP_QOS_SCH_WFQ
+}
+PP_QOS_SCH_MODE_e;
+
+/* QoS manager Qos-profile */
+typedef struct
+{
+    PP_QOS_SCH_MODE_e sch_mode;                   /* Strict/WFQ */
+    Uint8             num_of_priorities;          /* Number of priorities */
+    Uint8             vpid_id;                    /* VPID ID */
+    Uint16            profile_private_identifier;
+    Uint32            egress_port_queue;          /* Egress queue number */
+    Uint32            egress_queue_depth_packets; /* Egress queue depth (packets) */
+    Uint32            egress_queue_depth_bytes;   /* Egress queue depth (bytes) */
+    Uint32            ingress_queue_depth_packets;/* Ingress queue depth (packets) */
+    Uint32            ingress_queue_depth_bytes;  /* Ingress queue depth (bytes) */
+    Uint32            port_rate_limit_Mbps;       /* Rate limit (in Mbps)*/
+    Uint32            port_pps_limit;             /* PPS limit */
+}
+PP_QOS_PROFILE_t;
+
+/* QoS manager statistics */
+typedef struct
+{
+    Uint8    active_shared_clusters;
+    Uint8    active_private_clusters[AVALANCHE_PP_MAX_PID];
+    Uint8    active_shared_queues;
+    Uint8    active_private_queues[AVALANCHE_PP_MAX_PID];
+    Uint32   clusters_starvation_shared;
+    Uint32   queues_starvation_shared;
+}
+PP_QOS_DB_Counters_t;
+
+typedef struct
+{
+    Uint64      frwd_pkts;            /* Number of packets forwarded to the Egress Queue */
+    Uint64      drp_pkts;             /* Number of packets dropped due to congestion */
+}
+PP_QOS_MIB_STATS_t;
+
+typedef struct
+{
+
+    Uint32                      global_credit_bytes;        /* The amount of global credit bytes available to the next Qos queue in the cluster */
+
+    Uint16                      global_credit_pkts;         /* The amount of global credit packet available to the next Qos queue in the cluster */
+    Uint16                      max_global_credit_pkts;     /* The max amount of global credit pkts allowed carring over to the next queue. */
+
+    Uint32                      max_global_credit_bytes;    /* The max amount of global credit bytes allowed carring over to the next queue. */
+
+    Uint16                      qda_queue;                  /* The queue which we activated QDA on. INVALID_QDA_QUEUE indicates that QDA wasn't activated on any on the cluster queues */
+    Uint8                       egr_q_cnt;                  /* The total number of egress queues sampled to obtain the egress queue congestion estimation */
+    Uint8                       qos_q_cnt;                  /* The number of QOS queues in the cluster (1 to 9) */
+
+    Uint8                       qos_q3;                     /* The queue index (0 to 127) of each QOS queue in the cluster listed in priority order */
+    Uint8                       qos_q2;
+    Uint8                       qos_q1;
+    Uint8                       qos_q0;
+
+    Uint8                       qos_q7;
+    Uint8                       qos_q6;
+    Uint8                       qos_q5;
+    Uint8                       qos_q4;
+
+    Uint16                      egr_q1;                     /* The Queue index of every egress queue enumerated in Egress Queue Count */
+    Uint16                      egr_q0;
+
+    Uint16                      egr_q3;
+    Uint16                      egr_q2;
+
+    Uint32                      egr_congst_thrsh_bytes1;	/* Egress Congestion Threshold bytes point 1  */
+    Uint32                      egr_congst_thrsh_bytes2;	/* Egress Congestion Threshold bytes point 2  */
+    Uint32                      egr_congst_thrsh_bytes3;    /* Egress Congestion Threshold bytes point 3  */
+    Uint32                      egr_congst_thrsh_bytes4;	/* Egress Congestion Threshold bytes point 4  */
+
+    Uint16                      egr_congst_thrsh_pkts1;     /* Egress Congestion Threshold Packets point 4  */
+    Uint16                      egr_congst_thrsh_pkts2;     /* Egress Congestion Threshold Packets point 3  */
+    Uint16                      egr_congst_thrsh_pkts3;     /* Egress Congestion Threshold Packets point 2  */
+    Uint16                      egr_congst_thrsh_pkts4;     /* Egress Congestion Threshold Packets point 1  */
+
+    Uint32                      w14;                        /* Reserved */
+    Uint32                      w15;                        /* Reserved */
+
+}
+PP_QOS_FW_CLST_CFG_t;
+
+typedef struct
+{
+    Uint16 egr_q;                    /* The Queue index of the forwarding queue */
+    Uint8  flags;                    /* Specifies how the frames in the QOS queue should be handled */
+    Uint8  QDAThreadId;              /* Indicates which QDA thread id is working on that queue. INVALID_QDA_THREAD_ID means that no thread is bound to that queue */
+
+    Uint32 iteration_credit_bytes;   /* The amount of byte credit that the queue receives every 25us. */
+    Uint32 total_credit_bytes;       /* The total amount of forwarding byte credit that the queue is currently holding */
+    Uint32 max_credit_bytes;         /* The max amount of forwarding byte crerdit that the queue is allowed to hold at the end of the 25US iteration */
+
+    Uint16 iteration_credit_pkts;    /* The amount of packet credit that the queue receives every 25us. */
+    Uint16 total_credit_pkts;        /* The total amount of forwarding pkt credit that the queue is currently holding */
+
+    Uint16 max_credit_pkts;          /* The max amount of forwarding packet crerdit that the queue is allowed to hold at the end of the 25US iteration */
+    Uint16 congst_thrsh_pkts;        /* The size in packets at which point the Qos queue is considered to be congested */
+
+    Uint32 congst_thrsh_bytes;       /* The size in bytes at which point the Qos queue is considered to be congested */
+    Uint32 w7;                       /* Reserved */
+
+}
+PP_QOS_FW_QUEUE_t;
+
+#ifdef __KERNEL__
+/* **************************************************************************************** */
+/*                                                                                          */
+/*                                                                                          */
+/*                                                                                          */
+/*                      KERNEL only Stuff                                                   */
+/*                                                                                          */
+/*                                                                                          */
+/*                                                                                          */
+/* **************************************************************************************** */
+
+
+/************************************************/
+/* QoS manager APIs                             */
+/************************************************/
+/**************/
+/* Common     */
+/**************/
+/**
+ *  pp_qos_mngr_init - Initialized the QoS manager DB
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_mngr_init(void);
+/**
+ *  pp_qos_set_basic_profile - This API should be called while
+ *  QoS profile is created for NI
+ *  basic profile is 1 cluster with 1 egress queue.
+ *  @qos_profile: Pointer to qos profile to set
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_set_basic_profile(PP_QOS_PROFILE_t *qos_profile);
+/**
+ *  pp_qos_is_profile_registered - This API return if the QoS
+ *  profile is alreadu exist int the QoS manager
+ *  @vpid_id: Pointer to qos profile to set
+ *  @profile_private_identifier: identifier for profile
+ *  @isSupported: pointer to return id profile is registered
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_is_profile_registered(Uint8 vpid_id, Uint16 profile_private_identifier, Bool *isRegistered);
+/**
+ *  pp_qos_delete_profile - This API should be called when NI
+ *  need to delete QoS profile
+ *  @vpid_id: Profile's VPID
+ *  @profile_private_identifier: Profile's private identifier
+ *  @profile_stats: To return the profile statistics before the
+ *                profile will deleted.
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_delete_profile(Uint8 vpid_id, Uint16 profile_private_identifier, PP_QOS_MIB_STATS_t *profile_stats);
+/**
+ *  pp_qos_delete_all_profiles - This API should be called while
+ *  NI is going down
+ *  @vpid_id: VPID ID
+ *  @vpid_stats: To return the vpid statistics before the
+ *             profiles will deleted.
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_delete_all_profiles(Uint8 vpid_id, PP_QOS_MIB_STATS_t * vpid_stats);
+/**
+ *  pp_qos_db_get_counters - Get the QoS DB statistics
+ *  @qos_db_stats: Pointer to QoS DB statistics to set
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_db_get_counters(PP_QOS_DB_Counters_t *qos_db_stats);
+/**
+ *  pp_qos_enable_psm - Enter to psm mode
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_enable_psm(void);
+/**
+ *  pp_qos_disable_psm - Exit from psm mode
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_disable_psm(void);
+
+
+/**************/
+/* Cluster    */
+/**************/
+/**
+ *  pp_qos_cluster_is_active - Check if cluster is active
+ *  @phy_cluster_id: Cluster ID
+ *  @is_active: Pointer to return if active or not
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_cluster_is_active(Uint8 phy_cluster_id, Bool *is_active);
+/**
+ *  pp_qos_set_cluster_config - Config QoS cluster
+ *  @phy_cluster_id: Cluster ID
+ *  @vpid_id: VPID ID
+ *  @clst_cfg: Pointer to requested cluster
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_set_cluster_config(Uint8 phy_cluster_id, Uint8 vpid_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg);
+/**
+ *  pp_qos_alloc_cluster - Alloc/Create QoS cluster
+ *  @vpid_id: VPID ID
+ *  @phy_cluster_id: Pointer to return the cluster ID
+ *  @profile_private_identifier: unique identifier for profile
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_alloc_cluster(Uint8 vpid_id, Uint16 profile_private_identifier, Uint8 *phy_cluster_id);
+/**
+ *  pp_qos_free_cluster - Free/Delete QoS cluster
+ *  @phy_cluster_id: Cluster ID
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_free_cluster(Uint8 phy_cluster_id);
+/**
+ *  pp_qos_get_cluster_config - Get the cluster configuration
+ *  @phy_cluster_id: Cluster ID
+ *  @clst_cfg: Pointer to return the cluster configuration
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_cluster_config(Uint8 phy_cluster_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg);
+/**
+ *  pp_qos_get_queue_and_cluster_id_by_priority - Get the
+ *  cluster and queue ID for given vpid identifier and Q
+ *  priority.
+ *  @vpid_id: VPID ID
+ *  @profile_private_identifier: Private identifier for profile
+ *  @priority: queue priority - This Uint8 field represent the
+ *           priority of the qos Q, 0 is the lowest priority,
+ *           the max priority is the number of qos queues in the
+ *           cluster.
+ *  @phy_cluster_id: Pointer to return the cluster ID
+ *  @phy_queue_id: Pointer to return the queue ID
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_queue_and_cluster_id_by_priority(Uint8 vpid_id, Uint16 profile_private_identifier, Uint8 priority, Uint8 *phy_cluster_id, Uint8 *phy_queue_id);
+/**
+ *  pp_qos_get_queue_id_by_cluster_and_priority - Get the queue
+ *  ID by given cluster and priority.
+ *  @phy_cluster_id: Cluster ID
+ *  @priority: queue priority - This Uint8 field represent the
+ *           priority of the qos Q, 0 is the lowest priority,
+ *           the max priority is the number of qos queues in the
+ *           cluster.
+ *  @phy_queue_id: Pointer to return the queue ID
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_queue_id_by_cluster_and_priority(Uint8 phy_cluster_id, Uint8 priority, Uint8 *phy_queue_id);
+/**
+ *  pp_qos_get_cluster_by_identifier - Get the cluster
+ *  configuration by given VPID and identifier.
+ *  @profile_private_identifier: Private identifier
+ *  @vpid_id: VPID ID
+ *  @phy_cluster_id: Pointer to return the cluster ID
+ *  @clst_cfg: Pointer to return the cluster configuration
+ *  
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_cluster_by_identifier(Uint16 profile_private_identifier, Uint8 vpid_id,  Uint8 *phy_cluster_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg);
+/**
+ *  pp_qos_get_cluster_stats - Get QoS statistics for cluster
+ *  @phy_cluster_id: Cluster ID
+ *  @cluster_stats: Pointer to return the cluster
+ *                statistics
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_cluster_stats(Uint8 phy_cluster_id, PP_QOS_MIB_STATS_t *cluster_stats);
+/**************/
+/* Queue      */
+/**************/
+/**
+ *  pp_qos_add_queue_to_cluster - Adds queue to cluster
+ *  @phy_cluster_id: Cluster ID
+ *  @user_priority: User priority of the queue
+ *  @queue_cfg: Pointer to AVALANCHE_PP_QOS_QUEUE_t
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_add_queue_to_cluster(Uint8 phy_cluster_id, AVALANCHE_PP_QOS_QUEUE_t *queue_cfg, Uint8 user_priority);
+/**
+ *  pp_qos_del_queue_by_cluster_and_user_prio - Deletes queue
+ *  from cluster
+ *  @phy_cluster_id: Cluster ID
+ *  @user_priority: User priority of the queue
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_del_queue_by_cluster_and_user_prio(Uint8 phy_cluster_id, Uint8 user_priority);
+
+PP_QOS_MGR_RET_e pp_qos_get_queue_and_cluster_id_by_user_priority(Uint8 vpid_id, Uint16 profile_private_identifier, Uint8 user_priority,
+																	      Uint8 *phy_cluster_id, Uint8 *phy_queue_id, Uint8 *pp_priority);
+
+/**
+ *  pp_qos_queue_is_active - Check if queue is active
+ *  @phy_queue_id: Queue ID
+ *  @is_active: Pointer to return if active or not
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_queue_is_active(Uint8 phy_queue_id, Bool *is_active);
+/**
+ *  pp_qos_alloc_queue - Alloc/Create QoS queue
+ *  @phy_cluster_id: Cluster ID
+ *  @phy_queue_id: Pointer to return the queue ID
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_alloc_queue(Uint8 phy_cluster_id, Uint8 *phy_queue_id);
+/**
+ *  pp_qos_free_queue - Free/Delete QoS queue
+ *  @phy_queue_id: Queue ID
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_free_queue(Uint8 phy_queue_id);
+/**
+ *  pp_qos_get_queue_config - Get the queue configuration
+ *  @phy_queue_id: Queue ID
+ *  @queue_cfg: Pointer to return the queue configuration
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_queue_config(Uint8 phy_queue_id, AVALANCHE_PP_QOS_QUEUE_t *queue_cfg);
+/**
+ *  pp_qos_modify_active_queue - Modify properties for an active
+ *  queue
+ *  @q_cfg: Pointer to queue new configuration
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_modify_active_queue(AVALANCHE_PP_QOS_QUEUE_t *modified_q_cfg); /* Modify properties for an active queue. */
+/**
+ *  pp_qos_get_queue_stats - Get QoS queue statistics
+ *  @qos_qnum: Queue ID
+ *  @stats: Pointer to return the queue statistics
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_queue_stats(Uint32 qos_qnum, PP_QOS_MIB_STATS_t *q_stats);
+
+/**************/
+/* VPID       */
+/**************/
+/**
+ *  pp_qos_vpid_is_active - Check if VPID is active (active in the QoS)
+ *  @vpid_id: VPID ID
+ *  @is_active: Pointer to return if active or not
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */ 
+PP_QOS_MGR_RET_e pp_qos_vpid_is_active(Uint8 vpid_id, Bool *is_active);
+/**
+ *  pp_qos_is_vpid_registered - Return True if the given VPID is
+ *  currently supported by the QoS
+ *  @vpid_id: VPID ID
+ *  @isRegistered: Pointer to return if the VPID is active
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_is_vpid_registered(Uint8 vpid_id, Bool *isRegistered);
+/**
+ *  pp_qos_vpid_set_qos_mode - Set the QOS clusters of a VPID to
+ *  do Qos or not
+ *  @vpid_id: VPID ID
+ *  @vpidQosMode: If the requsted mode is QoS/no-QoS
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_vpid_set_qos_mode(Uint8 vpid_id, Bool vpidQosMode);
+/**
+ *  pp_qos_get_vpid_config - Get the vpid clusters configuration
+ *  @phy_cluster_id: Cluster ID
+ *  @clst_cfg_arr: Pointer to array of clusters (in size of
+ *           PP_QOS_MAX_CLUSTERS)
+ *  @clusters_cnt: in -> Pointer to MAX size of clst_cfg array.
+ *                 out -> Pointer to return the number of
+ *               clusters thet filled by the function.
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_vpid_config(Uint8 vpid_id, AVALANCHE_PP_QOS_CLST_CFG_t *clst_cfg_arr, Uint8 *clusters_cnt);
+/**
+ *  pp_qos_get_vpid_stats - Get QoS statistics for VPID
+ *  @vpid_id: VPID ID
+ *  @vpid_stats: Pointer to return the vpid statistics
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_vpid_stats(Uint8 vpid_id, PP_QOS_MIB_STATS_t *vpid_stats);
+/**
+ *  pp_qos_get_profile_stats - Get QoS statistics for
+ *  Profile
+ *  @vpid_id: VPID ID
+ *  @profile_private_identifier: Private identifier
+ *  @profile_stats: Pointer to return the profile statistics
+ *
+ *  Returns PP_QOS_RC_SUCCESS if pass.
+ */
+PP_QOS_MGR_RET_e pp_qos_get_profile_stats(Uint8 vpid_id, Uint16 profile_private_identifier, PP_QOS_MIB_STATS_t *profile_stats);
+
+#endif /* __KERNEL__ */
+
+#endif /* PP_QOS_P7_H */
--- a/include/linux/avalanche/puma7/puma7_cppi_gqmgr1_q.h
+++ b/include/linux/avalanche/puma7/puma7_cppi_gqmgr1_q.h
@@ -5,7 +5,7 @@
 
   GPL LICENSE SUMMARY
 
-  Copyright(c) 2014 Intel Corporation.
+  Copyright(c) 2014 - 2016 Intel Corporation.
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of version 2 of the GNU General Public License as
@@ -29,7 +29,7 @@
 
   BSD LICENSE
 
-  Copyright(c) 2014 Intel Corporation. All rights reserved.
+  Copyright(c) 2014 - 2016 Intel Corporation. All rights reserved.
 
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
@@ -60,126 +60,126 @@
 */
 
 #define PAL_CPPI_PP_QMGR_G1_Q_LIST                                                                                        \
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER0_US_BE0_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q0 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER0_US_BE0_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q1 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER1_US_BE1_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q2 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER1_US_BE1_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q3 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER2_US_BE2_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q4 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER2_US_BE2_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q5 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER3_US_BE3_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q6 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER3_US_BE3_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q7 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER4_US_BE4_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q8 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER4_US_BE4_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q9 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER5_US_BE5_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q10 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER5_US_BE5_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q11 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER6_US_BE6_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q12 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER6_US_BE6_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q13 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER7_US_BE7_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q14 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER7_US_BE7_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q15 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER8_US_BE8_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q16 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER8_US_BE8_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q17 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER9_US_BE9_LOW_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q18 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER9_US_BE9_HI_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q19 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER10_US_BE10_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q20 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER10_US_BE10_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q21 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER11_US_BE11_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q22 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER11_US_BE11_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q23 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER12_US_BE12_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q24 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER12_US_BE12_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q25 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER13_US_BE13_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q26 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER13_US_BE13_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q27 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER14_US_BE14_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q28 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER14_US_BE14_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q29 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER15_US_BE15_LOW_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q30 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER15_US_BE15_HI_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q31 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER16_MoCA_LOW_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q32 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER16_MoCA_MED_LOW_Q_NUM)                       /* PAL_CPPI_PP_QMGR_G1_Q33 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER16_MoCA_MED_HI_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q34 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER16_MoCA_HI_Q_NUM)                            /* PAL_CPPI_PP_QMGR_G1_Q35 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER17_ATOM_LOW_Q_NUM)                           /* PAL_CPPI_PP_QMGR_G1_Q36 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER17_ATOM_MED_LOW_Q_NUM)                       /* PAL_CPPI_PP_QMGR_G1_Q37 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER17_ATOM_MED_HI_Q_NUM)                        /* PAL_CPPI_PP_QMGR_G1_Q38 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER17_ATOM_HI_Q_NUM)                            /* PAL_CPPI_PP_QMGR_G1_Q39 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER18_RGMII0_LOW_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q40 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER18_RGMII0_MED_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q41 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER18_RGMII0_MED_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q42 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER18_RGMII0_HI_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q43 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER19_RGMII1_LOW_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q44 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER19_RGMII1_MED_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q45 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER19_RGMII1_MED_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q46 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER19_RGMII1_HI_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q47 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER20_SGMII0_LOW_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q48 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER20_SGMII0_MED_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q49 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER20_SGMII0_MED_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q50 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER20_SGMII0_HI_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q51 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER21_SGMII1_LOW_Q_NUM)                         /* PAL_CPPI_PP_QMGR_G1_Q52 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER21_SGMII1_MED_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q53 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER21_SGMII1_MED_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q54 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER21_SGMII1_HI_Q_NUM)                          /* PAL_CPPI_PP_QMGR_G1_Q55 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER22_WiFi_PORT0_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q56 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER22_WiFi_PORT0_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q57 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER22_WiFi_PORT0_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q58 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER22_WiFi_PORT0_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q59 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER23_WiFi_PORT1_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q60 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER23_WiFi_PORT1_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q61 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER23_WiFi_PORT1_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q62 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER23_WiFi_PORT1_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q63 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER24_WiFi_PORT2_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q64 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER24_WiFi_PORT2_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q65 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER24_WiFi_PORT2_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q66 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER24_WiFi_PORT2_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q67 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER25_WiFi_PORT3_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q68 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER25_WiFi_PORT3_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q69 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER25_WiFi_PORT3_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q70 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER25_WiFi_PORT3_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q71 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER26_WiFi_PORT4_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q72 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER26_WiFi_PORT4_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q73 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER26_WiFi_PORT4_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q74 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER26_WiFi_PORT4_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q75 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER27_WiFi_PORT5_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q76 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER27_WiFi_PORT5_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q77 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER27_WiFi_PORT5_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q78 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER27_WiFi_PORT5_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q79 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER28_WiFi_PORT6_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q80 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER28_WiFi_PORT6_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q81 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER28_WiFi_PORT6_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q82 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER28_WiFi_PORT6_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q83 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER29_WiFi_PORT7_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q84 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER29_WiFi_PORT7_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q85 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER29_WiFi_PORT7_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q86 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER29_WiFi_PORT7_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q87 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER30_WiFi_PORT8_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q88 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER30_WiFi_PORT8_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q89 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER30_WiFi_PORT8_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q90 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER30_WiFi_PORT8_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q91 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER31_WiFi_PORT9_LOW_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q92 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER31_WiFi_PORT9_MED_LOW_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q93 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER31_WiFi_PORT9_MED_HI_Q_NUM)                  /* PAL_CPPI_PP_QMGR_G1_Q94 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER31_WiFi_PORT9_HI_Q_NUM)                      /* PAL_CPPI_PP_QMGR_G1_Q95 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER32_WiFi_PORT10_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q96 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER32_WiFi_PORT10_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q97 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER32_WiFi_PORT10_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q98 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER32_WiFi_PORT10_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q99 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER33_WiFi_PORT11_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q100 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER33_WiFi_PORT11_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q101 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER33_WiFi_PORT11_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q102 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER33_WiFi_PORT11_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q103 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER34_WiFi_PORT12_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q104 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER34_WiFi_PORT12_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q105 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER34_WiFi_PORT12_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q106 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER34_WiFi_PORT12_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q107 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER35_WiFi_PORT13_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q108 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER35_WiFi_PORT13_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q109 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER35_WiFi_PORT13_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q110 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER35_WiFi_PORT13_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q111 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER36_WiFi_PORT14_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q112 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER36_WiFi_PORT14_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q113 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER36_WiFi_PORT14_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q114 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER36_WiFi_PORT14_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q115 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER37_WiFi_PORT15_LOW_Q_NUM)                    /* PAL_CPPI_PP_QMGR_G1_Q116 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER37_WiFi_PORT15_MED_LOW_Q_NUM)                /* PAL_CPPI_PP_QMGR_G1_Q117 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER37_WiFi_PORT15_MED_HI_Q_NUM)                 /* PAL_CPPI_PP_QMGR_G1_Q118 */\
-PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER37_WiFi_PORT15_HI_Q_NUM)                     /* PAL_CPPI_PP_QMGR_G1_Q119 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q0)                                                 /* PAL_CPPI_PP_QMGR_G1_Q0 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q1)                                                 /* PAL_CPPI_PP_QMGR_G1_Q1 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q2)                                                 /* PAL_CPPI_PP_QMGR_G1_Q2 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q3)                                                 /* PAL_CPPI_PP_QMGR_G1_Q3 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q4)                                                 /* PAL_CPPI_PP_QMGR_G1_Q4 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q5)                                                 /* PAL_CPPI_PP_QMGR_G1_Q5 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q6)                                                 /* PAL_CPPI_PP_QMGR_G1_Q6 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q7)                                                 /* PAL_CPPI_PP_QMGR_G1_Q7 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q8)                                                 /* PAL_CPPI_PP_QMGR_G1_Q8 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q9)                                                 /* PAL_CPPI_PP_QMGR_G1_Q9 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q10)                                                /* PAL_CPPI_PP_QMGR_G1_Q10 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q11)                                                /* PAL_CPPI_PP_QMGR_G1_Q11 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q12)                                                /* PAL_CPPI_PP_QMGR_G1_Q12 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q13)                                                /* PAL_CPPI_PP_QMGR_G1_Q13 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q14)                                                /* PAL_CPPI_PP_QMGR_G1_Q14 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q15)                                                /* PAL_CPPI_PP_QMGR_G1_Q15 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q16)                                                /* PAL_CPPI_PP_QMGR_G1_Q16 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q17)                                                /* PAL_CPPI_PP_QMGR_G1_Q17 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q18)                                                /* PAL_CPPI_PP_QMGR_G1_Q18 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q19)                                                /* PAL_CPPI_PP_QMGR_G1_Q19 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q20)                                                /* PAL_CPPI_PP_QMGR_G1_Q20 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q21)                                                /* PAL_CPPI_PP_QMGR_G1_Q21 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q22)                                                /* PAL_CPPI_PP_QMGR_G1_Q22 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q23)                                                /* PAL_CPPI_PP_QMGR_G1_Q23 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q24)                                                /* PAL_CPPI_PP_QMGR_G1_Q24 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q25)                                                /* PAL_CPPI_PP_QMGR_G1_Q25 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q26)                                                /* PAL_CPPI_PP_QMGR_G1_Q26 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q27)                                                /* PAL_CPPI_PP_QMGR_G1_Q27 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q28)                                                /* PAL_CPPI_PP_QMGR_G1_Q28 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q29)                                                /* PAL_CPPI_PP_QMGR_G1_Q29 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q30)                                                /* PAL_CPPI_PP_QMGR_G1_Q30 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q31)                                                /* PAL_CPPI_PP_QMGR_G1_Q31 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q32)                                                /* PAL_CPPI_PP_QMGR_G1_Q32 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q33)                                                /* PAL_CPPI_PP_QMGR_G1_Q33 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q34)                                                /* PAL_CPPI_PP_QMGR_G1_Q34 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q35)                                                /* PAL_CPPI_PP_QMGR_G1_Q35 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q36)                                                /* PAL_CPPI_PP_QMGR_G1_Q36 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q37)                                                /* PAL_CPPI_PP_QMGR_G1_Q37 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q38)                                                /* PAL_CPPI_PP_QMGR_G1_Q38 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q39)                                                /* PAL_CPPI_PP_QMGR_G1_Q39 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q40)                                                /* PAL_CPPI_PP_QMGR_G1_Q40 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q41)                                                /* PAL_CPPI_PP_QMGR_G1_Q41 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q42)                                                /* PAL_CPPI_PP_QMGR_G1_Q42 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q43)                                                /* PAL_CPPI_PP_QMGR_G1_Q43 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q44)                                                /* PAL_CPPI_PP_QMGR_G1_Q44 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q45)                                                /* PAL_CPPI_PP_QMGR_G1_Q45 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q46)                                                /* PAL_CPPI_PP_QMGR_G1_Q46 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q47)                                                /* PAL_CPPI_PP_QMGR_G1_Q47 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q48)                                                /* PAL_CPPI_PP_QMGR_G1_Q48 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q49)                                                /* PAL_CPPI_PP_QMGR_G1_Q49 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q50)                                                /* PAL_CPPI_PP_QMGR_G1_Q50 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q51)                                                /* PAL_CPPI_PP_QMGR_G1_Q51 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q52)                                                /* PAL_CPPI_PP_QMGR_G1_Q52 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q53)                                                /* PAL_CPPI_PP_QMGR_G1_Q53 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q54)                                                /* PAL_CPPI_PP_QMGR_G1_Q54 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q55)                                                /* PAL_CPPI_PP_QMGR_G1_Q55 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q56)                                                /* PAL_CPPI_PP_QMGR_G1_Q56 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q57)                                                /* PAL_CPPI_PP_QMGR_G1_Q57 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q58)                                                /* PAL_CPPI_PP_QMGR_G1_Q58 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q59)                                                /* PAL_CPPI_PP_QMGR_G1_Q59 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q60)                                                /* PAL_CPPI_PP_QMGR_G1_Q60 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q61)                                                /* PAL_CPPI_PP_QMGR_G1_Q61 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q62)                                                /* PAL_CPPI_PP_QMGR_G1_Q62 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q63)                                                /* PAL_CPPI_PP_QMGR_G1_Q63 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q64)                                                /* PAL_CPPI_PP_QMGR_G1_Q64 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q65)                                                /* PAL_CPPI_PP_QMGR_G1_Q65 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q66)                                                /* PAL_CPPI_PP_QMGR_G1_Q66 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q67)                                                /* PAL_CPPI_PP_QMGR_G1_Q67 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q68)                                                /* PAL_CPPI_PP_QMGR_G1_Q68 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q69)                                                /* PAL_CPPI_PP_QMGR_G1_Q69 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q70)                                                /* PAL_CPPI_PP_QMGR_G1_Q70 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q71)                                                /* PAL_CPPI_PP_QMGR_G1_Q71 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q72)                                                /* PAL_CPPI_PP_QMGR_G1_Q72 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q73)                                                /* PAL_CPPI_PP_QMGR_G1_Q73 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q74)                                                /* PAL_CPPI_PP_QMGR_G1_Q74 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q75)                                                /* PAL_CPPI_PP_QMGR_G1_Q75 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q76)                                                /* PAL_CPPI_PP_QMGR_G1_Q76 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q77)                                                /* PAL_CPPI_PP_QMGR_G1_Q77 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q78)                                                /* PAL_CPPI_PP_QMGR_G1_Q78 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q79)                                                /* PAL_CPPI_PP_QMGR_G1_Q79 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q80)                                                /* PAL_CPPI_PP_QMGR_G1_Q80 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q81)                                                /* PAL_CPPI_PP_QMGR_G1_Q81 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q82)                                                /* PAL_CPPI_PP_QMGR_G1_Q82 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q83)                                                /* PAL_CPPI_PP_QMGR_G1_Q83 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q84)                                                /* PAL_CPPI_PP_QMGR_G1_Q84 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q85)                                                /* PAL_CPPI_PP_QMGR_G1_Q85 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q86)                                                /* PAL_CPPI_PP_QMGR_G1_Q86 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q87)                                                /* PAL_CPPI_PP_QMGR_G1_Q87 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q88)                                                /* PAL_CPPI_PP_QMGR_G1_Q88 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q89)                                                /* PAL_CPPI_PP_QMGR_G1_Q89 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q90)                                                /* PAL_CPPI_PP_QMGR_G1_Q90 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q91)                                                /* PAL_CPPI_PP_QMGR_G1_Q91 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q92)                                                /* PAL_CPPI_PP_QMGR_G1_Q92 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q93)                                                /* PAL_CPPI_PP_QMGR_G1_Q93 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q94)                                                /* PAL_CPPI_PP_QMGR_G1_Q94 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q95)                                                /* PAL_CPPI_PP_QMGR_G1_Q95 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q96)                                                /* PAL_CPPI_PP_QMGR_G1_Q96 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q97)                                                /* PAL_CPPI_PP_QMGR_G1_Q97 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q98)                                                /* PAL_CPPI_PP_QMGR_G1_Q98 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q99)                                                /* PAL_CPPI_PP_QMGR_G1_Q99 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q100)                                               /* PAL_CPPI_PP_QMGR_G1_Q100 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q101)                                               /* PAL_CPPI_PP_QMGR_G1_Q101 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q102)                                               /* PAL_CPPI_PP_QMGR_G1_Q102 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q103)                                               /* PAL_CPPI_PP_QMGR_G1_Q103 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q104)                                               /* PAL_CPPI_PP_QMGR_G1_Q104 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q105)                                               /* PAL_CPPI_PP_QMGR_G1_Q105 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q106)                                               /* PAL_CPPI_PP_QMGR_G1_Q106 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q107)                                               /* PAL_CPPI_PP_QMGR_G1_Q107 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q108)                                               /* PAL_CPPI_PP_QMGR_G1_Q108 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q109)                                               /* PAL_CPPI_PP_QMGR_G1_Q109 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q110)                                               /* PAL_CPPI_PP_QMGR_G1_Q110 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q111)                                               /* PAL_CPPI_PP_QMGR_G1_Q111 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q112)                                               /* PAL_CPPI_PP_QMGR_G1_Q112 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q113)                                               /* PAL_CPPI_PP_QMGR_G1_Q113 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q114)                                               /* PAL_CPPI_PP_QMGR_G1_Q114 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q115)                                               /* PAL_CPPI_PP_QMGR_G1_Q115 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q116)                                               /* PAL_CPPI_PP_QMGR_G1_Q116 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q117)                                               /* PAL_CPPI_PP_QMGR_G1_Q117 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q118)                                               /* PAL_CPPI_PP_QMGR_G1_Q118 */\
+PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q119)                                               /* PAL_CPPI_PP_QMGR_G1_Q119 */\
 PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q120)                                               /* PAL_CPPI_PP_QMGR_G1_Q120 */\
 PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q121)                                               /* PAL_CPPI_PP_QMGR_G1_Q121 */\
 PAL_CPPI_QMGR_Q_ADD(PAL_CPPI_PP_QMGR_G1_QOS_Q122)                                               /* PAL_CPPI_PP_QMGR_G1_Q122 */\
--- a/include/linux/avalanche/puma7/puma7_cppi_prv.h
+++ b/include/linux/avalanche/puma7/puma7_cppi_prv.h
@@ -144,7 +144,7 @@ typedef enum PAL_CPPI_PP_QMGR_G1_Qs
     PAL_CPPI_PP_QMGR_G1_TOTAL_Q_COUNT
 }PAL_CPPI_PP_QMGR_G1_Qs_e;
 
-#define PAL_CPPI_PP_QMGR_G1_QOS_Q_BASE              PAL_CPPI_PP_QMGR_G1_QOS_CLUSTER0_US_BE0_LOW_Q_NUM
+#define PAL_CPPI_PP_QMGR_G1_QOS_Q_BASE              PAL_CPPI_PP_QMGR_G1_QOS_Q0
 #define PAL_CPPI_PP_QMGR_G1_QOS_Q_LAST              PAL_CPPI_PP_QMGR_G1_QOS_Q255
 
 /*
--- a/include/linux/avalanche/puma7/puma7_pp.h
+++ b/include/linux/avalanche/puma7/puma7_pp.h
@@ -268,8 +268,8 @@ typedef enum PAL_CPPI41_PP_QOS_CLUSTERS
 
 #define AVALANCHE_PP_MODIFIER_MTU_TABLE_UPDATE(qNum, mtuSize)               \
 {                                                                           \
-    volatile USHORT *mtu_per_qos_q = 0;                                     \
-    mtu_per_qos_q = (USHORT *)AVALANCHE_PP_MODIFIER_MTU_TABLE_BASE + (qNum);\
+    volatile Uint16 *mtu_per_qos_q = 0;                                     \
+    mtu_per_qos_q = (Uint16 *)AVALANCHE_PP_MODIFIER_MTU_TABLE_BASE + (qNum);\
     *mtu_per_qos_q = cpu_to_be16((mtuSize) + ETH_HLEN);                                  \
 }
 
@@ -480,8 +480,8 @@ typedef enum PAL_CPPI41_PP_QOS_CLUSTERS
 
 #define AVALANCHE_PP_MC_MTU_TABLE_UPDATE(qNum, mtuSize)                 \
 {                                                                       \
-    volatile USHORT *mtu_per_qos_q = 0;                                 \
-    mtu_per_qos_q = (USHORT *)AVALNACHE_PP_MC_MTU_TABLE_BASE + (qNum);  \
+    volatile Uint16 *mtu_per_qos_q = 0;                                 \
+    mtu_per_qos_q = (Uint16 *)AVALNACHE_PP_MC_MTU_TABLE_BASE + (qNum);  \
     *mtu_per_qos_q = cpu_to_be16((mtuSize) + ETH_HLEN);                 \
 }
 
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1498,6 +1498,7 @@ struct net_device {
     int (*qos_setup_hook)   (struct net_device *dev_p);
     int (*qos_shutdown_hook)(struct net_device *dev_p);
     int (*qos_select_hook)  (struct sk_buff    *skb);
+    void (*qos_get_params_hook)  (struct net_device *dev, Uint16 *egressQ, Uint32 *rate);
     int devInstance;
 #endif
 	/* phy device may attach itself for hardware timestamping */
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -6185,7 +6185,9 @@ struct net_device *alloc_netdev_mqs(int 
     dev->pid_handle     = -1;
     dev->vpid_handle    = -1;
     memset ((void *)&dev->vpid_block, 0xFF, sizeof(dev->vpid_block));
+#if !(PUMA7_OR_NEWER_SOC_TYPE)
     dev->vpid_block.qos_clusters_count = 0;
+#endif
 #ifdef CONFIG_MACH_PUMA5
     dev->vpid_block.priv_vpid_flags = 0;
 #else
