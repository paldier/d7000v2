From bf72b21005b2f73875a3f312b106eb30157e1a53 Mon Sep 17 00:00:00 2001
From: Daniel Drubin <daniel.drubin@intel.com>
Date: Sun, 16 Nov 2014 10:55:24 +0200
Subject: [PATCH] Fix for too early connection (attempt to connect to HECI FW
 client before all clients completed enumeration)

Change-Id: Ic2b8ae861972436b0e13a56fb37914178050ab4c

Signed-off-by: Fabien Marotte <fabien.marotte@intel.com>
(cherry picked from commit 802675aada96892cff3223827ae2e3cfada6c050)
---
 drivers/misc/heci/hbm.c             |   55 ++++++++++++++++++++++++++++++++++-
 drivers/misc/heci/heci-hid-client.c |   34 +++++++++++++++++-----
 drivers/misc/heci/hw-ish.c          |    2 ++
 drivers/misc/heci/pci-ish.c         |    4 +--
 drivers/misc/heci/platform-config.h |    2 +-
 5 files changed, 85 insertions(+), 12 deletions(-)

diff --git a/drivers/misc/heci/hbm.c b/drivers/misc/heci/hbm.c
index 2a479e3..3d4586d 100644
--- a/drivers/misc/heci/hbm.c
+++ b/drivers/misc/heci/hbm.c
@@ -23,6 +23,27 @@
 #include "client.h"
 #include <linux/spinlock.h>
 
+/*
+#define	DEBUG_FW_BOOT_SEQ	1
+#define	DUMP_CL_PROP	1
+*/
+
+#ifdef DEBUG_FW_BOOT_SEQ
+unsigned char	static_fw_cl_props[6][32] = {
+
+{0x85, 0x01, 0x00, 0x00, 0x3B, 0x79, 0x63, 0xD9, 0xCF, 0x61, 0x8E, 0x4F, 0x8C, 0x02, 0xF2, 0xF7, 0xD0, 0x7F, 0x8E, 0x84, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
+{0x85, 0x02, 0x00, 0x00, 0xB9, 0x78, 0xCC, 0xC1, 0x93, 0xB6, 0x54, 0x4E, 0x91, 0x91, 0x51, 0x69, 0xCB, 0x02, 0x7C, 0x25, 0x01, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
+{0x85, 0x03, 0x00, 0x00, 0x26, 0x06, 0x05, 0x1F, 0x05, 0xD5, 0x94, 0x4E, 0xB1, 0x89, 0x53, 0x5D, 0x7D, 0xE1, 0x9C, 0xF2, 0x01, 0x01, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
+{0x85, 0x04, 0x00, 0x00, 0x54, 0x6C, 0x53, 0x28, 0x99, 0xCF, 0x27, 0x4F, 0xA6, 0xF3, 0x49, 0x97, 0x41, 0xBA, 0xAD, 0xFE, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00},
+{0x85, 0x05, 0x00, 0x00, 0x58, 0xCD, 0xAE, 0x33, 0x79, 0xB6, 0x54, 0x4E, 0x9B, 0xD9, 0xA0, 0x4D, 0x34, 0xF0, 0xC2, 0x26, 0x01, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
+{0x85, 0x06, 0x00, 0x00, 0x2E, 0x9A, 0x57, 0xBB, 0x54, 0xCC, 0x50, 0x44, 0xB1, 0xD0, 0x5E, 0x75, 0x20, 0xDC, 0xAD, 0x25, 0x01, 0x01, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
+
+};
+
+#define	NUM_STATIC_CLIENTS	6
+
+#endif /* DEBUG_FW_BOOT_SEQ */
+
 #ifdef dev_dbg
 #undef dev_dbg
 #endif
@@ -222,12 +243,19 @@ static int heci_hbm_prop_req(struct heci_device *dev)
 	if (next_client_index == HECI_CLIENTS_MAX) {
 		dev->hbm_state = HECI_HBM_WORKING;
 		dev->dev_state = HECI_DEV_ENABLED;
+
+		for (dev->me_client_presentation_num = 0; dev->me_client_presentation_num < client_num; ++dev->me_client_presentation_num)
+			/* Add new client device */
+			heci_bus_new_client(dev);
+
 		return 0;
 	}
 
 	dev->me_clients[client_num].client_id = next_client_index;
 	dev->me_clients[client_num].heci_flow_ctrl_creds = 0;
 
+#ifndef DEBUG_FW_BOOT_SEQ
+	dev->print_log(dev, "%s(): retrieving real fw client #%d properties\n", __func__, client_num);
 	heci_hbm_hdr(heci_hdr, len);
 	prop_req = (struct hbm_props_request *)data;
 
@@ -242,8 +270,15 @@ static int heci_hbm_prop_req(struct heci_device *dev)
 		heci_reset(dev, 1);
 		return -EIO;
 	}
+#endif
 
 	dev->me_client_index = next_client_index;
+
+#ifdef DEBUG_FW_BOOT_SEQ
+	dev->print_log(dev, "%s(): retrieving static fw client #%d properties\n", __func__, client_num);
+	heci_hbm_dispatch(dev, (struct heci_bus_message *)static_fw_cl_props[client_num]);
+#endif
+
 	return 0;
 }
 
@@ -575,6 +610,20 @@ void heci_hbm_dispatch(struct heci_device *dev, struct heci_bus_message *hdr)
 		props_res = (struct hbm_props_response *)heci_msg;
 		me_client = &dev->me_clients[dev->me_client_presentation_num];
 
+#ifdef DUMP_CL_PROP
+		/* DEBUG -- dump complete response */
+		do {
+			int	i;
+
+			dev->print_log(dev, "%s(): HOST_CLIENT_PROPERTIES_RES_CMD, client# = %d props: ", __func__, dev->me_client_presentation_num);
+			for (i = 0; i < sizeof(struct hbm_props_response); ++i)
+				dev->print_log(dev, "%02X ", *(((unsigned char *)props_res) + i));
+			
+			dev->print_log(dev, "\n");
+			
+		} while (0);
+#endif
+
 		if (props_res->status || !dev->me_clients) {
 			dev_err(&dev->pdev->dev, "reset: properties response hbm wrong status.\n");
 			heci_reset(dev, 1);
@@ -582,7 +631,7 @@ void heci_hbm_dispatch(struct heci_device *dev, struct heci_bus_message *hdr)
 		}
 
 		if (me_client->client_id != props_res->address) {
-			dev_err(&dev->pdev->dev, "reset: host properties response address mismatch\n");
+			dev_err(&dev->pdev->dev, "reset: host properties response address mismatch [%02X %02X]\n", me_client->client_id, props_res->address);
 			heci_reset(dev, 1);
 			return;
 		}
@@ -612,8 +661,10 @@ void heci_hbm_dispatch(struct heci_device *dev, struct heci_bus_message *hdr)
 		} while (0);
 #endif
 
+#if 0
 		/* Add new client device */
 		heci_bus_new_client(dev);
+#endif
 
 		/* request property for the next client */
 		heci_hbm_prop_req(dev);
@@ -688,6 +739,8 @@ void	recv_hbm(struct heci_device *dev, struct heci_msg_hdr *heci_hdr)
 
 	dev->ops->read(dev, rd_msg_buf, heci_hdr->length);
 
+	dev->print_log(dev, "%s(): HBM command %02X\n", __func__, heci_msg->hbm_cmd);
+
 	/* Flow control - handle in place */
 	if (heci_msg->hbm_cmd == HECI_FLOW_CONTROL_CMD) {
 		struct hbm_flow_control *flow_control = (struct hbm_flow_control *)heci_msg;
diff --git a/drivers/misc/heci/heci-hid-client.c b/drivers/misc/heci/heci-hid-client.c
index 52dccfc..78f1389 100644
--- a/drivers/misc/heci/heci-hid-client.c
+++ b/drivers/misc/heci/heci-hid-client.c
@@ -388,6 +388,7 @@ void workqueue_init_function(struct work_struct *work)
 	struct hostif_msg	*msg = (struct hostif_msg *)buf;
 	int	i;
 	struct heci_device	*dev;
+	int	retry_count;
 
 	ISH_DBG_PRINT(KERN_ALERT "[ish client driver] %s() in workqueue func, continue initialization process\n", __func__);
 	g_ish_print_log(KERN_ALERT "[ish client driver] %s() in workqueue func, continue initialization process\n", __func__);
@@ -443,8 +444,25 @@ void workqueue_init_function(struct work_struct *work)
 
 	rv = 0;
 
-	if (!enum_devices_done)
-		wait_event_timeout(init_wait, enum_devices_done, 30 * HZ);
+	retry_count = 0;
+printk(KERN_ALERT "[hid-ish]: going to send HOSTIF_DM_ENUM_DEVICES\n");
+g_ish_print_log(KERN_ALERT "[hid-ish]: going to send HOSTIF_DM_ENUM_DEVICES\n");
+	while (!enum_devices_done && retry_count < 10) {
+		wait_event_timeout(init_wait, enum_devices_done, 3 * HZ);
+		++retry_count;
+printk(KERN_ALERT "[hid-ish]: enum_devices_done = %d, retry_count = %d\n", enum_devices_done, retry_count);
+g_ish_print_log(KERN_ALERT "[hid-ish]: enum_devices_done = %d, retry_count = %d\n", enum_devices_done, retry_count);
+		if (!enum_devices_done) {
+			/* Send HOSTIF_DM_ENUM_DEVICES */
+			memset(msg, 0, sizeof(struct hostif_msg));
+			msg->hdr.command = HOSTIF_DM_ENUM_DEVICES;
+			len = sizeof(struct hostif_msg);
+			rv = heci_cl_send(hid_heci_cl, buf, len);
+printk(KERN_ALERT "[hid-ish]: heci_cl_send() returns %d\n", rv);
+g_ish_print_log(KERN_ALERT "[hid-ish]: heci_cl_send() returns %d\n", rv);
+		}
+	}
+	printk(KERN_ALERT "[hid-ish]: enum_devices_done = %d, retry_count = %d\n", enum_devices_done, retry_count);
 
 	if (!enum_devices_done) {
 		printk(KERN_ERR "[ish client driver]: timed out waiting for enum_devices_done\n");
@@ -540,8 +558,8 @@ static int __init ish_init(void)
 	int	rv;
 	struct workqueue_struct *workqueue_for_init;
 
-	ISH_INFO_PRINT(KERN_ALERT "[hid-ish]: %s():+++ [Build" BUILD_ID "]\n", __func__);
-	g_ish_print_log(KERN_ALERT "[hid-ish]: %s():+++ [Build" BUILD_ID "]\n", __func__);
+	ISH_INFO_PRINT(KERN_ERR "[hid-ish]: %s():+++ [Build" BUILD_ID "]\n", __func__);
+	g_ish_print_log(KERN_ERR "[hid-ish]: %s():+++ [Build" BUILD_ID "]\n", __func__);
 /*----------------------*/
 /*return 0;*/
 /*----------------------*/
@@ -553,12 +571,12 @@ static int __init ish_init(void)
 	/* 7/7/2014: in order to not stick Android boot, from here & below needs to run in work queue and here we should return rv */
 	/****************************************************************/
 	workqueue_for_init = create_workqueue("workqueue_for_init");
-	INIT_WORK(&my_work, workqueue_init_function);
-	queue_work(workqueue_for_init, &my_work);
+        INIT_WORK(&my_work, workqueue_init_function);
+        queue_work(workqueue_for_init, &my_work);
 
-	ISH_DBG_PRINT(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
+        ISH_DBG_PRINT(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
         g_ish_print_log(KERN_ALERT "[ish client driver] %s() enqueue init_work function\n", __func__);
-
+	
 	return rv;
 	/****************************************************************/
 
diff --git a/drivers/misc/heci/hw-ish.c b/drivers/misc/heci/hw-ish.c
index 2fb9e4b..b1ec579 100644
--- a/drivers/misc/heci/hw-ish.c
+++ b/drivers/misc/heci/hw-ish.c
@@ -462,11 +462,13 @@ irqreturn_t ish_irq_handler(int irq, void *dev_id)
 
 	/* HECI bus message */
 	if (!heci_hdr->host_addr && !heci_hdr->me_addr) {
+		g_ish_print_log(KERN_ALERT "%s(): received HBM\n", __func__);
 		recv_hbm(dev, heci_hdr);
 		goto	eoi;
 
 	} else {
 		/* HECI client message */
+		g_ish_print_log(KERN_ALERT "%s(): received HECI client message\n", __func__);
 		recv_heci_cl_msg(dev, heci_hdr);
 		goto	eoi;
 	}
diff --git a/drivers/misc/heci/pci-ish.c b/drivers/misc/heci/pci-ish.c
index e2dc4ae..ed46d42 100644
--- a/drivers/misc/heci/pci-ish.c
+++ b/drivers/misc/heci/pci-ish.c
@@ -512,8 +512,8 @@ static int ish_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	struct workqueue_struct *workqueue_for_init;
 	my_work_t *work;
 
-	ISH_INFO_PRINT(KERN_ALERT "[heci-ish]: %s():+++ [Build "BUILD_ID "]\n", __func__);
-	ISH_INFO_PRINT(KERN_ALERT "[heci-ish] %s() running on %s revision [%02X]\n", __func__,
+	ISH_INFO_PRINT(KERN_ERR "[heci-ish]: %s():+++ [Build "BUILD_ID "]\n", __func__);
+	ISH_INFO_PRINT(KERN_ERR "[heci-ish] %s() running on %s revision [%02X]\n", __func__,
 		pdev->revision == REVISION_ID_CHT_A0 || (pdev->revision & REVISION_ID_SI_MASK) == REVISION_ID_CHT_A0_SI ? "CHT A0" :
 		pdev->revision == REVISION_ID_CHT_B0 || (pdev->revision & REVISION_ID_SI_MASK) == REVISION_ID_CHT_Bx_SI ? "CHT B0" : "Unknown", pdev->revision);
 #if defined (SUPPORT_Ax_ONLY)
diff --git a/drivers/misc/heci/platform-config.h b/drivers/misc/heci/platform-config.h
index 43ff745..de799ed 100644
--- a/drivers/misc/heci/platform-config.h
+++ b/drivers/misc/heci/platform-config.h
@@ -17,7 +17,7 @@
 #define PLATFORM_CONFIG__H
 
 /* Build ID string */
-#define	BUILD_ID	"0110-imin-support-fixed-hid-client-init"
+#define	BUILD_ID	"0117-imin-support-hid-client-startup-fix"
 
 #define	ISH_DEBUG	0
 #if ISH_DEBUG
-- 
1.7.9.5

