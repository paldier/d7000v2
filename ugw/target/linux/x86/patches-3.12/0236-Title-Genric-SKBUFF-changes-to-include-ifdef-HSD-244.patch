From 2f20d50c9268dba3b0add9b5201265d09731265b Mon Sep 17 00:00:00 2001
From: chandrap <prakash1.chandra@intel.com>
Date: Tue, 3 Nov 2015 13:49:44 -0700
Subject: [PATCH] Title: Genric SKBUFF changes to include #ifdef HSD#244296
 Issue: HSD:244296 IssueType: Defect Symptom: linux/skbuff.h
 changes interfere with -Werror=undef flag RootCause: used
 #if rather than #ifdef Resolution: change #ifdef flag
 Impact: none.

---
 include/linux/skbuff.h |    8 +++-----
 net/core/skbuff.c      |   14 +++++++-------
 2 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 01a8847..9649347 100755
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -296,11 +296,9 @@ enum {
 /*
     return pointer to pp_packet_info struct within the skb
 */
-#if PUMA7_OR_NEWER_SOC_TYPE
+#ifdef CONFIG_TI_PACKET_PROCESSOR  
 #define SKB_GET_PP_INFO_P(skb)          (skb->pp_packet_info)
-#else
-#define SKB_GET_PP_INFO_P(skb)          (&skb->pp_packet_info)
-#endif
+#endif 
 
 #endif /* CONFIG_TI_PACKET_PROCESSOR */
 
@@ -710,7 +708,7 @@ extern void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);
 extern bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
 			     bool *fragstolen, int *delta_truesize);
 
-#if CONFIG_TI_PACKET_PROCESSOR &&  PUMA7_OR_NEWER_SOC_TYPE 
+#ifdef CONFIG_TI_PACKET_PROCESSOR  
 extern void* __alloc_skb_pp_packet_info(void);
 extern void kfree_pp_packet_info(void *pp_info);
 #endif
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 9d2156e..16cac68 100755
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -88,7 +88,7 @@
 int skb_init_intel(struct sk_buff *skb);
 struct kmem_cache *skbuff_head_cache __read_mostly;
 static struct kmem_cache *skbuff_fclone_cache __read_mostly;
-#if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+#ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
 struct kmem_cache *skbuff_pp_info_cache __read_mostly;
 #endif
 
@@ -198,7 +198,7 @@ out:
 }
 
 
-#if PUMA7_OR_NEWER_SOC_TYPE
+#ifdef PUMA7_OR_NEWER_SOC_TYPE
 void __init intel_cache_init(void)
 {
 #ifdef CONFIG_TI_PACKET_PROCESSOR
@@ -241,7 +241,7 @@ EXPORT_SYMBOL(kfree_pp_packet_info);
  */
 int skb_init_intel(struct sk_buff *skb)
 {
-#if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+#ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
     skb->pp_packet_info = __alloc_skb_pp_packet_info();
     if (!skb->pp_packet_info)
     {
@@ -634,7 +634,7 @@ static void kfree_skbmem(struct sk_buff *skb)
     {
 	case SKB_FCLONE_UNAVAILABLE:
         {
-        #if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
             kfree_pp_packet_info( skb->pp_packet_info );
         #endif
 		kmem_cache_free(skbuff_head_cache, skb);
@@ -645,7 +645,7 @@ static void kfree_skbmem(struct sk_buff *skb)
 		fclone_ref = (atomic_t *) (skb + 2);
 		if (atomic_dec_and_test(fclone_ref))
         {
-        #if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
             kfree_pp_packet_info( (skb  )->pp_packet_info );
             kfree_pp_packet_info( (skb+1)->pp_packet_info );
         #endif
@@ -664,7 +664,7 @@ static void kfree_skbmem(struct sk_buff *skb)
 
 		if (atomic_dec_and_test(fclone_ref))
         {
-        #if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
             kfree_pp_packet_info( (skb  )->pp_packet_info );
             kfree_pp_packet_info( (skb-1)->pp_packet_info );
         #endif
@@ -3250,7 +3250,7 @@ void __init skb_init(void)
 						0,
 						SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 						NULL);
-#if PUMA7_OR_NEWER_SOC_TYPE
+#ifdef PUMA7_OR_NEWER_SOC_TYPE 
     intel_cache_init();
 #endif
 }
-- 
1.7.9.5

