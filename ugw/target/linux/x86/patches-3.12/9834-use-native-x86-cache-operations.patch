# HG changeset patch
# Parent 3f263d02a842905e53c6bab339cc5b119302b42d
diff --git a/arch/x86/NetIP_SubSystem/netip_mem_util.c b/arch/x86/NetIP_SubSystem/netip_mem_util.c
--- a/arch/x86/NetIP_SubSystem/netip_mem_util.c
+++ b/arch/x86/NetIP_SubSystem/netip_mem_util.c
@@ -63,6 +63,7 @@
  */
 #include <linux/kernel.h>
 #include <asm/io.h>
+#include <asm/cacheflush.h>
 #include <linux/netip_mem_util.h>
 #include <linux/netip_subsystem.h>
 
@@ -243,49 +244,6 @@ EXPORT_SYMBOL(netip_mmio_to_physical);
 
 void cache_flush_buffer(void *bufptr, int size)
 {
-    /*************************************************************************
-     * Make sure we have a valid size.
-     * size is going to be used like an array index so decrement by 1.
-     *************************************************************************/
-    if (size <= 0)
-    {
-        return;
-    }
-    else
-    {
-        size -=1;
-    }
-
-    // Align to cache line boundries by expanding VA range
-    {
-        /* How far is the first byte of the buffer from the beginning of the cache line? */
-        int alignment_fixup = (int)bufptr & (CACHE_LINE_SIZE - 1);
-
-        /* Adjust bufptr to the beginning of the first cache line in the buffer. */
-        bufptr = (void*)((int)bufptr - alignment_fixup);
-
-        /* Adjust size to the end of the last cache line in the buffer. */
-        size += alignment_fixup;
-        pr_debug("Fixup value = %d, Modified Target = %p\n",  alignment_fixup, bufptr);
-    }
-
-    asm(
-            "movl %0, %%edi			#bufptr\n\t"
-            "movl %1, %%ecx 		#size\n\t"
-
-            "mfence\n\t"
-            "next:\n\t"
-            "clflush (%%edi, %%ecx)	#flush the cache line\n\t"
-
-            "subl $64, %%ecx		#decrement size by a cache-line\n\t"
-            "jge next\n\t"
-            "mfence\n\t"
-            :
-            :"g"(bufptr),
-            "g"(size)
-            :"edi", "ecx"
-       );
-
-    return;
+	clflush_cache_range(bufptr, size);
 }
 EXPORT_SYMBOL(cache_flush_buffer);
diff --git a/include/linux/avalanche/generic/pal_cppi41.h b/include/linux/avalanche/generic/pal_cppi41.h
--- a/include/linux/avalanche/generic/pal_cppi41.h
+++ b/include/linux/avalanche/generic/pal_cppi41.h
@@ -83,6 +83,7 @@
 #ifndef CONFIG_ARM_AVALANCHE_SOC
 #include <linux/avalanche/puma7/puma7_defs.h>
 #include <linux/avalanche/generic/avalanche_pdsp_api.h>
+#include <asm/cacheflush.h>
 #endif
 
 #include <linux/avalanche/generic/_tistdtypes.h>
@@ -489,10 +490,10 @@ typedef enum desc_type
 /* convert DDR virtual address to DDR physical address */
 #define PAL_CPPI4_VIRT_2_PHYS(addr)                        (netip_mmio_to_physical(addr))  /* X86 implementation here */
 /* force writing to HW */
-#define PAL_CPPI4_CACHE_WRITEBACK(addr, size)          cache_flush_buffer(addr, size)     /* X86 cache writeback implementation here */
+#define PAL_CPPI4_CACHE_WRITEBACK(addr, size)          clflush_cache_range(addr, size)     /* X86 cache writeback implementation here */
 /* force reading from HW and not from cache */
-#define PAL_CPPI4_CACHE_WRITEBACK_INVALIDATE(addr, size)  cache_flush_buffer(addr, size)   /* X86 cache invalidate implementation here */
-#define PAL_CPPI4_CACHE_INVALIDATE(addr, size)  cache_flush_buffer(addr, size)   /* X86 cache invalidate implementation here */
+#define PAL_CPPI4_CACHE_WRITEBACK_INVALIDATE(addr, size)  clflush_cache_range(addr, size)   /* X86 cache invalidate implementation here */
+#define PAL_CPPI4_CACHE_INVALIDATE(addr, size)  clflush_cache_range(addr, size)   /* X86 cache invalidate implementation here */
 
 /**
  *  \brief PAL CPPI4.1 Initialization.
