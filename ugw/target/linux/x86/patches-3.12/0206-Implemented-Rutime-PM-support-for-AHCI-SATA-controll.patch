From eeffd9a759e6b7a1e579b7e8dd331bd4ab01c1ce Mon Sep 17 00:00:00 2001
From: Priyalee Kushwaha <priyalee.kushwaha@intel.com>
Date: Wed, 14 Oct 2015 10:36:07 -0700
Subject: [PATCH] Implemented Rutime PM support for AHCI SATA controller

---
 drivers/ata/ahci.c        |  115 +++++++++++++++++++++++++++++++++------------
 drivers/ata/libata-core.c |   22 +++++++--
 2 files changed, 105 insertions(+), 32 deletions(-)

diff --git a/drivers/ata/ahci.c b/drivers/ata/ahci.c
index dc11b7a..6a6bf0e 100644
--- a/drivers/ata/ahci.c
+++ b/drivers/ata/ahci.c
@@ -46,6 +46,7 @@
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_cmnd.h>
 #include <linux/libata.h>
+#include <linux/pm_runtime.h>
 #include "ahci.h"
 
 #define DRV_NAME	"ahci"
@@ -82,13 +83,16 @@ enum board_ids {
 };
 
 static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent);
+static void ahci_remove_one(struct pci_dev *pdev);
 static int ahci_vt8251_hardreset(struct ata_link *link, unsigned int *class,
 				 unsigned long deadline);
 static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 				unsigned long deadline);
 #ifdef CONFIG_PM
-static int ahci_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg);
-static int ahci_pci_device_resume(struct pci_dev *pdev);
+static int ahci_pci_device_suspend(struct device *dev);
+static int ahci_pci_device_resume(struct device *dev);
+static int ahci_pci_device_resume_common(struct device *dev);
+static int ahci_pci_device_runtime_idle(struct device *dev);
 #endif
 
 static struct scsi_host_template ahci_sht = {
@@ -474,15 +478,23 @@ static const struct pci_device_id ahci_pci_tbl[] = {
 	{ }	/* terminate list */
 };
 
+static struct dev_pm_ops ahci_pci_pm_ops = {
+	.suspend		= ahci_pci_device_suspend,
+	.resume			= ahci_pci_device_resume,
+	.runtime_suspend	= ahci_pci_device_suspend,
+	.runtime_resume		= ahci_pci_device_resume_common,
+	.runtime_idle		= ahci_pci_device_runtime_idle,
+};
 
 static struct pci_driver ahci_pci_driver = {
 	.name			= DRV_NAME,
 	.id_table		= ahci_pci_tbl,
 	.probe			= ahci_init_one,
-	.remove			= ata_pci_remove_one,
+	.remove			= ahci_remove_one,
 #ifdef CONFIG_PM
-	.suspend		= ahci_pci_device_suspend,
-	.resume			= ahci_pci_device_resume,
+	.driver = {
+		.pm = &ahci_pci_pm_ops
+	},
 #endif
 };
 
@@ -641,37 +653,44 @@ static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 }
 
 #ifdef CONFIG_PM
-static int ahci_pci_device_suspend(struct pci_dev *pdev, pm_message_t mesg)
+static int ahci_pci_device_suspend_common(struct pci_dev *pdev, pm_message_t mesg)
 {
-	struct ata_host *host = pci_get_drvdata(pdev);
+	struct ata_host *host = dev_get_drvdata(&pdev->dev);
 	struct ahci_host_priv *hpriv = host->private_data;
 	void __iomem *mmio = hpriv->mmio;
 	u32 ctl;
-
-	if (mesg.event & PM_EVENT_SUSPEND &&
-	    hpriv->flags & AHCI_HFLAG_NO_SUSPEND) {
+	
+	/* AHCI spec rev1.1 section 8.3.3:
+	 * Software must disable interrupts prior to requesting a
+	 * transition of the HBA to D3 state.
+	 */
+	ctl = readl(mmio + HOST_CTL);
+	ctl &= ~HOST_IRQ_EN;
+	writel(ctl, mmio + HOST_CTL);
+	readl(mmio + HOST_CTL); /* flush */
+	return ata_pci_device_suspend(pdev, mesg);	
+}
+static int ahci_pci_device_suspend(struct device *dev)
+{
+	struct ata_host *host = dev_get_drvdata(dev);
+	struct ahci_host_priv *hpriv = host->private_data;
+	struct pci_dev *pdev = to_pci_dev(dev);
+	u32 ctl;
+	
+	if(pm_runtime_suspended(dev))
+		return 0;
+	if (hpriv->flags & AHCI_HFLAG_NO_SUSPEND) {
 		dev_err(&pdev->dev,
 			"BIOS update required for suspend/resume\n");
 		return -EIO;
 	}
-
-	if (mesg.event & PM_EVENT_SLEEP) {
-		/* AHCI spec rev1.1 section 8.3.3:
-		 * Software must disable interrupts prior to requesting a
-		 * transition of the HBA to D3 state.
-		 */
-		ctl = readl(mmio + HOST_CTL);
-		ctl &= ~HOST_IRQ_EN;
-		writel(ctl, mmio + HOST_CTL);
-		readl(mmio + HOST_CTL); /* flush */
-	}
-
-	return ata_pci_device_suspend(pdev, mesg);
+	return ahci_pci_device_suspend_common(pdev, PMSG_SUSPEND);
 }
 
-static int ahci_pci_device_resume(struct pci_dev *pdev)
+static int ahci_pci_device_resume_common(struct device *dev)
 {
-	struct ata_host *host = pci_get_drvdata(pdev);
+	struct ata_host *host = dev_get_drvdata(dev);
+	struct pci_dev *pdev = to_pci_dev(dev);
 	int rc;
 
 	rc = ata_pci_device_do_resume(pdev);
@@ -690,6 +709,25 @@ static int ahci_pci_device_resume(struct pci_dev *pdev)
 
 	return 0;
 }
+
+static int  ahci_pci_device_resume(struct device *dev)
+{
+	int rc;
+	
+	rc = ahci_pci_device_resume_common(dev);
+	if(!rc)
+	{
+		pm_runtime_disable(dev);
+		pm_runtime_set_active(dev);
+		pm_runtime_enable(dev);
+	}
+	return rc;
+}
+static int ahci_pci_device_runtime_idle(struct device *dev)
+{
+	return pm_runtime_suspend(dev);
+}
+
 #endif
 
 static int ahci_configure_dma_masks(struct pci_dev *pdev, int using_dac)
@@ -1407,15 +1445,34 @@ static int ahci_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)
 	ahci_pci_print_info(host);
 
 	pci_set_master(pdev);
-
 	if (hpriv->flags & AHCI_HFLAG_MULTI_MSI)
-		return ahci_host_activate(host, pdev->irq, n_msis);
-
-	return ata_host_activate(host, pdev->irq, ahci_interrupt, IRQF_SHARED,
+	{
+		rc = ahci_host_activate(host, pdev->irq, n_msis);
+		if(rc)
+			return rc;
+#ifdef CONFIG_PM
+		else 
+			goto pm_enable;
+#endif
+	}
+	rc = ata_host_activate(host, pdev->irq, ahci_interrupt, IRQF_SHARED,
 				 &ahci_sht);
+	if(rc)
+		return rc;
+#ifdef CONFIG_PM
+pm_enable:
+		pm_runtime_put_noidle(&pdev->dev);
+#endif
+	return 0;
 }
 
 module_pci_driver(ahci_pci_driver);
+static void ahci_remove_one(struct pci_dev *pdev)
+{      
+	pm_runtime_get_noresume(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+	ata_pci_remove_one(pdev);
+}
 
 MODULE_AUTHOR("Jeff Garzik");
 MODULE_DESCRIPTION("AHCI SATA low-level driver");
diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index c5d056e..92b0d5c 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -6134,6 +6134,18 @@ int ata_port_probe(struct ata_port *ap)
 	return rc;
 }
 
+static bool ata_device_probed(struct ata_port *ap)
+{
+	struct ata_link *link;
+	struct ata_device *dev;
+	
+	ata_for_each_link(link, ap, EDGE) {
+                ata_for_each_dev(dev, link, ENABLED) {
+			return true;
+		}
+	}
+	return false;
+}
 
 static void async_port_probe(void *data, async_cookie_t cookie)
 {
@@ -6153,10 +6165,15 @@ static void async_port_probe(void *data, async_cookie_t cookie)
 
 	/* in order to keep device order, we need to synchronize at this point */
 	async_synchronize_cookie(cookie);
-
-	ata_scsi_scan_host(ap, 1);
+        if(ata_device_probed(ap))
+		ata_scsi_scan_host(ap, 1);
+	else
+	{
+		pm_runtime_idle(&ap->scsi_host->shost_gendev);
+	}
 }
 
+
 /**
  *	ata_host_register - register initialized ATA host
  *	@host: ATA host to register
@@ -6439,7 +6456,6 @@ void ata_pci_device_do_suspend(struct pci_dev *pdev, pm_message_t mesg)
 int ata_pci_device_do_resume(struct pci_dev *pdev)
 {
 	int rc;
-
 	pci_set_power_state(pdev, PCI_D0);
 	pci_restore_state(pdev);
 
-- 
1.7.9.5

