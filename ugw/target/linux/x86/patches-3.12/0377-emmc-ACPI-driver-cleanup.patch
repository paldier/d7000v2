From d0dbeb88bd9e55064aa36de463ccfa9136536cd4 Mon Sep 17 00:00:00 2001
From: Bryce Poole <Bryce.Poole@intel.com>
Date: Mon, 14 Mar 2016 08:52:20 -0700
Subject: [PATCH] emmc: ACPI driver cleanup

- Moved the HW Mutex flag to quirks2 to remove the probe function.
- Created a slot structure for emmc2.
- Fixed whitespace and line lengths.
---
 drivers/mmc/host/sdhci-acpi.c |   83 ++++++++++++++++++-----------------------
 drivers/mmc/host/sdhci-pci.c  |    4 --
 include/linux/mmc/sdhci.h     |   10 ++---
 3 files changed, 42 insertions(+), 55 deletions(-)

diff --git a/drivers/mmc/host/sdhci-acpi.c b/drivers/mmc/host/sdhci-acpi.c
index 4c917bd..8f427bf 100644
--- a/drivers/mmc/host/sdhci-acpi.c
+++ b/drivers/mmc/host/sdhci-acpi.c
@@ -112,20 +112,20 @@ static void sdhci_acpi_int_hw_reset(struct sdhci_host *host)
 
 void cgm_write_l(struct sdhci_host *host, u32 val, int reg)
 {
-    if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
-        writel(val, host->ioaddr + reg);
+	if (!(host->flags & SDHCI_DISABLE_REGISTER_WRITE))
+		writel(val, host->ioaddr + reg);
 }
 
 void cgm_write_w(struct sdhci_host *host, u16 val, int reg)
 {
-    if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
-        writew(val, host->ioaddr + reg);
+	if (!(host->flags & SDHCI_DISABLE_REGISTER_WRITE))
+		writew(val, host->ioaddr + reg);
 }
 
 void cgm_write_b(struct sdhci_host *host, u8 val, int reg)
 {
-    if ((host->flags & SDHCI_DISABLE_REGISTER_WRITE) == 0)
-        writeb(val, host->ioaddr + reg);
+	if (!(host->flags & SDHCI_DISABLE_REGISTER_WRITE))
+		writeb(val, host->ioaddr + reg);
 }
 
 static const struct sdhci_ops sdhci_acpi_ops_dflt = {
@@ -137,7 +137,7 @@ static const struct sdhci_ops sdhci_acpi_ops_int = {
 	.hw_reset   = sdhci_acpi_int_hw_reset,
 };
 
-static const struct sdhci_ops sdhci_acpi_ops_int_cgm = {
+static const struct sdhci_ops sdhci_acpi_ops_int_cgm_emmc = {
 	.enable_dma = sdhci_acpi_enable_dma,
 	.hw_reset   = sdhci_acpi_int_hw_reset,
 #ifdef CONFIG_HW_MUTEXES
@@ -151,8 +151,8 @@ static const struct sdhci_acpi_chip sdhci_acpi_chip_int = {
 	.ops = &sdhci_acpi_ops_int,
 };
 
-static const struct sdhci_acpi_chip sdhci_acpi_chip_int_cgm = {
-	.ops = &sdhci_acpi_ops_int_cgm,
+static const struct sdhci_acpi_chip sdhci_acpi_chip_int_cgm_emmc = {
+	.ops = &sdhci_acpi_ops_int_cgm_emmc,
 };
 
 /*
@@ -179,31 +179,9 @@ static int sdhci_acpi_probe_slot(struct platform_device *pdev)
 	return 0;
 }
 
-static int sdhci_acpi_cgm_emmc_probe_slot(struct platform_device *pdev)
-{
-	struct sdhci_acpi_host *c = platform_get_drvdata(pdev);
-	struct sdhci_host *host;
-
-	if (!c || !c->host)
-		return 0;
-
-	host = c->host;
-	host->mmc->qos = kzalloc(sizeof(struct pm_qos_request), GFP_KERNEL);
-	pm_qos_add_request(host->mmc->qos, PM_QOS_CPU_DMA_LATENCY,
-					PM_QOS_DEFAULT_VALUE);
-
-#ifdef CONFIG_HW_MUTEXES
-	/* First eMMC controller is shared with NetIP subsystem */
-	host->flags |= SDHCI_SUPPORT_HW_MUTEX;
-#endif
-
-	return 0;
-}
-
 static int sdhci_acpi_sdio_probe_slot(struct platform_device *pdev)
 {
 	struct sdhci_acpi_host *c = platform_get_drvdata(pdev);
-	struct sdhci_host *host;
 
 	if (!c || !c->host)
 		return 0;
@@ -245,20 +223,35 @@ static const struct sdhci_acpi_slot sdhci_acpi_slot_int_emmc = {
 	.probe_slot = sdhci_acpi_probe_slot,
 	.remove_slot = sdhci_acpi_remove_slot,
 };
-static const struct sdhci_acpi_slot sdhci_acpi_slot_int_cgm_emmc = {
-	.chip    = &sdhci_acpi_chip_int_cgm, // Adds IO accessors
+
+static const struct sdhci_acpi_slot sdhci_acpi_slot_int_cgm_emmc1 = {
+	.chip    = &sdhci_acpi_chip_int_cgm_emmc,
 	.caps    = MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE | MMC_CAP_HW_RESET
 		| MMC_CAP_1_8V_DDR,
 	.caps2   = MMC_CAP2_HC_ERASE_SZ | MMC_CAP2_POLL_R1B_BUSY |
 		MMC_CAP2_CACHE_CTRL | MMC_CAP2_HS200_1_8V_SDR |
 		MMC_CAP2_CAN_DO_CMDQ,
 	.flags   = SDHCI_ACPI_RUNTIME_PM,
-	.quirks2 = SDHCI_QUIRK2_TUNING_POLL | SDHCI_QUIRK2_PRESET_VALUE_BROKEN,
+	.quirks2 = SDHCI_QUIRK2_TUNING_POLL | SDHCI_QUIRK2_PRESET_VALUE_BROKEN
+		| SDHCI_QUIRK2_HW_MUTEX,
 	.pm_caps = MMC_PM_TUNING_AFTER_RTRESUME,
-	.probe_slot = sdhci_acpi_cgm_emmc_probe_slot,
+	.probe_slot = sdhci_acpi_probe_slot,
 	.remove_slot = sdhci_acpi_remove_slot,
 };
 
+static const struct sdhci_acpi_slot sdhci_acpi_slot_int_cgm_emmc2 = {
+	.chip    = &sdhci_acpi_chip_int_cgm_emmc,
+	.caps    = MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE | MMC_CAP_HW_RESET
+		| MMC_CAP_1_8V_DDR,
+	.caps2   = MMC_CAP2_HC_ERASE_SZ | MMC_CAP2_POLL_R1B_BUSY |
+		MMC_CAP2_CACHE_CTRL | MMC_CAP2_HS200_1_8V_SDR |
+		MMC_CAP2_CAN_DO_CMDQ,
+	.flags   = SDHCI_ACPI_RUNTIME_PM,
+	.quirks2 = SDHCI_QUIRK2_TUNING_POLL | SDHCI_QUIRK2_PRESET_VALUE_BROKEN,
+	.pm_caps = MMC_PM_TUNING_AFTER_RTRESUME,
+	.probe_slot = sdhci_acpi_probe_slot,
+	.remove_slot = sdhci_acpi_remove_slot,
+};
 
 static const struct sdhci_acpi_slot sdhci_acpi_slot_int_sdio = {
 	.quirks2 = SDHCI_QUIRK2_HOST_OFF_CARD_ON |
@@ -287,8 +280,8 @@ struct sdhci_acpi_uid_slot {
 static const struct sdhci_acpi_uid_slot sdhci_acpi_uids[] = {
 	{ "80860F14" , "1" , &sdhci_acpi_slot_int_emmc },
 	{ "80860F14" , "3" , &sdhci_acpi_slot_int_sd   },
-	{ "80862B94" , "1" , &sdhci_acpi_slot_int_cgm_emmc },
-	{ "80862B95" , "1" , &sdhci_acpi_slot_int_emmc },
+	{ "80862B94" , "1" , &sdhci_acpi_slot_int_cgm_emmc1 },
+	{ "80862B95" , "1" , &sdhci_acpi_slot_int_cgm_emmc2 },
 	{ "80862B96" , "1" , &sdhci_acpi_slot_int_sd   },
 	{ "INT33BB"  , "2" , &sdhci_acpi_slot_int_sdio },
 	{ "INT33BB"  , "3" , &sdhci_acpi_slot_int_sd   },
@@ -499,19 +492,17 @@ static int sdhci_acpi_probe(struct platform_device *pdev)
 	host->mmc->caps2 |= MMC_CAP2_NO_PRESCAN_POWERUP;
 	
 #ifdef CONFIG_HW_MUTEXES
+	if (SDHCI_HOST_SUPPORTS_HW_MUTEX(host)) {
+		MMC_LOCK_HW_MUTEX(host->mmc);
 
-	MMC_LOCK_HW_MUTEX(host->mmc);
-
-    host->flags |= SDHCI_DISABLE_REGISTER_WRITE;
-	err = sdhci_add_host(host);
-    host->flags &= ~SDHCI_DISABLE_REGISTER_WRITE;
-
-	MMC_UNLOCK_HW_MUTEX(host->mmc);
+		host->flags |= SDHCI_DISABLE_REGISTER_WRITE;
+		err = sdhci_add_host(host);
+		host->flags &= ~SDHCI_DISABLE_REGISTER_WRITE;
 
+		MMC_UNLOCK_HW_MUTEX(host->mmc);
+	}
 #else 
-
 	err = sdhci_add_host(host);
-
 #endif
 	
 	if (err)
diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index 76737f3..8db4d96 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -353,10 +353,6 @@ static int cgm_emmc_probe_shared_slot(struct sdhci_pci_slot *slot)
 				 MMC_CAP_HW_RESET;
 	slot->host->mmc->caps2 |= MMC_CAP2_HC_ERASE_SZ;
 	slot->hw_reset = sdhci_pci_int_hw_reset;
-#ifdef CONFIG_HW_MUTEXES
-    /* First eMMC controller is shared with NetIP subsystem */
-    slot->host->flags |= SDHCI_SUPPORT_HW_MUTEX;
-#endif
 	return 0;
 }
 
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index e36c87f..1e1231a 100755
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -105,6 +105,9 @@ struct sdhci_host {
 #define SDHCI_QUIRK2_BROKEN_HS200			(1<<6)
 #define SDHCI_QUIRK2_TUNING_POLL			(1<<7)
 #define SDHCI_QUIRK2_FAKE_VDD				(1<<8)
+/* Two or more processors access the controller, HW mutex is needed to avoid
+	control conflicts. */
+#define SDHCI_QUIRK2_HW_MUTEX               (1<<9)
 
 	int irq;		/* Device IRQ */
 	void __iomem *ioaddr;	/* Mapped address */
@@ -138,10 +141,6 @@ struct sdhci_host {
 #define SDHCI_SDIO_IRQ_ENABLED	(1<<9)	/* SDIO irq enabled */
 #define SDHCI_SDR104_NEEDS_TUNING (1<<10)	/* SDR104/HS200 needs tuning */
 #define SDHCI_USING_RETUNING_TIMER (1<<11)	/* Host is using a retuning timer for the card */
-#ifdef CONFIG_HW_MUTEXES
-#define SDHCI_SUPPORT_HW_MUTEX    (1<<15)
-  /* Two or more processors access the controller, HW mutex is needed to avoid control conflicts. */
-#endif  
 #define SDHCI_DISABLE_REGISTER_WRITE  (1<<16)
 	unsigned int version;	/* SDHCI spec. version */
 
@@ -204,7 +203,8 @@ struct sdhci_host {
 
 #ifdef CONFIG_HW_MUTEXES
 
-#define SDHCI_HOST_SUPPORTS_HW_MUTEX(sdhci) ((sdhci)->flags & SDHCI_SUPPORT_HW_MUTEX)
+#define SDHCI_HOST_SUPPORTS_HW_MUTEX(sdhci) \
+		((sdhci)->quirks2 & SDHCI_QUIRK2_HW_MUTEX)
 #define MMC_HOST_SUPPORTS_HW_MUTEX(mmc) SDHCI_HOST_SUPPORTS_HW_MUTEX( ((struct sdhci_host*)mmc->private))
 
 #define EMMC_HW_MUTEX_IS_LOCKED() hw_mutex_is_locked(HW_MUTEX_EMMC)
-- 
1.7.9.5

