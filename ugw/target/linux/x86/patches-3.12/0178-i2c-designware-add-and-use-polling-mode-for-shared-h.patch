From 9c52f0ef9db61c544f908e20ecaee918fae8eeee Mon Sep 17 00:00:00 2001
From: Zhang Yanmin <yanmin.zhang@intel.com>
Date: Fri, 16 Jan 2015 08:46:35 +0800
Subject: [PATCH] i2c: designware: add and use polling mode for shared host

1. Add and use polling mode
Polling mode is needed on Baytrail/Cherrytrail CR platform.
On these platforms, i2c controller may be shared with PUNIT.
There may be race condition between i2c driver and graphics
driver/PUNIT:
a. I2C Driver acquires semaphore.
b. I2C Driver sent I2C command waiting for complete,
process may be scheduled out.
c. Gen disables interrupts.
d. Gen wakes up clocks (clkstartreq 0=>1).
e. Punit see clkstartreq, need to raise VGG.
f. Punit waits for semaphore to be released from driver

At this point,
a. Punit is hung waiting for semaphore.
b. I2C driver can't release semaphore as interrupts are
disabled. It doesn't known command completed.
c. Gen is hung waiting for Punit to turn on clocks.
--by Ruesga, Christopher J <christopher.j.ruesga@intel.com>

This issue is hard to be fixed in graphic driver or PUNIT.
As a workaround, we disable irq in kernel i2c transaction and
use polling mode for i2c.

2. Add a msleep when kernel accesses shared i2c (PMIC)
When kernel accesses shared i2c, typically PMIC on CR boards,
punit might be unnable to get the i2c SEMA on time.
Basically, kernel accesses that i2c mostly for battery and
charger. Here we add a msleep before kernel accesses the shared
i2c.

Change-Id: Iec4121e8ddb725f76c3beb05fa7ca599e8680c5f
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-13447
Tracked-On: https://jira01.devtools.intel.com/browse/AKP-951
Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
Signed-off-by: Pan Xinhui <xinhuix.pan@intel.com>
Signed-off-by: Xiang Wang <xiang.a.wang@intel.com>
(cherry picked from commit 2fc8d6c396bba72e462607909b7453e41ee69ec4)

Signed-off-by: Brett T. Warden <brett.t.warden@intel.com>
---
 drivers/i2c/busses/i2c-designware-core.c    |   97 +++++++++++++++++++++++----
 drivers/i2c/busses/i2c-designware-core.h    |    1 +
 drivers/i2c/busses/i2c-designware-platdrv.c |   40 +++++------
 3 files changed, 107 insertions(+), 31 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index 8ecaa1c..d625769 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -272,7 +272,10 @@ static void __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
 		 * transfer supported by the driver (for 400KHz this is
 		 * 25us) as described in the DesignWare I2C databook.
 		 */
-		usleep_range(25, 250);
+		if (dev->polling)
+			udelay(25);
+		else
+			usleep_range(25, 250);
 	} while (timeout--);
 
 	dev_warn(dev->dev, "timeout in %sabling adapter\n",
@@ -286,13 +289,32 @@ static void __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
  * This functions configures and enables the I2C master.
  * This function is called during I2C init function, and in case of timeout at
  * run time.
+ * This function must be wrapped by acquire_ownership for shared host.
  */
 int i2c_dw_init(struct dw_i2c_dev *dev)
 {
 	u32 input_clock_khz;
 	u32 hcnt, lcnt;
 	u32 reg;
-	int timeout = TIMEOUT;
+	int timeout = TIMEOUT, ret;
+
+	/*
+	 * acquire_ownership may disable local irq.
+	 * So release it first and do operations that might sleep.
+	 */
+	if (dev->shared_host && dev->release_ownership)
+		dev->release_ownership();
+
+	input_clock_khz = dev->get_clk_rate_khz(dev);
+
+	if (dev->shared_host && dev->acquire_ownership) {
+		ret = dev->acquire_ownership();
+		if (ret < 0) {
+			dev_WARN(dev->dev, "%s couldn't acquire ownership\n",
+					__func__);
+			return ret;
+		}
+	}
 
 	do {
 		/*
@@ -305,17 +327,21 @@ int i2c_dw_init(struct dw_i2c_dev *dev)
 		 */
 		dw_writel(dev, 0, DW_IC_RESETS);
 		dw_writel(dev, 0, DW_IC_GENERAL);
-		usleep_range(10, 100);
+		if (dev->polling)
+			udelay(10);
+		else
+			usleep_range(10, 100);
 		dw_writel(dev, DW_IC_RESETS_APB | DW_IC_RESETS_FUNC,
 				DW_IC_RESETS);
-		usleep_range(10, 100);
+		if (dev->polling)
+			udelay(10);
+		else
+			usleep_range(10, 100);
 	} while (timeout--);
 
 	if (unlikely(timeout == 0))
 		dev_err(dev->dev, "controller time out\n");
 
-	input_clock_khz = dev->get_clk_rate_khz(dev);
-
 	reg = dw_readl(dev, DW_IC_COMP_TYPE);
 	if (reg == ___constant_swab32(DW_IC_COMP_TYPE_VALUE)) {
 		/* Configure register endianess access */
@@ -406,7 +432,11 @@ static int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *dev)
 			return -ETIMEDOUT;
 		}
 		timeout--;
-		usleep_range(1000, 1100);
+		if (dev->polling) {
+			/* Wait less if it's a polling */
+			udelay(25);
+		} else
+			usleep_range(1000, 1100);
 	}
 
 	return 0;
@@ -451,7 +481,8 @@ static void i2c_dw_xfer_init(struct dw_i2c_dev *dev)
 
 	/* Clear and enable interrupts */
 	i2c_dw_clear_int(dev);
-	dw_writel(dev, DW_IC_INTR_DEFAULT_MASK, DW_IC_INTR_MASK);
+	if (!dev->polling)
+		dw_writel(dev, DW_IC_INTR_DEFAULT_MASK, DW_IC_INTR_MASK);
 }
 
 /*
@@ -563,7 +594,8 @@ i2c_dw_xfer_msg(struct dw_i2c_dev *dev)
 	if (dev->msg_err)
 		intr_mask = 0;
 
-	dw_writel(dev, intr_mask,  DW_IC_INTR_MASK);
+	if (!dev->polling)
+		dw_writel(dev, intr_mask, DW_IC_INTR_MASK);
 }
 
 static void
@@ -628,6 +660,39 @@ static int i2c_dw_handle_tx_abort(struct dw_i2c_dev *dev)
 }
 
 /*
+ * Return value resembles wait_for_completion_timeout.
+ */
+static int i2c_dw_xfer_polling(struct dw_i2c_dev *dev)
+{
+	int ret = 1, timeout = 100000 /* 1 second timeout */;
+	u32 stat = 0;
+
+	while (--timeout) {
+		stat = dw_readl(dev, DW_IC_RAW_INTR_STAT);
+		/* If error occurs, set cmd_err and go out. */
+		if (stat & DW_IC_INTR_TX_ABRT) {
+			dev->cmd_err |= DW_IC_ERR_TX_ABRT;
+			dev->abort_source = dw_readl(dev, DW_IC_TX_ABRT_SOURCE);
+			dev->status = STATUS_IDLE;
+			goto out;
+		}
+
+		i2c_dw_read(dev);
+		i2c_dw_xfer_msg(dev);
+
+		if (stat & DW_IC_INTR_STOP_DET)
+			goto out;
+
+		udelay(10);
+	}
+
+	if (timeout ==  0)
+		ret = 0;
+out:
+	return ret;
+}
+
+/*
  * Prepare controller for a transaction and call i2c_dw_xfer_msg
  */
 int
@@ -639,6 +704,9 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	dev_dbg(dev->dev, "%s: msgs: %d\n", __func__, num);
 
 	mutex_lock(&dev->lock);
+	if (dev->shared_host)
+		usleep_range(10000, 12000);
+
 	pm_runtime_get_sync(dev->dev);
 
 	INIT_COMPLETION(dev->cmd_complete);
@@ -657,7 +725,7 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 		ret = dev->acquire_ownership();
 		if (ret < 0) {
 			dev_WARN(dev->dev, "couldnt acquire ownership\n");
-			goto done;
+			goto out;
 		}
 	}
 
@@ -668,8 +736,12 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	/* start the transfers */
 	i2c_dw_xfer_init(dev);
 
-	/* wait for tx to complete */
-	ret = wait_for_completion_timeout(&dev->cmd_complete, 3 * HZ);
+	if (dev->polling)
+		ret = i2c_dw_xfer_polling(dev);
+	else
+		/* wait for tx to complete */
+		ret = wait_for_completion_timeout(&dev->cmd_complete, 3 * HZ);
+
 	if (ret == 0) {
 		dev_err(dev->dev, "controller timed out\n");
 		/* i2c_dw_init implicitly disables the adapter */
@@ -709,6 +781,7 @@ done:
 	if (dev->shared_host && dev->release_ownership)
 		dev->release_ownership();
 
+out:
 	pm_runtime_mark_last_busy(dev->dev);
 	pm_runtime_put_autosuspend(dev->dev);
 	mutex_unlock(&dev->lock);
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index afa7b2f..ad55ca8 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -105,6 +105,7 @@ struct dw_i2c_dev {
 	u16			fs_hcnt;
 	u16			fs_lcnt;
 	int			shared_host;
+	int                     polling;
 	int			(*acquire_ownership) (void);
 	int			(*release_ownership) (void);
 };
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 91093a4..d58c89d 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -247,6 +247,7 @@ static int dw_i2c_acpi_configure(struct platform_device *pdev)
 	if (shared_host != 0) {
 		dev_info(&pdev->dev, "Share controller with PUNIT\n");
 		dev->shared_host = 1;
+		dev->polling = 1;
 		dev->acquire_ownership = dw_i2c_acquire_ownership;
 		dev->release_ownership = dw_i2c_release_ownership;
 	}
@@ -337,11 +338,26 @@ static int dw_i2c_probe(struct platform_device *pdev)
 		dev->adapter.nr = pdev->id;
 	}
 
+	if (dev->shared_host && dev->acquire_ownership) {
+		r = dev->acquire_ownership();
+		if (r < 0) {
+			dev_WARN(dev->dev, "%s couldn't acquire ownership\n",
+					__func__);
+			return r;
+		}
+	}
 	r = i2c_dw_init(dev);
-	if (r)
+	if (r) {
+		if (dev->shared_host && dev->release_ownership)
+			dev->release_ownership();
 		return r;
+	}
 
 	i2c_dw_disable_int(dev);
+
+	if (dev->shared_host && dev->release_ownership)
+		dev->release_ownership();
+
 	r = devm_request_irq(&pdev->dev, dev->irq, i2c_dw_isr, IRQF_SHARED,
 			pdev->name, dev);
 	if (r) {
@@ -409,19 +425,12 @@ static int dw_i2c_suspend(struct device *dev)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct dw_i2c_dev *i_dev = platform_get_drvdata(pdev);
 
-	if (i_dev->shared_host && i_dev->acquire_ownership) {
-		if (i_dev->acquire_ownership() < 0) {
-			dev_WARN(i_dev->dev, "Couldn't acquire ownership\n");
-			return 0;
-		}
-	}
+	if (i_dev->polling)
+		return 0;
 
 	i2c_dw_disable(i_dev);
 	clk_disable_unprepare(i_dev->clk);
 
-	if (i_dev->shared_host && i_dev->release_ownership)
-		i_dev->release_ownership();
-
 	return 0;
 }
 
@@ -430,19 +439,12 @@ static int dw_i2c_resume(struct device *dev)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct dw_i2c_dev *i_dev = platform_get_drvdata(pdev);
 
-	if (i_dev->shared_host && i_dev->acquire_ownership) {
-		if (i_dev->acquire_ownership() < 0) {
-			dev_WARN(i_dev->dev, "Couldn't acquire ownership\n");
-			return 0;
-		}
-	}
+	if (i_dev->polling)
+		return 0;
 
 	clk_prepare_enable(i_dev->clk);
 	i2c_dw_init(i_dev);
 
-	if (i_dev->shared_host && i_dev->release_ownership)
-		i_dev->release_ownership();
-
 	return 0;
 }
 #endif
-- 
1.7.9.5

