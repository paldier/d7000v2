diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/include/net/cfg80211.h b/include/net/cfg80211.h
--- a/include/net/cfg80211.h	2015-11-11 15:50:05.905695900 +0000
+++ b/include/net/cfg80211.h	2016-01-19 10:08:58.720403400 +0000
@@ -1929,6 +1929,50 @@ struct cfg80211_update_ft_ies_params {
 };
 
 /**
+ * struct cfg80211_dscp_exception - DSCP exception
+ *
+ * @dscp: DSCP value that does not adhere to the user priority range definition
+ * @up: user priority value to which the corresponding DSCP value belongs
+ */
+struct cfg80211_dscp_exception {
+	u8 dscp;
+	u8 up;
+};
+
+/**
+ * struct cfg80211_dscp_range - DSCP range definition for user priority
+ *
+ * @low: lowest DSCP value of this user priority range, inclusive
+ * @high: highest DSCP value of this user priority range, inclusive
+ */
+struct cfg80211_dscp_range {
+	u8 low;
+	u8 high;
+};
+
+/* QoS Map Set element length defined in IEEE Std 802.11-2012, 8.4.2.97 */
+#define IEEE80211_QOS_MAP_MAX_EX	21
+#define IEEE80211_QOS_MAP_LEN_MIN	16
+#define IEEE80211_QOS_MAP_LEN_MAX \
+	(IEEE80211_QOS_MAP_LEN_MIN + 2 * IEEE80211_QOS_MAP_MAX_EX)
+
+/**
+ * struct cfg80211_qos_map - QoS Map Information
+ *
+ * This struct defines the Interworking QoS map setting for DSCP values
+ *
+ * @num_des: number of DSCP exceptions (0..21)
+ * @dscp_exception: optionally up to maximum of 21 DSCP exceptions from
+ *	the user priority DSCP range definition
+ * @up: DSCP range definition for a particular user priority
+ */
+struct cfg80211_qos_map {
+	u8 num_des;
+	struct cfg80211_dscp_exception dscp_exception[IEEE80211_QOS_MAP_MAX_EX];
+	struct cfg80211_dscp_range up[8];
+};
+
+/**
  * struct cfg80211_ops - backend description for wireless configuration
  *
  * This struct is registered by fullmac card drivers and/or wireless stacks
@@ -2169,7 +2213,18 @@ struct cfg80211_update_ft_ies_params {
  *	reliability. This operation can not fail.
  * @set_coalesce: Set coalesce parameters.
  *
- * @channel_switch: initiate channel-switch procedure (with CSA)
+ * @channel_switch: initiate channel-switch procedure (with CSA). Driver is
+ *	responsible for veryfing if the switch is possible. Since this is
+ *	inherently tricky driver may decide to disconnect an interface later
+ *	with cfg80211_stop_iface(). This doesn't mean driver can accept
+ *	everything. It should do it's best to verify requests and reject them
+ *	as soon as possible.
+ *
+ * @set_qos_map: Set QoS mapping information to the driver
+ *
+ * @set_ap_chanwidth: Set the AP (including P2P GO) mode channel width for the
+ *	given interface This is used e.g. for dynamic HT 20/40 MHz channel width
+ *	changes during the lifetime of the BSS.
  */
 struct cfg80211_ops {
 	int	(*suspend)(struct wiphy *wiphy, struct cfg80211_wowlan *wow);
@@ -2412,6 +2467,11 @@ struct cfg80211_ops {
 	int	(*channel_switch)(struct wiphy *wiphy,
 				  struct net_device *dev,
 				  struct cfg80211_csa_settings *params);
+
+	int     (*set_qos_map)(struct wiphy *wiphy,
+			       struct net_device *dev,
+			       struct cfg80211_qos_map *qos_map);
+
 	int	(*set_ap_chanwidth)(struct wiphy *wiphy, struct net_device *dev,
 					struct cfg80211_chan_def *chandef);
 };
@@ -4298,6 +4358,20 @@ void cfg80211_radar_event(struct wiphy *
 void cfg80211_cac_event(struct net_device *netdev,
 			enum nl80211_radar_event event, gfp_t gfp);
 
+/**
+ * cfg80211_cac_event_2 - Channel availability check (CAC) event
+ * @netdev: network device
+ * @chandef: chandef for the current channel
+ * @event: type of event
+ * @gfp: context flags
+ *
+ * This function is called when a Channel availability check (CAC) is finished
+ * or aborted. This must be called to notify the completion of a CAC process,
+ * also by full-MAC drivers.
+ */
+void cfg80211_cac_event_2(struct net_device *netdev,
+			const struct cfg80211_chan_def *chandef,
+			enum nl80211_radar_event event, gfp_t gfp);
 
 /**
  * cfg80211_cqm_pktloss_notify - notify userspace about packetloss to peer
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/include/net/genetlink.h b/include/net/genetlink.h
--- a/include/net/genetlink.h	2014-04-03 08:32:32.000000000 +0000
+++ b/include/net/genetlink.h	2015-11-11 15:50:45.933698300 +0000
@@ -51,10 +51,10 @@ struct genl_family {
 	unsigned int		maxattr;
 	bool			netnsok;
 	bool			parallel_ops;
-	int			(*pre_doit)(struct genl_ops *ops,
+	int			(*pre_doit)(const struct genl_ops *ops,
 					    struct sk_buff *skb,
 					    struct genl_info *info);
-	void			(*post_doit)(struct genl_ops *ops,
+	void			(*post_doit)(const struct genl_ops *ops,
 					     struct sk_buff *skb,
 					     struct genl_info *info);
 	struct nlattr **	attrbuf;	/* private */
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/chan.c b/net/wireless/chan.c
--- a/net/wireless/chan.c	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/chan.c	2015-11-11 15:50:45.961701100 +0000
@@ -250,6 +250,8 @@ static void cfg80211_set_chans_dfs_state
 		if (!c || !(c->flags & IEEE80211_CHAN_RADAR))
 			continue;
 
+		printk(KERN_DEBUG "Setting the DFS state of channel %hu to 0x%02x\n",
+		       c->hw_value, dfs_state);
 		c->dfs_state = dfs_state;
 		c->dfs_state_entered = jiffies;
 	}
@@ -277,6 +279,32 @@ void cfg80211_set_dfs_state(struct wiphy
 				     width, dfs_state);
 }
 
+static u32 cfg80211_get_start_freq(u32 center_freq,
+				   u32 bandwidth)
+{
+	u32 start_freq;
+
+	if (bandwidth <= 20)
+		start_freq = center_freq;
+	else
+		start_freq = center_freq - bandwidth/2 + 10;
+
+	return start_freq;
+}
+
+static u32 cfg80211_get_end_freq(u32 center_freq,
+				 u32 bandwidth)
+{
+	u32 end_freq;
+
+	if (bandwidth <= 20)
+		end_freq = center_freq;
+	else
+		end_freq = center_freq + bandwidth/2 - 10;
+
+	return end_freq;
+}
+
 static int cfg80211_get_chans_dfs_required(struct wiphy *wiphy,
 					    u32 center_freq,
 					    u32 bandwidth)
@@ -329,6 +357,81 @@ int cfg80211_chandef_dfs_required(struct
 					       width);
 }
 
+
+static int cfg80211_get_chans_dfs_usable(struct wiphy *wiphy,
+					 u32 center_freq,
+					 u32 bandwidth)
+{
+	struct ieee80211_channel *c;
+	u32 freq, start_freq, end_freq;
+	int count = 0;
+
+	start_freq = cfg80211_get_start_freq(center_freq, bandwidth);
+	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
+
+	/*
+	 * Check entire range of channels for the bandwidth.
+	 * Check all channels are DFS channels (DFS_USABLE or
+	 * DFS_AVAILABLE). Return number of usable channels
+	 * (require CAC). Allow DFS and non-DFS channel mix.
+	 */
+	for (freq = start_freq; freq <= end_freq; freq += 20) {
+		c = ieee80211_get_channel(wiphy, freq);
+		if (!c)
+			return -EINVAL;
+
+		if (c->flags & IEEE80211_CHAN_DISABLED)
+			return -EINVAL;
+
+		if (c->flags & IEEE80211_CHAN_RADAR) {
+			if (c->dfs_state == NL80211_DFS_UNAVAILABLE)
+				return -EINVAL;
+
+			if (c->dfs_state == NL80211_DFS_USABLE)
+				count++;
+		}
+	}
+
+	return count;
+}
+
+bool cfg80211_chandef_dfs_usable(struct wiphy *wiphy,
+				 const struct cfg80211_chan_def *chandef)
+{
+	int width;
+	int r1, r2 = 0;
+
+	if (WARN_ON(!cfg80211_chandef_valid(chandef)))
+		return false;
+
+	width = cfg80211_chandef_get_width(chandef);
+	if (width < 0)
+		return false;
+
+	r1 = cfg80211_get_chans_dfs_usable(wiphy, chandef->center_freq1,
+					  width);
+
+	if (r1 < 0)
+		return false;
+
+	switch (chandef->width) {
+	case NL80211_CHAN_WIDTH_80P80:
+		WARN_ON(!chandef->center_freq2);
+		r2 = cfg80211_get_chans_dfs_usable(wiphy,
+						   chandef->center_freq2,
+						   width);
+		if (r2 < 0)
+			return false;
+		break;
+	default:
+		WARN_ON(chandef->center_freq2);
+		break;
+	}
+
+	return (r1 + r2 > 0);
+}
+
+
 static bool cfg80211_secondary_chans_ok(struct wiphy *wiphy,
 					u32 center_freq, u32 bandwidth,
 					u32 prohibited_flags)
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/core.h b/net/wireless/core.h
--- a/net/wireless/core.h	2015-11-11 15:46:04.151522900 +0000
+++ b/net/wireless/core.h	2015-11-11 15:50:45.977702700 +0000
@@ -389,6 +389,19 @@ int cfg80211_can_use_iftype_chan(struct
 int cfg80211_chandef_dfs_required(struct wiphy *wiphy,
 				  const struct cfg80211_chan_def *c);
 
+/**
+ * cfg80211_chandef_dfs_usable - checks if chandef is DFS usable
+ * @wiphy: the wiphy to validate against
+ * @chandef: the channel definition to check
+ *
+ * Checks if chandef is usable and we can/need start CAC on such channel.
+ *
+ * Return: Return true if all channels available and at least
+ *	   one channel require CAC (NL80211_DFS_USABLE)
+ */
+bool cfg80211_chandef_dfs_usable(struct wiphy *wiphy,
+				 const struct cfg80211_chan_def *chandef);
+
 void cfg80211_set_dfs_state(struct wiphy *wiphy,
 			    const struct cfg80211_chan_def *chandef,
 			    enum nl80211_dfs_state dfs_state);
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/mlme.c b/net/wireless/mlme.c
--- a/net/wireless/mlme.c	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/mlme.c	2016-01-19 10:10:08.241098600 +0000
@@ -797,3 +797,39 @@ void cfg80211_cac_event(struct net_devic
 	nl80211_radar_notify(rdev, &chandef, event, netdev, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event);
+
+void cfg80211_cac_event_2(struct net_device *netdev,
+			const struct cfg80211_chan_def *chandef,
+			enum nl80211_radar_event event, gfp_t gfp)
+{
+	struct wireless_dev *wdev = netdev->ieee80211_ptr;
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_dev(wiphy);
+	unsigned long timeout;
+
+	trace_cfg80211_cac_event(netdev, event);
+
+	if (WARN_ON(!wdev->cac_started))
+		return;
+
+	if (WARN_ON(!wdev->channel))
+		return;
+
+	switch (event) {
+	case NL80211_RADAR_CAC_FINISHED:
+		timeout = wdev->cac_start_time +
+			  msecs_to_jiffies(IEEE80211_DFS_MIN_CAC_TIME_MS);
+		WARN_ON(!time_after_eq(jiffies, timeout));
+		cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_AVAILABLE);
+		break;
+	case NL80211_RADAR_CAC_ABORTED:
+		break;
+	default:
+		WARN_ON(1);
+		return;
+	}
+	wdev->cac_started = false;
+
+	nl80211_radar_notify(rdev, chandef, event, netdev, gfp);
+}
+EXPORT_SYMBOL(cfg80211_cac_event_2);
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/nl80211.c b/net/wireless/nl80211.c
--- a/net/wireless/nl80211.c	2015-11-11 15:50:05.948700200 +0000
+++ b/net/wireless/nl80211.c	2015-11-11 15:50:46.013706300 +0000
@@ -1439,7 +1439,10 @@ static int nl80211_send_wiphy(struct cfg
 #ifdef CONFIG_NL80211_TESTMODE
 		CMD(testmode_cmd, TESTMODE);
 #endif
-
+		if (state->split) {
+			if (dev->wiphy.flags & WIPHY_FLAG_HAS_CHANNEL_SWITCH)
+				CMD(channel_switch, CHANNEL_SWITCH);
+		}
 #undef CMD
 
 		if (dev->ops->connect || dev->ops->auth) {
@@ -2218,7 +2221,7 @@ static inline u64 wdev_id(struct wireles
 }
 
 static int nl80211_send_chandef(struct sk_buff *msg,
-				 struct cfg80211_chan_def *chandef)
+				const struct cfg80211_chan_def *chandef)
 {
 	WARN_ON(!cfg80211_chandef_valid(chandef));
 
@@ -5645,37 +5648,59 @@ static int nl80211_start_radar_detection
 	struct cfg80211_chan_def chandef;
 	int err;
 
+	printk(KERN_INFO "Starting radar detection\n");
+
 	err = nl80211_parse_chandef(rdev, info, &chandef);
-	if (err)
+	if (err) {
+		printk(KERN_ERR "Could not parse the channel definition\n");
 		return err;
+	}
 
-	if (wdev->cac_started)
+	if (wdev->cac_started) {
+		printk(KERN_ERR "CAC already started\n");
 		return -EBUSY;
+	}
 
 	err = cfg80211_chandef_dfs_required(wdev->wiphy, &chandef);
-	if (err < 0)
+	if (err < 0) {
+		printk(KERN_ERR "Error looking for DFS-required channels\n");
 		return err;
+	}
 
-	if (err == 0)
+	if (err == 0) {
+		printk(KERN_ERR "No DFS-required channels found\n");
 		return -EINVAL;
+	}
 
+	/* 3.10.12 code:
 	if (chandef.chan->dfs_state != NL80211_DFS_USABLE)
 		return -EINVAL;
+	*/
+	if (!cfg80211_chandef_dfs_usable(wdev->wiphy, &chandef)) {
+		printk(KERN_ERR "Channels are not all in DFS_USABLE state\n");
+		return -EINVAL;
+	}
 
-	if (!rdev->ops->start_radar_detection)
+	if (!rdev->ops->start_radar_detection) {
+		printk(KERN_ERR "Device does not support radar detection\n");
 		return -EOPNOTSUPP;
+	}
 
 	err = cfg80211_can_use_iftype_chan(rdev, wdev, wdev->iftype,
 					   chandef.chan, CHAN_MODE_SHARED,
 					   BIT(chandef.width));
-	if (err)
+	if (err) {
+        printk(KERN_ERR "Interface type and channel compatibility check failed\n");
 		return err;
+    }
 
 	err = rdev->ops->start_radar_detection(&rdev->wiphy, dev, &chandef);
 	if (!err) {
 		wdev->channel = chandef.chan;
 		wdev->cac_started = true;
 		wdev->cac_start_time = jiffies;
+	} else {
+		printk(KERN_ERR "Start radar detection in device failed\n");
 	}
 	return err;
 }
@@ -10988,7 +11013,7 @@ EXPORT_SYMBOL(cfg80211_cqm_txe_notify);
 
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
-		     struct cfg80211_chan_def *chandef,
+		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
 		     struct net_device *netdev, gfp_t gfp)
 {
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/nl80211.h b/net/wireless/nl80211.h
--- a/net/wireless/nl80211.h	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/nl80211.h	2015-11-11 15:50:46.035708500 +0000
@@ -70,7 +70,7 @@ int nl80211_send_mgmt(struct cfg80211_re
 
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
-		     struct cfg80211_chan_def *chandef,
+		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
 		     struct net_device *netdev, gfp_t gfp);
 
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/util.c b/net/wireless/util.c
--- a/net/wireless/util.c	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/util.c	2015-11-11 15:50:46.047709700 +0000
@@ -1243,6 +1243,11 @@ int cfg80211_can_use_iftype_chan(struct
 	bool radar_required;
 	int i, j;
 
+	printk(KERN_DEBUG "%s: iftype=%u, chanmode=%u, "
+	       "radar_detect=0x%02x, center_freq=%hu\n",
+	       (wdev && wdev->netdev) ? wdev->netdev->name : "(null)", iftype, chanmode,
+	       radar_detect, chan ? chan->center_freq : 0);
+
 	ASSERT_RTNL();
 
 	if (WARN_ON(hweight32(radar_detect) > 1))
@@ -1299,6 +1304,8 @@ int cfg80211_can_use_iftype_chan(struct
 	}
 
 	list_for_each_entry(wdev_iter, &rdev->wdev_list, list) {
+		printk(KERN_DEBUG "wdev_iter=%s\n", wdev_iter->netdev->name);
+
 		if (wdev_iter == wdev)
 			continue;
 		if (wdev_iter->iftype == NL80211_IFTYPE_P2P_DEVICE) {
@@ -1333,8 +1340,11 @@ int cfg80211_can_use_iftype_chan(struct
 				if (!used_channels[i] || used_channels[i] == ch)
 					break;
 
-			if (i == CFG80211_MAX_NUM_DIFFERENT_CHANNELS)
+			if (i == CFG80211_MAX_NUM_DIFFERENT_CHANNELS) {
+				printk(KERN_ERR "Max number of different "
+				       "channels reached\n");
 				return -EBUSY;
+			}
 
 			if (used_channels[i] == NULL) {
 				used_channels[i] = ch;
@@ -1354,6 +1364,9 @@ int cfg80211_can_use_iftype_chan(struct
 	if (total == 1 && !radar_detect)
 		return 0;
 
+	printk(KERN_DEBUG "total=%u, n_iface_combinations=%u\n",
+	       total, rdev->wiphy.n_iface_combinations);
+
 	for (i = 0; i < rdev->wiphy.n_iface_combinations; i++) {
 		const struct ieee80211_iface_combination *c;
 		struct ieee80211_iface_limit *limits;
@@ -1384,8 +1397,11 @@ int cfg80211_can_use_iftype_chan(struct
 			}
 		}
 
-		if (radar_detect && !(c->radar_detect_widths & radar_detect))
+		if (radar_detect && !(c->radar_detect_widths & radar_detect)) {
+			printk(KERN_DEBUG "combination %u, radar detect_widths 0x%02x",
+			       i, c->radar_detect_widths);
 			goto cont;
+		}
 
 		/*
 		 * Finally check that all iftypes that we're currently
@@ -1393,8 +1409,11 @@ int cfg80211_can_use_iftype_chan(struct
 		 * aren't then we can't use this combination and have
 		 * to continue to the next.
 		 */
-		if ((all_iftypes & used_iftypes) != used_iftypes)
+		if ((all_iftypes & used_iftypes) != used_iftypes) {
+			printk(KERN_DEBUG "all_iftypes 0x%02x, used_iftypes 0x%02x",
+			       all_iftypes, used_iftypes);
 			goto cont;
+		}
 
 		/*
 		 * This combination covered all interface types and
@@ -1406,6 +1425,7 @@ int cfg80211_can_use_iftype_chan(struct
 		kfree(limits);
 	}
 
+	printk(KERN_ERR "No suitable interface combination found\n");
 	return -EBUSY;
 }
 
