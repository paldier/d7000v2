From 1b0a8255b2629ee7d12f625c23efb49c81458a16 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Wed, 14 Oct 2015 18:13:37 -0700
Subject: [PATCH] NetIp subsystem driver api names changed.

---
 arch/x86/NetIP_SubSystem/netip_subsystem_defs.h |    6 +-
 arch/x86/NetIP_SubSystem/netip_subsystem_lld.c  |  100 ++++++++++++-----------
 arch/x86/hw_mailbox/hw_mbox_drv.c               |   12 +--
 arch/x86/hw_mutex/hw_mutex_lld.c                |    4 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c |    6 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c |    4 +-
 include/linux/netip_subsystem.h                 |   94 ++++++++++-----------
 kernel/hwmutex.c                                |    8 +-
 8 files changed, 120 insertions(+), 114 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
index 58123ca..94ca6e8 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
@@ -100,9 +100,9 @@ struct net_subsystem_drv_data {
    uint32_t pending_arm11_interrupts;
    bool netss_driver_initialized;
    void __iomem *bridge_reg_base; /* Mapped io bridge register base address mmio region2 of Net-IP  */
-   netss_subdevice_mmio_t subdev_mmios[NETSS_SUBDEVICE_MAX];
-   netss_subdev_irq_info_t irqs[NETSS_SUBDEVICE_MAX];
-   netss_subdev_irq_info_t arm11_irqs[NETSS_MAX_ARM11_INTR];
+   netss_dev_info_t subdev_mmios[NETSS_DEV_MAX];
+   netss_interrupt_info_t irqs[NETSS_INTERUPT_MAX];
+   netss_interrupt_info_t arm11_irqs[NETSS_INTERUPT_ARM11_MAX];
    struct pci_dev *dev;
    spinlock_t irq_lock;
    struct mutex netss_lock;
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
index ccde131..c49222a 100755
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -70,10 +70,16 @@ void netss_stop_handshake_thread(void);
 struct net_subsystem_drv_data *pnetss_drv_data;
 extern netss_sysfs_attributes_info_t g_netss_sysfs_attributes_info;
 
-void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, netss_subdev_irq_info_t *irq_info)
+void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_interrupt_info_t *irq_info)
 {
    spin_lock(&pnetss_drv_data->irq_lock);
-   if(intrpt != NETSS_ARM11_INTRPT) 
+   if(intrpt > NETSS_INTERUPT_MAX)
+   {
+      printk("Registering for Invalid NETIP interrupt %d\n", intrpt);
+      spin_unlock(&pnetss_drv_data->irq_lock);
+      return;
+   }
+   if(intrpt != NETSS_INTERUPT_ARM11) 
    {
         pnetss_drv_data->irqs[intrpt].func = irq_info->func;
         pnetss_drv_data->irqs[intrpt].args = irq_info->args;
@@ -85,12 +91,12 @@ void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, ne
     }
     if(irq_info->func != NULL)
     {
-        if(intrpt != NETSS_ARM11_INTRPT)
+        if(intrpt != NETSS_INTERUPT_ARM11)
         {
             if(pnetss_drv_data->pending_interrupts & (1<<intrpt))
             {
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
-                netss_ack_irq(intrpt);
+                netss_interrupt_ack(intrpt);
                 pnetss_drv_data->pending_interrupts &= ~(1<<intrpt);
                 printk("Cleared pending interrupt for device %d IIR %08x pending %08x\n", intrpt, 
                             __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET), 
@@ -106,7 +112,7 @@ void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, ne
                  *For ARM11 interrupt bundle this might hvae got cleared by some other irq handle */
                 if( __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET) & (1<<intrpt))
                 {
-                    netss_ack_irq(intrpt);   
+                    netss_interrupt_ack(intrpt);   
                 }
 
                 pnetss_drv_data->pending_arm11_interrupts &= ~(1<<arm11_int_id);
@@ -115,12 +121,12 @@ void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, ne
                                                             pnetss_drv_data->pending_arm11_interrupts);
             }
         }
-        netss_enable_irq(intrpt);
+        netss_interrupt_enable(intrpt);
     }
     spin_unlock(&pnetss_drv_data->irq_lock);
 }
 
-EXPORT_SYMBOL(netss_subdev_register_irq);
+EXPORT_SYMBOL(netss_interrupt_register);
 
 bool netss_driver_ready(void)
 {
@@ -133,50 +139,50 @@ bool netss_driver_ready(void)
 
 EXPORT_SYMBOL(netss_driver_ready);
 
-int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_mmio_t *mmio)
+int netss_device_get_info(netss_dev_t subdevice, netss_dev_info_t *mmio)
 {
    int ret = -1;
    switch (subdevice)
    {
-      case NETSS_HW_MUTEX:
-          mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HWMUTEX_MMIO_OFFSET;
-          mmio->size = NETSS_SUBDEV_HWMUTEX_MMIO_SIZE;
+      case NETSS_DEV_HW_MUTEX:
+          mmio->base = net_ip_mmios.region1_base + NETSS_DEV_HWMUTEX_MMIO_OFFSET;
+          mmio->size = NETSS_DEV_HWMUTEX_MMIO_SIZE;
           ret = 0;
       break;
-      case NETSS_HW_MAILBOX:
-          mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HWMBX_MMIO_OFFSET;
-          mmio->size = NETSS_SUBDEV_HWMBX_MMIO_SIZE;
+      case NETSS_DEV_HW_MAILBOX:
+          mmio->base = net_ip_mmios.region1_base + NETSS_DEV_HWMBX_MMIO_OFFSET;
+          mmio->size = NETSS_DEV_HWMBX_MMIO_SIZE;
           ret = 0;
       break;
-      case NETSS_PACKET_PROCESSOR1:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_PP1_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_PP1_MMIO_SIZE;
+      case NETSS_DEV_PACKET_PROCESSOR1:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_PP1_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_PP1_MMIO_SIZE;
          ret = 0;
       break; 
-      case NETSS_PACKET_PROCESSOR2:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_PP2_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_PP2_MMIO_SIZE;
+      case NETSS_DEV_PACKET_PROCESSOR2:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_PP2_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_PP2_MMIO_SIZE;
          ret = 0;
       break;
-      case NETSS_ATOM_INTC:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_ATOM_INTC_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_ATOM_INTC_MMIO_SIZE;
+      case NETSS_DEV_ATOM_INTC:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_ATOM_INTC_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_ATOM_INTC_MMIO_SIZE;
          ret = 0;
       break;
-      case NETSS_HW_COUNTERS:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HW_COUNTERS_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_HW_COUNTERS_MMIO_SIZE;
+      case NETSS_DEV_HW_COUNTERS:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_HW_COUNTERS_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_HW_COUNTERS_MMIO_SIZE;
          ret = 0;
       break;
-      case NETSS_MOCA:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_MOCA_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_MOCA_MMIO_SIZE;
+      case NETSS_DEV_MOCA:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_MOCA_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_MOCA_MMIO_SIZE;
          ret = 0;
       break;
 
-      case NETSS_GBE:
-         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_GBE_MMIO_OFFSET;
-         mmio->size = NETSS_SUBDEV_GBE_MMIO_SIZE;
+      case NETSS_DEV_GBE:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_GBE_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_GBE_MMIO_SIZE;
          ret = 0;
       break;
       default:
@@ -185,12 +191,12 @@ int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_
    return ret;  
 }
 
-EXPORT_SYMBOL(netss_get_subdevice_mmio_info);
+EXPORT_SYMBOL(netss_device_get_info);
 
-void netss_enable_irq(netss_interrupt_id_t intrpt)
+void netss_interrupt_enable(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTRPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX) 
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -201,12 +207,12 @@ void netss_enable_irq(netss_interrupt_id_t intrpt)
       printk(KERN_INFO "Enabling Net IP subdevice %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
    } 
 }
-EXPORT_SYMBOL(netss_enable_irq);
+EXPORT_SYMBOL(netss_interrupt_enable);
 
-void netss_disable_irq(netss_interrupt_id_t intrpt)
+void netss_interrupt_disable(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTRPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX) 
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -217,12 +223,12 @@ void netss_disable_irq(netss_interrupt_id_t intrpt)
       printk(KERN_INFO "Disabling Net IP interrupt id %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
    } 
 }
-EXPORT_SYMBOL(netss_disable_irq);
+EXPORT_SYMBOL(netss_interrupt_disable);
 
-void netss_ack_irq(netss_interrupt_id_t intrpt)
+void netss_interrupt_ack(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTRPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX) 
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -230,7 +236,7 @@ void netss_ack_irq(netss_interrupt_id_t intrpt)
    reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
    __raw_writel((reg_val & (1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
 }
-EXPORT_SYMBOL(netss_ack_irq);
+EXPORT_SYMBOL(netss_interrupt_ack);
 
 /*
  * Interrupt Handler
@@ -250,10 +256,10 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
     NETSS_DBG_PRINT("Net IP ISR called\n");
     /**Check for interrupts 0 to 7, 8th bit indicates GBE interrupt
      * which is handled by GBE driver. */
-    for(i=0; i<(NETSS_INTRPT_MAX-1); i++)
+    for(i=0; i<(NETSS_INTERUPT_MAX-1); i++)
     {
         if((reg_val >> i) & 1)  {
-            if(i != NETSS_ARM11_INTRPT) {
+            if(i != NETSS_INTERUPT_ARM11) {
                 if(pnet_ss->irqs[i].func != NULL) {
                     NETSS_DBG_PRINT("Interrupt of subdevice %d\n", i);
                     pnet_ss->irqs[i].func(irq, pnet_ss->irqs[i].args);
@@ -265,7 +271,7 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
                 }
             } else {
                 int j;
-                for( j = 0 ; j< NETSS_MAX_ARM11_INTR; j++) 
+                for( j = 0 ; j< NETSS_INTERUPT_ARM11_MAX; j++) 
                 {
                     if(avalanche_intc_get_status(j))
                     {
@@ -376,12 +382,12 @@ static int netss_probe(struct pci_dev *pdev,
       goto free_iomem;
    }
 
-   for(i=0; i<NETSS_SUBDEVICE_MAX;i++)
+   for(i=0; i<NETSS_INTERUPT_MAX;i++)
    {
       pnetss_drv_data->irqs[i].func = NULL;
       pnetss_drv_data->irqs[i].args = NULL;
    }
-   for(i=0; i<NETSS_ARM11_INTRPTS_MAX; i++)
+   for(i=0; i<NETSS_INTERUPT_ARM11_MAX; i++)
    {
       pnetss_drv_data->arm11_irqs[i].func = NULL;
       pnetss_drv_data->arm11_irqs[i].args = NULL;
diff --git a/arch/x86/hw_mailbox/hw_mbox_drv.c b/arch/x86/hw_mailbox/hw_mbox_drv.c
index d462a74..1450433 100644
--- a/arch/x86/hw_mailbox/hw_mbox_drv.c
+++ b/arch/x86/hw_mailbox/hw_mbox_drv.c
@@ -3689,7 +3689,7 @@ READ_INTERRUPT_STATUS_REGS:
 int hwMbox_drv_registerWithNetss(void)
 {
     int ret = -ENODEV;
-    netss_subdevice_mmio_t hwMbox_mmio;
+    netss_dev_info_t hwMbox_mmio;
 
     DPRINTK("About to register driver with Net Subsystem...");
 
@@ -3701,7 +3701,7 @@ int hwMbox_drv_registerWithNetss(void)
     }
 
     DPRINTK("Getting MMIO info...");
-    if(netss_get_subdevice_mmio_info(NETSS_HW_MAILBOX, &hwMbox_mmio))
+    if(netss_device_get_info(NETSS_DEV_HW_MAILBOX, &hwMbox_mmio))
     {
         PRINTK_ERR("Failed to get mmio info!");
         return -1;
@@ -4105,10 +4105,10 @@ static int __init hwMbox_drv_init(void)
     }
 #elif defined HW_MBOX_IS_APP_CPU
     {
-       netss_subdev_irq_info_t irq_info;
+       netss_interrupt_info_t irq_info;
        irq_info.func = &hwMbox_drv_isr;
        irq_info.args = &hwMboxDriverData;
-       netss_subdev_register_irq(NETSS_HW_MAILBOX, -1, &irq_info);
+       netss_interrupt_register(NETSS_INTERUPT_HWMBOX, -1, &irq_info);
     }
 #endif
 
@@ -4268,10 +4268,10 @@ static void __exit hwMbox_drv_exit(void)
 #if defined HW_MBOX_IS_NP_CPU
     free_irq(HW_MBOX_INT_LINE, NULL);
 #elif defined HW_MBOX_IS_APP_CPU
-    netss_subdev_irq_info_t irq_info;
+    netss_interrupt_info_t irq_info;
     irq_info.func = NULL;
     irq_info.args = NULL;
-    netss_subdev_register_irq(NETSS_HW_MAILBOX, -1, &irq_info);
+    netss_interrupt_register(NETSS_INTERUPT_HWMBOX, -1, &irq_info);
     iounmap(hwMboxDriverData.reg_base);
 #endif
    chnint_cleanup(HW_MBOX_CHANNEL_COUNT);
diff --git a/arch/x86/hw_mutex/hw_mutex_lld.c b/arch/x86/hw_mutex/hw_mutex_lld.c
index 730a933..ff1de2d 100644
--- a/arch/x86/hw_mutex/hw_mutex_lld.c
+++ b/arch/x86/hw_mutex/hw_mutex_lld.c
@@ -325,7 +325,7 @@ void hw_mutex_register_with_netss(void)
 {
    int i, ret = -ENODEV;
    bool use_sw_mutex_only;
-   netss_subdevice_mmio_t hwmutex_mmio;
+   netss_dev_info_t hwmutex_mmio;
 
    use_sw_mutex_only = !netss_driver_ready();
    if (use_sw_mutex_only) {
@@ -333,7 +333,7 @@ void hw_mutex_register_with_netss(void)
    }
 
    if (!use_sw_mutex_only) {
-       if (netss_get_subdevice_mmio_info(NETSS_HW_MUTEX, &hwmutex_mmio)) {
+       if (netss_device_get_info(NETSS_DEV_HW_MUTEX, &hwmutex_mmio)) {
           printk(KERN_INFO "HW MUTEX: could not get mmio info \n");
           return;
        }
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
index ea0372c..17ed34a 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -638,7 +638,7 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 			DWC_ETH_QOS_handle_eee_interrupt(pdata);
 		}
 	}
-	netss_ack_irq(NETSS_GBE_INTRPT);
+	netss_interrupt_ack(NETSS_INTERUPT_GBE);
 	DBGPR("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
 
 	return IRQ_HANDLED;
@@ -1464,7 +1464,7 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 		ret = -EBUSY;
 		goto err_irq_0;
 	}
-	netss_enable_irq(NETSS_GBE_INTRPT);
+	netss_interrupt_enable(NETSS_INTERUPT_GBE);
 
 	ret = desc_if->alloc_buff_and_desc(pdata);
 	if (ret < 0) {
@@ -1556,7 +1556,7 @@ static int DWC_ETH_QOS_close(struct net_device *dev)
 	struct desc_if_struct *desc_if = &pdata->desc_if;
 
 	DBGPR("-->DWC_ETH_QOS_close\n");
-	netss_disable_irq(NETSS_GBE_INTRPT);
+	netss_interrupt_disable(NETSS_INTERUPT_GBE);
 #ifdef GBE_POLLING
 	hrtimer_cancel(&pdata->gbe_timer);
 #endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
index 71491fb..b38921b 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -43,12 +43,12 @@
 static int DWC_ETH_QOS_init_general_gbe(void __iomem **gbe_base)
 {
    int ret = 1;
-   netss_subdevice_mmio_t gbe_mmio;
+   netss_dev_info_t gbe_mmio;
    void __iomem *reg_base = NULL, *btcfg = NULL;
    DBGPR("[GBE] Initializing General registers\n");
    if (!netss_driver_ready()) {
       printk(KERN_ALERT "[GBE] NetSS not ready!\n");
-   } else if (netss_get_subdevice_mmio_info(NETSS_GBE, &gbe_mmio)) {
+   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio)) {
       printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
    } else {
       unsigned int reg_val, reg_cfg;
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
index 6cb6746..a920018 100755
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -39,69 +39,69 @@
 #define NETIP_BRIDGE_ISR_OFFSET 0x202C
 #define NETIP_BRIDGE_IRQ_MASK 0x1FF
 
-#define NETSS_SUBDEV_HWMUTEX_MMIO_OFFSET (0x190000)
-#define NETSS_SUBDEV_HWMUTEX_MMIO_SIZE (0x10000)
-#define NETSS_SUBDEV_HWMBX_MMIO_OFFSET (0x1A0000)
-#define NETSS_SUBDEV_HWMBX_MMIO_SIZE (0x20000)
-#define NETSS_SUBDEV_PP1_MMIO_OFFSET (0x3000000)
-#define NETSS_SUBDEV_PP1_MMIO_SIZE (0x1000000)
-#define NETSS_SUBDEV_PP2_MMIO_OFFSET (0x9000000)
-#define NETSS_SUBDEV_PP2_MMIO_SIZE (0x1000000)
-#define NETSS_SUBDEV_ATOM_INTC_MMIO_OFFSET (0xE0000)
-#define NETSS_SUBDEV_ATOM_INTC_MMIO_SIZE (0x10000)
-#define NETSS_SUBDEV_HW_COUNTERS_MMIO_OFFSET (0x150000)
-#define NETSS_SUBDEV_HW_COUNTERS_MMIO_SIZE (0x10000)
-#define NETSS_SUBDEV_MOCA_MMIO_OFFSET (0xE800000)
-#define NETSS_SUBDEV_MOCA_MMIO_SIZE (0x800000)
-#define NETSS_SUBDEV_GBE_MMIO_OFFSET (0x318000)
-#define NETSS_SUBDEV_GBE_MMIO_SIZE (0x6000)
+#define NETSS_DEV_HWMUTEX_MMIO_OFFSET (0x190000)
+#define NETSS_DEV_HWMUTEX_MMIO_SIZE (0x10000)
+#define NETSS_DEV_HWMBX_MMIO_OFFSET (0x1A0000)
+#define NETSS_DEV_HWMBX_MMIO_SIZE (0x20000)
+#define NETSS_DEV_PP1_MMIO_OFFSET (0x3000000)
+#define NETSS_DEV_PP1_MMIO_SIZE (0x1000000)
+#define NETSS_DEV_PP2_MMIO_OFFSET (0x9000000)
+#define NETSS_DEV_PP2_MMIO_SIZE (0x1000000)
+#define NETSS_DEV_ATOM_INTC_MMIO_OFFSET (0xE0000)
+#define NETSS_DEV_ATOM_INTC_MMIO_SIZE (0x10000)
+#define NETSS_DEV_HW_COUNTERS_MMIO_OFFSET (0x150000)
+#define NETSS_DEV_HW_COUNTERS_MMIO_SIZE (0x10000)
+#define NETSS_DEV_MOCA_MMIO_OFFSET (0xE800000)
+#define NETSS_DEV_MOCA_MMIO_SIZE (0x800000)
+#define NETSS_DEV_GBE_MMIO_OFFSET (0x318000)
+#define NETSS_DEV_GBE_MMIO_SIZE (0x6000)
 
-#define NETSS_ARM11_INTRPTS_MAX (64)  /*ARM11 is a bundle of 64 interrupts */
+#define NETSS_INTERUPT_ARM11_MAX (64)  /*ARM11 is a bundle of 64 interrupts */
 
 typedef enum {
-   NETSS_HW_MAILBOX = 0,
-   NETSS_HW_MUTEX,
-   NETSS_PACKET_PROCESSOR1,
-   NETSS_PACKET_PROCESSOR2,
-   NETSS_ATOM_INTC,
-   NETSS_HW_COUNTERS,
-   NETSS_MOCA,
-   NETSS_GBE,
-   NETSS_SUBDEVICE_MAX
-}netss_subdevices_t;
+   NETSS_DEV_HW_MAILBOX = 0,
+   NETSS_DEV_HW_MUTEX,
+   NETSS_DEV_PACKET_PROCESSOR1,
+   NETSS_DEV_PACKET_PROCESSOR2,
+   NETSS_DEV_ATOM_INTC,
+   NETSS_DEV_HW_COUNTERS,
+   NETSS_DEV_MOCA,
+   NETSS_DEV_GBE,
+   NETSS_DEV_MAX
+}netss_dev_t;
 
 typedef enum {
-   NETSS_HWMBOX_INTRPT = 0,
-   NETSS_HWMUTEX_INTRPT,
-   NETSS_PP_WIFIPROXY1_INTRPT,
-   NETSS_PP_WIFIPROXY2_INTRPT,
-   NETSS_PP_DPIPROXY_INTRPT,
-   NETSS_PP_HOSTPROXY_INTRPT,
-   NETSS_ARM11_INTRPT,
-   NETSS_MOCA_INTRPT,
-   NETSS_GBE_INTRPT,
-   NETSS_INTRPT_MAX
-}netss_interrupt_id_t;
+   NETSS_INTERUPT_HWMBOX = 0,
+   NETSS_INTERUPT_HWMUTEX,
+   NETSS_INTERUPT_PP_WIFIPROXY1,
+   NETSS_INTERUPT_PP_WIFIPROXY2,
+   NETSS_INTERUPT_PP_DPIPROXY,
+   NETSS_INTERUPT_PP_HOSTPROXY,
+   NETSS_INTERUPT_ARM11,
+   NETSS_INTERUPT_MOCA,
+   NETSS_INTERUPT_GBE,
+   NETSS_INTERUPT_MAX
+}netss_interrupt_t;
 
 typedef irqreturn_t (* netss_subdevice_irq_func)(int irqnum, void *);
 
-typedef struct netss_subdev_irq_info {
+typedef struct netss_interrupt_info {
    netss_subdevice_irq_func func;
    void * args;
-}netss_subdev_irq_info_t;
+}netss_interrupt_info_t;
 
-typedef struct netss_subdevice_mmio {
+typedef struct netss_dev_info {
    unsigned long base;
    unsigned long size;
-}netss_subdevice_mmio_t;
+}netss_dev_info_t;
 
 
-void netss_subdev_register_irq(netss_interrupt_id_t intrpt, int arm11_int_id, netss_subdev_irq_info_t *irq_info);
+void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_interrupt_info_t *irq_info);
 bool netss_driver_ready(void);
-int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_mmio_t *mmio);
-void netss_enable_irq(netss_interrupt_id_t intrpt);
-void netss_disable_irq(netss_interrupt_id_t intrpt);
-void netss_ack_irq(netss_interrupt_id_t intrpt);
+int netss_device_get_info(netss_dev_t subdevice, netss_dev_info_t *mmio);
+void netss_interrupt_enable(netss_interrupt_t intrpt);
+void netss_interrupt_disable(netss_interrupt_t intrpt);
+void netss_interrupt_ack(netss_interrupt_t intrpt);
 
 #endif
 
diff --git a/kernel/hwmutex.c b/kernel/hwmutex.c
index 2c38520..f7d9e2b 100644
--- a/kernel/hwmutex.c
+++ b/kernel/hwmutex.c
@@ -439,10 +439,10 @@ int hw_mutex_register (struct hw_master *pmaster)
          return -ENODEV;
       }
 #elif CONFIG_X86_PUMA7
-     netss_subdev_irq_info_t irq_info;
+     netss_interrupt_info_t irq_info;
      irq_info.func = &hw_mutex_isr;
      irq_info.args = pmaster;
-     netss_subdev_register_irq(NETSS_HW_MUTEX, -1, &irq_info);
+     netss_interrupt_register(NETSS_INTERUPT_HWMUTEX, -1, &irq_info);
 #endif
    }
    return 0;
@@ -457,11 +457,11 @@ void hw_mutex_unregister(struct hw_master *pmaster)
         free_irq(pmaster->irq_num,(void *)pmaster);
     }
 #elif CONFIG_X86_PUMA7
-   netss_subdev_irq_info_t irq_info;
+   netss_interrupt_info_t irq_info;
    irq_info.func = NULL;
    irq_info.args = NULL;
    if (pmaster->mode != HW_MUTEX_POLLING)
-       netss_subdev_register_irq(NETSS_HW_MUTEX, -1, &irq_info);
+       netss_interrupt_register(NETSS_INTERUPT_HWMUTEX, -1, &irq_info);
 #endif
 
    hw_master_glob = NULL;
-- 
1.7.9.5

