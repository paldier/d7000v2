#LED support for EASY750 & HavenPark boards

diff --git a/arch/x86/platform/intel-ce2700/intel-ce2700.c b/arch/x86/platform/intel-ce2700/intel-ce2700.c
--- a/arch/x86/platform/intel-ce2700/intel-ce2700.c
+++ b/arch/x86/platform/intel-ce2700/intel-ce2700.c
@@ -17,12 +17,38 @@
 #include <linux/pci.h>
 #include <linux/platform_device.h>
 #include <linux/platform_data/intel-spi.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
 
 #define CE2700_SOC_DEVICE_ID       0x2B80
 #define CE2700_PCU_DEVFN           PCI_DEVFN(31, 0)
 #define CE2700_PCU_SPI_BAR_BASE    0x54
 #define CE2700_PCU_SPI_BAR_SIZE    0x200
 
+#define CGP_BOARD_ID    	0xE0
+#define EASY750_BOARD_ID        0xE5
+#define HVP_BOARD_ID    	0xE6
+
+u32 puma_board_id;
+
+static int __init early_parse_board_id(char *p);
+
+static int __init early_parse_board_id(char *p)
+{
+        unsigned long ret;
+        if (p) {
+                if (!kstrtol(p, 0, &ret)) {
+                        puma_board_id = ret;
+			printk("board_id : %d\n",puma_board_id);
+		}
+        }
+        return 0;
+}
+
+early_param("BoardID", early_parse_board_id);
+EXPORT_SYMBOL(puma_board_id);
+
 static struct intel_spi_boardinfo ce2700_pcu_spi_plat_data = {
 	.type = INTEL_SPI_BYT,
 };
@@ -42,6 +68,89 @@ static struct platform_device_info ce270
 	.size_data = sizeof(ce2700_pcu_spi_plat_data),
 };
 
+static struct gpio_led havenPark_leds[] = {
+	{
+		.name = "havenPark_red",
+		.gpio = 318,
+	},
+	{
+		.name = "havenPark_blue",
+		.gpio = 140,
+	},
+	{
+		.name = "havenPark_green",
+		.gpio = 141,
+		.default_trigger = "timer",
+	},
+
+};
+
+static struct gpio_led_platform_data havenPark_leds_data = {
+	.num_leds = ARRAY_SIZE(havenPark_leds),
+	.leds = havenPark_leds,
+};
+
+static struct platform_device havenPark_leds_dev = {
+	.name = "leds-gpio",
+	.id = -1,
+	.dev.platform_data = &havenPark_leds_data,
+};
+
+static struct __initdata platform_device *havenPark_devs[] = {
+	&havenPark_leds_dev,
+};
+
+static int __init ce2700_register_led()
+{
+	/* Setup LED control through leds-gpio driver */
+	return platform_add_devices(havenPark_devs, ARRAY_SIZE(havenPark_devs));
+}
+
+static struct i2c_board_info __initdata ce2700_i2c_board_info[] = {
+        {
+                I2C_BOARD_INFO("tmp102", 0x48),
+        },
+};
+
+static int __init ce2700_register_tmp102()
+{
+        /*Setup TMP102 temperature sensor*/
+        return i2c_register_board_info(0, ce2700_i2c_board_info,ARRAY_SIZE(ce2700_i2c_board_info));
+}
+
+#if defined (CONFIG_LEDS_GPIO) || defined (CONFIG_LEDS_GPIO_MODULE)
+/*
+ *  * * The actual linux gpio number depends on sequence of registration for each
+ *   * * pins in gpio-intelce2700.c.
+ *    * */
+static struct gpio_led ce2700_leds[] =
+{
+        { .name = "POWER_LED",            .gpio = 85 },
+        { .name = "VDSL_1_LED",           .gpio = 83 },
+        { .name = "VDSL_2_LED",           .gpio = 84 },
+        { .name = "LTE_LED",              .gpio = 86 },
+        { .name = "SFP_LED",              .gpio = 88 },
+        { .name = "FXS_1_LED",            .gpio = 90 },
+        { .name = "FXS_2_LED",            .gpio = 92 },
+        { .name = "WIFI_24G_LED",         .gpio = 87 },
+        { .name = "WIFI_5G_1_LED",        .gpio = 76 },
+        { .name = "WIFI_5G_2_LED",        .gpio = 82 }
+};
+
+static struct gpio_led_platform_data ce2700_led_data = {
+        .num_leds       = ARRAY_SIZE(ce2700_leds),
+        .leds           = ce2700_leds,
+};
+
+static struct platform_device ce2700_gpio_leds = {
+        .name           = "leds-gpio",
+        .id             = -1,
+        .dev            = {
+                .platform_data  = &ce2700_led_data,
+        },
+};
+#endif /* defined (CONFIG_LEDS_GPIO) || defined (CONFIG_LEDS_GPIO_MODULE) */
+
 static int __init ce2700_register_spi(struct pci_bus *root_bus)
 {
 	u32 spi_base;
@@ -56,6 +165,7 @@ static int __init ce2700_register_spi(st
 	return platform_device_register_full(&ce2700_pcu_spi);
 }
 
+
 static int __init intel_ce_platform_init(void)
 {
 	struct pci_bus *root_bus;
@@ -71,6 +181,17 @@ static int __init intel_ce_platform_init
 
 	switch (device_id) {
 	case CE2700_SOC_DEVICE_ID:
+#if defined (CONFIG_LEDS_GPIO) || defined (CONFIG_LEDS_GPIO_MODULE)
+		switch (puma_board_id)
+		{
+		case EASY750_BOARD_ID:
+        	platform_device_register(&ce2700_gpio_leds);
+			break;
+		case HVP_BOARD_ID:
+			ce2700_register_led();
+			break;
+		}
+#endif
 		return ce2700_register_spi(root_bus);
 
 	default:
diff --git a/drivers/leds/ledtrig-netdev.c b/drivers/leds/ledtrig-netdev.c
--- a/drivers/leds/ledtrig-netdev.c
+++ b/drivers/leds/ledtrig-netdev.c
@@ -266,7 +266,7 @@ static int netdev_trig_notify(struct not
 			      unsigned long evt,
 			      void *dv)
 {
-	struct net_device *dev = dv;
+	struct net_device *dev = netdev_notifier_info_to_dev(dv);
 	struct led_netdev_data *trigger_data = container_of(nb, struct led_netdev_data, notifier);
 
 	if (evt != NETDEV_UP && evt != NETDEV_DOWN && evt != NETDEV_CHANGE && evt != NETDEV_REGISTER && evt != NETDEV_UNREGISTER)
