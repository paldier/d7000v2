From 295dadcfa43504077cb93a8fae553c939ea84b82 Mon Sep 17 00:00:00 2001
From: Nagaraj S <sivasankaranx.nagaraj@intel.com>
Date: Tue, 22 Mar 2016 16:34:56 -0700
Subject: [PATCH] serial: HSU: Add UART RXD-pin wakeup mechanism

IssueID:   HSD# 245768
IssueType: Defect
Symptom:   UART device don't have independent wake up pin,
           should be woken up by incoming dummy RX data,
           also need to switch the UART pins to gpio
           function before suspended.
RootCause: Wakeup on RX mechanism was not handled.
Resolution: Add UART RXD-pin wakeup mechanism.
Test:      Ran a test to verify High speed UART read/write behavior.
Reviewer:  Warden Brett T
ReviewID:  CCID-132522

Change-Id: I80bcc1bd68b9c5bcab3bf0c368a10005d6727d4c
---
 drivers/tty/serial/hsu/hsu_plat.c |  166 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 165 insertions(+), 1 deletion(-)

diff --git a/drivers/tty/serial/hsu/hsu_plat.c b/drivers/tty/serial/hsu/hsu_plat.c
index 0e3d175..3438101 100644
--- a/drivers/tty/serial/hsu/hsu_plat.c
+++ b/drivers/tty/serial/hsu/hsu_plat.c
@@ -15,6 +15,7 @@
 #include <linux/io.h>
 #include <linux/pm_runtime.h>
 #include <linux/acpi.h>
+#include <linux/acpi_gpio.h>
 #include <linux/clk.h>
 #include <linux/gpio.h>
 #include <linux/delay.h>
@@ -31,6 +32,166 @@ enum {
 	hsu_chv,
 };
 
+static irqreturn_t wakeup_irq(int irq, void *data)
+{
+	struct uart_hsu_port *up = data;
+	struct hsu_port_cfg *cfg;
+	struct hsu_port_pin_cfg *pin_cfg;
+
+	if (!up || !up->port_cfg)
+		return IRQ_NONE;
+	cfg = up->port_cfg;
+	pin_cfg = &cfg->pin_cfg;
+	pm_runtime_get(up->dev);
+	set_bit(flag_active, &up->flags);
+	if (pin_cfg){
+		if (cfg->hw_set_rts && pin_cfg->wake_src == rxd_wake)
+			cfg->hw_set_rts(up, 1);
+	}
+	pm_runtime_put(up->dev);
+
+	return IRQ_HANDLED;
+}
+
+int cht_hw_set_rts(struct uart_hsu_port *up, int value)
+{
+	struct hsu_port_pin_cfg *pin_cfg;
+	int gpio, err = 0;
+
+	if (!up || !up->port_cfg)
+		return 0;
+
+	pin_cfg =  &up->port_cfg->pin_cfg;
+	if (!pin_cfg || pin_cfg->wake_src == no_wake)
+		return 0;
+
+	if (value) {
+		if (!pin_cfg->rts_gpio) {
+			gpio = acpi_get_gpio_by_index(up->dev, hsu_rts_idx, NULL);
+			if (gpio < 0) {
+				err = gpio;
+				goto out;
+			}
+			err = devm_gpio_request_one(up->dev, gpio, GPIOF_DIR_IN, "hsu_rts");
+			if (err)
+				goto out;
+			pin_cfg->rts_gpio = gpio;
+		}
+
+		if (pin_cfg->rts_gpio) {
+			gpio_direction_output(pin_cfg->rts_gpio, 1);
+			if (!in_interrupt())
+				usleep_range(up->byte_delay,
+						up->byte_delay + 1);
+		}
+	} else
+		if (pin_cfg->rts_gpio) {
+			gpio_free(pin_cfg->rts_gpio);
+			pin_cfg->rts_gpio = 0;
+		}
+
+	return 0;
+out:
+        dev_warn(up->dev, "failed to setup hsu rts\n");
+        return err;
+}
+
+int cht_hsu_hw_suspend(struct uart_hsu_port *up)
+{
+	struct hsu_port_pin_cfg *pin_cfg;
+	int gpio, err, ret;
+
+	if (!up || !up->port_cfg)
+		return 0;
+
+	pin_cfg =  &up->port_cfg->pin_cfg;
+	if (!pin_cfg || pin_cfg->wake_src == no_wake)
+		return 0;
+
+	switch (pin_cfg->wake_src) {
+	case rxd_wake:
+		if (!pin_cfg->rx_gpio) {
+			gpio = acpi_get_gpio_by_index(up->dev, hsu_rxd_idx, NULL);
+			if (gpio < 0) {
+				err = gpio;
+				goto out;
+			}
+			pin_cfg->rx_gpio = gpio;
+		}
+		pin_cfg->wake_gpio = pin_cfg->rx_gpio;
+		break;
+	case cts_wake:
+		if (!pin_cfg->cts_gpio) {
+			gpio = acpi_get_gpio_by_index(up->dev, hsu_cts_idx, NULL);
+			if (gpio < 0) {
+				err = gpio;
+				goto out;
+			}
+			pin_cfg->cts_gpio = gpio;
+		}
+		pin_cfg->wake_gpio = pin_cfg->cts_gpio;
+		break;
+	default:
+		pin_cfg->wake_gpio = -1;
+		break;
+	}
+
+	if (pin_cfg->wake_gpio != -1) {
+		err = devm_gpio_request_one(up->dev, pin_cfg->wake_gpio, GPIOF_DIR_IN, "hsu_wake_irq");
+		if (err)
+			goto out;
+		gpio_direction_input(pin_cfg->wake_gpio);
+		ret = request_irq(gpio_to_irq(pin_cfg->wake_gpio), wakeup_irq,
+				IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING,
+				"hsu_wake_irq", up);
+		if (ret)
+			dev_err(up->dev, "failed to register 'hsu_wake_irq'\n");
+
+		if (pin_cfg->rts_gpio && pin_cfg->wake_src == rxd_wake)
+			gpio_direction_output(pin_cfg->rts_gpio, 0);
+	}
+
+	return 0;
+out:
+        dev_warn(up->dev, "failed to register 'hsu_wake_irq'\n");
+        return err;
+
+}
+
+int cht_hsu_hw_resume(struct uart_hsu_port *up)
+{
+	struct hsu_port_pin_cfg *pin_cfg;
+
+	if (!up || !up->port_cfg)
+		return 0;
+
+	pin_cfg =  &up->port_cfg->pin_cfg;
+	if (!pin_cfg || pin_cfg->wake_src == no_wake)
+		return 0;
+
+	if (pin_cfg->wake_gpio != -1) {
+		free_irq(gpio_to_irq(pin_cfg->wake_gpio), up);
+		pin_cfg->wake_gpio = -1;
+	}
+
+	switch (pin_cfg->wake_src) {
+	case rxd_wake:
+		if (pin_cfg->rx_gpio) {
+			gpio_free(pin_cfg->rx_gpio);
+			pin_cfg->rx_gpio = 0;
+		}
+		break;
+	case cts_wake:
+		if (pin_cfg->cts_gpio) {
+			gpio_free(pin_cfg->cts_gpio);
+			pin_cfg->cts_gpio = 0;
+		}
+		break;
+	}
+
+	return 0;
+}
+
 void cht_hsu_reset(void __iomem *addr)
 {
 	writel(0, addr + CHT_HSU_RESET);
@@ -97,8 +258,11 @@ static struct hsu_port_cfg hsu_port_cfgs[] = {
 		.hw_ip = hsu_dw,
 		.idle = 20,
 		.pin_cfg = {
-			.wake_src = no_wake,
+			.wake_src = rxd_wake,
 		},
+		.hw_set_rts = cht_hw_set_rts,
+		.hw_suspend = cht_hsu_hw_suspend,
+		.hw_resume = cht_hsu_hw_resume,
 		.hw_reset = cht_hsu_reset,
 		.get_uartclk = cht_hsu_get_uartclk,
 		.set_clk = cht_hsu_set_clk,
-- 
1.7.9.5

