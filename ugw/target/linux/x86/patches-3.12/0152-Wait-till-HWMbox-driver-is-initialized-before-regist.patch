From fe1b95abeb007d824323f2dea622da5d166480eb Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Wed, 5 Aug 2015 14:03:19 -0700
Subject: [PATCH] Wait till HWMbox driver is initialized before registering
 NetIP subystem callbacks.

---
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c |   43 +++++++++++++++++--------
 1 file changed, 29 insertions(+), 14 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index 89a23f9..b0d6d8c 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -34,6 +34,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/hw_mailbox.h>
 #include <linux/netip_subsystem.h>
+#include <linux/delay.h>
 #include "netip_subsystem_defs.h"
 
 
@@ -217,7 +218,7 @@ static void netss_send_configure_msg (void)
    cfg_msg.cm_mode = 0; 
    cfg_msg.RCE_floor = 1;
    cfg_msg.RCF_filter = 0;
-   ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, HW_MBOX_RESREVED_OPCODE_TAG_5, (uint8_t*)&cfg_msg, sizeof(netss_configure_msg_t), sizeof(netss_configure_msg_t), &reply_len);
+   ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, 5, (uint8_t*)&cfg_msg, sizeof(netss_configure_msg_t), sizeof(netss_configure_msg_t), &reply_len);
    if(ret)
    {
        printk(KERN_ERR "Send configure message failed ret %d \n", ret);
@@ -416,7 +417,7 @@ static int ness_send_service_request_msg(uint32_t service_level)
       service_msg->service[j].id = 0;
       service_msg->service[j].state = 0;
     
-      ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, HW_MBOX_RESREVED_OPCODE_TAG_5, (uint8_t *)service_msg, service_msg_len, service_msg_len, &reply_len);
+      ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, 5, (uint8_t *)service_msg, service_msg_len, service_msg_len, &reply_len);
       if(ret) {
          printk(KERN_ERR "Send Sevice Request message failed ret %d \n", ret);
       } else {
@@ -465,7 +466,7 @@ static int ness_send_single_service_request_msg(uint32_t service_id, uint32_t st
       service_msg->service[1].id = 0;
       service_msg->service[1].state = 0;
 
-      ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, HW_MBOX_RESREVED_OPCODE_TAG_5, (uint8_t *)service_msg, service_msg_len, service_msg_len, &reply_len);
+      ret = hwMbox_sendOpcode(HW_MBOX_MASTER_NP_CPU, 5, (uint8_t *)service_msg, service_msg_len, service_msg_len, &reply_len);
       if(ret) {
          printk(KERN_ERR "Send Single Sevice Request message failed ret %d \n", ret);
       } else {
@@ -479,6 +480,27 @@ static int ness_send_single_service_request_msg(uint32_t service_id, uint32_t st
 static int netss_configure_and_setup_netip_services(void *data)
 {
    int count=0;
+   int sleep_count=0;
+   while(1)
+   {
+      if(0 == hwMbox_isReady()) 
+      {
+         /*HW Mailbox driver is ready register callbacks for netip pm messages */
+         /*Register netip properties message, update tag and token later */
+         hwMbox_registerRecvOpcode(HW_MBOX_MASTER_NP_CPU,
+                                   netss_receive_netip_properties_msg,
+                                   5, 0x1);
+         /*Register netip status message, update tag and token later */
+         hwMbox_registerRecvOpcode(HW_MBOX_MASTER_NP_CPU,
+                                   netss_receive_netip_status_msg,
+                                   5, 0x2);
+         printk("Slept for iterations %d msec %d\n", sleep_count, sleep_count*10); 
+         break;
+      }
+      msleep(10);
+      sleep_count++;
+      
+   }
    while(1)
    {
       /*Wait for netip messages */
@@ -544,14 +566,6 @@ static int netss_configure_and_setup_netip_services(void *data)
 
 void netss_manage_netip_services(void) 
 {
-   /*Register netip properties message, update tage and token later */
-   hwMbox_registerRecvOpcode(HW_MBOX_MASTER_NP_CPU,
-                             netss_receive_netip_properties_msg,
-                             HW_MBOX_RESREVED_OPCODE_TAG_5, 0x1); 
-   /*Register netip status message, update tage and token later */
-   hwMbox_registerRecvOpcode(HW_MBOX_MASTER_NP_CPU,
-                             netss_receive_netip_status_msg,
-                             HW_MBOX_RESREVED_OPCODE_TAG_5, 0x2); 
    pnetss_drv_data->handshake_thread = kthread_run(netss_configure_and_setup_netip_services, (void *)data, "netip_service_manager");
    
    if(!pnetss_drv_data->handshake_thread) {
@@ -602,7 +616,7 @@ int netss_set_service_level(uint32_t level)
     *boot handshake thread will send the message */
    if(g_netss_boot_handshake_done) {
       if(new_state == NETIP_DEEP_STANDBY) {
-         ness_send_service_request_msg(level);
+         ret = ness_send_service_request_msg(level);
 
 #ifdef CONFIG_PM_RUNTIME
          pm_runtime_put(&pnetss_drv_data->dev->dev);
@@ -620,7 +634,7 @@ int netss_set_service_level(uint32_t level)
       } else if(new_state > g_current_netip_power_state) {
          /*Going to lower power state Ex: Active to BBU, Active to Standby
           *BBU to standby */
-         ness_send_service_request_msg(level);
+         ret = ness_send_service_request_msg(level);
          /* TODO 
           * 1. Call the platform driver api
           */
@@ -629,12 +643,13 @@ int netss_set_service_level(uint32_t level)
          /* TODO 
           * 1. Call the platform driver api
           */
-         ness_send_service_request_msg(level);
+         ret = ness_send_service_request_msg(level);
       }
    } else {
       g_netss_sysfs_attributes_info.service_level = level;
    }
    mutex_unlock(&g_netss_sysfs_attributes_info.lock); 
+   return ret;
 }
 EXPORT_SYMBOL(netss_set_service_level);
 uint32_t netss_get_service_level(void)
-- 
1.7.9.5

