From a0775dd4c03366b9531be613aa9b27ad32660f6a Mon Sep 17 00:00:00 2001
From: "Christensen, Taylor" <taylor.christensen@intel.com>
Date: Tue, 3 Nov 2015 15:59:22 -0800
Subject: [PATCH] SDHCI: Basic HW Mutex Support Added

Patch to add basic support for HW mutex in the sdhci
layer. This will support the NetIP version of the HW
Mutex as opposed to the Puma6 version of the HW Mutex.
---
 drivers/mmc/host/sdhci-pci.c |   29 ++++++++++++++++++++++++++++-
 drivers/mmc/host/sdhci.c     |   20 +++++++++++++++++++-
 include/linux/mmc/sdhci.h    |   30 +++++++++++++++++++++++++++++-
 3 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/drivers/mmc/host/sdhci-pci.c b/drivers/mmc/host/sdhci-pci.c
index 27ae563..c1400ad 100644
--- a/drivers/mmc/host/sdhci-pci.c
+++ b/drivers/mmc/host/sdhci-pci.c
@@ -25,7 +25,9 @@
 #include <linux/gpio.h>
 #include <linux/pm_runtime.h>
 #include <linux/mmc/sdhci-pci-data.h>
-
+#ifdef CONFIG_HW_MUTEXES
+#include <linux/hw_mutex.h>
+#endif
 #include "sdhci.h"
 
 /*
@@ -1286,6 +1288,9 @@ static struct sdhci_pci_slot *sdhci_pci_probe_slot(
 	struct sdhci_pci_slot *slot;
 	struct sdhci_host *host;
 	int ret, bar = first_bar + slotno;
+#ifdef CONFIG_HW_MUTEXES
+	struct pci_dev *tmp_dev = NULL;
+#endif
 
 	if (!(pci_resource_flags(pdev, bar) & IORESOURCE_MEM)) {
 		dev_err(&pdev->dev, "BAR %d is not iomem. Aborting.\n", bar);
@@ -1378,7 +1383,29 @@ static struct sdhci_pci_slot *sdhci_pci_probe_slot(
 	host->mmc->slotno = slotno;
 	host->mmc->caps2 |= MMC_CAP2_NO_PRESCAN_POWERUP;
 
+#ifdef CONFIG_HW_MUTEXES
+	/* If there's a HW Mutex controller that exists, then we'll need to use a HW Mutex
+	 * to make sure and use exclusive controller access from different processors */
+	tmp_dev = pci_get_device(0x8086, HW_MUTEX_DEV_ID, NULL);
+	if (tmp_dev) {
+	  host->flags |= SDHCI_SUPPORT_HW_MUTEX;
+	  pci_dev_put(tmp_dev);
+	}
+
+	//Lock the HW Mutex (Gain Control)
+	LOCK_EMMC_HW_MUTEX(host->mmc);
+
+	ret = sdhci_add_host(host);
+
+	//Unlock the HW Mutex (Release Control)
+	UNLOCK_EMMC_HW_MUTEX(host->mmc);
+
+#else
+
 	ret = sdhci_add_host(host);
+
+#endif
+
 	if (ret)
 		goto remove;
 
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 7a7fb4f..f292b82 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -29,7 +29,9 @@
 #include <linux/mmc/host.h>
 #include <linux/mmc/card.h>
 #include <linux/mmc/slot-gpio.h>
-
+#ifdef CONFIG_HW_MUTEXES
+#include <linux/hw_mutex.h>
+#endif
 #include "sdhci.h"
 
 #define DRIVER_NAME "sdhci"
@@ -2409,6 +2411,22 @@ static irqreturn_t sdhci_irq(int irq, void *dev_id)
 	u32 intmask, unexpected = 0;
 	int cardint = 0, max_loops = 16;
 
+#ifdef CONFIG_HW_MUTEXES
+	/* eMMC card interrupt can be classified as:
+	 * 1: Insert/Remove interrupt
+	 * 2: Data/Command interrupt
+	 * 3: Unexpected error interrupt
+	 * It is assumed that interrupts happen only when a task owns the 
+	 * HW Mutex
+	 */
+	
+	if (host->flags & SDHCI_SUPPORT_HW_MUTEX) {
+	  if (!EMMC_HW_MUTEX_IS_LOCKED(host->mmc)) {
+	      return IRQ_NONE;
+	  }
+	}
+#endif
+
 	spin_lock(&host->lock);
 
 	if (host->runtime_suspended) {
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index 3e781b8..71c1f27 100644
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -131,7 +131,10 @@ struct sdhci_host {
 #define SDHCI_SDIO_IRQ_ENABLED	(1<<9)	/* SDIO irq enabled */
 #define SDHCI_SDR104_NEEDS_TUNING (1<<10)	/* SDR104/HS200 needs tuning */
 #define SDHCI_USING_RETUNING_TIMER (1<<11)	/* Host is using a retuning timer for the card */
-
+#ifdef CONFIG_HW_MUTEXES
+#define SDHCI_SUPPORT_HW_MUTEX    (1<<15)
+  /* Two or more processors access the controller, HW mutex is needed to avoid control conflicts. */
+#endif  
 	unsigned int version;	/* SDHCI spec. version */
 
 	unsigned int max_clk;	/* Max possible freq (MHz) */
@@ -183,4 +186,29 @@ struct sdhci_host {
 
 	unsigned long private[0] ____cacheline_aligned;
 };
+
+#ifdef CONFIG_HW_MUTEXES
+
+#define EMMC_HW_MUTEX_IS_LOCKED(host) (hw_mutex_is_locked(HW_MUTEX_EMMC))
+
+#define LOCK_EMMC_HW_MUTEX(host) do{\
+  if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
+    {\
+         hw_mutex_lock(HW_MUTEX_EMMC);\
+	 enable_irq(((struct sdhci_host *)host->private)->irq);\
+    }\
+  } while(0)
+
+#define UNLOCK_EMMC_HW_MUTEX(host) do{\
+  if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
+    {\
+         hw_mutex_unlock(HW_MUTEX_EMMC);\
+	 disable_irq(((struct sdhci_host *)host->private)->irq);\
+    }\
+  } while(0)
+
+#define SDHCI_HOST_HAS_HW_MUTEX(host) ((host)->flags & SDHCI_SUPPORT_HW_MUTEX)
+
+#endif /* CONFIG_HW_MUTEXES */
+
 #endif /* LINUX_MMC_SDHCI_H */
-- 
1.7.9.5

