From 516d8a6ea503776ed084e6dbccd6929c9d15a269 Mon Sep 17 00:00:00 2001
From: Marco A Vital Yep <marco.a.vital.yep@intel.com>
Date: Thu, 17 Sep 2015 22:56:45 -0700
Subject: [PATCH] Fixed GMAC5 (GBE) configuration: - Added configuration of
 general registers from NetIP - Added DDR snoop verification
 to avoid data corruption in packets - Added APIs to NetSS
 driver to enable GBE interrupts in IOSF bridge

---
 arch/x86/NetIP_SubSystem/netip_subsystem_lld.c     |   43 +++++-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c    |   10 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c    |   95 +++++++++---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c    |  153 +++++++++++++++++++-
 .../net/ethernet/synopsys/DWC_ETH_QOS_yheader.h    |   11 +-
 .../net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h    |   78 ++++++++++
 drivers/net/ethernet/synopsys/Makefile             |   10 +-
 include/linux/netip_subsystem.h                    |    7 +
 8 files changed, 362 insertions(+), 45 deletions(-)
 mode change 100644 => 100755 include/linux/netip_subsystem.h

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
index 5b77787..32d0990 100755
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -83,12 +83,7 @@ void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, n
     }
     if(irq_info->func != NULL)
     {
-       uint32_t reg_val;
-       reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-       if(!(reg_val & (1 << subdevice))) {
-          __raw_writel((reg_val | (1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
-          printk("Enabling Net IP subdevice %d interrupts reg %x\n", subdevice, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
-       } 
+		netss_enable_irq(subdevice);
     }
 }
 
@@ -129,6 +124,12 @@ int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_
          mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_HOSTPROXY_MMIO_OFFSET;
          mmio->size = NETSS_SUBDEV_HOSTPROXY_MMIO_SIZE;
          ret = 0;
+      break;
+      case NETSS_GBE:
+         mmio->base = net_ip_mmios.region1_base + NETSS_SUBDEV_GBE_MMIO_OFFSET;
+         mmio->size = NETSS_SUBDEV_GBE_MMIO_SIZE;
+         ret = 0;
+      break;
       default:
          ret = -1;
    }
@@ -137,6 +138,36 @@ int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_
 
 EXPORT_SYMBOL(netss_get_subdevice_mmio_info);
 
+void netss_enable_irq(netss_subdevices_t subdevice)
+{
+   uint32_t reg_val;
+   reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+   if(!(reg_val & (1 << subdevice))) {
+      __raw_writel((reg_val | (1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+      printk(KERN_INFO "Enabling Net IP subdevice %d interrupts reg %x\n", subdevice, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
+   } 
+}
+EXPORT_SYMBOL(netss_enable_irq);
+
+void netss_disable_irq(netss_subdevices_t subdevice)
+{
+   uint32_t reg_val;
+   reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+   if(reg_val & (1 << subdevice)) {
+      __raw_writel((reg_val & ~(1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
+      printk(KERN_INFO "Disabling Net IP subdevice %d interrupts reg %x\n", subdevice, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
+   } 
+}
+EXPORT_SYMBOL(netss_disable_irq);
+
+void netss_ack_irq(netss_subdevices_t subdevice)
+{
+   uint32_t reg_val;
+   reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
+   __raw_writel((reg_val & (1<<subdevice)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
+}
+EXPORT_SYMBOL(netss_ack_irq);
+
 /*
  * Interrupt Handler
  */
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
index 0a99de3..22635b6 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -4120,7 +4120,6 @@ static INT configure_mtl_queue(UINT qInx, struct DWC_ETH_QOS_prv_data *pdata)
 		}
 	}
 
-
 	/*Enable Store and Forward mode for TX */
 	MTL_QTOMR_TSF_UdfWr(qInx, 0x1);
 	/* Program Tx operating mode */
@@ -4395,7 +4394,7 @@ static INT configure_mac(struct DWC_ETH_QOS_prv_data *pdata)
 	/*Enable CRC stripping - disabled */
 	MAC_MCR_RgRd(varMAC_MCR);
 	varMAC_MCR = varMAC_MCR & (ULONG) (0xffcfff7c);
-	varMAC_MCR = varMAC_MCR | ((0x1) << 0) | ((0x1) << 20) | ((0x1) << 21);
+	varMAC_MCR = varMAC_MCR | (0x1 << 0) | (0x1 << 1);
 #ifndef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
 	varMAC_MCR |= ((0x1) << 1);
 #endif
@@ -4446,8 +4445,11 @@ static INT DWC_ETH_QOS_yinit(struct DWC_ETH_QOS_prv_data *pdata)
 		configure_mtl_queue(qInx, pdata);
 	}
 	//Mapping MTL Rx queue and DMA Rx channel.
-	MTL_RQDCM0R_RgWr(0x3020100);
-	MTL_RQDCM1R_RgWr(0x7060504);
+	MTL_RQDCM0R_RgWr(0x03020100); //RSVD(000) RXQ2DADMACH(0) RSVD(0) RXQ32DMA(011)
+								  //RSVD(000) RXQ2DADMACH(0) RSVD(0) RXQ22DMA(010)
+								  //RSVD(000) RXQ1DADMACH(0) RSVD(0) RXQ12DMA(001)
+								  //RSVD(000) RXQ0DADMACH(0) RSVD(0) RXQ02DMA(000)
+	MTL_RQDCM1R_RgWr(0x07060504);
 #ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
 	/* enable tx drop status */
 	MTL_OMR_DTXSTS_UdfWr(0x1);
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
index fe0924e..9757b79 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -36,6 +36,7 @@
 #include "DWC_ETH_QOS_yheader.h"
 #include "DWC_ETH_QOS_yapphdr.h"
 #include "DWC_ETH_QOS_drv.h"
+#include <linux/netip_subsystem.h>
 
 extern ULONG dwc_eth_qos_pci_base_addr;
 
@@ -477,15 +478,23 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 	struct DWC_ETH_QOS_rx_queue *rx_queue = NULL;
 	ULONG varMAC_ANS = 0;
 	ULONG varMAC_PCS = 0;
+	ULONG atom_ims = 0, gmac5_int = 0;
 
 	DBGPR("-->DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
 
+	atom_ims = GBE_REG_RD(pdata->gbe_base, GBE_ATOM_IMS_OFF); //Interrupts are cleared when IMS is read
+	GET_VAR32_BITS(atom_ims, gmac5_int, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
+	if (!gmac5_int) {
+		printk(KERN_ALERT "GMAC5 ISR triggered with bit not set IMS(0x%08x)\n", atom_ims);
+	}
+
 	DMA_ISR_RgRd(varDMA_ISR);
-	if (varDMA_ISR == 0x0)
+	if (varDMA_ISR == 0x0) {
+		DBGPR("DMA_ISR = %#lx, AtomIC_IMS = %#lx\n", varDMA_ISR, atom_ims);
 		return IRQ_NONE;
+	}
 
 	MAC_ISR_RgRd(varMAC_ISR);
-
 	DBGPR("DMA_ISR = %#lx, MAC_ISR = %#lx\n", varDMA_ISR, varMAC_ISR);
 
 	/* Handle DMA interrupts */
@@ -500,8 +509,6 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 		/* handle only those DMA interrupts which are enabled */
 		varDMA_SR = (varDMA_SR & varDMA_IER);
 
-		DBGPR("DMA_SR[%d] = %#lx\n", qInx, varDMA_SR);
-
 		if (varDMA_SR == 0)
 			continue;
 
@@ -570,26 +577,32 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 			MAC_PCS_RgRd(varMAC_PCS);
 			printk(KERN_ALERT "RGMII/SMII interrupt: MAC_PCS = %#lx\n", varMAC_PCS);
 			if ((varMAC_PCS & 0x80000) == 0x80000) {
+				unsigned int reg_val = 0;
 				pdata->pcs_link = 1;
 				netif_carrier_on(dev);
 				if ((varMAC_PCS & 0x10000) == 0x10000) {
 					pdata->pcs_duplex = 1;
-					hw_if->set_full_duplex(); //TODO: may not be required
+					hw_if->set_full_duplex();
 				} else {
 					pdata->pcs_duplex = 0;
-					hw_if->set_half_duplex(); //TODO: may not be required
+					hw_if->set_half_duplex();
 				}
 
+				reg_val = GBE_REG_RD(pdata->gbe_base, GBE_GCR5_OFF);
 				if ((varMAC_PCS & 0x60000) == 0x0) {
+					SET_VAR32_BITS(reg_val, 2, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
 					pdata->pcs_speed = SPEED_10;
-					hw_if->set_mii_speed_10(); //TODO: may not be required
+					hw_if->set_mii_speed_10();
 				} else if ((varMAC_PCS & 0x60000) == 0x20000) {
+					SET_VAR32_BITS(reg_val, 3, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
 					pdata->pcs_speed = SPEED_100;
-					hw_if->set_mii_speed_100(); //TODO: may not be required
-				} else if ((varMAC_PCS & 0x60000) == 0x30000) {
+					hw_if->set_mii_speed_100();
+				} else if ((varMAC_PCS & 0x60000) == 0x40000) {
+					SET_VAR32_BITS(reg_val, 0, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
 					pdata->pcs_speed = SPEED_1000;
-					hw_if->set_gmii_speed(); //TODO: may not be required
+					hw_if->set_gmii_speed();
 				}
+				GBE_REG_WR(pdata->gbe_base, GBE_GCR5_OFF, reg_val);
 				printk(KERN_ALERT "Link is UP:%dMbps & %s duplex\n",
 					pdata->pcs_speed, pdata->pcs_duplex ? "Full" : "Half");
 			} else {
@@ -625,11 +638,10 @@ irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(int irq, void *device_id)
 			DWC_ETH_QOS_handle_eee_interrupt(pdata);
 		}
 	}
-
+	netss_ack_irq(NETSS_GBE);
 	DBGPR("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS\n");
 
 	return IRQ_HANDLED;
-
 }
 
 /*!
@@ -1399,6 +1411,20 @@ static void DWC_ETH_QOS_default_rx_confs(struct DWC_ETH_QOS_prv_data *pdata)
 	DBGPR("<--DWC_ETH_QOS_default_rx_confs\n");
 }
 
+#ifdef GBE_POLLING
+enum hrtimer_restart gbe_timeout(struct hrtimer *timer)
+{
+	struct DWC_ETH_QOS_prv_data *pdata;
+	pdata = container_of(timer, struct DWC_ETH_QOS_prv_data, gbe_timer);
+	//DBGPR("-->gbe_timeout irq(%d)\n", pdata->irq_number);
+	disable_irq(pdata->irq_number);
+	DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS(pdata->irq_number, pdata);
+	hrtimer_start(&pdata->gbe_timer, ktime_set(0, 100000), HRTIMER_MODE_REL);
+	enable_irq(pdata->irq_number);
+	//DBGPR("<--gbe_timeout\n");
+	return HRTIMER_NORESTART;
+}
+#endif
 
 /*!
 * \brief API to open a deivce for data transmission & reception.
@@ -1422,7 +1448,7 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 	struct hw_if_struct *hw_if = &pdata->hw_if;
 	struct desc_if_struct *desc_if = &pdata->desc_if;
 
-	DBGPR("-->DWC_ETH_QOS_open\n");
+	DBGPR("-->DWC_ETH_QOS_open (%d)\n", dev->irq);
 
 	pdata->irq_number = dev->irq;
 #ifdef DWC_ETH_QOS_CONFIG_PGTEST
@@ -1430,7 +1456,7 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 			  IRQF_SHARED, DEV_NAME, pdata);
 #else
 	ret = request_irq(pdata->irq_number, DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS,
-			  IRQF_SHARED, DEV_NAME, pdata);
+			  0, DEV_NAME, pdata);
 #endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 	if (ret != 0) {
 		printk(KERN_ALERT "Unable to register IRQ %d\n",
@@ -1438,6 +1464,8 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 		ret = -EBUSY;
 		goto err_irq_0;
 	}
+	netss_enable_irq(NETSS_GBE);
+
 	ret = desc_if->alloc_buff_and_desc(pdata);
 	if (ret < 0) {
 		printk(KERN_ALERT
@@ -1477,14 +1505,29 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
 	hw_if->prepare_dev_pktgen(pdata);
 #endif
 
-	if (pdata->phydev)
+	if (pdata->phydev) {
 		phy_start(pdata->phydev);
-
-	pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
+		pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
+	} else
+		pdata->eee_enabled = false;
 
 #ifndef DWC_ETH_QOS_CONFIG_PGTEST
-	if (pdata->phydev)
-		netif_tx_start_all_queues(dev);
+//	if (pdata->phydev)
+	netif_tx_start_all_queues(dev);
+	pdata->pcs_duplex = 1;
+	pdata->pcs_speed = SPEED_1000;
+	hw_if->set_full_duplex();
+	hw_if->set_gmii_speed();
+	set_bit(__LINK_STATE_START, &dev->state);
+	netif_carrier_on(dev);
+	hw_if->start_mac_tx_rx();
+	DWC_ETH_QOS_start_all_ch_tx_dma(pdata);
+	DWC_ETH_QOS_start_all_ch_rx_dma(pdata);
+#ifdef GBE_POLLING
+	hrtimer_init(&pdata->gbe_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	pdata->gbe_timer.function = gbe_timeout;
+	hrtimer_start(&pdata->gbe_timer, ktime_set(0, 10000), HRTIMER_MODE_REL);
+#endif
 #else
 	netif_tx_disable(dev);
 #endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
@@ -1522,6 +1565,10 @@ static int DWC_ETH_QOS_close(struct net_device *dev)
 	struct desc_if_struct *desc_if = &pdata->desc_if;
 
 	DBGPR("-->DWC_ETH_QOS_close\n");
+	netss_disable_irq(NETSS_GBE);
+#ifdef GBE_POLLING
+	hrtimer_cancel(&pdata->gbe_timer);
+#endif
 
 	if (pdata->eee_enabled)
 		del_timer_sync(&pdata->eee_ctrl_timer);
@@ -1952,8 +1999,8 @@ static int DWC_ETH_QOS_start_xmit(struct sk_buff *skb, struct net_device *dev)
 	UINT varvlan_pkt;
 	int tso;
 
-	DBGPR("-->DWC_ETH_QOS_start_xmit: skb->len = %d, qInx = %u\n",
-		skb->len, qInx);
+	DBGPR("-->DWC_ETH_QOS_start_xmit: skb->len = %d, qInx = %u, tx_pkt_queued(%d)\n",
+		skb->len, qInx, desc_data->tx_pkt_queued);
 
 	spin_lock_irqsave(&pdata->tx_lock, flags);
 
@@ -2674,7 +2721,9 @@ static int DWC_ETH_QOS_clean_split_hdr_rx_irq(
 			if ((RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_ES) &&
 			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
 				DBGPR("Error in rcved pkt, failed to pass it to upper layer\n");
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
 				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
 				dev->stats.rx_errors++;
 				DWC_ETH_QOS_update_rx_errors(dev,
 					RX_NORMAL_DESC->RDES3);
@@ -2941,7 +2990,9 @@ static int DWC_ETH_QOS_clean_jumbo_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
 			if ((RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_ES) &&
 			    (RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD)) {
 				DBGPR("Error in rcved pkt, failed to pass it to upper layer\n");
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
 				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
 				dev->stats.rx_errors++;
 				DWC_ETH_QOS_update_rx_errors(dev,
 					RX_NORMAL_DESC->RDES3);
@@ -3276,7 +3327,9 @@ static int DWC_ETH_QOS_clean_rx_irq(struct DWC_ETH_QOS_prv_data *pdata,
 				DWC_ETH_QOS_receive_skb(pdata, dev, skb, qInx);
 				received++;
 			} else {
+#ifdef DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
 				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
+#endif
 				if (!(RX_NORMAL_DESC->RDES3 & DWC_ETH_QOS_RDESC3_LD))
 					DBGPR("Received oversized pkt, spanned across multiple desc\n");
 
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
index acd812c..8fc6553 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -32,8 +32,114 @@
 /*!@file: DWC_ETH_QOS_pci.c
  * @brief: Driver functions.
  */
+
 #include "DWC_ETH_QOS_yheader.h"
 #include "DWC_ETH_QOS_pci.h"
+#include "DWC_ETH_QOS_yregacc.h"
+
+#ifdef INIT_NETSS_GBE
+#include <linux/netip_subsystem.h>
+
+static int DWC_ETH_QOS_init_general_gbe(void __iomem **gbe_base)
+{
+   int ret = 1;
+   netss_subdevice_mmio_t gbe_mmio;
+   void __iomem *reg_base = NULL, *btcfg = NULL;
+   DBGPR("[GBE] Initializing General registers\n");
+   if (!netss_driver_ready()) {
+      printk(KERN_ALERT "[GBE] NetSS not ready!\n");
+   } else if (netss_get_subdevice_mmio_info(NETSS_GBE, &gbe_mmio)) {
+      printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
+   } else {
+      unsigned int reg_val, reg_cfg;
+      DBGPR("[GBE] mem_iobase = 0x%08x, mem_iosize = 0x%08x\n",
+         (unsigned int)gbe_mmio.base,(unsigned int)gbe_mmio.size);
+      reg_base = (void __iomem *)ioremap_nocache(gbe_mmio.base, gbe_mmio.size);
+      btcfg = (void __iomem *)ioremap_nocache(BOOT_CONFIG_BASE_ADDR, BOOT_CONFIG_SIZE);
+      reg_val = GBE_REG_RD(btcfg, BCFG2SSX_GBEM_CFG_OFF);
+      iounmap(btcfg);
+      DBGPR("[GBE] bcfg2ssx_gbem_cfg = 0x%08x\n", reg_val);
+      GET_VAR32_BITS(reg_val, reg_cfg, GBEM_SNOOPED_WIDTH, GBEM_SNOOPED_OFF);
+      if (!reg_cfg) {
+         printk(KERN_ALERT "[GBE] Snooped bit not set in BTCFG!\n");
+         iounmap(reg_base);
+      } else {
+         // Disable GMAC5 core
+         reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
+         SET_VAR32_BITS(reg_val, 0, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
+         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+         // Enable GMAC5 endianess converter
+         reg_val = GBE_REG_RD(reg_base, GBE_GVBECR_OFF);
+         SET_VAR32_BITS(reg_val, 1, GMAC5_END_CONV_WIDTH, GMAC5_END_CONV_OFF);
+         GBE_REG_WR(reg_base, GBE_GVBECR_OFF, reg_val);
+
+         // Enable GMAC5 hardware interrupts
+         reg_val = GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF);
+         SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
+         GBE_REG_WR(reg_base, GBE_ATOM_HIE_OFF, reg_val);
+
+         // Enable GMAC5 level interrupts
+         reg_val = GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF);
+         SET_VAR32_BITS(reg_val, 1, GMAC5_INTC_WIDTH, GMAC5_INTC_OFF);
+         GBE_REG_WR(reg_base, GBE_ATOM_ELS_OFF, reg_val);
+
+         // GMAC5 CONFIGURATION STARTS
+         reg_val = GBE_REG_RD(reg_base, GBE_GCR5_OFF);
+         // Start soft reset
+         SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
+         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+         msleep(1);
+         // Stop soft reset bit
+         SET_VAR32_BITS(reg_val, 1, GCR5_ENDIANESS_WIDTH, GCR5_RESET_OFF);
+         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+         // Read GBE MUX configuration
+         GET_VAR32_BITS(GBE_REG_RD(reg_base, GBE_GMCR_OFF), reg_cfg,
+                        GMCR_GMAC25_WIDTH, GMCR_GMAC25_OFF);
+
+         if (reg_cfg == GMCR_GMAC5_TO_PHY) {
+            DBGPR("[GBE] GMAC5 to PHY!\n");
+            // Set RGMII PHY config
+            SET_VAR32_BITS(reg_val, 1, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
+         } else if (reg_cfg == GMCR_GMAC5_TO_GMAC4) {
+            DBGPR("[GBE] GMAC5 to GMAC4!\n");
+            // Set GMII PHY config
+            SET_VAR32_BITS(reg_val, 0, GCR5_PHY_CFG_WIDTH, GCR5_PHY_CFG_OFF);
+         } else {
+            DBGPR("[GBE] GMAC5 is not connected!\n");
+         }
+         // The default PHY speed is 1G (0), it can be changed here, if required
+         SET_VAR32_BITS(reg_val, 0, GCR5_PHY_SPEED_WIDTH, GCR5_PHY_SPEED_OFF);
+         // Set endianess (LE)
+         SET_VAR32_BITS(reg_val, 0, GCR5_ENDIANESS_WIDTH, GCR5_ENDIANESS_OFF);
+         // Write configuration
+         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+         // Enable GMAC5 core
+         SET_VAR32_BITS(reg_val, 1, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
+         GBE_REG_WR(reg_base, GBE_GCR5_OFF, reg_val);
+
+         DBGPR("[GBE] Dump registers:\n");
+         DBGPR("[GBE]    GBE_GCR5       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GCR5_OFF));
+         DBGPR("[GBE]    GBE_GMCR       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GMCR_OFF));
+         DBGPR("[GBE]    GBE_GVBECR     = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GVBECR_OFF));
+         DBGPR("[GBE]    GBE_GSRH       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRH_OFF));
+         DBGPR("[GBE]    GBE_GSRL       = 0x%08x\n", GBE_REG_RD(reg_base, GBE_GSRL_OFF));
+         DBGPR("[GBE]    GBE_ATOM_HIE   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_HIE_OFF));
+         DBGPR("[GBE]    GBE_ATOM_SWI   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_SWI_OFF));
+         DBGPR("[GBE]    GBE_ATOM_ELS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_ELS_OFF));
+         DBGPR("[GBE]    GBE_ATOM_IMV   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMV_OFF));
+         DBGPR("[GBE]    GBE_ATOM_IRS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IRS_OFF));
+         DBGPR("[GBE]    GBE_ATOM_IMS   = 0x%08x\n", GBE_REG_RD(reg_base, GBE_ATOM_IMS_OFF));
+         *gbe_base = reg_base;
+         ret = 0;
+      }
+   }
+   return ret;
+}
+
+#endif
 
 static UCHAR dev_addr[6] = {0, 0x55, 0x7b, 0xb5, 0x7d, 0xf7};
 
@@ -75,14 +181,28 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 	struct hw_if_struct *hw_if = NULL;
 	struct desc_if_struct *desc_if = NULL;
 	UCHAR tx_q_count = 0, rx_q_count = 0;
+	void __iomem *gbe_base;
 
-	DBGPR("--> DWC_ETH_QOS_probe (%d)\n", pdev->devfn);
+	DBGPR("--> DWC_ETH_QOS_probe\n");
 
 	ret = pci_enable_device(pdev);
 	if (ret) {
 		printk(KERN_ALERT "%s:Unable to enable device\n", DEV_NAME);
 		goto err_out_enb_failed;
 	}
+#ifdef GBE_MSI
+	else if (pci_enable_msi(pdev)) {
+		printk(KERN_ALERT "%s:Unable to enable MSI\n", DEV_NAME);
+		goto err_out_msi_failed;
+	}
+#endif
+
+#ifdef INIT_NETSS_GBE
+   if (DWC_ETH_QOS_init_general_gbe(&gbe_base)) {
+      goto err_out_req_reg_failed;
+   }
+#endif
+
 	if (pci_request_regions(pdev, DEV_NAME)) {
 		printk(KERN_ALERT "%s:Failed to get PCI regions\n", DEV_NAME);
 		ret = -ENODEV;
@@ -139,6 +259,9 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 	pdata->dev = dev;
 	pdata->tx_queue_cnt = tx_q_count;
 	pdata->rx_queue_cnt = rx_q_count;
+#ifdef INIT_NETSS_GBE
+	pdata->gbe_base = gbe_base;
+#endif
 
 #ifdef DWC_ETH_QOS_CONFIG_DEBUGFS
 	/* to give prv data to debugfs */
@@ -152,6 +275,9 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 	DWC_ETH_QOS_get_all_hw_features(pdata);
 	DWC_ETH_QOS_print_all_hw_features(pdata);
 
+	memset(&pdata->hw_feat, 0, sizeof(struct DWC_ETH_QOS_hw_features));
+	pdata->hw_feat.mmc_sel = 1;
+	
 	ret = desc_if->alloc_queue_struct(pdata);
 	if (ret < 0) {
 		printk(KERN_ALERT "ERROR: Unable to alloc Tx/Rx queue\n");
@@ -183,9 +309,7 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 
 	for (i = 0; i < DWC_ETH_QOS_RX_QUEUE_CNT; i++) {
 		struct DWC_ETH_QOS_rx_queue *rx_queue = GET_RX_QUEUE_PTR(i);
-
-		netif_napi_add(dev, &rx_queue->napi, DWC_ETH_QOS_poll_mq,
-				(64 * DWC_ETH_QOS_RX_QUEUE_CNT));
+		netif_napi_add(dev, &rx_queue->napi, DWC_ETH_QOS_poll_mq, 64);
 	}
 
 	SET_ETHTOOL_OPS(dev, DWC_ETH_QOS_get_ethtool_ops());
@@ -291,6 +415,10 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
 	pci_release_regions(pdev);
 
  err_out_req_reg_failed:
+#ifdef GBE_MSI
+	pci_disable_msi(pdev);
+ err_out_msi_failed:
+#endif
 	pci_disable_device(pdev);
 
  err_out_enb_failed:
@@ -316,6 +444,7 @@ void DWC_ETH_QOS_remove(struct pci_dev *pdev)
 	struct net_device *dev = pci_get_drvdata(pdev);
 	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
 	struct desc_if_struct *desc_if = &(pdata->desc_if);
+	unsigned int reg_val = 0;
 
 	DBGPR("--> DWC_ETH_QOS_remove\n");
 
@@ -339,12 +468,24 @@ void DWC_ETH_QOS_remove(struct pci_dev *pdev)
 
 	desc_if->free_queue_struct(pdata);
 
+#ifdef INIT_NETSS_GBE
+	// Disable GMAC5 core
+	reg_val = GBE_REG_RD(pdata->gbe_base, GBE_GCR5_OFF);
+	SET_VAR32_BITS(reg_val, 0, GCR5_ENABLE_WIDTH, GCR5_ENABLE_OFF);
+	GBE_REG_WR(pdata->gbe_base, GBE_GCR5_OFF, reg_val);
+	iounmap(pdata->gbe_base);
+	pdata->gbe_base = NULL;
+#endif
+
 	free_netdev(dev);
 
 	pci_set_drvdata(pdev, NULL);
 	pci_iounmap(pdev, (void __iomem *)dwc_eth_qos_pci_base_addr);
 
 	pci_release_regions(pdev);
+#ifdef GBE_MSI
+	pci_disable_msi(pdev);
+#endif
 	pci_disable_device(pdev);
 
 	DBGPR("<-- DWC_ETH_QOS_remove\n");
@@ -353,8 +494,8 @@ void DWC_ETH_QOS_remove(struct pci_dev *pdev)
 }
 
 static struct pci_device_id DWC_ETH_QOS_id[] = {
-    { PCI_DEVICE(VENDOR_ID, DEVICE_ID) },
-    { 0, } /* terminate list */
+	{PCI_DEVICE(VENDOR_ID, DEVICE_ID)},
+	{0}, /* terminate list */
 };
 
 struct pci_dev *DWC_ETH_QOS_pcidev;
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
index cb04680..e640817 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -132,6 +132,10 @@
 //#define DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
 #define DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
 
+#define GBE_MSI
+//#define GBE_POLLING
+//#define GBE_IOSF_BRIDGE
+
 #ifdef DWC_ETH_QOS_CONFIG_PTP
 #undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
 #endif
@@ -249,7 +253,7 @@
 #define DWC_ETH_QOS_Q_DISABLED	0x0
 #define DWC_ETH_QOS_Q_AVB 			0x1
 #define DWC_ETH_QOS_Q_DCB 			0x2
-#define DWC_ETH_QOS_Q_GENERIC 	0x3
+#define DWC_ETH_QOS_Q_GENERIC 		0x3
 
 /* Driver PMT macros */
 #define DWC_ETH_QOS_DRIVER_CONTEXT 1
@@ -1289,6 +1293,11 @@ struct DWC_ETH_QOS_prv_data {
 	 * set to 1 if skb has TCP payload else set to 0
 	 * */
 	int tcp_pkt;
+
+	void __iomem *gbe_base;
+#ifdef GBE_POLLING
+	struct hrtimer gbe_timer;
+#endif
 };
 
 typedef enum {
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
index f1280cf..df84b6e 100755
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yregacc.h
@@ -44106,3 +44106,81 @@
 #define GET_INDEXED_VALUE(data, lbit, hbit,index)\
   (GET_VALUE(data,(lbit+(index)*(hbit-lbit+1)),(hbit+(index)*(hbit-lbit+1))))
 #endif
+
+#define INIT_NETSS_GBE
+
+#ifdef INIT_NETSS_GBE
+
+/** GBE GENERAL REGISTERS */
+
+#define GBE_GEN_REGISTER_OFF    (0x0)
+#define GBE_GEN_ATOM_IC_OFF     (0x2800)
+
+#define BOOT_CONFIG_BASE_ADDR	( 0x400c0000 )
+#define BOOT_CONFIG_SIZE        ( 128 )
+
+#define GBE_GCR5_OFF    (GBE_GEN_REGISTER_OFF + 0x14) // GMAC5 Configuration
+#define GBE_GMCR_OFF    (GBE_GEN_REGISTER_OFF + 0x18) // MUX Configuration
+#define GBE_GVBECR_OFF  (GBE_GEN_REGISTER_OFF + 0x1C) // VBUS Endian Convert
+#define GBE_GSRH_OFF    (GBE_GEN_REGISTER_OFF + 0x20) // Status Register High
+#define GBE_GSRL_OFF    (GBE_GEN_REGISTER_OFF + 0x24) // Status Register Low
+
+#define GBE_ATOM_HIE_OFF   (GBE_GEN_ATOM_IC_OFF + 0x0) // Hardware Interrupt
+#define GBE_ATOM_SWI_OFF   (GBE_GEN_ATOM_IC_OFF + 0x4) // Software Interrupt
+#define GBE_ATOM_ELS_OFF   (GBE_GEN_ATOM_IC_OFF + 0x8) // Edge/Level Register
+#define GBE_ATOM_IMV_OFF   (GBE_GEN_ATOM_IC_OFF + 0xC) // Interrupt Mask Register
+#define GBE_ATOM_IRS_OFF   (GBE_GEN_ATOM_IC_OFF + 0x10) // Interrupt Status Register
+#define GBE_ATOM_IMS_OFF   (GBE_GEN_ATOM_IC_OFF + 0x14) // Interrupt Masked Status Register
+
+// GMAC5 Configuration Register offsets
+#define GCR5_ENABLE_OFF       ( 31 )   // 1 - Enabled; 0 - Disabled
+#define GCR5_PHY_CFG_OFF      ( 29 )   // 00 - GMII; 01 - RGMII; 10 - SGMII
+#define GCR5_ENDIANESS_OFF    ( 28 )   // 0 - LE; 1 - BE
+#define GCR5_PHY_SPEED_OFF    ( 25 )   // 000 - 1G; 001 - 2.5G; 010 - 10M;
+                                       // 011 - 100M; 100 - 5G
+#define GCR5_RESET_OFF        ( 24 )   // 0 - Reset; 1 - Out of reset
+
+#define GCR5_ENABLE_WIDTH     ( 1 )
+#define GCR5_PHY_CFG_WIDTH    ( 2 )
+#define GCR5_ENDIANESS_WIDTH  ( 1 )
+#define GCR5_PHY_SPEED_WIDTH  ( 3 )
+#define GCR5_RESET_WIDTH      ( 1 )
+
+#define GMAC5_END_CONV_OFF    ( 18 )
+#define GMAC5_INTC_OFF        ( 7 )
+
+#define GMAC5_END_CONV_WIDTH  ( 1 )
+#define GMAC5_INTC_WIDTH      ( 1 )
+
+#define GMCR_GMAC25_OFF       ( 30 )
+#define GMCR_GMAC25_WIDTH     ( 2 )
+
+#define GMCR_GMAC5_TO_GMAC4   ( 0x0 )
+#define GMCR_GMAC5_TO_PHY     ( 0x2 )
+
+#define BCFG2SSX_GBEM_CFG_OFF ( 0x34 )
+
+#define GBEM_SNOOPED_OFF      ( 15 )
+#define GBEM_SNOOPED_WIDTH    ( 1 )
+
+
+#define GBE_REG_RD(base, offset)          be32_to_cpu(ioread32((base) + (offset)))
+#define GBE_REG_WR(base, offset, data)    iowrite32(cpu_to_be32(data),(base) + (offset))
+
+#ifdef GBE_IOSF_BRIDGE
+#define REG_RD(base, offset)          ioread32((base) + (offset))
+#define REG_WR(base, offset, data)    iowrite32((data),(base) + (offset))
+#endif
+
+#define SET_VAR32_BITS(x, val, width, offset) \
+do { \
+   x &= ~((0xFFFFFFFF >> (32-width)) << offset); \
+   x |= (val << offset); \
+} while (0)
+
+#define GET_VAR32_BITS(x, val, width, offset) \
+do { \
+   val = (x >> offset) & (0xFFFFFFFF >> (32-width));\
+} while (0)
+
+#endif
diff --git a/drivers/net/ethernet/synopsys/Makefile b/drivers/net/ethernet/synopsys/Makefile
index 522604d..96f5f20 100755
--- a/drivers/net/ethernet/synopsys/Makefile
+++ b/drivers/net/ethernet/synopsys/Makefile
@@ -1,13 +1,9 @@
-export DWC_QOS_PG CONFIG_PGTEST_OBJ DWC_ETH_QOS_CONFIG_PGTEST
-export DWC_QOS_DEBUGFS CONFIG_DEBUGFS_OBJ DWC_ETH_QOS_CONFIG_DEBUGFS
-export DWC_QOS_PTP CONFIG_PTPSUPPORT_OBJ DWC_ETH_QOS_CONFIG_PTP
-
 #default values
 #PGTEST=n	#pg(packet generator) is disabled	
 #DEBUGFS=y	#debugfs is enabled
 #PTPSUPPORT=n	#ptp is disabled
 
-ifeq "$(DWC_QOS_PG)" "y"
+ifeq "$(CONFIG_DWC_QOS_PG)" "y"
 CONFIG_PGTEST_OBJ=y
 DWC_ETH_QOS_CONFIG_PGTEST=-DPGTEST
 EXTRA_CFLAGS+=-DCONFIG_PGTEST_OBJ
@@ -15,7 +11,7 @@ else
 CONFIG_PGTEST_OBJ=n
 endif
 
-ifeq "$(DWC_QOS_DEBUGFS)" "y"
+ifeq "$(CONFIG_DWC_QOS_DEBUGFS)" "y"
 CONFIG_DEBUGFS_OBJ=y
 DWC_ETH_QOS_CONFIG_DEBUGFS=-DDEBUGFS
 EXTRA_CFLAGS+=-DCONFIG_DEBUGFS_OBJ
@@ -23,7 +19,7 @@ else
 CONFIG_DEBUGFS_OBJ=n
 endif
 
-ifeq "$(DWC_QOS_PTP)" "y"
+ifeq "$(CONFIG_DWC_QOS_PTP)" "y"
 CONFIG_PTPSUPPORT_OBJ=y
 DWC_ETH_QOS_CONFIG_PTP=-DPTPSUPPORT
 EXTRA_CFLAGS+=-DCONFIG_PTPSUPPORT_OBJ
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
old mode 100644
new mode 100755
index f0096cd..3453821
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -55,6 +55,8 @@
 #define NETSS_SUBDEV_ARM11_MMIO_SIZE (0x20000)
 #define NETSS_SUBDEV_MOCA_MMIO_OFFSET (0xE800000)
 #define NETSS_SUBDEV_MOCA_MMIO_SIZE (0x800000)
+#define NETSS_SUBDEV_GBE_MMIO_OFFSET (0x318000)
+#define NETSS_SUBDEV_GBE_MMIO_SIZE (0x6000)
 
 #define NETSS_ARM11_INTRPTS_MAX (64)  /*ARM11 is a bundle of 64 interrupts */
 
@@ -70,6 +72,8 @@ typedef enum {
    NETSS_SUBDEVICE_MAX
 }netss_subdevices_t;
 
+/* GMAC5 is BIT8 in SAP registers */
+#define NETSS_GBE ( 8 )
 
 typedef irqreturn_t (* netss_subdevice_irq_func)(int irqnum, void *);
 
@@ -87,6 +91,9 @@ typedef struct netss_subdevice_mmio {
 void netss_subdev_register_irq(netss_subdevices_t subdevice, int arm11_int_id, netss_subdev_irq_info_t *irq_info);
 bool netss_driver_ready(void);
 int netss_get_subdevice_mmio_info(netss_subdevices_t subdevice, netss_subdevice_mmio_t *mmio);
+void netss_enable_irq(netss_subdevices_t subdevice);
+void netss_disable_irq(netss_subdevices_t subdevice);
+void netss_ack_irq(netss_subdevices_t subdevice);
 
 #endif
 
-- 
1.7.9.5

