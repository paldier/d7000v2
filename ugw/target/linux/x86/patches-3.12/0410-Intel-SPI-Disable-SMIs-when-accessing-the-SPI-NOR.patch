From c45c333b978fd106cc555e414dad53d44af9bec3 Mon Sep 17 00:00:00 2001
From: "Martinez, Ricardo" <ricardo.martinez@intel.com>
Date: Fri, 6 May 2016 10:19:22 -0700
Subject: [PATCH] Intel-SPI: Disable SMIs when accessing the SPI-NOR

Disable SMIs before accessing the SPI-NOR to prevent a race condition
when and SMI handler tries to access data in the SPI-NOR.
---
 drivers/mtd/spi-nor/intel-spi.c |  124 +++++++++++++++++++++++++++++++++++----
 1 file changed, 113 insertions(+), 11 deletions(-)

diff --git a/drivers/mtd/spi-nor/intel-spi.c b/drivers/mtd/spi-nor/intel-spi.c
index 35cab35..4656e9b 100755
--- a/drivers/mtd/spi-nor/intel-spi.c
+++ b/drivers/mtd/spi-nor/intel-spi.c
@@ -17,6 +17,8 @@
 #include <linux/mtd/partitions.h>
 #include <linux/mtd/spi-nor.h>
 #include <linux/platform_data/intel-spi.h>
+#include <linux/pci.h>
+#include <linux/io.h>
 
 #include "intel-spi.h"
 
@@ -91,6 +93,8 @@
 
 #define SSFSTS_CTL_LPT		0x90
 
+#define GBL_SMI_EN		0x1
+
 /**
  * @dev: Device pointer
  * @base: Beginning of MMIO space
@@ -111,14 +115,27 @@ struct intel_spi {
 	u8 preopcodes[2];
 };
 
+/**
+ * @base:  Beginning of the protected region, bits 26:12 are extracted from
+			  the PR(n) register, bits 11:0 are assumed to be 0x000.
+ * @limit: Limit of the protected region, bits 26:12 are extracted from
+			  the PR(n) register, bits 11:0 are assumed to be 0xFFF.
+ * @reg:   Address of the PR(n) register.
+ */
 struct protected_region {
 	u32 base;
 	u32 limit;
-	u32 reg;
+	void __iomem *reg;
 };
 
 static struct protected_region pr[PR_NUMBER];
 
+/*
+ * SMI_EN port number, used to disable SMI to make sure the SPI driver does not
+ * get interrupted by SMI handlers that could access the SPI as well.
+ */
+static u32 smi_en_port;
+
 static const char *intel_spi_partition_names[] = {
 	"Descriptor",
 	"BIOS",
@@ -259,6 +276,81 @@ static int intel_spi_wait_busy(struct intel_spi *ispi)
 	return timeout <= 0 ? -ETIMEDOUT : 0;
 }
 
+/* Get the SMI_EN port number in order be able to disable/enable SMIs. */
+static void get_smi_en_port(struct intel_spi *ispi)
+{
+	struct pci_dev *pcu_dev = NULL;
+	u32 pcu_base_addr_cfg;
+	u32 acpi_base_addr;
+	u32 SmiEnVal;
+
+	/* Invalidate the SMI_EN port number in case something fails */
+	smi_en_port = 0;
+
+	/* Find the PCU */
+	pcu_dev = pci_get_device(0x8086, 0x2B9C, NULL);
+	if (!pcu_dev) {
+		dev_err(ispi->dev, "PCU device not found\n");
+		return;
+	}
+
+	/*
+	 * The bits 15:7 of the ACPI base address are at offset 0x40
+	 *  from PCI config space.
+	 */
+	pci_read_config_dword(pcu_dev, 0x40, &pcu_base_addr_cfg);
+	acpi_base_addr = pcu_base_addr_cfg & 0x0000FF80;
+	if (!acpi_base_addr) {
+		dev_err(ispi->dev, "I/O space for ACPI uninitialized\n");
+		return;
+	}
+
+	/* SMI_EN is at offset 0x30 from ABASE */
+	smi_en_port = acpi_base_addr + 0x30;
+
+	/* If SMIs are disabled leave them like that. */
+	SmiEnVal = inl(smi_en_port);
+	if (0 == SmiEnVal & 0xFFFFFFFE) {
+		dev_info(ispi->dev, "SMIs already disabled\n");
+		smi_en_port = 0;
+	}
+}
+
+/*
+ * Disables the generation of SMIs.
+ * Returns the status of the gbl_smi_en bit before it was disabled.
+ */
+static inline u32 disable_smi(void)
+{
+	u32 SmiEnVal;
+	u32 gbl_smi_en_val = 0;
+
+	if (smi_en_port) {
+		SmiEnVal = inl(smi_en_port);
+		gbl_smi_en_val = SmiEnVal & GBL_SMI_EN;
+		/* Clear bit 0 (gbl_smi_en) */
+		SmiEnVal &= 0xFFFFFFFE;
+		outl(SmiEnVal, smi_en_port);
+	}
+
+	return gbl_smi_en_val;
+}
+
+/*
+ * Restores the status of the gbl_smi_en bit to its original value
+ * before being disabled by disable_smi() function.
+ */
+static inline void restore_smi(u32 gbl_smi_en_val)
+{
+	u32 SmiEnVal;
+
+	if (smi_en_port) {
+		SmiEnVal = inl(smi_en_port);
+		SmiEnVal |= gbl_smi_en_val & GBL_SMI_EN;
+		outl(SmiEnVal, smi_en_port);
+	}
+}
+
 /*
  * Disables write protection of the region that contains 'offset'.
  * No action is performed if 'offset' is not contained in any protected region.
@@ -269,7 +361,7 @@ static inline void intel_spi_unprotect(u32 offset)
 	int i;
 
 	for (i = 0; i < PR_NUMBER; i++) {
-		if (offset>= pr[i].base && offset<= pr[i].limit) {
+		if (offset >= pr[i].base && offset <= pr[i].limit) {
 			val = readl(pr[i].reg);
 			val &= (u32)~PR_WRITE_ENABLE;
 			writel(val, pr[i].reg);
@@ -288,7 +380,7 @@ static inline void intel_spi_protect(u32 offset)
 	int i;
 
 	for (i = 0; i < PR_NUMBER; i++) {
-		if (offset>= pr[i].base && offset<= pr[i].limit) {
+		if (offset >= pr[i].base && offset <= pr[i].limit) {
 			val = readl(pr[i].reg);
 			val |= (u32)PR_WRITE_ENABLE;
 			writel(val, pr[i].reg);
@@ -368,6 +460,8 @@ static int intel_spi_init(struct intel_spi *ispi)
 
 	}
 
+	get_smi_en_port(ispi);
+
 	dump_regs(ispi);
 
 	return 0;
@@ -507,8 +601,10 @@ static int intel_spi_read(struct spi_nor *nor, loff_t from, size_t len,
 {
 	struct intel_spi *ispi = nor->priv;
 	size_t block_size;
-	u32 val, status;
-	ssize_t ret;
+	u32 val, status, gbl_smi_en_val;
+	ssize_t ret = 0;
+
+	gbl_smi_en_val = disable_smi();
 
 	while (len > 0) {
 		block_size = min_t(size_t, len, 64);
@@ -526,7 +622,7 @@ static int intel_spi_read(struct spi_nor *nor, loff_t from, size_t len,
 
 		ret = intel_spi_wait_busy(ispi);
 		if (ret)
-			return ret;
+			break;
 
 		status = readl(ispi->base + HSFSTS_CTL);
 		if (status & HSFSTS_CTL_FCERR)
@@ -536,12 +632,12 @@ static int intel_spi_read(struct spi_nor *nor, loff_t from, size_t len,
 
 		if (ret < 0) {
 			dev_err(ispi->dev, "error: %llx: %#x\n", from, status);
-			return ret;
+			break;
 		}
 
 		ret = intel_spi_read_block(ispi, read_buf, block_size);
 		if (ret)
-			return ret;
+			break;
 
 		len -= block_size;
 		from += block_size;
@@ -549,7 +645,9 @@ static int intel_spi_read(struct spi_nor *nor, loff_t from, size_t len,
 		read_buf += block_size;
 	}
 
-	return 0;
+	restore_smi(gbl_smi_en_val);
+
+	return ret;
 }
 
 static void intel_spi_write(struct spi_nor *nor, loff_t to, size_t len,
@@ -557,9 +655,10 @@ static void intel_spi_write(struct spi_nor *nor, loff_t to, size_t len,
 {
 	struct intel_spi *ispi = nor->priv;
 	size_t block_size;
-	u32 val, status;
+	u32 val, status, gbl_smi_en_val;
 	int ret;
 
+	gbl_smi_en_val = disable_smi();
 	intel_spi_unprotect(to);
 
 	while (len > 0) {
@@ -608,14 +707,16 @@ static void intel_spi_write(struct spi_nor *nor, loff_t to, size_t len,
 		write_buf += block_size;
 	}
 	intel_spi_protect(to);
+	restore_smi(gbl_smi_en_val);
 }
 
 static int intel_spi_erase(struct spi_nor *nor, loff_t offs)
 {
 	struct intel_spi *ispi = nor->priv;
-	u32 val, status=0;
+	u32 val, status = 0, gbl_smi_en_val;
 	int ret;
 
+	gbl_smi_en_val = disable_smi();
 	intel_spi_unprotect(offs);
 
 	writel(offs, ispi->base + FADDR);
@@ -638,6 +739,7 @@ static int intel_spi_erase(struct spi_nor *nor, loff_t offs)
 		ret = -EACCES;
 
 	intel_spi_protect(offs);
+	restore_smi(gbl_smi_en_val);
 
 	return ret;
 }
-- 
1.7.9.5

