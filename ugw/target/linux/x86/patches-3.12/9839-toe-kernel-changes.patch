# HG changeset patch
# Parent e2a3e236e0c9aa2783fcff7a6119ae7ba670f10c
diff --git a/net/core/dev.c b/net/core/dev.c
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2827,6 +2827,67 @@ int dev_loopback_xmit(struct sk_buff *sk
 EXPORT_SYMBOL(dev_loopback_xmit);
 
 extern void ppa_update_pp_add_fn(struct sk_buff *skb);
+
+static int (*toe_receive_skb_hook)(struct sk_buff *skb) = NULL;
+static int (*toe_dev_queue_xmit_hook)(struct sk_buff *skb) = NULL;
+
+#define TOE_RECEIVE_SKB_HOOK 0
+#define TOE_DEV_QUEUE_XMIT_HOOK 1
+
+int toe_hook_register(int hooknum, int (*hook_fn)(struct sk_buff *))
+{
+	if (hooknum == TOE_DEV_QUEUE_XMIT_HOOK) {
+		if (unlikely(toe_dev_queue_xmit_hook)) {
+			pr_warning("%s:%d: toe_dev_queue_xmit_hook already registered!\n", __func__, __LINE__);
+			return -EPERM;
+		}
+
+		toe_dev_queue_xmit_hook = hook_fn;
+		
+		pr_info("%s:%d: toe_ingress_hook function registered (=%p)\n",
+			__func__, __LINE__, hook_fn);
+	} else {
+		if (unlikely(toe_receive_skb_hook)) {
+			pr_warning("%s:%d: toe_receive_skb_hook already registered!\n", __func__, __LINE__);
+			return -EPERM;
+		}
+
+		toe_receive_skb_hook = hook_fn;
+		
+		pr_info("%s:%d: toe_egress_hook function registered (=%p)\n",
+			__func__, __LINE__, hook_fn);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(toe_hook_register);
+
+int toe_hook_unregister(int hooknum)
+{
+	if (hooknum == TOE_DEV_QUEUE_XMIT_HOOK) {
+		if (unlikely(!toe_dev_queue_xmit_hook)) {
+			pr_warning("%s:%d: toe_dev_queue_xmit_hook not registered!\n", __func__, __LINE__);
+			return -EPERM;
+		}
+
+		toe_dev_queue_xmit_hook = NULL;
+
+		pr_info("%s:%d: toe_dev_queue_xmit_hook function unregistered\n",
+			__func__, __LINE__);
+	} else {
+		if (unlikely(!toe_receive_skb_hook)) {
+			pr_warning("%s:%d: toe_receive_skb_hook not registered!\n", __func__, __LINE__);
+			return -EPERM;
+		}
+
+		toe_receive_skb_hook = NULL;
+
+		pr_info("%s:%d: toe_receive_skb_hook function unregistered\n",
+			__func__, __LINE__);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(toe_hook_unregister);
+
 /**
  *	dev_queue_xmit - transmit a buffer
  *	@skb: buffer to transmit
@@ -2860,6 +2921,9 @@ int dev_queue_xmit(struct sk_buff *skb)
 	int rc = -ENOMEM;
 	int ret=0;
 
+	if (toe_dev_queue_xmit_hook && toe_dev_queue_xmit_hook(skb))
+		dev = skb->dev;
+
 #ifdef CONFIG_TI_META_DATA_CONSOLE_DUMP
     if (skb->ti_meta_info != 0x0)
         printk ("Core Networking Device Layer: %s SKB 0x%p has META Data 0x%x\n", skb->dev->name, skb, skb->ti_meta_info);
@@ -3614,6 +3678,11 @@ another_round:
 		goto unlock;
     }
 #endif /* CONFIG_TI_DEVICE_PROTOCOL_HANDLING */
+	if (toe_receive_skb_hook && toe_receive_skb_hook(skb)) {
+		ret = NET_RX_SUCCESS;
+		goto unlock;
+	}
+
 	skb->skb_iif = skb->dev->ifindex;
 
 	__this_cpu_inc(softnet_data.processed);
diff --git a/net/core/ti_dev.c b/net/core/ti_dev.c
--- a/net/core/ti_dev.c
+++ b/net/core/ti_dev.c
@@ -347,6 +347,7 @@ int ti_deregister_egress_hook_handler (s
 
 EXPORT_SYMBOL(ti_register_egress_hook_handler); 
 EXPORT_SYMBOL(ti_deregister_egress_hook_handler);
+EXPORT_SYMBOL(ti_egress_hook_handler);
 EXPORT_SYMBOL(ti_protocol_handler); 
 
 #endif /* CONFIG_TI_EGRESS_HOOK */
