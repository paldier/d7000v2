From f2fc8d308b4a552b45961cce71542bb4057f2f94 Mon Sep 17 00:00:00 2001
From: Prakash Chandra <prakash1.chandra@intel.com>
Date: Tue, 22 Mar 2016 06:48:58 -0700
Subject: [PATCH] Title:  sync packet processor changes from ARM to        
 ATOM kernel: PP info structure         (part of the skbuff
 structure) Description: ported packet processor PP info    
         changes from ARM to ATOM. also            
 cleaned-up #ifdef in skbuff.c Issue:  HSD:246109;245673
 IssueType:  Defect Symptom: pp info structure changed.
 interfere with -Werror=undef flag RootCause: used #if
 rather than #ifdef Resolution:changes needed in
 include/linux/avalanche/generic/avalanche_pp_api.h and
 linux/skbuff.h changes Impact: GW on ATOM. Change-Id:
 I01faff79ee1003bd8fdc041860f3258005272be5

---
 include/linux/avalanche/generic/avalanche_pp_api.h |  162 ++++++++++++++++----
 net/core/skbuff.c                                  |   36 +++--
 2 files changed, 154 insertions(+), 44 deletions(-)

--- a/include/linux/avalanche/generic/avalanche_pp_api.h
+++ b/include/linux/avalanche/generic/avalanche_pp_api.h
@@ -40,7 +40,7 @@
 #else
  #define PUMA7_SOC_TYPE 0
  #define PUMA7_OR_NEWER_SOC_TYPE 0
- #endif
+#endif
 #define PUMA6_SOC_TYPE 0
 #if PUMA6_SOC_TYPE
 #include <asm-arm/arch-avalanche/puma6/puma6_cppi_prv.h>
@@ -75,6 +75,7 @@
 #define AVALANCHE_PP_MAX_ACCELERATED_SESSIONS           2048
 #define AVALANCHE_PP_MAX_LUT1_KEYS                      256
 #define AVALANCHE_PP_MAX_ACCELERATED_TDOX_SESSIONS      256
+#define MAX_ALLOWED_QOS_CLUSTERS_PER_DEVICE             16
 #else
 #define AVALANCHE_PP_MAX_PID                            32
 #define AVALANCHE_PP_MAX_VPID                           32
@@ -82,6 +83,7 @@
 #define AVALANCHE_PP_MAX_LUT_ENTRIES                    (3 * 1024)
 #define AVALANCHE_PP_MAX_ACCELERATED_SESSIONS           (AVALANCHE_PP_MAX_STATIC_ENTRIES + AVALANCHE_PP_MAX_LUT_ENTRIES)
 #define AVALANCHE_PP_MAX_ACCELERATED_TDOX_SESSIONS      512
+#define VPID_IF_NAME_SIZE                               16
 #endif
 
 #ifdef CONFIG_WIFI_MESH_TUNNEL
@@ -89,7 +91,7 @@
 #else
 #define AVALANCHE_PP_MAX_ACCELERATED_VOICE_SESSIONS     16
 #endif
-#define MAX_ALLOWED_QOS_CLUSTERS_PER_DEVICE             16
+
 
 /**************************************************************************
  * STRUCTURE NAME : AVALANCHE_PP_VERSION_t
@@ -136,6 +138,7 @@ typedef struct
     Uint32  MocaPDSPver;
     Uint32  IpsecPPver;
     Uint32  IpsecPDSPver;
+
     Uint32  MinPPver;
     Uint32  MaxPPver;
 }
@@ -273,20 +276,12 @@ AVALANCHE_PP_PID_RANGE_t;
 /*                                                                      */
 /*                                                                      */
 /* ******************************************************************** */
-
-#define AVALANCHE_PP_QOS_CLST_MAX_QCNT          8
-#define AVALANCHE_PP_QOS_CLST_MAX_EGRESS_QCNT   4
 #if PUMA6_SOC_TYPE
 #define AVALANCHE_PP_QOS_CLST_MAX_INDX          31
-#else
-#define AVALANCHE_PP_QOS_CLST_MAX_INDX          63
-#endif
 #define AVALANCHE_PP_QOS_QUEUE_MAX_INDX         (PAL_CPPI41_SR_QPDSP_QOS_Q_LAST - PAL_CPPI41_SR_QPDSP_QOS_Q_BASE)
-#define AVALANCHE_PP_QOS_Q_REALTIME            (1<<0)
-
-
-
-
+#endif
+#define AVALANCHE_PP_QOS_CLST_MAX_EGRESS_QCNT   4
+#define AVALANCHE_PP_QOS_CLST_MAX_QCNT          8
 /**************************************************************************
  * STRUCTURE NAME : AVALANCHE_PP_QOS_QUEUE
  **************************************************************************
@@ -433,16 +428,21 @@ typedef struct // former TI_PP_VPID
     /* Private Data. */
     Uint16                           flags;
 
+
     /* This is an optional VLAN Identifier associated with the VPID. This
      * is required only if the VPID is attached to a VLAN enabled network
      * Thus this field will be used only if the "type" is either AVALANCHE_PP_VLAN
      * or AVALANCHE_PP_VLAN_PPPoE */
     Uint16                          vlan_identifier;
 
-
+#if PUMA6_SOC_TYPE
     /* These are the QoS related settings */
     AVALANCHE_PP_QOS_CLST_CFG_t *   qos_cluster[ MAX_ALLOWED_QOS_CLUSTERS_PER_DEVICE ];
     unsigned char                   qos_clusters_count;
+#else
+    /* This is the name of the interface. */
+    char                            devName[VPID_IF_NAME_SIZE];
+#endif
 }
 AVALANCHE_PP_VPID_INFO_t;
 
@@ -693,6 +693,20 @@ __Avalanche_PP_LUTs_Data_t;
 #define PP_LOOKUP_FIELD_UNKNOWN_VALUE           0
 #define PP_LOOKUP_FIELD_PPPOE_SESSION_INVALID   0xFFFF
 
+/* Define for EtherType 0xFFFF - special MoCA packets */
+#define ETH_P_CTP_MOCA          (0xFFFF)
+
+/* Enum for Classification mode */
+typedef enum
+{
+    CLASSIFICATION_MODE_IPV4_IPV6_L4   = 0,   // Accelerate packets with ip v4/6 and tcp/udp (L4 is mandatory)
+    CLASSIFICATION_MODE_IPV4_IPV6      = 1,   // Accelerate packets with ip v4/6 (L4 is optional)
+    CLASSIFICATION_MODE_MOCA_IRREG     = 2    // Accelerate packets with ip v4/6/ and L3=ffff for MoCA only (L4 is optional)
+}PP_CLASSIFICATION_MODE_e;
+
+#define CLASSIFICATION_MODE_DEFAULT CLASSIFICATION_MODE_IPV4_IPV6
+
+
 typedef enum
 {
     PP_LOOKUP_FIELD_L2_TYPE_ETHERNET            = 1
@@ -701,13 +715,15 @@ typedef enum
 typedef enum
 {
     PP_LOOKUP_FIELD_L3_TYPE_IPv4                = 1,
-    PP_LOOKUP_FIELD_L3_TYPE_IPv6                = 2
+    PP_LOOKUP_FIELD_L3_TYPE_IPv6                = 2,
+    PP_LOOKUP_FIELD_L3_TYPE_FFFF                = 3
 }PP_LOOKUP_FIELD_L3_TYPES_e;
 
 typedef enum
 {
     PP_LOOKUP_FIELD_L4_PROTOCOL_UDP             = 1,
-    PP_LOOKUP_FIELD_L4_PROTOCOL_TCP             = 2
+    PP_LOOKUP_FIELD_L4_PROTOCOL_TCP             = 2,
+    PP_LOOKUP_FIELD_L4_PROTOCOL_0xFF            = 15
 }PP_LOOKUP_FIELD_L4_TYPES_e;
 
 typedef enum
@@ -1019,10 +1035,15 @@ typedef struct // former TI_PP_SESSION
 #endif
 
     /* Flag which indicates the priority of the session.
-     * With the introduction of QoS this will play an important part. */
+     * With the introduction of QoS this will play an important part.
+     * priority 0 is the lowest priority, highest priority is depend
+     * on the number of queues in the cluster*/
     Uint8                   priority;
+#if PUMA7_OR_NEWER_SOC_TYPE
+    Uint8                   phy_cluster_id;
+#else
     Uint8                   cluster;
-
+#endif
     /* Flag which indicates if the session was for a ROUTER or BRIDGE
      * This information is required because if the session is for the
      * ROUTER the PDSP needs to ensure that all packets matching their
@@ -1054,6 +1075,8 @@ typedef struct // former TI_PP_SESSION
 }
 AVALANCHE_PP_SESSION_INFO_t;
 
+#define HOSTD_DESC_PROTOCOL_SPECIFIC_SESSION_INDEX_MASK (0x0000FFFF)
+
 /**************************************************************************
  * STRUCTURE NAME : AVALANCHE_PP_SESSION_STATS_t
  **************************************************************************
@@ -1071,6 +1094,33 @@ typedef struct // former TI_PP_SESSION_S
 }
 AVALANCHE_PP_SESSION_STATS_t;
 
+/**************************************************************************
+ * STRUCTURE NAME : AVALANCHE_PP_EXTENDED_SESSION_STATS_t
+ **************************************************************************
+ * DESCRIPTION   :
+ *  The structure describes the extended session statistics used in ioctl.
+ **************************************************************************/
+typedef struct
+{
+    Uint32                          session_id;
+    Bool                            session_get_ret_val;
+    AVALANCHE_PP_SESSION_STATS_t    session_stats;
+}
+AVALANCHE_PP_EXTENDED_SESSION_STATS_t;
+
+/**************************************************************************
+ * STRUCTURE NAME : PP_HAL_SESSION_RECORD_NON_ACCELERATED_STATS_t
+ **************************************************************************
+ * DESCRIPTION   :
+ *  The structure describes the session non accelerated counters
+ *  These counters count packets which was not accelerated and reached host
+ **************************************************************************/
+typedef struct
+{
+    Uint32  PacketCounterNonAccelerated;
+    Uint32  ByteCounterNonAccelerated;
+}
+PP_HAL_SESSION_RECORD_NON_ACCELERATED_STATS_t;
 
 /**************************************************************************
  * STRUCTURE NAME : TI_PP_GLOBAL_STATS
@@ -1107,9 +1157,9 @@ typedef struct
     Uint32      Modifier_ipv6_pkts;
     Uint32      Modifier_pkts_frwrd_to_nexthop;
     Uint32      Modifier_pkts_frwrd_to_qos;
-    Uint32      Modifier_res1;
-    Uint32      Modifier_res2;
-    Uint32      Modifier_res3;
+    Uint32      Modifier_pkts_marked_with_ptid;
+    Uint32      Modifier_oversize_pkts;
+    Uint32      Modifier_pkts_modified;
 
     /* Session Cache */
     Uint32      SessionCache_lookup_attempts;
@@ -1139,7 +1189,8 @@ typedef struct
     Uint32      TurboDOX_res5;
     Uint32      TurboDOX_res6;
     Uint32      TurboDOX_res7;
-    Uint32      TurboDOX_res8;
+    //Uint32      TurboDOX_res8; Taken for ReSequencer usage
+    Uint32      ReSequencer_host_rx_pkts;
 
     /* ReSequencer */
     Uint32      ReSequencer_rx_pkts;
@@ -1150,6 +1201,17 @@ typedef struct
     Uint32      ReSequencer_pkts_frwrd_to_host;
     Uint32      ReSequencer_host_forwarded_pkts;
     Uint32      ReSequencer_host_discarded_pkts;
+
+    /* Sync Q */
+    Uint32      SyncQ_allocated_q;
+    Uint32      SyncQ_free;
+    Uint32      SyncQ_alloc_starvation;
+    Uint32      SyncQ_PTID_received;
+    Uint32      SyncQ_timer_expired;
+    Uint32      SyncQ_threshold_overflow;
+    Uint32      SyncQ_PTID_sent;
+    Uint32      SyncQ_Sent_To_SyncQ;
+
 } AVALANCHE_PP_STAGE1_STATS_t;
 
 typedef struct
@@ -1290,9 +1352,25 @@ typedef struct
 
 typedef struct
 {
+    Uint64 ds_received_packets;
+} AVALANCHE_PP_DS_STATS_t;
+
+#define AVALANCHE_PP_US_SERVICE_FLOW_COUNTERS 16
+typedef struct
+{
+    /* one 64-bit counter per service flow. 16 is a reasonable upper bound on
+    the number of active service flows, although the system supports more (56?).*/
+    // In reality, only 1-2 flows are used.
+    Uint64 us_sent_packets[AVALANCHE_PP_US_SERVICE_FLOW_COUNTERS];
+} AVALANCHE_PP_US_STATS_t;
+
+typedef struct
+{
     AVALANCHE_PP_STAGE1_STATS_t         stage1;
     AVALANCHE_PP_STAGE2_Part1_STATS_t   stage2_1;
     AVALANCHE_PP_STAGE2_Part2_STATS_t   stage2_2;
+    //AVALANCHE_PP_DS_STATS_t ds;
+    //AVALANCHE_PP_US_STATS_t us;
 } AVALANCHE_PP_GLOBAL_STATS_t;
 
 #else
@@ -1371,6 +1449,8 @@ typedef AVALANCHE_PP_RET_e   (* AVALANCH
 #if PUMA7_OR_NEWER_SOC_TYPE
 extern AVALANCHE_PP_RET_e    avalanche_pp_open_acc_ch           ( AVALANCHE_PP_ACC_CH_INFO_t * ptr_ch_cfg);
 extern AVALANCHE_PP_RET_e    avalanche_pp_close_acc_ch          ( AVALANCHE_PP_ACC_CH_INFO_t * ptr_ch_cfg);
+extern AVALANCHE_PP_RET_e    avalanche_pp_set_sync_q_max_thrshold( Uint16 threshold );
+extern AVALANCHE_PP_RET_e    avalanche_pp_counter64_read        ( Uint64 * dest, volatile Ptr src );
 #endif
 extern AVALANCHE_PP_RET_e    avalanche_pp_pid_create            ( AVALANCHE_PP_PID_t * ptr_pid, void * ptr_netdev );
 extern AVALANCHE_PP_RET_e    avalanche_pp_pid_delete            ( Uint8     pid_handle );
@@ -1405,10 +1485,11 @@ extern AVALANCHE_PP_RET_e   avalanche_pp
 extern AVALANCHE_PP_RET_e    avalanche_pp_sessions_delete_by_addr ( Uint8 mask, Uint8* srcMacAdr, Uint8* dstMacAdr, Uint8* rxMacAdr, Uint8* txMacAdr, Uint32* num_deleted_sessions);
 #endif
 /* Statistics API */
-extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_session   ( Uint32 session_handle,    AVALANCHE_PP_SESSION_STATS_t*    ptr_session_stats );
-extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_vpid      ( Uint8  vpid_handle,       AVALANCHE_PP_VPID_STATS_t*       ptr_vpid_stats );
-extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_global    ( AVALANCHE_PP_GLOBAL_STATS_t*     ptr_stats );
-
+extern AVALANCHE_PP_RET_e   avalanche_pp_modify_stats_counters      ( Uint32 session_handle, Uint32 packet_size);
+extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_session          ( Uint32 session_handle, AVALANCHE_PP_SESSION_STATS_t* ptr_session_stats );
+extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_vpid             ( Uint8  vpid_handle, AVALANCHE_PP_VPID_STATS_t* ptr_vpid_stats );
+extern AVALANCHE_PP_RET_e   avalanche_pp_get_stats_global           ( AVALANCHE_PP_GLOBAL_STATS_t* ptr_stats );
+extern AVALANCHE_PP_RET_e   avalanche_pp_reset_stats_globa          ( void );
 
 #ifdef CONFIG_WIFI_MESH_TUNNEL
 
@@ -1450,6 +1531,7 @@ extern AVALANCHE_PP_RET_e   avalanche_pp
 extern AVALANCHE_PP_RET_e   avalanche_pp_event_handler_unregister   ( Uint32    handle_event_handler );
 extern AVALANCHE_PP_RET_e   avalanche_pp_event_report( AVALANCHE_PP_EVENT_e  event, Uint32 param1, Uint32 param2 );
 
+#if PUMA6_SOC_TYPE
 /* QoS API. */
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_cluster_setup      ( Uint8     clst_indx,  AVALANCHE_PP_QOS_CLST_CFG_t*    clst_cfg );
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_cluster_enable     ( Uint8     clst_indx );
@@ -1459,12 +1541,18 @@ extern AVALANCHE_PP_RET_e   avalanche_pp
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_set_cluster_max_global_credit  ( Bool creditTypeBytes, Uint8 cluster_id,   Uint32 max_global_credit );
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_set_queue_max_credit           ( Bool creditTypeBytes, Uint8 queue_id,     Uint32 max_credit );
 extern AVALANCHE_PP_RET_e   avalanche_pp_qos_set_queue_iteration_credit     ( Bool creditTypeBytes, Uint8 queue_id,     Uint32 it_credit  );
-
+extern AVALANCHE_PP_RET_e   avalanche_pp_qos_set_queue_congestion           ( Bool creditTypeBytes, Uint8 queue_id,     Uint32 it_credit  );
+#endif
 /* Power Saving Mode (PSM) API. */
 extern AVALANCHE_PP_RET_e    avalanche_pp_psm                       ( Uint8     onOff );
 extern AVALANCHE_PP_RET_e    avalanche_pp_hw_init                   ( void );
 extern AVALANCHE_PP_RET_e    avalanche_pp_hw_interrupt_bundle_init  ( void );
 
+#if PUMA7_OR_NEWER_SOC_TYPE
+extern AVALANCHE_PP_RET_e    avalanche_pp_set_classification_mode(PP_CLASSIFICATION_MODE_e);
+extern PP_CLASSIFICATION_MODE_e avalanche_pp_get_classification_mode( void );
+#endif
+
 /* MISC APIs */
 #define AVALANCHE_PP_LUT_HISTOGRAM_SIZE             8
 #define AVALANCHE_PP_LUT1_HISTOGRAM_RESOLUTION      (AVALANCHE_PP_MAX_LUT1_KEYS / AVALANCHE_PP_LUT_HISTOGRAM_SIZE)
@@ -1475,6 +1563,7 @@ typedef struct
     Uint32                              active_PIDs;
     Uint32                              active_VPIDs;
     Uint32                              active_sessions;
+    Uint32                              active_irreg_moca_sessions;
     Uint32                              max_active_sessions;
     Uint32                              lut2_histogram[AVALANCHE_PP_LUT_HISTOGRAM_SIZE];
     Uint32                              lut2_starvation;
@@ -1504,6 +1593,7 @@ extern AVALANCHE_PP_RET_e    avalanche_p
 extern AVALANCHE_PP_RET_e    avalanche_pp_set_mta_mac_address ( Uint8 * mtaAddress );
 extern AVALANCHE_PP_RET_e    avalanche_pp_get_db_stats ( AVALANCHE_PP_Misc_Statistics_t * stats_ptr );
 extern AVALANCHE_PP_RET_e    avalanche_pp_reset_db_stats ( void );
+extern AVALANCHE_PP_RET_e    avalanche_pp_modify_stats_counters   ( Uint32 session_handle, Uint32 packet_size);
 
 extern Bool                  avalanche_pp_state_is_active( void );
 extern Bool                  avalanche_pp_state_is_psm( void );
@@ -1523,6 +1613,7 @@ typedef     Uint8     avalanche_pp_psm_i
 typedef     Uint32    avalanche_pp_frag_mode_ioctl_param_t;
 typedef     Uint8     avalanche_pp_mtaMacAddr_ioctl_param_t[6];
 
+#if PUMA6_SOC_TYPE
 typedef     struct
 {
 
@@ -1531,7 +1622,7 @@ typedef     struct
     Uint32      newValue;
 
 }avalanche_pp_Qos_ioctl_params_t;
-
+#endif
 /* There QoS may be defined either for physical or virtual device
 The QoS setting hooks are being triggered by PID creation.
 In case there is a need in alternative QoS scheme to be created it can be
@@ -1551,6 +1642,7 @@ typedef     struct
     Uint32  session_record_base_address;
     Uint32  session_timeout_base_address;
     Uint32  hop_list_base_address;
+    Uint16  syncQThreshold;
 }avalanche_pp_db_address_param_t;
 /********************************************************************************************************/
 /* IOCTL commands:
@@ -1591,11 +1683,15 @@ typedef     struct
 #define PP_DRIVER_SET_QOS_CLST_MAX_CREDIT           _IOWR (PP_DRIVER_MODULE_ID, 5, avalanche_pp_Qos_ioctl_params_t)
 #define PP_DRIVER_SET_QOS_QUEUE_MAX_CREDIT          _IOWR (PP_DRIVER_MODULE_ID, 6, avalanche_pp_Qos_ioctl_params_t)
 #define PP_DRIVER_SET_QOS_QUEUE_ITERATION_CREDIT    _IOWR (PP_DRIVER_MODULE_ID, 7, avalanche_pp_Qos_ioctl_params_t)
-#define PP_DRIVER_SET_FRAG_MODE                     _IOWR (PP_DRIVER_MODULE_ID, 8, avalanche_pp_frag_mode_ioctl_param_t)
-#define PP_DRIVER_SET_MTA_ADDR                      _IOWR (PP_DRIVER_MODULE_ID, 9, avalanche_pp_mtaMacAddr_ioctl_param_t)
-#define PP_DRIVER_KERNEL_POST_INIT                  _IO   (PP_DRIVER_MODULE_ID, 10)
-#define PP_DRIVER_SET_ACK_SUPP                      _IOWR (PP_DRIVER_MODULE_ID, 11, avalanche_pp_ackSupp_ioctl_param_t)
-#define PP_DRIVER_GET_DB_PARAMS                     _IOWR (PP_DRIVER_MODULE_ID, 12, avalanche_pp_db_address_param_t)
+#define PP_DRIVER_SET_QOS_QUEUE_CONGESTION          _IOWR (PP_DRIVER_MODULE_ID, 8, avalanche_pp_Qos_ioctl_params_t)
+#define PP_DRIVER_SET_FRAG_MODE                     _IOWR (PP_DRIVER_MODULE_ID, 9, avalanche_pp_frag_mode_ioctl_param_t)
+#define PP_DRIVER_SET_MTA_ADDR                      _IOWR (PP_DRIVER_MODULE_ID, 10, avalanche_pp_mtaMacAddr_ioctl_param_t)
+#define PP_DRIVER_KERNEL_POST_INIT                  _IO   (PP_DRIVER_MODULE_ID, 11)
+#define PP_DRIVER_SET_ACK_SUPP                      _IOWR (PP_DRIVER_MODULE_ID, 12, avalanche_pp_ackSupp_ioctl_param_t)
+#define PP_DRIVER_GET_DB_PARAMS                     _IOWR (PP_DRIVER_MODULE_ID, 13, avalanche_pp_db_address_param_t)
+#define PP_DRIVER_GET_GLOBAL_STATS                  _IOR  (PP_DRIVER_MODULE_ID, 14, AVALANCHE_PP_GLOBAL_STATS_t)
+#define PP_DRIVER_GET_SESSION_STATS                 _IOWR (PP_DRIVER_MODULE_ID, 15, AVALANCHE_PP_EXTENDED_SESSION_STATS_t)
+
 
 #endif //   _AVALANCHE_PP_H
 
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -89,9 +89,11 @@
 int skb_init_intel(struct sk_buff *skb);
 struct kmem_cache *skbuff_head_cache __read_mostly;
 static struct kmem_cache *skbuff_fclone_cache __read_mostly;
-#ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+#ifdef CONFIG_TI_PACKET_PROCESSOR
+#if PUMA7_OR_NEWER_SOC_TYPE
 struct kmem_cache *skbuff_pp_info_cache __read_mostly;
 #endif
+#endif
 
 /**
  *	skb_panic - private function for out-of-line support
@@ -199,7 +201,7 @@ out:
 }
 
 
-#ifdef PUMA7_OR_NEWER_SOC_TYPE
+#if PUMA7_OR_NEWER_SOC_TYPE
 void __init intel_cache_init(void)
 {
 #ifdef CONFIG_TI_PACKET_PROCESSOR
@@ -242,13 +244,15 @@ EXPORT_SYMBOL(kfree_pp_packet_info);
  */
 int skb_init_intel(struct sk_buff *skb)
 {
-#ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+#ifdef CONFIG_TI_PACKET_PROCESSOR
+#if PUMA7_OR_NEWER_SOC_TYPE
     skb->pp_packet_info = __alloc_skb_pp_packet_info();
     if (!skb->pp_packet_info)
     {
         return -1;
     }
 #endif
+#endif
 #ifdef CONFIG_TI_META_DATA
     skb->ti_meta_info = 0;
     skb->ti_meta_info2= 0;
@@ -647,13 +651,15 @@ static void kfree_skbmem(struct sk_buff 
 	struct sk_buff *other;
 	atomic_t *fclone_ref;
 
-    switch (skb->fclone) 
+    switch (skb->fclone)
     {
 	case SKB_FCLONE_UNAVAILABLE:
         {
-        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef CONFIG_TI_PACKET_PROCESSOR
+        #if PUMA7_OR_NEWER_SOC_TYPE
             kfree_pp_packet_info( skb->pp_packet_info );
         #endif
+        #endif
 		kmem_cache_free(skbuff_head_cache, skb);
         }
 		break;
@@ -662,10 +668,12 @@ static void kfree_skbmem(struct sk_buff 
 		fclone_ref = (atomic_t *) (skb + 2);
 		if (atomic_dec_and_test(fclone_ref))
         {
-        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef CONFIG_TI_PACKET_PROCESSOR
+        #if PUMA7_OR_NEWER_SOC_TYPE
             kfree_pp_packet_info( (skb  )->pp_packet_info );
             kfree_pp_packet_info( (skb+1)->pp_packet_info );
         #endif
+        #endif
 			kmem_cache_free(skbuff_fclone_cache, skb);
         }
 		break;
@@ -681,10 +689,12 @@ static void kfree_skbmem(struct sk_buff 
 
 		if (atomic_dec_and_test(fclone_ref))
         {
-        #ifdef PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
+        #ifdef CONFIG_TI_PACKET_PROCESSOR
+        #if PUMA7_OR_NEWER_SOC_TYPE
             kfree_pp_packet_info( (skb  )->pp_packet_info );
             kfree_pp_packet_info( (skb-1)->pp_packet_info );
         #endif
+        #endif
 			kmem_cache_free(skbuff_fclone_cache, other);
         }
 		break;
@@ -3267,9 +3277,11 @@ void __init skb_init(void)
 						0,
 						SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 						NULL);
-#ifdef PUMA7_OR_NEWER_SOC_TYPE 
+#ifdef CONFIG_TI_PACKET_PROCESSOR
+#if PUMA7_OR_NEWER_SOC_TYPE
     intel_cache_init();
 #endif
+#endif
 }
 
 /**
@@ -3592,11 +3604,13 @@ EXPORT_SYMBOL(__skb_warn_lro_forwarding)
 
 void kfree_skb_partial(struct sk_buff *skb, bool head_stolen)
 {
-    if (head_stolen) 
+    if (head_stolen)
     {
 		skb_release_head_state(skb);
-        #if PUMA7_OR_NEWER_SOC_TYPE && CONFIG_TI_PACKET_PROCESSOR
-            kfree_pp_packet_info( (skb)->pp_packet_info );
+        #ifdef CONFIG_TI_PACKET_PROCESSOR
+        #if PUMA7_OR_NEWER_SOC_TYPE
+        kfree_pp_packet_info( (skb)->pp_packet_info );
+        #endif
         #endif
 		kmem_cache_free(skbuff_head_cache, skb);
     }
