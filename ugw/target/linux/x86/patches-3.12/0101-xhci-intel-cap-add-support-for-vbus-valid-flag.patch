From c13598185a9730bbc4458835dcdecab40d11196c Mon Sep 17 00:00:00 2001
From: "Wu, Hao" <hao.wu@intel.com>
Date: Tue, 16 Dec 2014 12:47:36 +0800
Subject: [PATCH] xhci-intel-cap: add support for vbus valid flag

Provide one function to toggle vbus valid bit in PHY mux register.
It is used for device mode, after VBUS is present or removed,
software needs to program this bit to indicate the current VBUS
status to HW for device mode functionality.

Change-Id: Ib4cf8a3045a04fcde12a1c1694fa3b76f1de6bf1
Tracked-On: https://jira01.devtools.intel.com/browse/IMINAN-10250
Signed-off-by: Wu, Hao <hao.wu@intel.com>
(cherry picked from commit cb95c861d45b4456c078001e504d42a1c11bec76)
Signed-off-by: Maladau Mou <maladau.mou@intel.com>
---
 drivers/usb/host/xhci-intel-cap.c |   27 +++++++++++++++++++++++++--
 drivers/usb/host/xhci-intel-cap.h |    1 +
 2 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/xhci-intel-cap.c b/drivers/usb/host/xhci-intel-cap.c
index dcde084..70e79b0 100644
--- a/drivers/usb/host/xhci-intel-cap.c
+++ b/drivers/usb/host/xhci-intel-cap.c
@@ -57,6 +57,29 @@ int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci)
 	return 0;
 }
 
+/* Only used for device mode */
+int xhci_intel_phy_vbus_valid(struct xhci_hcd *xhci, int vbus_valid)
+{
+	u32		data;
+
+	if (!xhci || !xhci->phy_mux_regs)
+		return -ENODEV;
+
+	xhci_dbg(xhci, "vbus valid for phy mux is %d\n", vbus_valid);
+
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	if (vbus_valid)
+		data |= SW_VBUS_VALID;
+	else
+		data &= ~SW_VBUS_VALID;
+
+	writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(xhci_intel_phy_vbus_valid);
+
 int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on)
 {
 	unsigned long	timeout;
@@ -79,9 +102,9 @@ int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on)
 	 * for device mode */
 	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
 	if (is_device_on)
-		data |= (SW_IDPIN | SW_VBUS_VALID);
+		data |= SW_IDPIN;
 	else
-		data &= ~(SW_IDPIN | SW_VBUS_VALID);
+		data &= ~SW_IDPIN;
 	writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
 
 	/* Polling CFG1 for safety, most case it takes about 600ms to finish
diff --git a/drivers/usb/host/xhci-intel-cap.h b/drivers/usb/host/xhci-intel-cap.h
index 4a9dbf2..d322241 100644
--- a/drivers/usb/host/xhci-intel-cap.h
+++ b/drivers/usb/host/xhci-intel-cap.h
@@ -29,4 +29,5 @@
 #define DUAL_ROLE_CFG1_POLL_TIMEOUT	1000
 
 extern int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci);
+extern int xhci_intel_phy_vbus_valid(struct xhci_hcd *xhci, int vbus_valid);
 extern int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on);
-- 
1.7.9.5

