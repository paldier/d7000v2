# HG changeset patch
# Parent c95976744f3cfd7ef016485dc484955e1df961c6

--- a/arch/x86/NetIP_SubSystem/avalanche_intc.c
+++ b/arch/x86/NetIP_SubSystem/avalanche_intc.c
@@ -95,6 +95,72 @@ inline unsigned char  get_reg_index( uns
     return((unsigned char )( irq / NUM_INTS_PER_REG ));
 }
 
+/*added newly*/
+
+int avalanche_intc_set_interrupt_type( unsigned int irq,
+                                       unsigned char  int_type)
+{
+    unsigned int int_reg_indx = get_reg_index( irq );
+    unsigned int irq_bit = get_bit_position( irq );
+	
+    if (int_type)
+    {
+       avalanche_hw0_icregs->ictypr[int_reg_indx] |=
+           cpu_to_be32((1 << irq_bit));
+    }
+    else
+    {
+       avalanche_hw0_icregs->ictypr[int_reg_indx] &=
+           ~(cpu_to_be32((1 << irq_bit)));
+    }
+    return(0);
+}
+
+/* low level INTC type get */
+int avalanche_intc_get_interrupt_type( unsigned int irq )
+{
+    unsigned int int_reg_indx = get_reg_index( irq );
+    unsigned int irq_bit = get_bit_position( irq );
+	
+    return(unsigned char)((be32_to_cpu(avalanche_hw0_icregs->ictypr[int_reg_indx]) >>
+                                irq_bit)&0x1);
+}
+
+/* low level INTC pol set */
+int avalanche_intc_set_interrupt_polarity( unsigned int irq,
+                                           unsigned char int_polarity)
+{
+    unsigned int int_reg_indx =  get_reg_index( irq );
+    unsigned int irq_bit = get_bit_position( irq );
+	
+    if(int_polarity)
+    {
+        avalanche_hw0_icregs->icpolr[int_reg_indx] |=
+                        cpu_to_be32((1 << irq_bit));
+    }
+    else
+    {
+        avalanche_hw0_icregs->icpolr[int_reg_indx] &=
+                        ~(cpu_to_be32((1 << irq_bit)));
+    }
+    return(0);
+}
+
+/* low level INTC pol get */
+int avalanche_intc_get_interrupt_polarity ( unsigned int irq )
+{
+    unsigned int int_reg_indx = get_reg_index( irq );
+    unsigned int irq_bit = get_bit_position( irq );
+
+    return(unsigned char)((be32_to_cpu(avalanche_hw0_icregs->icpolr[int_reg_indx]) >>
+                            irq_bit)&0x1);
+}
+
+EXPORT_SYMBOL(avalanche_intc_set_interrupt_type);
+EXPORT_SYMBOL(avalanche_intc_get_interrupt_type);
+EXPORT_SYMBOL(avalanche_intc_set_interrupt_polarity);
+EXPORT_SYMBOL(avalanche_intc_get_interrupt_polarity);
+
 
 /********************************/
 /**  functions Implementation  **/
--- a/arch/x86/NetIP_SubSystem/netip_mem_util.c
+++ b/arch/x86/NetIP_SubSystem/netip_mem_util.c
@@ -98,6 +98,14 @@ static struct netip_mem_rgion_device mem
     {NETSS_DEV_GBE1, NULL, false, 0xF0304000, NULL, "NETSS_DEV_GBE1"},
     {NETSS_DEV_GBE0, NULL, false, 0xF0300000, NULL, "NETSS_DEV_GBE0"},
     {NETSS_DEV_CLK, NULL, false, 0xF00D0000, NULL, "NETSS_DEV_CLK"},
+    {NETSS_DEV_BOOTCFG, NULL, false, 0xF00C0000, NULL, "NETSS_DEV_BOOTCFG"},
+    {NETSS_DEV_TDM, NULL, false, 0xF0100000, NULL, "NETSS_DEV_TDM"},
+    {NETSS_DEV_TIMER0, NULL, false, 0xF0030000, NULL, "NETSS_DEV_TIMER0"},
+    {NETSS_DEV_TIMER1, NULL, false, 0xF0110000, NULL, "NETSS_DEV_TIMER1"},
+    {NETSS_DEV_TDM1, NULL, false, 0xF0120000, NULL, "NETSS_DEV_TDM1"},
+    {NETSS_DEV_TIMER2, NULL, false, 0xF0130000, NULL, "NETSS_DEV_TIMER2"},
+    {NETSS_DEV_TDM2, NULL, false, 0xF0180000, NULL, "NETSS_DEV_TDM2"},
+    {NETSS_DEV_VCODEC, NULL, false, 0xF00F6000, NULL, "NETSS_DEV_VCODEC"},    
 };
 
 
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -278,6 +278,46 @@ int netss_device_get_info(netss_dev_t su
          mmio->size = NETSS_DEV_PERIPHERAL_SRAM_MMIO_SIZE;
          ret = 0;
       break;
+      case NETSS_DEV_BOOTCFG:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_BOOTCFG_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_BOOTCFG_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TDM:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TDM_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TDM_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TIMER0:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TIMER0_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TIMER0_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TIMER1:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TIMER1_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TIMER1_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TDM1:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TDM1_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TDM1_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TIMER2:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TIMER2_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TIMER2_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_TDM2:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_TDM2_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_TDM2_MMIO_SIZE;
+         ret = 0;
+      break;
+      case NETSS_DEV_VCODEC:
+         mmio->base = net_ip_mmios.region1_base + NETSS_DEV_VCODEC_MMIO_OFFSET;
+         mmio->size = NETSS_DEV_VCODEC_MMIO_SIZE;
+         ret = 0;
+      break;      
       default:
          ret = -1;
    }
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -71,6 +71,32 @@
 #define NETSS_DEV_GBE0_MMIO_SIZE (0x4000)
 #define NETSS_DEV_CLK_MMIO_OFFSET (0xD0000)
 #define NETSS_DEV_CLK_MMIO_SIZE (0x10000)
+
+#define NETSS_DEV_BOOTCFG_MMIO_OFFSET (0xC0000)
+#define NETSS_DEV_BOOTCFG_MMIO_SIZE   (0x100)
+
+#define NETSS_DEV_TDM_MMIO_OFFSET     (0x100000)
+#define NETSS_DEV_TDM_MMIO_SIZE       (0x100)
+
+#define NETSS_DEV_TIMER0_MMIO_OFFSET  (0x30000)
+#define NETSS_DEV_TIMER0_MMIO_SIZE    (0x100)
+
+#define NETSS_DEV_TIMER1_MMIO_OFFSET  (0x110000)
+#define NETSS_DEV_TIMER1_MMIO_SIZE    (0x100)
+
+#define NETSS_DEV_TDM1_MMIO_OFFSET    (0x120000)
+#define NETSS_DEV_TDM1_MMIO_SIZE      (0x100)
+
+#define NETSS_DEV_TIMER2_MMIO_OFFSET  (0x130000)
+#define NETSS_DEV_TIMER2_MMIO_SIZE    (0x100)
+
+#define NETSS_DEV_TDM2_MMIO_OFFSET    (0x180000)
+#define NETSS_DEV_TDM2_MMIO_SIZE      (0x100)
+
+#define NETSS_DEV_VCODEC_MMIO_OFFSET  (0xF6000)
+#define NETSS_DEV_VCODEC_MMIO_SIZE    (0x150)
+
+
 #define NETSS_DEV_CLK_CTRL_MMIO_OFFSET (0xD0000)
 #define NETSS_DEV_CLK_CTRL_MMIO_SIZE (0x10000)
 #define NETSS_DEV_BBU_CTRLR_MMIO_OFFSET (0x160000)
@@ -100,6 +126,14 @@ typedef enum {
    NETSS_DEV_CLK_CTRL,
    NETSS_DEV_BBU_CTRLR,
    NETSS_DEV_PERIPHERAL_SRAM,
+   NETSS_DEV_BOOTCFG,
+   NETSS_DEV_TDM,
+   NETSS_DEV_TIMER0,
+   NETSS_DEV_TIMER1,
+   NETSS_DEV_TDM1,
+   NETSS_DEV_TIMER2,
+   NETSS_DEV_TDM2,
+   NETSS_DEV_VCODEC,
    NETSS_DEV_MAX
 }netss_dev_t;
 
