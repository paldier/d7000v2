From 9e1297e479780f98d79e9467fb9c74a9e7629657 Mon Sep 17 00:00:00 2001
From: "Wu, Hao" <hao.wu@intel.com>
Date: Mon, 4 Aug 2014 13:43:36 +0800
Subject: [PATCH] xhci: add phy mux switch support per Intel vendor defined
 extended capability

In Intel cherrytrail platform, usb phy is shared by xhci controller and another
dwc3 device mode controller, and it can be controllered by register defined in
Intel vendor defined extended capability for XHCI, to connect either xhci or
device controller. This patch adds support for this function and exports one
interface to transceiver driver who needs to control the OTG role switching
per otg events.

Change-Id: If4ae8bc094a7443dd664506cf1918cdebcf94d7f
Signed-off-by: Wu, Hao <hao.wu@intel.com>
(cherry picked from commit 1a8c2ab6b0fb4e3319c5f460d34ba9f7ee32dcd8)
Signed-off-by: Maladau Mou <maladau.mou@intel.com>
---
 drivers/usb/host/Makefile         |    1 +
 drivers/usb/host/xhci-intel-cap.c |  107 +++++++++++++++++++++++++++++++++++++
 drivers/usb/host/xhci-intel-cap.h |   32 +++++++++++
 drivers/usb/host/xhci-pci.c       |    7 +++
 drivers/usb/host/xhci.h           |    2 +
 5 files changed, 149 insertions(+)
 create mode 100644 drivers/usb/host/xhci-intel-cap.c
 create mode 100644 drivers/usb/host/xhci-intel-cap.h

diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index 50b0041..83ea852 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -18,6 +18,7 @@ xhci-hcd-y := xhci.o xhci-mem.o
 xhci-hcd-y += xhci-ring.o xhci-hub.o xhci-dbg.o
 xhci-hcd-y += xhci-trace.o
 xhci-hcd-$(CONFIG_PCI)	+= xhci-pci.o
+xhci-hcd-y += xhci-intel-cap.o
 
 ifneq ($(CONFIG_USB_XHCI_PLATFORM), )
 	xhci-hcd-y		+= xhci-plat.o
diff --git a/drivers/usb/host/xhci-intel-cap.c b/drivers/usb/host/xhci-intel-cap.c
new file mode 100644
index 0000000..dcde084
--- /dev/null
+++ b/drivers/usb/host/xhci-intel-cap.c
@@ -0,0 +1,107 @@
+/*
+ * Intel Vendor Defined XHCI extended capability
+ *
+ * Copyright (C) 2014 Intel Corp.
+ *
+ * Author: Wu, Hao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program;
+ */
+
+#include <linux/usb/phy.h>
+#include <linux/usb/otg.h>
+
+#include "xhci.h"
+#include "xhci-intel-cap.h"
+
+int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci)
+{
+	struct usb_hcd *hcd;
+	int ext_offset, retval;
+
+	ext_offset = XHCI_HCC_EXT_CAPS(readl(&xhci->cap_regs->hcc_params));
+	ext_offset = xhci_find_ext_cap_by_id(&xhci->cap_regs->hc_capbase,
+			ext_offset << 2, XHCI_EXT_CAPS_INTEL_HOST_CAP);
+	if (!ext_offset)
+		return -ENODEV;
+
+	xhci->phy_mux_regs = &xhci->cap_regs->hc_capbase + (ext_offset >> 2);
+
+	xhci_dbg(xhci, "Intel Vendor Defined Cap %d initialization\n",
+					XHCI_EXT_CAPS_INTEL_HOST_CAP);
+	xhci_dbg(xhci, "regs offset = 0x%x, phy_mux_regs = 0x%p\n",
+					ext_offset, xhci->phy_mux_regs);
+
+	/* If This capbility is found, register host on PHY for OTG purpose */
+	hcd = xhci_to_hcd(xhci);
+	hcd->phy = usb_get_phy(USB_PHY_TYPE_USB2);
+
+	if (!IS_ERR_OR_NULL(hcd->phy)) {
+		retval = otg_set_host(hcd->phy->otg, &hcd->self);
+		if (retval)
+			usb_put_phy(hcd->phy);
+	}
+
+	xhci_dbg(xhci, "capability init done\n");
+
+	return 0;
+}
+
+int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on)
+{
+	unsigned long	timeout;
+	u32		data;
+
+	if (!xhci || !xhci->phy_mux_regs)
+		pr_err("No XHCI or Not support phy mux capability\n");
+
+	xhci_dbg(xhci, "XHCI phy mux switch to %s path\n",
+				is_device_on ? "dev" : "Host");
+
+	/* Check and set mux to SW controlled mode */
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	if (!(data & SW_IDPIN_EN)) {
+		data |= SW_IDPIN_EN;
+		writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	}
+
+	/* Configure CFG0 to switch the mux and VBUS_VALID bit is required
+	 * for device mode */
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	if (is_device_on)
+		data |= (SW_IDPIN | SW_VBUS_VALID);
+	else
+		data &= ~(SW_IDPIN | SW_VBUS_VALID);
+	writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	/* Polling CFG1 for safety, most case it takes about 600ms to finish
+	 * mode switching, set TIMEOUT long enough */
+	timeout = jiffies + msecs_to_jiffies(DUAL_ROLE_CFG1_POLL_TIMEOUT);
+
+	/* Polling on CFG1 register to confirm mode switch.*/
+	while (!time_after(jiffies, timeout)) {
+		data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG1);
+		if (is_device_on) {
+			if (!(data & SW_MODE))
+				break;
+		} else {
+			if (data & SW_MODE)
+				break;
+		}
+		/* interval for polling is set to about 5ms */
+		usleep_range(5000, 5100);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(xhci_intel_phy_mux_switch);
diff --git a/drivers/usb/host/xhci-intel-cap.h b/drivers/usb/host/xhci-intel-cap.h
new file mode 100644
index 0000000..4a9dbf2
--- /dev/null
+++ b/drivers/usb/host/xhci-intel-cap.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2014 Intel Corp.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program;
+ */
+
+/* Extended capability IDs for Intel Vendor Defined */
+#define XHCI_EXT_CAPS_INTEL_HOST_CAP	192
+
+/* register definition */
+#define DUAL_ROLE_CFG0		0x68
+#define SW_VBUS_VALID		(1 << 24)
+#define SW_IDPIN_EN		(1 << 21)
+#define SW_IDPIN		(1 << 20)
+
+#define DUAL_ROLE_CFG1		0x6c
+#define SW_MODE			(1 << 29)
+
+#define DUAL_ROLE_CFG1_POLL_TIMEOUT	1000
+
+extern int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci);
+extern int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on);
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index 1af67a2..3d3dfcb 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -26,6 +26,7 @@
 
 #include "xhci.h"
 #include "xhci-trace.h"
+#include "xhci-intel-cap.h"
 
 /* Device for a quirk */
 #define PCI_VENDOR_ID_FRESCO_LOGIC	0x1b73
@@ -49,6 +50,12 @@ static int xhci_pci_reinit(struct xhci_hcd *xhci, struct pci_dev *pdev)
 	 * new extended capabilities.
 	 */
 
+	/* Init Intel vendor defined extended capability */
+	if (pdev->vendor == PCI_VENDOR_ID_INTEL) {
+		if (!xhci_intel_vendor_cap_init(xhci))
+			xhci_dbg(xhci, "Intel Vendor Capability init done\n");
+	}
+
 	/* PCI Memory-Write-Invalidate cycle support is optional (uncommon) */
 	if (!pci_set_mwi(pdev))
 		xhci_dbg(xhci, "MWI active\n");
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index ed3a425..365fa97 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1570,6 +1570,8 @@ struct xhci_hcd {
 	/* cached usb2 extened protocol capabilites */
 	u32                     *ext_caps;
 	unsigned int            num_ext_caps;
+	/* support dual role switch per vendor extended capability */
+	void __iomem		*phy_mux_regs;
 	/* Compliance Mode Recovery Data */
 	struct timer_list	comp_mode_recovery_timer;
 	u32			port_status_u0;
-- 
1.7.9.5

