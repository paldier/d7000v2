diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/include/net/cfg80211.h b/include/net/cfg80211.h
--- a/include/net/cfg80211.h	2015-11-11 15:46:04.117519500 +0000
+++ b/include/net/cfg80211.h	2015-11-11 15:50:05.905695900 +0000
@@ -2412,6 +2412,8 @@ struct cfg80211_ops {
 	int	(*channel_switch)(struct wiphy *wiphy,
 				  struct net_device *dev,
 				  struct cfg80211_csa_settings *params);
+	int	(*set_ap_chanwidth)(struct wiphy *wiphy, struct net_device *dev,
+					struct cfg80211_chan_def *chandef);
 };
 
 /*
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
--- a/include/uapi/linux/nl80211.h	2015-11-11 15:46:04.136521400 +0000
+++ b/include/uapi/linux/nl80211.h	2015-11-11 15:50:05.926698000 +0000
@@ -3841,6 +3841,9 @@ enum nl80211_ap_sme_features {
  *	interface. An active monitor interface behaves like a normal monitor
  *	interface, but gets added to the driver. It ensures that incoming
  *	unicast packets directed at the configured interface address get ACKed.
+ * @NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE: This driver supports dynamic
+ *	channel bandwidth change (e.g., HT 20 <-> 40 MHz channel) during the
+ *	lifetime of a BSS.
  */
 enum nl80211_feature_flags {
 	NL80211_FEATURE_SK_TX_STATUS			= 1 << 0,
@@ -3861,6 +3864,7 @@ enum nl80211_feature_flags {
 	NL80211_FEATURE_FULL_AP_CLIENT_STATE		= 1 << 15,
 	NL80211_FEATURE_USERSPACE_MPM			= 1 << 16,
 	NL80211_FEATURE_ACTIVE_MONITOR			= 1 << 17,
+	NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE	= 1 << 18,
 };
 
 /**
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/nl80211.c b/net/wireless/nl80211.c
--- a/net/wireless/nl80211.c	2015-11-11 15:46:29.815089000 +0000
+++ b/net/wireless/nl80211.c	2015-11-11 15:50:05.948700200 +0000
@@ -1876,12 +1876,26 @@ static int __nl80211_set_channel(struct
 	switch (iftype) {
 	case NL80211_IFTYPE_AP:
 	case NL80211_IFTYPE_P2P_GO:
+		if (!cfg80211_reg_can_beacon(&rdev->wiphy, &chandef)) {
+			result = -EINVAL;
+			break;
+		}
 		if (wdev->beacon_interval) {
+			/* This functionality is backported from Linux 3.18 -- DI */
+			if (!wdev->netdev || !rdev->ops->set_ap_chanwidth ||
+			    !(rdev->wiphy.features &
+			      NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE)) {
 			result = -EBUSY;
 			break;
 		}
-		if (!cfg80211_reg_can_beacon(&rdev->wiphy, &chandef)) {
-			result = -EINVAL;
+
+			/* Only allow dynamic channel width changes */
+			if (chandef.chan != wdev->preset_chandef.chan) {
+				result = -EBUSY;
+				break;
+			}
+			result = rdev_set_ap_chanwidth(rdev, wdev->netdev, &chandef);
+			if (result)
 			break;
 		}
 		wdev->preset_chandef = chandef;
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
--- a/net/wireless/rdev-ops.h	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/rdev-ops.h	2015-11-11 15:50:05.969702300 +0000
@@ -936,4 +936,17 @@ static inline int rdev_channel_switch(st
 	return ret;
 }
 
+static inline int
+rdev_set_ap_chanwidth(struct cfg80211_registered_device *rdev,
+		      struct net_device *dev, struct cfg80211_chan_def *chandef)
+{
+	int ret;
+
+	trace_rdev_set_ap_chanwidth(&rdev->wiphy, dev, chandef);
+	ret = rdev->ops->set_ap_chanwidth(&rdev->wiphy, dev, chandef);
+	trace_rdev_return_int(&rdev->wiphy, ret);
+
+	return ret;
+}
+
 #endif /* __CFG80211_RDEV_OPS */
diff -Npur '-x*.*.rej' '-x*.*.orig' '-x*.patch' a/net/wireless/trace.h b/net/wireless/trace.h
--- a/net/wireless/trace.h	2014-04-03 08:32:32.000000000 +0000
+++ b/net/wireless/trace.h	2015-11-11 15:50:05.983703700 +0000
@@ -1876,6 +1876,23 @@ TRACE_EVENT(rdev_channel_switch,
 		  __entry->counter_offset_presp)
 );
 
+TRACE_EVENT(rdev_set_ap_chanwidth,
+	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		 struct cfg80211_chan_def *chandef),
+	TP_ARGS(wiphy, netdev, chandef),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		NETDEV_ENTRY
+		CHAN_DEF_ENTRY
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		NETDEV_ASSIGN;
+		CHAN_DEF_ASSIGN(chandef);
+	),
+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", " CHAN_DEF_PR_FMT,
+		  WIPHY_PR_ARG, NETDEV_PR_ARG, CHAN_DEF_PR_ARG)
+);
 /*************************************************************
  *	     cfg80211 exported functions traces		     *
  *************************************************************/
