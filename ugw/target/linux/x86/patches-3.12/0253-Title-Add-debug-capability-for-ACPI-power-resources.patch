From 2e04ab59b7c753a4b2ac906c8f156f4da216909d Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Wed, 2 Dec 2015 13:10:07 -0700
Subject: [PATCH] Title: Add debug capability for ACPI power resources        
 Issue: <JIRA:CPM-69>         IssueType: <Feature>        
 Description: <Add the detailed ACPI power resource vector  
                    to the sysfs attribute for
 platform_resource>         Reviewers: <ejillela>

---
 drivers/platform/x86/puma_acpi.c |  108 +++++++++++++++++++++++++++++---------
 1 file changed, 84 insertions(+), 24 deletions(-)

diff --git a/drivers/platform/x86/puma_acpi.c b/drivers/platform/x86/puma_acpi.c
index 3511465..d4ca271 100644
--- a/drivers/platform/x86/puma_acpi.c
+++ b/drivers/platform/x86/puma_acpi.c
@@ -80,6 +80,12 @@
 #define PUMA_PMC2ATOM_CSR     0x8150
 #define PUMA_PMC2ATOM_DB      0x8154
 #define PUMA_PMC2ATOM_DBM     0x814C
+#define PUMA_PMC_D3_STS_0     0x0A0
+#define PUMA_PMC_D3_STS_1     0x0A4
+#define PUMA_PMC_FUNC_DIS_0   0x34
+#define PUMA_PMC_FUNC_DIS_1   0x38
+#define PUMA_PMC_MEM_READ_OPCODE  0x00
+
 
 #define PUMA_ATOM2PMC_DB_VALUE(busy,ipc_transaction_type,format,ipc_cmd_type,ipc_ext_payload,ipc_cmd,ipc_payload) \
    ((busy << 31) | (ipc_transaction_type << 29) | (format << 28) | (ipc_cmd_type << 24) | (ipc_ext_payload << 23) | \
@@ -173,6 +179,7 @@ struct puma_acpi_data {
    int led_state;
    int led_blink_count;
    int acpi_resource_indication;
+   unsigned int acpi_resource_state_vector;
    bool deepstandby2active;
    bool deepstandby2bbu;
    bool on_bat_during_standby;
@@ -191,6 +198,28 @@ static unsigned long puma_events;
 static wait_queue_head_t puma_wait;
 static atomic_t puma_netip_state = ATOMIC_INIT(0);
 
+/* invoke the ACPI control method specified by the pathname */
+static int puma_acpi_get_data(struct puma_acpi_data *data, acpi_string pathname, unsigned int *out_data)
+{
+   int ret = 0;
+   struct acpi_buffer buf;
+   union acpi_object out_obj;
+   acpi_status status;
+   
+   buf.pointer = &out_obj;
+   buf.length = sizeof(out_obj);
+
+   status = acpi_evaluate_object(data->acpi_dev->handle, pathname, NULL, &buf);
+   if (ACPI_FAILURE(status) || out_obj.type != ACPI_TYPE_INTEGER) {
+      pr_err("PUMA ACPI %s method execution failed\n", pathname);
+      ret = -EIO;
+   } else {
+      *out_data = out_obj.integer.value;
+   }
+
+   return ret;
+}
+
 /* Read operation for the sysfs attributes - system_state, netip_state, pmc_state and platform_resource */
 
 static ssize_t show_system_state(struct device *dev, struct device_attribute *attr, char *buf)
@@ -222,19 +251,63 @@ static ssize_t show_platform_resource(struct device *dev, struct device_attribut
    struct acpi_device *acpi = to_acpi_device(dev);
    struct puma_acpi_data *data = acpi_driver_data(acpi);
 
-   return snprintf(buf, PAGE_SIZE, "%d\n", data->acpi_resource_indication);
+   if(puma_acpi_get_data(data, "PPRS", &data->acpi_resource_state_vector)) {
+      pr_err("puma_acpi_get_data PPRS failed!\n");
+   } 
+
+   return snprintf(buf, PAGE_SIZE, "%d :: 0x%x\n", ((data->acpi_resource_indication) ? 0:1), data->acpi_resource_state_vector);
+}
+
+static ssize_t show_device_power_state(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   unsigned int reg_value0, reg_value1;
+   int ret_value;
+   
+   if((ret_value = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_D3_STS_0, &reg_value0)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   } else if((ret_value = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_D3_STS_1, &reg_value1)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   }
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return snprintf(buf, PAGE_SIZE, "D3_STS_0 0x%x D3_STS_1 0x%x\n", reg_value0, reg_value1);
+   }
+}
+
+static ssize_t show_function_disable_state(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   unsigned int reg_value0, reg_value1;
+   int ret_value;
+   
+   if((ret_value = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_FUNC_DIS_0, &reg_value0)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   } else if((ret_value = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_FUNC_DIS_1, &reg_value1)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   }
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return snprintf(buf, PAGE_SIZE, "FUNC_DIS_0 0x%x FUNC_DIS_1 0x%x\n", reg_value0, reg_value1);
+   }
 }
 
 static DEVICE_ATTR(system_state, S_IRUGO, show_system_state, NULL);
 static DEVICE_ATTR(netip_state, S_IRUGO, show_netip_state, NULL);
 static DEVICE_ATTR(pmc_state, S_IRUGO, show_pmc_state, NULL);
 static DEVICE_ATTR(platform_resource, S_IRUGO, show_platform_resource, NULL);
+static DEVICE_ATTR(device_power_state, S_IRUGO, show_device_power_state, NULL);
+static DEVICE_ATTR(function_disable_state, S_IRUGO, show_function_disable_state, NULL);
 
 static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_system_state.attr,
    &dev_attr_netip_state.attr,
    &dev_attr_pmc_state.attr,
    &dev_attr_platform_resource.attr,
+   &dev_attr_device_power_state.attr,
+   &dev_attr_function_disable_state.attr,
    NULL,
 };
 
@@ -304,27 +377,6 @@ void puma_acpi_free_resources(struct puma_acpi_data *data, int resource_index)
    }
 }
 
-static int puma_acpi_get_data(struct puma_acpi_data *data, acpi_string pathname, unsigned int *out_data)
-{
-   int ret = 0;
-   struct acpi_buffer buf;
-   union acpi_object out_obj;
-   acpi_status status;
-   
-   buf.pointer = &out_obj;
-   buf.length = sizeof(out_obj);
-
-   status = acpi_evaluate_object(data->acpi_dev->handle, pathname, NULL, &buf);
-   if (ACPI_FAILURE(status) || out_obj.type != ACPI_TYPE_INTEGER) {
-      pr_err("PUMA ACPI %s method execution failed\n", pathname);
-      ret = -EIO;
-   } else {
-      *out_data = out_obj.integer.value;
-   }
-
-   return ret;
-}
-
 static int puma_acpi_power_led(struct puma_acpi_data *data)
 {
    int ret = 0;
@@ -718,7 +770,6 @@ void puma_acpi_update_system(struct puma_acpi_data *data)
                   ret = puma_acpi_pmc_ipc(PUMA_WRITE_PMC_IPC, PUMA_SETPS_ACTIVE, &ipc_data); 
                }
                if(ret == 0) {
-                  data->acpi_resource_indication = PUMA_ACPI_RESOURCE_ON;
                   data->deepstandby2active = false;
                   acpi_bus_generate_netlink_event(data->acpi_dev->pnp.device_class, dev_name(&data->acpi_dev->dev), data->notify_state_type, 0);
                   data->notify_state_type = 0;
@@ -795,6 +846,8 @@ static int puma_acpi_task(void *data)
    // update the current state 
    if(acpi_data->current_state == PUMA_ACPI_STATE_BBU) {
       acpi_bus_generate_netlink_event(acpi_data->acpi_dev->pnp.device_class, dev_name(&acpi_data->acpi_dev->dev), PUMA_ACPI_NOTIFY_ACTIVE_ON_BATTERY, 0);
+   } else {
+      acpi_bus_generate_netlink_event(acpi_data->acpi_dev->pnp.device_class, dev_name(&acpi_data->acpi_dev->dev), PUMA_ACPI_NOTIFY_ACTIVE_ON_AC, 0);
    }
    
 
@@ -863,6 +916,14 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
       data->netip_state = PUMA_ACPI_STATE_ACTIVE;
    }
 
+   if(puma_acpi_get_data(data, "PPRS", &data->acpi_resource_state_vector)) {
+      pr_err("puma_acpi_get_data PPRS failed!\n"); 
+   } else if(data->acpi_resource_state_vector != 0) {
+      data->acpi_resource_indication = PUMA_ACPI_RESOURCE_ON;
+   } else if(data->acpi_resource_state_vector == 0) {
+      data->acpi_resource_indication = PUMA_ACPI_RESOURCE_OFF;
+   }
+   
    /* create debug attributes */
    if(ret = sysfs_create_group(&acpi_dev->dev.kobj, &puma_acpi_attr_group)) {
       pr_err("puma sysfs_create_group failed!\n");
@@ -885,7 +946,6 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
       data->pmic_supported = 1;
       data->pmic_type = PUMA7_ACPI_PMIC_ROHM;
    }
-   data->acpi_resource_indication = PUMA_ACPI_RESOURCE_ON;
    data->notify_state_type = 0;
    data->deepstandby2active = false;
    data->deepstandby2bbu = false;
-- 
1.7.9.5

