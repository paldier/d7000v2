# HG changeset patch
# Parent 7d082e384760eb5fd40a130fdd8ddbe2ee8514de

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
@@ -44,12 +44,13 @@
 #endif
 
 #define NETSS_MAX_ARM11_INTR 96
+#define NUM_ARM11_INTR_PER_REG 32
 
 
 struct net_subsystem_drv_data {
    uint32_t irq_num;          /* The irq number used for Net SubSystem driver */
    uint32_t pending_interrupts;
-   uint32_t pending_arm11_interrupts;
+   uint32_t pending_arm11_interrupts[3]; /* For NETSS_INTERUPT_ARM11_MAX (96) Bundle Interrupts */
    bool netss_driver_initialized;
    void __iomem *bridge_reg_base; /* Mapped io bridge register base address mmio region2 of Net-IP  */
    netss_dev_info_t subdev_mmios[NETSS_DEV_MAX];
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -79,8 +79,21 @@ void netss_stop_handshake_thread(void);
 
 struct net_subsystem_drv_data *pnetss_drv_data;
 
+inline unsigned char  netss_get_bit_position ( unsigned int irq )
+{
+    return((unsigned char)( irq % NUM_ARM11_INTR_PER_REG ));
+}
+
+inline unsigned char  netss_get_reg_index( unsigned int irq )
+{
+    return((unsigned char )( irq / NUM_ARM11_INTR_PER_REG ));
+}
+
 void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_interrupt_info_t *irq_info)
 {
+   unsigned int reg_indx = 0;
+   unsigned int irq_bit  = 0;
+    
    spin_lock(&pnetss_drv_data->irq_lock);
    if(intrpt > NETSS_INTERUPT_MAX)
    {
@@ -114,7 +127,10 @@ void netss_interrupt_register(netss_inte
         }
         else
         {
-            if(pnetss_drv_data->pending_arm11_interrupts & (1<<arm11_int_id))
+            reg_indx = netss_get_reg_index(arm11_int_id);
+            irq_bit  = netss_get_bit_position(arm11_int_id);
+            
+            if(pnetss_drv_data->pending_arm11_interrupts[reg_indx] & (1 << irq_bit))
             {
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
                 /*Clear interrupt in bridge only if it is present 
@@ -123,11 +139,10 @@ void netss_interrupt_register(netss_inte
                 {
                     netss_interrupt_ack(intrpt);   
                 }
-
-                pnetss_drv_data->pending_arm11_interrupts &= ~(1<<arm11_int_id);
+                pnetss_drv_data->pending_arm11_interrupts[reg_indx] &= ~(1 << irq_bit);
                 NETSS_DBG_PRINT("Cleared pending interrupt for armm11 %d IIR %08x pending %08x\n", arm11_int_id, 
                                         __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET), 
-                                                                     pnetss_drv_data->pending_arm11_interrupts);
+                                                                     pnetss_drv_data->pending_arm11_interrupts[reg_indx]);
             }
         }
         netss_interrupt_enable(intrpt);
@@ -382,7 +397,9 @@ static irqreturn_t net_subsystem_isr(int
     unsigned long flags;
     uint32_t volatile reg_val = 0;
     uint32_t ack_intr = 0;
-
+    unsigned int reg_indx = 0;
+    unsigned int irq_bit  = 0;
+   
     spin_lock_irqsave(&pnet_ss->irq_lock, flags);
     reg_val = __raw_readl(pnet_ss->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
 
@@ -417,7 +434,10 @@ static irqreturn_t net_subsystem_isr(int
                         }
                         else
                         {
-                            pnet_ss->pending_arm11_interrupts |=  (1 << j);
+                            reg_indx = netss_get_reg_index(j);
+                            irq_bit  = netss_get_bit_position(j);
+                            
+                            pnet_ss->pending_arm11_interrupts[reg_indx] |=  (1 << irq_bit);
                             avalanche_intc_disable_irq(j);
                             ack_intr |= (1 << i);
                             NETSS_DBG_PRINT("No irq registered for ARM11 interrupt %d, Marking it pending\n", j) ;
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -104,7 +104,7 @@
 #define NETSS_DEV_PERIPHERAL_SRAM_MMIO_OFFSET (0xFFF0000)
 #define NETSS_DEV_PERIPHERAL_SRAM_MMIO_SIZE   (0x4000)
 
-#define NETSS_INTERUPT_ARM11_MAX (64)  /*ARM11 is a bundle of 64 interrupts */
+#define NETSS_INTERUPT_ARM11_MAX (96)  /*ARM11 is a bundle of 96 interrupts */
 
 typedef enum {
    NETSS_DEV_HW_MAILBOX = 0,
