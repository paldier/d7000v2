diff --git a/drivers/net/usb/usbnet.c b/drivers/net/usb/usbnet.c
index a91fa49..9a13ebd 100644
--- a/drivers/net/usb/usbnet.c
+++ b/drivers/net/usb/usbnet.c
@@ -32,6 +32,11 @@
 
 // #define	DEBUG			// error path messages, extra info
 // #define	VERBOSE			// more; success messages
+#ifdef CONFIG_LTQ_PPA
+#define USBNET_PPA_DP
+#endif
+#define USBNET_NOOFFSET
+#define USBNET_EXTRAOFFSET 32
 
 #include <linux/module.h>
 #include <linux/init.h>
@@ -46,6 +51,11 @@
 #include <linux/slab.h>
 #include <linux/kernel.h>
 #include <linux/pm_runtime.h>
+#ifdef USBNET_PPA_DP
+#include <net/ppa_api.h>
+#include <net/ppa_hook.h>
+#include <net/ppa_api_directpath.h>
+#endif
 
 #define DRIVER_VERSION		"22-Aug-2005"
 
@@ -89,6 +99,148 @@ static int msg_level = -1;
 module_param (msg_level, int, 0);
 MODULE_PARM_DESC (msg_level, "Override default message level");
 
+#ifdef USBNET_PPA_DP
+#define IS_SET_PPADP_IFID(__d) ((__d)->subif.port_id >= 0 || (__d)->subif.subif >= 0)
+#define SET_PPADP_IFID(__d, __p, __s) do { (__d)->subif.port_id = (__p); (__d)->subif.subif = (__s); } while (0)
+int	usbnet_addr_monitor=0;
+static int ppa_startup_hook = 1;
+module_param (ppa_startup_hook, int, 0);
+MODULE_PARM_DESC (ppa_startup_hook, "0: don't hook ppa at startup, other: do hook");
+
+static int bridge_mode = 0;
+static int bridge_mode_running = 0;
+module_param (bridge_mode, int, 0);
+MODULE_PARM_DESC (bridge_mode, "0: full NAT mode other: single NAT mode");
+
+static char *bridge_mode_mac_addr;
+module_param(bridge_mode_mac_addr, charp, S_IRUGO);
+MODULE_PARM_DESC(bridge_mode_mac_addr, "MAC addr for single NAT mode");
+
+unsigned char snat_mac[6]={0,0,0,0,0,0},snat_mac_good=0;
+
+static u8 nibble(unsigned char c)
+{
+	if (likely(isdigit(c)))
+		return c - '0';
+	c = toupper(c);
+	if (likely(isxdigit(c)))
+		return 10 + c - 'A';
+	return 0;
+}
+
+
+void check_snat_mac(const char *str)
+{
+	if (str) {
+		unsigned	i;
+
+		for (i = 0; i < 6; i++) {
+			unsigned char num;
+
+			if ((*str == '.') || (*str == ':'))
+				str++;
+			num = nibble(*str++) << 4;
+			num |= (nibble(*str++));
+			snat_mac [i] = num;
+		}
+		if (is_valid_ether_addr(snat_mac))
+		{
+			snat_mac_good=1;
+			return ;
+		}
+	}
+	snat_mac_good=0;
+	snat_mac[0]=
+	snat_mac[1]=
+	snat_mac[2]=
+	snat_mac[3]=
+	snat_mac[4]=
+	snat_mac[5]=0;
+	return ;
+}
+
+PPA_DIRECTPATH_CB usbnet_ppafp_cb;
+int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev);
+int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev);
+int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len);
+
+int 		usbnet_ppadp_occupied=-1;
+
+static int  ppafp_enable=-1;
+module_param (ppafp_enable, int, 1);
+MODULE_PARM_DESC (ppafp_enable, "Override default ppafp_enable");
+
+static void register_ppadp_sub(struct net_device *net)
+{
+	uint32_t status;
+	struct usbnet		*dev = netdev_priv(net);
+
+#ifdef USBNET_PPA_DP
+	PPA_SUBIF if_id;
+	memset(&if_id, 0, sizeof(if_id));
+#endif
+	if(!dev->usbnet_ppadp_on || !ppa_hook_directpath_ex_register_dev_fn )
+	{
+		SET_PPADP_IFID(dev, -1, -1);
+		return;
+	}
+	if(IS_SET_PPADP_IFID(dev))
+		return;
+	usbnet_ppafp_cb.stop_tx_fn=usbnet_ppafp_pause_rx;
+	usbnet_ppafp_cb.start_tx_fn=usbnet_ppafp_resume_rx;
+	usbnet_ppafp_cb.rx_fn=usbnet_ppafp_start_xmit;
+#ifdef PPA_F_DIRECTPATH_WAN
+	bridge_mode_running=0;
+	if(   bridge_mode && snat_mac_good)
+	{
+		status=ppa_hook_directpath_ex_register_dev_fn(
+				&if_id, net,
+				&usbnet_ppafp_cb,
+				PPA_F_DIRECTPATH_REGISTER
+				| PPA_F_DIRECTPATH_ETH_IF
+//					| PPA_F_DIRECTPATH_WAN
+			);
+		if(status==PPA_SUCCESS)
+			bridge_mode_running=1;
+	}
+	else
+	{
+		status=ppa_hook_directpath_ex_register_dev_fn(
+			&if_id,net,
+			&usbnet_ppafp_cb,
+			PPA_F_DIRECTPATH_REGISTER
+			| PPA_F_DIRECTPATH_ETH_IF
+			| PPA_F_DIRECTPATH_WAN
+			);
+	}
+#else
+	status=ppa_hook_directpath_ex_register_dev_fn(
+			&if_id,net,
+			&usbnet_ppafp_cb,
+			PPA_F_DIRECTPATH_REGISTER
+			| PPA_F_DIRECTPATH_ETH_IF
+		);
+#endif
+	if(status==PPA_SUCCESS) {
+		memcpy(&dev->subif, &if_id, sizeof(if_id));
+	} else {
+		SET_PPADP_IFID(dev, -1, -1);
+	}
+}
+
+static void register_ppadp(struct net_device *net)
+{
+	struct usbnet		*dev = netdev_priv(net);
+	if(!dev->usbnet_ppadp_on || IS_SET_PPADP_IFID(dev) || !ppa_hook_directpath_ex_register_dev_fn )
+		return;
+	if(in_interrupt())
+		usbnet_defer_kevent (dev, EVENT_REREG_PPA);
+	else
+		register_ppadp_sub(net);
+}
+
+#endif //USBNET_PPA_DP
+
 /*-------------------------------------------------------------------------*/
 
 /* handles CDC Ethernet and many other network "bulk data" interfaces */
@@ -323,6 +475,56 @@ void usbnet_skb_return (struct usbnet *dev, struct sk_buff *skb)
 		skb_queue_tail(&dev->rxq_pause, skb);
 		return;
 	}
+	#ifdef USBNET_PPA_DP
+		if(usbnet_addr_monitor)
+		{
+			unsigned char *base;
+			base=skb->data;
+			printk(KERN_INFO "usbnet_skb_return() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+					,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+					,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+					,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+					,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+			);
+		}
+		if(bridge_mode && bridge_mode_running)
+		{
+			unsigned char *base;
+			base=skb->data;
+			//Set SrcMAC=UE
+#if 1
+			*(base+6 + 0)=dev->net->dev_addr [0];
+			*(base+6 + 1)=dev->net->dev_addr [1];
+			*(base+6 + 2)=dev->net->dev_addr [2];
+			*(base+6 + 3)=dev->net->dev_addr [3];
+			*(base+6 + 4)=dev->net->dev_addr [4]+1;
+			*(base+6 + 5)=dev->net->dev_addr [5];
+#endif
+			//Set DstMAC=NAT LAN PC
+			if(*(base+0 + 0)!=0xFF)
+			{
+				*(base+0 + 0)=*(snat_mac +0);
+				*(base+0 + 1)=*(snat_mac +1);
+				*(base+0 + 2)=*(snat_mac +2);
+				*(base+0 + 3)=*(snat_mac +3);
+				*(base+0 + 4)=*(snat_mac +4);
+				*(base+0 + 5)=*(snat_mac +5);
+			}
+
+			if(usbnet_addr_monitor)
+				printk(KERN_INFO "     BRGSwap  SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+						,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+						,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+						,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+						,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+				);
+		}
+	#endif
+
+	#if 0
+		if(skb->len==1470 || skb->len==1472)
+			skb_put(skb, 4);
+	#endif
 
 	skb->protocol = eth_type_trans (skb, dev->net);
 	dev->net->stats.rx_packets++;
@@ -335,10 +537,39 @@ void usbnet_skb_return (struct usbnet *dev, struct sk_buff *skb)
 	if (skb_defer_rx_timestamp(skb))
 		return;
 
+	#ifdef USBNET_PPA_DP
+		if( dev->usbnet_ppadp_on)
+		{
+			register_ppadp(dev->net);
+			if( IS_SET_PPADP_IFID(dev) &&
+			    ppa_hook_directpath_ex_send_fn &&
+			    ppa_hook_get_ifid_for_netif_fn)
+			{
+				uint32_t	fpstatus;
+				skb_push(skb,ETH_HLEN);
+				//skb->mac_header = skb->data;
+				skb_reset_mac_header(skb);
+				fpstatus = ppa_hook_directpath_ex_send_fn(&dev->subif, (PPA_BUF *)skb, skb->len, 0);
+				if(!fpstatus)
+				{
+					if(usbnet_addr_monitor) printk(KERN_INFO "     Go PPA OK\n");
+					return;
+				}
+				dev_dbg(&dev->udev->dev, "ppa_hook_directpath_ex_send_fn status %d", fpstatus);
+				// should not touch the unavailable skb anymore since ppa_hook_directpath_ex_send_fn will call netif_rx after failed acceleration
+				//skb_pull(skb,ETH_HLEN);
+				if(usbnet_addr_monitor) printk(KERN_INFO "     Go PPA NOK %d  Try kernel\n",fpstatus);
+				return; //directly return
+			}
+		}
+	#endif
 	status = netif_rx (skb);
 	if (status != NET_RX_SUCCESS)
 		netif_dbg(dev, rx_err, dev->net,
 			  "netif_rx status %d\n", status);
+	#ifdef USBNET_PPA_DP
+	if(usbnet_addr_monitor) printk(KERN_INFO "     Go KERNEL status:%d \n",status);
+	#endif
 }
 EXPORT_SYMBOL_GPL(usbnet_skb_return);
 
@@ -573,7 +804,9 @@ static void rx_complete (struct urb *urb)
 	skb_put (skb, urb->actual_length);
 	state = rx_done;
 	entry->urb = NULL;
-
+#ifdef USBNET_PPA_DP
+	register_ppadp(dev->net);
+#endif	
 	switch (urb_status) {
 	/* success */
 	case 0:
@@ -654,6 +887,41 @@ block:
 }
 
 /*-------------------------------------------------------------------------*/
+
+#ifdef USBNET_PPA_DP
+int32_t usbnet_ppafp_pause_rx(PPA_NETIF *dev)
+{
+	struct usbnet		*net = netdev_priv(dev);
+
+	set_bit(EVENT_RX_PAUSED, &net->flags);
+
+	if (netif_msg_rx_status(net))
+		dev_dbg(&net->udev->dev, "paused rx queue enabled");
+	return PPA_SUCCESS;
+}
+
+int32_t usbnet_ppafp_resume_rx(PPA_NETIF *dev)
+{
+	struct usbnet		*net = netdev_priv(dev);
+	struct sk_buff *skb;
+	int num = 0;
+
+	clear_bit(EVENT_RX_PAUSED, &net->flags);
+
+	while ((skb = skb_dequeue(&net->rxq_pause)) != NULL) {
+		usbnet_skb_return(net, skb);
+		num++;
+	}
+
+	tasklet_schedule(&net->bh);
+
+	if (netif_msg_rx_status(net))
+		dev_dbg(&net->udev->dev, "paused rx queue disabled, %d skbs requeued", num);
+	return PPA_SUCCESS;
+}
+#endif //USBNET_PPA_DP
+
+
 void usbnet_pause_rx(struct usbnet *dev)
 {
 	set_bit(EVENT_RX_PAUSED, &dev->flags);
@@ -750,6 +1018,134 @@ EXPORT_SYMBOL_GPL(usbnet_unlink_rx_urbs);
 
 /*-------------------------------------------------------------------------*/
 
+#ifdef USBNET_PPA_DP
+static ssize_t show_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n",usbnet_addr_monitor);
+}
+
+static ssize_t store_addr_monitor(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+{
+	char *endp;
+	unsigned long target;
+
+	target = simple_strtoul(buf, &endp, 0);
+	if (endp == buf)
+		return -EBADMSG;
+	if     (target==1) usbnet_addr_monitor=1;
+	else usbnet_addr_monitor=0;
+	return len;
+}
+
+extern struct device_attribute dev_attr_addr_monitor;
+DEVICE_ATTR(addr_monitor, S_IRUGO|S_IWUSR, show_addr_monitor, store_addr_monitor);
+
+
+static ssize_t show_ppa_dp(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct net_device *netdev = to_net_dev(dev);
+	struct usbnet     *udev = netdev_priv(netdev);
+
+	return sprintf(buf, "itf_ppadp_on:%d port_id:%d subif:%d ppadp_occupied:%d\n",
+		udev->usbnet_ppadp_on,
+		udev->subif.port_id, udev->subif.subif,
+		usbnet_ppadp_occupied);
+}
+
+static ssize_t store_ppa_dp(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+{
+	struct net_device *netdev = to_net_dev(dev);
+	struct usbnet     *udev = netdev_priv(netdev);
+	char *endp;
+	unsigned long target;
+
+	target = simple_strtoul(buf, &endp, 0);
+	if (endp == buf)
+		return -EBADMSG;
+	if     (target==0)
+	{
+		if(IS_SET_PPADP_IFID(udev))
+		{
+			uint32_t if_id;
+			if( ppa_hook_directpath_ex_rx_stop_fn)
+				ppa_hook_directpath_ex_rx_stop_fn(&udev->subif, 0);
+			if(ppa_hook_directpath_ex_register_dev_fn)
+				ppa_hook_directpath_ex_register_dev_fn(&udev->subif, netdev, &usbnet_ppafp_cb, 0);
+		}
+		udev->subif.port_id   = -1;
+		udev->subif.subif     = -1;
+		usbnet_ppadp_occupied = 0;
+		bridge_mode_running   = 0;
+		return len;
+	}
+	else if(target==1)
+	{
+		if(ppafp_enable &&
+		   usbnet_ppadp_occupied==0 &&
+		   udev->usbnet_ppadp_on==0)
+		{
+			udev->usbnet_ppadp_on=1;
+			usbnet_ppadp_occupied=1;
+			register_ppadp(netdev);
+		}
+		return len;
+	}
+	else
+		return -EBADMSG;
+}
+
+extern struct device_attribute dev_attr_ppa_dp;
+DEVICE_ATTR(ppa_dp, S_IRUGO|S_IWUSR, show_ppa_dp, store_ppa_dp);
+
+
+static ssize_t show_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%02X:%02X:%02X:%02X:%02X:%02X   %s\n"
+			,snat_mac[0],snat_mac[1],snat_mac[2],snat_mac[3],snat_mac[4],snat_mac[5]
+			,snat_mac_good?"Valid":"Invalid" );
+}
+
+static ssize_t store_bridge_mode_mac_addr(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+{
+	check_snat_mac(buf);
+	if(!snat_mac_good) bridge_mode_running = 0;
+	return len;
+}
+
+static ssize_t show_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "bridge_mode:%d running:%d  snat_mac_good:%d\n"
+		,bridge_mode
+		,bridge_mode_running
+		,snat_mac_good);
+}
+
+static ssize_t store_bridge_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t len)
+{
+	char *endp;
+	unsigned long target;
+	target = simple_strtoul(buf, &endp, 0);
+	if (endp == buf)
+		return -EBADMSG;
+	if     (target==0)
+	{
+		// TBD
+		bridge_mode=0;
+		bridge_mode_running=0;
+	}
+	else
+		bridge_mode=1;
+	return len;
+}
+
+extern struct device_attribute dev_attr_bridge_mode_mac_addr;
+DEVICE_ATTR(bridge_mode_mac_addr, S_IRUGO|S_IWUSR, show_bridge_mode_mac_addr, store_bridge_mode_mac_addr);
+extern struct device_attribute dev_attr_bridge_mode;
+DEVICE_ATTR(bridge_mode, S_IRUGO|S_IWUSR, show_bridge_mode, store_bridge_mode);
+#endif // USBNET_PPA_DP
+/*-------------------------------------------------------------------------*/
+
+
 // precondition: never called in_interrupt
 static void usbnet_terminate_urbs(struct usbnet *dev)
 {
@@ -786,6 +1182,21 @@ int usbnet_stop (struct net_device *net)
 
 	clear_bit(EVENT_DEV_OPEN, &dev->flags);
 	netif_stop_queue (net);
+	#ifdef USBNET_PPA_DP
+		if(IS_SET_PPADP_IFID(dev))
+		{
+			PPA_SUBIF if_id;
+			memcpy(&if_id, &dev->subif, sizeof(dev->subif));
+			printk("<%s> Unregister port_id: %d subif: %d\n", __FUNCTION__, if_id.port_id, if_id.subif);
+			if( ppa_hook_directpath_ex_rx_stop_fn)
+				ppa_hook_directpath_ex_rx_stop_fn(&dev->subif, 0);
+			if(ppa_hook_directpath_ex_register_dev_fn)
+				ppa_hook_directpath_ex_register_dev_fn(&if_id, (struct PPA_NETIF *)net, &usbnet_ppafp_cb, 0);
+		}
+		SET_PPADP_IFID(dev, -1, -1);
+//		usbnet_ppadp_occupied=0;
+		bridge_mode_running=0;
+	#endif
 
 	netif_info(dev, ifdown, dev->net,
 		   "stop stats: rx/tx %lu/%lu, errs %lu/%lu\n",
@@ -864,6 +1275,16 @@ int usbnet_open (struct net_device *net)
 	/* hard_mtu or rx_urb_size may change in reset() */
 	usbnet_update_max_qlen(dev);
 
+	#ifdef USBNET_PPA_DP
+		if(ppa_startup_hook && usbnet_ppadp_occupied==-1)
+		{
+			dev->usbnet_ppadp_on =1;
+			usbnet_ppadp_occupied=1;
+		}
+		SET_PPADP_IFID(dev, -1, -1);
+		register_ppadp(net);
+	#endif
+
 	// insist peer be connected
 	if (info->check_connect && (retval = info->check_connect (dev)) < 0) {
 		netif_dbg(dev, ifup, dev->net, "can't open; %d\n", retval);
@@ -882,6 +1303,11 @@ int usbnet_open (struct net_device *net)
 
 	set_bit(EVENT_DEV_OPEN, &dev->flags);
 	netif_start_queue (net);
+	#ifdef USBNET_PPA_DP
+		if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_restart_fn)
+				ppa_hook_directpath_ex_rx_restart_fn(&dev->subif, 0);
+	#endif
+
 	netif_info(dev, ifup, dev->net,
 		   "open: enable queueing (rx %d, tx %d) mtu %d %s framing\n",
 		   (int)RX_QLEN(dev), (int)TX_QLEN(dev),
@@ -1062,6 +1488,12 @@ kevent (struct work_struct *work)
 		container_of(work, struct usbnet, kevent);
 	int			status;
 
+#ifdef USBNET_PPA_DP
+	if (test_bit (EVENT_REREG_PPA, &dev->flags)) {
+		clear_bit (EVENT_REREG_PPA, &dev->flags);
+		register_ppadp_sub(dev->net);
+	}
+#endif
 	/* usb_clear_halt() needs a thread context */
 	if (test_bit (EVENT_TX_HALT, &dev->flags)) {
 		unlink_urbs (dev, &dev->txq);
@@ -1080,7 +1512,13 @@ fail_pipe:
 		} else {
 			clear_bit (EVENT_TX_HALT, &dev->flags);
 			if (status != -ESHUTDOWN)
+			{
+				#ifdef USBNET_PPA_DP
+					if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_restart_fn)
+						ppa_hook_directpath_ex_rx_restart_fn(&dev->subif, 0);
+				#endif
 				netif_wake_queue (dev->net);
+			}
 		}
 	}
 	if (test_bit (EVENT_RX_HALT, &dev->flags)) {
@@ -1196,6 +1634,10 @@ static void tx_complete (struct urb *urb)
 				netif_dbg(dev, link, dev->net,
 					  "tx throttle %d\n", urb->status);
 			}
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_stop_fn)
+					ppa_hook_directpath_ex_rx_stop_fn(&dev->subif, 0);
+			#endif
 			netif_stop_queue (dev->net);
 			break;
 		default:
@@ -1222,7 +1664,60 @@ void usbnet_tx_timeout (struct net_device *net)
 }
 EXPORT_SYMBOL_GPL(usbnet_tx_timeout);
 
+netdev_tx_t _usbnet_start_xmit (struct sk_buff *skb, struct net_device *net);
+
 /*-------------------------------------------------------------------------*/
+#ifdef USBNET_PPA_DP
+int32_t usbnet_ppafp_start_xmit(PPA_NETIF *rxif, PPA_NETIF *txif, PPA_BUF *skb, int32_t len)
+{
+	int pktlen;
+
+	if(usbnet_addr_monitor)
+	{
+		unsigned char *base;
+		base=skb->data;
+		printk(KERN_INFO "usbnet_ppafp_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+				,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+				,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+				,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+				,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+		);
+	}
+
+	if (rxif != NULL && rxif == txif) { /* up stream traffic */
+		if(usbnet_addr_monitor) printk(KERN_INFO "     XMIT Path\n");
+		_usbnet_start_xmit((struct sk_buff *)skb, (struct net_device *)txif);
+		return 0;
+	} else if ( rxif ) {
+		if(usbnet_addr_monitor) printk(KERN_INFO "     Kicked back\n");
+		if ( netif_running(rxif) )
+		{
+			pktlen = skb->len;
+			skb->dev = rxif;
+			skb->protocol = eth_type_trans(skb, rxif);
+			if ( netif_rx(skb) == NET_RX_DROP )
+				rxif->stats.rx_dropped++;
+			else
+			{
+				if(usbnet_addr_monitor) printk(KERN_INFO "     Failed drop\n");
+					rxif->stats.rx_packets++;
+					rxif->stats.rx_bytes += pktlen;
+			}
+			return 0;
+		}
+		if(usbnet_addr_monitor) printk(KERN_INFO "     No run\n");
+	}
+	else if ( txif )
+	{
+		skb->dev = txif;
+		dev_queue_xmit(skb);
+		if(usbnet_addr_monitor) printk(KERN_INFO "     Go Tx\n");
+			return 0;
+	}
+	dev_kfree_skb_any(skb);
+	return 0;
+}
+#endif // USBNET_PPA_DP
 
 static int build_dma_sg(const struct sk_buff *skb, struct urb *urb)
 {
@@ -1257,7 +1752,7 @@ static int build_dma_sg(const struct sk_buff *skb, struct urb *urb)
 	return 1;
 }
 
-netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
+netdev_tx_t _usbnet_start_xmit (struct sk_buff *skb,
 				     struct net_device *net)
 {
 	struct usbnet		*dev = netdev_priv(net);
@@ -1268,6 +1763,21 @@ netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
 	unsigned long		flags;
 	int retval;
 
+#ifdef USBNET_PPA_DP
+    if(usbnet_addr_monitor)
+	{
+  		if(skb != NULL){ //NCM/MBIM tx_timer_cb will send with NULL skb for starting the transmission of remain SKBs
+			unsigned char *base;
+			base=skb->data;
+			printk(KERN_INFO "_usbnet_start_xmit() INPUT SRC[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X] DST[%03d.%03d.%03d.%03d/%02X:%02X:%02X:%02X:%02X:%02X]\n"
+			,*(base+26 + 0),*(base+26 + 1),*(base+26 + 2),*(base+26 + 3)
+			,*(base+6 + 0),*(base+6 + 1),*(base+6 + 2),*(base+6 + 3),*(base+6 + 4),*(base+6 + 5)
+			,*(base+30 + 0),*(base+30 + 1),*(base+30 + 2),*(base+30 + 3)
+			,*(base+0 + 0),*(base+0 + 1),*(base+0 + 2),*(base+0 + 3),*(base+0 + 4),*(base+0 + 5)
+			);
+  		}
+	}
+#endif
 	if (skb)
 		skb_tx_timestamp(skb);
 
@@ -1345,8 +1855,16 @@ netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
 	}
 #endif
 
+	#ifdef USBNET_PPA_DP
+		register_ppadp(dev->net);
+	#endif
+
 	switch ((retval = usb_submit_urb (urb, GFP_ATOMIC))) {
 	case -EPIPE:
+		#ifdef USBNET_PPA_DP
+			if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_stop_fn)
+				ppa_hook_directpath_ex_rx_stop_fn(&dev->subif, 0);
+		#endif
 		netif_stop_queue (net);
 		usbnet_defer_kevent (dev, EVENT_TX_HALT);
 		usb_autopm_put_interface_async(dev->intf);
@@ -1360,7 +1878,13 @@ netdev_tx_t usbnet_start_xmit (struct sk_buff *skb,
 		net->trans_start = jiffies;
 		__usbnet_queue_skb(&dev->txq, skb, tx_start);
 		if (dev->txq.qlen >= TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_stop_fn)
+					ppa_hook_directpath_ex_rx_stop_fn(&dev->subif, 0);
+			#endif
 			netif_stop_queue (net);
+		}
 	}
 	spin_unlock_irqrestore (&dev->txq.lock, flags);
 
@@ -1383,6 +1907,31 @@ deferred:
 #endif
 	return NETDEV_TX_OK;
 }
+
+netdev_tx_t
+usbnet_start_xmit (struct sk_buff *skb, struct net_device *net)
+{
+#ifdef USBNET_PPA_DP
+	struct usbnet *dev = netdev_priv(net);
+	int fpstatus;
+
+	if (dev->usbnet_ppadp_on) {
+		register_ppadp(dev->net);
+		if (IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_send_fn && ppa_hook_get_ifid_for_netif_fn) {
+			fpstatus = ppa_hook_directpath_ex_send_fn(&dev->subif, (PPA_BUF *)skb, skb->len, 1);
+			if (!fpstatus) {
+				if (usbnet_addr_monitor) printk(KERN_INFO "xmit     Go PPA OK\n");
+			} else {
+				dev_dbg(&dev->udev->dev, "ppa_hook_directpath_ex_send_fn status %d", fpstatus);
+				if (usbnet_addr_monitor) printk(KERN_INFO "xmit     Go PPA NOK %d  Try kernel\n",fpstatus);
+			}
+			return NETDEV_TX_OK;
+		}
+	}
+#endif
+
+	return _usbnet_start_xmit(skb, net);
+}
 EXPORT_SYMBOL_GPL(usbnet_start_xmit);
 
 static int rx_alloc_submit(struct usbnet *dev, gfp_t flags)
@@ -1463,7 +2012,13 @@ static void usbnet_bh (unsigned long param)
 				tasklet_schedule (&dev->bh);
 		}
 		if (dev->txq.qlen < TX_QLEN (dev))
+		{
+			#ifdef USBNET_PPA_DP
+				if(dev->usbnet_ppadp_on && IS_SET_PPADP_IFID(dev) && ppa_hook_directpath_ex_rx_restart_fn)
+					ppa_hook_directpath_ex_rx_restart_fn(&dev->subif, 0);
+			#endif
 			netif_wake_queue (dev->net);
+		}
 	}
 }
 
@@ -1495,6 +2050,16 @@ void usbnet_disconnect (struct usb_interface *intf)
 		   dev->driver_info->description);
 
 	net = dev->net;
+
+	#ifdef USBNET_PPA_DP
+		device_remove_file(&net->dev, &dev_attr_ppa_dp);
+		device_remove_file(&net->dev, &dev_attr_addr_monitor);
+		usbnet_ppadp_occupied=(ppa_startup_hook)? -1:0;
+		device_remove_file(&net->dev, &dev_attr_bridge_mode_mac_addr);
+		device_remove_file(&net->dev, &dev_attr_bridge_mode);
+		bridge_mode_running=0;
+	#endif
+
 	unregister_netdev (net);
 
 	cancel_work_sync(&dev->kevent);
@@ -1597,6 +2162,12 @@ usbnet_probe (struct usb_interface *udev, const struct usb_device_id *prod)
 	dev->interrupt_count = 0;
 
 	dev->net = net;
+
+	#ifdef USBNET_PPA_DP
+		dev->usbnet_ppadp_on   =  0;
+		SET_PPADP_IFID(dev, -1, -1);
+	#endif
+
 	strcpy (net->name, "usb%d");
 	memcpy (net->dev_addr, node_id, sizeof node_id);
 
@@ -1699,6 +2270,13 @@ usbnet_probe (struct usb_interface *udev, const struct usb_device_id *prod)
 	// ok, it's ready to go.
 	usb_set_intfdata (udev, dev);
 
+	#ifdef USBNET_PPA_DP
+		device_create_file(&net->dev, &dev_attr_bridge_mode_mac_addr);
+		device_create_file(&net->dev, &dev_attr_bridge_mode);
+		device_create_file(&net->dev, &dev_attr_ppa_dp);
+		device_create_file(&net->dev, &dev_attr_addr_monitor);
+	#endif
+
 	netif_device_attach (net);
 
 	if (dev->driver_info->flags & FLAG_LINK_INTR)
diff --git a/include/linux/usb/usbnet.h b/include/linux/usb/usbnet.h
index e303eef..6693307 100644
--- a/include/linux/usb/usbnet.h
+++ b/include/linux/usb/usbnet.h
@@ -22,6 +22,11 @@
 #ifndef	__LINUX_USB_USBNET_H
 #define	__LINUX_USB_USBNET_H
 
+#ifdef USBNET_PPA_DP
+#include <net/ppa_stack_al.h>
+#include <net/ppa_api_directpath.h>
+#endif
+
 /* interface from usbnet core to each USB networking link we handle */
 struct usbnet {
 	/* housekeeping */
@@ -78,6 +83,12 @@ struct usbnet {
 #		define EVENT_NO_RUNTIME_PM	9
 #		define EVENT_RX_KILL	10
 #		define EVENT_LINK_CHANGE	11
+#		define EVENT_REREG_PPA 12
+	int usbnet_ppadp_on;
+//	int usbnet_ppadp_ifid;
+#ifdef USBNET_PPA_DP
+	PPA_SUBIF subif;
+#endif
 };
 
 static inline struct usb_driver *driver_of(struct usb_interface *intf)
