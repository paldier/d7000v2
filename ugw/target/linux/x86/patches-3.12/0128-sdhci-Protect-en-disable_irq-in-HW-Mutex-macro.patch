From a6c361fcf3fbfa0856119d0c1191350ba3f0bd6d Mon Sep 17 00:00:00 2001
From: "Brett T. Warden" <brett.t.warden@intel.com>
Date: Wed, 27 May 2015 16:24:46 -0700
Subject: [PATCH] sdhci: Protect en/disable_irq in HW Mutex macro

Uses a kernel mutex to protect the enable_irq() and disable_irq() calls
in the LOCK_EMMC_HW_MUTEX and UNLOCK_EMMC_HW_MUTEX macros in case the HW
Mutex is not yet available. This prevents a concurrency issue between
sdhci_pci_probe_slot and mmc_rescan that could result in unbalanced IRQ
masking. Moves the existing kernel mutex from the header file so it's
actually a single mutex.
---
 drivers/mmc/host/sdhci.c  |   18 ++++++++++++++++++
 include/linux/mmc/sdhci.h |   26 ++++++--------------------
 2 files changed, 24 insertions(+), 20 deletions(-)

diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 9f61ea2..4ae2b85 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -128,6 +128,24 @@ static void sdhci_dumpregs(struct sdhci_host *host)
 	pr_err(DRIVER_NAME ": ===========================================\n");
 }
 
+#ifdef CONFIG_HW_MUTEXES
+/*
+ * Mutex to protect enable/disable_irq calls within HW_MUTEX macros when HW
+ * Mutex is not yet initialized
+ */
+static DEFINE_MUTEX(mmc_access_lock);
+void lock_emmc_access(void)
+{
+  might_sleep();
+  mutex_lock(&mmc_access_lock);
+}
+
+void unlock_emmc_access(void)
+{
+  mutex_unlock(&mmc_access_lock);
+}
+#endif
+
 /*****************************************************************************\
  *                                                                           *
  * Low level functions                                                       *
diff --git a/include/linux/mmc/sdhci.h b/include/linux/mmc/sdhci.h
index e145ec8..4ac829b 100644
--- a/include/linux/mmc/sdhci.h
+++ b/include/linux/mmc/sdhci.h
@@ -197,18 +197,8 @@ struct sdhci_host {
 };
 
 #ifdef CONFIG_HW_MUTEXES
-static DEFINE_MUTEX(mmc_access_lock);
-
-static void lock_emmc_access(void)
-{
-  might_sleep();
-  mutex_lock(&mmc_access_lock);
-}
-
-static void unlock_emmc_access(void)
-{
-  mutex_unlock(&mmc_access_lock);
-}
+void lock_emmc_access(void);
+void unlock_emmc_access(void);
 
 #define EMMC_HW_MUTEX_IS_LOCKED(host) (netss_driver_ready() &&\
   hw_mutex_is_locked(HW_MUTEX_EMMC))
@@ -217,23 +207,19 @@ static void unlock_emmc_access(void)
   if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
     {\
       if (netss_driver_ready()) \
-      {\
         hw_mutex_lock(HW_MUTEX_EMMC);\
-        lock_emmc_access();\
-        enable_irq(((struct sdhci_host *)host->private)->irq);\
-      }\
+      lock_emmc_access();\
+      enable_irq(((struct sdhci_host *)host->private)->irq);\
     }\
   } while(0)
 
 #define UNLOCK_EMMC_HW_MUTEX(host) do{\
   if (((struct sdhci_host *)host->private)->flags & SDHCI_SUPPORT_HW_MUTEX)\
     {\
+      disable_irq(((struct sdhci_host *)host->private)->irq);\
+      unlock_emmc_access();\
       if (netss_driver_ready()) \
-      {\
-        disable_irq(((struct sdhci_host *)host->private)->irq);\
-        unlock_emmc_access();\
         hw_mutex_unlock(HW_MUTEX_EMMC);\
-      }\
     }\
   } while(0)
 
-- 
1.7.9.5

