--- a/src/affile.c
+++ b/src/affile.c
@@ -422,6 +422,13 @@ void affile_set_group(struct log_dest_dr
 		self->gid = atoi(group);
 }
 
+void affile_set_file_size(struct log_dest_driver *c, int size)
+{
+        CAST(affile_dest, self, c);
+
+        self->file_size_limit = size;
+}
+
 void affile_set_perm(struct log_dest_driver *c, int perm)
 {
 	CAST(affile_dest, self, c);
@@ -566,6 +573,8 @@ do_init_affile_dest(struct log_handler *
 		self->gid = cfg->gid;
 	if (self->perm == -1)
 		self->perm = cfg->perm;
+	if (self->file_size_limit == -1)
+		self->file_size_limit = cfg->file_size_limit;
 	if (self->dir_uid == -1)
 		self->dir_uid = cfg->dir_uid;
 	if (self->dir_gid == -1)
@@ -579,12 +588,74 @@ do_init_affile_dest(struct log_handler *
 	return ST_OK | ST_GOON;
 }
 
+static int do_handle_affile_size_limit(struct affile_dest_writer *self)
+{
+	int size = 0;
+	int reopen_fd, flags;
+	char l1name[256], l2name[256];
+
+	if(self == NULL) {
+		return 1;
+	}
+	else if (self->dest == NULL) {
+		return 1;
+	}
+	else if (self->dest->super.fd <= 0) {
+		return 1;
+	}
+
+	size = lseek(self->dest->super.fd, 0, SEEK_CUR);
+        if ((size > 0) && (self->owner->file_size_limit > 0) && (size >= self->owner->file_size_limit))       
+        {
+       		sprintf(l1name, "%s.0", (char *)self->expanded_fname->data);
+		if(access(l1name, F_OK) == 0) {
+			sprintf(l2name, "%s.1", (char *)self->expanded_fname->data);
+                	if(rename(l1name, l2name) != 0){
+				werror("Error renaming .1 file \n");
+				return 0;
+			}
+	        }
+       		if (rename((char *)self->expanded_fname->data, l1name) == 0)
+		{
+			if (self->owner->flags & AFFILE_PIPE)
+        	        	flags = O_RDWR | O_NOCTTY | O_NONBLOCK | O_LARGEFILE;
+        		else
+	                	flags = O_WRONLY | O_CREAT | O_APPEND | O_NOCTTY | O_NONBLOCK | O_LARGEFILE;
+
+	        	if (do_open_file(self->expanded_fname, flags,
+        	                 self->owner->uid, self->owner->gid, self->owner->perm,
+                	         self->owner->dir_uid, self->owner->dir_gid, self->owner->dir_perm,
+                        	 self->owner->flags & AFFILE_CREATE_DIRS, &reopen_fd)) {
+				 	if (dup2(reopen_fd, self->dest->super.fd) < 0){
+						close(reopen_fd);
+						kill(getpid(), "SIGHUP");
+				 		werror("Error swithing to new log file\n");	
+						return 0;
+					}
+	  			 	close(reopen_fd);
+					kill(getpid(), "SIGHUP");
+			} else {
+				werror("Error reopening file \n");
+				return 0;
+			}
+		} else {
+			werror("Error renaming .0 file \n");
+                        return 0;
+		}
+       	}
+	return 1;
+}
+
 static void do_handle_affile_log(struct log_handler *c, struct log_info *msg)
 {
 	CAST(affile_dest, self, c);
 	struct affile_dest_writer *w;
 
 	w = affile_find_writer(self, msg);
+
+	if(!do_handle_affile_size_limit(w))
+		werror("Log Rotate Failed \n");
+
 	if (w) {
 		HANDLE_LOG(&w->super, msg);
 	}
@@ -602,6 +673,7 @@ struct log_dest_driver *make_affile_dest
 	self->super.log_fifo_size = -1;
 	self->uid = self->gid = -1;
 	self->perm = -1;
+	self->file_size_limit = -1;
 	self->dir_uid = self->dir_gid = -1;
 	self->dir_perm = -1;
 	self->remove_if_older = -1;
--- a/src/affile.c.x
+++ b/src/affile.c.x
@@ -111,6 +111,7 @@ struct affile_dest
   int dir_uid;
   int dir_gid;
   int dir_perm;
+  int file_size_limit;
   int flags;
   int remove_if_older;
   int sync_freq;
--- a/src/affile.h
+++ b/src/affile.h
@@ -59,6 +59,7 @@ void affile_set_perm(struct log_dest_dri
 void affile_set_dir_owner(struct log_dest_driver *c, char *owner);
 void affile_set_dir_group(struct log_dest_driver *c, char *group);
 void affile_set_dir_perm(struct log_dest_driver *c, int perm);
+void affile_set_file_size(struct log_dest_driver *c, int size);
 void affile_set_create_dirs(struct log_dest_driver *c, int enable);
 void affile_set_file_template(struct log_dest_driver *c, char *template);
 void affile_set_template_escape(struct log_dest_driver *c, int enable);
--- a/src/cfg-grammar.y
+++ b/src/cfg-grammar.y
@@ -88,6 +88,7 @@ get_last_log_prefix(void)
 %token KW_DNS_CACHE KW_DNS_CACHE_SIZE
 %token KW_DNS_CACHE_EXPIRE KW_DNS_CACHE_EXPIRE_FAILED
 %token KW_REMOVE_IF_OLDER KW_LOG_PREFIX KW_PAD_SIZE
+%token KW_FILE_SIZE_LIMIT
 
 /* filter items*/
 %token KW_FACILITY KW_LEVEL KW_NETMASK KW_HOST KW_MATCH
@@ -408,6 +409,7 @@ dest_affile_option
 	| KW_OWNER '(' string ')'		{ affile_set_owner(last_dest_driver, $3); free($3); }
 	| KW_GROUP '(' string ')'		{ affile_set_group(last_dest_driver, $3); free($3); }
 	| KW_PERM '(' NUMBER ')'		{ affile_set_perm(last_dest_driver, $3); }
+	| KW_FILE_SIZE_LIMIT '(' NUMBER ')'	{ affile_set_file_size(last_dest_driver, $3); }
 	| KW_DIR_OWNER '(' string ')'		{ affile_set_dir_owner(last_dest_driver, $3); free($3); }
 	| KW_DIR_GROUP '(' string ')'		{ affile_set_dir_group(last_dest_driver, $3); free($3); }
 	| KW_DIR_PERM '(' NUMBER ')'		{ affile_set_dir_perm(last_dest_driver, $3); }
@@ -634,6 +636,7 @@ options_item
 	| KW_TIME_SLEEP '(' NUMBER ')'		{ configuration->time_sleep = $3; }
 	| KW_TIME_REAP '(' NUMBER ')'		{ configuration->time_reap = $3; }
 	| KW_LOG_FIFO_SIZE '(' NUMBER ')'	{ configuration->log_fifo_size = $3; }
+	| KW_FILE_SIZE_LIMIT '(' NUMBER ')'	{ configuration->file_size_limit = $3; }
 	| KW_GC_BUSY_THRESHOLD '(' NUMBER ')' 	{ configuration->gc_busy_threshold = $3; }
 	| KW_GC_IDLE_THRESHOLD '(' NUMBER ')'	{ configuration->gc_idle_threshold = $3; }
 	| KW_CREATE_DIRS '(' yesno ')'		{ configuration->create_dirs = $3; }
--- a/src/cfg-lex.c
+++ b/src/cfg-lex.c
@@ -548,6 +548,7 @@ static struct keyword keywords[] = {
  	{ "time_reap",          KW_TIME_REAP },
 	{ "time_sleep",         KW_TIME_SLEEP },
 	{ "log_fifo_size",	KW_LOG_FIFO_SIZE },
+	{ "file_size_limit",    KW_FILE_SIZE_LIMIT },
         { "create_dirs",        KW_CREATE_DIRS },
  	{ "localip",		KW_LOCALIP },
 	{ "ip",			KW_IP },
--- a/src/cfg-lex.l
+++ b/src/cfg-lex.l
@@ -71,6 +71,7 @@ static struct keyword keywords[] = {
  	{ "time_reap",          KW_TIME_REAP },
 	{ "time_sleep",         KW_TIME_SLEEP },
 	{ "log_fifo_size",	KW_LOG_FIFO_SIZE },
+	{ "file_size_limit", 	KW_FILE_SIZE_LIMIT },
         { "create_dirs",        KW_CREATE_DIRS },
  	{ "localip",		KW_LOCALIP },
 	{ "ip",			KW_IP },
--- a/src/cfgfile.c
+++ b/src/cfgfile.c
@@ -315,6 +315,7 @@ struct syslog_config *make_syslog_config
 	self->time_reopen = 60;
 	self->time_reap = 60;
 	self->log_fifo_size = 1000;
+	self->file_size_limit = 0;
 	self->gc_idle_threshold = 100;
 	self->gc_busy_threshold = 3000;
 	self->uid = 0;
--- a/src/cfgfile.h.x
+++ b/src/cfgfile.h.x
@@ -16,6 +16,7 @@ struct syslog_config
   UINT32 time_reopen;
   UINT32 time_reap;
   int log_fifo_size;
+  int file_size_limit;
   UINT32 use_time_recvd;
   UINT32 use_fqdn;
   UINT32 use_dns;
