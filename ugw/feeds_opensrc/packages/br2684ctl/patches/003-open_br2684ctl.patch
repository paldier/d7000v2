diff -Naur br2684ctl-20040226.orig/Makefile open_br2684ctl/Makefile
--- br2684ctl-20040226.orig/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ open_br2684ctl/Makefile	2009-11-03 11:08:41.313955000 +0530
@@ -0,0 +1,44 @@
+#CROSS=mips-linux-
+#CROSS=
+#CC=$(CROSS)gcc
+
+#CROSSCFLAGS=-mips2 -mtune=4kc
+#CROSSCFLAGS=
+#CFLAGS=-Os $(CROSSCFLAGS) -Wall
+CFLAGS=-Wall $(IFX_CFLAGS)
+LDFLAGS+= $(IFX_LDFLAGS)
+
+LIBATM=atm
+#LIBATMPATH=../../common/lib
+LIBATMPATH=../../ifx/IFXAPIs/lib/
+LIBIFXCOMMON=ifx_common
+IFXCOMMONPATH=../../ifx/IFXAPIs/
+#INCPATH=-I../../../kernel/opensource/linux_2_4_20_mvl_ifx/include -I$(IFXCOMMONPATH)include
+INCPATH=-I../../../kernel/opensource/linux_2_4_20_mvl_ifx/include
+
+all:br2684ctl br2684ctld
+	
+#$(CC) $(INCPATH) $(CFLAGS) -o $@  br2684ctl.c -l$(LIBATM) -L$(LIBATMPATH) -l$(LIBIFXCOMMON) -L$(IFXCOMMONPATH)lib
+
+ifeq ($(CONFIG_PACKAGE_KMOD_IFX_NFEXT),y)
+br2684ctl:br2684ctl.c
+	$(CC) $(INCPATH) $(CFLAGS) -DIFX_BR2684CLIENT $(LDFLAGS) -o $@  br2684ctl.c -l$(LIBATM) -l$(LIBIFXCOMMON)
+else
+br2684ctl:br2684ctl.c
+	$(CC) $(INCPATH) $(CFLAGS) -DIFX_BR2684CLIENT -DCONFIG_WAN_VLAN_SUPPORT $(LDFLAGS) -o $@  br2684ctl.c -l$(LIBATM) -l$(LIBIFXCOMMON)
+endif
+
+ifeq ($(CONFIG_PACKAGE_KMOD_IFX_NFEXT),y)
+br2684ctld:br2684ctl.c
+	rm -f br2684ctl.o
+	$(CC) $(INCPATH) $(CFLAGS) -DIFX_BR2684DEAMON $(LDFLAGS) -o $@  br2684ctl.c -l$(LIBATM) -l$(LIBIFXCOMMON)
+else
+br2684ctld:br2684ctl.c
+	rm -f br2684ctl.o
+	$(CC) $(INCPATH) $(CFLAGS) -DIFX_BR2684DEAMON -DCONFIG_WAN_VLAN_SUPPORT $(LDFLAGS) -o $@  br2684ctl.c -l$(LIBATM) -l$(LIBIFXCOMMON)
+endif
+
+clean:
+	-rm -f br2684ctl
+	-rm -f br2684ctld
+
diff -Naur br2684ctl-20040226.orig/admioctl.h open_br2684ctl/admioctl.h
--- br2684ctl-20040226.orig/admioctl.h	1970-01-01 05:30:00.000000000 +0530
+++ open_br2684ctl/admioctl.h	2009-11-03 11:08:41.139956000 +0530
@@ -0,0 +1,34 @@
+//joelin
+#include <linux/ioctl.h>
+
+/* type definitions */
+typedef unsigned char U8;
+typedef unsigned short U16;
+typedef unsigned int U32;
+
+typedef struct _REGRW_
+{
+  unsigned int addr;
+  unsigned int value;
+  unsigned int mode;
+}REGRW, *PREGRW;
+
+/* IOCTL keys */
+#define KEY_IOCTL_ADM_REGRW		0x01
+#define KEY_IOCTL_ADM_SW_REGRW		0x02
+#define KEY_IOCTL_ADM_SW_PORTSTS	0x03
+#define KEY_IOCTL_ADM_SW_INIT		0x04
+
+#define KEY_IOCTL_MAX_KEY		0x05
+
+/* IOCTL MAGIC */
+static const unsigned char ADM_MAGIC = 'a'|'d'|'m'|'t'|'e'|'k';
+
+/* IOCTL parameters */
+#define ADM_IOCTL_REGRW			_IOWR(ADM_MAGIC, KEY_IOCTL_ADM_REGRW, REGRW)
+#define ADM_SW_IOCTL_REGRW		_IOWR(ADM_MAGIC, KEY_IOCTL_ADM_SW_REGRW, REGRW)
+#define ADM_SW_IOCTL_PORTSTS		_IOWR(ADM_MAGIC, KEY_IOCTL_ADM_SW_PORTSTS, NULL)
+#define ADM_SW_IOCTL_INIT		_IOWR(ADM_MAGIC, KEY_IOCTL_ADM_SW_INIT, NULL)
+
+#define REG_READ	0x0
+#define REG_WRITE	0x1
diff -Naur br2684ctl-20040226.orig/br2684ctl.c open_br2684ctl/br2684ctl.c
--- br2684ctl-20040226.orig/br2684ctl.c	2009-11-03 11:11:48.305182000 +0530
+++ open_br2684ctl/br2684ctl.c	2009-11-03 11:08:41.174956000 +0530
@@ -122,7 +122,7 @@
 			ni.backend_num = ATM_BACKEND_BR2684;
 			ni.media = BR2684_MEDIA_ETHERNET;
 			ni.mtu = 1500;
-			//ni.payload = payload;	/* bridged or routed */
+			ni.payload = payload;	/* bridged or routed */
 
 			sprintf(ni.ifname, "%s%d", BR2684_FILE_PREFIX,  num);
 			err=ioctl (lastsock, ATM_NEWBACKENDIF, &ni);
@@ -255,7 +255,7 @@
 	be.fcs_out = BR2684_FCSOUT_NO;
 	be.fcs_auto = 0;
 	be.encaps = encap ? BR2684_ENCAPS_VC : BR2684_ENCAPS_LLC;
-	//be.payload = payload;
+	be.payload = payload;
 	be.has_vpiid = 0;
 	be.send_padding = 0;
 	be.min_size = 0;
@@ -322,10 +322,10 @@
 void terminate(int num) 
 {
 //	syslog(LOG_INFO,"br2684ctld : Received SIGTERM or no interface configured.");
-	ifx_rm_pid_file(DEAMON_PIDFILE_NAME);
+//	ifx_rm_pid_file(DEAMON_PIDFILE_NAME);
 #ifdef exit
 #undef exit
-	exit(0);
+//	exit(0);
 #endif
 }
 
@@ -537,8 +537,14 @@
 					if(g_vlan_cfg.vlan_if_tag) {
 						g_vlan_cfg.vlan_if_vlanid = atoi(argv[argc-2]);
 						syslog(LOG_INFO, "VLAN VID %d \n", g_vlan_cfg.vlan_if_vlanid);
+						if (argv[argc-1] != NULL ) {
 						g_vlan_cfg.vlan_if_8021p = atoi(argv[argc-1]);
 						syslog(LOG_INFO,"VLAN 8021P %d \n", g_vlan_cfg.vlan_if_8021p);
+						}
+						else {
+							g_vlan_cfg.vlan_if_8021p = 0;
+							syslog(LOG_INFO,"VLAN 8021P %d \n", g_vlan_cfg.vlan_if_8021p);
+						}
 						optind+=2;
 					}
 					wan_vlan_config(&g_vlan_cfg, 0/*Not used*/, 1); 
diff -Naur br2684ctl-20040226.orig/build.sh open_br2684ctl/build.sh
--- br2684ctl-20040226.orig/build.sh	1970-01-01 05:30:00.000000000 +0530
+++ open_br2684ctl/build.sh	2009-11-03 11:08:41.203959000 +0530
@@ -0,0 +1,51 @@
+#!/bin/sh
+APPS_NAME="br2684ctl"
+if [ -e sysconfig.sh ]; then
+	. sysconfig.sh
+	. config.sh
+	. model_config.sh
+else
+        echo "Application "$APPS_NAME" not configured"
+        exit 0
+fi                                                                                                                                       
+
+
+display_info "----------------------------------------------------------------------"
+display_info "-----------------------      build br2684ctl  ------------------------"
+display_info "----------------------------------------------------------------------"
+
+parse_args $@
+
+if [ "$1" = "config_only" ] ;then
+	exit 0
+fi
+
+if [ $BUILD_CLEAN -eq 1 ]; then
+	make clean
+	[ ! $BUILD_CONFIGURE -eq 1 ] && exit 0
+fi
+
+if [ -n "$PLATFORM_NAME" -a "$PLATFORM_NAME" = "Amazon_SE" ]; then
+	IFX_CFLAGS="${IFX_CFLAGS} -DCONFIG_AMAZON_SE"
+fi
+
+if [ "$CONFIG_FEATURE_DSL_CPE_API" = "1" ]; then
+	IFX_CFLAGS="${IFX_CFLAGS} -DLINUX -I${USER_IFXSOURCE_DIR}dsl_api/drv_dsl_cpe_api/src/include -I${USER_IFXSOURCE_DIR}dsl_api/dsl_cpe_control/src -DDSL_CHANNELS_PER_LINE=1"
+	if [ "$IFX_CONFIG_CPU" = "AMAZON_SE" -o "$IFX_CONFIG_CPU" = "DANUBE" ]; then
+        #8111001:<IFTW-linje> integrated DSL API 3.16.3
+		IFX_CFLAGS="${IFX_CFLAGS} -DINCLUDE_DSL_CPE_API_DANUBE -DCONFIG_FEATURE_DSL_CPE_API"
+		#IFX_CFLAGS="${IFX_CFLAGS} -DINCLUDE_DSL_CPE_API_${IFX_CONFIG_CPU} -DCONFIG_FEATURE_DSL_CPE_API"
+	fi
+	
+fi
+
+make AR=${IFX_AR} AS=${IFX_AS} LD=${IFX_LD} NM=${IFX_NM} CC=${IFX_CC} BUILDCC=${IFX_HOSTCC} GCC=${IFX_CC} CXX=${IFX_CXX} CPP=${IFX_CPP} RANLIB=${IFX_RANLIB} IFX_CFLAGS="${IFX_CFLAGS}" IFX_LDFLAGS="${IFX_LDFLAGS}" all
+ifx_error_check $? 
+
+${IFX_STRIP} br2684ctl
+${IFX_STRIP} br2684ctld
+
+install -d ${BUILD_ROOTFS_DIR}usr/sbin/
+cp -f br2684ctl ${BUILD_ROOTFS_DIR}usr/sbin/.
+cp -f br2684ctld ${BUILD_ROOTFS_DIR}usr/sbin/.
+ifx_error_check $? 
diff -Naur br2684ctl-20040226.orig/ifx_make.mk open_br2684ctl/ifx_make.mk
--- br2684ctl-20040226.orig/ifx_make.mk	1970-01-01 05:30:00.000000000 +0530
+++ open_br2684ctl/ifx_make.mk	2009-11-03 11:08:41.333955000 +0530
@@ -0,0 +1,83 @@
+include .app_configured
+
+ifeq ($(MAKE_USED),1)
+include $(INCLUDE_DIR)/Rules.mk
+include $(INCLUDE_DIR)/Makefile.common
+-include $(UBOOT_CONFIG)
+
+APP_NAME=br2684ctl
+APP_TYPE=OPEN
+APP_VER=20040226-1
+CONFIG_FULL_PACKAGE=y
+BUILD_DEPENDS=linux_atm
+
+ifeq ($(CONFIG_FEATURE_IFX_TR69),y)
+        BUILD_DEPENDS+=devm
+endif
+
+IFX_APIS_DIR:=$(USER_IFXSOURCE_DIR)/IFXAPIs/
+IFX_CFLAGS      +=-I$(USER_OPENSOURCE_DIR)/linux_atm/src/include -I$(IFX_APIS_DIR)/include/ -I$(KERNEL_INCLUDE_PATH)
+
+ifeq ($(PLATFORM),"AMAZON_SE")
+	IFX_CFLAGS		+=-DCONFIG_AMAZON_SE
+endif
+
+ifeq ($(CONFIG_FEATURE_DSL_CPE_API),y)
+	IFX_CFLAGS		+=-DLINUX -I$(USER_IFXSOURCE_DIR)/dsl_api/drv_dsl_cpe_api/src/include \
+				-I$(USER_IFXSOURCE_DIR)/dsl_api/dsl_cpe_control/src -DDSL_CHANNELS_PER_LINE=1
+        ifeq ($(IFX_CONFIG_CPU),"AMAZON_SE")
+		#8111001:<IFTW-linje> integrated DSL API 3.16.3
+		IFX_CFLAGS	+=-DINCLUDE_DSL_CPE_API_DANUBE -DCONFIG_FEATURE_DSL_CPE_API
+                #IFX_CFLAGS	+=$(IFX_CFLAGS) -DINCLUDE_DSL_CPE_API_$(IFX_CONFIG_CPU) -DCONFIG_FEATURE_DSL_CPE_API
+	endif
+        ifeq ($(IFX_CONFIG_CPU),"DANUBE")
+		#8111001:<IFTW-linje> integrated DSL API 3.16.3
+		IFX_CFLAGS	+=-DINCLUDE_DSL_CPE_API_DANUBE -DCONFIG_FEATURE_DSL_CPE_API
+                #IFX_CFLAGS	+=$(IFX_CFLAGS) -DINCLUDE_DSL_CPE_API_$(IFX_CONFIG_CPU) -DCONFIG_FEATURE_DSL_CPE_API
+	endif
+        ifeq ($(IFX_CONFIG_CPU),"AMAZON_S")
+		IFX_CFLAGS	+=-DINCLUDE_DSL_CPE_API_DANUBE -DCONFIG_FEATURE_DSL_CPE_API
+	endif
+endif
+
+all: configure compile install
+
+define menuconfig
+
+config FEATURE_RFC2684
+	bool 'Support for RFC2684'
+	help
+	  Support for RFC2684
+
+endef
+
+define configure
+endef
+
+define compile
+        $(MAKE) $(BUILD_FLAGS) IFX_CFLAGS="$(IFX_CFLAGS)" IFX_LDFLAGS="$(IFX_LDFLAGS)" all
+	$(IFX_STRIP) br2684ctl
+	$(IFX_STRIP) br2684ctld
+endef
+
+define install
+	install -d $(BUILD_ROOTFS_DIR)/usr/sbin
+	cp -f br2684ctl $(BUILD_ROOTFS_DIR)/usr/sbin/.
+	cp -f br2684ctld $(BUILD_ROOTFS_DIR)/usr/sbin/.
+endef
+
+define clean
+	$(MAKE) clean
+endef
+
+define distclean
+	$(MAKE) clean
+endef
+
+$(eval $(call define_eval_application))
+else
+export MAKE_USED=1
+all %:
+	@$(MAKE) -s -C $(BUILD_TOOLS_DIR) make_installed
+	@$(BUILD_TOOLS_DIR)/tmp/bin/make -f ifx_make.mk $@
+endif
diff -Naur br2684ctl-20040226.orig/image.h open_br2684ctl/image.h
--- br2684ctl-20040226.orig/image.h	1970-01-01 05:30:00.000000000 +0530
+++ open_br2684ctl/image.h	2009-11-03 11:08:41.268964000 +0530
@@ -0,0 +1,160 @@
+/*
+ * (C) Copyright 2000-2005
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ *
+ ********************************************************************
+ * NOTE: This header file defines an interface to U-Boot. Including
+ * this (unmodified) header file in another file is considered normal
+ * use of U-Boot, and does *not* fall under the heading of "derived
+ * work".
+ ********************************************************************
+ */
+
+#ifndef __IMAGE_H__
+#define __IMAGE_H__
+
+/*
+ * Operating System Codes
+ */
+#define IH_OS_INVALID		0	/* Invalid OS	*/
+#define IH_OS_OPENBSD		1	/* OpenBSD	*/
+#define IH_OS_NETBSD		2	/* NetBSD	*/
+#define IH_OS_FREEBSD		3	/* FreeBSD	*/
+#define IH_OS_4_4BSD		4	/* 4.4BSD	*/
+#define IH_OS_LINUX		5	/* Linux	*/
+#define IH_OS_SVR4		6	/* SVR4		*/
+#define IH_OS_ESIX		7	/* Esix		*/
+#define IH_OS_SOLARIS		8	/* Solaris	*/
+#define IH_OS_IRIX		9	/* Irix		*/
+#define IH_OS_SCO		10	/* SCO		*/
+#define IH_OS_DELL		11	/* Dell		*/
+#define IH_OS_NCR		12	/* NCR		*/
+#define IH_OS_LYNXOS		13	/* LynxOS	*/
+#define IH_OS_VXWORKS		14	/* VxWorks	*/
+#define IH_OS_PSOS		15	/* pSOS		*/
+#define IH_OS_QNX		16	/* QNX		*/
+#define IH_OS_U_BOOT		17	/* Firmware	*/
+#define IH_OS_RTEMS		18	/* RTEMS	*/
+#define IH_OS_ARTOS		19	/* ARTOS	*/
+#define IH_OS_UNITY		20	/* Unity OS	*/
+
+/*
+ * CPU Architecture Codes (supported by Linux)
+ */
+#define IH_CPU_INVALID		0	/* Invalid CPU	*/
+#define IH_CPU_ALPHA		1	/* Alpha	*/
+#define IH_CPU_ARM		2	/* ARM		*/
+#define IH_CPU_I386		3	/* Intel x86	*/
+#define IH_CPU_IA64		4	/* IA64		*/
+#define IH_CPU_MIPS		5	/* MIPS		*/
+#define IH_CPU_MIPS64		6	/* MIPS	 64 Bit */
+#define IH_CPU_PPC		7	/* PowerPC	*/
+#define IH_CPU_S390		8	/* IBM S390	*/
+#define IH_CPU_SH		9	/* SuperH	*/
+#define IH_CPU_SPARC		10	/* Sparc	*/
+#define IH_CPU_SPARC64		11	/* Sparc 64 Bit */
+#define IH_CPU_M68K		12	/* M68K		*/
+#define IH_CPU_NIOS		13	/* Nios-32	*/
+#define IH_CPU_MICROBLAZE	14	/* MicroBlaze   */
+#define IH_CPU_NIOS2		15	/* Nios-II	*/
+#define IH_CPU_BLACKFIN		16	/* Blackfin	*/
+#define IH_CPU_AVR32		17	/* AVR32	*/
+
+/*
+ * Image Types
+ *
+ * "Standalone Programs" are directly runnable in the environment
+ *	provided by U-Boot; it is expected that (if they behave
+ *	well) you can continue to work in U-Boot after return from
+ *	the Standalone Program.
+ * "OS Kernel Images" are usually images of some Embedded OS which
+ *	will take over control completely. Usually these programs
+ *	will install their own set of exception handlers, device
+ *	drivers, set up the MMU, etc. - this means, that you cannot
+ *	expect to re-enter U-Boot except by resetting the CPU.
+ * "RAMDisk Images" are more or less just data blocks, and their
+ *	parameters (address, size) are passed to an OS kernel that is
+ *	being started.
+ * "Multi-File Images" contain several images, typically an OS
+ *	(Linux) kernel image and one or more data images like
+ *	RAMDisks. This construct is useful for instance when you want
+ *	to boot over the network using BOOTP etc., where the boot
+ *	server provides just a single image file, but you want to get
+ *	for instance an OS kernel and a RAMDisk image.
+ *
+ *	"Multi-File Images" start with a list of image sizes, each
+ *	image size (in bytes) specified by an "uint32_t" in network
+ *	byte order. This list is terminated by an "(uint32_t)0".
+ *	Immediately after the terminating 0 follow the images, one by
+ *	one, all aligned on "uint32_t" boundaries (size rounded up to
+ *	a multiple of 4 bytes - except for the last file).
+ *
+ * "Firmware Images" are binary images containing firmware (like
+ *	U-Boot or FPGA images) which usually will be programmed to
+ *	flash memory.
+ *
+ * "Script files" are command sequences that will be executed by
+ *	U-Boot's command interpreter; this feature is especially
+ *	useful when you configure U-Boot to use a real shell (hush)
+ *	as command interpreter (=> Shell Scripts).
+ */
+
+#define IH_TYPE_INVALID		0	/* Invalid Image		*/
+#define IH_TYPE_STANDALONE	1	/* Standalone Program		*/
+#define IH_TYPE_KERNEL		2	/* OS Kernel Image		*/
+#define IH_TYPE_RAMDISK		3	/* RAMDisk Image		*/
+#define IH_TYPE_MULTI		4	/* Multi-File Image		*/
+#define IH_TYPE_FIRMWARE	5	/* Firmware Image		*/
+#define IH_TYPE_SCRIPT		6	/* Script file			*/
+#define IH_TYPE_FILESYSTEM	7	/* Filesystem Image (any type)	*/
+
+/*
+ * Compression Types
+ */
+#define IH_COMP_NONE		0	/*  No	 Compression Used	*/
+#define IH_COMP_GZIP		1	/* gzip	 Compression Used	*/
+#define IH_COMP_BZIP2		2	/* bzip2 Compression Used	*/
+#define IH_COMP_LZMA		3	/* lzma Compression Used	*/
+
+#define IH_MAGIC	0x27051956	/* Image Magic Number		*/
+#define IH_NMLEN		32	/* Image Name Length		*/
+
+/*
+ * all data in network byte order (aka natural aka bigendian)
+ */
+
+typedef struct image_header {
+	uint32_t	ih_magic;	/* Image Header Magic Number	*/
+	uint32_t	ih_hcrc;	/* Image Header CRC Checksum	*/
+	uint32_t	ih_time;	/* Image Creation Timestamp	*/
+	uint32_t	ih_size;	/* Image Data Size		*/
+	uint32_t	ih_load;	/* Data	 Load  Address		*/
+	uint32_t	ih_ep;		/* Entry Point Address		*/
+	uint32_t	ih_dcrc;	/* Image Data CRC Checksum	*/
+	uint8_t		ih_os;		/* Operating System		*/
+	uint8_t		ih_arch;	/* CPU architecture		*/
+	uint8_t		ih_type;	/* Image Type			*/
+	uint8_t		ih_comp;	/* Compression Type		*/
+	uint8_t		ih_name[IH_NMLEN];	/* Image Name		*/
+} image_header_t;
+
+
+#endif	/* __IMAGE_H__ */
