--- open_br2684ctl/br2684ctl.c	2009-08-19 14:37:29.003924000 +0530
+++ br2684ctl/br2684ctl.c	2009-08-05 11:51:22.286255000 +0530
@@ -32,7 +32,7 @@
 #include "linux/atmbr2684.h" //605161:fchang.added
 
 
-#include "ifx_common.h"
+//#include "ifx_common.h"
 #if defined(IFX_BR2684DEAMON) || defined(IFX_BR2684CLIENT)
 #include <fcntl.h>
 #include <signal.h>
@@ -62,6 +62,13 @@
 #define exit(x)		return(-(x))
 #endif
 
+#define IFX_MAX_PID_FILENAME	100
+#define IFX_PID_FILE_PATH		"/var/run"
+static char g_ifx_pidfile_prefix[IFX_MAX_PID_FILENAME];
+extern int ifx_get_process_pid(char *file_prefix);
+extern int ifx_rm_pid_file(char *file_prefix);
+extern int ifx_create_pid_file(char *file_prefix);
+extern void ifx_rm_pid_file_atexit(void);
 #ifndef IFX_BR2684CLIENT /* [ IFX_BR2684CLIENT */
 
 #ifdef CONFIG_PACKAGE_KMOD_IFX_NFEXT /*For DAEMON only */
@@ -644,4 +651,58 @@
 #endif /* IFX_BR2684CLIENT */
 }
 
+int ifx_get_process_pid(char *file_prefix)
+{
+	int process_id=-1;
+	char file_name[IFX_MAX_PID_FILENAME];
+	FILE *fp = NULL;
+
+	sprintf(file_name,"%s/%s.pid",IFX_PID_FILE_PATH, file_prefix);	
+	fp = fopen(file_name,"r");
+	if (fp == NULL) {
+		syslog(LOG_INFO, "Error : Couldn't open file [%s] in read mode!",file_name);
+		return (process_id);
+	} else {
+		if (fscanf(fp,"%d",&process_id) < 0) {
+			process_id=-1; /* Error */
+		}
+		fclose(fp);
+	}
+	return process_id;
+}
+int ifx_rm_pid_file(char *file_prefix)
+{
+	char file_name[IFX_MAX_PID_FILENAME];
+
+
+	sprintf(file_name,"%s/%s.pid",IFX_PID_FILE_PATH, file_prefix);	
+
+	return (unlink(file_name));
+}
 
+int ifx_create_pid_file(char *file_prefix)
+{
+	int process_id = 0;
+	FILE *fp;
+	char file_name[IFX_MAX_PID_FILENAME];
+
+	process_id = getpid();
+
+	sprintf(file_name,"%s/%s.pid",IFX_PID_FILE_PATH, file_prefix);	
+	fp = fopen(file_name,"w");
+	if (fp == NULL) {
+		syslog(LOG_INFO, "Error : Couldn't open file [%s] in write mode!",file_name);
+		return -1;
+	} else {
+		fprintf(fp,"%d",process_id);
+		fclose(fp);
+	}
+	strcpy(g_ifx_pidfile_prefix, file_prefix);
+	atexit(ifx_rm_pid_file_atexit);
+	return 0;
+}
+
+void ifx_rm_pid_file_atexit(void)
+{
+	ifx_rm_pid_file(g_ifx_pidfile_prefix);
+}
