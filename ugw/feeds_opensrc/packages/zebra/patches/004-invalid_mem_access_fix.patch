# When last node is deleted from the linked list, pointer reference to the node is still existing
# even though the memory pointed by it is not available and hence accessing that memory caused core dump.
# To avoid this, we now validate the number of nodes in addition to the validity of node.
diff -Naur zebra-0.94/lib/linklist.c zebra-0.94_new/lib/linklist.c
--- zebra-0.94/lib/linklist.c	2003-11-04 23:30:42.000000000 +0530
+++ zebra-0.94_new/lib/linklist.c	2013-05-20 18:56:11.000000000 +0530
@@ -160,7 +160,7 @@
 void
 listnode_delete (struct list *list, void *val)
 {
-  struct listnode *node;
+  struct listnode *node = NULL;
 
   for (node = list->head; node; node = node->next)
     {
diff -Naur zebra-0.94/zebra/interface.c zebra-0.94_new/zebra/interface.c
--- zebra-0.94/zebra/interface.c	2013-05-20 18:54:43.000000000 +0530
+++ zebra-0.94_new/zebra/interface.c	2013-05-20 18:56:30.000000000 +0530
@@ -221,10 +221,10 @@
 void 
 if_delete_update (struct interface *ifp)
 {
-  struct listnode *node;
-  struct listnode *next;
-  struct connected *ifc;
-  struct prefix *p;
+  struct listnode *node = NULL;
+  struct listnode *next = NULL;
+  struct connected *ifc = NULL;
+  struct prefix *p = NULL;
 
   if (if_is_up(ifp))
     {
@@ -251,7 +251,7 @@
   /* Delete connected routes from the kernel. */
   if (ifp->connected)
     {
-      for (node = listhead (ifp->connected); node; node = next)
+      for (node = listhead (ifp->connected); node && ifp->connected->count ; node = next)
 	{
 	  next = node->next;
 	  ifc = getdata (node);
