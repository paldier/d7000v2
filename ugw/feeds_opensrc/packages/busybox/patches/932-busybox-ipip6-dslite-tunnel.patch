diff -Naur busybox-1.17.1.orig/networking/ip.c busybox-1.17.1/networking/ip.c
--- busybox-1.17.1.orig/networking/ip.c	2011-03-15 13:05:48.946762155 +0530
+++ busybox-1.17.1/networking/ip.c	2011-03-15 13:04:46.457779627 +0530
@@ -27,53 +27,54 @@
 	bb_show_usage();
 }
 
-typedef int (*ip_func_ptr_t)(char**);
+typedef int (*ip_func_ptr_t)(int, char**);
 
-static int ip_do(ip_func_ptr_t ip_func, char **argv)
+static int ip_do(ip_func_ptr_t ip_func, int argc, char **argv)
 {
-	argv = ip_parse_common_args(argv + 1);
-	return ip_func(argv);
+	argc--;
+	argv = ip_parse_common_args(&argc, argv + 1);
+	return ip_func(argc, argv);
 }
 
 #if ENABLE_FEATURE_IP_ADDRESS
 int ipaddr_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int ipaddr_main(int argc UNUSED_PARAM, char **argv)
+int ipaddr_main(int argc, char **argv)
 {
-	return ip_do(do_ipaddr, argv);
+	return ip_do(do_ipaddr, argc, argv);
 }
 #endif
 #if ENABLE_FEATURE_IP_LINK
 int iplink_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int iplink_main(int argc UNUSED_PARAM, char **argv)
+int iplink_main(int argc, char **argv)
 {
-	return ip_do(do_iplink, argv);
+	return ip_do(do_iplink, argc, argv);
 }
 #endif
 #if ENABLE_FEATURE_IP_ROUTE
 int iproute_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int iproute_main(int argc UNUSED_PARAM, char **argv)
+int iproute_main(int argc, char **argv)
 {
-	return ip_do(do_iproute, argv);
+	return ip_do(do_iproute, argc, argv);
 }
 #endif
 #if ENABLE_FEATURE_IP_RULE
 int iprule_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int iprule_main(int argc UNUSED_PARAM, char **argv)
+int iprule_main(int argc, char **argv)
 {
-	return ip_do(do_iprule, argv);
+	return ip_do(do_iprule, argc, argv);
 }
 #endif
 #if ENABLE_FEATURE_IP_TUNNEL
 int iptunnel_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int iptunnel_main(int argc UNUSED_PARAM, char **argv)
+int iptunnel_main(int argc, char **argv)
 {
-	return ip_do(do_iptunnel, argv);
+	return ip_do(do_iptunnel, argc, argv);
 }
 #endif
 
 
 int ip_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int ip_main(int argc UNUSED_PARAM, char **argv)
+int ip_main(int argc, char **argv)
 {
 	static const char keywords[] ALIGN1 =
 		IF_FEATURE_IP_ADDRESS("address\0")
@@ -96,12 +97,15 @@
 	};
 	ip_func_ptr_t ip_func;
 	int key;
+	char **argvp = NULL;
 
-	argv = ip_parse_common_args(argv + 1);
+	argvp = argv;
+	argv = ip_parse_common_args(&argc, argv + 1);
 	key = *argv ? index_in_substrings(keywords, *argv++) : -1;
 	ip_func = ip_func_ptrs[key + 1];
 
-	return ip_func(argv);
+	argc = argc - (((unsigned int)argv - (unsigned int)argvp) / sizeof(argv));
+	return ip_func(argc, argv);
 }
 
 #endif /* any of ENABLE_FEATURE_IP_xxx is 1 */
diff -Naur busybox-1.17.1.orig/networking/libiproute/ipaddress.c busybox-1.17.1/networking/libiproute/ipaddress.c
--- busybox-1.17.1.orig/networking/libiproute/ipaddress.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/ipaddress.c	2011-03-15 13:05:08.955762195 +0530
@@ -747,7 +747,7 @@
 }
 
 /* Return value becomes exitcode. It's okay to not return at all */
-int do_ipaddr(char **argv)
+int do_ipaddr(int argc, char **argv)
 {
 	static const char commands[] ALIGN1 =
 		"add\0""delete\0""list\0""show\0""lst\0""flush\0";
diff -Naur busybox-1.17.1.orig/networking/libiproute/ip_common.h busybox-1.17.1/networking/libiproute/ip_common.h
--- busybox-1.17.1.orig/networking/libiproute/ip_common.h	2011-03-15 13:06:12.591762334 +0530
+++ busybox-1.17.1/networking/libiproute/ip_common.h	2011-03-15 13:05:12.977887264 +0530
@@ -15,18 +15,18 @@
 
 PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDDEN
 
-extern char **ip_parse_common_args(char **argv);
+extern char **ip_parse_common_args(int *argc, char **argv);
 extern int print_neigh(struct sockaddr_nl *who, struct nlmsghdr *n, void *arg);
 extern int ipaddr_list_or_flush(char **argv, int flush);
 extern int iproute_monitor(char **argv);
 extern void iplink_usage(void) NORETURN;
 extern void ipneigh_reset_filter(void);
 
-extern int do_ipaddr(char **argv);
-extern int do_iproute(char **argv);
-extern int do_iprule(char **argv);
+extern int do_ipaddr(int argc, char **argv);
+extern int do_iproute(int argc, char **argv);
+extern int do_iprule(int argc, char **argv);
 extern int do_ipneigh(char **argv);
-extern int do_iptunnel(char **argv);
+extern int do_iptunnel(int argc, char **argv);
 extern int do_iplink(char **argv);
 extern int do_ipmonitor(char **argv);
 extern int do_multiaddr(char **argv);
diff -Naur busybox-1.17.1.orig/networking/libiproute/iplink.c busybox-1.17.1/networking/libiproute/iplink.c
--- busybox-1.17.1.orig/networking/libiproute/iplink.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/iplink.c	2011-03-15 13:05:08.955762195 +0530
@@ -362,7 +362,7 @@
 }
 
 /* Return value becomes exitcode. It's okay to not return at all */
-int do_iplink(char **argv)
+int do_iplink(int argc, char **argv)
 {
 	static const char keywords[] ALIGN1 =
 		"add\0""delete\0""set\0""show\0""lst\0""list\0";
diff -Naur busybox-1.17.1.orig/networking/libiproute/ip_parse_common_args.c busybox-1.17.1/networking/libiproute/ip_parse_common_args.c
--- busybox-1.17.1.orig/networking/libiproute/ip_parse_common_args.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/ip_parse_common_args.c	2011-03-15 13:05:08.955762195 +0530
@@ -22,7 +22,7 @@
 smallint oneline;
 char _SL_;
 
-char **ip_parse_common_args(char **argv)
+char **ip_parse_common_args(int *argc, char **argv)
 {
 	static const char ip_common_commands[] ALIGN1 =
 		"oneline" "\0"
diff -Naur busybox-1.17.1.orig/networking/libiproute/iproute.c busybox-1.17.1/networking/libiproute/iproute.c
--- busybox-1.17.1.orig/networking/libiproute/iproute.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/iproute.c	2011-03-15 13:05:08.955762195 +0530
@@ -869,7 +869,7 @@
 }
 
 /* Return value becomes exitcode. It's okay to not return at all */
-int do_iproute(char **argv)
+int do_iproute(int argc, char **argv)
 {
 	static const char ip_route_commands[] ALIGN1 =
 	/*0-3*/	"add\0""append\0""change\0""chg\0"
diff -Naur busybox-1.17.1.orig/networking/libiproute/iprule.c busybox-1.17.1/networking/libiproute/iprule.c
--- busybox-1.17.1.orig/networking/libiproute/iprule.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/iprule.c	2011-03-15 13:05:08.955762195 +0530
@@ -304,7 +304,7 @@
 }
 
 /* Return value becomes exitcode. It's okay to not return at all */
-int do_iprule(char **argv)
+int do_iprule(int argc, char **argv)
 {
 	static const char ip_rule_commands[] ALIGN1 =
 		"add\0""delete\0""list\0""show\0";
diff -Naur busybox-1.17.1.orig/networking/libiproute/iptunnel.c busybox-1.17.1/networking/libiproute/iptunnel.c
--- busybox-1.17.1.orig/networking/libiproute/iptunnel.c	2011-03-15 13:06:01.320887368 +0530
+++ busybox-1.17.1/networking/libiproute/iptunnel.c	2011-03-15 13:05:08.955762195 +0530
@@ -64,6 +64,35 @@
 ///* PRL flags */
 //#define PRL_DEFAULT 0x0001
 
+
+/* Start of ip6_tunnel */
+#define IPV6_TLV_TNL_ENCAP_LIMIT 4
+#define IPV6_DEFAULT_TNL_ENCAP_LIMIT 4
+
+/* don't add encapsulation limit if one isn't present in inner packet */
+#define IP6_TNL_F_IGN_ENCAP_LIMIT 0x1
+/* copy the traffic class field from the inner packet */
+#define IP6_TNL_F_USE_ORIG_TCLASS 0x2
+/* copy the flowlabel from the inner packet */
+#define IP6_TNL_F_USE_ORIG_FLOWLABEL 0x4
+/* being used for Mobile IPv6 */
+#define IP6_TNL_F_MIP6_DEV 0x8
+/* copy DSCP from the outer packet */
+#define IP6_TNL_F_RCV_DSCP_COPY 0x10
+
+struct ip6_tnl_parm {
+    char name[IFNAMSIZ];    /* name of tunnel device */
+    int link;       /* ifindex of underlying L2 interface */
+    __u8 proto;     /* tunnel protocol */
+    __u8 encap_limit;   /* encapsulation limit for tunnel */
+    __u8 hop_limit;     /* hop limit for tunnel */
+    __u32 flowinfo;    /* traffic class and flowlabel for tunnel */ // FIXME: should be __be32 ?
+    __u32 flags;        /* tunnel flags */
+    struct in6_addr laddr;  /* local tunnel end-point address */
+    struct in6_addr raddr;  /* remote tunnel end-point address */
+};
+/* End of ip6_tunnel */
+
 #include "ip_common.h"  /* #include "libbb.h" is inside */
 #include "rt_names.h"
 #include "utils.h"
@@ -108,7 +137,7 @@
 	return err ? NULL : xstrndup(ifr.ifr_name, sizeof(ifr.ifr_name));
 }
 
-static int do_get_ioctl(const char *basedev, struct ip_tunnel_parm *p)
+static int do_get_ioctl(const char *basedev, void *p)
 {
 	struct ifreq ifr;
 	int fd;
@@ -116,25 +145,27 @@
 
 	strncpy_IFNAMSIZ(ifr.ifr_name, basedev);
 	ifr.ifr_ifru.ifru_data = (void*)p;
-	fd = xsocket(AF_INET, SOCK_DGRAM, 0);
+	fd = xsocket(preferred_family, SOCK_DGRAM, 0);
 	err = ioctl_or_warn(fd, SIOCGETTUNNEL, &ifr);
 	close(fd);
 	return err;
 }
 
 /* Dies on error, otherwise returns 0 */
-static int do_add_ioctl(int cmd, const char *basedev, struct ip_tunnel_parm *p)
+static int do_add_ioctl(int cmd, const char *basedev, const char *name, void *p)
 {
 	struct ifreq ifr;
 	int fd;
 
-	if (cmd == SIOCCHGTUNNEL && p->name[0]) {
-		strncpy_IFNAMSIZ(ifr.ifr_name, p->name);
+/*printf("[%s:%d]\n", __func__, __LINE__); */
+	if (cmd == SIOCCHGTUNNEL && name[0]) {
+/*printf("[%s:%d]\n", __func__, __LINE__); */
+		strncpy_IFNAMSIZ(ifr.ifr_name, name);
 	} else {
 		strncpy_IFNAMSIZ(ifr.ifr_name, basedev);
 	}
 	ifr.ifr_ifru.ifru_data = (void*)p;
-	fd = xsocket(AF_INET, SOCK_DGRAM, 0);
+	fd = xsocket(preferred_family, SOCK_DGRAM, 0);
 #if ENABLE_IOCTL_HEX2STR_ERROR
 	/* #define magic will turn ioctl# into string */
 	if (cmd == SIOCCHGTUNNEL)
@@ -144,23 +175,24 @@
 #else
 	xioctl(fd, cmd, &ifr);
 #endif
+/*printf("[%s:%d]\n", __func__, __LINE__); */
 	close(fd);
 	return 0;
 }
 
 /* Dies on error, otherwise returns 0 */
-static int do_del_ioctl(const char *basedev, struct ip_tunnel_parm *p)
+static int do_del_ioctl(const char *basedev, const char *name, void *p)
 {
 	struct ifreq ifr;
 	int fd;
 
-	if (p->name[0]) {
-		strncpy_IFNAMSIZ(ifr.ifr_name, p->name);
+	if (name[0]) {
+		strncpy_IFNAMSIZ(ifr.ifr_name, name);
 	} else {
 		strncpy_IFNAMSIZ(ifr.ifr_name, basedev);
 	}
 	ifr.ifr_ifru.ifru_data = (void*)p;
-	fd = xsocket(AF_INET, SOCK_DGRAM, 0);
+	fd = xsocket(preferred_family, SOCK_DGRAM, 0);
 	xioctl(fd, SIOCDELTUNNEL, &ifr);
 	close(fd);
 	return 0;
@@ -367,6 +399,7 @@
 {
 	struct ip_tunnel_parm p;
 
+/*printf("[%s:%d]\n", __func__, __LINE__);  */
 	parse_args(argv, cmd, &p);
 
 	if (p.iph.ttl && p.iph.frag_off == 0) {
@@ -375,11 +408,12 @@
 
 	switch (p.iph.protocol) {
 	case IPPROTO_IPIP:
-		return do_add_ioctl(cmd, "tunl0", &p);
+/*printf("[%s:%d]\n", __func__, __LINE__); */
+		return do_add_ioctl(cmd, "tunl0", p.name, &p);
 	case IPPROTO_GRE:
-		return do_add_ioctl(cmd, "gre0", &p);
+		return do_add_ioctl(cmd, "gre0", p.name, &p);
 	case IPPROTO_IPV6:
-		return do_add_ioctl(cmd, "sit0", &p);
+		return do_add_ioctl(cmd, "sit0", p.name, &p);
 	default:
 		bb_error_msg_and_die("can't determine tunnel mode (ipip, gre or sit)");
 	}
@@ -394,13 +428,13 @@
 
 	switch (p.iph.protocol) {
 	case IPPROTO_IPIP:
-		return do_del_ioctl("tunl0", &p);
+		return do_del_ioctl("tunl0", p.name, &p);
 	case IPPROTO_GRE:
-		return do_del_ioctl("gre0", &p);
+		return do_del_ioctl("gre0", p.name, &p);
 	case IPPROTO_IPV6:
-		return do_del_ioctl("sit0", &p);
+		return do_del_ioctl("sit0", p.name, &p);
 	default:
-		return do_del_ioctl(p.name, &p);
+		return do_del_ioctl(p.name, p.name, &p);
 	}
 }
 
@@ -555,20 +589,446 @@
 	return 0;
 }
 
+
+/* start of ip6_tunnel */
+
+#define IP6_FLOWINFO_TCLASS     htonl(0x0FF00000)
+#define IP6_FLOWINFO_FLOWLABEL  htonl(0x000FFFFF)
+
+#define DEFAULT_TNL_HOP_LIMIT   (64)
+
+int strmatches(const char *cmd, const char *pattern)  // FIXME:: Move this to utils.c
+{
+        int len = strlen(cmd);
+        if (len > strlen(pattern))
+                return -1;
+        return memcmp(pattern, cmd, len);
+}
+
+static void usage6(void)
+{
+        fprintf(stderr, "Usage: ip -f inet6 tunnel { add | change | del | show } [ NAME ]\n");
+        fprintf(stderr, "          [ mode { ipip6 } ]\n");
+        fprintf(stderr, "          [ remote ADDR local ADDR ] [ dev PHYS_DEV ]\n");
+        fprintf(stderr, "          [ encaplimit ELIM ]\n");
+        fprintf(stderr ,"          [ hoplimit TTL ] [ tclass TCLASS ] [ flowlabel FLOWLABEL ]\n");
+        fprintf(stderr, "          [ dscp inherit ]\n");
+        fprintf(stderr, "\n");
+        fprintf(stderr, "Where: NAME      := STRING\n");
+        fprintf(stderr, "       ADDR      := IPV6_ADDRESS\n");
+        fprintf(stderr, "       ELIM      := { none | 0..255 }(default=%d)\n",
+                IPV6_DEFAULT_TNL_ENCAP_LIMIT);
+        fprintf(stderr, "       TTL       := 0..255 (default=%d)\n",
+                DEFAULT_TNL_HOP_LIMIT);
+        fprintf(stderr, "       TOS       := { 0x0..0xff | inherit }\n");
+        fprintf(stderr, "       FLOWLABEL := { 0x0..0xfffff | inherit }\n");
+        exit(-1);
+}
+
+static void ip6_tnl_parm_init(struct ip6_tnl_parm *p, int apply_default)
+{
+        memset(p, 0, sizeof(*p));
+        p->proto = IPPROTO_IPV6;
+        if (apply_default) {
+                p->hop_limit = DEFAULT_TNL_HOP_LIMIT;
+                p->encap_limit = IPV6_DEFAULT_TNL_ENCAP_LIMIT;
+        }
+}
+
+static int ip6_tnl_parm_match(const struct ip6_tnl_parm *p1,
+                              const struct ip6_tnl_parm *p2)
+{
+        return ((!p1->link || p1->link == p2->link) &&
+                (!p1->name[0] || strcmp(p1->name, p2->name) == 0) &&
+                (memcmp(&p1->laddr, &in6addr_any, sizeof(p1->laddr)) == 0 ||
+                 memcmp(&p1->laddr, &p2->laddr, sizeof(p1->laddr)) == 0) &&
+                (memcmp(&p1->raddr, &in6addr_any, sizeof(p1->raddr)) == 0 ||
+                 memcmp(&p1->raddr, &p2->raddr, sizeof(p1->raddr)) == 0) &&
+                (!p1->proto || !p2->proto || p1->proto == p2->proto) &&
+                (!p1->encap_limit || p1->encap_limit == p2->encap_limit) &&
+                (!p1->hop_limit || p1->hop_limit == p2->hop_limit) &&
+                (!(p1->flowinfo & IP6_FLOWINFO_TCLASS) ||
+                 !((p1->flowinfo ^ p2->flowinfo) & IP6_FLOWINFO_TCLASS)) &&
+                (!(p1->flowinfo & IP6_FLOWINFO_FLOWLABEL) ||
+                 !((p1->flowinfo ^ p2->flowinfo) & IP6_FLOWINFO_FLOWLABEL)) &&
+                (!p1->flags || (p1->flags & p2->flags)));
+}
+
+static const char *tnl_strproto(__u8 proto)
+{
+        static char buf[16];
+
+        switch (proto) {
+        case IPPROTO_IPIP:
+                strcpy(buf, "ip");
+                break;
+        case IPPROTO_GRE:
+                strcpy(buf, "gre");
+                break;
+        case IPPROTO_IPV6:
+                strcpy(buf, "ipv6");
+                break;
+        case 0:
+                strcpy(buf, "any");
+                break;
+        default:
+                strcpy(buf, "unknown");
+                break;
+        }
+
+        return buf;
+}
+
+static void print_tunnel6(struct ip6_tnl_parm *p)
+{
+        char remote[64];
+        char local[64];
+
+        inet_ntop(AF_INET6, &p->raddr, remote, sizeof(remote));
+        inet_ntop(AF_INET6, &p->laddr, local, sizeof(local));
+
+        printf("%s: %s/ipv6 remote %s local %s",
+               p->name, tnl_strproto(p->proto), remote, local);
+        if (p->link) {
+                char *n = do_ioctl_get_ifname(p->link);
+                if (n) {
+                        printf(" dev %s", n);
+						free(n);
+				}
+        }
+
+        if (p->flags & IP6_TNL_F_IGN_ENCAP_LIMIT)
+                printf(" encaplimit none");
+        else
+                printf(" encaplimit %u", p->encap_limit);
+
+        printf(" hoplimit %u", p->hop_limit);
+
+        if (p->flags & IP6_TNL_F_USE_ORIG_TCLASS)
+                printf(" tclass inherit");
+        else {
+                __u32 val = ntohl(p->flowinfo & IP6_FLOWINFO_TCLASS);
+                printf(" tclass 0x%02x", (__u8)(val >> 20));
+        }
+
+        if (p->flags & IP6_TNL_F_USE_ORIG_FLOWLABEL)
+                printf(" flowlabel inherit");
+        else
+                printf(" flowlabel 0x%05x", ntohl(p->flowinfo & IP6_FLOWINFO_FLOWLABEL));
+
+        printf(" (flowinfo 0x%08x)", ntohl(p->flowinfo));
+
+        if (p->flags & IP6_TNL_F_RCV_DSCP_COPY)
+                printf(" dscp inherit");
+}
+
+static int do_tunnels_list6(struct ip6_tnl_parm *p)
+{
+        char buf[512];
+        int err = -1;
+        FILE *fp = fopen("/proc/net/dev", "r");
+        if (fp == NULL) {
+                perror("fopen");
+                goto end;
+        }
+
+        /* skip two lines at the begenning of the file */
+        fgets(buf, sizeof(buf), fp);
+        fgets(buf, sizeof(buf), fp);
+
+        while (fgets(buf, sizeof(buf), fp) != NULL) {
+                char name[IFNAMSIZ];
+                int ifindex, type;
+                unsigned long rx_bytes, rx_packets, rx_errs, rx_drops,
+                        rx_fifo, rx_frame,
+                        tx_bytes, tx_packets, tx_errs, tx_drops,
+                        tx_fifo, tx_colls, tx_carrier, rx_multi;
+                struct ip6_tnl_parm p1;
+                char *ptr;
+				//char *n;
+
+                buf[sizeof(buf) - 1] = '\0';
+                if ((ptr = strchr(buf, ':')) == NULL ||
+                    (*ptr++ = 0, sscanf(buf, "%s", name) != 1)) {
+                        fprintf(stderr, "Wrong format of /proc/net/dev. Sorry.\n");
+                        goto end;
+                }
+                if (sscanf(ptr, "%ld%ld%ld%ld%ld%ld%ld%*d%ld%ld%ld%ld%ld%ld%ld",
+                           &rx_bytes, &rx_packets, &rx_errs, &rx_drops,
+                           &rx_fifo, &rx_frame, &rx_multi,
+                           &tx_bytes, &tx_packets, &tx_errs, &tx_drops,
+                           &tx_fifo, &tx_colls, &tx_carrier) != 14)
+                        continue;
+                if (p->name[0] && strcmp(p->name, name))
+                        continue;
+                ifindex = do_ioctl_get_ifindex(name);
+                if (ifindex == 0)
+                        continue;
+                type = do_ioctl_get_iftype(name);
+                if (type == -1) {
+                        fprintf(stderr, "Failed to get type of [%s]\n", name);
+                        continue;
+                }
+                if (type != ARPHRD_TUNNEL6)
+                        continue;
+                memset(&p1, 0, sizeof(p1));
+                ip6_tnl_parm_init(&p1, 0);
+                strcpy(p1.name, name);
+                p1.link = do_ioctl_get_ifindex(p1.name);
+                if (p1.link == 0)
+                        continue;
+                if (do_get_ioctl(p1.name, &p1))
+                        continue;
+                if (!ip6_tnl_parm_match(p, &p1))
+                        continue;
+                print_tunnel6(&p1);
+                printf("\n");
+        }
+        err = 0;
+
+ end:
+        if (fp)
+                fclose(fp);
+        return err;
+}
+
+static int parse_args6(int argc, char **argv, struct ip6_tnl_parm *p)
+{
+        char medium[IFNAMSIZ];
+
+        memset(medium, 0, sizeof(medium));
+
+        while (*argv) {
+                if (strcmp(*argv, "mode") == 0) {
+                        NEXT_ARG();
+                        if (strcmp(*argv, "ipv6/ipv6") == 0 ||
+                            strcmp(*argv, "ip6ip6") == 0)
+                                p->proto = IPPROTO_IPV6;
+                        else if (strcmp(*argv, "ip/ipv6") == 0 ||
+                                 strcmp(*argv, "ipv4/ipv6") == 0 ||
+                                 strcmp(*argv, "ipip6") == 0 ||
+                                 strcmp(*argv, "ip4ip6") == 0)
+                                p->proto = IPPROTO_IPIP;
+                        else if (strcmp(*argv, "any/ipv6") == 0 ||
+                                 strcmp(*argv, "any") == 0)
+                                p->proto = 0;
+                        else {
+                                fprintf(stderr,"Cannot guess tunnel mode.\n");
+                                exit(-1);
+                        }
+                } else if (strcmp(*argv, "remote") == 0) {
+                        inet_prefix raddr;
+                        NEXT_ARG();
+                        get_prefix(&raddr, *argv, preferred_family);
+                        if (raddr.family == AF_UNSPEC)
+                                invarg("\"remote\" address family is AF_UNSPEC", *argv);
+                        memcpy(&p->raddr, &raddr.data, sizeof(p->raddr));
+                } else if (strcmp(*argv, "local") == 0) {
+                        inet_prefix laddr;
+                        NEXT_ARG();
+                        get_prefix(&laddr, *argv, preferred_family);
+                        if (laddr.family == AF_UNSPEC)
+                                invarg("\"local\" address family is AF_UNSPEC", *argv);
+                        memcpy(&p->laddr, &laddr.data, sizeof(p->laddr));
+                } else if (strcmp(*argv, "dev") == 0) {
+                        NEXT_ARG();
+                        strncpy(medium, *argv, IFNAMSIZ - 1);
+                } else if (strcmp(*argv, "encaplimit") == 0) {
+                        NEXT_ARG();
+                        if (strcmp(*argv, "none") == 0) {
+                                p->flags |= IP6_TNL_F_IGN_ENCAP_LIMIT;
+                        } else {
+                                __u8 uval;
+                                if (get_u8_base(&uval, *argv, 0) < -1) {
+                                        invarg("invalid ELIM", *argv);
+								}
+                                p->encap_limit = uval;
+                        }
+                } else if (strcmp(*argv, "hoplimit") == 0 ||
+                           strcmp(*argv, "ttl") == 0 ||
+                           strcmp(*argv, "hlim") == 0) {
+                        __u8 uval;
+                        NEXT_ARG();
+                        if (get_u8_base(&uval, *argv, 0))
+                                invarg("invalid TTL", *argv);
+                        p->hop_limit = uval;
+                } else if (strcmp(*argv, "tclass") == 0 ||
+                           strcmp(*argv, "tc") == 0 ||
+                           strcmp(*argv, "tos") == 0 ||
+                           strmatches(*argv, "dsfield") == 0) {
+                        __u8 uval;
+                        NEXT_ARG();
+                        if (strcmp(*argv, "inherit") == 0)
+                                p->flags |= IP6_TNL_F_USE_ORIG_TCLASS;
+                        else {
+                                if (get_u8_base(&uval, *argv, 16)) {
+                                        invarg("invalid TClass", *argv);
+								}
+                                p->flowinfo |= htonl((__u32)uval << 20) & IP6_FLOWINFO_TCLASS;
+                                p->flags &= ~IP6_TNL_F_USE_ORIG_TCLASS;
+                        }
+                } else if (strcmp(*argv, "flowlabel") == 0 ||
+                           strcmp(*argv, "fl") == 0) {
+                        __u32 uval;
+                        NEXT_ARG();
+                        if (strcmp(*argv, "inherit") == 0)
+                                p->flags |= IP6_TNL_F_USE_ORIG_FLOWLABEL;
+                        else {
+                                if (get_u32_base(&uval, *argv, 16))
+                                        invarg("invalid Flowlabel", *argv);
+                                if (uval > 0xFFFFF)
+                                        invarg("invalid Flowlabel", *argv);
+                                p->flowinfo |= htonl(uval) & IP6_FLOWINFO_FLOWLABEL;
+                                p->flags &= ~IP6_TNL_F_USE_ORIG_FLOWLABEL;
+                        }
+                } else if (strcmp(*argv, "dscp") == 0) {
+                        NEXT_ARG();
+                        if (strcmp(*argv, "inherit") != 0)
+                                invarg("not inherit", *argv);
+                        p->flags |= IP6_TNL_F_RCV_DSCP_COPY;
+                } else {
+                        if (strcmp(*argv, "name") == 0) {
+                                NEXT_ARG();
+                        }
+                        if (strmatches(*argv, "help") == 0)
+                                usage6();
+                        if (p->name[0])
+                                duparg2("name", *argv);
+                        strncpy(p->name, *argv, IFNAMSIZ - 1);
+                }
+                argc--; argv++;
+        }
+        if (medium[0]) {
+                p->link = do_ioctl_get_ifindex(medium);
+                if (p->link == 0)
+                        return -1;
+        }
+        return 0;
+}
+
+static int do_show6(int argc, char **argv)
+{
+        struct ip6_tnl_parm p;
+		struct rtnl_handle rth;
+
+        ll_init_map(&rth);
+        ip6_tnl_parm_init(&p, 0);
+        p.proto = 0;  /* default to any */
+
+        if (parse_args6(argc, argv, &p) < 0)
+                return -1;
+
+        if (!p.name[0])
+                do_tunnels_list6(&p);
+        else {
+                if (do_get_ioctl(p.name, &p))
+                        return -1;
+                print_tunnel6(&p);
+                printf("\n");
+        }
+
+        return 0;
+}
+
+
+static int do_del6(int argc, char **argv)
+{
+        struct ip6_tnl_parm p;
+
+        ip6_tnl_parm_init(&p, 1);
+
+        if (parse_args6(argc, argv, &p) < 0)
+                return -1;
+
+        return do_del_ioctl(p.name[0] ? p.name : "ip6tnl0", p.name, &p);
+}
+
+static int do_add6(int cmd, int argc, char **argv)
+{
+    struct ip6_tnl_parm p;
+
+    ip6_tnl_parm_init(&p, 1);
+
+    if (parse_args6(argc, argv, &p) < 0)
+        return -1;
+
+    return do_add_ioctl(cmd,
+                 cmd == SIOCCHGTUNNEL && p.name[0] ?
+                 p.name : "ip6tnl0", p.name, &p);
+}
+
+static int do_ip6tunnel(int argc, char **argv)
+{
+    switch (preferred_family) {
+    case AF_UNSPEC:
+        preferred_family = AF_INET6;
+        break;
+    case AF_INET6:
+        break;
+    default:
+        fprintf(stderr, "Unsupported family:%d\n", preferred_family);
+        exit(-1);
+    }
+
+    if (argc > 0) {
+        if (strmatches(*argv, "add") == 0) {
+            return do_add6(SIOCADDTUNNEL, argc - 1, argv + 1);
+        }
+        if (strmatches(*argv, "change") == 0)
+            return do_add6(SIOCCHGTUNNEL, argc - 1, argv + 1);
+        if (strmatches(*argv, "del") == 0)
+            return do_del6(argc - 1, argv + 1);
+        if (strmatches(*argv, "show") == 0 ||
+            strmatches(*argv, "lst") == 0 ||
+            strmatches(*argv, "list") == 0)
+            return do_show6(argc - 1, argv + 1);
+        if (strmatches(*argv, "help") == 0)
+            usage6();
+    } else
+        return do_show6(0, NULL);
+
+    fprintf(stderr, "Command \"%s\" is unknown, try \"ip -f inet6 tunnel help\".\n", *argv);
+    exit(-1);
+}
+
+
+/* end of ip6_tunnel */
+
+
+
 /* Return value becomes exitcode. It's okay to not return at all */
-int do_iptunnel(char **argv)
+int do_iptunnel(int argc, char **argv)
 {
 	static const char keywords[] ALIGN1 =
 		"add\0""change\0""delete\0""show\0""list\0""lst\0";
 	enum { ARG_add = 0, ARG_change, ARG_del, ARG_show, ARG_list, ARG_lst };
 
+    switch (preferred_family) {
+    case AF_UNSPEC:
+        preferred_family = AF_INET;
+        break;
+    case AF_INET:
+        break;
+    /*
+ 	 * This is silly enough but we have no easy way to make it
+	 * protocol-independent because of unarranged structure between
+	 * IPv4 and IPv6.
+	 */
+    case AF_INET6:
+        return do_ip6tunnel(argc, argv);
+    default:
+        fprintf(stderr, "Unsupported family:%d\n", preferred_family);
+        exit(-1);
+    }
+
 	if (*argv) {
 		smalluint key = index_in_substrings(keywords, *argv);
 		if (key > 5)
 			bb_error_msg_and_die(bb_msg_invalid_arg, *argv, applet_name);
 		argv++;
-		if (key == ARG_add)
+		if (key == ARG_add) {
 			return do_add(SIOCADDTUNNEL, argv);
+		}
 		if (key == ARG_change)
 			return do_add(SIOCCHGTUNNEL, argv);
 		if (key == ARG_del)
diff -Naur busybox-1.17.1.orig/networking/libiproute/utils.c busybox-1.17.1/networking/libiproute/utils.c
--- busybox-1.17.1.orig/networking/libiproute/utils.c	2011-03-15 13:06:01.321887586 +0530
+++ busybox-1.17.1/networking/libiproute/utils.c	2011-03-15 13:05:08.956762426 +0530
@@ -60,6 +60,54 @@
 	invarg(arg, errmsg); /* does not return */
 }
 
+/* ip6_tunnel */
+
+int get_u8_base(__u8 *val, const char *arg, int base)
+{
+        unsigned long res;
+        char *ptr;
+
+        if (!arg || !*arg)
+                return -1;
+        res = strtoul(arg, &ptr, base);
+        if (!ptr || ptr == arg || *ptr || res > 0xFF)
+                return -1;
+        *val = res;
+        return 0;
+}
+
+int get_u16_base(__u16 *val, const char *arg, int base)
+{
+        unsigned long res;
+        char *ptr;
+
+        if (!arg || !*arg)
+                return -1;
+        res = strtoul(arg, &ptr, base);
+        if (!ptr || ptr == arg || *ptr || res > 0xFFFF)
+                return -1;
+        *val = res;
+        return 0;
+}
+
+int get_u32_base(__u32 *val, const char *arg, int base)
+{
+        unsigned long res;
+        char *ptr;
+
+        if (!arg || !*arg)
+                return -1;
+        res = strtoul(arg, &ptr, base);
+        if (!ptr || ptr == arg || *ptr || res > 0xFFFFFFFFUL)
+                return -1;
+        *val = res;
+        return 0;
+}
+
+/**************/
+
+
+
 int get_addr_1(inet_prefix *addr, char *name, int family)
 {
 	memset(addr, 0, sizeof(*addr));
diff -Naur busybox-1.17.1.orig/networking/libiproute/utils.h busybox-1.17.1/networking/libiproute/utils.h
--- busybox-1.17.1.orig/networking/libiproute/utils.h	2011-03-15 13:06:12.591762334 +0530
+++ busybox-1.17.1/networking/libiproute/utils.h	2011-03-15 13:05:12.978887253 +0530
@@ -65,6 +65,9 @@
 extern unsigned get_unsigned(char *arg, const char *errmsg);
 extern uint32_t get_u32(char *arg, const char *errmsg);
 extern uint16_t get_u16(char *arg, const char *errmsg);
+extern int get_u8_base(__u8 *val, const char *arg, int base);
+extern int get_u16_base(__u16 *val, const char *arg, int base);
+extern int get_u32_base(__u32 *val, const char *arg, int base);
 
 extern const char *rt_addr_n2a(int af, void *addr, char *buf, int buflen);
 #ifdef RESOLVE_HOSTNAMES
