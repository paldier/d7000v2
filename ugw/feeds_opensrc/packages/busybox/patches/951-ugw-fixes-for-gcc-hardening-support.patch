--- a/coreutils/df.c
+++ b/coreutils/df.c
@@ -108,7 +108,7 @@ int df_main(int argc UNUSED_PARAM, char 
 	if (!argv[0]) {
 		mount_table = setmntent(bb_path_mtab_file, "r");
 		if (!mount_table)
-			bb_perror_msg_and_die(bb_path_mtab_file);
+			bb_perror_msg_and_die("%s", bb_path_mtab_file);
 	}
 
 	while (1) {
--- a/libbb/copyfd.c
+++ b/libbb/copyfd.c
@@ -66,7 +66,7 @@ static off_t bb_full_fd_action(int src_f
 			break;
 		}
 		if (rd < 0) {
-			bb_perror_msg(bb_msg_read_error);
+			bb_perror_msg("%s", bb_msg_read_error);
 			break;
 		}
 		/* dst_fd == -1 is a fake, else... */
@@ -74,7 +74,7 @@ static off_t bb_full_fd_action(int src_f
 			ssize_t wr = full_write(dst_fd, buffer, rd);
 			if (wr < rd) {
 				if (!continue_on_write_error) {
-					bb_perror_msg(bb_msg_write_error);
+					bb_perror_msg("%s", bb_msg_write_error);
 					break;
 				}
 				dst_fd = -1;
--- a/libbb/create_icmp6_socket.c
+++ b/libbb/create_icmp6_socket.c
@@ -26,8 +26,8 @@ int FAST_FUNC create_icmp6_socket(void)
 #endif
 	if (sock < 0) {
 		if (errno == EPERM)
-			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
-		bb_perror_msg_and_die(bb_msg_can_not_create_raw_socket);
+			bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
+		bb_perror_msg_and_die("%s", bb_msg_can_not_create_raw_socket);
 	}
 
 	/* drop root privs if running setuid */
--- a/libbb/create_icmp_socket.c
+++ b/libbb/create_icmp_socket.c
@@ -25,8 +25,8 @@ int FAST_FUNC create_icmp_socket(void)
 #endif
 	if (sock < 0) {
 		if (errno == EPERM)
-			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
-		bb_perror_msg_and_die(bb_msg_can_not_create_raw_socket);
+			bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
+		bb_perror_msg_and_die("%s", bb_msg_can_not_create_raw_socket);
 	}
 
 	/* drop root privs if running setuid */
--- a/libbb/dump.c
+++ b/libbb/dump.c
@@ -615,7 +615,7 @@ static void display(priv_dumper_t* dumpe
 							printf(pr->fmt, (char *) bp);
 							break;
 						case F_TEXT:
-							printf(pr->fmt);
+							printf("%s", pr->fmt);
 							break;
 						case F_U:
 							conv_u(pr, bp);
@@ -665,7 +665,7 @@ static void display(priv_dumper_t* dumpe
 				printf(pr->fmt, (unsigned) dumper->eaddress);
 				break;
 			case F_TEXT:
-				printf(pr->fmt);
+				printf("%s", pr->fmt);
 				break;
 			}
 		}
--- a/libbb/fflush_stdout_and_exit.c
+++ b/libbb/fflush_stdout_and_exit.c
@@ -16,7 +16,7 @@
 void FAST_FUNC fflush_stdout_and_exit(int retval)
 {
 	if (fflush(stdout))
-		bb_perror_msg_and_die(bb_msg_standard_output);
+		bb_perror_msg_and_die("%s", bb_msg_standard_output);
 
 	if (ENABLE_FEATURE_PREFER_APPLETS && die_sleep < 0) {
 		/* We are in NOFORK applet. Do not exit() directly,
--- a/libbb/wfopen.c
+++ b/libbb/wfopen.c
@@ -43,7 +43,7 @@ static FILE* xfdopen_helper(unsigned fd_
 {
 	FILE* fp = fdopen(fd_and_rw_bit >> 1, fd_and_rw_bit & 1 ? "w" : "r");
 	if (!fp)
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 	return fp;
 }
 FILE* FAST_FUNC xfdopen_for_read(int fd)
--- a/libbb/xfuncs_printf.c
+++ b/libbb/xfuncs_printf.c
@@ -37,7 +37,7 @@ void* FAST_FUNC malloc_or_warn(size_t si
 {
 	void *ptr = malloc(size);
 	if (ptr == NULL && size != 0)
-		bb_error_msg(bb_msg_memory_exhausted);
+		bb_error_msg("%s", bb_msg_memory_exhausted);
 	return ptr;
 }
 
@@ -46,7 +46,7 @@ void* FAST_FUNC xmalloc(size_t size)
 {
 	void *ptr = malloc(size);
 	if (ptr == NULL && size != 0)
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 	return ptr;
 }
 
@@ -57,7 +57,7 @@ void* FAST_FUNC xrealloc(void *ptr, size
 {
 	ptr = realloc(ptr, size);
 	if (ptr == NULL && size != 0)
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 	return ptr;
 }
 #endif /* DMALLOC */
@@ -81,7 +81,7 @@ char* FAST_FUNC xstrdup(const char *s)
 	t = strdup(s);
 
 	if (t == NULL)
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 
 	return t;
 }
@@ -291,14 +291,14 @@ char* FAST_FUNC xasprintf(const char *fo
 	va_end(p);
 
 	if (r < 0)
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 	return string_ptr;
 }
 
 void FAST_FUNC xsetenv(const char *key, const char *value)
 {
 	if (setenv(key, value, 1))
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 }
 
 /* Handles "VAR=VAL" strings, even those which are part of environ
--- a/networking/inetd.c
+++ b/networking/inetd.c
@@ -1413,7 +1413,7 @@ again:
 									sendto(ctrl, ErrMsg, strlen(ErrMsg), 0, &remote_addr, sizeof(remote_addr));
 								}
 								close(ctrl);
-								printf(ErrMsg);
+								printf("%s", ErrMsg);
 								match_found = 1;
 								break;
 							}
--- a/networking/udhcp/arpping.c
+++ b/networking/udhcp/arpping.c
@@ -50,7 +50,7 @@ int FAST_FUNC arpping(uint32_t test_nip,
 
 	s = socket(PF_PACKET, SOCK_PACKET, htons(ETH_P_ARP));
 	if (s == -1) {
-		bb_perror_msg(bb_msg_can_not_create_raw_socket);
+		bb_perror_msg("%s", bb_msg_can_not_create_raw_socket);
 		return -1;
 	}
 
--- a/coreutils/expand.c
+++ b/coreutils/expand.c
@@ -198,7 +198,7 @@ int expand_main(int argc UNUSED_PARAM, c
 	/* Now close stdin also */
 	/* (if we didn't read from it, it's a no-op) */
 	if (fclose(stdin))
-		bb_perror_msg_and_die(bb_msg_standard_input);
+		bb_perror_msg_and_die("%s", bb_msg_standard_input);
 
 	fflush_stdout_and_exit(exit_status);
 }
--- a/coreutils/od_bloaty.c
+++ b/coreutils/od_bloaty.c
@@ -502,7 +502,7 @@ check_and_close(void)
 	}
 
 	if (ferror(stdout)) {
-		bb_error_msg(bb_msg_write_error);
+		bb_error_msg("%s", bb_msg_write_error);
 		ioerror = 1;
 	}
 }
@@ -1423,7 +1423,7 @@ int od_main(int argc, char **argv)
 		dump(n_bytes_to_skip, end_offset);
 
 	if (fclose(stdin) == EOF)
-		bb_perror_msg_and_die(bb_msg_standard_input);
+		bb_perror_msg_and_die("%s", bb_msg_standard_input);
 
 	return ioerror;
 }
--- a/coreutils/tr.c
+++ b/coreutils/tr.c
@@ -307,7 +307,7 @@ int tr_main(int argc UNUSED_PARAM, char 
 			read_chars = safe_read(STDIN_FILENO, str1, TR_BUFSIZ);
 			if (read_chars <= 0) {
 				if (read_chars < 0)
-					bb_perror_msg_and_die(bb_msg_read_error);
+					bb_perror_msg_and_die("%s", bb_msg_read_error);
 				break;
 			}
 			in_index = 0;
--- a/coreutils/uuencode.c
+++ b/coreutils/uuencode.c
@@ -45,7 +45,7 @@ int uuencode_main(int argc UNUSED_PARAM,
 		if (!size)
 			break;
 		if ((ssize_t)size < 0)
-			bb_perror_msg_and_die(bb_msg_read_error);
+			bb_perror_msg_and_die("%s", bb_msg_read_error);
 		/* Encode the buffer we just read in */
 		bb_uuencode(dst_buf, src_buf, size, tbl);
 		bb_putchar('\n');
--- a/mailutils/mail.c
+++ b/mailutils/mail.c
@@ -138,7 +138,7 @@ void FAST_FUNC encode_base64(char *fname
 		if (fname) {
 			size = fread((char *)src_buf, 1, SRC_BUF_SIZE, fp);
 			if ((ssize_t)size < 0)
-				bb_perror_msg_and_die(bb_msg_read_error);
+				bb_perror_msg_and_die("%s", bb_msg_read_error);
 		} else {
 			size = len;
 			if (len > SRC_BUF_SIZE)
@@ -180,7 +180,7 @@ void FAST_FUNC decode_base64(FILE *src_s
 			do {
 				ch = fgetc(src_stream);
 				if (ch == EOF) {
-					bb_error_msg_and_die(bb_msg_read_error);
+					bb_error_msg_and_die("%s", bb_msg_read_error);
 				}
 				// - means end of MIME section
 				if ('-' == ch) {
--- a/networking/zcip.c
+++ b/networking/zcip.c
@@ -461,7 +461,7 @@ int zcip_main(int argc UNUSED_PARAM, cha
 
 			// read ARP packet
 			if (safe_read(sock_fd, &p, sizeof(p)) < 0) {
-				bb_perror_msg_and_die(bb_msg_read_error);
+				bb_perror_msg_and_die("%s", bb_msg_read_error);
 			}
 			if (p.eth.ether_type != htons(ETHERTYPE_ARP))
 				continue;
--- a/sysklogd/logread.c
+++ b/sysklogd/logread.c
@@ -48,7 +48,7 @@ static void error_exit(const char *str)
 {
 	//release all acquired resources
 	shmdt(shbuf);
-	bb_perror_msg_and_die(str);
+	bb_perror_msg_and_die("%s", str);
 }
 
 /*
--- a/coreutils/tail.c
+++ b/coreutils/tail.c
@@ -59,7 +59,7 @@ static ssize_t tail_read(int fd, char *b
 
 	r = full_read(fd, buf, count);
 	if (r < 0) {
-		bb_perror_msg(bb_msg_read_error);
+		bb_perror_msg("%s", bb_msg_read_error);
 		G.status = EXIT_FAILURE;
 	}
 
--- a/util-linux/fdformat.c
+++ b/util-linux/fdformat.c
@@ -101,7 +101,7 @@ int fdformat_main(int argc UNUSED_PARAM,
 			read_bytes = safe_read(fd, data, n);
 			if (read_bytes != n) {
 				if (read_bytes < 0) {
-					bb_perror_msg(bb_msg_read_error);
+					bb_perror_msg("%s", bb_msg_read_error);
 				}
 				bb_error_msg_and_die("problem reading cylinder %d, "
 					"expected %d, read %d", cyl, n, read_bytes);
--- a/archival/bzip2.c
+++ b/archival/bzip2.c
@@ -118,7 +118,7 @@ IF_DESKTOP(long long) int FAST_FUNC comp
 	while (1) {
 		count = full_read(STDIN_FILENO, rbuf, IOBUF_SIZE);
 		if (count < 0) {
-			bb_perror_msg(bb_msg_read_error);
+			bb_perror_msg("%s", bb_msg_read_error);
 			total = -1;
 			break;
 		}
--- a/libbb/mtab.c
+++ b/libbb/mtab.c
@@ -22,7 +22,7 @@ void FAST_FUNC erase_mtab(const char *na
 	/* Bummer. Fall back on trying the /proc filesystem */
 	if (!mountTable) mountTable = setmntent("/proc/mounts", "r");
 	if (!mountTable) {
-		bb_perror_msg(bb_path_mtab_file);
+		bb_perror_msg("%s", bb_path_mtab_file);
 		return;
 	}
 
@@ -50,6 +50,6 @@ void FAST_FUNC erase_mtab(const char *na
 		}
 		endmntent(mountTable);
 	} else if (errno != EROFS)
-		bb_perror_msg(bb_path_mtab_file);
+		bb_perror_msg("%s", bb_path_mtab_file);
 }
 #endif
--- a/shell/ash.c
+++ b/shell/ash.c
@@ -3756,7 +3756,7 @@ sprint_status(char *s, int status, int s
 #endif
 		}
 		st &= 0x7f;
-		col = fmtstr(s, 32, strsignal(st));
+		col = fmtstr(s, 32, "%s", strsignal(st));
 		if (WCOREDUMP(status)) {
 			col += fmtstr(s + col, 16, " (core dumped)");
 		}
--- a/util-linux/mount.c
+++ b/util-linux/mount.c
@@ -477,7 +477,7 @@ static int mount_it_now(struct mntent *m
 	// Abort entirely if permission denied.
 
 	if (rc && errno == EPERM)
-		bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 
 	// If the mount was successful, and we're maintaining an old-style
 	// mtab file by hand, add the new entry to it now.
@@ -1708,7 +1708,7 @@ static int singlemount(struct mntent *mp
 			mp->mnt_fsname = NULL; // will receive malloced loop dev name
 			if (set_loop(&mp->mnt_fsname, loopFile, 0) < 0) {
 				if (errno == EPERM || errno == EACCES)
-					bb_error_msg(bb_msg_perm_denied_are_you_root);
+					bb_error_msg("%s", bb_msg_perm_denied_are_you_root);
 				else
 					bb_perror_msg("can't setup loop device");
 				return errno;
@@ -1892,7 +1892,7 @@ int mount_main(int argc UNUSED_PARAM, ch
 		// argument when we get it.
 		if (argv[1]) {
 			if (nonroot)
-				bb_error_msg_and_die(bb_msg_you_must_be_root);
+				bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 			mtpair->mnt_fsname = argv[0];
 			mtpair->mnt_dir = argv[1];
 			mtpair->mnt_type = fstype;
@@ -1909,7 +1909,7 @@ int mount_main(int argc UNUSED_PARAM, ch
 
 	i = parse_mount_options(cmdopts, NULL); // FIXME: should be "long", not "int"
 	if (nonroot && (i & ~MS_SILENT)) // Non-root users cannot specify flags
-		bb_error_msg_and_die(bb_msg_you_must_be_root);
+		bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 
 	// If we have a shared subtree flag, don't worry about fstab or mtab.
 	if (ENABLE_FEATURE_MOUNT_FLAGS
@@ -1972,7 +1972,7 @@ int mount_main(int argc UNUSED_PARAM, ch
 			// No, mount -a won't mount anything,
 			// even user mounts, for mere humans
 			if (nonroot)
-				bb_error_msg_and_die(bb_msg_you_must_be_root);
+				bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 
 			// Does type match? (NULL matches always)
 			if (!match_fstype(mtcur, fstype))
@@ -2052,7 +2052,7 @@ int mount_main(int argc UNUSED_PARAM, ch
 			// fstab must have "users" or "user"
 			l = parse_mount_options(mtcur->mnt_opts, NULL);
 			if (!(l & MOUNT_USERS))
-				bb_error_msg_and_die(bb_msg_you_must_be_root);
+				bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 		}
 
 		//util-linux-2.12 does not do this check.
--- a/archival/libunarchive/data_extract_to_command.c
+++ b/archival/libunarchive/data_extract_to_command.c
@@ -38,7 +38,7 @@ static const char *const tar_var[] = {
 static void xputenv(char *str)
 {
 	if (putenv(str))
-		bb_error_msg_and_die(bb_msg_memory_exhausted);
+		bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 }
 
 static void str2env(char *env[], int idx, const char *str)
--- a/editors/sed.c
+++ b/editors/sed.c
@@ -848,7 +848,7 @@ static void puts_maybe_newline(char *s, 
 
 	if (ferror(file)) {
 		xfunc_error_retval = 4;  /* It's what gnu sed exits with... */
-		bb_error_msg_and_die(bb_msg_write_error);
+		bb_error_msg_and_die("%s", bb_msg_write_error);
 	}
 	*last_puts_char = lpc;
 }
--- a/miscutils/crontab.c
+++ b/miscutils/crontab.c
@@ -104,7 +104,7 @@ int crontab_main(int argc UNUSED_PARAM, 
 	if (sanitize_env_if_suid()) { /* Clears dangerous stuff, sets PATH */
 		/* Run by non-root */
 		if (opt_ler & (OPT_u|OPT_c))
-			bb_error_msg_and_die(bb_msg_you_must_be_root);
+			bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 	}
 
 	if (opt_ler & OPT_u) {
--- a/shell/hush.c
+++ b/shell/hush.c
@@ -2174,7 +2174,7 @@ static int glob_brace(char *pattern, o_s
 				return o_save_ptr_helper(o, n);
 			}
 			if (gr == GLOB_NOSPACE)
-				bb_error_msg_and_die(bb_msg_memory_exhausted);
+				bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 			/* GLOB_ABORTED? Only happens with GLOB_ERR flag,
 			 * but we didn't specify it. Paranoia again. */
 			bb_error_msg_and_die("glob error %d on '%s'", gr, pattern);
@@ -2276,7 +2276,7 @@ static int o_glob(o_string *o, int n)
 			goto literal;
 		}
 		if (gr == GLOB_NOSPACE)
-			bb_error_msg_and_die(bb_msg_memory_exhausted);
+			bb_error_msg_and_die("%s", bb_msg_memory_exhausted);
 		/* GLOB_ABORTED? Only happens with GLOB_ERR flag,
 		 * but we didn't specify it. Paranoia again. */
 		bb_error_msg_and_die("glob error %d on '%s'", gr, pattern);
--- a/loginutils/addgroup.c
+++ b/loginutils/addgroup.c
@@ -121,7 +121,7 @@ int addgroup_main(int argc UNUSED_PARAM,
 
 	/* need to be root */
 	if (geteuid()) {
-		bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 	}
 #if ENABLE_FEATURE_ADDGROUP_LONG_OPTIONS
 	applet_long_options = addgroup_longopts;
--- a/loginutils/adduser.c
+++ b/loginutils/adduser.c
@@ -119,7 +119,7 @@ int adduser_main(int argc UNUSED_PARAM, 
 
 	/* got root? */
 	if (geteuid()) {
-		bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 	}
 
 	pw.pw_gecos = (char *)"Linux User,,,";
--- a/loginutils/chpasswd.c
+++ b/loginutils/chpasswd.c
@@ -26,7 +26,7 @@ int chpasswd_main(int argc UNUSED_PARAM,
 	int rnd = rnd; /* we *want* it to be non-initialized! */
 
 	if (getuid())
-		bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 
 	opt_complementary = "m--e:e--m";
 	IF_LONG_OPTS(applet_long_options = chpasswd_longopts;)
--- a/loginutils/deluser.c
+++ b/loginutils/deluser.c
@@ -30,7 +30,7 @@ int deluser_main(int argc, char **argv)
 	}
 
 	if (geteuid())
-		bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+		bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 
 	if ((ENABLE_FEATURE_DEL_USER_FROM_GROUP && argc != 3)
 	 || ENABLE_DELUSER
--- a/networking/hostname.c
+++ b/networking/hostname.c
@@ -24,7 +24,7 @@ static void do_sethostname(char *s, int 
 			config_close(parser);
 	} else if (sethostname(s, strlen(s))) {
 //		if (errno == EPERM)
-//			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+//			bb_error_msg_and_die("%s", bb_msg_perm_denied_are_you_root);
 		bb_perror_msg_and_die("sethostname");
 	}
 }
--- a/networking/ntpd.c
+++ b/networking/ntpd.c
@@ -1882,7 +1882,7 @@ static NOINLINE void ntp_init(char **arg
 	srandom(getpid());
 
 	if (getuid())
-		bb_error_msg_and_die(bb_msg_you_must_be_root);
+		bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 
 	/* Set some globals */
 	G.stratum = MAXSTRAT;
--- a/networking/ntpd_simple.c
+++ b/networking/ntpd_simple.c
@@ -830,7 +830,7 @@ static NOINLINE void ntp_init(char **arg
 	srandom(getpid());
 
 	if (getuid())
-		bb_error_msg_and_die(bb_msg_you_must_be_root);
+		bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 
 	peers = NULL;
 	opt_complementary = "dd:p::"; /* d: counter, p: list */
--- a/networking/ping.c
+++ b/networking/ping.c
@@ -340,7 +340,7 @@ static void sendping_tail(void (*sp)(int
 	 * it doesn't matter */
 	sz = xsendto(pingsock, pkt, size_pkt, &pingaddr.sa, sizeof(pingaddr));
 	if (sz != size_pkt)
-		bb_error_msg_and_die(bb_msg_write_error);
+		bb_error_msg_and_die("%s", bb_msg_write_error);
 
 	if (pingcount == 0 || deadline || ntransmitted < pingcount) {
 		/* Didn't send all pings yet - schedule next in 1s */
--- a/networking/tcpudp.c
+++ b/networking/tcpudp.c
@@ -238,7 +238,7 @@ int tcpudpsvd_main(int argc UNUSED_PARAM
 	client = 0;
 	if ((getuid() == 0) && !(opts & OPT_u)) {
 		xfunc_exitcode = 100;
-		bb_error_msg_and_die(bb_msg_you_must_be_root);
+		bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 	}
 	if (opts & OPT_u)
 		if (!uidgid_get(&sslugid, ssluser, 1)) {
--- a/networking/traceroute.c
+++ b/networking/traceroute.c
@@ -836,7 +836,7 @@ common_traceroute_main(int op, char **ar
 		 * probe (e.g., on a multi-homed host).
 		 */
 		if (getuid() != 0)
-			bb_error_msg_and_die(bb_msg_you_must_be_root);
+			bb_error_msg_and_die("%s", bb_msg_you_must_be_root);
 	}
 	if (op & OPT_WAITTIME)
 		waittime = xatou_range(waittime_str, 1, 24 * 60 * 60);
--- a/networking/wget.c
+++ b/networking/wget.c
@@ -474,7 +474,7 @@ static void NOINLINE retrieve_file_data(
 			if (n <= 0) {
 				if (ferror(dfp)) {
 					/* perror will not work: ferror doesn't set errno */
-					bb_error_msg_and_die(bb_msg_read_error);
+					bb_error_msg_and_die("%s", bb_msg_read_error);
 				}
 				break;
 			}
--- a/archival/libunarchive/decompress_unxz.c
+++ b/archival/libunarchive/decompress_unxz.c
@@ -73,7 +73,7 @@ unpack_xz_stream(int src_fd, int dst_fd)
 		if (iobuf.in_pos == iobuf.in_size) {
 			int rd = safe_read(src_fd, membuf, BUFSIZ);
 			if (rd < 0) {
-				bb_error_msg(bb_msg_read_error);
+				bb_error_msg("%s", bb_msg_read_error);
 				total = -1;
 				break;
 			}
--- a/archival/libunarchive/decompress_unzip.c
+++ b/archival/libunarchive/decompress_unzip.c
@@ -1073,7 +1073,7 @@ static int top_up(STATE_PARAM unsigned n
 		bytebuffer_offset = 0;
 		bytebuffer_size = full_read(gunzip_src_fd, &bytebuffer[count], bytebuffer_max - count);
 		if ((int)bytebuffer_size < 0) {
-			bb_error_msg(bb_msg_read_error);
+			bb_error_msg("%s", bb_msg_read_error);
 			return 0;
 		}
 		bytebuffer_size += count;
