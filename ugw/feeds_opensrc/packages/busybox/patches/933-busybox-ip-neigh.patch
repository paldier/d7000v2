diff -Naur busybox-1.17.1_orig/include/usage.src.h busybox-1.17.1_modified/include/usage.src.h
--- busybox-1.17.1_orig/include/usage.src.h	2011-09-14 12:35:48.647767337 +0530
+++ busybox-1.17.1_modified/include/usage.src.h	2011-09-19 20:22:36.073642177 +0530
@@ -2077,6 +2077,7 @@
 	IF_FEATURE_IP_LINK("link | ") \
 	IF_FEATURE_IP_TUNNEL("tunnel | ") \
 	IF_FEATURE_IP_RULE("rule") \
+	IF_FEATURE_IP_NEIGHBOR("neigh") \
        "} {COMMAND}"
 #define ip_full_usage "\n\n" \
        "ip [OPTIONS] OBJECT {COMMAND}\n" \
@@ -2086,6 +2087,7 @@
 	IF_FEATURE_IP_LINK("link | ") \
 	IF_FEATURE_IP_TUNNEL("tunnel | ") \
 	IF_FEATURE_IP_RULE("rule") \
+	IF_FEATURE_IP_NEIGHBOR("neigh") \
        "}\n" \
        "OPTIONS := { -f[amily] { inet | inet6 | link } | -o[neline] }" \
 
@@ -2194,6 +2196,17 @@
        "	[[i|o]seq] [[i|o]key KEY] [[i|o]csum]\n" \
        "	[ttl TTL] [tos TOS] [[no]pmtudisc] [dev PHYS_DEV]" \
 
+#define ipneigh_trivial_usage \
+       "{ add | del | change | replace } { ADDR [ lladdr LLADDR ]\n" \
+       "        [ nud { permanent | noarp | stale | reachable } ]\n" \
+       "        | proxy ADDR } [ dev DEV ]\n" \
+       "        ip neigh {show|flush} [ to PREFIX ] [ dev DEV ] [ nud STATE ]"
+#define ipneigh_full_usage \
+       "ipneigh { add | del | change | replace } { ADDR [ lladdr LLADDR ]\n" \
+       "        [ nud { permanent | noarp | stale | reachable } ]\n" \
+       "        | proxy ADDR } [ dev DEV ]\n" \
+       "        ipneigh {show|flush} [ to PREFIX ] [ dev DEV ] [ nud STATE ]"
+
 #define kbd_mode_trivial_usage \
        "[-a|k|s|u] [-C TTY]"
 #define kbd_mode_full_usage "\n\n" \
diff -Naur busybox-1.17.1_orig/networking/Config.src busybox-1.17.1_modified/networking/Config.src
--- busybox-1.17.1_orig/networking/Config.src	2011-09-14 12:35:49.427641857 +0530
+++ busybox-1.17.1_modified/networking/Config.src	2011-09-14 15:34:37.843661688 +0530
@@ -533,6 +533,13 @@
 	help
 	  Add support for rule commands to "ip".
 
+config FEATURE_IP_NEIGHBOR
+        bool "ip neighbor"
+        default y
+        depends on IP
+        help
+          Add support for neighbor commands to "ip".
+
 config FEATURE_IP_SHORT_FORMS
 	bool "Support short forms of ip commands"
 	default y
@@ -544,6 +551,7 @@
 	  ip route  -> iproute
 	  ip tunnel -> iptunnel
 	  ip rule   -> iprule
+	  ip neighbor  -> ipneighbor
 
 	  Say N unless you desparately need the short form of the ip
 	  object commands.
@@ -583,6 +591,11 @@
 	default y
 	depends on FEATURE_IP_SHORT_FORMS && FEATURE_IP_RULE
 
+config IPNEIGHBOR
+        bool
+        default y
+        depends on FEATURE_IP_SHORT_FORMS && FEATURE_IP_NEIGHBOR
+
 config IPCALC
 	bool "ipcalc"
 	default y
diff -Naur busybox-1.17.1_orig/networking/ip.c busybox-1.17.1_modified/networking/ip.c
--- busybox-1.17.1_orig/networking/ip.c	2011-09-14 12:35:49.337641754 +0530
+++ busybox-1.17.1_modified/networking/ip.c	2011-09-14 16:48:53.618767039 +0530
@@ -20,7 +20,8 @@
  || ENABLE_FEATURE_IP_ROUTE \
  || ENABLE_FEATURE_IP_LINK \
  || ENABLE_FEATURE_IP_TUNNEL \
- || ENABLE_FEATURE_IP_RULE
+ || ENABLE_FEATURE_IP_RULE \
+ || ENABLE_FEATURE_IP_NEIGHBOR
 
 static int ip_print_help(char **argv UNUSED_PARAM)
 {
@@ -71,6 +72,13 @@
 	return ip_do(do_iptunnel, argc, argv);
 }
 #endif
+#if ENABLE_FEATURE_IP_NEIGHBOR
+int ipneigh_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
+int ipneigh_main(int argc, char **argv)
+{
+    return ip_do(do_ipneigh, argc, argv);
+}
+#endif
 
 
 int ip_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
@@ -84,6 +92,9 @@
 		IF_FEATURE_IP_TUNNEL("tunnel\0")
 		IF_FEATURE_IP_TUNNEL("tunl\0")
 		IF_FEATURE_IP_RULE("rule\0")
+		IF_FEATURE_IP_NEIGHBOR("neigh\0")
+        IF_FEATURE_IP_NEIGHBOR("neighbor\0")
+        IF_FEATURE_IP_NEIGHBOR("neighbour\0")
 		;
 	static const ip_func_ptr_t ip_func_ptrs[] = {
 		ip_print_help,
@@ -94,6 +105,9 @@
 		IF_FEATURE_IP_TUNNEL(do_iptunnel,)
 		IF_FEATURE_IP_TUNNEL(do_iptunnel,)
 		IF_FEATURE_IP_RULE(do_iprule,)
+		IF_FEATURE_IP_NEIGHBOR(do_ipneigh,)
+		IF_FEATURE_IP_NEIGHBOR(do_ipneigh,)
+		IF_FEATURE_IP_NEIGHBOR(do_ipneigh,)
 	};
 	ip_func_ptr_t ip_func;
 	int key;
diff -Naur busybox-1.17.1_orig/networking/libiproute/ip_common.h busybox-1.17.1_modified/networking/libiproute/ip_common.h
--- busybox-1.17.1_orig/networking/libiproute/ip_common.h	2011-09-14 12:35:49.323641827 +0530
+++ busybox-1.17.1_modified/networking/libiproute/ip_common.h	2011-09-16 13:34:01.580642045 +0530
@@ -16,7 +16,7 @@
 PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDDEN
 
 extern char **ip_parse_common_args(int *argc, char **argv);
-extern int print_neigh(struct sockaddr_nl *who, struct nlmsghdr *n, void *arg);
+extern int print_neigh(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg);
 extern int ipaddr_list_or_flush(char **argv, int flush);
 extern int iproute_monitor(char **argv);
 extern void iplink_usage(void) NORETURN;
@@ -25,7 +25,7 @@
 extern int do_ipaddr(int argc, char **argv);
 extern int do_iproute(int argc, char **argv);
 extern int do_iprule(int argc, char **argv);
-extern int do_ipneigh(char **argv);
+extern int do_ipneigh(int argc, char **argv);
 extern int do_iptunnel(int argc, char **argv);
 extern int do_iplink(char **argv);
 extern int do_ipmonitor(char **argv);
diff -Naur busybox-1.17.1_orig/networking/libiproute/ipneigh.c busybox-1.17.1_modified/networking/libiproute/ipneigh.c
--- busybox-1.17.1_orig/networking/libiproute/ipneigh.c	1970-01-01 05:30:00.000000000 +0530
+++ busybox-1.17.1_modified/networking/libiproute/ipneigh.c	2011-09-19 19:17:54.956767108 +0530
@@ -0,0 +1,487 @@
+/*
+* ipneigh.c            "ip neigh".
+*
+*              This program is free software; you can redistribute it and/or
+*              modify it under the terms of the GNU General Public License
+*              as published by the Free Software Foundation; either version
+*              2 of the License, or (at your option) any later version.
+*
+* Authors:     Alexey Kuznetsov, <kuznet@ms2.inr.ac.ru>
+*
+* Changes are done by:
+* Somnath Panja <somnath.panja@alumnux.in, panja.external@lantiq.com>
+*
+*/
+
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <sys/time.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netinet/ip.h>
+#include "ip_common.h"
+#include "rt_names.h"
+#include "utils.h"
+
+#define NUD_VALID       (NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE|NUD_PROBE|NUD_STALE|NUD_DELAY)
+#define MAX_ROUNDS      10
+
+static struct
+{
+        int family;
+        int index;
+        int state;
+        int unused_only;
+        inet_prefix pfx;
+        int flushed;
+        char *flushb;
+        int flushp;
+        int flushe;
+} filter;
+
+static void usage_neigh(void) __attribute__((noreturn));
+
+static void usage_neigh(void)
+{
+        fprintf(stderr, "Usage: ip neigh { add | del | change | replace } { ADDR [ lladdr LLADDR ]\n"
+                        "          [ nud { permanent | noarp | stale | reachable } ]\n"
+                        "          | proxy ADDR } [ dev DEV ]\n");
+        fprintf(stderr, "       ip neigh {show|flush} [ to PREFIX ] [ dev DEV ] [ nud STATE ]\n");
+        exit(-1);
+}
+
+int matches(const char *cmd, const char *pattern)
+{
+        int len = strlen(cmd);
+        if (len > strlen(pattern))
+                return -1;
+        return memcmp(pattern, cmd, len);
+}
+
+int get_unsigned_neigh(unsigned *val, const char *arg, int base)
+{
+        unsigned long res;
+        char *ptr;
+
+        if (!arg || !*arg)
+                return -1;
+        res = strtoul(arg, &ptr, base);
+        if (!ptr || ptr == arg || *ptr || res > UINT_MAX)
+                return -1;
+        *val = res;
+        return 0;
+}
+
+int nud_state_a2n(unsigned *state, char *arg)
+{
+        if (matches(arg, "permanent") == 0)
+                *state = NUD_PERMANENT;
+        else if (matches(arg, "reachable") == 0)
+                *state = NUD_REACHABLE;
+        else if (strcmp(arg, "noarp") == 0)
+                *state = NUD_NOARP;
+        else if (strcmp(arg, "none") == 0)
+                *state = NUD_NONE;
+        else if (strcmp(arg, "stale") == 0)
+                *state = NUD_STALE;
+        else if (strcmp(arg, "incomplete") == 0)
+                *state = NUD_INCOMPLETE;
+        else if (strcmp(arg, "delay") == 0)
+                *state = NUD_DELAY;
+        else if (strcmp(arg, "probe") == 0)
+                *state = NUD_PROBE;
+        else if (matches(arg, "failed") == 0)
+                *state = NUD_FAILED;
+        else {
+                if (get_unsigned_neigh(state, arg, 0))
+                        return -1;
+                if (*state>=0x100 || (*state&((*state)-1)))
+                        return -1;
+        }
+        return 0;
+}
+
+static int flush_update(void)
+{
+        if (rtnl_send_check(&rth, filter.flushb, filter.flushp) < 0) {
+                perror("Failed to send flush request");
+                return -1;
+        }
+        filter.flushp = 0;
+        return 0;
+}
+
+static int ipneigh_modify(int cmd, int flags, int argc, char **argv)
+{
+        struct {
+                struct nlmsghdr         n;
+                struct ndmsg            ndm;
+                char                    buf[256];
+        } req;
+        char  *d = NULL;
+        int dst_ok = 0;
+        int lladdr_ok = 0;
+        char * lla = NULL;
+        inet_prefix dst;
+
+	memset(&req, 0, sizeof(req));
+	req.n.nlmsg_len = NLMSG_LENGTH(sizeof(struct ndmsg));
+	req.n.nlmsg_flags = NLM_F_REQUEST|flags;
+	req.n.nlmsg_type = cmd;
+	req.ndm.ndm_family = preferred_family;
+	req.ndm.ndm_state = NUD_PERMANENT;
+
+	while (argc > 0) {
+		if (matches(*argv, "lladdr") == 0) {
+			NEXT_ARG();
+			argc--;
+			if (lladdr_ok)
+				duparg("lladdr", *argv);
+			lla = *argv;
+			lladdr_ok = 1;
+		} else if (strcmp(*argv, "nud") == 0) {
+			unsigned state;
+			NEXT_ARG();
+			argc--;
+			if (nud_state_a2n(&state, *argv))
+				invarg("nud state is bad", *argv);
+			req.ndm.ndm_state = state;
+		} else if (matches(*argv, "proxy") == 0) {
+			NEXT_ARG();
+			argc--;
+			if (matches(*argv, "help") == 0)
+				usage_neigh();
+			if (dst_ok)
+				duparg("address", *argv);
+			get_addr(&dst, *argv, preferred_family);
+			dst_ok = 1;
+			req.ndm.ndm_flags |= NTF_PROXY;
+		} else if (strcmp(*argv, "dev") == 0) {
+			NEXT_ARG();
+			argc--;
+			d = *argv;
+		} else {
+			if (strcmp(*argv, "to") == 0) {
+				NEXT_ARG();
+				argc--;
+			}
+			if (matches(*argv, "help") == 0) {
+				NEXT_ARG();
+				argc--;
+			}
+			if (dst_ok)
+				duparg2("to", *argv);
+			get_addr(&dst, *argv, preferred_family);
+			dst_ok = 1;
+		}
+		argc--; argv++;
+	}
+	if (d == NULL || !dst_ok || dst.family == AF_UNSPEC) {
+		fprintf(stderr, "Device and destination are required arguments.\n");
+		exit(-1);
+	}
+	req.ndm.ndm_family = dst.family;
+	addattr_l(&req.n, sizeof(req), NDA_DST, &dst.data, dst.bytelen); //FIX ME
+	if (lla && strcmp(lla, "null")) {
+		char llabuf[20];
+		int l;
+		
+		l = ll_addr_a2n(llabuf, sizeof(llabuf), lla);
+		addattr_l(&req.n, sizeof(req), NDA_LLADDR, llabuf, l);   //FIX ME
+	}
+
+	ll_init_map(&rth);
+	
+	//if ((req.ndm.ndm_ifindex = ll_name_to_index(d)) == 0) {
+	if ((req.ndm.ndm_ifindex = (unsigned)xll_name_to_index(d)) == 0) {
+		fprintf(stderr, "Cannot find device \"%s\"\n", d);
+		return -1;
+	}
+
+	if (rtnl_talk(&rth, &req.n, 0, 0, NULL, NULL, NULL) < 0)
+		exit(2);
+
+	return 0;
+}
+
+int print_neigh(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg)
+{
+	FILE *fp = (FILE*)arg;
+	struct ndmsg *r = NLMSG_DATA(n);
+	int len = n->nlmsg_len;
+	struct rtattr * tb[NDA_MAX+1];
+	char abuf[256];
+
+	if (n->nlmsg_type != RTM_NEWNEIGH && n->nlmsg_type != RTM_DELNEIGH) {
+		fprintf(stderr, "Not RTM_NEWNEIGH: %08x %08x %08x\n",
+			n->nlmsg_len, n->nlmsg_type, n->nlmsg_flags);
+			return 0;
+	}
+	len -= NLMSG_LENGTH(sizeof(*r));
+	if (len < 0) {
+		fprintf(stderr, "BUG: wrong nlmsg len %d\n", len);
+		return -1;
+	}
+	if (filter.flushb && n->nlmsg_type != RTM_NEWNEIGH)
+		return 0;
+	if (filter.family && filter.family != r->ndm_family)
+		return 0;
+	if (filter.index && filter.index != r->ndm_ifindex)
+		return 0;
+        if (!(filter.state&r->ndm_state) &&
+            (r->ndm_state || !(filter.state&0x100)) &&
+             (r->ndm_family != AF_DECnet))
+                return 0;
+	
+	memset(tb, 0, sizeof(struct rtattr *) * (NDA_MAX + 1));
+	parse_rtattr(tb, NDA_MAX, NDA_RTA(r), n->nlmsg_len - NLMSG_LENGTH(sizeof(*r)));
+
+	if (tb[NDA_DST]) {
+		if (filter.pfx.family) {
+			inet_prefix dst;
+			memset(&dst, 0, sizeof(dst));
+			dst.family = r->ndm_family;
+			memcpy(&dst.data, RTA_DATA(tb[NDA_DST]), RTA_PAYLOAD(tb[NDA_DST]));
+			if (inet_addr_match(&dst, &filter.pfx, filter.pfx.bitlen))
+				return 0;
+		}
+	}
+	if (filter.unused_only && tb[NDA_CACHEINFO]) {
+		struct nda_cacheinfo *ci = RTA_DATA(tb[NDA_CACHEINFO]);
+		if (ci->ndm_refcnt)
+			return 0;
+	}
+	if (filter.flushb) {
+		struct nlmsghdr *fn;
+		if (NLMSG_ALIGN(filter.flushp) + n->nlmsg_len > filter.flushe) {
+			if (flush_update())
+				return -1;
+		}
+		fn = (struct nlmsghdr*)(filter.flushb + NLMSG_ALIGN(filter.flushp));
+		memcpy(fn, n, n->nlmsg_len);
+		fn->nlmsg_type = RTM_DELNEIGH;
+		fn->nlmsg_flags = NLM_F_REQUEST;
+		fn->nlmsg_seq = ++rth.seq;
+		filter.flushp = (((char*)fn) + n->nlmsg_len) - filter.flushb;
+		filter.flushed++;
+		if (show_stats < 2)
+			return 0;
+	}
+        if (tb[NDA_DST]) {
+                fprintf(fp, "%s ",
+                        format_host(r->ndm_family,
+                                    RTA_PAYLOAD(tb[NDA_DST]),
+                                    RTA_DATA(tb[NDA_DST]),
+                                    abuf, sizeof(abuf)));
+        }
+	if (!filter.index && r->ndm_ifindex)
+		fprintf(fp, "dev %s ", ll_index_to_name(r->ndm_ifindex));
+	if (tb[NDA_LLADDR]) {
+		SPRINT_BUF(b1);
+                fprintf(fp, "lladdr %s", ll_addr_n2a(RTA_DATA(tb[NDA_LLADDR]),
+                                              RTA_PAYLOAD(tb[NDA_LLADDR]),
+                                              ll_index_to_type(r->ndm_ifindex),
+                                              b1, sizeof(b1))); //FIX ME
+	}
+        if (r->ndm_flags & NTF_ROUTER) {
+                fprintf(fp, " router");
+        }
+	if (tb[NDA_CACHEINFO] && show_stats) {
+		struct nda_cacheinfo *ci = RTA_DATA(tb[NDA_CACHEINFO]);
+		int hz = get_user_hz();
+		
+                if (ci->ndm_refcnt)
+                        printf(" ref %d", ci->ndm_refcnt);
+                fprintf(fp, " used %d/%d/%d", ci->ndm_used/hz,
+                       ci->ndm_confirmed/hz, ci->ndm_updated/hz);
+        }
+#ifdef NDA_PROBES
+        if (tb[NDA_PROBES] && show_stats) {
+                __u32 p = *(__u32 *) RTA_DATA(tb[NDA_PROBES]);
+                fprintf(fp, " probes %u", p);
+        }
+#endif
+        if (r->ndm_state) {
+                int nud = r->ndm_state;
+                fprintf(fp, " ");
+#define PRINT_FLAG(f) if (nud & NUD_##f) { \
+        nud &= ~NUD_##f; fprintf(fp, #f "%s", nud ? "," : ""); }
+                PRINT_FLAG(INCOMPLETE);
+                PRINT_FLAG(REACHABLE);
+                PRINT_FLAG(STALE);
+                PRINT_FLAG(DELAY);
+                PRINT_FLAG(PROBE);
+                PRINT_FLAG(FAILED);
+                PRINT_FLAG(NOARP);
+                PRINT_FLAG(PERMANENT);
+#undef PRINT_FLAG
+        }
+        fprintf(fp, "\n");
+
+        fflush(fp);
+        return 0;		
+}
+
+void ipneigh_reset_filter()
+{
+        memset(&filter, 0, sizeof(filter));
+        filter.state = ~0;
+}
+
+int do_show_or_flush(int argc, char **argv, int flush)
+{
+	char *filter_dev = NULL;
+	int state_given = 0;
+		
+	ipneigh_reset_filter();
+
+	if (!filter.family)
+		filter.family = preferred_family;
+
+	if (flush) {
+		if (argc <= 0) {
+			fprintf(stderr, "Flush requires arguments.\n");
+			return -1;
+		}
+		filter.state = ~(NUD_PERMANENT|NUD_NOARP);
+	} else
+		filter.state = 0xFF & ~NUD_NOARP;
+
+	while (argc > 0) {
+		if (strcmp(*argv, "dev") == 0) {
+			NEXT_ARG();
+			argc--;
+			if (filter_dev)
+				duparg("dev", *argv);
+			filter_dev = *argv;
+		} else if (strcmp(*argv, "unused") == 0) {
+			filter.unused_only = 1;
+		} else if (strcmp(*argv, "nud") == 0) {
+			unsigned state;
+			NEXT_ARG();
+			argc--;
+			if (!state_given) {
+				state_given = 1;
+				filter.state = 0;
+			}
+			if (nud_state_a2n(&state, *argv)) {
+				if (strcmp(*argv, "all") != 0)
+					invarg("nud state is bad", *argv);
+				state = ~0;
+				if (flush)
+					state &= ~NUD_NOARP;
+			}
+			if (state == 0)
+				state = 0x100;
+			filter.state |= state;
+		} else {
+			if (strcmp(*argv, "to") == 0) {
+				NEXT_ARG();
+				argc--;
+			}
+			if (matches(*argv, "help") == 0)
+				usage_neigh();
+			get_prefix(&filter.pfx, *argv, filter.family);
+			if (filter.family == AF_UNSPEC)
+				filter.family = filter.pfx.family;
+		}
+		argc--; argv++;
+	}
+	
+	ll_init_map(&rth);
+
+	if (filter_dev) {
+		if ((filter.index = xll_name_to_index(filter_dev)) == 0) {			
+			fprintf(stderr, "Cannot find device \"%s\"\n", filter_dev);
+			return -1;
+		}
+	}
+
+	if (flush) {
+		int round = 0;
+		char flushb[4096-512];
+		
+		filter.flushb = flushb;
+		filter.flushp = 0;
+		filter.flushe = sizeof(flushb);
+		filter.state &= ~NUD_FAILED;
+
+		while (round < MAX_ROUNDS) {
+			if (xrtnl_wilddump_request(&rth, filter.family, RTM_GETNEIGH) < 0) {
+				perror("Cannot send dump request");
+				exit(1);
+			}
+			filter.flushed = 0;
+			if (xrtnl_dump_filter(&rth, print_neigh, stdout) < 0) {  //verify
+				fprintf(stderr, "Flush terminated\n");
+				exit(1);
+			}
+			if (filter.flushed == 0) {
+				if (show_stats) {
+					if (round == 0)
+						printf("Nothing to flush.\n");
+					else
+						printf("*** Flush is complete after %d round%s ***\n", round, round>1?"s":"");
+				}
+				fflush(stdout);
+				return 0;
+			}
+			round++;
+                        if (flush_update() < 0)
+                                exit(1);
+                        if (show_stats) {
+                                printf("\n*** Round %d, deleting %d entries ***\n", round, filter.flushed);
+                                fflush(stdout);
+                        }
+                }
+                printf("*** Flush not complete bailing out after %d rounds\n",
+                        MAX_ROUNDS);
+                return 1;
+        }
+        if (xrtnl_wilddump_request(&rth, filter.family, RTM_GETNEIGH) < 0) {
+                perror("Cannot send dump request");
+                exit(1);
+        }
+        if (xrtnl_dump_filter(&rth, print_neigh, stdout) < 0) {  //verify
+                fprintf(stderr, "Dump terminated\n");
+                exit(1);
+        }
+
+        return 0;
+}
+
+int do_ipneigh(int argc, char **argv)
+{
+	if (xrtnl_open(&rth) < 0)
+		exit(1);
+	if (argc > 0) {
+		if (matches(*argv, "add") == 0)		
+			return ipneigh_modify(RTM_NEWNEIGH, NLM_F_CREATE|NLM_F_EXCL, argc-1, argv+1);
+		if (matches(*argv, "change") == 0 ||
+			strcmp(*argv, "chg") == 0)
+			return ipneigh_modify(RTM_NEWNEIGH, NLM_F_REPLACE, argc-1, argv+1);
+		if (matches(*argv, "replace") == 0)
+			return ipneigh_modify(RTM_NEWNEIGH, NLM_F_CREATE|NLM_F_REPLACE, argc-1, argv+1);
+		if (matches(*argv, "delete") == 0)
+			return ipneigh_modify(RTM_DELNEIGH, 0, argc-1, argv+1);
+		if (matches(*argv, "get") == 0) {
+			fprintf(stderr, "Sorry, \"neigh get\" is not implemented :-(\n");
+			return -1;
+		}
+		if (matches(*argv, "show") == 0 ||
+			matches(*argv, "lst") == 0 ||
+			matches(*argv, "list") == 0)
+				return do_show_or_flush(argc-1, argv+1, 0);
+		if (matches(*argv, "flush") == 0)
+			return do_show_or_flush(argc-1, argv+1, 1);
+		if (matches(*argv, "help") == 0)
+			usage_neigh();
+	} else
+		return do_show_or_flush(0, NULL, 0);
+	fprintf(stderr, "Command \"%s\" is unknown, try \"ip neigh help\".\n", *argv);
+	rtnl_close(&rth);
+	exit(-1);		
+}
diff -Naur busybox-1.17.1_orig/networking/libiproute/ip_parse_common_args.c busybox-1.17.1_modified/networking/libiproute/ip_parse_common_args.c
--- busybox-1.17.1_orig/networking/libiproute/ip_parse_common_args.c	2011-09-14 12:35:49.322642057 +0530
+++ busybox-1.17.1_modified/networking/libiproute/ip_parse_common_args.c	2011-09-16 13:11:52.050641940 +0530
@@ -19,9 +19,12 @@
 #include "utils.h"
 
 family_t preferred_family = AF_UNSPEC;
+smallint show_stats = 0;
 smallint oneline;
 char _SL_;
 
+struct rtnl_handle rth = { .fd = -1 };
+
 char **ip_parse_common_args(int *argc, char **argv)
 {
 	static const char ip_common_commands[] ALIGN1 =
diff -Naur busybox-1.17.1_orig/networking/libiproute/Kbuild.src busybox-1.17.1_modified/networking/libiproute/Kbuild.src
--- busybox-1.17.1_orig/networking/libiproute/Kbuild.src	2011-09-14 12:35:49.322642057 +0530
+++ busybox-1.17.1_modified/networking/libiproute/Kbuild.src	2011-09-15 21:11:55.511676111 +0530
@@ -64,3 +64,13 @@
 	iprule.o \
 	rt_names.o \
 	utils.o
+
+lib-$(CONFIG_FEATURE_IP_NEIGHBOR) += \
+        ip_parse_common_args.o \
+        ipneigh.o \
+	libnetlink.o \
+	ll_addr.o \
+	ll_map.o \
+        rt_names.o \
+        utils.o
+
diff -Naur busybox-1.17.1_orig/networking/libiproute/libnetlink.c busybox-1.17.1_modified/networking/libiproute/libnetlink.c
--- busybox-1.17.1_orig/networking/libiproute/libnetlink.c	2011-09-14 12:35:49.321333459 +0530
+++ busybox-1.17.1_modified/networking/libiproute/libnetlink.c	2011-09-19 19:14:09.705767142 +0530
@@ -13,6 +13,8 @@
 
 #include <sys/socket.h>
 #include <sys/uio.h>
+#include <errno.h>
+#include <sys/types.h>
 
 #include "libbb.h"
 #include "libnetlink.h"
@@ -410,3 +412,36 @@
 	}
 	return 0;
 }
+
+int FAST_FUNC rtnl_send_check(struct rtnl_handle *rth, const char *buf, int len)
+{
+        struct nlmsghdr *h;
+        int status;
+        char resp[1024];
+
+        status = send(rth->fd, buf, len, 0);
+        if (status < 0)
+                return status;
+
+        /* Check for immediate errors */
+        status = recv(rth->fd, resp, sizeof(resp), MSG_DONTWAIT|MSG_PEEK);
+        if (status < 0) {
+                if (errno == EAGAIN)
+                        return 0;
+                return -1;
+        }
+
+        for (h = (struct nlmsghdr *)resp; NLMSG_OK(h, status);
+             h = NLMSG_NEXT(h, status)) {
+                if (h->nlmsg_type == NLMSG_ERROR) {
+                        struct nlmsgerr *err = (struct nlmsgerr*)NLMSG_DATA(h);
+                        if (h->nlmsg_len < NLMSG_LENGTH(sizeof(struct nlmsgerr)))
+                                fprintf(stderr, "ERROR truncated\n");
+                        else
+                                errno = -err->error;
+                        return -1;
+                }
+        }
+
+        return 0;
+}
diff -Naur busybox-1.17.1_orig/networking/libiproute/libnetlink.h busybox-1.17.1_modified/networking/libiproute/libnetlink.h
--- busybox-1.17.1_orig/networking/libiproute/libnetlink.h	2011-09-14 12:35:49.323641827 +0530
+++ busybox-1.17.1_modified/networking/libiproute/libnetlink.h	2011-09-19 19:14:31.895767136 +0530
@@ -43,6 +43,13 @@
 extern int rta_addattr_l(struct rtattr *rta, int maxlen, int type, void *data, int alen) FAST_FUNC;
 
 extern int parse_rtattr(struct rtattr *tb[], int max, struct rtattr *rta, int len) FAST_FUNC;
+extern int rtnl_send_check(struct rtnl_handle *rth, const char *buf, int len) FAST_FUNC;
+
+#ifndef NDA_RTA
+#define NDA_RTA(r) \
+        ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ndmsg))))
+#endif
+
 
 POP_SAVED_FUNCTION_VISIBILITY
 
diff -Naur busybox-1.17.1_orig/networking/libiproute/ll_map.c busybox-1.17.1_modified/networking/libiproute/ll_map.c
--- busybox-1.17.1_orig/networking/libiproute/ll_map.c	2011-09-14 12:35:49.323641827 +0530
+++ busybox-1.17.1_modified/networking/libiproute/ll_map.c	2011-09-15 19:38:42.107834161 +0530
@@ -110,7 +110,7 @@
 	return ll_idx_n2a(idx, nbuf);
 }
 
-#ifdef UNUSED
+//#ifdef UNUSED
 int ll_index_to_type(int idx)
 {
 	struct idxmap *im;
@@ -122,7 +122,7 @@
 		return im->type;
 	return -1;
 }
-#endif
+//#endif
 
 unsigned FAST_FUNC ll_index_to_flags(int idx)
 {
diff -Naur busybox-1.17.1_orig/networking/libiproute/ll_map.h busybox-1.17.1_modified/networking/libiproute/ll_map.h
--- busybox-1.17.1_orig/networking/libiproute/ll_map.h	2011-09-14 12:35:49.323641827 +0530
+++ busybox-1.17.1_modified/networking/libiproute/ll_map.h	2011-09-15 19:38:58.949642246 +0530
@@ -9,7 +9,7 @@
 int xll_name_to_index(const char *name) FAST_FUNC;
 const char *ll_index_to_name(int idx) FAST_FUNC;
 const char *ll_idx_n2a(int idx, char *buf) FAST_FUNC;
-/* int ll_index_to_type(int idx); */
+int ll_index_to_type(int idx);
 unsigned ll_index_to_flags(int idx) FAST_FUNC;
 
 POP_SAVED_FUNCTION_VISIBILITY
diff -Naur busybox-1.17.1_orig/networking/libiproute/utils.c busybox-1.17.1_modified/networking/libiproute/utils.c
--- busybox-1.17.1_orig/networking/libiproute/utils.c	2011-09-14 12:35:49.310767263 +0530
+++ busybox-1.17.1_modified/networking/libiproute/utils.c	2011-09-15 20:02:54.686767082 +0530
@@ -11,6 +11,7 @@
  * Rani Assaf <rani@magic.metawire.com> 980929:	resolve addresses
  */
 
+#include <unistd.h>
 #include "libbb.h"
 #include "utils.h"
 #include "inet_common.h"
@@ -282,6 +283,13 @@
 	return 0;
 }
 
+int __iproute2_user_hz_internal;
+
+int __get_user_hz(void)
+{
+        return sysconf(_SC_CLK_TCK);
+}
+
 const char *rt_addr_n2a(int af,
 		void *addr, char *buf, int buflen)
 {
diff -Naur busybox-1.17.1_orig/networking/libiproute/utils.h busybox-1.17.1_modified/networking/libiproute/utils.h
--- busybox-1.17.1_orig/networking/libiproute/utils.h	2011-09-14 12:35:49.321641805 +0530
+++ busybox-1.17.1_modified/networking/libiproute/utils.h	2011-09-16 14:10:01.734642328 +0530
@@ -9,12 +9,13 @@
 PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDDEN
 
 extern family_t preferred_family;
-extern smallint show_stats;    /* UNUSED */
+extern smallint show_stats;    
 extern smallint show_details;  /* UNUSED */
 extern smallint show_raw;      /* UNUSED */
-extern smallint resolve_hosts; /* UNUSED */
+extern smallint resolve_hosts;
 extern smallint oneline;
 extern char _SL_;
+extern struct rtnl_handle rth;
 
 #ifndef IPPROTO_ESP
 #define IPPROTO_ESP	50
@@ -56,6 +57,16 @@
 	uint8_t  ipx_node[IPX_NODE_LEN];
 };
 
+extern int __iproute2_user_hz_internal;
+extern int __get_user_hz(void);
+
+static __inline__ int get_user_hz(void)
+{
+        if (__iproute2_user_hz_internal == 0)
+                __iproute2_user_hz_internal = __get_user_hz();
+        return __iproute2_user_hz_internal;
+}
+
 extern uint32_t get_addr32(char *name);
 extern int get_addr_1(inet_prefix *dst, char *arg, int family);
 /*extern int get_prefix_1(inet_prefix *dst, char *arg, int family);*/
