diff --exclude 'msvc*' --exclude '.*project' -Npur orig/hostapd/config_file.c patched/hostapd/config_file.c
--- orig/hostapd/config_file.c	2015-10-16 10:53:26.000000000 +0300
+++ patched/hostapd/config_file.c	2015-11-02 11:40:20.000000000 +0200
@@ -1079,6 +1079,186 @@ static int hostapd_config_ht_capab(struc
 #endif /* CONFIG_IEEE80211N */
 
 
+#ifdef CONFIG_IEEE80211N
+static int hostapd_config_ht_tx_bf_capab(struct hostapd_config *conf,
+				   const char *capab)
+{
+	if (os_strstr(capab, "[IMPL-TXBF-RX]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_IMPLICIT_TXBF_RX_CAP;
+	if (os_strstr(capab, "[RX-STAG-SND]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_RX_STAGGERED_SOUNDING_CAP;
+	if (os_strstr(capab, "[TX-STAG-SND]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_TX_STAGGERED_SOUNDING_CAP;
+	if (os_strstr(capab, "[RX-NDP]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_RX_NDP_CAP;
+	if (os_strstr(capab, "[TX-NDP]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_TX_NDP_CAP;
+	if (os_strstr(capab, "[IMPL-TXBF]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_IMPLICIT_TX_BF_CAP;
+
+	if (os_strstr(capab, "[CALIB-RESP]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CALIBRATION_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CALIB_OFFSET);
+	}
+	if (os_strstr(capab, "[CALIB-RESP+REQ]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CALIBRATION_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CALIB_OFFSET);
+	}
+
+	if (os_strstr(capab, "[EXPL-CSI-TXBF]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP;
+	if (os_strstr(capab, "[EXPL-NONCOMPR-STEER]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP;
+	if (os_strstr(capab, "[EXPL-COMPR-STEER]"))
+		conf->ht_tx_bf_capab |= TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP;
+
+
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-TXBF-CSI-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-NONCOMPR-FB-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-DELAYED]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+	if (os_strstr(capab, "[EXPL-COMPR-FB-FBACK-DELAYED+IMM]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET);
+	}
+
+	if (os_strstr(capab, "[MIN-GROUP-12]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+	if (os_strstr(capab, "[MIN-GROUP-14]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+	if (os_strstr(capab, "[MIN-GROUP-124]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_MINIMAL_GROUPING_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_MINIMAL_GROUPING_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CSI-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[NONCOMPS-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+
+	if (os_strstr(capab, "[COMPS-BF-ANT-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+	if (os_strstr(capab, "[COMPS-BF-ANT-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+	if (os_strstr(capab, "[CSI-MAX-ROWS-BF-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET);
+	}
+
+
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-1]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(0 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-2]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(1 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-3]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(2 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+	if (os_strstr(capab, "[CHE-SPACE-TIME-STR-4]")) {
+		conf->ht_tx_bf_capab &= ~TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK;
+		conf->ht_tx_bf_capab |= (u32)(3 << TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET);
+	}
+
+	return 0;
+}
+#endif /* CONFIG_IEEE80211N */
+
 #ifdef CONFIG_IEEE80211AC
 static int hostapd_config_vht_capab(struct hostapd_config *conf,
 				    const char *capab)
@@ -2704,6 +2884,12 @@ static int hostapd_config_fill(struct ho
 				   line);
 			return 1;
 		}
+	} else if (os_strcmp(buf, "ht_tx_bf_capab") == 0) {
+		if (hostapd_config_ht_tx_bf_capab(conf, pos) < 0) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid ht_tx_bf_capab",
+				   line);
+			return 1;
+		}
 	} else if (os_strcmp(buf, "require_ht") == 0) {
 		conf->require_ht = atoi(pos);
 	} else if (os_strcmp(buf, "obss_interval") == 0) {
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/ap/ap_config.c patched/src/ap/ap_config.c
--- orig/src/ap/ap_config.c	2015-10-16 12:06:57.000000000 +0300
+++ patched/src/ap/ap_config.c	2015-10-26 14:18:45.000000000 +0200
@@ -175,6 +175,7 @@ struct hostapd_config * hostapd_config_d
 	conf->tx_queue[3] = txq_bk;
 
 	conf->ht_capab = HT_CAP_INFO_SMPS_DISABLED;
+	conf->ht_tx_bf_capab = 0;
 
 	conf->scan_passive_dwell = 20;
 	conf->scan_active_dwell = 10;
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/ap/ap_config.h patched/src/ap/ap_config.h
--- orig/src/ap/ap_config.h	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/ap/ap_config.h	2015-10-26 12:18:45.000000000 +0200
@@ -580,6 +580,7 @@ struct hostapd_config {
 
 	int ht_op_mode_fixed;
 	u16 ht_capab;
+	u32 ht_tx_bf_capab;
 	int ieee80211n;
 	int secondary_channel;
 	int require_ht;
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/ap/hostapd.c patched/src/ap/hostapd.c
--- orig/src/ap/hostapd.c	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/ap/hostapd.c	2015-10-26 14:19:35.000000000 +0200
@@ -206,6 +206,7 @@ int hostapd_reload_config(struct hostapd
 		hapd->iconf->ieee80211n = oldconf->ieee80211n;
 		hapd->iconf->ieee80211ac = oldconf->ieee80211ac;
 		hapd->iconf->ht_capab = oldconf->ht_capab;
+		hapd->iconf->ht_tx_bf_capab = oldconf->ht_tx_bf_capab;
 		hapd->iconf->vht_capab = oldconf->vht_capab;
 		hapd->iconf->vht_oper_chwidth = oldconf->vht_oper_chwidth;
 		hapd->iconf->vht_oper_centr_freq_seg0_idx =
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/ap/hw_features.c patched/src/ap/hw_features.c
--- orig/src/ap/hw_features.c	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/ap/hw_features.c	2015-11-02 11:42:12.000000000 +0200
@@ -854,6 +854,75 @@ static int ieee80211n_supported_ht_capab
 }
 
 
+static int ieee80211n_tx_bf_cap_check(u32 hw, u32 conf, const u32 cap, const char *name)
+{
+	if ((conf & cap) && !(hw & cap)) {
+		wpa_printf(MSG_ERROR, "Driver does not support configured HT TXBF capability %s (supported:%.8x)", name, hw);
+		return 0;
+	}
+	return 1;
+}
+
+static int ieee80211n_tx_bf_cap_check_max(u32 hw, u32 conf, u32 cap_mask, const char *name)
+{
+	u32 hw_max = hw & cap_mask;
+	u32 conf_val = conf & cap_mask;
+
+	if (conf_val > hw_max) {
+		int offset = find_first_bit(cap_mask);
+		wpa_printf(MSG_ERROR, "Configured HT TXBF capability %s exceeds max value supported by the driver (%d > %d)",
+			   name, conf_val >> offset, hw_max >> offset);
+		return 0;
+	}
+	return 1;
+}
+
+static int ieee80211n_supported_ht_tx_bf_capab(struct hostapd_iface *iface)
+{
+#if 0
+#define TXBF_CAP_CHECK(cap, name) \
+	do { if (!ieee80211n_tx_bf_cap_check(hw, conf, cap, name)) return 0; } while (0)
+
+#define TXBF_CAP_CHECK_MAX(cap, name) \
+	do { if (!ieee80211n_tx_bf_cap_check_max(hw, conf, cap, name)) return 0; } while (0)
+
+	u32 hw = iface->current_mode->ht_tx_bf_capab;
+	u32 conf = iface->conf->ht_tx_bf_capab;
+	wpa_printf(MSG_DEBUG, "hw txbf capab: 0x%x, conf txbf capab: 0x%x", hw, conf);
+
+	TXBF_CAP_CHECK(TX_BF_CAP_IMPLICIT_TXBF_RX_CAP, 					"[IMPL-TXBF-RX]");
+	TXBF_CAP_CHECK(TX_BF_CAP_RX_STAGGERED_SOUNDING_CAP, 			"[RX-STAG-SND]");
+	TXBF_CAP_CHECK(TX_BF_CAP_TX_STAGGERED_SOUNDING_CAP, 			"[TX-STAG-SND]");
+	TXBF_CAP_CHECK(TX_BF_CAP_RX_NDP_CAP,							"[RX-NDP]");
+	TXBF_CAP_CHECK(TX_BF_CAP_TX_NDP_CAP,							"[TX-NDP]");
+	TXBF_CAP_CHECK(TX_BF_CAP_IMPLICIT_TX_BF_CAP,					"[IMPL-TXBF]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CALIBRATION_MASK,					"[CALIB-*]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP,					"[EXPL-CSI-TXBF]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP,		"[EXPL-NONCOMPR-STEER]");
+	TXBF_CAP_CHECK(TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP,			"[EXPL-COMPR-STEER]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK,	"[EXPL-TXBF-CSI-FBACK-*]");
+
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK,	"[EXPL-NONCOMPR-FB-FBACK-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK, "[EXPL-COMPR-FB-FBACK-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_MINIMAL_GROUPING_MASK,								"[MIN-GROUP-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK,						"[CSI-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK,	"[NONCOMPS-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK,	"[COMPS-BF-ANT-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK,			"[CSI-MAX-ROWS-BF-*]");
+	TXBF_CAP_CHECK_MAX(TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK,						"[CHE-SPACE-TIME-STR-*]");
+	return 1;
+
+#undef TXBF_CAP_CHECK
+#undef TXBF_CAP_CHECK_MAX
+
+#else
+	/* FIXME: Currently we cannot to read TXBF capabilities from driver, so we always return 1.
+	 * The Linux Kernel headers have to be modified to be able to implement this checking.
+	 */
+	return 1;
+#endif
+}
+
 #ifdef CONFIG_IEEE80211AC
 
 static int ieee80211ac_cap_check(u32 hw, u32 conf, u32 cap, const char *name)
@@ -950,6 +1019,8 @@ int hostapd_check_ht_capab(struct hostap
 		return 0;
 	if (!ieee80211n_supported_ht_capab(iface))
 		return -1;
+	if (!ieee80211n_supported_ht_tx_bf_capab(iface))
+		return -1;
 #ifdef CONFIG_IEEE80211AC
 	if (!ieee80211ac_supported_vht_capab(iface))
 		return -1;
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/ap/ieee802_11_ht.c patched/src/ap/ieee802_11_ht.c
--- orig/src/ap/ieee802_11_ht.c	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/ap/ieee802_11_ht.c	2015-10-29 15:16:28.000000000 +0200
@@ -40,8 +40,10 @@ u8 * hostapd_eid_ht_capabilities(struct 
 	os_memcpy(cap->supported_mcs_set, hapd->iface->current_mode->mcs_set,
 		  16);
 
+	/* tx_bf_capability_info */
+	cap->tx_bf_capability_info = host_to_le32(hapd->iconf->ht_tx_bf_capab);
+
 	/* TODO: ht_extended_capabilities (now fully disabled) */
-	/* TODO: tx_bf_capability_info (now fully disabled) */
 	/* TODO: asel_capabilities (now fully disabled) */
 
  	pos += sizeof(*cap);
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/common/ieee802_11_defs.h patched/src/common/ieee802_11_defs.h
--- orig/src/common/ieee802_11_defs.h	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/common/ieee802_11_defs.h	2015-10-29 15:39:48.000000000 +0200
@@ -688,19 +688,26 @@ struct ieee80211_vht_operation {
 #define TX_BF_CAP_RX_NDP_CAP ((u32) BIT(3))
 #define TX_BF_CAP_TX_NDP_CAP ((u32) BIT(4))
 #define TX_BF_CAP_IMPLICIT_TX_BF_CAP ((u32) BIT(5))
-#define TX_BF_CAP_CALIBRATION_MASK ((u32) (BIT(6) | BIT(7))
+#define TX_BF_CAP_CALIBRATION_MASK ((u32) (BIT(6) | BIT(7)))
 #define TX_BF_CAP_CALIB_OFFSET 6
 #define TX_BF_CAP_EXPLICIT_CSI_TXBF_CAP ((u32) BIT(8))
 #define TX_BF_CAP_EXPLICIT_NONCOMPR_STEERING_CAP ((u32) BIT(9))
 #define TX_BF_CAP_EXPLICIT_COMPR_STEERING_CAP ((u32) BIT(10))
-#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK ((u32) (BIT(10) | BIT(11)))
-#define TX_BF_CAP_EXPLICIT_BF_CSI_FEEDBACK_OFFSET 11
+#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_MASK   ((u32) (BIT(11) | BIT(12)))
+#define TX_BF_CAP_EXPLICIT_TX_BF_CSI_FEEDBACK_OFFSET 11
+#define TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_MASK   ((u32) (BIT(13) | BIT(14)))
 #define TX_BF_CAP_EXPLICIT_UNCOMPR_STEERING_MATRIX_FEEDBACK_OFFSET 13
+#define TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_MASK   ((u32) (BIT(15) | BIT(16)))
 #define TX_BF_CAP_EXPLICIT_COMPRESSED_STEERING_MATRIX_FEEDBACK_OFFSET 15
+#define TX_BF_CAP_MINIMAL_GROUPING_MASK   ((u32) (BIT(17) | BIT(18)))
 #define TX_BF_CAP_MINIMAL_GROUPING_OFFSET 17
+#define TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_MASK   ((u32) (BIT(19) | BIT(20)))
 #define TX_BF_CAP_CSI_NUM_BEAMFORMER_ANT_OFFSET 19
+#define TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK   ((u32) (BIT(21) | BIT(22)))
 #define TX_BF_CAP_UNCOMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET 21
+#define TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_MASK   ((u32) (BIT(23) | BIT(24)))
 #define TX_BF_CAP_COMPRESSED_STEERING_MATRIX_BEAMFORMER_ANT_OFFSET 23
+#define TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_MASK   ((u32) (BIT(25) | BIT(26)))
 #define TX_BF_CAP_SCI_MAX_OF_ROWS_BEANFORMER_SUPPORTED_OFFSET 25
 #define TX_BF_CAP_CHANNEL_ESTIMATION_CAP_MASK ((u32) (BIT(27) | BIT(28)))
 #define TX_BF_CAP_CHANNEL_ESTIMATION_CAP_OFFSET 27
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/drivers/driver.h patched/src/drivers/driver.h
--- orig/src/drivers/driver.h	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/drivers/driver.h	2015-10-29 13:43:32.000000000 +0200
@@ -187,6 +187,11 @@ struct hostapd_hw_modes {
 	 */
 	u8 vht_mcs_set[8];
 
+	/**
+	 * ht_tx_bf_capab - HT (IEEE 802.11n) TX BF capabilities
+	 */
+	u32 ht_tx_bf_capab;
+
 	unsigned int flags; /* HOSTAPD_MODE_FLAG_* */
 };
 
diff --exclude 'msvc*' --exclude '.*project' -Npur orig/src/utils/common.h patched/src/utils/common.h
--- orig/src/utils/common.h	2015-10-16 10:53:27.000000000 +0300
+++ patched/src/utils/common.h	2015-10-29 15:16:06.000000000 +0200
@@ -164,6 +164,7 @@ static inline unsigned int wpa_swap_32(u
 #define be_to_host16(n) wpa_swap_16(n)
 #define host_to_be16(n) wpa_swap_16(n)
 #define le_to_host32(n) (n)
+#define host_to_le32(n) (n)
 #define be_to_host32(n) wpa_swap_32(n)
 #define host_to_be32(n) wpa_swap_32(n)
