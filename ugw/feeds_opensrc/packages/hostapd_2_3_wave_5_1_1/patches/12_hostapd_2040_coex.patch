diff --exclude 'msvc*' -Npur hostap-724fce8/hostapd/config_file.c hostap-coex/hostapd/config_file.c
--- hostap-724fce8/hostapd/config_file.c	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/hostapd/config_file.c	2015-03-31 10:40:43.000000000 +0300
@@ -2668,6 +2668,26 @@ static int hostapd_config_fill(struct ho
 		conf->require_ht = atoi(pos);
 	} else if (os_strcmp(buf, "obss_interval") == 0) {
 		conf->obss_interval = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_passive_dwell") == 0) {
+		conf->scan_passive_dwell = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_active_dwell") == 0) {
+		conf->scan_active_dwell = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_passive_total_per_channel") == 0) {
+		conf->scan_passive_total_per_channel = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_active_total_per_channel") == 0) {
+		conf->scan_active_total_per_channel = atoi(pos);
+	} else if  (os_strcmp(buf, "channel_transition_delay_factor") == 0) {
+		conf->channel_transition_delay_factor = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_activity_threshold") == 0) {
+		conf->scan_activity_threshold = atoi(pos);
+	} else if  (os_strcmp(buf, "obss_beacon_rssi_threshold") == 0) {
+		conf->obss_beacon_rssi_threshold = atoi(pos);
+		if ((conf->obss_beacon_rssi_threshold < -100)
+			|| (conf->obss_beacon_rssi_threshold > -20)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid obss_beacon_rssi_threshold",
+				   line);
+			return 1;
+		}
 #endif /* CONFIG_IEEE80211N */
 #ifdef CONFIG_IEEE80211AC
 	} else if (os_strcmp(buf, "ieee80211ac") == 0) {
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/ap_config.c hostap-coex/src/ap/ap_config.c
--- hostap-724fce8/src/ap/ap_config.c	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/src/ap/ap_config.c	2015-03-31 10:41:24.000000000 +0300
@@ -172,6 +172,14 @@ struct hostapd_config * hostapd_config_d
 
 	conf->ht_capab = HT_CAP_INFO_SMPS_DISABLED;
 
+	conf->scan_passive_dwell = 20;
+	conf->scan_active_dwell = 10;
+	conf->scan_passive_total_per_channel = 200;
+	conf->scan_active_total_per_channel = 20;
+	conf->channel_transition_delay_factor = 5;
+	conf->scan_activity_threshold = 25;
+	conf->obss_beacon_rssi_threshold = -60;
+
 	conf->ap_table_max_size = 255;
 	conf->ap_table_expiration_time = 60;
 
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/ap_config.h hostap-coex/src/ap/ap_config.h
--- hostap-724fce8/src/ap/ap_config.h	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/src/ap/ap_config.h	2015-03-31 10:41:52.000000000 +0300
@@ -582,6 +582,13 @@ struct hostapd_config {
 	int secondary_channel;
 	int require_ht;
 	int obss_interval;
+	u16 scan_passive_dwell;
+	u16 scan_active_dwell;
+	u16 scan_passive_total_per_channel;
+	u16 scan_active_total_per_channel;
+	u16 channel_transition_delay_factor;
+	u16 scan_activity_threshold;
+	int obss_beacon_rssi_threshold;
 	u32 vht_capab;
 	int ieee80211ac;
 	int require_vht;
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/drv_callbacks.c hostap-coex/src/ap/drv_callbacks.c
--- hostap-724fce8/src/ap/drv_callbacks.c	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/src/ap/drv_callbacks.c	2015-04-24 14:57:32.000000000 +0300
@@ -743,6 +743,7 @@ static int hostapd_mgmt_rx(struct hostap
 	fi.datarate = rx_mgmt->datarate;
 	fi.ssi_signal = rx_mgmt->ssi_signal;
 
+
 	if (hapd == HAPD_BROADCAST) {
 		size_t i;
 		ret = 0;
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/hw_features.c hostap-coex/src/ap/hw_features.c
--- hostap-724fce8/src/ap/hw_features.c	2014-10-09 17:41:31.000000000 +0300
+++ hostap-coex/src/ap/hw_features.c	2015-04-13 15:58:11.000000000 +0300
@@ -346,6 +346,9 @@ static int ieee80211n_check_40mhz_5g(str
 	pri_bss = sec_bss = 0;
 	for (i = 0; i < scan_res->num; i++) {
 		struct wpa_scan_res *bss = scan_res->res[i];
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
 		if (bss->freq == pri_freq)
 			pri_bss++;
 		else if (bss->freq == sec_freq)
@@ -367,6 +370,9 @@ static int ieee80211n_check_40mhz_5g(str
 	match = 0;
 	for (i = 0; i < scan_res->num; i++) {
 		struct wpa_scan_res *bss = scan_res->res[i];
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
 		ieee80211n_get_pri_sec_chan(bss, &bss_pri_chan, &bss_sec_chan);
 		if (pri_chan == bss_pri_chan &&
 		    sec_chan == bss_sec_chan) {
@@ -377,6 +383,9 @@ static int ieee80211n_check_40mhz_5g(str
 	if (!match) {
 		for (i = 0; i < scan_res->num; i++) {
 			struct wpa_scan_res *bss = scan_res->res[i];
+			/* skip bss if it's signal level too low */
+			if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+				continue;
 			ieee80211n_get_pri_sec_chan(bss, &bss_pri_chan,
 						    &bss_sec_chan);
 			if (pri_chan == bss_sec_chan &&
@@ -448,6 +457,10 @@ static int ieee80211n_check_40mhz_2g4(st
 		int sec_chan, pri_chan;
 		struct ieee802_11_elems elems;
 
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
+
 		/* Check for overlapping 20 MHz BSS */
 		if (ieee80211n_check_20mhz_bss(bss, pri_freq, affected_start,
 					       affected_end)) {
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/ieee802_11.c hostap-coex/src/ap/ieee802_11.c
--- hostap-724fce8/src/ap/ieee802_11.c	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/src/ap/ieee802_11.c	2015-03-31 16:35:05.000000000 +0300
@@ -1603,6 +1603,7 @@ static void handle_beacon(struct hostapd
 					     sizeof(mgmt->u.beacon)), &elems,
 				      0);
 
+	hostapd_obss_beacon(hapd, mgmt, &elems, fi->ssi_signal);
 	ap_list_process_beacon(hapd->iface, mgmt, &elems, fi);
 }
 
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/ieee802_11.h hostap-coex/src/ap/ieee802_11.h
--- hostap-724fce8/src/ap/ieee802_11.h	2014-10-09 17:41:31.000000000 +0300
+++ hostap-coex/src/ap/ieee802_11.h	2015-03-31 16:37:08.000000000 +0300
@@ -15,6 +15,7 @@ struct sta_info;
 struct hostapd_frame_info;
 struct ieee80211_ht_capabilities;
 struct ieee80211_mgmt;
+struct ieee802_11_elems;
 
 int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 		    struct hostapd_frame_info *fi);
@@ -22,6 +23,8 @@ void ieee802_11_mgmt_cb(struct hostapd_d
 			u16 stype, int ok);
 void hostapd_2040_coex_action(struct hostapd_data *hapd,
 			      const struct ieee80211_mgmt *mgmt, size_t len);
+void hostapd_obss_beacon(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt,
+				         struct ieee802_11_elems *elems, int rssi_level);
 #ifdef NEED_AP_MLME
 int ieee802_11_get_mib(struct hostapd_data *hapd, char *buf, size_t buflen);
 int ieee802_11_get_mib_sta(struct hostapd_data *hapd, struct sta_info *sta,
diff --exclude 'msvc*' -Npur hostap-724fce8/src/ap/ieee802_11_ht.c hostap-coex/src/ap/ieee802_11_ht.c
--- hostap-724fce8/src/ap/ieee802_11_ht.c	2014-10-09 17:41:31.000000000 +0300
+++ hostap-coex/src/ap/ieee802_11_ht.c	2015-04-24 15:03:14.000000000 +0300
@@ -60,17 +60,17 @@ u8 * hostapd_eid_ht_capabilities(struct 
 		/* Fill in default values for remaining parameters
 		 * (IEEE Std 802.11-2012, 8.4.2.61 and MIB defval) */
 		scan_params->scan_passive_dwell =
-			host_to_le16(20);
+			host_to_le16(hapd->iconf->scan_passive_dwell);
 		scan_params->scan_active_dwell =
-			host_to_le16(10);
+			host_to_le16(hapd->iconf->scan_active_dwell);
 		scan_params->scan_passive_total_per_channel =
-			host_to_le16(200);
+			host_to_le16(hapd->iconf->scan_passive_total_per_channel);
 		scan_params->scan_active_total_per_channel =
-			host_to_le16(20);
+			host_to_le16(hapd->iconf->scan_active_total_per_channel);
 		scan_params->channel_transition_delay_factor =
-			host_to_le16(5);
+			host_to_le16(hapd->iconf->channel_transition_delay_factor);
 		scan_params->scan_activity_threshold =
-			host_to_le16(25);
+			host_to_le16(hapd->iconf->scan_activity_threshold);
 
 		pos += sizeof(*scan_params);
 	}
@@ -283,6 +283,59 @@ void hostapd_2040_coex_action(struct hos
 	}
 }
 
+static void hostapd_switch_to_20mhz(struct hostapd_data *hapd,
+			        struct hostapd_iface *iface, const struct ieee80211_mgmt *mgmt, int signal)
+{
+	if (iface->drv_flags & WPA_DRIVER_FLAGS_HT_2040_COEX) {
+		if (iface->conf->secondary_channel) {
+			hostapd_logger(hapd, mgmt->sa,
+				       HOSTAPD_MODULE_IEEE80211,
+				       HOSTAPD_LEVEL_INFO,
+				       "Switching to 20 MHz operation due to OBSS beacon reception at rssi %d", signal);
+			iface->conf->secondary_channel = 0;
+			ieee802_11_set_beacons(iface);
+		}
+		if (!iface->num_sta_ht40_intolerant) {
+			unsigned int delay_time;
+			delay_time = OVERLAPPING_BSS_TRANS_DELAY_FACTOR *
+				iface->conf->obss_interval;
+			eloop_cancel_timeout(ap_ht2040_timeout, hapd->iface,
+					     NULL);
+			eloop_register_timeout(delay_time, 0, ap_ht2040_timeout,
+					       hapd->iface, NULL);
+		}
+	}
+}
+
+void hostapd_obss_beacon(struct hostapd_data *hapd,
+						 const struct ieee80211_mgmt *mgmt,
+						 struct ieee802_11_elems *elems,
+						 int rssi_level)
+{
+	struct hostapd_iface *iface = hapd->iface;
+
+	if (!(iface->conf->ht_capab & HT_CAP_INFO_SUPP_CHANNEL_WIDTH_SET))
+		return;
+	if (!iface->conf->obss_interval)
+		return;
+	if (iface->conf->obss_beacon_rssi_threshold > rssi_level)
+		return;
+
+	if (elems->ht_capabilities &&
+	    elems->ht_capabilities_len >=
+	    sizeof(struct ieee80211_ht_capabilities)) {
+		struct ieee80211_ht_capabilities *ht_cap =
+			(struct ieee80211_ht_capabilities *)
+			elems->ht_capabilities;
+
+		if (le_to_host16(ht_cap->ht_capabilities_info) &
+		    HT_CAP_INFO_40MHZ_INTOLERANT) {
+			hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+		}
+	} else {
+		hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+	}
+}
 
 u16 copy_sta_ht_capab(struct hostapd_data *hapd, struct sta_info *sta,
 		      const u8 *ht_capab, size_t ht_capab_len)
diff --exclude 'msvc*' -Npur hostap-724fce8/src/drivers/driver_nl80211.c hostap-coex/src/drivers/driver_nl80211.c
--- hostap-724fce8/src/drivers/driver_nl80211.c	2015-03-30 16:18:31.000000000 +0300
+++ hostap-coex/src/drivers/driver_nl80211.c	2015-04-24 14:40:55.000000000 +0300
@@ -972,6 +972,7 @@ static int process_beacon_event(struct n
 		os_memset(&event, 0, sizeof(event));
 		event.rx_mgmt.frame = nla_data(tb[NL80211_ATTR_FRAME]);
 		event.rx_mgmt.frame_len = nla_len(tb[NL80211_ATTR_FRAME]);
+		event.rx_mgmt.ssi_signal = (s32) nla_get_u32(tb[NL80211_ATTR_RX_SIGNAL_DBM]);
 		wpa_supplicant_event(drv->ctx, EVENT_RX_MGMT, &event);
 	}
 
