--- a/examples/patbench.cc
+++ b/examples/patbench.cc
@@ -140,6 +140,10 @@
 
 #include <hs.h>
 
+#ifdef __UCLIBC__
+#include <boost/lexical_cast.hpp>
+#endif
+
 using std::cerr;
 using std::cout;
 using std::endl;
@@ -869,7 +873,21 @@ static void parseFile(const char *filena
         }
 
         // we should have an unsigned int as an ID, before the colon
+#ifndef __UCLIBC__
         unsigned id = std::stoi(line.substr(0, colonIdx).c_str());
+#else
+        unsigned id=0;
+        try
+        {
+                id = boost::lexical_cast<unsigned>(line.substr(0, colonIdx).c_str());
+        }
+        catch(const boost::bad_lexical_cast&)
+        {
+            cerr << "ERROR: failed to convert string" << id;
+            exit(-1);
+        }
+
+#endif
 
         // rest of the expression is the PCRE
         const string expr(line.substr(colonIdx + 1));
--- a/examples/pcapscan.cc
+++ b/examples/pcapscan.cc
@@ -75,6 +75,10 @@
 
 #include <hs.h>
 
+#ifdef __UCLIBC__
+#include <boost/lexical_cast.hpp>
+#endif
+
 using std::cerr;
 using std::cout;
 using std::endl;
@@ -656,7 +660,20 @@ static void parseFile(const char *filena
         }
 
         // we should have an unsigned int as an ID, before the colon
+#ifndef __UCLIBC__
         unsigned id = std::stoi(line.substr(0, colonIdx).c_str());
+#else
+        unsigned id=0;
+        try
+        {
+                id = boost::lexical_cast<unsigned>(line.substr(0, colonIdx).c_str());
+        }
+        catch(const boost::bad_lexical_cast&)
+        {
+            cerr << "ERROR: failed to convert string" << id;
+            exit(-1);
+        }
+#endif
 
         // rest of the expression is the PCRE
         const string expr(line.substr(colonIdx + 1));
