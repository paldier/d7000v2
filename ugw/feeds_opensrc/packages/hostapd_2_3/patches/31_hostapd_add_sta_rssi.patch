diff -uprN oring/src/ap/ap_drv_ops.c new/src/ap/ap_drv_ops.c
--- oring/src/ap/ap_drv_ops.c	2015-09-23 18:19:22.000000000 +0300
+++ new/src/ap/ap_drv_ops.c	2015-10-15 13:59:12.000000000 +0300
@@ -359,7 +359,8 @@ int hostapd_sta_add(struct hostapd_data 
 		    const struct ieee80211_ht_capabilities *ht_capab,
 		    const struct ieee80211_vht_capabilities *vht_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode,
-        struct ieee80211_mgmt *last_assoc_req, size_t last_assoc_req_len)
+        struct ieee80211_mgmt *last_assoc_req, size_t last_assoc_req_len,
+        int ssi_signal)
 {
 	struct hostapd_sta_add_params params;
 
@@ -383,6 +384,7 @@ int hostapd_sta_add(struct hostapd_data 
 	params.qosinfo = qosinfo;
 	params.last_assoc_req = last_assoc_req;
 	params.last_assoc_req_len = last_assoc_req_len;
+	params.ssi_signal = ssi_signal;
 	return hapd->driver->sta_add(hapd->drv_priv, &params);
 }
 
diff -uprN oring/src/ap/ap_drv_ops.h new/src/ap/ap_drv_ops.h
--- oring/src/ap/ap_drv_ops.h	2015-09-23 18:19:22.000000000 +0300
+++ new/src/ap/ap_drv_ops.h	2015-10-15 12:12:15.000000000 +0300
@@ -42,7 +42,8 @@ int hostapd_sta_add(struct hostapd_data 
 		    const struct ieee80211_ht_capabilities *ht_capab,
 		    const struct ieee80211_vht_capabilities *vht_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode,
-        struct ieee80211_mgmt *last_assoc_req, size_t last_assoc_req_len);
+        struct ieee80211_mgmt *last_assoc_req, size_t last_assoc_req_len,
+        int ssi_signal);
 int hostapd_set_privacy(struct hostapd_data *hapd, int enabled);
 int hostapd_set_generic_elem(struct hostapd_data *hapd, const u8 *elem,
 			     size_t elem_len);
diff -uprN oring/src/ap/ieee802_11.c new/src/ap/ieee802_11.c
--- oring/src/ap/ieee802_11.c	2015-09-23 18:19:56.000000000 +0300
+++ new/src/ap/ieee802_11.c	2015-10-21 14:53:56.000000000 +0300
@@ -541,7 +541,8 @@ failed:
 
 
 static void handle_auth(struct hostapd_data *hapd,
-			const struct ieee80211_mgmt *mgmt, size_t len)
+			const struct ieee80211_mgmt *mgmt, size_t len,
+      int ssi_signal)
 {
 	u16 auth_alg, auth_transaction, status_code;
 	u16 resp = WLAN_STATUS_SUCCESS;
@@ -681,6 +682,7 @@ static void handle_auth(struct hostapd_d
 	identity = NULL;
 	sta->radius_cui = radius_cui;
 	radius_cui = NULL;
+	sta->ssi_signal = ssi_signal;
 
 	sta->flags &= ~WLAN_STA_PREAUTH;
 	ieee802_1x_notify_pre_auth(sta->eapol_sm, 0);
@@ -1314,7 +1316,7 @@ static void send_assoc_resp(struct hosta
 
 static void handle_assoc(struct hostapd_data *hapd,
 			 const struct ieee80211_mgmt *mgmt, size_t len,
-			 int reassoc)
+			 int reassoc, int ssi_signal)
 {
 	u16 capab_info, listen_interval;
 	u16 resp = WLAN_STATUS_SUCCESS;
@@ -1421,6 +1423,7 @@ static void handle_assoc(struct hostapd_
 
 	sta->capability = capab_info;
 	sta->listen_interval = listen_interval;
+	sta->ssi_signal = ssi_signal;
 
 	if (hapd->iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G)
 		sta->flags |= WLAN_STA_NONERP;
@@ -1830,20 +1833,21 @@ int ieee802_11_mgmt(struct hostapd_data 
 		return 0;
 	}
 
+ 	wpa_printf(MSG_INFO, "ssi_signal:%d", fi->ssi_signal);
 	switch (stype) {
 	case WLAN_FC_STYPE_AUTH:
 		wpa_printf(MSG_DEBUG, "mgmt::auth");
-		handle_auth(hapd, mgmt, len);
+		handle_auth(hapd, mgmt, len, fi->ssi_signal);
 		ret = 1;
 		break;
 	case WLAN_FC_STYPE_ASSOC_REQ:
 		wpa_printf(MSG_DEBUG, "mgmt::assoc_req");
-		handle_assoc(hapd, mgmt, len, 0);
+		handle_assoc(hapd, mgmt, len, 0, fi->ssi_signal);
 		ret = 1;
 		break;
 	case WLAN_FC_STYPE_REASSOC_REQ:
 		wpa_printf(MSG_DEBUG, "mgmt::reassoc_req");
-		handle_assoc(hapd, mgmt, len, 1);
+		handle_assoc(hapd, mgmt, len, 1, fi->ssi_signal);
 		ret = 1;
 		break;
 	case WLAN_FC_STYPE_DISASSOC:
@@ -2029,7 +2033,8 @@ static void handle_assoc_cb(struct hosta
 			    sta->flags & WLAN_STA_HT ? &ht_cap : NULL,
 			    sta->flags & WLAN_STA_VHT ? &vht_cap : NULL,
 			    sta->flags, sta->qosinfo, sta->vht_opmode,
-          sta->last_assoc_req, sta->last_assoc_req_len)) {
+          sta->last_assoc_req, sta->last_assoc_req_len,
+          sta->ssi_signal)) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_NOTICE,
 			       "Could not add STA to kernel driver");
@@ -2417,7 +2422,7 @@ static u16 check_assoc_ies_wds(struct ho
 
 void hostapd_wds_sta_connect(void *ctx, const u8 *addr,
 				const u8 *ie, size_t ielen,
-				int short_preamble, int short_slot_time)
+				int short_preamble, int short_slot_time, u32 max_rssi)
 {
 	struct sta_info *sta;
 	struct ieee80211_ht_capabilities ht_cap;
@@ -2437,6 +2442,8 @@ void hostapd_wds_sta_connect(void *ctx, 
 		return;
 	}
 	sta->flags |= WLAN_STA_AUTH;
+	wpa_printf(MSG_INFO, "RX max_rssi 0x%08x(%d)", max_rssi, max_rssi);
+	sta->ssi_signal = max_rssi;
 
 	resp = check_assoc_ies_wds(hapd, sta, ie, ielen, 0);
 	if (resp != WLAN_STATUS_SUCCESS) {
@@ -2542,7 +2549,8 @@ void hostapd_wds_sta_connect(void *ctx, 
 			    sta->flags & WLAN_STA_HT ? &ht_cap : NULL,
 			    sta->flags & WLAN_STA_VHT ? &vht_cap : NULL,
 			    sta->flags | WLAN_STA_AUTHORIZED, sta->qosinfo, sta->vht_opmode,
-			    sta->last_assoc_req, sta->last_assoc_req_len)) {
+			    sta->last_assoc_req, sta->last_assoc_req_len,
+			    sta->ssi_signal)) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_NOTICE,
 			       "Could not add STA to kernel driver");
diff -uprN oring/src/ap/sta_info.h new/src/ap/sta_info.h
--- oring/src/ap/sta_info.h	2015-09-23 18:19:22.000000000 +0300
+++ new/src/ap/sta_info.h	2015-10-15 16:03:01.000000000 +0300
@@ -142,6 +142,7 @@ struct sta_info {
 #endif /* CONFIG_SAE */
 
 	u32 session_timeout; /* valid only if session_timeout_set == 1 */
+	u32 ssi_signal; /* dBm */
 };
 
 
diff -uprN oring/src/common/ieee802_11_common.h new/src/common/ieee802_11_common.h
--- oring/src/common/ieee802_11_common.h	2015-09-23 18:19:34.000000000 +0300
+++ new/src/common/ieee802_11_common.h	2015-10-19 15:53:08.000000000 +0300
@@ -100,7 +100,7 @@ int supp_rates_11b_only(struct ieee802_1
 
 void hostapd_wds_sta_connect(void *ctx, const u8 *addr,
 				const u8 *ie, size_t ielen,
-				int short_preamble, int short_slot_time);
+				int short_preamble, int short_slot_time, u32 max_rssi);
 
 const char * fc2str(u16 fc);
 #endif /* IEEE802_11_COMMON_H */
diff -uprN oring/src/common/ltq-vendor.h new/src/common/ltq-vendor.h
--- oring/src/common/ltq-vendor.h	2015-10-20 11:59:46.000000000 +0300
+++ new/src/common/ltq-vendor.h	2015-10-20 12:08:41.000000000 +0300
@@ -35,7 +35,7 @@ enum ltq_nl80211_vendor_subcmds {
 	LTQ_NL80211_VENDOR_SUBCMD_FREE_AID = 2,
 	LTQ_NL80211_VENDOR_SUBCMD_TX_EAPOL = 3,
 	LTQ_NL80211_VENDOR_SUBCMD_COUNTRY_CODE = 4,
-  LTQ_NL80211_VENDOR_SUBCMD_SYNC_DONE = 5,
+	LTQ_NL80211_VENDOR_SUBCMD_SYNC_DONE = 5,
 	LTQ_NL80211_VENDOR_SUBCMD_DFS_DEBUG = 6,
 };
 
diff -uprN oring/src/drivers/driver.h new/src/drivers/driver.h
--- oring/src/drivers/driver.h	2015-10-20 11:58:22.000000000 +0300
+++ new/src/drivers/driver.h	2015-10-20 12:08:58.000000000 +0300
@@ -1132,6 +1132,7 @@ struct hostapd_sta_add_params {
 	size_t supp_oper_classes_len;
 	struct ieee80211_mgmt *last_assoc_req;
 	size_t last_assoc_req_len;
+	int ssi_signal;
 };
 
 struct mac_address {
diff -uprN oring/src/drivers/driver_nl80211.c new/src/drivers/driver_nl80211.c
--- oring/src/drivers/driver_nl80211.c	2015-10-20 11:58:22.000000000 +0300
+++ new/src/drivers/driver_nl80211.c	2015-10-20 17:01:24.000000000 +0300
@@ -2626,6 +2626,7 @@ static void nl80211_new_station_event(st
 		struct nlattr *sta_bss_param[NL80211_STA_BSS_PARAM_MAX+1];
 		int short_preamble= 0;
 		int short_slot_time = 0;
+		u32 max_rssi;
 
 		if (tb[NL80211_ATTR_IE]) {
 			ies = nla_data(tb[NL80211_ATTR_IE]);
@@ -2639,6 +2640,13 @@ static void nl80211_new_station_event(st
 			wpa_printf(MSG_ERROR, "nl80211: Can't get NL80211_ATTR_STA_INFO");
 			return;
 		}
+		if (!sinfo[NL80211_STA_INFO_MAX_RSSI]) {
+			wpa_printf(MSG_ERROR, "nl80211: Can't get NL80211_STA_INFO_MAX_RSSI");
+			return;
+		}
+		max_rssi = nla_get_u32(sinfo[NL80211_STA_INFO_MAX_RSSI]);
+		wpa_printf(MSG_DEBUG, "nl80211: nl80211_new_station_event: max_rssi %d ", max_rssi);
+
 		if (!sinfo[NL80211_STA_INFO_BSS_PARAM] ||
 			nla_parse_nested(sta_bss_param, NL80211_STA_BSS_PARAM_MAX,
 			sinfo[NL80211_STA_INFO_BSS_PARAM], NULL)) {
@@ -2651,7 +2659,7 @@ static void nl80211_new_station_event(st
 			short_slot_time = nla_get_flag(sta_bss_param[NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME]);
 		wpa_printf(MSG_DEBUG, "nl80211: short_preamble %d, short_slot_time %d", short_preamble, short_slot_time);
 
-		hostapd_wds_sta_connect(bss->ctx, addr, ies, ies_len, short_preamble, short_slot_time);
+		hostapd_wds_sta_connect(bss->ctx, addr, ies, ies_len, short_preamble, short_slot_time, max_rssi);
 		return;
 	}
 
@@ -7690,6 +7698,10 @@ static int wpa_driver_nl80211_sta_add(vo
 	wpa_hexdump(MSG_DEBUG, "  * supported rates", params->supp_rates,
 		    params->supp_rates_len);
 	if (!params->set) {
+		/* RSSI */
+		wpa_printf(MSG_DEBUG, "  * ssi_signal=%d", params->ssi_signal);
+		NLA_PUT_U32(msg, NL80211_ATTR_STA_RSSI, (u32)params->ssi_signal);
+
 		if (params->aid) {
 			wpa_printf(MSG_DEBUG, "  * aid=%u", params->aid);
 			NLA_PUT_U16(msg, NL80211_ATTR_STA_AID, params->aid);
diff -uprN oring/src/drivers/nl80211_copy.h new/src/drivers/nl80211_copy.h
--- oring/src/drivers/nl80211_copy.h	2014-10-09 17:41:31.000000000 +0300
+++ new/src/drivers/nl80211_copy.h	2015-10-19 16:26:51.000000000 +0300
@@ -1588,6 +1588,8 @@ enum nl80211_commands {
  *	data is in the format defined for the payload of the QoS Map Set element
  *	in IEEE Std 802.11-2012, 8.4.2.97.
  *
+ * @NL80211_ATTR_STA_RSSI: Received signal strength indication (u32)
+ *
  * @NL80211_ATTR_MAC_HINT: MAC address recommendation as initial BSS
  * @NL80211_ATTR_WIPHY_FREQ_HINT: frequency of the recommended initial BSS
  *
@@ -1966,6 +1968,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_QOS_MAP,
 
+	NL80211_ATTR_STA_RSSI,
+
 	NL80211_ATTR_MAC_HINT,
 	NL80211_ATTR_WIPHY_FREQ_HINT,
 
@@ -2211,6 +2215,7 @@ enum nl80211_sta_bss_param {
 	NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME,
 	NL80211_STA_BSS_PARAM_DTIM_PERIOD,
 	NL80211_STA_BSS_PARAM_BEACON_INTERVAL,
+	NL80211_STA_BSS_PARAM_RSSI,
 
 	/* keep last */
 	__NL80211_STA_BSS_PARAM_AFTER_LAST,
@@ -2291,6 +2296,7 @@ enum nl80211_sta_info {
 	NL80211_STA_INFO_TX_BYTES64,
 	NL80211_STA_INFO_CHAIN_SIGNAL,
 	NL80211_STA_INFO_CHAIN_SIGNAL_AVG,
+	NL80211_STA_INFO_MAX_RSSI,
 	NL80211_STA_INFO_EXPECTED_THROUGHPUT,
 
 	/* keep last */
