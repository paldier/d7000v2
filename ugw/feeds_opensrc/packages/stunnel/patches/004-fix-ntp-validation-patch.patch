Index: stunnel-4.55/src/options.c
===================================================================
--- stunnel-4.55.orig/src/options.c
+++ stunnel-4.55/src/options.c
@@ -1936,6 +1936,29 @@ static char *parse_service_option(CMD cm
          break;
      }
 
+     /* NTPenable */
+     switch(cmd) {
+     case CMD_BEGIN:
+         section->option.ntp_enable=0;
+         break;
+     case CMD_EXEC:
+         if(strcasecmp(opt, "NTPenable"))
+             break;
+         if(!strcasecmp(arg, "yes"))
+             section->option.ntp_enable=1;
+         else if(!strcasecmp(arg, "no"))
+             section->option.ntp_enable=0;
+         else
+             return "Argument should be either 'yes' or 'no'";
+         return NULL; /* OK */
+     case CMD_DEFAULT:
+         break;
+     case CMD_HELP:
+         s_log(LOG_NOTICE, "%-15s = yes|no verify Expired Certificate",
+             "NTPenable");
+         break;
+     }
+
     if(cmd==CMD_EXEC)
         return option_not_found;
 
Index: stunnel-4.55/src/prototypes.h
===================================================================
--- stunnel-4.55.orig/src/prototypes.h
+++ stunnel-4.55/src/prototypes.h
@@ -226,6 +226,7 @@ typedef struct service_options_struct {
         unsigned int reset:1;           /* reset sockets on error */
         unsigned int renegotiation:1;
         unsigned int cn_check:1;
+        unsigned int ntp_enable:1;
     } option;
 } SERVICE_OPTIONS;
 
Index: stunnel-4.55/src/verify.c
===================================================================
--- stunnel-4.55.orig/src/verify.c
+++ stunnel-4.55/src/verify.c
@@ -244,6 +244,15 @@ static int cert_check(CLI *c, X509_STORE
             s_log(LOG_INFO, "CERT: Invalid CA certificate ignored");
             return 1; /* accept connection */
         } else {
+            s_log(LOG_INFO, "preverify_ok [%d]",preverify_ok);
+
+            if((X509_STORE_CTX_get_error(callback_ctx) == X509_V_ERR_CERT_HAS_EXPIRED) && (c->opt->option.ntp_enable == 0))
+            {
+                /*accept connection if NTP disabled*/
+                s_log(LOG_INFO, "CERT: Expired CA certificate ignored");
+                return 1;
+
+            }
             s_log(LOG_WARNING, "CERT: Verification error: %s",
                 X509_verify_cert_error_string(
                     X509_STORE_CTX_get_error(callback_ctx)));
@@ -323,19 +332,22 @@ static int crl_check(CLI *c, X509_STORE_
         if(pubkey)
             EVP_PKEY_free(pubkey);
 
-        /* check date of CRL to make sure it's not expired */
-        if(!next_update) {
-            s_log(LOG_WARNING, "CRL: Invalid nextUpdate field");
-            X509_STORE_CTX_set_error(callback_ctx,
-                X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD);
-            X509_OBJECT_free_contents(&obj);
-            return 0; /* reject connection */
-        }
-        if(X509_cmp_current_time(next_update)<0) {
-            s_log(LOG_WARNING, "CRL: CRL Expired - revoking all certificates");
-            X509_STORE_CTX_set_error(callback_ctx, X509_V_ERR_CRL_HAS_EXPIRED);
-            X509_OBJECT_free_contents(&obj);
-            return 0; /* reject connection */
+        if(c->opt->option.ntp_enable == 1)
+        {
+            /* check date of CRL to make sure it's not expired */
+            if(!next_update) {
+                s_log(LOG_WARNING, "CRL: Invalid nextUpdate field");
+                X509_STORE_CTX_set_error(callback_ctx,
+                        X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD);
+                X509_OBJECT_free_contents(&obj);
+                return 0; /* reject connection */
+            }
+            if(X509_cmp_current_time(next_update)<0) {
+                s_log(LOG_WARNING, "CRL: CRL Expired - revoking all certificates");
+                X509_STORE_CTX_set_error(callback_ctx, X509_V_ERR_CRL_HAS_EXPIRED);
+                X509_OBJECT_free_contents(&obj);
+                return 0; /* reject connection */
+            }
         }
         X509_OBJECT_free_contents(&obj);
     }
