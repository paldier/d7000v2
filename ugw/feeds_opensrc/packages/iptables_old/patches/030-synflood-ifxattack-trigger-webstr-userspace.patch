diff -Naur iptables-1.4.6.orig/extensions/libipt_ifxattack.c iptables-1.4.6/extensions/libipt_ifxattack.c
--- iptables-1.4.6.orig/extensions/libipt_ifxattack.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.6/extensions/libipt_ifxattack.c	2011-01-20 17:57:35.234644802 +0530
@@ -0,0 +1,264 @@
+/* Shared library add-on to iptables to add tcp Dos Attacks matching support. */
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <iptables.h>
+#include <linux/netfilter_ipv4/ipt_ifxattack.h>
+
+#define STR_CODE_REDI		"code_redI"
+#define STR_CODE_REDII		"code_redII"
+#define STR_LAND_ATTACK		"land_attack"
+#define STR_ICQ_DOS			"icq_dos"
+#define STR_MALFORMED_MIME	"malformed_mime"
+#define STR_IIS_FRONTPAGE	"iis_frontpage"
+#define STR_UDP_BOMB		"udp_bomb"
+#define STR_FTP_PORT_REST		"ftp_port"
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"ifxattack match v%s options:\n"
+"--name		attack	Match attack name.\n",
+IPTABLES_VERSION);
+}
+
+static struct option opts[] = {
+	{ "name", 1, 0, '1' },
+	{0}
+};
+
+/* Initialize the match.*/
+static void
+init(struct ipt_entry_match *m)
+{
+struct ipt_ifxattack_match_info *attackinfo =
+	                (struct ipt_ifxattack_match_info *)m->data;
+}
+
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const struct ipt_entry *entry,
+      struct ipt_entry_match **match)
+{
+	struct ipt_ifxattack_match_info *attackinfo =
+		(struct ipt_ifxattack_match_info *)(*match)->data;
+	int iFound = 0;
+
+	switch (c) {
+	case '1':
+		if (*flags)
+			exit_error(PARAMETER_PROBLEM,
+				   "Only one `--name' allowed");
+		if (invert)
+			exit_error(PARAMETER_PROBLEM,
+				   "No '!' allowed");
+#ifdef CONFIG_CODE_REDI
+		if (strcmp(argv[optind - 1],STR_CODE_REDI) == 0) {
+			attackinfo->attack_name = CODE_REDI;
+			iFound = 1;
+		} 
+#endif
+#ifdef CONFIG_CODE_REDII
+		if (strcmp(argv[optind - 1],STR_CODE_REDII) == 0) {
+			attackinfo->attack_name = CODE_REDII;
+			iFound = 1;
+		} 
+#endif
+#ifdef CONFIG_LAND_ATTACK
+		if (strcmp(argv[optind - 1],STR_LAND_ATTACK) == 0) {
+			attackinfo->attack_name = LAND_ATTACK;
+			iFound = 1;
+		} 
+#endif
+#ifdef CONFIG_ICQ_DOS
+		if (strcmp(argv[optind - 1],STR_ICQ_DOS) == 0) {
+			attackinfo->attack_name = ICQ_DOS;
+			iFound = 1;
+		} 
+#endif
+#ifdef CONFIG_MALFORMED_MIME
+		if (strcmp(argv[optind - 1],STR_MALFORMED_MIME) == 0) {
+			attackinfo->attack_name = MALFORMED_MIME;
+			iFound = 1;
+		} 
+#endif
+
+#ifdef CONFIG_IIS_FRONTPAGE
+		if (strcmp(argv[optind - 1], STR_IIS_FRONTPAGE) == 0) {
+			attackinfo->attack_name = IIS_FRONTPAGE;
+			iFound = 1;
+		}
+#endif
+
+#ifdef CONFIG_UDP_BOMB
+		if (strcmp(argv[optind - 1], STR_UDP_BOMB) == 0) {
+			attackinfo->attack_name = UDP_BOMB;
+			iFound = 1;
+		}
+#endif
+#ifdef CONFIG_FTP_PORT_REST
+		if (strcmp(argv[optind - 1], STR_FTP_PORT_REST) == 0) {
+			attackinfo->attack_name = FTP_PORT_REST;
+			iFound = 1;
+		}
+#endif
+		if (!iFound) {
+			exit_error(PARAMETER_PROBLEM,
+				   "Only one of attacks "
+#ifdef CONFIG_CODE_REDI
+				    "["STR_CODE_REDI"] " 
+#endif
+#ifdef CONFIG_CODE_REDI
+				    "["STR_CODE_REDII"] " 
+#endif
+#ifdef CONFIG_LAND_ATTACK
+				    "["STR_LAND_ATTACK"] " 
+#endif
+#ifdef CONFIG_ICQ_DOS
+				    "["STR_ICQ_DOS"] "
+#endif
+#ifdef CONFIG_MALFORMED_MIME
+					"["STR_MALFORMED_MIME"] "
+#endif
+#ifdef CONFIG_IIS_FRONTPAGE
+					"["STR_IIS_FRONTPAGE"] "
+#endif
+#ifdef CONFIG_UDP_BOMB
+					"["STR_UDP_BOMB"] "
+#endif
+#ifdef CONFIG_FTP_PORT_REST
+					"["STR_FTP_PORT_REST"] "
+#endif
+				   	"allowed");
+		}
+		*flags = 1;
+		break;
+	default:
+		return 0;
+	}
+	return 1;
+}
+
+/* Final check; must have specified --mss. */
+static void
+final_check(unsigned int flags)
+{
+	if (!flags)
+		exit_error(PARAMETER_PROBLEM,
+			   "ifxattack match: You must specify `--name name'");
+}
+
+/* Prints out the matchinfo. */
+static void
+print(const void *ip,
+      const struct ipt_entry_match *match,
+      int numeric)
+{
+	struct ipt_ifxattack_match_info *attackinfo =
+		(struct ipt_ifxattack_match_info *)match->data;
+
+	printf("ifxattack match ");
+#ifdef CONFIG_CODE_REDI
+	if (attackinfo->attack_name == CODE_REDI)
+		printf(STR_CODE_REDI);
+#endif
+#ifdef CONFIG_CODE_REDII
+	if (attackinfo->attack_name == CODE_REDII)
+		printf(STR_CODE_REDII);
+#endif
+#ifdef CONFIG_LAND_ATTACK
+	if (attackinfo->attack_name == LAND_ATTACK)
+		printf(STR_LAND_ATTACK);
+#endif
+#ifdef CONFIG_ICQ_DOS
+	if (attackinfo->attack_name == ICQ_DOS)
+		printf(STR_ICQ_DOS);
+#endif
+#ifdef CONFIG_MALFORMED_MIME
+	if (attackinfo->attack_name == MALFORMED_MIME)
+		printf(STR_MALFORMED_MIME);
+#endif
+#ifdef CONFIG_IIS_FRONTPAGE
+	if (attackinfo->attack_name == IIS_FRONTPAGE)
+		printf(STR_IIS_FRONTPAGE);
+#endif
+#ifdef CONFIG_UDP_BOMB
+	if (attackinfo->attack_name == UDP_BOMB)
+		printf(STR_UDP_BOMB);
+#endif
+#ifdef CONFIG_FTP_PORT_REST
+	if (attackinfo->attack_name == FTP_PORT_REST)
+		printf(STR_FTP_PORT_REST);
+#endif
+}
+
+/* Saves the union ipt_matchinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct ipt_entry_match *match)
+{
+	struct ipt_ifxattack_match_info *attackinfo =
+		(struct ipt_ifxattack_match_info *)match->data;
+
+	printf("--name ");
+#ifdef CONFIG_CODE_REDI
+	if (attackinfo->attack_name == CODE_REDI)
+		printf(STR_CODE_REDI);
+#endif
+#ifdef CONFIG_CODE_REDII
+	if (attackinfo->attack_name == CODE_REDII)
+		printf(STR_CODE_REDII);
+#endif
+#ifdef CONFIG_LAND_ATTACK
+	if (attackinfo->attack_name == LAND_ATTACK)
+		printf(STR_LAND_ATTACK);
+#endif
+#ifdef CONFIG_ICQ_DOS
+	if (attackinfo->attack_name == ICQ_DOS)
+		printf(STR_ICQ_DOS);
+#endif
+#ifdef CONFIG_MALFORMED_MIME
+	if (attackinfo->attack_name == MALFORMED_MIME)
+		printf(STR_MALFORMED_MIME);
+#endif
+#ifdef CONFIG_IIS_FRONTPAGE
+	if (attackinfo->attack_name == IIS_FRONTPAGE)
+		printf(STR_IIS_FRONTPAGE);
+#endif
+#ifdef CONFIG_UDP_BOMB
+	if (attackinfo->attack_name == UDP_BOMB)
+		printf(STR_UDP_BOMB);
+#endif
+#ifdef CONFIG_FTP_PORT_REST
+	if (attackinfo->attack_name == FTP_PORT_REST)
+		printf(STR_FTP_PORT_REST);
+#endif
+}
+
+static
+struct xtables_match ifxattack = {
+	.name = "ifxattack",
+    .version = XTABLES_VERSION,
+    .family         =       NFPROTO_IPV4,
+    .size = XT_ALIGN(sizeof(struct ipt_ifxattack_match_info)),
+    .userspacesize = XT_ALIGN(sizeof(struct ipt_ifxattack_match_info)),
+    .help = &help,
+    .init = &init,
+    .parse = &parse,
+    .final_check = &final_check,
+    .print = &print,
+    .save = &save,
+    .extra_opts = opts
+};
+
+void _init(void)
+{
+	xtables_register_match(&ifxattack);
+}
diff -Naur iptables-1.4.6.orig/extensions/libipt_synflood.c iptables-1.4.6/extensions/libipt_synflood.c
--- iptables-1.4.6.orig/extensions/libipt_synflood.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.6/extensions/libipt_synflood.c	2011-01-20 17:57:18.225891289 +0530
@@ -0,0 +1,207 @@
+/* Shared library add-on to iptables to add limit support.
+ *
+ * Jérôme de Vivie   <devivie@info.enserb.u-bordeaux.fr>
+ * Hervé Eychenne    <rv@wallfire.org>
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <iptables.h>
+#include <stddef.h>
+#include <linux/autoconf.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_synflood.h>
+
+#define IPT_LIMIT_AVG	"3/hour"
+#define IPT_LIMIT_BURST	5
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"limit v%s options:\n"
+"--limit avg			max average match rate: default "IPT_LIMIT_AVG"\n"
+"                                [Packets per second unless followed by \n"
+"                                /sec /minute /hour /day postfixes]\n"
+"--limit-burst number		number to match in a burst, default %u\n"
+"\n", IPTABLES_VERSION, IPT_LIMIT_BURST);
+}
+
+static struct option opts[] = {
+	{ "limit", 1, 0, '%' },
+	{ "limit-burst", 1, 0, '$' },
+	{ 0 }
+};
+
+static
+int parse_rate(const char *rate, u_int32_t *val)
+{
+	const char *delim;
+	u_int32_t r;
+	u_int32_t mult = 1;  /* Seconds by default. */
+
+	delim = strchr(rate, '/');
+	if (delim) {
+		if (strlen(delim+1) == 0)
+			return 0;
+
+		if (strncasecmp(delim+1, "second", strlen(delim+1)) == 0)
+			mult = 1;
+		else if (strncasecmp(delim+1, "minute", strlen(delim+1)) == 0)
+			mult = 60;
+		else if (strncasecmp(delim+1, "hour", strlen(delim+1)) == 0)
+			mult = 60*60;
+		else if (strncasecmp(delim+1, "day", strlen(delim+1)) == 0)
+			mult = 24*60*60;
+		else
+			return 0;
+	}
+	r = atoi(rate);
+	if (!r)
+		return 0;
+
+	/* This would get mapped to infinite (1/day is minimum they
+           can specify, so we're ok at that end). */
+	if (r / mult > IPT_LIMIT_SCALE)
+		xtables_error(PARAMETER_PROBLEM, "Rate too fast `%s'\n", rate);
+
+	*val = IPT_LIMIT_SCALE * mult / r;
+	return 1;
+}
+
+/* Initialize the match. */
+static void
+init(struct ipt_entry_match *m)
+{
+	struct ipt_rateinfo *r = (struct ipt_rateinfo *)m->data;
+
+	parse_rate(IPT_LIMIT_AVG, &r->avg);
+	r->burst = IPT_LIMIT_BURST;
+
+	/* Can't cache this */
+	//*nfcache |= NFC_UNKNOWN;
+}
+
+/* FIXME: handle overflow:
+	if (r->avg*r->burst/r->burst != r->avg)
+		xtables_error(PARAMETER_PROBLEM,
+			   "Sorry: burst too large for that avg rate.\n");
+*/
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const struct ipt_entry *entry,
+      struct ipt_entry_match **match)
+{
+	struct ipt_rateinfo *r = (struct ipt_rateinfo *)(*match)->data;
+	unsigned int num;
+
+	switch(c) {
+	case '%':
+		if (xtables_check_inverse(optarg, &invert, NULL, 0, NULL))
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unexpected `!' after --limit");
+		if (!parse_rate(optarg, &r->avg))
+			xtables_error(PARAMETER_PROBLEM,
+				   "bad rate `%s'", optarg);
+#ifdef CONFIG_LTQ_NF_ADDONS
+		if (invert)
+			r->invert = 1;
+#endif
+		break;
+
+	case '$':
+		if (xtables_check_inverse(optarg, &invert, NULL, 0, NULL))
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unexpected `!' after --limit-burst");
+
+		if (string_to_number(optarg, 0, 10000, &num) == -1)
+			xtables_error(PARAMETER_PROBLEM,
+				   "bad --limit-burst `%s'", optarg);
+		r->burst = num;
+		if (invert) {
+			xtables_error(PARAMETER_PROBLEM,
+				   "bad ! in --limit-burst") ;
+		}
+		break;
+
+	default:
+		return 0;
+	}
+
+	return 1;
+}
+
+/* Final check; nothing. */
+static void final_check(unsigned int flags)
+{
+}
+
+static struct rates
+{
+	const char *name;
+	u_int32_t mult;
+} rates[] = { { "day", IPT_LIMIT_SCALE*24*60*60 },
+	      { "hour", IPT_LIMIT_SCALE*60*60 },
+	      { "min", IPT_LIMIT_SCALE*60 },
+	      { "sec", IPT_LIMIT_SCALE } };
+
+static void print_rate(u_int32_t period)
+{
+	unsigned int i;
+
+	for (i = 1; i < sizeof(rates)/sizeof(struct rates); i++) {
+		if (period > rates[i].mult
+            || rates[i].mult/period < rates[i].mult%period)
+			break;
+	}
+
+	printf("%u/%s ", rates[i-1].mult / period, rates[i-1].name);
+}
+
+/* Prints out the matchinfo. */
+static void
+print(const void *ip,
+      const struct ipt_entry_match *match,
+      int numeric)
+{
+	struct ipt_rateinfo *r = (struct ipt_rateinfo *)match->data;
+	printf("limit: avg "); print_rate(r->avg);
+	printf("burst %u ", r->burst);
+}
+
+/* FIXME: Make minimalist: only print rate if not default --RR */
+static void save(const void *ip, const struct ipt_entry_match *match)
+{
+	struct ipt_rateinfo *r = (struct ipt_rateinfo *)match->data;
+
+	printf("--limit "); print_rate(r->avg);
+	if (r->burst != IPT_LIMIT_BURST)
+		printf("--limit-burst %u ", r->burst);
+}
+
+static
+struct xtables_match synflood = {
+	.name = "synflood",
+	.version = XTABLES_VERSION,
+	.family  =       NFPROTO_IPV4,
+	.size = XT_ALIGN(sizeof(struct ipt_rateinfo)),
+	.userspacesize = XT_ALIGN(sizeof(struct ipt_rateinfo)),
+	.help = &help,
+	.init = &init,
+	.parse = &parse,
+	.final_check = &final_check,
+	.print = &print,
+	.save = &save,
+	.extra_opts = opts
+};
+
+void _init(void)
+{
+	xtables_register_match(&synflood);
+}
diff -Naur iptables-1.4.6.orig/extensions/libipt_TRIGGER.c iptables-1.4.6/extensions/libipt_TRIGGER.c
--- iptables-1.4.6.orig/extensions/libipt_TRIGGER.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.6/extensions/libipt_TRIGGER.c	2011-01-20 17:57:28.215892737 +0530
@@ -0,0 +1,209 @@
+/* Port-triggering target. 
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ */
+
+/* Shared library add-on to iptables to add port-trigger support. */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <iptables.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_TRIGGER.h>
+#include <net/netfilter/nf_nat.h>
+
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"TRIGGER v%s options:\n"
+" --trigger-type (dnat|in|out)\n"
+"				Trigger type\n"
+" --trigger-proto proto\n"
+"				Trigger protocol\n"
+" --trigger-match port[-port]\n"
+"				Trigger destination port range\n"
+" --trigger-relate port[-port]\n"
+"				Port range to map related destination port range to.\n\n",
+IPTABLES_VERSION);
+}
+
+static struct option opts[] = {
+	{ "trigger-type", 1, 0, '1' },
+	{ "trigger-proto", 1, 0, '2' },
+	{ "trigger-match", 1, 0, '3' },
+	{ "trigger-relate", 1, 0, '4' },
+	{ 0 }
+};
+
+/* Initialize the target. */
+static void
+init(struct ipt_entry_target *t)
+{
+	struct ipt_trigger_info *mr = (struct ipt_trigger_info *)t->data;
+}
+
+/* Parses ports */
+static void
+parse_ports(const char *arg, u_int16_t *ports)
+{
+	const char *dash;
+	int port;
+
+	port = atoi(arg);
+	if (port == 0 || port > 65535)
+		xtables_error(PARAMETER_PROBLEM, "Port range `%s' invalid\n", arg);
+
+	dash = strchr(arg, '-');
+	if (!dash)
+		ports[0] = ports[1] = port;
+	else {
+		int maxport;
+
+		maxport = atoi(dash + 1);
+		if (maxport == 0 || maxport > 65535)
+			xtables_error(PARAMETER_PROBLEM,
+				   "Port range `%s' invalid\n", dash+1);
+		if (maxport < port)
+			xtables_error(PARAMETER_PROBLEM,
+				   "Port range `%s' invalid\n", arg);
+		ports[0] = port;
+		ports[1] = maxport;
+	}
+}
+
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const void *e,
+      struct ipt_entry_target **target)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)(*target)->data;
+
+	switch (c) {
+	case '1':
+		if (!strcasecmp(optarg, "dnat"))
+			info->type = IPT_TRIGGER_DNAT;
+		else if (!strcasecmp(optarg, "in"))
+			info->type = IPT_TRIGGER_IN;
+		else if (!strcasecmp(optarg, "out"))
+			info->type = IPT_TRIGGER_OUT;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "unknown type `%s' specified", optarg);
+		return 1;
+
+	case '2':
+		if (!strcasecmp(optarg, "tcp"))
+			info->proto = IPPROTO_TCP;
+		else if (!strcasecmp(optarg, "udp"))
+			info->proto = IPPROTO_UDP;
+		else if (!strcasecmp(optarg, "all"))
+			info->proto = 0;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "unknown protocol `%s' specified", optarg);
+		return 1;
+
+	case '3':
+		if (xtables_check_inverse(optarg, &invert, &optind, 0, NULL))
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unexpected `!' after --trigger-match");
+
+		parse_ports(optarg, info->ports.mport);
+		return 1;
+
+	case '4':
+		if (xtables_check_inverse(optarg, &invert, &optind, 0, NULL))
+			xtables_error(PARAMETER_PROBLEM,
+				   "Unexpected `!' after --trigger-relate");
+
+		parse_ports(optarg, info->ports.rport);
+		*flags |= IP_NAT_RANGE_PROTO_SPECIFIED;
+		return 1;
+
+	default:
+		return 0;
+	}
+}
+
+/* Final check; don't care. */
+static void final_check(unsigned int flags)
+{
+}
+
+/* Prints out the targinfo. */
+static void
+print(const void *ip,
+      const struct ipt_entry_target *target,
+      int numeric)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)target->data;
+
+	printf("TRIGGER ");
+	if (info->type == IPT_TRIGGER_DNAT)
+		printf("type:dnat ");
+	else if (info->type == IPT_TRIGGER_IN)
+		printf("type:in ");
+	else if (info->type == IPT_TRIGGER_OUT)
+		printf("type:out ");
+
+	if (info->proto == IPPROTO_TCP)
+		printf("tcp ");
+	else if (info->proto == IPPROTO_UDP)
+		printf("udp ");
+
+	printf("match:%hu", info->ports.mport[0]);
+	if (info->ports.mport[1] > info->ports.mport[0])
+		printf("-%hu", info->ports.mport[1]);
+	printf(" ");
+
+	printf("relate:%hu", info->ports.rport[0]);
+	if (info->ports.rport[1] > info->ports.rport[0])
+		printf("-%hu", info->ports.rport[1]);
+	printf(" ");
+}
+
+/* Saves the union ipt_targinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct ipt_entry_target *target)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)target->data;
+
+	printf("--trigger-proto ");
+	if (info->proto == IPPROTO_TCP)
+		printf("tcp ");
+	else if (info->proto == IPPROTO_UDP)
+		printf("udp ");
+	printf("--trigger-match %hu-%hu ", info->ports.mport[0], info->ports.mport[1]);
+	printf("--trigger-relate %hu-%hu ", info->ports.rport[0], info->ports.rport[1]);
+}
+
+static
+struct xtables_target trigger = {
+    	.name		=	"TRIGGER",
+ 	.version       	= 	XTABLES_VERSION,
+        .family        	=	NFPROTO_IPV4,
+	.size		=	XT_ALIGN(sizeof(struct ipt_trigger_info)),
+    	.userspacesize	=	XT_ALIGN(sizeof(struct ipt_trigger_info)),
+    	.help		=	&help,
+	.init		= 	&init,
+    	.parse		=	&parse,
+    	.final_check	=	&final_check,
+    	.print		=	&print,
+    	.save		=	&save,
+    	.extra_opts	=	opts
+};
+
+void _init(void)
+{
+	xtables_register_target(&trigger);
+}
diff -Naur iptables-1.4.6.orig/extensions/libipt_webstr.c iptables-1.4.6/extensions/libipt_webstr.c
--- iptables-1.4.6.orig/extensions/libipt_webstr.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.6/extensions/libipt_webstr.c	2011-01-20 17:57:41.115894303 +0530
@@ -0,0 +1,192 @@
+/* Shared library add-on to iptables to add string matching support. 
+ * 
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ *
+ * ChangeLog
+ *     27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *             Changed --tos to --string in save(). Also
+ *             updated to work with slightly modified
+ *             ipt_string_info.
+ */
+
+/* Shared library add-on to iptables to add webstr matching support. 
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ *
+ * Description:
+ *   This is shared library, added to iptables, for web content inspection. 
+ *   It was derived from 'string' matching support, declared as above.
+ *
+ */
+
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <iptables.h>
+#include <linux/netfilter_ipv4/ipt_webstr.h>
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"WEBSTR match v%s options:\n"
+"--webstr [!] host            Match a http string in a packet\n"
+"--webstr [!] url             Match a http string in a packet\n"
+"--webstr [!] content         Match a http string in a packet\n",
+IPTABLES_VERSION);
+
+	fputc('\n', stdout);
+}
+
+static struct option opts[] = {
+	{ "host", 1, 0, '1' },
+	{ "url", 1, 0, '2' },
+	{ "content", 1, 0, '3' },
+	{0}
+};
+
+/* Initialize the match. */
+static void
+init(struct ipt_entry_match *m)
+{
+struct ipt_webstr_info *stringinfo = (struct ipt_webstr_info *)m->data;
+}
+
+static void
+parse_string(const unsigned char *s, struct ipt_webstr_info *info)
+{	
+        if (strlen(s) <= BM_MAX_NLEN) strcpy(info->string, s);
+	else exit_error(PARAMETER_PROBLEM, "WEBSTR too long `%s'", s);
+}
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const struct ipt_entry *entry,
+      struct ipt_entry_match **match)
+{
+	struct ipt_webstr_info *stringinfo = (struct ipt_webstr_info *)(*match)->data;
+
+	switch (c) {
+	case '1':
+		check_inverse(optarg, &invert, &optind, 0);
+		parse_string(argv[optind-1], stringinfo);
+		if (invert)
+			stringinfo->invert = 1;
+                stringinfo->len=strlen((char *)&stringinfo->string);
+                stringinfo->type = IPT_WEBSTR_HOST;
+		break;
+
+	case '2':
+		check_inverse(optarg, &invert, &optind, 0);
+		parse_string(argv[optind-1], stringinfo);
+		if (invert)
+			stringinfo->invert = 1;
+                stringinfo->len=strlen((char *)&stringinfo->string);
+                stringinfo->type = IPT_WEBSTR_URL;
+		break;
+
+	case '3':
+		check_inverse(optarg, &invert, &optind, 0);
+		parse_string(argv[optind-1], stringinfo);
+		if (invert)
+			stringinfo->invert = 1;
+                stringinfo->len=strlen((char *)&stringinfo->string);
+                stringinfo->type = IPT_WEBSTR_CONTENT;
+		break;
+
+	default:
+		return 0;
+	}
+
+	*flags = 1;
+	return 1;
+}
+
+static void
+print_string(char string[], int invert, int numeric)
+{
+
+	if (invert)
+		fputc('!', stdout);
+	printf("%s ",string);
+}
+
+/* Final check; must have specified --string. */
+static void
+final_check(unsigned int flags)
+{
+	if (!flags)
+		exit_error(PARAMETER_PROBLEM,
+			   "WEBSTR match: You must specify `--webstr'");
+}
+
+/* Prints out the matchinfo. */
+static void
+print(const void *ip,
+      const struct ipt_entry_match *match,
+      int numeric)
+{
+	struct ipt_webstr_info *stringinfo = (struct ipt_webstr_info *)match->data;
+
+	printf("WEBSTR match ");
+
+	
+	switch (stringinfo->type) {
+	case IPT_WEBSTR_HOST:
+		printf("host ");
+		break;
+
+	case IPT_WEBSTR_URL:
+		printf("url ");
+		break;
+
+	case IPT_WEBSTR_CONTENT:
+		printf("content ");
+		break;
+
+	default:
+		printf("ERROR ");
+		break;
+	}
+
+	print_string(((struct ipt_webstr_info *)match->data)->string,
+		  ((struct ipt_webstr_info *)match->data)->invert, numeric);
+}
+
+/* Saves the union ipt_matchinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct ipt_entry_match *match)
+{
+	printf("--webstr ");
+	print_string(((struct ipt_webstr_info *)match->data)->string,
+		  ((struct ipt_webstr_info *)match->data)->invert, 0);
+}
+
+static
+struct xtables_match webstr = { 
+    	.name		=	"webstr",
+    	.version	=	XTABLES_VERSION,
+	.family         =       NFPROTO_IPV4,
+    	.size		=	XT_ALIGN(sizeof(struct ipt_webstr_info)),
+    	.userspacesize	=	XT_ALIGN(sizeof(struct ipt_webstr_info)),
+    	.help		=	&help,
+	.init		= 	&init,
+    	.parse		=	&parse,
+    	.final_check	=	&final_check,
+    	.print		=	&print,
+    	.save		=	&save,
+    	.extra_opts	=	opts
+};
+
+void _init(void)
+{
+	 xtables_register_match(&webstr);
+}
diff -Naur iptables-1.4.6.orig/include/linux/netfilter/xt_limit.h iptables-1.4.6/include/linux/netfilter/xt_limit.h
--- iptables-1.4.6.orig/include/linux/netfilter/xt_limit.h	2011-01-19 19:16:55.205892080 +0530
+++ iptables-1.4.6/include/linux/netfilter/xt_limit.h	2011-01-19 19:18:49.834646283 +0530
@@ -15,7 +15,9 @@
 	u_int32_t credit;
 	u_int32_t credit_cap, cost;
 
-	/* Ugly, ugly fucker. */
-	struct xt_rateinfo *master;
+	struct xt_limit_priv *master;
+#ifdef CONFIG_LTQ_NF_ADDONS
+       u_int8_t  invert; /* Invert: added mainly for synflood ipt_synflood */
+#endif
 };
 #endif /*_XT_RATE_H*/
