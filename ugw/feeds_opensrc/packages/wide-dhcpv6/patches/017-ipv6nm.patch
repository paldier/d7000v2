diff -Nuar wide-dhcpv6-20080615_org/dhcp6c.c wide-dhcpv6-20080615_modif/dhcp6c.c
--- wide-dhcpv6-20080615_org/dhcp6c.c	2011-07-18 17:01:10.917510904 +0530
+++ wide-dhcpv6-20080615_modif/dhcp6c.c	2011-07-20 19:43:09.435511850 +0530
@@ -79,6 +79,7 @@
 #include <prefixconf.h>
 #include <auth.h>
 
+
 static int debug = 0;
 static int exit_ok = 0;
 static sig_atomic_t sig_flags = 0;
@@ -88,6 +89,13 @@
 const dhcp6_mode_t dhcp6_mode = DHCP6_MODE_CLIENT;
 
 int sock;	/* inbound/outbound udp port */
+#ifdef ENABLE_IPV6NM
+int bcastnl_sock;
+extern int init_ipv6nm(int num);
+extern int open_nl6socket(void);
+extern int process_rlife();
+extern int register_intf(const char *ifname);
+#endif
 int rtsock;	/* routing socket */
 int ctlsock = -1;		/* control TCP port */
 char *ctladdr = DEFAULT_CLIENT_CONTROL_ADDR;
@@ -211,12 +219,18 @@
 	setloglevel(debug);
 
 	client6_init();
+#ifdef ENABLE_IPV6NM
+	init_ipv6nm(argc);
+#endif
 	while (argc-- > 0) { 
 		if ((ifp = ifinit(argv[0])) == NULL) {
 			dprintf(LOG_ERR, FNAME, "failed to initialize %s",
 			    argv[0]);
 			exit(1);
 		}
+#ifdef ENABLE_IPV6NM
+		register_intf(argv[0]);
+#endif
 		argv++;
 	}
 
@@ -539,6 +553,9 @@
 	int ret, maxsock;
 	fd_set r;
 
+#ifdef ENABLE_IPV6NM
+	bcastnl_sock = open_nl6socket();
+#endif
 	while(1) {
 		if (sig_flags)
 			process_signals();
@@ -547,6 +564,12 @@
 
 		FD_ZERO(&r);
 		FD_SET(sock, &r);
+
+#ifdef ENABLE_IPV6NM
+		if(bcastnl_sock >= 0) {
+			FD_SET(bcastnl_sock, &r);
+		}
+#endif
 		maxsock = sock;
 		if (ctlsock >= 0) {
 			FD_SET(ctlsock, &r);
@@ -554,6 +577,10 @@
 			(void)dhcp6_ctl_setreadfds(&r, &maxsock);
 		}
 
+#ifdef ENABLE_IPV6NM
+		maxsock = (maxsock > bcastnl_sock)?:bcastnl_sock;
+#endif
+
 		ret = select(maxsock + 1, &r, NULL, NULL, w);
 
 		switch (ret) {
@@ -578,6 +605,12 @@
 			}
 			(void)dhcp6_ctl_readcommand(&r);
 		}
+
+#ifdef ENABLE_IPV6NM
+		if (FD_ISSET(bcastnl_sock, &r)) {
+			process_rlife();
+		}
+#endif
 	}
 }
 
diff -Nuar wide-dhcpv6-20080615_org/ipv6nm.c wide-dhcpv6-20080615_modif/ipv6nm.c
--- wide-dhcpv6-20080615_org/ipv6nm.c	1970-01-01 05:30:00.000000000 +0530
+++ wide-dhcpv6-20080615_modif/ipv6nm.c	2011-07-21 16:55:17.403511449 +0530
@@ -0,0 +1,365 @@
+#include <net/if.h>
+#include <net/if_arp.h>
+
+#include <unistd.h>
+#include <linux/netlink.h>
+#include <linux/rtnetlink.h>
+#include <linux/socket.h>
+#include <string.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <net/if.h>
+
+
+#define NLMSG_OK2(nlh,len)	((len) >= (int)sizeof(struct nlmsghdr) && \
+				 (nlh)->nlmsg_len >= sizeof(struct nlmsghdr) && \
+				 (int)(nlh)->nlmsg_len <= (len))
+
+#define PID_FILE "/var/run/ipv6nm.pid"
+#define IPV6_ROUTE "/proc/net/ipv6_route"
+#define MAGIC_FLAG 0x50003
+#define RADVDUPDATE_SCRIPT "/etc/rc.d/update_and_run_radvd.sh"
+#define MAX_INTF 2              /* For multiple interfaces pls modify it
+                                   accordingly */
+#ifdef ENABLE_IPV6NM
+
+
+
+
+enum retstatus { true, false };
+struct intf_rarcvd {
+        char name[32];
+        int gw_status;
+        int occupied;
+} ;
+
+static struct intf_rarcvd *intfstatus;
+static int max_intf;
+
+int old_status, new_status;
+int bcast_sock = 0xdeaddead;    /* will listen to nl broadcast socket */
+
+int init_ipv6nm(int num)
+{
+	intfstatus = malloc(sizeof(struct intf_rarcvd) * num);
+	if(intfstatus == NULL) {
+		max_intf = 0;	
+		return -1;
+	}
+	memset(intfstatus, 0, sizeof(struct intf_rarcvd) * num);
+	max_intf = num;
+	return 0;
+}
+	
+struct intf_rarcvd *get_intf_info(const char *intf)
+{
+        int i;
+        if(intf == NULL) {
+                return NULL;
+        }
+        for(i = 0; i < max_intf; i++) {
+                if(intfstatus[i].occupied == 1) {
+                        struct intf_rarcvd *rt = &intfstatus[i];
+                        if(strcmp(intf, rt->name) == 0)
+                                return rt;
+                }
+        }
+        return NULL;
+}
+
+/*
+ * return value 1 means intf has rcved a valid ra
+ * return value 0 means intf hasn't rcvd a valid ra
+ */
+int get_gw_status(const char *intf)
+{
+        FILE *fp;
+        char *token;
+        int i;
+        char line[256];
+        char *l = line;
+        int flag = 0;
+
+        int status = 0;
+
+
+        if(intf == NULL)
+                return -1;
+
+        fp = fopen(IPV6_ROUTE, "r");
+        if(fp == NULL) {
+                return -1;
+        }
+        while(fgets(line, sizeof(line), fp) != NULL) {
+                int tmp_status = 0;
+                for(i = 1, l = line;; i++, l = NULL) {
+                        token = strtok(l, " ");
+                        if(token == NULL)
+                                break;
+                        if(i == 9) {
+                                sscanf(token, "%x", &flag);
+                                if((flag & MAGIC_FLAG) == MAGIC_FLAG) {
+                                        tmp_status = 1;
+                                }
+                        }
+                        if(i == 10) {
+				/* Last token contains \n char */
+                                token[strlen(token) - 1] = '\0';        
+                                if(strcmp(intf, token) == 0) {
+                                        if(tmp_status == 1) {
+                                                status = 1;
+                                                goto close_ret;
+                                        }
+                                }
+                        }
+
+                }
+        }
+      close_ret:
+        fclose(fp);
+        return status;
+}
+
+int call_user_script_nm(struct intf_rarcvd *iracvd)
+{
+        char cmd[256];
+        if(iracvd == NULL)
+                return -1;
+        snprintf(cmd, sizeof(cmd), RADVDUPDATE_SCRIPT " rlife %s %d",
+                 iracvd->name, iracvd->gw_status);
+        printf("calling " RADVDUPDATE_SCRIPT "with %d \n", iracvd->gw_status);
+        return system(cmd);
+}
+
+int register_intf(const char *ifname)
+{
+        int i;
+	if(ifname == NULL) {
+		return -1;
+	}
+        for(i = 0; i < max_intf; i++) {
+                if(intfstatus[i].occupied == 1
+                   && strcmp(ifname, intfstatus[i].name) == 0) {
+                        return 0;
+                }
+                if(intfstatus[i].occupied == 0) {
+                        struct intf_rarcvd *intf = &intfstatus[i];
+                        int curr_status;
+                        intf->occupied = 1;
+                        intf->gw_status = 0;
+                        snprintf(intf->name, sizeof(intfstatus[0].name), "%s",
+                                 ifname);
+                        curr_status = get_gw_status(ifname);
+                        if(curr_status != -1 && intf->gw_status != curr_status) {
+                                intf->gw_status = curr_status;
+#if 0 
+                                call_user_script_nm(intf);
+#endif
+                        }
+                        return 0;
+                }
+        }
+        return -1;
+}
+
+
+int process_nl_msg(int *buffer, int len)
+{
+        struct nlmsghdr *hd;
+        struct rtmsg *rtmsg_ptr;
+        struct rtattr *rtattr_ptr;
+        int rtmsg_len;
+        char ifc_str[128] = { '\0' };
+
+        for(hd = (struct nlmsghdr *)buffer; NLMSG_OK2(hd, len);
+            hd = NLMSG_NEXT(hd, len)) {
+                if(hd->nlmsg_type == NLMSG_DONE)
+                        return 0;
+                else if(hd->nlmsg_type == NLMSG_ERROR)
+                        return -1;
+
+                if(hd->nlmsg_len == 0)
+                        break;
+
+                rtmsg_ptr = (struct rtmsg *)NLMSG_DATA(hd);
+                if(rtmsg_ptr->rtm_table != RT_TABLE_MAIN) {
+                        continue;
+                }
+                rtattr_ptr = (struct rtattr *)RTM_RTA(rtmsg_ptr);
+                rtmsg_len = RTM_PAYLOAD(hd);
+                for(; RTA_OK(rtattr_ptr, rtmsg_len); rtattr_ptr = RTA_NEXT(rtattr_ptr, rtmsg_len)) {
+                        switch (rtattr_ptr->rta_type) {
+/*
+                        case RTA_DST:
+                                inet_ntop(AF_INET6, RTA_DATA(rtattr_ptr), dst_str, 128);
+                                break;
+                        case RTA_GATEWAY:
+                                inet_ntop(AF_INET6, RTA_DATA(rtattr_ptr), gw_str, 128);
+                                break;
+*/
+                            case RTA_OIF:
+                                    if_indextoname(*
+                                                   ((unsigned int *)
+                                                    RTA_DATA(rtattr_ptr)),
+                                                   ifc_str);
+                            default:
+                                    break;
+                        }
+
+                }
+                switch (hd->nlmsg_type) {
+                    case RTM_NEWROUTE:
+                    case RTM_DELROUTE:
+                            {
+                                    struct intf_rarcvd *iracvd =
+                                        get_intf_info(ifc_str);
+                                    int curr_status;
+                                    if(iracvd == NULL) {
+                                            break;
+                                    }
+
+                                    curr_status = get_gw_status(ifc_str);
+                                    if(curr_status != -1
+                                       && iracvd->gw_status != curr_status) {
+                                            iracvd->gw_status = curr_status;
+                                            call_user_script_nm(iracvd);
+                                    }
+                            }
+                            break;
+                    default:
+                            printf("DEFAULT\n");
+                            break;
+                }
+
+        }
+}
+
+int open_nl6socket()
+{
+        struct sockaddr_nl localaddr;
+	static int initialized = 0;
+
+	if(initialized != 0) {
+		return bcast_sock;
+	}
+
+	initialized = 1;
+        bcast_sock = socket(PF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
+        memset(&localaddr, 0, sizeof(localaddr));
+        localaddr.nl_family = AF_NETLINK;
+        localaddr.nl_groups = RTMGRP_IPV6_ROUTE;
+
+        if(bcast_sock != -1) {
+                if(bind (bcast_sock, (struct sockaddr *)&localaddr, sizeof(localaddr)) < 0) {
+                        close(bcast_sock);
+                        perror("bind:\n");
+                }
+                return bcast_sock;
+        }
+        return -1;
+}
+
+int close_nl6socket()
+{
+        close(bcast_sock);
+}
+
+int process_rlife()
+{
+
+        int len;
+        int buffer[1024];
+
+        if(bcast_sock == 0xdeaddead || bcast_sock < 0) {
+                return -1;
+        }
+        len = recv(bcast_sock, buffer, sizeof(buffer), MSG_DONTWAIT | MSG_NOSIGNAL);
+        if(len < 0) {
+                return -1;
+        }
+        process_nl_msg(buffer, len);
+        return 0;
+}
+
+#if 0
+void daemonize(void)
+{
+        pid_t pid, sid;
+
+        /* already a daemon */
+        if(getppid() == 1)
+                return;
+
+        /* Fork off the parent process */
+        pid = fork();
+        if(pid < 0) {
+                exit(1);
+        }
+        /* If we got a good PID, then we can exit the parent process. */
+        if(pid > 0) {
+                exit(0);
+        }
+
+        /* At this point we are executing as the child process */
+
+        /* Change the file mode mask */
+        umask(0);
+
+        /* Create a new SID for the child process */
+        sid = setsid();
+        if(sid < 0) {
+                exit(1);
+        }
+
+        /* Change the current working directory.  This prevents the current *
+           directory from being locked; hence not being able to remove it. */
+        if((chdir("/")) < 0) {
+                exit(1);
+        }
+
+        /* Redirect standard files to /dev/null */
+        freopen("/dev/null", "r", stdin);
+        freopen("/dev/null", "w", stdout);
+        freopen("/dev/null", "w", stderr);
+}
+
+int main()
+{
+
+        FILE *pidf;
+        pid_t oldpid;
+        char procpath[64];
+        int fd;
+
+        pidf = fopen(PID_FILE, "a+");
+        if(pidf == NULL) {
+                perror("Error opening " PID_FILE);
+                exit(1);
+        }
+
+/* Check for duplicate instance.. */
+
+        fscanf(pidf, "%d", &oldpid);
+        snprintf(procpath, sizeof(procpath), "/proc/%d/cmdline", oldpid);
+        fd = open(procpath, O_RDONLY);
+        if(fd >= 0) {
+                if(read(fd, procpath, sizeof(procpath)) > 0) {
+                        printf("(%s)%d is already running\n", procpath, oldpid);
+                        fclose(pidf);
+                        exit(1);
+                }
+        }
+        rewind(pidf);
+        daemonize();
+        fprintf(pidf, "%d\n", getpid());
+        fclose(pidf);
+        daemon_loop();
+        return 0;
+
+}
+#endif
+#endif
diff -Nuar wide-dhcpv6-20080615_org/Makefile.in wide-dhcpv6-20080615_modif/Makefile.in
--- wide-dhcpv6-20080615_org/Makefile.in	2011-07-18 17:01:10.919510537 +0530
+++ wide-dhcpv6-20080615_modif/Makefile.in	2011-07-20 16:51:43.784511335 +0530
@@ -37,7 +37,7 @@
 group= @group@
 
 CFLAGS=	@CFLAGS@ @DEFS@ -DDHCP6_TAHI_FIX -DADDR_PREFIX_SUPPORT \
-	-DADDR_OVERRIDE_HOST_CONF -DUPDATE_PD_IN_RADVD \
+	-DADDR_OVERRIDE_HOST_CONF -DUPDATE_PD_IN_RADVD -DENABLE_IPV6NM \
 	-DSYSCONFDIR=\"${sysconfdir}\" \
 	-DLOCALDBDIR=\"${localdbdir}\" \
 	${DEP_FLAGS}
@@ -58,7 +58,7 @@
 
 GENSRCS=cfparse.c cftoken.c
 CLIENTOBJS=	dhcp6c.o common.o config.o prefixconf.o dhcp6c_ia.o timer.o \
-	dhcp6c_script.o if.o base64.o auth.o dhcp6_ctl.o addrconf.o lease.o \
+	dhcp6c_script.o if.o base64.o auth.o dhcp6_ctl.o addrconf.o lease.o ipv6nm.o \
 	$(GENSRCS:%.c=%.o)
 SERVOBJS=	dhcp6s.o common.o if.o config.o timer.o lease.o \
 	base64.o auth.o dhcp6_ctl.o $(GENSRCS:%.c=%.o)
diff -Nuar wide-dhcpv6-20080615_org/prefixconf.c wide-dhcpv6-20080615_modif/prefixconf.c
--- wide-dhcpv6-20080615_org/prefixconf.c	2011-07-18 17:01:10.908510635 +0530
+++ wide-dhcpv6-20080615_modif/prefixconf.c	2011-07-21 18:16:07.522511827 +0530
@@ -660,6 +660,130 @@
 	return (NULL);
 }
 
+#ifdef UPDATE_PD_IN_RADVD
+static int	
+call_user_script_pd(siteprefix, prefix, pconf, dhcpifp, optinfo, a, ifpfx)
+	struct siteprefix *siteprefix;
+	struct dhcp6_prefix *prefix;
+	struct prefix_ifconf *pconf;
+	struct dhcp6_if *dhcpifp;
+	struct dhcp6_optinfo *optinfo;
+	struct in6_addr *a;
+	struct dhcp6_ifprefix *ifpfx;
+{
+#define RADVD_SCRIPT "/etc/rc.d/update_and_run_radvd.sh"
+	int status;
+	pid_t pid;
+	pid = fork();
+	if(pid == 0) { 	/* Child */
+		char *env[16];
+		char *argv[3];
+		char envbuf[sizeof(env)/sizeof(char *)-1][64];
+		int	i;
+		int dnsservers = 0;
+		int dnsnamelen = 0;
+		struct dhcp6_listval *v;
+		int env_max_idx = (sizeof(env)/sizeof(char *)) -1;
+
+		for (v = TAILQ_FIRST(&optinfo->dns_list); v; v = TAILQ_NEXT(v, link)) {
+			dnsservers++;
+		}
+
+		for (v = TAILQ_FIRST(&optinfo->dnsname_list); v; v = TAILQ_NEXT(v, link)) {
+			dnsnamelen += v->val_vbuf.dv_len;
+		}
+
+		memset(env, 0, sizeof(env));
+		for (i=0; i<sizeof(env)/sizeof(char *)-1 ; i++) {
+			env[i] = envbuf[i];
+		}
+	
+		i = 0;
+		snprintf(env[i++], sizeof(envbuf[0]), "PREFIX=%s/%d", in6addr2str(a, 0) , ifpfx->plen);
+		snprintf(env[i++], sizeof(envbuf[0]), "PLIFETIME=%lu", prefix->pltime);
+		snprintf(env[i++], sizeof(envbuf[0]), "VLIFETIME=%lu", prefix->vltime);
+		snprintf(env[i++], sizeof(envbuf[0]), "EVENT_SRC=WAN");
+		snprintf(env[i++], sizeof(envbuf[0]), "SRC_INTF=%s", dhcpifp->ifname);
+		snprintf(env[i++], sizeof(envbuf[0]), "EVENT_TYPE=UP");
+		snprintf(env[i++], sizeof(envbuf[0]), "INTF=%s", pconf->ifname);
+
+		if(dnsservers && i <= env_max_idx - 2 ) {
+			int c = 0;
+			for (v = TAILQ_FIRST(&optinfo->dns_list); v; v = TAILQ_NEXT(v, link)) {
+				char *addr;
+
+				addr = in6addr2str(&v->val_addr6, 0);
+				if(c < 2) {
+					snprintf(env[i++], sizeof(envbuf[0]), "DNS%d=%s", c+1, addr);
+					c++;
+				}
+			}
+		}
+
+		if (dnsnamelen && i <= env_max_idx -1) { 
+#define	DOMAIN_NAME6 "DOMAIN_NAME6=" 
+			int elen = sizeof (DOMAIN_NAME6) + dnsnamelen + 1; 
+			char *s = NULL;
+			if (elen <= sizeof(envbuf[0]) || ((s = malloc(elen)) == NULL)) { 
+				dprintf(LOG_NOTICE, FNAME, 
+				    "%s:either elen is <= sizeof(envbuf[0]) or malloc returned NULL ", __func__); 
+				s = env[i++];
+				elen = sizeof(envbuf[0]);
+				
+			} else {
+				memset(s, 0, elen); 
+				env[i++] = s;
+			}
+			snprintf(s, elen, "%s", DOMAIN_NAME6);	
+			for (v = TAILQ_FIRST(&optinfo->dnsname_list); v; 
+			    v = TAILQ_NEXT(v, link)) { 
+				int l = strlen(s) + 2; /* for " " char */
+				int freebytes = elen - l;
+				if(freebytes <= 0) {
+					break;
+				}
+				strncat(s, v->val_vbuf.dv_buf, freebytes); 
+				strncat(s, " ", 1); 
+			} 
+		}
+#ifdef ENABLE_IPV6NM
+		{
+			int gw_status = get_gw_status(dhcpifp->ifname);
+
+			if(gw_status == 0) {
+				snprintf(env[i++], sizeof(envbuf[0]), "RLZERO=%d", 1);
+			} else 	if(gw_status == 1) {
+				snprintf(env[i++], sizeof(envbuf[0]), "RLZERO=%d", 0);
+			}
+		}
+#endif
+		
+
+		if(i > env_max_idx ) {
+				dprintf(LOG_NOTICE, FNAME, 
+				    "%s: Number of env variable exceeds the max allowed\n", __func__); 
+			env[env_max_idx] = NULL;
+			
+		} else {
+			env[i] = NULL;
+		}
+		argv[0]= RADVD_SCRIPT;
+		argv[1]= "update";
+		argv[2]= NULL;
+		execve(RADVD_SCRIPT, argv, env);
+		dprintf(LOG_ERR, FNAME, "child:%s exec failed: %s", RADVD_SCRIPT, strerror(errno));
+		exit(1); 	/* Exit child  ... no need to free allocated memory */
+	} else if (pid > 0 ) {  /* parent waits child to exit */
+		waitpid(pid, &status, 0);
+		printf("*********" RADVD_SCRIPT " exited with %d*******\n", status);
+	} else { 	/* error */
+		dprintf(LOG_DEBUG, FNAME, "Unable to fork to run %s\n", RADVD_SCRIPT);
+	}
+			
+}
+#endif
+
+
 static int
 add_ifprefix(siteprefix, prefix, pconf, dhcpifp, optinfo)
 	struct siteprefix *siteprefix;
@@ -731,64 +855,7 @@
 	for (i = 15; i >= pconf->ifid_len / 8; i--)
 		ifpfx->ifaddr.sin6_addr.s6_addr[i] = pconf->ifid[i];
 #ifdef UPDATE_PD_IN_RADVD
-	{
-#define RADVD_SCRIPT "/etc/rc.d/update_and_run_radvd.sh"
-		int status;
-		pid_t pid;
-		pid = fork();
-		if(pid == 0) { 	/* Child */
-			char *env[10];
-			char *argv[3];
-			char envbuf[sizeof(env)/sizeof(char *)-1][64];
-			int	i;
-			int dnsservers = 0;
-			struct dhcp6_listval *v;
-
-#if 1
-			for (v = TAILQ_FIRST(&optinfo->dns_list); v; v = TAILQ_NEXT(v, link))
-				dnsservers++;
-#endif
-			memset(env, 0, sizeof(env));
-			for (i=0; i<sizeof(env)/sizeof(char *)-1 ; i++) {
-				env[i] = envbuf[i];
-			}
-		
-			snprintf(env[0], sizeof(envbuf[0]), "PREFIX=%s/%d", in6addr2str(a, 0) , ifpfx->plen);
-			snprintf(env[1], sizeof(envbuf[0]), "PLIFETIME=%lu", prefix->pltime);
-			snprintf(env[2], sizeof(envbuf[0]), "VLIFETIME=%lu", prefix->vltime);
-			snprintf(env[3], sizeof(envbuf[0]), "EVENT_SRC=WAN");
-			snprintf(env[4], sizeof(envbuf[0]), "SRC_INTF=%s", dhcpifp->ifname);
-			snprintf(env[5], sizeof(envbuf[0]), "EVENT_TYPE=UP");
-			snprintf(env[6], sizeof(envbuf[0]), "INTF=%s", pconf->ifname);
-#if 1
-			if(dnsservers) {
-				i = 0;
-				for (v = TAILQ_FIRST(&optinfo->dns_list); v; v = TAILQ_NEXT(v, link)) {
-					char *addr;
-
-					addr = in6addr2str(&v->val_addr6, 0);
-					if(i < 2) {
-						snprintf(env[7+i], sizeof(envbuf[0]), "DNS%d=%s", i+1, addr);
-						i++;
-					}
-				}
-			}
-#endif
-			env[9] = NULL;
-			argv[0]= RADVD_SCRIPT;
-			argv[1]= "update";
-			argv[2]= NULL;
-			execve(RADVD_SCRIPT, argv, env);
-			dprintf(LOG_ERR, FNAME, "child:%s exec failed: %s", RADVD_SCRIPT, strerror(errno));
-			exit(0);
-		} else if (pid > 0 ) {  /* parent waits child to exit */
-			waitpid(pid, &status, 0);
-			printf("*********" RADVD_SCRIPT " exited with %d*******\n", status);
-		} else { 	/* error */
-			dprintf(LOG_DEBUG, FNAME, "Unable to fork to run %s\n", RADVD_SCRIPT);
-		}
-				
-	}
+	call_user_script_pd(siteprefix, prefix, pconf, dhcpifp, optinfo, a, ifpfx);
 #endif
 
 	if (pd_ifaddrconf(IFADDRCONF_ADD, ifpfx))
