--- /dev/null
+++ b/extensions/libipt_TRIGGER.c
@@ -0,0 +1,199 @@
+/* Port-triggering target. 
+ *
+ * Copyright (C) 2003, CyberTAN Corporation
+ * All Rights Reserved.
+ */
+
+/* Shared library add-on to iptables to add port-trigger support. */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <iptables.h>
+#include <xtables.h>
+#include <include/linux/netfilter/nf_nat.h>
+#include <include/linux/netfilter_ipv4/ip_tables.h>
+#include <include/linux/netfilter_ipv4/ipt_TRIGGER.h>
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"TRIGGER v%s options:\n"
+" --trigger-type (dnat|in|out)\n"
+"				Trigger type\n"
+" --trigger-proto proto\n"
+"				Trigger protocol\n"
+" --trigger-match port[-port]\n"
+"				Trigger destination port range\n"
+" --trigger-relate port[-port]\n"
+"				Port range to map related destination port range to.\n\n",
+XTABLES_VERSION);
+}
+
+static struct option opts[] = {
+	{.name = "trigger-type", .has_arg = true, .val = '1'},
+	{.name = "trigger-proto", .has_arg = true, .val = '2'},
+	{.name = "trigger-match", .has_arg = true, .val = '3'},
+	{.name = "trigger-relate", .has_arg = true, .val = '4'},
+	XT_GETOPT_TABLEEND,
+};
+
+/* Initialize the target. */
+static void
+init(struct xt_entry_target *t)
+{
+}
+
+/* Parses ports */
+static void
+parse_ports(const char *arg, u_int16_t *ports)
+{
+	const char *dash;
+	int port;
+
+	port = atoi(arg);
+	if (port == 0 || port > 65535)
+		xtables_error(PARAMETER_PROBLEM, "Port range `%s' invalid\n", arg);
+
+	dash = strchr(arg, '-');
+	if (!dash)
+		ports[0] = ports[1] = port;
+	else {
+		int maxport;
+
+		maxport = atoi(dash + 1);
+		if (maxport == 0 || maxport > 65535)
+			xtables_error(PARAMETER_PROBLEM,
+				   "Port range `%s' invalid\n", dash+1);
+		if (maxport < port)
+			xtables_error(PARAMETER_PROBLEM,
+				   "Port range `%s' invalid\n", arg);
+		ports[0] = port;
+		ports[1] = maxport;
+	}
+}
+
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const void *entry,
+      struct xt_entry_target **target)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)(*target)->data;
+
+	switch (c) {
+	case '1':
+		if (!strcasecmp(optarg, "dnat"))
+			info->type = IPT_TRIGGER_DNAT;
+		else if (!strcasecmp(optarg, "in"))
+			info->type = IPT_TRIGGER_IN;
+		else if (!strcasecmp(optarg, "out"))
+			info->type = IPT_TRIGGER_OUT;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "unknown type `%s' specified", optarg);
+		return 1;
+
+	case '2':
+		if (!strcasecmp(optarg, "tcp"))
+			info->proto = IPPROTO_TCP;
+		else if (!strcasecmp(optarg, "udp"))
+			info->proto = IPPROTO_UDP;
+		else if (!strcasecmp(optarg, "all"))
+			info->proto = 0;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+				   "unknown protocol `%s' specified", optarg);
+		return 1;
+
+	case '3':
+		parse_ports(optarg, info->ports.mport);
+		return 1;
+
+	case '4':
+		parse_ports(optarg, info->ports.rport);
+		*flags |= NF_NAT_RANGE_PROTO_SPECIFIED;
+		return 1;
+
+	default:
+		return 0;
+	}
+}
+
+/* Final check; don't care. */
+static void final_check(unsigned int flags)
+{
+}
+
+/* Prints out the targinfo. */
+static void
+print(const void *ip,
+      const struct xt_entry_target *target,
+      int numeric)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)target->data;
+
+	printf("TRIGGER ");
+	if (info->type == IPT_TRIGGER_DNAT)
+		printf("type:dnat ");
+	else if (info->type == IPT_TRIGGER_IN)
+		printf("type:in ");
+	else if (info->type == IPT_TRIGGER_OUT)
+		printf("type:out ");
+
+	if (info->proto == IPPROTO_TCP)
+		printf("tcp ");
+	else if (info->proto == IPPROTO_UDP)
+		printf("udp ");
+
+	printf("match:%hu", info->ports.mport[0]);
+	if (info->ports.mport[1] > info->ports.mport[0])
+		printf("-%hu", info->ports.mport[1]);
+	printf(" ");
+
+	printf("relate:%hu", info->ports.rport[0]);
+	if (info->ports.rport[1] > info->ports.rport[0])
+		printf("-%hu", info->ports.rport[1]);
+	printf(" ");
+}
+
+/* Saves the union ipt_targinfo in parsable form to stdout. */
+static void
+save(const void *ip, const struct xt_entry_target *target)
+{
+	struct ipt_trigger_info *info = (struct ipt_trigger_info *)target->data;
+
+	printf("--trigger-proto ");
+	if (info->proto == IPPROTO_TCP)
+		printf("tcp ");
+	else if (info->proto == IPPROTO_UDP)
+		printf("udp ");
+	printf("--trigger-match %hu-%hu ", info->ports.mport[0], info->ports.mport[1]);
+	printf("--trigger-relate %hu-%hu ", info->ports.rport[0], info->ports.rport[1]);
+}
+
+static struct xtables_target trigger = {
+	.family		= NFPROTO_IPV4,
+	.name		= "TRIGGER",
+	.version	= XTABLES_VERSION,
+	.size		= XT_ALIGN(sizeof(struct ipt_trigger_info)),
+	.userspacesize	= XT_ALIGN(sizeof(struct ipt_trigger_info)),
+	.help		= &help,
+	.init		= &init,
+	.parse		= &parse,
+	.final_check	= &final_check,
+	.print		= &print,
+	.save		= &save,
+	.extra_opts	= opts 
+};
+
+void _init(void)
+{
+	xtables_register_target(&trigger);
+}
--- a/include/linux/netfilter/xt_limit.h
+++ b/include/linux/netfilter/xt_limit.h
@@ -1,24 +1,23 @@
 #ifndef _XT_RATE_H
 #define _XT_RATE_H
 
-#include <linux/types.h>
-
 /* timings are in milliseconds. */
 #define XT_LIMIT_SCALE 10000
 
-struct xt_limit_priv;
-
 /* 1/10,000 sec period => max of 10,000/sec.  Min rate is then 429490
    seconds, or one every 59 hours. */
 struct xt_rateinfo {
-	__u32 avg;    /* Average secs between packets * scale */
-	__u32 burst;  /* Period multiplier for upper limit. */
+	u_int32_t avg;    /* Average secs between packets * scale */
+	u_int32_t burst;  /* Period multiplier for upper limit. */
 
 	/* Used internally by the kernel */
-	unsigned long prev; /* moved to xt_limit_priv */
-	__u32 credit; /* moved to xt_limit_priv */
-	__u32 credit_cap, cost;
+	unsigned long prev;
+	u_int32_t credit;
+	u_int32_t credit_cap, cost;
 
 	struct xt_limit_priv *master;
+#ifdef CONFIG_LTQ_NF_ADDONS
+       u_int8_t  invert; /* Invert: added mainly for synflood ipt_synflood */
+#endif
 };
 #endif /*_XT_RATE_H*/
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_TRIGGER.h
@@ -0,0 +1,24 @@
+#ifndef _IPT_TRIGGER_H_target 
+#define _IPT_TRIGGER_H_target 
+  
+#define TRIGGER_TIMEOUT 600     /* 600 secs */ 
+  
+enum ipt_trigger_type 
+{ 
+       IPT_TRIGGER_DNAT = 1, 
+       IPT_TRIGGER_IN = 2, 
+        IPT_TRIGGER_OUT = 3 
+}; 
+ 
+struct ipt_trigger_ports { 
+        u_int16_t mport[2];     /* Related destination port range */ 
+        u_int16_t rport[2];     /* Port range to map related destination port range to */ 
+}; 
+ 
+struct ipt_trigger_info { 
+        enum ipt_trigger_type type; 
+        u_int16_t proto;        /* Related protocol */ 
+        struct ipt_trigger_ports ports; 
+}; 
+ 
+#endif /*_IPT_TRIGGER_H_target*/ 
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_synflood.h
@@ -0,0 +1,36 @@
+#ifndef _IPT_SYNFLOOD_H
+#define _IPT_SYNFLOOD_H
+
+#include <linux/param.h>
+#include <linux/types.h>
+#include <linux/netfilter/xt_limit.h>
+#define IPT_LIMIT_SCALE XT_LIMIT_SCALE
+#define ipt_rateinfo xt_rateinfo
+
+/* 1/10,000 sec period => max of 10,000/sec.  Min rate is then 429490
+   seconds, or one every 59 hours. */
+/*
+ * Keep track of up to LIST_SIZE source addresses, using a hash table of
+ * HASH_SIZE entries for faster lookups, but limiting hash collisions to
+ * HASH_MAX source addresses per the same hash value.
+ */
+#define LIST_SIZE                      0x40
+#define HASH_LOG                       7
+#define HASH_SIZE                      (1 << HASH_LOG)
+#define HASH_MAX                       0x10
+
+enum addr_type_t { DESTINATION=0, SOURCE };
+#if 0
+struct ipt_rateinfo {
+       u_int32_t avg;    /* Average secs between packets * scale */
+       u_int32_t burst;  /* Period multiplier for upper limit. */
+       u_int8_t  invert; /* Invert */
+
+       /* Used internally by the kernel */
+       u_int32_t credit;
+       u_int32_t credit_cap, cost;
+       enum addr_type_t addr_type;
+};
+#endif
+#endif /*_IPT_SYNFLOOD_H*/
+
--- /dev/null
+++ b/include/linux/netfilter_ipv4/ipt_webstr.h
@@ -0,0 +1,28 @@
+#ifndef _IPT_WEBSTR_H
+#define _IPT_WEBSTR_H
+
+#define BM_MAX_NLEN 256
+#define BM_MAX_HLEN 1024
+
+#define BLK_JAVA		0x01
+#define BLK_ACTIVE		0x02
+#define BLK_COOKIE		0x04
+#define BLK_PROXY		0x08
+
+typedef char *(*proc_ipt_search) (char *, char *, int, int);
+
+struct ipt_webstr_info {
+    char string[BM_MAX_NLEN];
+    u_int16_t invert;
+    u_int16_t len;
+    u_int8_t type;
+};
+
+enum ipt_webstr_type
+{
+    IPT_WEBSTR_HOST,
+    IPT_WEBSTR_URL,
+    IPT_WEBSTR_CONTENT
+};
+
+#endif /* _IPT_WEBSTR_H */
--- a/libxtables/xtables.c
+++ b/libxtables/xtables.c
@@ -44,8 +44,8 @@
 
 #include <xtables.h>
 #include <limits.h> /* INT_MAX in ip_tables.h/ip6_tables.h */
-#include <linux/netfilter_ipv4/ip_tables.h>
-#include <linux/netfilter_ipv6/ip6_tables.h>
+#include <include/linux/netfilter_ipv4/ip_tables.h>
+#include <include/linux/netfilter_ipv6/ip6_tables.h>
 #include <libiptc/libxtc.h>
 
 #ifndef NO_SHARED_LIBS
@@ -1867,6 +1867,38 @@ void xtables_save_string(const char *val
 	}
 }
 
+
+/**
+ * Check for option-intrapositional negation.
+ * Do not use in new code.
+ */
+int xtables_check_inverse(const char option[], int *invert,
+			  int *my_optind, int argc, char **argv)
+{
+	if (option == NULL || strcmp(option, "!") != 0)
+		return false;
+
+	fprintf(stderr, "Using intrapositioned negation "
+	        "(`--option ! this`) is deprecated in favor of "
+	        "extrapositioned (`! --option this`).\n");
+
+	if (*invert)
+		xt_params->exit_err(PARAMETER_PROBLEM,
+			   "Multiple `!' flags not allowed");
+	*invert = true;
+	if (my_optind != NULL) {
+		optarg = argv[*my_optind];
+		++*my_optind;
+		if (argc && *my_optind > argc)
+			xt_params->exit_err(PARAMETER_PROBLEM,
+				   "no argument following `!'");
+	}
+
+	return true;
+}
+
+
+
 const struct xtables_pprot xtables_chain_protos[] = {
 	{"tcp",       IPPROTO_TCP},
 	{"sctp",      IPPROTO_SCTP},
