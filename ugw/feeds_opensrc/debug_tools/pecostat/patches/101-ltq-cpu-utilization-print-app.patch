Index: srcBE/pecostat_tool.c
===================================================================
--- srcBE.orig/pecostat_tool.c	2011-03-22 05:26:55.000000000 +0530
+++ srcBE/pecostat_tool.c	2013-02-11 20:13:01.000000000 +0530
@@ -207,6 +207,11 @@
 static unsigned char *LKM_Buffer;
 static int LKM_Buffer_Size;
 
+/* CPU utilization calculation related - Ritesh */
+static unsigned long long CPUCycles=0;
+static unsigned long long ClkCycles=0;
+
+
 extern char *strndup();
 void read_perf_ctr();
 void test_pecostat_device();
@@ -399,6 +404,9 @@
 char *argv[];
 {
     printf( "# %s version %s\n", Progname, Version );
+    printf( " **Warning****: Please check the Event counters used to avoid clash on the following platforms -- \n");
+    printf( "\t\txRX288, xRX282 IAD SoC : Counter 2 cannot be used! Counter 3 and 4 optionally if Firmware stats function is enabled\n");
+    printf( "\t\txRX188, xRX182 IAD SoC : Counter 1,2,3 cannot be used\n");
 /*     printf( "progname=%s\n", Progname ); */
     Events[0] = Events02;
     Events[2] = Events02;
@@ -477,6 +485,7 @@
 void
 run_pecostat()
 {
+    int i;
     /* Set the signal handling */
     set_signals();
 
@@ -490,9 +499,14 @@
     Tv1 = Tv0;
     for (RoundNo=0; RoundNo<Count || Count == -1; RoundNo++) {
         for (Esp = EventSpecs, EventNo=0; Esp != NULL; Esp = Esp->next, EventNo++) {
-            if (Debug)
+            if (Debug) {
                 printf( " ... sleeping with Interval_spec=(%d, %ld) ...\n",
                     Interval_spec.tv_sec, Interval_spec.tv_nsec );
+                printf( " Reading for events : ...\n");
+                for (i=0; i< 8; i++) {
+                    printf(" Event%d=[%d]\n", Esp->pic[i].event);
+                }
+            }
             nanosleep( &Interval_spec, NULL );
             if (Debug)
                 printf( "reading data for round%d\n", RoundNo );
@@ -1320,13 +1334,20 @@
           printf( "%.6f, %.3f :", time_diff0, delta );
                 /* here is the cycles Count printed */
           printf( " %8Lu", EventData[Npc] * CCRes[0] );
+          ClkCycles = EventData[Npc] * CCRes[0];
           /* and here are the requested performance counters readouts */
           /*
            * show only (PicnoMax + 1) counters
            */
+          /* XXX: Ritesh, try printing out CPU util automatically */
           for (ctr=0; ctr<=PicnoMax; ctr++) {
               printf( " %8Lu", EventData[ctr] );
+              if (Esp->pic[ctr].event == 0) {
+                  /* We are measuring Event 0 aka Cycles, so CPU util can be calculated*/
+                  CPUCycles = EventData[ctr];
+              }
           }
+          if (CPUCycles) printf( " CPU (%5.2f%%)", ((double)CPUCycles) * 100 / ClkCycles);
           printf( " # [%d/%d] %s\n", RoundNo, EventNo, Esp->text[0] );
 /*
           printf( " # [%d/%d] %s,vp=%d\n", RoundNo, EventNo, Esp->text[0], VpNumber[i] );
@@ -1339,12 +1360,22 @@
                 /* here is the cycles Count printed */
                 printf( " %8Lu",
                     EventData[i*(MIPS_HPC_MAX+1)+MIPS_HPC_MAX] * CCRes[i] );
+                ClkCycles = EventData[i*(MIPS_HPC_MAX+1)+MIPS_HPC_MAX] * CCRes[i];
+                for (Esp = EventSpecs=0; Esp != NULL; Esp = Esp->next) {
+          /* and here are the requested performance counters readouts */
                 /* and here are the requested performance counters readouts */
                 for (ctr=0; ctr<MIPS_HPC_MAX; ctr++) {
                     printf( " %8Lu", EventData[i*(MIPS_HPC_MAX+1)+ctr] );
+                  if (Esp->pic[i*MIPS_HPC_MAX+ctr].event == 0) {
+                      /* We are measuring Event 0 aka Cycles, so CPU util can be calculated*/
+                      CPUCycles = EventData[i*MIPS_HPC_MAX+ctr];
+                  }
+                }
                 }
+                if (CPUCycles) printf( " CPU (%5.2f%%)", ((double)CPUCycles) * 100 / ClkCycles);
                 printf( " # [%d/%d] %s,vp=%d\n", RoundNo, EventNo, Esp->text[i], VpNumber[i] );
             }
+            CPUCycles = ClkCycles = 0; /* for next pic statement */
         }
       }
     }
