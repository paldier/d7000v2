Index: srcBE/pecostat_noIRQ.c
===================================================================
--- srcBE.orig/pecostat_noIRQ.c
+++ srcBE/pecostat_noIRQ.c
@@ -66,14 +66,14 @@ static void __exit pecostat_exit(void);
 static int pecostat_device_open(struct inode *, struct file *);
 static int pecostat_device_release(struct inode *, struct file *);
 static loff_t pecostat_device_llseek(struct file *, loff_t, int);
-static ssize_t pecostat_device_read(struct file *, char *, size_t, loff_t *);
+ssize_t pecostat_device_read(struct file *, char *, size_t, loff_t *);
 #if PROCESSOR_1004K
  static void read_vp_registers(void*);
  static void cm_info(void);
  static void read_cmcntrs(void);
 #endif
  static void set_new_events(void);
-static ssize_t pecostat_device_write(struct file*,const char*,size_t,loff_t*);
+ssize_t pecostat_device_write(struct file*,const char*,size_t,loff_t*);
  static void save_current_events(void);
 
 static void restore_counters(void);
@@ -103,7 +103,7 @@ static int (*perf_irq_stolen)(struct pt_
 #define VPE1_MASK    2
 
 
-static int Device_Open = 0;	/* Is device open?  
+int Device_Open = 0;	/* Is device open?  
 				 * Used to prevent multiple access to device */
 static unsigned Proctype;
 static unsigned Prid;
@@ -394,7 +394,7 @@ static loff_t pecostat_device_llseek(str
  * Called when a process, which already opened the dev file, attempts to
  * read from it. The "read" action depends on the "Pecostat_position".
  */
-static ssize_t pecostat_device_read(
+ssize_t pecostat_device_read(
                                struct file *filp,/* see include/linux/fs.h */
                                char *buffer,	 /* buffer to fill with data */
                                size_t length, /* length of the buffer */
@@ -486,7 +486,15 @@ static ssize_t pecostat_device_read(
         pcinfo.cm_npc = CM_npc;
         pcinfo.flags = 0;
 
-        copy_to_user(buffer, &pcinfo, length);
+	if(filp != NULL)
+	{
+		copy_to_user(buffer, &pcinfo, length);
+	}
+	else
+	{
+		memcpy(buffer, &pcinfo, length);
+	}
+
         return length;
     } else if( Pecostat_position == PECOSTAT_CONFIG_SEEK ) {
         PECOSTAT_CONFIG pconfig;
@@ -498,7 +506,14 @@ static ssize_t pecostat_device_read(
 
         get_config_info(&pconfig);
 
+	if(filp != NULL)
+        {
         copy_to_user(buffer, &pconfig, length);
+	}
+	else
+	{
+		memcpy(buffer, &pconfig, length);
+	}
         return length;
     }
 
@@ -626,7 +641,14 @@ static ssize_t pecostat_device_read(
     }
 #endif
 
-    copy_to_user(buffer, Extencount, length);
+    if(filp != NULL)
+    {
+    	copy_to_user(buffer, Extencount, length);
+    }
+    else
+    {
+    	memcpy(buffer, Extencount, length);
+    }
 
     /*
      * Increment the CurrentEvent, and set the next event
@@ -641,7 +663,7 @@ static ssize_t pecostat_device_read(
  * Called when a process writes to dev file. The transferred information
  * helps to build the requested events list.
  */
-static ssize_t
+ssize_t
 pecostat_device_write(struct file *filp,
                     const char *buffer,
                     size_t length,
@@ -669,7 +691,14 @@ pecostat_device_write(struct file *filp,
     if (EventBuffer != NULL)
         kfree(EventBuffer);
     EventBuffer = (unsigned char *)kmalloc(length, GFP_KERNEL);
-    copy_from_user(EventBuffer, buffer, length);
+    if(filp != NULL)
+    {
+    	copy_from_user(EventBuffer, buffer, length);
+    }
+    else
+    {
+    	memcpy(EventBuffer, buffer, length);
+    }
     psip = (PECOSTAT_INFO *)EventBuffer;
 
     EventsCount = psip->events_count;
@@ -2006,3 +2035,9 @@ enforce_curtc(tc)
 
 module_init(pecostat_init);
 module_exit(pecostat_exit);
+
+EXPORT_SYMBOL(pecostat_device_read);
+EXPORT_SYMBOL(pecostat_device_write);
+EXPORT_SYMBOL(Device_Open);
+EXPORT_SYMBOL(Nvp);
+EXPORT_SYMBOL(Npc);
