# HG changeset patch
# Parent e0e97198820a1f11f21ec81c6a2a56877827967f
Add network driver for Danube

diff --git a/arch/mips/include/asm/ifx_tantos.h b/arch/mips/include/asm/ifx_tantos.h
new file mode 100644
--- /dev/null
+++ b/arch/mips/include/asm/ifx_tantos.h
@@ -0,0 +1,436 @@
+/******************************************************************************
+     Copyright (c) 2006, Infineon Technologies.  All rights reserved.
+
+                               No Warranty
+   Because the program is licensed free of charge, there is no warranty for
+   the program, to the extent permitted by applicable law.  Except when
+   otherwise stated in writing the copyright holders and/or other parties
+   provide the program "as is" without warranty of any kind, either
+   expressed or implied, including, but not limited to, the implied
+   warranties of merchantability and fitness for a particular purpose. The
+   entire risk as to the quality and performance of the program is with
+   you.  should the program prove defective, you assume the cost of all
+   necessary servicing, repair or correction.
+
+   In no event unless required by applicable law or agreed to in writing
+   will any copyright holder, or any other party who may modify and/or
+   redistribute the program as permitted above, be liable to you for
+   damages, including any general, special, incidental or consequential
+   damages arising out of the use or inability to use the program
+   (including but not limited to loss of data or data being rendered
+   inaccurate or losses sustained by you or third parties or a failure of
+   the program to operate with any other programs), even if such holder or
+   other party has been advised of the possibility of such damages.
+ ******************************************************************************
+   Module      : ifx_tantos.c
+   Date        : 2006-08-15
+   Description : Switch driver for TANTOS 
+   Remarks: jeanson.hung@infineon.com
+
+ *****************************************************************************/
+#ifndef _IFX_TANTOS_H_
+#define _IFX_TANTOS_H_
+
+void tantos_reset(void); 
+int tantos_chk_bndctl(int port, int txrx);
+int tantos_get_bndwth(int port, int txrx);
+void tantos_set_bndwth(int port, int txrx, int limit);
+int tantos_get_bndwth_mode(int port);
+int tantos_set_bndwth_mode(int port, int mode);
+int tantos_get_egress_by_wfq(int port, int qno);
+int tantos_set_egress_by_wfq(int port, int qno, int bndwth);
+int tantos_get_egress_by_sq(int port, int qno);
+int tantos_set_egress_by_sq(int port, int qno, int bndwth);
+int tantos_get_tcpudp_filter(int filterno, int *port, int *queueno);
+void tantos_set_tcpudp_filter(int filterno, int port, int queueno);
+int tantos_get_tcpudp_filter_range(int filterno);
+void tantos_set_tcpudp_filter_range(int filterno, int range);
+void tantos_set_tcpudp_filter_mode(int filterno, int mode);
+int tantos_get_qos_control(void);
+void tantos_set_qos_control(int qos);
+int tantos_get_queue_weight(int qno);
+void tantos_set_queue_weight(int qno, int weight);
+int tantos_getq(int port);
+void tantos_setq(int port, int qno);
+void tantos_dis_fc(int port);
+void tantos_ena_fc(int port);
+int tantos_get_igmp(void);
+void tantos_set_igmp(int bit);
+int tantos_get_igmpv3(void);
+void tantos_set_igmpv3(int bit);
+int tantos_get_igmp_proxy(void);
+void tantos_set_igmp_proxy(int bit);
+
+int tantos_get_additional_snoop_ctr(void);
+void tantos_set_additional_snoop_ctr(int bit);
+
+int tantos_get_igmp_table(unsigned int *portmap, unsigned int *gidh, unsigned int *gidl);
+int tantos_set_igmp_table(unsigned int port, unsigned int gid, int valid);
+
+int tantos_get_igmp_sip(unsigned int port, unsigned int gid, unsigned int *siph, unsigned int *sipl);
+int tantos_set_igmp_sip(unsigned int port, unsigned int gid, int siph, int sipl, int valid);
+
+void tantos_set_ppprmvl_status(int enable, int sid);
+int tantos_get_ppprmvl_status(int *sid);
+
+
+
+int tantos_get_vlanmode(void);
+void tantos_set_vlanmode(int bit);
+void tantos_set_mac_priority(char *mac, int addmac, int pri);
+unsigned long long tantos_get_RXCNT(int port);
+unsigned long long tantos_get_TXCNT(int port);
+unsigned long long tantos_get_COLCNT(int port);
+unsigned long long tantos_get_ERRCNT(int port);
+int tantos_get_portsts(int port, int status); 
+int tantos_get_cpu_port(void);
+int tantos_set_cpu_port(int port);
+int tantos_disable_cpu_port(void);
+
+unsigned long tantos_get_rmon_by_off(int port, int off);
+unsigned long tantos_get_rmon(int port, int off); 
+
+void tantos_set_diffserv(int pq, int qno);
+int tantos_get_diffserv(int pq);
+
+int tantos_vlan_init(void);
+int tantos_vlan_add(int port_base, int port, int fid);
+int tantos_vlan_del(int port_base, int port);
+
+
+#define IFX_TANTOS_MAX_PORT	7
+#define IFX_TANTOS_MAX_RMON	0x28
+#define IFX_TANTOS_PROD_CODE 0x2599
+
+#define IFX_TANTOS_READRMON		0x1
+#define IFX_TANTOS_CLRRMON		0x2
+#define IFX_TANTOS_CLRRMON_ALL	0x3
+
+/* TCP/UDP control */
+#define IFX_TANTOS_TCPUDP_MAX	0x8	/* max TCP/UDP filter number */
+/* DiffServ */
+#define IFX_TANTOS_MAX_IPTOS	0x40	/* 6 bits, 2^7 - 1 */
+/* VLAN */
+#define IFX_TANTOS_MAX_VLAN_NUM	15
+
+/* registers */
+/* for Port 0 */
+#define TANTOS_REG_P0STS	0x00
+#define TANTOS_REG_P0BCTL	0x01
+#define TANTOS_REG_P0ECTL	0x02
+#define TANTOS_REG_P0PBVM	0x03
+#define TANTOS_REG_P0DVID	0x04
+#define TANTOS_REG_P0ECSQ3	0x05
+#define TANTOS_REG_P0ECSQ2	0x06
+#define TANTOS_REG_P0ECSQ1	0x07
+#define TANTOS_REG_P0ECSQ0	0x08
+#define TANTOS_REG_P0ECWQ3	0x09
+#define TANTOS_REG_P0ECWQ2	0x0A
+#define TANTOS_REG_P0ECWQ1	0x0B
+#define TANTOS_REG_P0ECWQ0	0x0C
+#define TANTOS_REG_P0ICR	0x0D
+
+/* for Port 1 */
+#define TANTOS_REG_P1STS	0x20
+#define TANTOS_REG_P1BCTL	0x21
+#define TANTOS_REG_P1ECTL	0x22
+#define TANTOS_REG_P1PBVM	0x23
+#define TANTOS_REG_P1DVID	0x24
+#define TANTOS_REG_P1ECSQ3	0x25
+#define TANTOS_REG_P1ECSQ2	0x26
+#define TANTOS_REG_P1ECSQ1	0x27
+#define TANTOS_REG_P1ECSQ0	0x28
+#define TANTOS_REG_P1ECWQ3	0x29
+#define TANTOS_REG_P1ECWQ2	0x2A
+#define TANTOS_REG_P1ECWQ1	0x2B
+#define TANTOS_REG_P1ECWQ0	0x2C
+#define TANTOS_REG_P1ICR	0x2D
+
+/* for Port 2 */
+#define TANTOS_REG_P2STS	0x40
+#define TANTOS_REG_P2BCTL	0x41
+#define TANTOS_REG_P2ECTL	0x42
+#define TANTOS_REG_P2PBVM	0x43
+#define TANTOS_REG_P2DVID	0x44
+#define TANTOS_REG_P2ECSQ3	0x45
+#define TANTOS_REG_P2ECSQ2	0x46
+#define TANTOS_REG_P2ECSQ1	0x47
+#define TANTOS_REG_P2ECSQ0	0x48
+#define TANTOS_REG_P2ECWQ3	0x49
+#define TANTOS_REG_P2ECWQ2	0x4A
+#define TANTOS_REG_P2ECWQ1	0x4B
+#define TANTOS_REG_P2ECWQ0	0x4C
+#define TANTOS_REG_P2ICR	0x4D
+
+/* for Port 3 */
+#define TANTOS_REG_P3STS	0x60
+#define TANTOS_REG_P3BCTL	0x61
+#define TANTOS_REG_P3ECTL	0x62
+#define TANTOS_REG_P3PBVM	0x63
+#define TANTOS_REG_P3DVID	0x64
+#define TANTOS_REG_P3ECSQ3	0x65
+#define TANTOS_REG_P3ECSQ2	0x66
+#define TANTOS_REG_P3ECSQ1	0x67
+#define TANTOS_REG_P3ECSQ0	0x68
+#define TANTOS_REG_P3ECWQ3	0x69
+#define TANTOS_REG_P3ECWQ2	0x6A
+#define TANTOS_REG_P3ECWQ1	0x6B
+#define TANTOS_REG_P3ECWQ0	0x6C
+#define TANTOS_REG_P3ICR	0x6D
+
+/* for port 4 */
+#define TANTOS_REG_P4STS	0x80
+#define TANTOS_REG_P4BCTL	0x81
+#define TANTOS_REG_P4ECTL	0x82
+#define TANTOS_REG_P4PBVM	0x83
+#define TANTOS_REG_P4DVID	0x84
+#define TANTOS_REG_P4ECSQ3	0x85
+#define TANTOS_REG_P4ECSQ2	0x86
+#define TANTOS_REG_P4ECSQ1	0x87
+#define TANTOS_REG_P4ECSQ0	0x88
+#define TANTOS_REG_P4ECWQ3	0x89
+#define TANTOS_REG_P4ECWQ2	0x8A
+#define TANTOS_REG_P4ECWQ1	0x8B
+#define TANTOS_REG_P4ECWQ0	0x8C
+#define TANTOS_REG_P4ICR	0x8D
+
+/* for port 5 */
+#define TANTOS_REG_P5STS	0xA0
+#define TANTOS_REG_P5BCTL	0xA1
+#define TANTOS_REG_P5ECTL	0xA2
+#define TANTOS_REG_P5PBVM	0xA3
+#define TANTOS_REG_P5DVID	0xA4
+#define TANTOS_REG_P5ECSQ3	0xA5
+#define TANTOS_REG_P5ECSQ2	0xA6
+#define TANTOS_REG_P5ECSQ1	0xA7
+#define TANTOS_REG_P5ECSQ0	0xA8
+#define TANTOS_REG_P5ECWQ3	0xA9
+#define TANTOS_REG_P5ECWQ2	0xAA
+#define TANTOS_REG_P5ECWQ1	0xAB
+#define TANTOS_REG_P5ECWQ0	0xAC
+#define TANTOS_REG_P5ICR	0xAD
+
+/* for port 6 */
+#define TANTOS_REG_P6STS	0xC0
+#define TANTOS_REG_P6BCTL	0xC1
+#define TANTOS_REG_P6ECTL	0xC2
+#define TANTOS_REG_P6PBVM	0xC3
+#define TANTOS_REG_P6DVID	0xC4
+#define TANTOS_REG_P6ECSQ3	0xC5
+#define TANTOS_REG_P6ECSQ2	0xC6
+#define TANTOS_REG_P6ECSQ1	0xC7
+#define TANTOS_REG_P6ECSQ0	0xC8
+#define TANTOS_REG_P6ECWQ3	0xC9
+#define TANTOS_REG_P6ECWQ2	0xCA
+#define TANTOS_REG_P6ECWQ1	0xCB
+#define TANTOS_REG_P6ECWQ0	0xCC
+#define TANTOS_REG_P6ICR	0xCD
+
+/* VLAN filters */
+#define TANTOS_REG_VF0L		0x10
+#define TANTOS_REG_VF0H		0x11
+#define TANTOS_REG_VF1L		0x12
+#define TANTOS_REG_VF1H		0x13
+#define TANTOS_REG_VF2L		0x14
+#define TANTOS_REG_VF2H		0x15
+#define TANTOS_REG_VF3L		0x16
+#define TANTOS_REG_VF3H		0x17
+#define TANTOS_REG_VF4L		0x18
+#define TANTOS_REG_VF4H		0x19
+#define TANTOS_REG_VF5L		0x1A
+#define TANTOS_REG_VF5H		0x1B
+#define TANTOS_REG_VF6L		0x1C
+#define TANTOS_REG_VF6H		0x1D
+#define TANTOS_REG_VF7L		0x1E
+#define TANTOS_REG_VF7H		0x1F
+#define TANTOS_REG_VF8L		0x30
+#define TANTOS_REG_VF8H		0x31
+#define TANTOS_REG_VF9L		0x32
+#define TANTOS_REG_VF9H		0x33
+#define TANTOS_REG_VF10L	0x34
+#define TANTOS_REG_VF10H	0x35
+#define TANTOS_REG_VF11L	0x36
+#define TANTOS_REG_VF11H	0x37
+#define TANTOS_REG_VF12L	0x38
+#define TANTOS_REG_VF12H	0x39
+#define TANTOS_REG_VF13L	0x3A
+#define TANTOS_REG_VF13H	0x3B
+#define TANTOS_REG_VF14L	0x3C
+#define TANTOS_REG_VF14H	0x3D
+#define TANTOS_REG_VF15L	0x3E
+#define TANTOS_REG_VF15H	0x3F
+
+/* type filters */
+#define TANTOS_REG_TF0		0x50
+#define TANTOS_REG_TF1		0x51
+#define TANTOS_REG_TF2		0x52
+#define TANTOS_REG_TF3		0x53
+#define TANTOS_REG_TF4		0x54
+#define TANTOS_REG_TF5		0x55
+#define TANTOS_REG_TF6		0x56
+#define TANTOS_REG_TF7		0x57
+
+/* diffserv mapping */
+#define TANTOS_REG_DM0		0x58
+#define TANTOS_REG_DM1		0x59
+#define TANTOS_REG_DM2		0x5A
+#define TANTOS_REG_DM3		0x5B
+#define TANTOS_REG_DM4		0x5C
+#define TANTOS_REG_DM5		0x5D
+#define TANTOS_REG_DM6		0x5E
+#define TANTOS_REG_DM7		0x5F
+
+/* TCP/UDP filter */
+#define TANTOS_REG_TUPF0	0x70
+#define TANTOS_REG_TUPR0	0x71
+#define TANTOS_REG_TUPF1	0x72
+#define TANTOS_REG_TUPR1	0x73
+#define TANTOS_REG_TUPF2	0x74
+#define TANTOS_REG_TUPR2	0x75
+#define TANTOS_REG_TUPF3	0x76
+#define TANTOS_REG_TUPR3	0x77
+#define TANTOS_REG_TUPF4	0x78
+#define TANTOS_REG_TUPR4	0x79
+#define TANTOS_REG_TUPF5	0x7A
+#define TANTOS_REG_TUPR5	0x7B
+#define TANTOS_REG_TUPF6	0x7C
+#define TANTOS_REG_TUPR6	0x7D
+#define TANTOS_REG_TUPF7	0x7E
+#define TANTOS_REG_TUPR7	0x7F
+
+/* protocol filter */
+#define TANTOS_REG_PF0		0xB8
+#define TANTOS_REG_PF1		0xB9
+#define TANTOS_REG_PF2		0xBA
+#define TANTOS_REG_PF3		0xBB
+
+/* Phy initial control */
+#define TANTOS_REG_PHYIC0	0xD0
+#define TANTOS_REG_PHYIC1	0xD2
+#define TANTOS_REG_PHYIC2	0xD4
+#define TANTOS_REG_PHYIC3	0xD6
+
+/* Phy initial data */
+#define TANTOS_REG_PHYID0	0xD1
+#define TANTOS_REG_PHYID1	0xD3
+#define TANTOS_REG_PHYID2	0xD5
+#define TANTOS_REG_PHYID3	0xD7
+
+/* interrupt related */
+#define TANTOS_REG_IE		0xD8
+#define TANTOS_REG_IS		0xD9
+
+/* type filter actions */
+#define TANTOS_REG_TFA0		0xDA
+#define TANTOS_REG_TFA1		0xDB
+
+#define TANTOS_REG_PIOFGPM  0xDD
+
+#define TANTOS_REG_SGC1     0xE0
+#define TANTOS_REG_SGC2     0xE1
+#define TANTOS_REG_CHM      0xE2
+#define TANTOS_REG_MS       0xE3
+
+/* GMII related */
+#define TANTOS_REG_RGMIICR	0xF5
+
+/* for IGMP */
+#define TANTOS_REG_HIOR		0xF6
+
+/* PPPoE Removal Session ID */
+#define TANTOS_REG_PSIDR    0xF7
+
+#define TANTOS_REG_CI0		0x100
+#define TANTOS_REG_CI1		0x101
+#define TANTOS_REG_GSHS		0x102
+#define TANTOS_REG_ATC0		0x104
+#define TANTOS_REG_ATC1		0x105
+#define TANTOS_REG_ATC2		0x106
+#define TANTOS_REG_ATC3		0x107
+#define TANTOS_REG_ATC4		0x108
+#define TANTOS_REG_ATC5		0x109
+#define TANTOS_REG_ATS0		0x10A
+#define TANTOS_REG_ATS1		0x10B
+#define TANTOS_REG_ATS2		0x10C
+#define TANTOS_REG_ATS3		0x10D
+#define TANTOS_REG_ATS4		0x10E
+#define TANTOS_REG_ATS5		0x10F
+#define TANTOS_REG_IGMPTC0	0x110
+#define TANTOS_REG_IGMPTC1	0x111
+#define TANTOS_REG_IGMPTC2	0x112
+#define TANTOS_REG_IGMPTC3	0x113
+#define TANTOS_REG_IGMPTC4	0x114
+#define TANTOS_REG_IGMPTC5	0x115
+#define TANTOS_REG_IGMPTS0	0x116
+#define TANTOS_REG_IGMPTS1	0x117
+#define TANTOS_REG_IGMPTS2	0x118
+#define TANTOS_REG_IGMPTS3	0x119
+#define TANTOS_REG_IGMPTS4	0x11a
+
+#define	TANTOS_REG_RMONCTL	0x11B
+#define TANTOS_REG_RMONLOW	0x11C
+#define TANTOS_REG_RMONHIGH	0x11D
+
+#define TANTOS_REG_MIIAC    0x120
+#define TANTOS_REG_MIIWD    0x121
+#define TANTOS_REG_MIIRD    0x122
+
+#define IFX_TANTOS_MAX_REG_NUM TANTOS_REG_MIIRD
+
+
+
+/* Bit offsets */
+#ifndef BIT_0
+#define BIT_0		0x1
+#endif
+#ifndef BIT_1
+#define BIT_1		0x2
+#endif
+#ifndef BIT_2
+#define BIT_2		0x4
+#endif
+#ifndef BIT_3
+#define BIT_3		0x8
+#endif
+#ifndef BIT_4
+#define BIT_4		0x10
+#endif
+#ifndef BIT_5
+#define BIT_5		0x20
+#endif
+#ifndef BIT_6
+#define BIT_6		0x40
+#endif
+#ifndef BIT_7
+#define BIT_7		0x80
+#endif
+#ifndef BIT_8
+#define BIT_8		0x100
+#endif
+#ifndef BIT_9
+#define BIT_9		0x200
+#endif
+#ifndef BIT_10
+#define BIT_10		0x400
+#endif
+#ifndef BIT_11
+#define BIT_11		0x800
+#endif
+#ifndef BIT_12
+#define BIT_12		0x1000
+#endif
+#ifndef BIT_13
+#define BIT_13		0x2000
+#endif
+#ifndef BIT_14
+#define BIT_14		0x4000
+#endif
+#ifndef BIT_15
+#define BIT_15		0x8000
+#endif
+#ifndef BIT_16
+#define BIT_16		0x10000
+#endif
+
+
+#endif	/* _IFX_TANTOS_H_ */
diff --git a/drivers/net/Makefile b/drivers/net/Makefile
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -34,6 +34,7 @@ COBJS-$(CONFIG_BCM570x) += bcm570x.o bcm
 COBJS-$(CONFIG_BFIN_MAC) += bfin_mac.o
 COBJS-$(CONFIG_CS8900) += cs8900.o
 COBJS-$(CONFIG_TULIP) += dc2114x.o
+COBJS-$(CONFIG_DRIVER_DANUBE) += danube_sw.o
 COBJS-$(CONFIG_DRIVER_DM9000) += dm9000x.o
 COBJS-$(CONFIG_DNET) += dnet.o
 COBJS-$(CONFIG_E1000) += e1000.o
diff --git a/drivers/net/danube_sw.c b/drivers/net/danube_sw.c
new file mode 100644
--- /dev/null
+++ b/drivers/net/danube_sw.c
@@ -0,0 +1,441 @@
+/*
+ * DANUBE internal switch ethernet driver.
+ *
+ * (C) Copyright 2003
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+
+#include <malloc.h>
+#include <net.h>
+#include <config.h>
+#include <asm/addrspace.h>
+#include <asm/pinstrap.h>
+#include <asm/ifx_tantos.h>  
+
+#define MII_MODE 1
+#define REV_MII_MODE 2
+
+#define TX_CHAN_NO   7
+#define RX_CHAN_NO   6
+
+#define NUM_RX_DESC	PKTBUFSRX                  
+#define NUM_TX_DESC	8
+#define MAX_PACKET_SIZE 	1536
+#define TOUT_LOOP	100
+#define PHY0_ADDR       1 /*fixme: set the correct value here*/ 
+
+#define DMA_WRITE_REG(reg, value) *((volatile u32 *)reg) = (u32)value
+#define DMA_READ_REG(reg, value)    value = (u32)*((volatile u32*)reg)
+
+#define SW_WRITE_REG(reg, value)  *((volatile u32*)reg) = (u32)value  	
+#define SW_READ_REG(reg, value)   value = (u32)*((volatile u32*)reg)
+#define TANTOS_CHIP_ID 0x2599
+
+typedef struct
+{
+	union
+	{
+		struct
+		{
+			volatile u32 OWN                 :1;
+			volatile u32 C	                 :1;
+			volatile u32 Sop                 :1;
+			volatile u32 Eop	         :1;
+			volatile u32 reserved		 :3;
+			volatile u32 Byteoffset		 :2; 
+			volatile u32 reserve             :7;
+			volatile u32 DataLen             :16;
+		}field;
+
+		volatile u32 word;
+	}status;
+	
+	volatile u32 DataPtr;
+} danube_rx_descriptor_t;
+
+typedef struct
+{
+	union
+	{
+		struct
+		{
+			volatile u32 OWN                 :1;
+			volatile u32 C	                 :1;
+			volatile u32 Sop                 :1;
+			volatile u32 Eop	         :1;
+			volatile u32 Byteoffset		 :5; 
+			volatile u32 reserved            :7;
+			volatile u32 DataLen             :16;
+		}field;
+
+		volatile u32 word;
+	}status;
+	
+	volatile u32 DataPtr;
+} danube_tx_descriptor_t;
+
+
+
+
+static danube_rx_descriptor_t rx_des_ring[NUM_RX_DESC] __attribute__ ((aligned(16)));
+static danube_tx_descriptor_t tx_des_ring[NUM_TX_DESC] __attribute__ ((aligned(16)));
+static int tx_num, rx_num;
+
+int danube_switch_init(struct eth_device *dev, bd_t * bis);
+int danube_switch_send(struct eth_device *dev, volatile void *packet,int length);
+int danube_switch_recv(struct eth_device *dev);
+void danube_switch_halt(struct eth_device *dev);
+static void danube_init_switch_chip(void);
+static void danube_dma_init(void);
+
+static unsigned int smi_read(unsigned int addr);  
+static int smi_write(unsigned int addr, unsigned int dat);  
+
+
+int danube_eth_init(bd_t * bis)
+{
+	struct eth_device *dev;
+    int i;
+
+	if (!(dev = (struct eth_device *) malloc (sizeof *dev)))
+	{
+		printf("Failed to allocate memory\n");
+		return 0;
+	}
+	memset(dev, 0, sizeof(*dev));
+
+	danube_dma_init();
+	danube_init_switch_chip();
+        
+       
+	sprintf(dev->name, "danube Switch");
+	dev->init = danube_switch_init;
+	dev->halt = danube_switch_halt;
+	dev->send = danube_switch_send;
+	dev->recv = danube_switch_recv;
+
+	eth_register(dev);
+
+	return 1;
+}
+static int smi_write(unsigned int addr, unsigned int dat)
+{
+ 
+   *DANUBE_PPE32_ETOP_MDIO_ACC = ((addr<<16)&0x3ff0000)|dat|0x80000000;
+   while ((*DANUBE_PPE32_ETOP_MDIO_ACC )&0x80000000){};
+   return 0;
+ 
+}
+static unsigned int smi_read(unsigned int addr)
+{
+   addr=(addr<<16)&0x3ff0000;
+   *DANUBE_PPE32_ETOP_MDIO_ACC =(0xC0000000|addr);
+   while ((*DANUBE_PPE32_ETOP_MDIO_ACC)&0x80000000){};
+   return ((*DANUBE_PPE32_ETOP_MDIO_ACC)&0x0FFFF);
+}
+	
+
+int danube_switch_init(struct eth_device *dev, bd_t * bis)
+{
+	int i;
+	int datalen, cache_linesize;
+	tx_num=0;
+	rx_num=0;
+	
+		/* Reset DMA 
+		 */
+//	serial_puts("i \n\0");
+
+       *DANUBE_DMA_CS=RX_CHAN_NO;
+       *DANUBE_DMA_CCTRL=0x2;/*fix me, need to reset this channel first?*/
+       *DANUBE_DMA_CPOLL= 0x80000040;
+       /*set descriptor base*/
+       *DANUBE_DMA_CDBA=(u32)rx_des_ring;
+       *DANUBE_DMA_CDLEN=NUM_RX_DESC;
+       *DANUBE_DMA_CIE = 0;
+       *DANUBE_DMA_CCTRL=0x30000;
+	 	
+       *DANUBE_DMA_CS=TX_CHAN_NO;
+       *DANUBE_DMA_CCTRL=0x2;/*fix me, need to reset this channel first?*/
+       *DANUBE_DMA_CPOLL= 0x80000040;
+       *DANUBE_DMA_CDBA=(u32)tx_des_ring;
+       *DANUBE_DMA_CDLEN=NUM_TX_DESC;  
+       *DANUBE_DMA_CIE = 0;
+       *DANUBE_DMA_CCTRL=0x30100;
+
+
+	
+	asm("sync");
+	
+	
+	for(i=0;i < NUM_RX_DESC; i++)
+	{
+		danube_rx_descriptor_t * rx_desc = KSEG1ADDR(&rx_des_ring[i]);
+		rx_desc->status.word=0;	
+		rx_desc->status.field.OWN=1;
+		rx_desc->status.field.DataLen=PKTSIZE_ALIGN;   /* 1536  */	
+		rx_desc->DataPtr=(u32)KSEG1ADDR(NetRxPackets[i]);
+	  memcpy((u8*)&rx_des_ring[i],rx_desc,8);
+	}
+  for(i=0;i < NUM_TX_DESC; i++)
+	{
+		danube_tx_descriptor_t * tx_desc = KSEG1ADDR(&tx_des_ring[i]);
+		memset(tx_desc, 0, sizeof(tx_des_ring[0]));
+	}
+		/* turn on DMA rx & tx channel
+		 */
+	 *DANUBE_DMA_CS=RX_CHAN_NO;
+	 *DANUBE_DMA_CCTRL|=1;/*reset and turn on the channel*/
+
+
+	
+	return 1;
+}
+
+void danube_switch_halt(struct eth_device *dev)
+{
+        int i; 
+        for(i=0;i<8;i++)
+	{
+	   *DANUBE_DMA_CS=i;
+	   *DANUBE_DMA_CCTRL&=~1;/*stop the dma channel*/
+	}
+//	udelay(1000000);
+}
+
+int danube_switch_send(struct eth_device *dev, volatile void *packet,int length)
+{
+
+	int                    	i;
+	int 		 	res = -1;
+	int datalen, cache_linesize;
+	danube_tx_descriptor_t * tx_desc= KSEG1ADDR(&tx_des_ring[tx_num]);
+	
+	if (length <= 0)
+	{
+		printf ("%s: bad packet size: %d\n", dev->name, length);
+		goto Done;
+	}
+	
+	for(i=0; tx_desc->status.field.OWN==1; i++)
+	{
+		if(i>=TOUT_LOOP)
+		{
+			printf("NO Tx Descriptor...");
+			goto Done;
+		}
+	}
+
+	//serial_putc('s');
+ 
+	tx_desc->status.field.Sop=1;
+
+	tx_desc->status.field.Eop=1;
+	
+	tx_desc->status.field.C=0;
+	
+	tx_desc->DataPtr = (u32)KSEG1ADDR(packet);
+	
+	if(length<60)
+		tx_desc->status.field.DataLen = 60;
+	else
+		tx_desc->status.field.DataLen = (u32)length;	
+	
+	
+	cache_linesize = dcache_linesize_mips32() ;
+	
+	datalen = cache_linesize *((tx_desc->status.field.DataLen/cache_linesize)+1);
+	
+	dcache_writeback_invalidate(datalen, cache_linesize, packet );
+	
+	tx_desc->status.field.OWN=1;
+			 	
+	res=length;
+	tx_num++;
+        if(tx_num==NUM_TX_DESC) tx_num=0;
+	*DANUBE_DMA_CS=TX_CHAN_NO;
+	  
+	if(!(*DANUBE_DMA_CCTRL & 1))
+	*DANUBE_DMA_CCTRL|=1;
+        
+Done:
+	return res;
+}
+
+int danube_switch_recv(struct eth_device *dev)
+{
+  
+	int                    length  = 0;
+  int datalen, cache_linesize;
+	danube_rx_descriptor_t * rx_desc;
+        int anchor_num=0;
+	int i;
+	
+	for (;;)
+	{
+		   
+	        rx_desc = KSEG1ADDR(&rx_des_ring[rx_num]);
+
+	        if ((rx_desc->status.field.C == 0) || (rx_desc->status.field.OWN == 1))
+		{
+		   break;
+		}
+		
+                
+		length = rx_desc->status.field.DataLen;
+		if (length)
+		{	
+	
+		     cache_linesize = dcache_linesize_mips32() ;
+			
+			 datalen = cache_linesize*((rx_desc->status.field.DataLen/cache_linesize)+1);
+	   
+			 dcache_hit_invalidate(datalen,cache_linesize, NetRxPackets[rx_num]);
+		  
+			NetReceive((void*)KSEG1ADDR(NetRxPackets[rx_num]), length - 4);
+			
+		//	serial_putc('*');
+		}
+		else
+		{
+			printf("Zero length!!!\n");
+		}
+    
+		rx_desc->status.field.Sop=0;
+		
+		rx_desc->status.field.Eop=0;
+		
+		rx_desc->status.field.C=0;
+		
+		rx_desc->status.field.DataLen=PKTSIZE_ALIGN;
+		
+		rx_desc->status.field.OWN=1;
+		
+		rx_num++;
+		if(rx_num==NUM_RX_DESC) rx_num=0;
+   
+	}
+
+	return length;
+}
+
+
+static void danube_init_switch_chip()
+{
+        int i;
+        /*get and set mac address for MAC*/
+        static unsigned char addr[6];
+        char *tmp,*end; 
+	tmp = getenv ("ethaddr");
+	if (NULL == tmp) {
+		printf("Can't get environment ethaddr!!!\n");
+	//	return NULL;
+	} else {
+		printf("ethaddr=%s\n", tmp);
+	}
+        *DANUBE_PMU_PWDCR = *DANUBE_PMU_PWDCR & 0xFFFFEFDF;
+        
+        *DANUBE_PPE32_ETOP_MDIO_CFG &= ~0x6;
+
+        /*set mac to be working in reverse MII mode for both MII0 and MII1*/
+        *DANUBE_PPE32_ETOP_CFG = 0x152;
+
+        *DANUBE_PPE32_ETOP_IG_PLEN_CTRL = 0x4005ee; // set packetlen.
+        *ENET_MAC_CFG|=1<<11;/*enable the crc*/
+
+        /*reset external switch*/
+	    *DANUBE_RCU_RST_REQ |=1;
+	    mdelay(800);
+        *DANUBE_RCU_RST_REQ &=(unsigned long)~1;
+        mdelay(10);
+       
+	    if(smi_read(TANTOS_REG_CI1)==TANTOS_CHIP_ID){
+		  /*Wehn WAIT_INIT is enabled, this bit allows the CPU to control */
+		  /*the TANTOS enable or disable.The default is disable and the   */
+		  /*TANTOS will wait for the CPU to enable this bit               */
+		  /*easy50712 V3.0 board WAIT_INIT is 0,                          */
+		  /*TANTOS will start to operate after EEPROM loading is done     */
+		  /*Need to uncomment the following sentence if WAIT_INIT is 1    */
+		  //smi_write(TANTOS_REG_SGC2,0x8000);
+
+
+          /*port 5 force link up*/
+		  /*The spec says that when using MAC to MAC connection, the bit  */
+		  /*of relative port must be enalbe to ensure this port can       */
+		  /* receive and transmit normally                                */
+		  smi_write(TANTOS_REG_P5BCTL, 0x4);
+	      /*port 6 force link up*/
+	      smi_write(TANTOS_REG_P6BCTL, 0x4);
+		}else{
+		  /*patch for ADM6996*/
+          smi_write(0x12, 0x3602);
+		}  
+    	return;
+}
+
+
+static void danube_dma_init(void)
+{
+        int i;
+//	serial_puts("d \n\0");
+
+    *DANUBE_PMU_PWDCR &=~(1<<DANUBE_PMU_DMA_SHIFT);/*enable DMA from PMU*/
+		/* Reset DMA 
+		 */
+	*DANUBE_DMA_CTRL|=1; 
+        *DANUBE_DMA_IRNEN=0;/*disable all the interrupts first*/
+
+	/* Clear Interrupt Status Register 		 
+	*/
+	*DANUBE_DMA_IRNCR=0xfffff;
+	/*disable all the dma interrupts*/
+	*DANUBE_DMA_IRNEN=0;
+	/*disable channel 0 and channel 1 interrupts*/
+	
+	  *DANUBE_DMA_CS=RX_CHAN_NO;
+	  *DANUBE_DMA_CCTRL=0x2;/*fix me, need to reset this channel first?*/
+          *DANUBE_DMA_CPOLL= 0x80000040;
+          /*set descriptor base*/
+          *DANUBE_DMA_CDBA=(u32)rx_des_ring;
+          *DANUBE_DMA_CDLEN=NUM_RX_DESC;
+          *DANUBE_DMA_CIE = 0;
+          *DANUBE_DMA_CCTRL=0x30000;
+	 	
+	*DANUBE_DMA_CS=TX_CHAN_NO;
+	*DANUBE_DMA_CCTRL=0x2;/*fix me, need to reset this channel first?*/
+        *DANUBE_DMA_CPOLL= 0x80000040;
+	*DANUBE_DMA_CDBA=(u32)tx_des_ring;
+        *DANUBE_DMA_CDLEN=NUM_TX_DESC;  
+	*DANUBE_DMA_CIE = 0;
+	*DANUBE_DMA_CCTRL=0x30100;
+	/*enable the poll function and set the poll counter*/
+	//*DANUBE_DMA_CPOLL=DANUBE_DMA_POLL_EN | (DANUBE_DMA_POLL_COUNT<<4);
+	/*set port properties, enable endian conversion for switch*/
+	*DANUBE_DMA_PS=0;
+	*DANUBE_DMA_PCTRL|=0xf<<8;/*enable 32 bit endian conversion*/
+
+	return;
+}
+
+
+
