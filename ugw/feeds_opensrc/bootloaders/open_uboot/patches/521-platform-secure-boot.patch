# HG changeset patch
# Parent e06021cab7d848efcc26491581095b5022d0da18
diff --git a/board/ar10/Makefile.lq b/board/ar10/Makefile.lq
--- a/board/ar10/Makefile.lq
+++ b/board/ar10/Makefile.lq
@@ -13,7 +13,9 @@ endif
 
 
 ALL +=bootstrap.bin u-boot.lzimg u-boot.ltq $(ENV_BLOCK)
-
+ifdef CONFIG_LTQ_SECURE_BOOT
+ALL +=stage3.bin stage2.bin  
+endif
 
 LDSCRIPT_BOOTSTRAP := $(TOPDIR)/board/$(BOARD)/bootstrap.lds
 ifdef CONFIG_BOOT_FROM_NOR
@@ -43,8 +45,12 @@ ifdef CONFIG_BOOT_FROM_NAND
 		@$(TOPDIR)/scripts_platform/pad2align.sh -n 10240 bootstrap.bin
 		@cat $(obj)bootstrap.bin > $(obj)u-boot.ltq
 		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
+ifndef CONFIG_LTQ_SECURE_BOOT
+ifdef CONFIG_AR10_GPHY_FW_EMBEDDED
 		@$(TOPDIR)/scripts_platform/pad2align.sh -n 65536 u-boot.ltq
-		@@cat $(GPHY_FIRMWARE) >>u-boot.ltq
+		@cat $(GPHY_FIRMWARE) >>u-boot.ltq
+endif		
+endif
 endif
 
 ifdef CONFIG_BOOT_FROM_SPI
@@ -123,3 +129,45 @@ stools: $(TOPDIR)/board/$(BOARD)/stools.
 		$(NM) -Ss u-boot >u-boot.sym
 		scripts_platform/mk_envimg.sh $@
 
+stage3.bin: $(CONFIG_DSA_PRIVKEY) u-boot.ltq
+		@scripts_platform/pad2align.sh -n 32 u-boot.ltq
+ifdef CONFIG_ENCRYPT_STAGE3
+		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
+		                                  -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+										  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+										  -p $(CONFIG_DSA_PRIVKEY) \
+										  -k $(CONFIG_STAGE3_AES_KEY)
+else
+		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
+		                                  -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+										  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+										  -p $(CONFIG_DSA_PRIVKEY)
+endif
+
+
+$(CONFIG_DSA_PRIVKEY):
+ifdef CONFIG_DSA_KEY_AUTO
+		@openssl dsaparam -out dsaparam.pem 1024
+		@openssl gendsa -out $(CONFIG_DSA_PRIVKEY) dsaparam.pem
+		@openssl dsa -in $(CONFIG_DSA_PRIVKEY) -out $(CONFIG_DSA_PUBKEY) -pubout
+endif
+		@echo "private key:"$(CONFIG_DSA_PRIVKEY)
+		@echo "public key: "$(CONFIG_DSA_PUBKEY)
+
+
+
+
+stage2.bin: $(CONFIG_DSA_PRIVKEY)
+		@ln -sf $(TOPDIR)/.config $(TOPDIR)/stage2/.config
+		@ln -sf $(TOPDIR)/include/configs/autoconf.h $(TOPDIR)/stage2/include/autoconf.h
+		@scripts_platform/key2header.sh $(CONFIG_DSA_PRIVKEY) stage2/bn_val.h
+		@scripts_platform/hex2array.pl aes_key $(CONFIG_STAGE3_AES_KEY) >>stage2/bn_val.h
+		@scripts_platform/mk_key_img.pl $(CONFIG_STAGE2_AES_KEY) stage2_key.bin |sed -e '/mask/!d' -e 's/mask=//g' >mask.bin
+		@cat mask.bin |xargs scripts_platform/hex2array.pl mask >$(TOPDIR)/nand_spl/board/lantiq/mask.h
+		@$(MAKE) -C $(TOPDIR)/stage2 all
+		@cp $(TOPDIR)/stage2/stage2.bin stage2.bin
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n $(CONFIG_STAGE2_SIZE) stage2.bin
+		@openssl enc -aes-256-cbc -in stage2.bin \
+		                -out stage2.enc -K $(CONFIG_STAGE2_AES_KEY) \
+		                -iv $(CONFIG_STAGE2_AES_IV) -nopad 
+
diff --git a/board/vr9/Makefile.lq b/board/vr9/Makefile.lq
--- a/board/vr9/Makefile.lq
+++ b/board/vr9/Makefile.lq
@@ -12,6 +12,9 @@ endif
 
 ALL += bootstrap.bin u-boot.lzimg u-boot.ltq $(ENV_BLOCK)
 
+ifdef CONFIG_LTQ_SECURE_BOOT
+ALL +=stage3.bin stage2.bin
+endif
 
 LDSCRIPT_BOOTSTRAP := $(TOPDIR)/board/$(BOARD)/bootstrap.lds
 ifdef CONFIG_BOOT_FROM_NOR
@@ -140,3 +143,42 @@ stools: $(TOPDIR)/board/$(BOARD)/stools.
 		$(NM) -Ss u-boot >u-boot.sym
 		scripts_platform/mk_envimg.sh $@
 
+stage3.bin: $(CONFIG_DSA_PRIVKEY) u-boot.ltq
+		@scripts_platform/pad2align.sh -n 32 u-boot.ltq
+ifdef CONFIG_ENCRYPT_STAGE3
+		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
+		                                  -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+		                                  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+		                                  -p $(CONFIG_DSA_PRIVKEY)     \
+                                          -k $(CONFIG_STAGE3_AES_KEY)
+else
+		@scripts_platform/build_stage3.sh -i u-boot.ltq -o stage3.bin \
+                                          -d $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+		                                  -j $(CONFIG_BOOTSTRAP_TEXT_BASE)\
+		                                  -p $(CONFIG_DSA_PRIVKEY)
+endif
+
+$(CONFIG_DSA_PRIVKEY):
+ifdef CONFIG_DSA_KEY_AUTO
+		@openssl dsaparam -out dsaparam.pem 1024
+		@openssl gendsa -out $(CONFIG_DSA_PRIVKEY) dsaparam.pem
+		@openssl dsa -in $(CONFIG_DSA_PRIVKEY) -out $(CONFIG_DSA_PUBKEY) -pubout
+endif
+		@echo "private key:"$(CONFIG_DSA_PRIVKEY)
+		@echo "public key: "$(CONFIG_DSA_PUBKEY)
+
+
+stage2.bin: $(CONFIG_DSA_PRIVKEY)
+		@ln -sf $(TOPDIR)/.config $(TOPDIR)/stage2/.config
+		@ln -sf $(TOPDIR)/include/configs/autoconf.h $(TOPDIR)/stage2/include/autoconf.h
+		@scripts_platform/key2header.sh $(CONFIG_DSA_PRIVKEY) stage2/bn_val.h
+		@scripts_platform/hex2array.pl aes_key $(CONFIG_STAGE3_AES_KEY) >>stage2/bn_val.h
+		@scripts_platform/mk_key_img.pl $(CONFIG_STAGE2_AES_KEY) stage2_key.bin |sed -e '/mask/!d' -e 's/mask=//g' >mask.bin
+		@cat mask.bin |xargs scripts_platform/hex2array.pl mask >$(TOPDIR)/nand_spl/board/lantiq/mask.h
+		@$(MAKE) -C $(TOPDIR)/stage2 all
+		@cp $(TOPDIR)/stage2/stage2.bin stage2.bin
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n $(CONFIG_STAGE2_SIZE) stage2.bin
+		@openssl enc -aes-256-cbc -in stage2.bin \
+		             -out stage2.enc -K $(CONFIG_STAGE2_AES_KEY) \
+					 -iv $(CONFIG_STAGE2_AES_IV) -nopad
+					
diff --git a/board/vr9/rsalinker.lds b/board/vr9/rsalinker.lds
--- a/board/vr9/rsalinker.lds
+++ b/board/vr9/rsalinker.lds
@@ -29,8 +29,8 @@ OUTPUT_ARCH(mips)
 ENTRY(_start)
 SECTIONS
 {
-   . = 0xa0600050;
-   /*. = 0xbe220050;*/ 
+   /*. = 0xa0600050;*/
+   . = 0xbe220050; 
    . = ALIGN(4);
    .text       :
    {
diff --git a/board/vr9/stools.c b/board/vr9/stools.c
--- a/board/vr9/stools.c
+++ b/board/vr9/stools.c
@@ -1,437 +1,484 @@
 static  char data [] = 
+#define      lsto_z	1
+#define      lsto	((&data[0]))
+	"\131"
 #define      date_z	1
-#define      date	((&data[0]))
-	"\044"
+#define      date	((&data[1]))
+	"\000"
+#define      rlax_z	1
+#define      rlax	((&data[2]))
+	"\131"
+#define      tst2_z	19
+#define      tst2	((&data[3]))
+	"\240\162\035\214\066\206\035\222\120\261\375\042\074\170\236\253"
+	"\177\075\154\237"
+#define      chk2_z	19
+#define      chk2	((&data[25]))
+	"\017\265\231\176\310\230\255\065\030\330\166\014\253\321\125\253"
+	"\234\177\151\107\165\136"
+#define      shll_z	8
+#define      shll	((&data[45]))
+	"\350\217\153\275\322\377\002\147\071\367"
+#define      inlo_z	3
+#define      inlo	((&data[55]))
+	"\123\063\111"
 #define      msg2_z	19
-#define      msg2	((&data[3]))
-	"\227\353\003\134\370\111\346\106\362\366\262\046\205\227\024\134"
-	"\101\341\113\012\363\000\045\057"
+#define      msg2	((&data[58]))
+	"\140\027\257\162\057\272\220\010\025\267\165\073\055\000\027\160"
+	"\241\227\061\153\214"
 #define      pswd_z	256
-#define      pswd	((&data[43]))
-	"\347\365\273\071\270\226\243\152\234\121\357\251\271\056\006\135"
-	"\035\056\321\056\377\236\024\017\305\032\055\171\060\341\166\172"
-	"\217\361\113\057\261\170\363\202\343\240\176\213\135\103\363\047"
-	"\217\304\126\216\143\152\235\050\205\313\241\266\255\030\060\074"
-	"\011\173\154\272\364\140\074\327\000\273\143\135\376\126\205\215"
-	"\033\333\034\176\106\272\247\313\205\111\202\063\141\263\160\152"
-	"\056\334\045\043\075\142\373\075\035\136\233\034\265\040\251\320"
-	"\373\306\117\102\200\367\016\006\100\220\071\241\103\252\014\162"
-	"\206\062\226\303\224\221\001\262\360\234\316\246\275\170\167\270"
-	"\076\306\373\277\276\011\305\376\231\377\240\334\252\254\117\060"
-	"\337\345\364\163\167\366\046\150\222\364\016\120\155\205\011\254"
-	"\114\004\153\012\015\061\010\246\061\251\203\333\125\322\014\064"
-	"\270\001\250\057\367\316\227\212\303\245\332\060\053\343\334\167"
-	"\347\110\201\364\171\212\233\253\063\037\206\211\362\222\276\252"
-	"\223\147\332\213\066\161\025\371\027\357\052\103\322\007\272\272"
-	"\117\074\257\311\307\112\164\373\152\373\204\134\216\103\006\042"
-	"\252\340\255\341\122\302\333\152\262\005\255\205\015\150\077\135"
-	"\244\356\312\127\312\061\373\141\035\373\207\114\002\317\046\351"
-	"\305\341\043\175\167\307\347\024\030\326\275\321\005\304\057\043"
-	"\362\371\173\274\052\166\036\107\162\245\224\164\165\272\135\072"
-	"\234\200\267\024\107\237\050\140\165"
-#define      tst2_z	19
-#define      tst2	((&data[354]))
-	"\061\325\245\124\042\176\107\333\372\154\111\203\017\025\200\022"
-	"\231\317\247\252\141"
-#define      rlax_z	1
-#define      rlax	((&data[375]))
-	"\213"
+#define      pswd	((&data[125]))
+	"\103\040\151\045\273\116\123\016\356\076\221\114\115\106\252\162"
+	"\115\165\254\105\253\061\342\105\116\117\261\333\133\147\222\237"
+	"\207\373\305\102\112\031\121\070\127\342\205\244\050\060\214\302"
+	"\306\131\165\037\125\136\044\206\341\053\157\310\207\072\334\003"
+	"\362\272\374\043\007\315\373\347\355\252\174\314\133\010\217\042"
+	"\142\005\102\270\143\147\076\105\222\256\015\032\351\351\036\334"
+	"\243\032\377\253\350\373\223\326\245\020\243\001\031\063\044\173"
+	"\070\146\063\234\315\162\341\140\041\356\172\013\330\231\347\174"
+	"\264\347\050\234\342\273\162\207\313\026\211\344\111\255\137\201"
+	"\024\223\035\342\005\377\103\047\355\276\062\305\127\032\102\013"
+	"\001\152\247\343\045\032\153\360\060\364\324\171\242\064\373\266"
+	"\310\031\230\316\030\333\365\006\231\047\314\361\102\016\374\103"
+	"\170\243\046\235\276\221\216\356\206\143\150\050\227\144\336\137"
+	"\175\167\055\226\123\043\234\355\113\150\336\215\166\332\320\357"
+	"\176\366\215\074\210\033\053\016\176\223\066\026\367\025\166\165"
+	"\215\244\013\340\307\247\315\023\020\254\240\207\206\161\166\004"
+	"\150\003\101\360\037\154\377\236\000\066\264\367\114\053\155\331"
+	"\317\170\271\227\040\207\252\060\063\113\270\272\274\056\276\044"
+	"\062\377\025\122\154\024\360\154\113\244\144\227\320\321\027\166"
+	"\245\303\274\120\365\236\226\103\356\110\036\112\257\260\351\067"
+	"\254\257\172\366\311\313\056\040\256\263\305\326\344\334\115\211"
+	"\237\011\332\225\250\160\330\226\271\366\340\151"
+#define      opts_z	1
+#define      opts	((&data[427]))
+	"\015"
+#define      xecc_z	15
+#define      xecc	((&data[429]))
+	"\111\011\303\322\342\352\001\211\376\036\203\223\336\155\316\263"
+#define      tst1_z	22
+#define      tst1	((&data[449]))
+	"\143\224\054\050\153\154\133\341\072\315\163\202\314\150\272\206"
+	"\377\271\236\363\366\170\335\143\045\000\222\020\005"
+#define      text_z	4963
+#define      text	((&data[1217]))
+	"\302\163\072\152\344\022\001\235\011\342\007\260\254\247\003\047"
+	"\302\115\152\251\305\316\076\361\367\252\002\374\143\233\241\045"
+	"\017\333\220\363\356\222\221\367\164\230\247\041\100\253\110\003"
+	"\371\262\254\277\200\353\260\170\226\263\164\371\116\025\037\135"
+	"\361\260\121\337\102\342\326\266\173\176\330\273\052\040\276\044"
+	"\322\153\343\123\127\224\313\355\107\100\346\225\126\005\363\107"
+	"\265\105\047\370\047\375\257\243\174\207\136\247\247\035\313\172"
+	"\210\256\316\337\102\232\314\211\332\263\037\060\270\022\170\156"
+	"\130\237\146\200\235\025\043\032\235\201\301\104\236\214\276\047"
+	"\073\215\006\175\047\323\007\002\206\046\062\077\071\253\255\222"
+	"\113\024\022\350\052\065\002\307\267\304\014\126\121\313\175\214"
+	"\130\204\012\177\127\022\201\336\071\264\035\163\140\313\005\253"
+	"\340\027\223\013\114\226\323\004\133\337\132\254\252\327\071\003"
+	"\134\104\202\264\127\004\222\220\271\260\003\031\173\010\304\134"
+	"\040\130\147\155\357\073\161\113\032\313\367\305\243\061\310\000"
+	"\166\113\264\315\120\106\136\011\366\142\043\162\153\350\317\213"
+	"\101\067\370\060\162\152\173\215\066\163\123\332\245\034\332\034"
+	"\150\216\352\270\325\110\302\314\252\345\077\026\316\016\241\017"
+	"\106\232\077\270\004\273\106\073\057\231\025\324\265\357\361\035"
+	"\176\333\326\124\044\230\040\317\176\140\345\114\157\206\133\265"
+	"\041\233\156\046\127\264\141\206\116\166\133\003\146\115\041\345"
+	"\050\370\071\114\221\132\033\020\272\001\134\051\210\270\337\251"
+	"\124\115\317\254\001\061\063\117\247\216\123\016\334\165\363\004"
+	"\155\054\121\377\206\155\017\101\156\154\152\366\045\111\237\171"
+	"\226\157\046\230\240\131\350\110\350\073\127\304\261\112\310\037"
+	"\167\032\036\375\207\055\076\365\232\251\353\277\362\213\071\211"
+	"\373\137\042\234\270\012\345\241\106\074\145\367\206\056\026\376"
+	"\110\064\373\320\142\072\305\374\343\261\273\326\075\365\140\070"
+	"\124\203\325\015\215\272\256\323\366\024\313\175\102\341\173\213"
+	"\026\167\133\171\262\041\165\226\323\061\155\020\046\315\111\173"
+	"\120\036\210\336\330\067\262\317\113\175\115\216\137\311\032\165"
+	"\100\166\356\363\230\144\211\153\225\366\173\274\304\305\067\025"
+	"\343\277\363\274\366\246\214\102\043\331\320\203\242\353\371\343"
+	"\141\347\326\371\114\140\144\342\126\340\236\033\245\325\060\211"
+	"\225\044\105\214\312\321\316\356\253\237\161\116\213\152\061\354"
+	"\122\010\346\237\151\112\201\300\053\037\333\321\365\013\132\212"
+	"\060\240\027\373\162\346\351\036\205\133\154\020\306\236\375\031"
+	"\247\343\270\020\056\072\320\132\132\254\053\117\270\206\332\350"
+	"\047\361\343\232\327\315\270\135\050\044\156\357\302\154\010\152"
+	"\117\301\172\176\374\113\330\126\367\003\246\260\212\200\230\262"
+	"\162\174\114\112\112\004\250\163\051\027\142\354\203\153\126\322"
+	"\055\321\120\051\034\050\177\024\054\045\305\267\246\136\151\030"
+	"\332\265\143\044\272\013\227\343\043\372\317\246\145\045\170\222"
+	"\367\311\274\024\362\073\050\036\141\356\326\007\114\077\040\046"
+	"\365\203\113\257\217\343\222\262\335\142\130\103\210\321\326\177"
+	"\232\222\223\214\315\274\253\057\252\201\066\366\301\127\035\266"
+	"\332\150\145\152\114\367\035\051\231\260\043\107\376\036\042\050"
+	"\212\107\002\055\325\266\173\223\304\020\105\317\020\272\102\133"
+	"\015\304\120\337\321\213\306\061\171\034\274\177\165\311\120\207"
+	"\151\213\260\253\043\227\151\202\312\117\120\275\176\077\357\267"
+	"\307\107\054\327\133\060\332\237\326\054\347\113\021\320\376\053"
+	"\136\050\201\344\000\041\246\120\045\270\243\232\347\021\232\163"
+	"\161\043\151\120\111\070\347\221\124\063\373\011\026\322\015\323"
+	"\343\100\050\262\113\030\145\166\241\157\320\365\260\344\112\075"
+	"\136\023\066\252\046\330\121\033\134\254\051\000\105\335\063\305"
+	"\277\213\215\341\261\254\055\243\222\227\000\252\273\137\321\351"
+	"\312\133\303\047\131\005\047\331\247\144\224\164\345\203\120\204"
+	"\272\304\030\241\040\331\003\105\131\212\363\216\303\316\343\053"
+	"\005\242\161\143\012\333\225\146\217\366\075\327\163\015\001\342"
+	"\017\263\347\110\272\133\374\115\015\320\020\273\167\074\227\314"
+	"\254\115\363\123\035\112\070\211\145\022\070\165\026\147\111\360"
+	"\333\377\042\304\017\327\317\300\026\077\364\012\073\221\322\371"
+	"\215\015\270\207\235\047\323\137\127\041\250\310\374\003\356\365"
+	"\361\204\367\174\225\103\237\242\176\365\245\177\036\130\254\351"
+	"\151\345\277\237\177\163\107\010\370\067\353\031\246\371\036\047"
+	"\145\044\304\042\347\164\173\032\166\034\352\100\371\141\071\347"
+	"\376\306\137\237\303\311\053\060\015\172\330\027\143\027\156\377"
+	"\120\222\027\162\232\006\262\345\321\354\221\016\054\144\346\160"
+	"\054\007\351\063\234\266\333\035\313\360\321\320\263\320\347\332"
+	"\235\356\301\306\167\367\063\313\302\055\371\353\166\202\360\376"
+	"\045\352\322\124\066\130\326\332\062\277\112\226\145\215\366\032"
+	"\042\176\347\043\111\113\257\170\163\130\075\337\131\272\146\000"
+	"\161\051\344\252\046\221\054\345\170\154\113\245\070\211\333\124"
+	"\061\042\356\052\165\021\045\316\051\113\104\335\141\325\330\047"
+	"\072\164\263\176\033\263\077\077\212\364\142\267\346\251\164\043"
+	"\153\114\047\301\370\333\062\121\342\206\077\052\060\300\303\124"
+	"\074\324\140\327\337\070\152\202\046\104\300\372\047\054\117\121"
+	"\360\343\075\026\060\215\103\231\147\142\232\055\356\336\060\276"
+	"\260\200\045\030\217\133\055\115\247\124\222\241\237\101\322\011"
+	"\214\132\120\275\114\054\351\227\200\116\260\371\361\215\360\161"
+	"\051\126\277\041\345\270\251\211\164\211\314\055\041\024\122\024"
+	"\262\060\124\256\022\057\131\005\345\107\315\105\014\156\143\216"
+	"\360\367\227\053\147\262\005\054\374\116\103\053\343\125\213\351"
+	"\046\120\051\335\376\327\257\145\113\275\143\023\235\320\154\121"
+	"\141\371\210\105\305\336\075\150\214\010\124\136\313\133\137\075"
+	"\043\257\357\030\136\117\333\031\241\225\031\262\047\366\227\304"
+	"\117\342\115\322\026\234\163\152\143\030\335\323\265\343\121\237"
+	"\214\145\171\016\364\332\365\126\227\300\275\020\071\107\127\273"
+	"\201\161\145\241\312\044\006\163\144\133\231\355\126\377\234\137"
+	"\056\004\036\226\305\147\165\150\352\360\342\020\146\172\173\310"
+	"\262\254\222\021\242\171\067\145\105\120\253\152\246\045\071\216"
+	"\320\130\215\217\315\013\102\257\322\316\350\117\114\266\256\304"
+	"\252\063\162\036\003\132\213\253\211\232\311\000\345\201\377\300"
+	"\250\000\044\276\114\320\026\112\247\255\267\007\265\107\022\373"
+	"\105\172\143\353\230\011\213\304\052\071\104\124\325\256\121\316"
+	"\075\335\202\304\027\361\007\215\223\315\327\035\142\123\274\045"
+	"\242\201\303\300\071\100\260\363\264\001\313\072\034\212\004\160"
+	"\173\072\247\204\216\257\027\364\215\326\371\246\362\360\051\125"
+	"\143\004\364\177\265\051\123\311\206\200\036\036\253\331\166\212"
+	"\161\321\246\173\215\223\064\134\232\075\012\113\350\373\135\127"
+	"\367\255\173\273\120\120\245\351\151\104\227\170\057\143\152\225"
+	"\153\341\275\147\266\274\170\035\107\054\173\164\000\172\165\025"
+	"\355\012\107\114\267\314\203\065\021\165\163\001\031\072\214\324"
+	"\132\273\102\246\212\353\223\151\351\053\146\043\177\160\322\077"
+	"\202\102\236\137\211\075\306\345\354\372\170\236\253\363\204\115"
+	"\215\230\071\012\165\375\352\234\022\062\001\254\154\316\253\131"
+	"\276\212\160\207\213\337\035\342\247\070\044\113\156\204\166\250"
+	"\023\136\150\257\132\035\265\132\366\325\350\113\325\017\330\237"
+	"\244\114\304\131\160\102\330\246\136\066\264\375\170\261\353\232"
+	"\234\203\076\323\173\105\111\152\162\112\014\323\043\205\141\001"
+	"\046\140\353\320\227\332\311\254\066\134\346\355\323\164\112\252"
+	"\004\303\175\235\124\120\332\131\302\321\301\117\264\031\106\226"
+	"\135\037\004\342\225\325\231\173\322\240\362\202\115\201\150\124"
+	"\163\324\026\227\244\250\076\240\366\167\076\105\161\123\373\114"
+	"\277\015\135\107\015\301\275\311\264\250\141\017\172\253\135\041"
+	"\262\062\152\224\110\233\211\326\220\321\030\031\020\222\156\273"
+	"\232\165\074\365\325\127\176\307\220\020\223\123\330\334\030\251"
+	"\110\141\314\021\141\165\123\171\156\010\231\320\326\322\055\167"
+	"\176\036\307\010\177\230\114\076\020\071\141\242\100\364\031\055"
+	"\127\335\203\077\270\342\053\301\316\370\122\050\022\323\041\247"
+	"\341\051\107\032\272\301\207\230\141\330\215\214\003\211\165\065"
+	"\267\076\052\341\265\026\243\077\112\302\011\312\225\273\337\166"
+	"\204\321\327\366\371\126\350\142\061\222\013\062\041\061\322\105"
+	"\165\120\332\371\021\011\361\124\342\262\314\355\016\077\034\062"
+	"\377\165\064\162\011\034\044\240\343\015\140\056\321\176\271\307"
+	"\266\373\123\335\072\264\007\340\162\020\262\215\312\235\124\144"
+	"\367\006\060\350\375\140\044\331\025\310\000\012\072\177\160\256"
+	"\053\043\024\056\116\203\045\266\212\206\307\222\023\114\036\233"
+	"\133\236\356\124\060\077\214\243\170\057\312\021\065\352\043\055"
+	"\061\375\110\113\241\166\150\377\307\073\035\201\153\027\341\336"
+	"\102\355\172\300\112\372\254\210\065\033\046\340\334\077\176\071"
+	"\073\227\103\206\202\044\006\034\273\231\304\063\066\266\222\317"
+	"\336\254\363\370\363\345\021\335\016\143\244\351\231\003\244\051"
+	"\224\023\000\230\002\373\205\341\321\374\252\201\021\156\266\213"
+	"\374\007\045\356\014\321\035\257\166\340\230\345\202\043\370\025"
+	"\332\041\273\250\342\145\265\141\253\357\347\021\205\314\342\251"
+	"\114\264\116\312\135\103\257\317\176\216\053\070\040\340\372\153"
+	"\315\242\142\027\226\147\052\203\032\011\251\230\002\242\047\255"
+	"\200\027\077\204\252\173\066\122\152\314\007\176\042\301\277\362"
+	"\141\355\216\371\201\161\203\031\130\111\023\105\317\373\206\327"
+	"\150\353\006\247\005\010\137\001\176\017\376\061\260\233\230\156"
+	"\155\172\352\050\100\116\352\056\316\157\334\110\234\316\104\325"
+	"\226\207\212\223\231\303\216\352\335\304\254\302\275\165\024\223"
+	"\354\271\040\321\176\267\171\006\306\224\373\253\045\225\250\351"
+	"\073\152\367\060\151\206\204\102\163\340\060\011\361\312\030\276"
+	"\045\076\146\325\310\060\070\322\272\022\174\074\137\254\164\112"
+	"\033\046\116\023\104\316\125\315\150\201\342\007\033\000\343\146"
+	"\001\114\074\141\232\342\200\045\126\003\217\310\216\246\376\327"
+	"\033\365\263\206\032\253\033\236\361\230\344\152\307\310\103\065"
+	"\177\155\051\121\072\135\125\012\054\076\353\170\160\073\227\020"
+	"\247\100\243\223\317\202\210\121\325\134\201\340\356\161\266\063"
+	"\351\252\205\052\340\152\047\152\327\047\174\167\270\226\031\310"
+	"\262\007\320\143\265\263\250\070\361\060\277\117\303\030\377\175"
+	"\003\115\262\265\224\116\012\330\054\244\174\227\174\351\052\325"
+	"\003\365\355\055\341\211\355\361\320\112\264\237\146\354\302\352"
+	"\364\030\234\050\174\254\210\001\164\336\165\223\107\340\175\265"
+	"\365\267\254\236\000\136\013\347\317\351\116\271\321\275\110\135"
+	"\233\314\373\376\141\347\131\253\165\034\336\036\051\337\151\072"
+	"\361\262\023\051\264\004\136\216\325\363\031\111\025\006\231\023"
+	"\223\217\052\265\322\275\065\133\256\276\352\162\204\217\074\353"
+	"\015\203\212\366\231\154\040\046\250\164\257\334\376\201\177\251"
+	"\002\312\176\114\072\022\062\324\002\006\131\146\251\277\241\342"
+	"\055\213\202\113\346\063\364\254\235\243\037\230\261\213\364\342"
+	"\123\362\153\331\055\200\351\137\134\272\141\015\377\353\125\117"
+	"\055\255\106\137\364\201\140\156\033\352\036\076\374\351\127\010"
+	"\300\242\376\115\001\242\336\142\061\217\207\015\300\136\077\301"
+	"\251\123\200\306\032\251\005\327\053\043\130\124\072\351\311\016"
+	"\151\076\122\305\234\024\375\106\142\126\012\006\241\177\175\103"
+	"\071\254\223\164\073\135\301\353\327\011\114\221\204\374\026\355"
+	"\275\370\324\362\042\042\336\057\003\077\037\237\017\345\242\347"
+	"\157\042\372\167\371\231\232\221\307\176\161\162\100\356\000\360"
+	"\366\320\003\045\050\116\013\173\012\311\125\357\325\365\340\354"
+	"\373\141\353\322\250\361\217\044\140\203\156\175\347\365\321\262"
+	"\334\047\017\040\000\113\163\301\330\261\001\247\167\272\027\175"
+	"\117\264\061\027\302\025\363\274\262\155\211\167\161\265\004\042"
+	"\240\352\345\321\325\354\221\137\114\056\347\153\376\326\340\135"
+	"\136\115\213\176\156\163\110\154\135\253\200\013\265\177\256\352"
+	"\047\211\217\263\176\217\267\361\275\035\045\174\140\150\160\113"
+	"\142\057\365\017\032\104\266\051\246\255\104\342\325\024\365\250"
+	"\033\106\230\351\272\252\344\152\175\162\044\120\316\044\156\375"
+	"\312\337\243\010\252\046\334\312\142\202\210\071\317\056\062\042"
+	"\100\047\377\132\265\347\376\064\165\202\076\154\240\160\013\226"
+	"\205\161\011\275\317\305\231\257\147\050\117\115\157\305\011\240"
+	"\330\162\166\004\130\267\202\236\177\000\001\070\060\246\304\161"
+	"\163\235\103\274\162\116\363\214\023\115\163\003\003\200\270\344"
+	"\063\126\331\222\146\027\131\312\234\273\267\325\064\172\175\124"
+	"\065\222\236\351\210\230\342\104\120\121\231\221\075\370\262\004"
+	"\154\234\044\066\041\350\267\005\307\151\130\235\335\004\265\207"
+	"\265\246\073\335\354\256\371\043\036\211\331\071\246\371\244\106"
+	"\043\000\027\356\153\041\372\270\010\234\265\100\315\043\274\213"
+	"\240\176\125\212\277\026\342\065\335\365\327\152\062\057\364\144"
+	"\207\362\254\262\353\007\046\237\207\151\311\227\261\300\161\052"
+	"\121\174\034\023\106\154\155\045\344\073\145\166\340\315\004\316"
+	"\271\203\052\214\101\035\052\012\273\363\334\270\112\110\324\004"
+	"\332\251\361\206\032\215\157\362\201\376\162\213\317\025\130\221"
+	"\172\363\225\102\314\117\276\233\211\116\155\300\023\020\362\233"
+	"\125\366\054\035\206\272\113\105\214\074\227\331\165\054\201\327"
+	"\373\371\117\065\370\344\274\144\362\070\343\307\051\156\031\207"
+	"\164\266\050\205\313\312\234\104\052\253\255\117\070\165\043\326"
+	"\017\161\333\033\052\361\360\040\054\026\131\012\065\243\260\214"
+	"\175\117\324\053\123\343\064\340\360\235\151\133\217\310\143\145"
+	"\375\212\355\201\331\176\111\332\244\112\351\324\353\046\176\204"
+	"\150\375\036\360\214\227\020\131\034\152\056\333\134\156\132\064"
+	"\210\376\375\246\060\352\207\256\311\052\046\120\062\051\062\036"
+	"\273\024\367\123\324\351\265\100\343\373\037\125\315\177\351\160"
+	"\354\357\131\331\151\310\333\101\166\207\316\143\046\271\046\027"
+	"\255\323\115\217\342\007\240\273\075\212\340\253\041\021\340\317"
+	"\231\122\027\217\361\247\052\236\110\255\150\372\203\062\034\213"
+	"\370\206\103\203\236\354\004\164\267\166\037\302\345\161\054\040"
+	"\323\301\046\261\327\257\253\161\046\334\226\106\174\353\242\176"
+	"\241\313\152\021\264\130\060\110\056\200\055\040\277\170\011\247"
+	"\103\244\004\311\316\365\216\101\141\041\052\046\220\203\240\065"
+	"\020\024\066\255\335\052\225\175\275\321\162\273\103\204\265\341"
+	"\136\272\373\165\017\014\013\267\352\125\301\337\271\064\170\000"
+	"\362\141\014\137\170\367\166\102\110\233\220\342\007\217\163\357"
+	"\233\070\021\163\234\135\305\147\147\117\355\244\041\272\041\171"
+	"\133\212\313\134\177\060\054\272\235\351\203\030\020\132\200\374"
+	"\041\125\255\335\254\304\076\321\034\040\355\270\051\252\140\013"
+	"\066\126\034\205\221\041\233\301\164\006\334\050\154\320\076\356"
+	"\243\150\071\331\174\357\212\366\317\134\064\165\371\016\023\165"
+	"\225\261\163\146\136\252\356\124\044\032\013\203\121\100\004\063"
+	"\162\157\332\362\167\265\206\373\024\214\371\002\205\274\267\077"
+	"\276\222\216\052\204\262\001\032\111\354\135\052\257\246\245\324"
+	"\377\350\333\170\017\164\016\114\263\114\200\323\365\042\000\104"
+	"\005\263\156\164\015\244\116\363\321\260\154\266\026\064\174\343"
+	"\030\240\255\042\343\303\043\060\363\011\227\135\150\353\156\151"
+	"\010\334\143\155\215\235\225\006\142\120\214\354\035\017\146\167"
+	"\012\052\024\122\052\301\175\032\352\176\140\145\012\247\003\152"
+	"\242\331\332\030\237\016\374\274\010\151\357\375\363\250\111\125"
+	"\275\201\052\164\251\340\343\300\375\154\012\037\142\321\147\137"
+	"\224\310\360\237\270\150\050\035\117\101\215\016\135\040\256\143"
+	"\102\066\272\240\354\327\267\043\172\310\251\007\243\323\043\237"
+	"\130\105\345\140\357\233\222\244\202\264\011\304\055\042\242\251"
+	"\355\121\245\335\374\265\327\120\373\062\327\220\137\033\314\273"
+	"\070\336\117\010\012\124\376\157\074\032\005\314\075\345\072\106"
+	"\036\316\266\206\260\146\237\045\343\353\160\240\320\073\075\372"
+	"\315\161\177\104\044\363\001\123\111\124\275\341\011\234\267\224"
+	"\355\302\377\233\132\025\275\054\063\176\011\120\354\263\370\004"
+	"\334\006\015\035\223\160\264\313\155\324\134\316\317\147\343\326"
+	"\163\016\156\000\123\046\063\322\305\242\202\273\004\104\327\230"
+	"\243\322\116\236\036\027\251\002\004\115\332\223\060\265\202\113"
+	"\161\040\210\106\341\026\147\146\312\205\277\215\026\313\067\207"
+	"\303\004\121\164\107\131\251\146\257\173\207\026\025\010\231\012"
+	"\133\027\367\173\111\121\155\254\074\071\255\112\220\364\220\066"
+	"\333\026\051\140\035\272\147\106\321\163\204\351\301\015\230\215"
+	"\333\056\140\167\052\323\303\304\275\350\114\125\024\251\243\222"
+	"\334\200\255\132\164\275\066\264\037\273\071\072\011\105\261\046"
+	"\175\205\004\054\365\367\207\230\311\004\046\361\062\063\056\066"
+	"\316\157\201\054\227\377\341\024\011\034\341\367\037\127\314\342"
+	"\145\203\201\342\174\341\120\230\324\072\044\211\101\217\364\310"
+	"\143\035\262\300\162\024\267\154\076\136\046\212\052\271\041\324"
+	"\306\154\030\324\137\277\330\076\061\237\256\131\142\376\057\057"
+	"\207\364\113\270\047\273\150\355\204\341\354\000\360\140\276\101"
+	"\342\114\220\200\336\260\136\143\266\137\335\024\013\344\121\265"
+	"\004\166\311\144\245\361\120\274\132\053\274\165\102\343\047\125"
+	"\113\074\010\370\327\231\160\333\034\344\374\000\252\373\177\275"
+	"\257\032\100\126\124\224\347\113\146\244\053\246\021\103\243\137"
+	"\003\323\062\165\046\007\177\101\245\057\374\074\174\305\351\006"
+	"\063\035\041\355\213\050\021\325\102\151\172\372\250\353\063\136"
+	"\230\007\340\241\051\136\055\166\165\136\133\104\176\066\161\152"
+	"\313\011\260\012\260\350\120\231\303\277\077\316\301\173\006\316"
+	"\245\357\234\151\233\342\224\312\172\346\107\174\257\111\302\115"
+	"\037\316\315\001\353\265\157\051\226\334\310\303\206\332\135\073"
+	"\357\155\162\016\144\232\175\120\145\334\036\062\354\140\261\270"
+	"\306\024\366\225\350\261\063\262\200\310\360\240\213\262\120\371"
+	"\130\225\034\062\246\053\212\073\130\332\362\177\016\003\212\016"
+	"\356\377\277\046\345\044\041\021\264\230\017\115\164\357\325\371"
+	"\071\030\214\326\357\175\160\061\204\070\244\116\035\102\345\160"
+	"\025\034\040\377\250\324\103\353\335\317\320\351\357\017\025\244"
+	"\330\067\351\066\224\133\163\076\262\174\264\370\244\070\047\062"
+	"\062\165\053\167\254\073\052\217\205\241\116\032\336\032\020\313"
+	"\002\165\146\215\053\127\201\115\374\042\026\225\372\362\206\217"
+	"\321\142\213\154\022\035\307\250\267\367\064\263\351\076\301\041"
+	"\270\030\016\330\120\227\241\257\145\314\133\322\146\332\357\003"
+	"\215\232\243\336\315\022\217\004\233\006\266\047\236\216\350\311"
+	"\025\334\217\300\323\003\216\223\167\300\151\355\130\037\171\001"
+	"\355\203\004\243\151\115\371\203\041\360\155\147\176\074\077\025"
+	"\046\236\023\314\141\243\037\144\032\341\047\374\200\176\304\216"
+	"\351\000\270\130\243\374\225\261\020\204\003\010\262\013\066\156"
+	"\001\377\173\162\276\066\372\273\357\051\244\363\013\000\004\350"
+	"\174\256\055\003\122\146\326\311\060\034\173\022\270\122\320\210"
+	"\274\212\243\021\171\167\065\047\235\340\055\021\001\172\373\037"
+	"\261\041\224\027\272\344\163\312\001\243\301\212\273\232\243\345"
+	"\361\373\164\111\152\211\241\320\236\046\275\145\152\037\255\204"
+	"\172\231\067\277\016\356\266\263\016\154\355\172\305\132\067\324"
+	"\316\245\321\214\033\272\142\160\102\176\316\364\217\334\034\060"
+	"\332\241\347\072\247\120\102\062\316\046\077\244\273\306\373\352"
+	"\043\265\315\347\276\067\251\361\170\327\351\067\275\324\266\314"
+	"\304\235\224\175\161\256\120\165\311\200\323\005\034\270\304\250"
+	"\005\146\313\156\217\030\034\075\202\061\046\014\343\263\015\073"
+	"\111\106\326\070\215\246\032\175\011\235\263\060\066\027\255\346"
+	"\043\337\332\100\014\154\342\375\100\352\053\274\133\102\151\000"
+	"\074\306\012\103\146\136\326\021\261\121\232\070\114\243\277\157"
+	"\244\106\315\235\354\107\265\046\322\027\211\067\020\044\354\215"
+	"\273\222\041\065\050\173\314\054\032\301\315\267\052\324\021\204"
+	"\067\315\252\157\314\067\222\164\025\006\057\005\167\057\153\226"
+	"\375\302\141\365\341\244\352\057\337\115\164\154\111\004\331\206"
+	"\125\325\103\135\214\134\032\247\163\321\066\323\240\276\101\313"
+	"\267\304\035\172\217\153\064\040\126\002\012\007\356\266\153\222"
+	"\174\270\245\254\274\362\277\313\351\140\351\143\005\201\001\115"
+	"\336\060\022\157\107\006\351\120\360\267\142\125\146\231\147\050"
+	"\046\304\067\306\152\376\024\101\206\043\313\102\162\203\230\340"
+	"\104\061\330\330\266\120\111\254\323\010\160\006\346\043\140\365"
+	"\145\171\100\111\143\002\247\006\314\106\256\253\125\173\166\242"
+	"\045\276\067\202\243\276\247\334\073\251\364\104\175\236\254\001"
+	"\305\035\114\235\207\166\160\200\161\151\351\001\046\046\004\330"
+	"\076\017\236\136\241\176\036\146\237\061\006\317\340\020\033\127"
+	"\240\050\046\344\157\343\251\040\251\242\302\237\312\373\165\060"
+	"\166\306\017\110\122\352\013\154\160\047\136\303\231\144\075\116"
+	"\135\300\070\200\054\064\052\170\156\323\010\143\033\320\370\033"
+	"\321\307\216\363\211\144\226\106\051\346\267\176\243\147\241\057"
+	"\325\367\063\205\352\021\112\031\015\333\373\042\140\102\374\105"
+	"\366\205\301\155\036\366\274\275\171\110\361\157\215\210\274\070"
+	"\304\363\031\261\352\062\023\243\240\140\002\020\003\366\213\171"
+	"\070\131\144\270\305\357\256\341\056\156\030\203\144\254\034\323"
+	"\356\113\073\257\062\273\345\372\136\012\260\001\132\115\376\313"
+	"\032\257\126\272\213\055\065\310\026\013\257\117\135\031\267\207"
+	"\014\030\125\306\371\070\153\176\137\274\172\364\140\223\362\335"
+	"\322\025\225\134\123\240\177\354\171\177\357\275\266\352\253\147"
+	"\213\150\174\227\207\376\377\257\245\137\035\033\041\250\110\012"
+	"\324\145\265\010\311\257\205\270\076\337\364\161\320\011\227\217"
+	"\162\045\240\374\316\025\322\325\066\213\063\243\040\027\345\046"
+	"\212\357\077\247\300\120\013\104\326\356\307\177\334\121\223\316"
+	"\120\204\241\101\265\122\046\073\050\021\107\346\204\013\164\357"
+	"\025\346\211\235\357\206\115\077\023\255\002\200\111\254\105\354"
+	"\357\017\045\244\200\143\103\011\232\272\053\134\134\165\352\310"
+	"\266\026\325\335\226\323\310\320\146\171\231\132\012\030\136\341"
+	"\365\377\257\204\171\346\250\052\231\372\336\302\303\215\365\153"
+	"\020\177\312\231\002\225\201\004\135\041\015\230\122\114\265\213"
+	"\304\370\362\352\213\071\232\244\137\246\025\046\376\014\265\023"
+	"\237\140\062\176\222\275\361\175\313\032\055\120\073\233\072\352"
+	"\367\150\150\014\322\175\333\144\236\024\005\266\307\347\214\362"
+	"\020\055\000\274\306\344\327\032\367\215\356\350\110\314\051\155"
+	"\321\227\040\232\357\252\224\157\117\006\074\301\236\351\341\142"
+	"\154\241\300\075\035\014\271\072\256\055\022\167\136\010\036\252"
+	"\166\054\174\240\310\347\065\277\144\244\075\176\347\277\045\162"
+	"\173\046\273\246\052\162\353\307\277\252\146\030\256\353\302\174"
+	"\150\277\370\052\232\217\261\174\136\271\062\365\114\127\220\355"
+	"\242\170\201\173\126\000\300\046\271\160\332\071\011\303\361\154"
+	"\126\035\225\172\000\016\076\002\341\275\007\265\073\266\061\123"
+	"\216\245\040\100\122\064\244\024\224\131\151\012\306\042\236\026"
+	"\214\216\014\353\151\360\261\315\272\333\263\362\235\120\145\046"
+	"\024\317\053\244\221\106\321\122\037\041\257\225\040\203\210\075"
+	"\116\372\053\252\344\324\312\023\331\241\203\110\141\372\377\014"
+	"\360\275\352\305\236\051\246\124\230\345\213\111\163\112\105\363"
+	"\356\054\027\242\320\316\055\266\016\053\214\325\117\373\361\266"
+	"\003\352\140\120\207\074\223\242\002\177\032\163\233\147\137\053"
+	"\064\175\101\117\246\364\260\115\241\363\000\203\131\067\026\152"
+	"\177\254\136\267\220\142\031\121\247\266\320\103\132\370\212\113"
+	"\274\120\257\115\200\227\005\223\105\303\013\270\065\210\172\165"
+	"\377\162\267\161\012\344\070\341\262\311\346\333\064\074\277\231"
+	"\041\142\056\110\176\110\355\014\301\276\277\350\367\373\007\070"
+	"\060\036\167\026\374\171\046\306\227\266\370\313\144\005\074\205"
+	"\045\115\211\322\075\044\036\215\021\017\324\255\021\155\324\320"
+	"\017\272\320\127\263\070\006\150\245\326\133\115\101\320\066\026"
+	"\001\065\023\164\315\235\270\234\071\015\001\170\263\112\336\310"
+	"\221\114\223\117\066\253\076\346\005\031\120\132\166\154\342\110"
+	"\103\141\343\325\365\160\243\261\033\322\134\235\011\122\136\140"
+	"\160\024\073\330\171\246\044\161\303\116\314\072\273\256\202\376"
+	"\020\146\324\005\326\167\267\362\112\023\217\123\146\355\263\326"
+	"\002\356\257\174\224\324\356\130\043\272\223\336\151\026\335\171"
+	"\174\261\177\122\051\067\104\163\113\324\306\261\302\172\210\304"
+	"\150\070\101\375\014\057\126\057\352\351\016\123\377\354\314\173"
+	"\235\114\316\306\203\022\072\316\346\000\200\250\173\011\155\344"
+	"\101\256\341\116\336\070\176\310\041\214\033\041\170\347\234\026"
+	"\064\152\335\267\175\027\205\144\030\006\015\223\017\172\167\120"
+	"\051\131\237\007\221\035\317\263\252\352\324\042\322\161\071\006"
+	"\334\026\275\131\056\103\276\106\112\313\332\131\106\122\252\157"
+	"\253\111\166\075\147\105\361\021\060\305\064\002\066\155\010\022"
+	"\204\306\154\263\012\053\371\124\366\324\256\074\046\131\254\322"
+	"\243\042\020\012\150\001\033\230\306\120\233\375\276\244\020\102"
+	"\152\174\366\165\250\360\312\236\304\170\333\353\321\207\275\164"
+	"\252\315\176\022\317\232\253\225\352\106\223\251\352\243\354\125"
+	"\040\342\312\310\322\224\147\226\015\102\202\336\312\077\123\164"
+	"\015\322\207\335\154\062\162\127\171\006\000\143\251\355\270\312"
+	"\317\203\223\241\030\372\070\045\075\272\004\007\372\127\174\010"
+	"\051\003\345\225\066\130\355\257\136\356\023\010\333\314\323\252"
+	"\117\146\114\150\140\205\215\235\100\221\245\072\350\041\102\021"
+	"\045\050\247\134\200\225\014\337\203\037\347\137\353\272\012\073"
+	"\040\127\243\201\334\061\037\034\303\304\127\254\346\232\276\014"
+	"\302\145\150\103\373\165\042\177\224\012\336\200\304\350\274\345"
+	"\100\140\147\034\221\206\070\124\113\220\001\062\052\277\076\354"
+	"\045\247\057\040\034\121\237\261\133\176\061\040\147\355\006\247"
+	"\115\155\303\337\364\374\064\077\214\065\161\266\364\260\243\031"
+	"\130\322\071\164\044\331\046\200\127\127\241\276\105\250\146\223"
+	"\025\051\162\012\046\246\111\263\334\273\151\320\153\015\352\303"
+	"\337\044\070\004\375\137\205\125\267\047\024\374\317\172\217\345"
+	"\244\002\357\313\251\070\176\205\363\347\126\137\364\100\043\324"
+	"\145\133\331\142\273\137\270\162\206\315\156\125\107\376\073\354"
+	"\001\052\267\252\143\065\060\127\035\207\266\022\310\332\347\055"
+	"\066\301\220\361\040\110\143\246\025\321\374\135\320\070\112\321"
+	"\142\001\174\306\067\255\035\124\064\324\147\375\256\116\052\344"
+	"\020\273\326\060\004\071\327\032\013\324\170\333\014\302\255\157"
+	"\303\052\065\373\327\123\120\014\047\267\011\326\006\064\273\026"
+	"\360\221\107\364\312\036\016\326\363\206\261\377\110\137\157\014"
+	"\212\245\010\141\370\130\156\037\017\170\366\026\255\261\055\235"
+	"\102\164\222\015\223\240\343\206\047\225\206\160\365\366\175\177"
+	"\233\205\341\223\335\120\263\355\310\251\004\166\133\061\023\236"
+	"\245\245\253\071\106\217\300\156\045\106\337\032\074\134\232\330"
+	"\341\173\153\277\313\037\254\224\310\261\012\044\342\036\302\210"
+	"\303\156\301\012\375\201\171\043\310\130\076\005\264\330\335\226"
+	"\124\110\125\040\147\002\264\060\263\277\124\226\335\027\036\241"
+	"\205\340\254\203\141\045\246\052\175\345\057\061\275\014\310\022"
+	"\125\036\062\275\040\347\356\324\246\103\152\204\132\211\045\340"
+	"\151\321\143\313\366\012\365\164\360\045\245\256\061\156\300\207"
+	"\214\363\104\255\332\063\201\201\166\354\005\321\165\053\261\336"
+	"\374\025\252\363\040\237\147\020\304\015\276"
 #define      msg1_z	42
-#define      msg1	((&data[379]))
-	"\221\170\315\355\274\361\052\171\361\120\033\243\322\102\146\107"
-	"\140\135\264\257\364\151\305\130\262\347\041\265\270\127\204\002"
-	"\324\326\312\304\267\075\150\241\035\232\160\300\304\003\035\142"
-	"\167\222"
-#define      shll_z	8
-#define      shll	((&data[428]))
-	"\271\125\146\153\071\175\306\202\140\104\204\315"
-#define      opts_z	1
-#define      opts	((&data[438]))
-	"\045"
-#define      chk2_z	19
-#define      chk2	((&data[442]))
-	"\057\025\207\134\224\361\175\062\370\153\301\270\221\007\216\345"
-	"\104\330\006\211\267\044\221\264\044\354"
-#define      text_z	4668
-#define      text	((&data[1041]))
-	"\140\366\100\144\024\242\333\247\277\260\164\171\006\371\107\243"
-	"\034\075\241\266\032\321\313\241\142\200\305\117\120\104\302\261"
-	"\072\002\025\116\245\361\365\145\242\152\336\250\143\046\114\200"
-	"\143\356\066\175\277\002\037\042\203\345\161\323\051\063\205\143"
-	"\066\233\262\334\214\250\102\056\022\041\327\166\107\044\366\252"
-	"\022\054\050\321\057\107\364\262\054\145\206\126\231\013\272\320"
-	"\246\154\254\063\025\356\142\050\017\071\236\127\135\225\001\157"
-	"\301\052\101\360\162\065\243\237\233\052\365\065\065\257\005\334"
-	"\034\262\017\062\241\162\132\261\253\371\010\011\216\012\171\120"
-	"\064\273\101\246\361\344\106\215\016\073\302\104\352\310\041\007"
-	"\173\061\071\034\243\223\315\117\215\326\131\033\340\322\154\025"
-	"\216\255\274\177\222\002\014\241\075\317\345\050\227\007\057\022"
-	"\070\150\057\334\374\375\053\212\323\204\245\264\127\022\311\345"
-	"\277\205\144\121\207\161\362\305\100\330\355\330\337\035\352\030"
-	"\205\032\364\202\030\040\014\353\244\262\240\374\304\151\341\204"
-	"\356\106\325\166\267\310\073\367\241\051\317\201\106\272\231\314"
-	"\325\216\117\355\256\133\331\123\016\171\117\323\342\061\127\321"
-	"\167\054\107\057\365\203\046\226\254\366\027\363\261\260\300\206"
-	"\077\017\164\355\153\115\101\171\306\221\114\251\302\243\172\072"
-	"\320\302\151\305\105\220\133\362\206\163\345\070\044\246\276\143"
-	"\265\062\121\040\200\222\232\106\043\346\357\346\212\151\040\133"
-	"\054\212\040\161\032\174\144\240\357\112\330\024\360\227\167\245"
-	"\312\310\306\112\133\140\220\176\107\200\145\322\352\206\055\026"
-	"\020\115\207\052\312\353\313\272\066\244\316\046\073\105\313\005"
-	"\016\222\120\151\362\341\350\072\141\115\014\113\324\071\141\344"
-	"\207\351\016\121\325\332\013\013\176\332\061\272\037\375\300\055"
-	"\217\020\227\202\361\177\274\122\315\311\236\241\002\000\205\211"
-	"\351\224\333\277\157\347\312\355\301\374\247\341\372\147\017\212"
-	"\170\246\014\151\045\311\274\362\222\132\224\225\133\031\037\105"
-	"\256\372\004\035\342\317\013\243\313\262\204\306\032\223\120\222"
-	"\072\134\374\137\046\271\122\271\024\346\116\157\000\155\264\257"
-	"\150\270\314\112\210\327\356\123\212\162\032\245\006\152\070\101"
-	"\307\064\240\355\355\363\246\001\332\365\161\333\142\045\212\313"
-	"\336\127\025\146\057\003\272\271\166\324\136\175\076\226\276\005"
-	"\313\137\363\271\123\232\273\056\217\054\011\361\122\223\275\060"
-	"\352\322\226\031\326\121\323\115\045\062\312\144\311\211\152\225"
-	"\262\126\135\215\242\132\363\173\150\260\117\201\010\174\243\102"
-	"\016\000\174\065\227\137\130\050\063\142\130\273\206\032\045\145"
-	"\162\267\123\073\356\350\117\255\153\320\244\056\331\140\217\320"
-	"\253\116\134\044\124\272\127\275\064\261\300\051\320\165\025\030"
-	"\126\133\320\063\237\345\073\315\150\313\150\070\212\004\230\332"
-	"\334\344\075\315\331\047\124\256\006\240\352\236\362\304\065\114"
-	"\035\276\031\032\051\236\165\245\112\320\340\011\005\354\210\240"
-	"\063\261\244\103\214\026\171\344\263\153\201\353\103\115\335\170"
-	"\142\313\136\007\324\052\312\236\345\025\276\152\077\203\255\164"
-	"\361\344\032\015\255\344\226\273\335\160\010\163\365\175\342\351"
-	"\010\224\326\022\050\256\124\054\126\224\220\135\136\177\032\211"
-	"\056\172\254\141\171\326\217\221\175\050\023\375\246\041\124\250"
-	"\357\133\225\167\373\003\032\215\346\043\310\010\254\110\241\021"
-	"\214\342\000\213\367\072\027\015\046\231\234\204\274\014\322\163"
-	"\221\102\071\230\037\130\071\240\261\332\143\200\030\003\123\266"
-	"\112\141\153\362\231\227\102\166\271\257\130\147\121\157\121\035"
-	"\037\151\037\123\263\253\272\264\306\034\045\061\054\026\024\006"
-	"\072\310\112\201\167\015\225\033\154\162\235\134\051\376\212\352"
-	"\053\336\243\143\342\120\104\370\163\276\135\025\072\252\230\260"
-	"\276\346\335\317\057\373\221\174\206\055\175\312\140\142\021\271"
-	"\200\035\066\174\257\153\170\136\145\342\015\271\272\356\236\132"
-	"\112\000\160\251\054\346\111\055\273\055\370\255\164\161\302\231"
-	"\067\316\012\047\220\052\022\047\226\300\051\047\203\027\135\055"
-	"\225\377\216\272\364\042\151\133\346\373\347\052\072\147\306\003"
-	"\212\272\251\207\205\237\263\325\071\273\315\233\360\323\222\040"
-	"\234\107\262\312\121\042\110\324\256\167\157\002\150\047\232\140"
-	"\032\374\130\177\260\143\135\347\130\200\317\322\337\335\000\146"
-	"\113\026\153\265\221\203\234\272\106\154\247\002\213\366\307\326"
-	"\102\065\310\027\064\352\257\313\065\304\110\101\013\267\042\244"
-	"\001\273\337\320\226\177\213\124\161\257\023\011\043\110\236\312"
-	"\305\015\073\043\354\367\310\156\021\301\376\261\103\225\013\066"
-	"\334\132\241\073\001\050\013\363\036\102\162\100\021\306\037\134"
-	"\207\307\231\213\157\007\012\242\007\155\200\053\352\370\246\353"
-	"\006\231\332\242\055\230\146\377\142\033\213\231\211\110\131\075"
-	"\035\232\366\311\047\042\200\051\200\327\352\115\366\252\113\307"
-	"\305\105\130\257\117\367\124\334\045\232\227\223\015\356\253\115"
-	"\173\155\063\224\210\013\346\247\107\241\376\141\313\056\024\031"
-	"\304\123\067\025\353\156\374\227\314\174\275\255\252\132\312\242"
-	"\305\317\203\146\012\257\342\261\250\226\306\265\034\353\167\275"
-	"\372\360\266\207\344\372\262\023\124\244\001\275\034\335\225\206"
-	"\127\240\077\247\040\235\153\264\164\373\102\021\202\212\243\302"
-	"\266\032\344\362\316\355\141\202\207\313\334\250\140\114\233\123"
-	"\257\267\211\302\067\141\330\140\177\257\316\211\153\357\041\173"
-	"\154\044\355\261\233\354\056\333\161\345\002\200\165\016\140\351"
-	"\025\127\317\142\242\267\064\154\121\276\266\153\223\006\030\352"
-	"\055\252\171\165\070\146\165\363\174\160\117\200\305\207\345\312"
-	"\253\234\371\062\017\101\255\145\144\173\305\114\262\134\116\167"
-	"\167\230\126\117\130\235\100\164\061\312\052\372\203\371\265\350"
-	"\161\252\031\172\067\237\115\213\040\201\337\163\236\247\371\077"
-	"\220\044\364\264\324\230\042\151\147\307\164\117\052\124\141\144"
-	"\346\014\004\167\006\327\046\335\115\345\166\351\270\305\176\375"
-	"\011\062\051\263\121\114\107\075\104\267\176\350\035\327\061\324"
-	"\160\235\344\215\343\073\374\172\042\301\060\137\365\061\364\012"
-	"\147\232\232\142\052\237\314\121\022\165\064\052\231\014\231\212"
-	"\242\143\030\306\072\363\224\171\174\027\332\257\337\074\072\035"
-	"\262\310\307\027\265\301\306\304\114\274\043\330\051\255\266\343"
-	"\311\077\134\172\163\047\330\234\225\050\040\321\052\210\123\154"
-	"\012\230\036\142\046\151\215\122\263\353\005\054\163\255\207\251"
-	"\203\003\174\064\132\160\311\062\266\357\370\132\304\162\102\226"
-	"\102\246\035\216\372\072\206\117\326\025\376\002\222\074\104\010"
-	"\123\112\011\130\352\250\332\176\015\154\224\223\264\143\063\054"
-	"\070\263\217\130\020\373\231\332\265\125\247\147\211\001\325\271"
-	"\001\203\153\041\253\063\270\117\132\251\347\311\211\051\143\077"
-	"\226\031\044\363\057\100\130\363\216\306\064\234\260\226\206\050"
-	"\040\345\044\330\341\244\372\377\246\251\223\013\125\272\216\375"
-	"\076\142\104\237\070\123\205\176\323\017\045\105\250\145\272\230"
-	"\174\147\233\310\314\125\043\005\166\067\114\231\117\113\136\267"
-	"\050\044\163\377\111\242\020\142\301\025\345\240\277\343\221\015"
-	"\371\060\105\175\355\330\050\051\303\266\330\047\253\007\234\242"
-	"\171\342\146\227\330\336\256\152\332\242\331\374\253\272\021\140"
-	"\060\016\254\353\056\060\326\125\374\372\101\354\033\063\332\205"
-	"\120\064\276\220\220\005\007\224\312\115\107\145\361\134\363\350"
-	"\335\353\171\367\247\067\243\331\361\137\043\272\063\170\243\256"
-	"\070\015\110\370\104\336\324\165\067\335\000\350\243\123\025\120"
-	"\150\111\103\273\114\212\122\035\066\025\341\221\104\210\221\104"
-	"\154\316\161\025\034\303\052\153\142\062\301\177\356\052\060\160"
-	"\133\047\041\073\171\025\075\347\312\147\074\251\052\216\124\230"
-	"\177\102\271\271\130\170\261\335\147\026\374\335\306\123\055\213"
-	"\224\023\170\004\053\245\123\163\221\350\132\311\163\224\125\027"
-	"\146\254\211\107\314\173\061\012\337\131\024\013\030\277\276\203"
-	"\105\142\013\300\015\240\312\271\341\106\140\142\157\246\351\057"
-	"\042\055\172\134\140\250\106\055\162\151\376\265\330\235\055\315"
-	"\030\323\350\015\303\321\113\357\227\006\313\242\310\250\272\013"
-	"\067\210\044\076\356\232\260\200\170\024\324\030\020\061\165\335"
-	"\013\173\073\070\064\050\175\376\325\161\120\271\346\031\116\160"
-	"\064\146\252\246\217\071\312\174\127\152\126\171\231\371\267\117"
-	"\324\233\257\212\275\327\256\222\111\042\105\164\272\124\302\363"
-	"\041\376\212\040\160\173\140\252\235\354\153\313\013\321\207\314"
-	"\210\375\117\134\276\025\006\113\107\157\240\211\312\306\262\057"
-	"\105\335\011\364\222\370\046\267\230\121\030\073\206\150\020\245"
-	"\201\027\277\162\220\141\213\244\254\335\025\003\325\307\323\106"
-	"\016\313\356\064\201\274\202\261\120\252\116\245\014\330\171\056"
-	"\041\327\066\372\221\156\016\137\257\137\017\276\133\045\266\260"
-	"\164\175\007\325\030\067\244\031\046\356\257\002\330\031\003\137"
-	"\143\340\117\337\177\023\066\375\072\117\221\307\234\073\347\214"
-	"\024\345\236\354\267\333\117\053\151\221\071\327\150\232\374\116"
-	"\135\060\046\024\202\002\357\311\253\266\024\156\361\076\320\354"
-	"\325\354\317\247\156\153\300\161\340\110\314\363\212\313\220\222"
-	"\351\061\227\005\250\260\010\262\104\122\003\015\307\016\160\221"
-	"\110\005\015\126\317\060\333\057\025\204\146\213\351\363\117\240"
-	"\326\212\202\341\304\114\331\361\253\065\171\334\042\022\245\113"
-	"\374\017\210\360\017\365\041\033\225\013\070\237\262\320\347\127"
-	"\312\346\125\005\002\212\253\264\014\136\302\327\374\272\177\155"
-	"\241\210\316\330\334\173\012\353\353\172\233\334\352\062\107\030"
-	"\043\071\243\161\065\332\001\262\070\310\355\321\152\041\125\222"
-	"\120\353\262\072\110\145\102\300\174\036\322\040\007\356\103\005"
-	"\367\063\040\017\373\307\016\037\100\134\303\065\134\200\074\201"
-	"\251\125\314\270\113\027\301\152\307\146\343\277\065\310\070\246"
-	"\310\263\245\053\042\215\065\173\321\375\351\124\134\057\366\152"
-	"\303\140\021\357\143\214\067\331\346\124\123\222\271\332\051\347"
-	"\224\173\323\134\252\133\126\102\061\167\323\006\003\370\227\124"
-	"\367\266\362\023\123\060\041\311\335\361\131\257\351\266\022\233"
-	"\321\046\043\226\001\336\366\014\230\277\071\065\310\070\270\002"
-	"\041\203\057\345\156\003\104\374\360\342\202\020\373\142\175\012"
-	"\022\141\054\163\052\143\351\023\241\370\342\067\362\255\224\334"
-	"\150\123\167\377\160\376\027\143\075\126\350\134\221\216\162\220"
-	"\127\351\022\113\305\173\156\264\037\320\151\024\074\273\143\100"
-	"\041\010\303\322\017\141\306\302\370\143\175\372\163\066\125\253"
-	"\005\030\040\204\153\026\014\242\076\300\145\107\116\225\131\040"
-	"\122\340\143\136\033\003\037\250\377\163\046\320\075\352\255\273"
-	"\065\374\273\177\304\351\250\034\322\154\130\021\242\072\021\365"
-	"\345\270\232\055\131\165\357\230\261\037\245\014\305\106\034\351"
-	"\154\006\327\165\151\102\251\164\042\237\005\146\006\031\346\100"
-	"\000\136\074\325\246\317\120\364\234\050\121\375\113\111\137\274"
-	"\047\353\064\201\123\301\161\103\141\204\361\067\153\242\171\205"
-	"\007\054\021\165\133\250\267\105\353\035\312\365\071\232\355\230"
-	"\346\135\170\142\236\173\010\111\215\161\221\313\152\131\001\364"
-	"\126\133\054\312\152\015\315\264\034\231\307\267\356\345\334\036"
-	"\267\357\304\247\261\077\223\341\363\216\032\024\002\041\222\075"
-	"\106\206\372\322\256\360\122\243\104\033\014\177\346\345\107\175"
-	"\144\341\001\166\211\171\375\343\271\064\026\110\364\205\303\153"
-	"\154\262\236\041\315\265\077\027\344\116\134\215\253\077\044\170"
-	"\063\123\236\111\057\126\207\122\372\104\175\245\374\222\274\041"
-	"\011\060\266\341\016\356\164\226\213\216\320\073\376\064\053\223"
-	"\234\017\330\234\077\236\254\035\167\110\050\021\047\070\251\056"
-	"\045\174\003\011\274\201\057\323\230\007\267\116\067\232\307\227"
-	"\234\006\273\103\053\260\060\213\237\361\310\305\303\072\076\107"
-	"\142\242\046\346\061\110\332\067\040\161\116\151\223\147\246\323"
-	"\336\172\245\362\134\352\304\105\377\233\253\174\000\142\346\376"
-	"\350\155\367\007\311\327\222\345\006\345\002\143\045\224\255\362"
-	"\061\070\110\012\337\310\250\232\233\364\260\236\343\342\050\330"
-	"\307\037\350\257\141\013\022\300\302\077\053\045\212\314\213\244"
-	"\052\114\004\214\146\265\256\206\144\360\172\223\103\234\230\377"
-	"\163\146\176\335\226\272\351\210\144\224\016\213\274\027\077\252"
-	"\257\270\235\254\246\166\122\111\121\272\337\347\337\242\347\062"
-	"\052\132\207\142\273\070\314\133\224\113\065\051\157\041\327\263"
-	"\136\202\175\077\125\253\267\033\303\177\213\363\233\074\170\024"
-	"\112\337\202\371\211\123\051\074\157\370\324\244\115\104\367\150"
-	"\304\165\366\010\246\011\057\056\303\336\062\261\163\043\136\141"
-	"\310\117\217\175\370\354\053\376\207\040\110\133\024\061\061\145"
-	"\334\010\312\236\121\306\153\201\125\275\341\132\160\367\203\056"
-	"\140\373\204\302\365\213\340\241\031\027\342\142\250\224\343\264"
-	"\352\344\176\360\105\047\110\142\114\154\374\032\023\260\232\161"
-	"\351\234\143\207\372\073\352\003\345\301\145\360\307\356\110\154"
-	"\352\253\252\261\047\024\075\240\052\112\143\314\276\240\326\350"
-	"\054\023\361\223\022\305\243\002\054\355\152\375\023\316\177\325"
-	"\333\010\261\204\031\163\106\060\152\337\132\141\254\101\052\263"
-	"\232\164\343\246\033\264\073\203\347\316\272\013\043\041\357\222"
-	"\003\015\017\014\030\272\117\047\347\353\230\211\027\003\227\041"
-	"\374\376\226\130\101\220\222\253\234\364\132\177\140\166\240\277"
-	"\170\367\374\303\134\152\325\105\177\255\043\166\267\045\306\033"
-	"\251\254\232\124\236\223\151\163\000\317\146\162\107\017\167\235"
-	"\367\054\032\274\102\254\305\201\052\316\221\052\327\216\341\132"
-	"\256\250\322\300\251\236\216\204\052\234\312\210\370\135\232\146"
-	"\221\330\031\034\357\054\133\137\200\240\110\034\165\056\142\046"
-	"\232\142\321\255\120\001\262\246\321\007\145\130\253\277\327\375"
-	"\337\222\177\167\211\175\003\033\325\360\204\041\217\157\224\330"
-	"\174\324\044\233\122\212\166\116\252\131\261\270\326\303\003\065"
-	"\145\234\311\152\222\135\074\230\375\023\013\357\360\357\231\252"
-	"\043\321\172\112\233\364\373\116\132\347\002\016\350\363\251\141"
-	"\164\115\314\053\074\377\342\302\035\030\022\110\234\045\024\273"
-	"\210\217\235\347\354\332\244\331\113\304\225\044\224\271\103\126"
-	"\147\033\104\204\322\254\343\156\317\353\327\123\016\150\213\011"
-	"\217\021\335\136\221\072\263\001\351\262\000\355\156\332\166\214"
-	"\343\363\131\323\150\143\036\335\207\163\326\264\326\212\067\157"
-	"\320\203\144\270\374\321\204\271\140\105\366\150\023\327\012\064"
-	"\134\030\044\131\376\053\112\125\211\111\346\012\027\370\005\120"
-	"\331\040\252\345\006\007\201\163\010\256\226\324\354\025\065\045"
-	"\304\345\160\132\355\035\265\142\145\030\161\216\374\007\003\172"
-	"\054\110\071\321\377\312\057\346\077\110\211\234\123\042\110\303"
-	"\122\156\245\317\264\114\150\025\272\304\226\156\306\264\331\176"
-	"\004\251\070\265\110\315\337\202\026\166\116\227\250\235\354\161"
-	"\070\275\037\103\250\231\326\067\260\124\356\223\310\341\142\322"
-	"\354\047\105\365\135\054\102\005\015\351\376\315\175\233\061\340"
-	"\335\276\270\167\213\077\020\024\101\261\256\075\245\315\244\140"
-	"\253\316\371\135\062\344\322\301\250\143\047\130\051\261\141\313"
-	"\144\064\351\162\303\010\372\017\350\300\007\367\203\117\073\347"
-	"\374\316\241\376\150\244\222\031\067\214\340\002\367\330\056\206"
-	"\110\045\101\101\077\221\124\051\073\066\175\071\360\207\235\166"
-	"\372\203\242\035\204\254\370\262\300\033\362\076\310\230\201\361"
-	"\177\032\054\275\275\052\365\200\306\227\315\041\324\311\315\010"
-	"\206\107\001\134\222\023\164\107\045\373\350\131\314\034\161\165"
-	"\112\334\361\361\162\001\047\236\157\260\146\153\332\021\011\167"
-	"\036\012\370\362\122\022\052\014\255\342\103\307\205\325\213\246"
-	"\363\151\234\372\073\231\013\166\213\221\207\111\141\326\270\116"
-	"\275\141\335\242\055\031\247\244\140\064\120\276\010\303\357\053"
-	"\031\066\120\324\346\154\052\041\101\015\364\161\354\100\363\362"
-	"\171\261\105\115\312\251\315\234\046\311\322\014\271\353\264\146"
-	"\027\015\021\367\163\042\032\224\212\260\125\025\165\116\345\122"
-	"\357\123\313\264\124\077\071\300\317\223\275\334\202\136\174\357"
-	"\304\120\047\167\323\210\215\065\107\336\073\242\314\060\206\276"
-	"\303\014\235\320\127\312\062\001\246\120\353\346\132\317\167\366"
-	"\254\011\102\211\357\165\120\011\344\013\042\071\332\062\117\315"
-	"\307\176\221\001\050\104\102\372\146\255\007\014\234\021\017\040"
-	"\340\374\006\217\117\171\224\335\243\324\302\077\235\077\316\333"
-	"\057\211\106\120\246\042\334\103\110\014\237\227\237\065\376\115"
-	"\105\073\351\024\061\227\254\172\264\151\241\352\035\175\172\200"
-	"\265\347\270\273\114\366\374\335\206\013\220\306\234\327\251\214"
-	"\230\163\271\161\270\356\155\167\274\254\055\052\222\010\175\222"
-	"\111\266\310\001\056\044\054\355\152\004\243\363\200\111\351\126"
-	"\161\274\001\203\371\151\032\007\162\376\260\277\167\170\354\273"
-	"\374\011\167\351\202\005\202\375\162\226\035\236\330\272\161\056"
-	"\325\160\166\054\145\034\300\261\045\365\136\043\243\043\260\164"
-	"\133\350\115\232\032\350\352\113\241\343\372\335\366\102\173\344"
-	"\114\104\350\336\114\370\167\174\051\056\163\255\355\216\335\056"
-	"\163\033\034\273\207\044\254\332\215\345\366\240\332\304\304\051"
-	"\315\373\332\044\147\047\001\264\141\041\120\223\052\141\306\033"
-	"\336\074\233\074\037\167\222\352\227\246\201\027\253\050\356\121"
-	"\143\057\077\264\074\236\242\076\070\351\060\070\006\111\004\065"
-	"\242\217\375\020\313\175\123\236\013\170\044\020\211\013\365\214"
-	"\225\327\003\274\376\167\342\021\303\242\142\000\121\125\273\032"
-	"\356\314\214\144\264\376\064\030\013\105\060\351\044\236\060\164"
-	"\316\306\362\007\344\016\155\260\160\040\355\300\200\254\132\074"
-	"\363\110\223\117\376\221\372\317\330\242\075\157\111\150\252\255"
-	"\355\336\057\344\113\027\173\353\376\165\160\215\023\167\222\202"
-	"\376\036\011\357\031\073\360\015\077\232\240\113\112\377\243\376"
-	"\030\003\056\002\026\013\103\065\077\145\117\145\020\040\242\363"
-	"\315\276\007\144\356\000\235\215\311\005\367\153\320\063\337\363"
-	"\046\340\067\241\044\367\100\322\375\002\132\371\116\344\115\146"
-	"\151\006\345\340\135\127\336\324\107\125\353\060\003\311\011\237"
-	"\270\024\020\100\160\315\310\152\031\206\366\055\266\224\227\351"
-	"\146\346\361\374\214\216\075\217\331\016\161\377\020\254\001\162"
-	"\076\102\302\205\305\264\141\160\306\321\116\353\176\072\312\201"
-	"\310\075\265\174\103\374\271\075\245\044\020\220\346\230\062\271"
-	"\015\273\020\105\242\124\051\325\315\263\356\226\013\152\236\152"
-	"\270\061\303\174\164\353\051\023\303\341\311\242\042\240\232\136"
-	"\303\245\145\122\155\340\240\015\121\331\145\122\003\053\367\126"
-	"\273\110\345\067\304\302\267\227\027\240\105\053\211\231\127\017"
-	"\362\337\065\156\352\157\351\341\177\367\251\137\050\247\107\127"
-	"\021\034\174\140\250\112\213\264\056\231\365\343\005\217\367\175"
-	"\032\021\157\075\021\260\013\270\300\232\155\113\136\015\112\056"
-	"\144\106\200\331\322\323\347\037\153\153\056\141\145\334\307\315"
-	"\300\147\022\313\314\172\372\020\023\043\236\043\274\256\240\364"
-	"\263\227\041\320\304\261\065\160\024\170\202\341\127\072\271\047"
-	"\042\020\112\071\154\120\004\012\374\161\366\032\156\223\210\007"
-	"\251\114\145\356\376\000\162\365\143\230\375\261\011\064\131\343"
-	"\275\334\225\327\333\012\172\372\105\266\366\027\017\076\333\256"
-	"\245\375\160\202\127\227\331\274\011\363\140\134\363\272\016\130"
-	"\212\213\265\351\324\376\045\020\072\330\342\001\167\021\101\247"
-	"\142\110\301\273\071\172\071\373\300\025\245\127\344\104\133\362"
-	"\307\013\375\141\251\045\223\146\255\140\244\060\024\175\105\225"
-	"\304\173\146\324\236\352\065\356\025\261\241\151\370\075\211\207"
-	"\335\054\027\024\131\255\003\136\000\176\201\261\337\261\262\366"
-	"\075\021\277\027\174\234\123\007\247\062\274\353\056\334\235\124"
-	"\117\213\377\051\327\305\263\156\037\337\021\345\264\143\175\054"
-	"\260\067\301\265\234\274\320\260\373\121\241\105\117\215\025\076"
-	"\060\316\125\151\154\220\341\002\336\042\215\021\347\225\162\113"
-	"\250\336\202\057\077\223\272\260\313\061\301\177\053\115\233\136"
-	"\232\044\046\253\366\363\145\156\156\334\323\321\336\303\007\054"
-	"\007\215\322\121\222\074\033\324\004\177\325\362\140\012\340\326"
-	"\357\347\164\336\235\264\207\010\061\120\034\011\306\320\217\342"
-	"\366\036\171\130\234\224\252\014\207\202\316\317\313\211\050\332"
-	"\216\236\157\230\023\352\333\100\320\052\166\320\322\274\271\162"
-	"\177\034\035\312\035\321\076\304\302\273\100\174\241\031\021\131"
-	"\215\260\257\160\214\110\155\051\053\075\021\213\373\304\216\072"
-	"\126\153\043\266\035\155\221\053\101\154\230\153\020\305\367\367"
-	"\327\105\012\013\035\107\357\361\224\347\037\155\112\301\334\372"
-	"\360\363\032\172\117\173\370\355\317\206\301\044\272\303\221\370"
-	"\372\204\263\347\172\341\044\220\241\171\021\107\367\256\056\120"
-	"\203\162\207\136\272\220\007\305\270\156\215\054\337\057\274\037"
-	"\377\050\064\034\170\177\047\114\002\064\360\346\272\161\312\134"
-	"\271\035\343\337\362\005\303\360\030\343\316\361\011\057\201\114"
-	"\107\176\154\173\066\264\262\344\240\144\330\130\247\220\175\106"
-	"\365\250\024\233\137\025\207\173\303\345\155\107\076\154\077\013"
-	"\322\003\007\044\014\244\171\171\235\016\337\324\160\306\164\114"
-	"\371\062\304\201\100\221\340\147\265\075\075\214\277\216\256\013"
-	"\270\031\136\375\130\053\233\241\127\111\054\236\041\026\006\202"
-	"\244\156\273\234\140\103\054\065\236\321\025\257\227\053\176\247"
-	"\106\374\352\354\122\042\144\267\216\267\254\101\055\247\257\345"
-	"\176\066\345\035\332\320\373\343\110\032\254\340\005\145\110\204"
-	"\147\175\321\245\046\130\173\206\047\140\365\160\050\023\242\325"
-	"\301\261\306\067\334\102\053\104\156\046\104\021\241\357\375\064"
-	"\170\306\050\232\072\260\151\225\005\026\323\341\120\227\074\355"
-	"\210\043\271\117\173\220\203\134\153\274\301\352\344\067\156\062"
-	"\074\047\023\135\371\310\153\203\373\173\072\170\327\143\347\125"
-	"\243\032\044\005\176\164\232\223\217\272\316\174\267\324\067\374"
-	"\137\376\170\014\125\037\036\063\135\332\001\047\127\341\264\151"
-	"\116\010\273\315\060\314\043\266\227\154\365\107\353\320\277\031"
-	"\141\271\260\131\023\071\303\035\242\047\220\355\316\321\066\202"
-	"\217\300\077\124\331\223\160\340\163\334\351\152\143\017\275\106"
-	"\224\276\130\236\125\043\244\360\267\034\372\110\100\330\374\060"
-	"\307\211\230\167\330\357\221\001\140\230\327\171\351\135\116\074"
-	"\367\011\152\206\066\164\170\210\010\065\271\363\010\120\015\336"
-	"\241\340\053\306\023\366\052\334\177\224\161\151\362\300\246\351"
-	"\312\021\160\001\205\351\211\215\036\102\200\047\222\215\005\064"
-	"\156\061\372\201\047\045\136\247\272\317\021\254\220\267\226\133"
-	"\310\007\134\116\360\345\333\017\050\134\066\273\351\074\357\127"
-	"\156\352\331\226\020\067\076\312\007\117\167\227\006\015\362\317"
-	"\024\116\035\005\064\371\024\135\125\113\031\076\207\011\226\365"
-	"\364\157\213\004\247\311\316\256\031\105\105\040\123\070\357\147"
-	"\207\014\155\274\006\201\031\133\314\063\232\124\074\060\112\060"
-	"\240\326\065\107\240\003\365\271\111\073\331\234\164\311\004\374"
-	"\326\161\270\334\363\322\067\300\006\321\024\102\002\137\163\243"
-	"\065\250\352\326\254\340\217\366\034\151\222\221\062\226\215\010"
-	"\010\105\344\373\030\034\273\036\355\320\141\360\060\325\223\146"
-	"\176\176\074\052\137\314\041\173\065\263\014\150\112\232\160\123"
-	"\340\125\116\370\161\012\027\137\333\170\120\013\115\343\161\313"
-	"\141\255\366\300\172\027\074\260\313\111\030\026\343\211\151\303"
-	"\337\267\274\121\302\323\260\235\113\000\251\231\344\032\145\106"
-	"\310\134\007\103\164\104\363\100\215\013\126\161\225\277\065\164"
-	"\167\361\305\072\305\166\327\020\167\201\252\134\233\020\242\144"
-	"\155\252\247\341\356\232\041\173\246\170\355\073\067\042\260\257"
-	"\023\165\351\330\354\301\351\143\102\224\277\336\244\142\103\021"
-	"\014\352\363\372\205\025\166\053\215\143\147\305\206\027\165\232"
-	"\215\137\162\172\040\134\335\143\361\235\102\226\377\205\250\014"
-	"\157\233\006\365\261\175\041\077\341\210\005\147\240\172\001\056"
-	"\331\164\250\372\321\206\136\302\043\240\131\043\045\001\057\225"
-	"\235\066\212\116\264\253\216\225\064\223\374\325\015\376\003\347"
-	"\163\253\342\104\062\100\007\125\340\140\171\005\141\251\233\377"
-	"\337\045\116\223\321\334\051\005\157\046\333\175\044\336\145\227"
-	"\212\107\334\274\207\343\022\150\104\213\156\246\064\011\245\024"
-	"\057\363\250\000\320\322\006\077\370\341\275\035\300\042\265\112"
-	"\152\221\006\361\165\031\132\271\245\310\137\331\321\005\356\001"
-	"\370\227\001\311\151\010\010\142\352\306\177\252\350\064\364\122"
-	"\306\373\104\073\025\236\365"
-#define      inlo_z	3
-#define      inlo	((&data[6232]))
-	"\204\105\313"
+#define      msg1	((&data[6985]))
+	"\175\007\162\302\264\116\371\223\210\060\273\124\270\231\332\303"
+	"\277\241\355\257\304\353\137\305\223\163\050\151\222\041\061\215"
+	"\302\164\102\051\274\005\362\070\315\024\161\046\155\354\241\114"
+	"\366\066\316\154"
 #define      chk1_z	22
-#define      chk1	((&data[6236]))
-	"\203\314\326\212\127\042\132\306\331\354\167\312\235\014\241\166"
-	"\200\253\357\367\171\102\112\072\123"
-#define      xecc_z	15
-#define      xecc	((&data[6260]))
-	"\351\132\077\307\167\063\347\336\307\021\374\132\175\360\165"
-#define      tst1_z	22
-#define      tst1	((&data[6276]))
-	"\346\354\060\227\317\375\350\072\312\022\137\064\166\301\150\134"
-	"\155\367\032\135\353\355\206"
-#define      lsto_z	1
-#define      lsto	((&data[6298]))
-	"\337"/* End of data[] */;
+#define      chk1	((&data[7036]))
+	"\230\377\357\166\322\301\227\120\041\022\131\367\270\271\023\373"
+	"\310\054\176\116\235\326\260\035\137\326\373"/* End of data[] */;
 #define      hide_z	4096
 #define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
 #define TRACEABLE	0	/* Define as 1 to enable ptrace the executable */
diff --git a/nand_spl/board/lantiq/deu_aes.c b/nand_spl/board/lantiq/deu_aes.c
new file mode 100644
--- /dev/null
+++ b/nand_spl/board/lantiq/deu_aes.c
@@ -0,0 +1,169 @@
+#include <common.h>
+
+
+#define DECRYPT   0
+#define ENCRYPT   1
+#define KEY_SIZE        32
+
+/*fixme: DEU register definition, hard coded here*/
+#define AES_START   0xBE103150
+#ifdef CONFIG_DRIVER_AR10
+#define PMU_CLKGCR1_A  (volatile u32*)0xBF102024
+#elif defined(CONFIG_DRIVER_VR9)
+#define PMU_PWDCR (volatile u32*)0xBF10201C
+#endif
+
+#define PMU_DEU     1<<20
+
+
+#define AES_MIN_KEY_SIZE    16
+#define AES_MAX_KEY_SIZE    32
+
+#define AES_BLOCK_SIZE      16
+
+struct aes_t {
+    struct aes_controlr {
+
+        u32 KRE:1;
+        u32 reserved1:4;
+        u32 PNK:1;
+        u32 GO:1;
+        u32 STP:1;
+
+        u32 reserved2:6;
+        u32 NDC:1;
+        u32 ENDI:1;
+        u32 reserved3:2;
+
+        u32 F:3;    //fbs
+        u32 O:3;    //om
+        u32 BUS:1;  //bsy
+        u32 DAU:1;
+        u32 ARS:1;
+        u32 SM:1;
+        u32 E_D:1;
+        u32 KV:1;
+        u32 K:2;    //KL
+
+    } controlr;
+    u32 ID3R;       //80h
+    u32 ID2R;       //84h
+    u32 ID1R;       //88h
+    u32 ID0R;       //8Ch
+    u32 K7R;        //90h
+    u32 K6R;        //94h
+    u32 K5R;        //98h
+    u32 K4R;        //9Ch
+    u32 K3R;        //A0h
+    u32 K2R;        //A4h
+    u32 K1R;        //A8h
+    u32 K0R;        //ACh
+    u32 IV3R;       //B0h
+    u32 IV2R;       //B4h
+    u32 IV1R;       //B8h
+    u32 IV0R;       //BCh
+    u32 OD3R;       //D4h
+    u32 OD2R;       //D8h
+    u32 OD1R;       //DCh
+    u32 OD0R;       //E0h
+};
+
+
+
+void aes_set_key (const u8 *in_key, u32 key_len)
+{
+    volatile struct aes_t *aes = (volatile struct aes_t *) AES_START;
+
+    /* 128, 192 or 256 bit key length */
+    aes->controlr.K = key_len / 8 - 2;
+
+     aes->K7R = *((u32 *) in_key + 0);
+     aes->K6R = *((u32 *) in_key + 1);
+     aes->K5R = *((u32 *) in_key + 2);
+     aes->K4R = *((u32 *) in_key + 3);
+     aes->K3R = *((u32 *) in_key + 4);
+     aes->K2R = *((u32 *) in_key + 5);
+     aes->K1R = *((u32 *) in_key + 6);
+     aes->K0R = *((u32 *) in_key + 7);
+
+     aes->controlr.PNK = 1;
+}
+
+
+static void deu_aes (u8 *out_arg, const u8 *in_arg,
+        u8 *iv_arg, u32 nbytes, int encdec, int mode)
+{
+    volatile struct aes_t *aes = (volatile struct aes_t *) AES_START;
+        int i = 0;
+    int byte_cnt = nbytes;
+
+    aes->controlr.E_D = !encdec;    //encryption
+    aes->controlr.O = mode; //0 ECB 1 CBC 2 OFB 3 CFB 4 CTR
+
+    if (mode > 0) {
+        aes->IV3R = *(u32 *) iv_arg;
+        aes->IV2R = *((u32 *) iv_arg + 1);
+        aes->IV1R = *((u32 *) iv_arg + 2);
+        aes->IV0R = *((u32 *) iv_arg + 3);
+    };
+
+    i = 0;
+    while (byte_cnt >= 16) {
+        aes->ID3R = *((u32 *) in_arg + (i * 4) + 0);
+        aes->ID2R = *((u32 *) in_arg + (i * 4) + 1);
+        aes->ID1R = *((u32 *) in_arg + (i * 4) + 2);
+        aes->ID0R = *((u32 *) in_arg + (i * 4) + 3);    /* start crypto */
+        while (aes->controlr.BUS) {
+            // this will not take long
+        }
+
+        *((volatile u32 *) out_arg + (i * 4) + 0) = aes->OD3R;
+        *((volatile u32 *) out_arg + (i * 4) + 1) = aes->OD2R;
+        *((volatile u32 *) out_arg + (i * 4) + 2) = aes->OD1R;
+        *((volatile u32 *) out_arg + (i * 4) + 3) = aes->OD0R;
+
+        i++;
+        byte_cnt -= 16;
+    }
+
+}
+
+
+
+void deu_aes_cbc (u8 *dst, const u8 *src,
+        u8 *iv, u32 nbytes, int encdec)
+{
+    deu_aes (dst, src, iv, nbytes, encdec, 1);
+}
+
+void aes_chip_init(void)
+{
+    volatile struct aes_t *aes = (struct aes_t *) AES_START;
+
+#ifdef CONFIG_DRIVER_AR10
+    /*turn on DEU, hard coded for AR10 here*/
+	*PMU_CLKGCR1_A |=PMU_DEU;
+#endif
+
+#ifdef CONFIG_DRIVER_VR9
+    *PMU_PWDCR &=~(PMU_DEU);
+#endif
+
+    // start crypto engine with write to ILR
+
+    aes->controlr.ENDI = 1; // vr9 change
+    aes->controlr.SM = 1;
+    aes->controlr.ARS = 0; // vr9 change
+
+}
+
+
+void secure_decrypt(u8 *key, u8 *iv, u8 *src, u8 *dst, u32 nbytes)
+{
+    aes_chip_init();
+
+    aes_set_key(key, KEY_SIZE);
+
+    deu_aes_cbc(dst, src, iv, nbytes, DECRYPT);
+}
+
diff --git a/nand_spl/board/lantiq/nand_bbt.c b/nand_spl/board/lantiq/nand_bbt.c
new file mode 100755
--- /dev/null
+++ b/nand_spl/board/lantiq/nand_bbt.c
@@ -0,0 +1,541 @@
+/******************************************************************************
+ * lightweight nand bad block table management
+ * modified from linux kernel nand_bbt.c
+ * ** 19 Dec 2012  Wu Qi Ming   1.0        initial version
+ * *******************************************************************************/
+
+#include <common.h>
+#include <nand.h>
+
+#define SPL_BBT_TABLE_LOCATION 0x80800000
+#define SPL_BLOCK_BUF 0x80900000
+
+static uint8_t scan_ff_pattern[] = { 0xff, 0xff };
+
+static struct nand_bbt_descr smallpage_memorybased = {
+    .options = NAND_BBT_SCAN2NDPAGE,
+    .offs = 5,
+    .len = 1,
+    .pattern = scan_ff_pattern
+};
+
+static struct nand_bbt_descr largepage_memorybased = {
+    .options = 0,
+    .offs = 0,
+    .len = 2,
+    .pattern = scan_ff_pattern
+};
+
+static struct nand_bbt_descr smallpage_flashbased = {
+    .options = NAND_BBT_SCAN2NDPAGE,
+    .offs = 5,
+    .len = 1,
+    .pattern = scan_ff_pattern
+};
+
+static struct nand_bbt_descr largepage_flashbased = {
+    .options = NAND_BBT_SCAN2NDPAGE,
+    .offs = 0,
+    .len = 2,
+    .pattern = scan_ff_pattern
+};
+
+static uint8_t bbt_pattern[] = {'B', 'b', 't', '0' };
+static uint8_t mirror_pattern[] = {'1', 't', 'b', 'B' };
+
+static struct nand_bbt_descr bbt_main_descr = {
+    .options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+        | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+    .offs = 8,
+    .len = 4,
+    .veroffs = 12,
+    .maxblocks = 4,
+    .pattern = bbt_pattern
+};
+
+static struct nand_bbt_descr bbt_mirror_descr = {
+    .options = NAND_BBT_LASTBLOCK | NAND_BBT_CREATE | NAND_BBT_WRITE
+        | NAND_BBT_2BIT | NAND_BBT_VERSION | NAND_BBT_PERCHIP,
+    .offs = 8,
+    .len = 4,
+    .veroffs = 12,
+    .maxblocks = 4,
+    .pattern = mirror_pattern
+};
+
+
+extern int scan_read_raw(struct mtd_info *mtd, uint8_t *buf, loff_t offs, size_t len);
+extern int nand_read_page(struct mtd_info *mtd, int block, int page, uchar *dst);
+/**
+ * check_pattern - [GENERIC] check if a pattern is in the buffer
+ * @buf:	the buffer to search
+ * @len:	the length of buffer to search
+ * @paglen:	the pagelength
+ * @td:		search pattern descriptor
+ *
+ * Check for a pattern at the given place. Used to search bad block
+ * tables and good / bad block identifiers.
+ * If the SCAN_EMPTY option is set then check, if all bytes except the
+ * pattern area contain 0xff
+ *
+*/
+static int check_pattern(uint8_t *buf, int len, int paglen, struct nand_bbt_descr *td)
+{
+    int i, end = 0;
+	uint8_t *p = buf;
+
+	end = paglen + td->offs;
+	if (td->options & NAND_BBT_SCANEMPTY) {
+		for (i = 0; i < end; i++) {
+			if (p[i] != 0xff)
+				return -1;
+		}
+	}
+	p += end;
+
+	/* Compare the pattern */
+	for (i = 0; i < td->len; i++) {
+		if (p[i] != td->pattern[i])
+			return -1;
+	}
+
+	if (td->options & NAND_BBT_SCANEMPTY) {
+		p += td->len;
+		end += td->len;
+		for (i = end; i < len; i++) {
+			if (*p++ != 0xff)
+				return -1;
+		}
+	}
+
+	return 0;
+}
+
+/**
+ * check_short_pattern - [GENERIC] check if a pattern is in the buffer
+ * @buf:	the buffer to search
+ * @td:		search pattern descriptor
+ *
+ * Check for a pattern at the given place. Used to search bad block
+ * tables and good / bad block identifiers. Same as check_pattern, but
+ * no optional empty check
+ *
+*/
+static int check_short_pattern(uint8_t *buf, struct nand_bbt_descr *td)
+{
+	int i;
+	uint8_t *p = buf;
+
+	/* Compare the pattern */
+	for (i = 0; i < td->len; i++) {
+		if (p[td->offs + i] != td->pattern[i])
+			return -1;
+	}
+	return 0;
+}
+
+
+
+
+
+/**
+ * search_bbt - [GENERIC] scan the device for a specific bad block table
+ * @mtd:	MTD device structure
+ * @buf:	temporary buffer
+ * @td:		descriptor for the bad block table
+ *
+ * Read the bad block table by searching for a given ident pattern.
+ * Search is preformed either from the beginning up or from the end of
+ * the device downwards. The search starts always at the start of a
+ * block.
+ * If the option NAND_BBT_PERCHIP is given, each chip is searched
+ * for a bbt, which contains the bad block information of this chip.
+ * This is necessary to provide support for certain DOC devices.
+ *
+ * The bbt ident pattern resides in the oob area of the first page
+ * in a block.
+ */
+static int search_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td)
+{
+	struct nand_chip *this = mtd->priv;
+	int i, chips;
+	int bits, startblock, block, dir;
+	int scanlen = mtd->writesize + mtd->oobsize;
+	int bbtblocks;
+	int blocktopage = this->bbt_erase_shift - this->page_shift;
+
+	/* Search direction top -> down ? */
+	if (td->options & NAND_BBT_LASTBLOCK) {
+		startblock = (mtd->size >> this->bbt_erase_shift) - 1;
+		dir = -1;
+	} else {
+		startblock = 0;
+		dir = 1;
+	}
+	
+	asm("sync");
+
+	/* Do we have a bbt per chip ? */
+	if (td->options & NAND_BBT_PERCHIP) {
+		chips = this->numchips;
+		bbtblocks = this->chipsize >> this->bbt_erase_shift;
+		startblock &= bbtblocks - 1;
+	} else {
+		chips = 1;
+		bbtblocks = mtd->size >> this->bbt_erase_shift;
+	}
+
+	/* Number of bits for each erase block in the bbt */
+	bits = td->options & NAND_BBT_NRBITS_MSK;
+
+	for (i = 0; i < chips; i++) {
+		/* Reset version information */
+		td->version[i] = 0;
+		td->pages[i] = -1;
+		/* Scan the maximum number of blocks */
+		for (block = 0; block < td->maxblocks; block++) {
+
+			int actblock = startblock + dir * block;
+			asm("sync");
+			loff_t offs = (loff_t)actblock << this->bbt_erase_shift;
+      asm("sync");
+			/* Read first page */
+			scan_read_raw(mtd, buf, offs, mtd->writesize);
+			if (!check_pattern(buf, scanlen, mtd->writesize, td)) {
+				td->pages[i] = actblock << blocktopage;
+				if (td->options & NAND_BBT_VERSION) {
+					td->version[i] = buf[mtd->writesize + td->veroffs];
+				}
+				break;
+			}
+		}
+		startblock += this->chipsize >> this->bbt_erase_shift;
+	}
+	
+	return 0;
+}
+
+/**
+ * search_read_bbts - [GENERIC] scan the device for bad block table(s)
+ * @mtd:	MTD device structure
+ * @buf:	temporary buffer
+ * @td:		descriptor for the bad block table
+ * @md:		descriptor for the bad block table mirror
+ *
+ * Search and read the bad block table(s)
+*/
+static int search_read_bbts(struct mtd_info *mtd, uint8_t * buf, struct nand_bbt_descr *td, struct nand_bbt_descr *md)
+{
+	/* Search the primary table */
+	search_bbt(mtd, buf, td);
+
+	/* Search the mirror table */
+	if (md)
+		search_bbt(mtd, buf, md);
+
+	/* Force result check */
+	return 1;
+}
+
+
+/**
+ * read_bbt - [GENERIC] Read the bad block table starting from page
+ * @mtd:	MTD device structure
+ * @buf:	temporary buffer
+ * @page:	the starting page
+ * @num:	the number of bbt descriptors to read
+ * @bits:	number of bits per block
+ * @offs:	offset in the memory table
+ * @reserved_block_code:	Pattern to identify reserved blocks
+ *
+ * Read the bad block table starting from page.
+ *
+ */
+static int read_bbt(struct mtd_info *mtd, uint8_t *buf, int page, int num,
+		    int bits, int offs, int reserved_block_code)
+{
+	int res, i, j, act = 0;
+	struct nand_chip *this = mtd->priv;
+	size_t retlen, len, totlen;
+	loff_t from;
+	uint8_t msk = (uint8_t) ((1 << bits) - 1);
+    int block;
+
+	totlen = (num * bits) >> 3;
+	from = ((loff_t) page) << this->page_shift;
+    block = from >>this->bbt_erase_shift;
+  
+
+	while (totlen) {
+		len = min(totlen, (size_t) (1 << this->bbt_erase_shift));
+		//res = mtd->read(mtd, from, len, &retlen, buf);
+		nand_read_page(mtd, block, 0, buf);
+
+		/* Analyse data */
+		for (i = 0; i < len; i++) {
+			uint8_t dat = buf[i];
+			for (j = 0; j < 8; j += bits, act += 2) {
+				uint8_t tmp = (dat >> j) & msk;
+				if (tmp == msk)
+					continue;
+				if (reserved_block_code && (tmp == reserved_block_code)) {
+					this->bbt[offs + (act >> 3)] |= 0x2 << (act & 0x06);
+					mtd->ecc_stats.bbtblocks++;
+					continue;
+				}
+				/* Leave it for now, if its matured we can move this
+				 * message to MTD_DEBUG_LEVEL0 */
+				
+				/* Factory marked bad or worn out ? */
+				if (tmp == 0)
+					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
+				else
+					this->bbt[offs + (act >> 3)] |= 0x1 << (act & 0x06);
+				mtd->ecc_stats.badblocks++;
+			}
+		}
+		totlen -= len;
+		from += len;
+	}
+	return 0;
+}
+
+/**
+ * read_abs_bbt - [GENERIC] Read the bad block table starting at a given page
+ * @mtd:	MTD device structure
+ * @buf:	temporary buffer
+ * @td:		descriptor for the bad block table
+ * @chip:	read the table for a specific chip, -1 read all chips.
+ *		Applies only if NAND_BBT_PERCHIP option is set
+ *
+ * Read the bad block table for all chips starting at a given page
+ * We assume that the bbt bits are in consecutive order.
+*/
+static int read_abs_bbt(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *td, int chip)
+{
+	struct nand_chip *this = mtd->priv;
+	int res = 0, i;
+	int bits;
+
+	bits = td->options & NAND_BBT_NRBITS_MSK;
+	if (td->options & NAND_BBT_PERCHIP) {
+		int offs = 0;
+		for (i = 0; i < this->numchips; i++) {
+			if (chip == -1 || chip == i)
+				res = read_bbt (mtd, buf, td->pages[i], this->chipsize >> this->bbt_erase_shift, bits, offs, td->reserved_block_code);
+			if (res)
+				return res;
+			offs += this->chipsize >> (this->bbt_erase_shift + 2);
+		}
+	} else {
+		res = read_bbt (mtd, buf, td->pages[0], mtd->size >> this->bbt_erase_shift, bits, 0, td->reserved_block_code);
+		if (res)
+			return res;
+	}
+	return 0;
+}
+
+
+/**
+ * check_create - [GENERIC] create and write bbt(s) if necessary
+ * @mtd:	MTD device structure
+ * @buf:	temporary buffer
+ * @bd:		descriptor for the good/bad block search pattern
+ *
+ * The function checks the results of the previous call to read_bbt
+ * and creates / updates the bbt(s) if necessary
+ * Creation is necessary if no bbt was found for the chip/device
+ * Update is necessary if one of the tables is missing or the
+ * version nr. of one table is less than the other
+*/
+static int check_create(struct mtd_info *mtd, uint8_t *buf, struct nand_bbt_descr *bd)
+{
+	int i, chips, writeops, chipsel, res;
+	struct nand_chip *this = mtd->priv;
+	struct nand_bbt_descr *td = this->bbt_td;
+	struct nand_bbt_descr *md = this->bbt_md;
+	struct nand_bbt_descr *rd, *rd2;
+
+	/* Do we have a bbt per chip ? */
+	if (td->options & NAND_BBT_PERCHIP)
+		chips = this->numchips;
+	else
+		chips = 1;
+
+	for (i = 0; i < chips; i++) {
+		writeops = 0;
+		rd = NULL;
+		rd2 = NULL;
+		/* Per chip or per device ? */
+		chipsel = (td->options & NAND_BBT_PERCHIP) ? i : -1;
+		/* Mirrored table avilable ? */
+		if (md) {
+			if (td->pages[i] == -1 && md->pages[i] == -1) {
+				writeops = 0x03;
+				goto create;
+			}
+
+			if (td->pages[i] == -1) {
+				rd = md;
+				td->version[i] = md->version[i];
+				writeops = 1;
+				goto writecheck;
+			}
+
+			if (md->pages[i] == -1) {
+				rd = td;
+				md->version[i] = td->version[i];
+				writeops = 2;
+				goto writecheck;
+			}
+
+			if (td->version[i] == md->version[i]) {
+				rd = td;
+				if (!(td->options & NAND_BBT_VERSION))
+					rd2 = md;
+				goto writecheck;
+			}
+
+			if (((int8_t) (td->version[i] - md->version[i])) > 0) {
+				rd = td;
+				md->version[i] = td->version[i];
+				writeops = 2;
+			} else {
+				rd = md;
+				td->version[i] = md->version[i];
+				writeops = 1;
+			}
+
+			goto writecheck;
+
+		} else {
+			if (td->pages[i] == -1) {
+				writeops = 0x01;
+				goto create;
+			}
+			rd = td;
+			goto writecheck;
+		}
+	create:
+	    return 0;	
+	writecheck:
+		/* read back first ? */
+		if (rd)
+			read_abs_bbt(mtd, buf, rd, chipsel);
+		/* If they weren't versioned, read both. */
+		if (rd2)
+			read_abs_bbt(mtd, buf, rd2, chipsel);
+
+	    return 1;
+	}
+	return 0;
+}
+
+
+/**
+ * nand_scan_bbt - [NAND Interface] scan, find, read and maybe create bad block table(s)
+ * @mtd:	MTD device structure
+ * @bd:		descriptor for the good/bad block search pattern
+ *
+ * The function checks, if a bad block table(s) is/are already
+ * available. If not it scans the device for manufacturer
+ * marked good / bad blocks and writes the bad block table(s) to
+ * the selected place.
+ *
+ * The bad block table memory is allocated here. It must be freed
+ * by calling the nand_free_bbt function.
+ *
+*/
+int nand_scan_bbt(struct mtd_info *mtd, struct nand_bbt_descr *bd)
+{
+	struct nand_chip *this = mtd->priv;
+	int len, res = 0;
+	uint8_t *buf;
+	struct nand_bbt_descr *td = this->bbt_td;
+	struct nand_bbt_descr *md = this->bbt_md;
+
+	len = mtd->size >> (this->bbt_erase_shift + 2);
+	/* Allocate memory (2bit per block) and clear the memory bad block table */
+	this->bbt = SPL_BBT_TABLE_LOCATION;
+    memset(this->bbt, 0, len);	
+
+	/* Allocate a temporary buffer for one eraseblock incl. oob */
+	buf = SPL_BLOCK_BUF;
+	
+
+		/* Search the bad block table using a pattern in oob */
+	res = search_read_bbts(mtd, buf, td, md);
+
+  if (res)
+		res = check_create(mtd, buf, bd);
+  
+	return res;
+	
+}
+
+
+/**
+ * nand_default_bbt - [NAND Interface] Select a default bad block table for the device
+ * @mtd:    MTD device structure
+ *
+ * This function selects the default bad block table
+ * support for the device and calls the nand_scan_bbt function
+ *
+*/
+int nand_default_bbt(struct mtd_info *mtd)
+{
+	   struct nand_chip *this = mtd->priv;
+  
+	    /* Is a flash based bad block table requested ? */
+    if (this->options & NAND_USE_FLASH_BBT) {
+        /* Use the default pattern descriptors */
+        if (!this->bbt_td) {
+            this->bbt_td = &bbt_main_descr;
+            this->bbt_md = &bbt_mirror_descr;
+        }
+        if (!this->badblock_pattern) {
+            this->badblock_pattern = (mtd->writesize > 512) ? &largepage_flashbased : &smallpage_flashbased;
+        }
+    } else {
+        this->bbt_td = NULL;
+        this->bbt_md = NULL;
+        if (!this->badblock_pattern) {
+            this->badblock_pattern = (mtd->writesize > 512) ?
+                &largepage_memorybased : &smallpage_memorybased;
+        }
+    }
+ 
+  
+	return nand_scan_bbt(mtd, this->badblock_pattern);
+
+}
+
+
+/**
+ * nand_isbad_bbt - [NAND Interface] Check if a block is bad
+ * @mtd:    MTD device structure
+ * @offs:   offset in the device
+ * @allowbbt:   allow access to bad block table region
+ *
+ */
+int nand_isbad_bbt(struct mtd_info *mtd, loff_t offs, int allowbbt)
+{
+   struct nand_chip *this = mtd->priv;
+   int block;
+   uint8_t res;
+
+   /* Get block number * 2 */
+   block = (int)(offs >> (this->bbt_erase_shift - 1));
+   res = (this->bbt[block >> 3] >> (block & 0x06)) & 0x03;
+   
+   switch ((int)res) {
+      case 0x00:
+           return 0;
+      case 0x01:
+           return 1;
+	  case 0x02:
+	       return allowbbt ? 0 : 1;
+		             }
+		return 1;
+}
+
diff --git a/nand_spl/board/lantiq/u-boot.lds b/nand_spl/board/lantiq/u-boot.lds
--- a/nand_spl/board/lantiq/u-boot.lds
+++ b/nand_spl/board/lantiq/u-boot.lds
@@ -1,25 +1,3 @@
-/*
- * (C) Copyright 2003
- * Wolfgang Denk Engineering, <wd@denx.de>
- *
- * See file CREDITS for list of people who contributed to this
- * project.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
 
 /*
 OUTPUT_FORMAT("elf32-bigmips", "elf32-bigmips", "elf32-bigmips")
@@ -56,15 +34,14 @@ SECTIONS
 	.sdata  : { *(.sdata) }
 
 	. = .;
-        __u_boot_cmd_start = .;
-        .u_boot_cmd : { *(.u_boot_cmd) }
-        __u_boot_cmd_end = .;
     got_size = (__got_end - __got_start);
 	uboot_end_data = .;
 	num_got_entries = (__got_end - __got_start) >> 2;
 
-        . = ALIGN(4);
-	.sbss  : { *(.sbss) }
-        .bss  : { *(.bss) }
+    . = ALIGN(4);
+    .sbss  : { *(.sbss) }
+    .bss  : { *(.bss) }
+
+
 	uboot_end = .;
 }
diff --git a/scripts_platform/build_stage3.sh b/scripts_platform/build_stage3.sh
new file mode 100755
--- /dev/null
+++ b/scripts_platform/build_stage3.sh
@@ -0,0 +1,201 @@
+#!/bin/sh
+#shell script to generate stage3 image 
+#revision history
+#Wu Qi Ming 6/12/2012 Qi-Ming.Wu@lantiq.com
+
+Usage(){
+  echo "Usage: build_stage3.sh [option]...[file]..."
+  echo "-h  --help             print help information"
+  echo "-i  --in   input       input file"
+  echo "-o  --out  output      output file"
+  echo "-k  --key  key         aes cbc key"
+  echo "-p  --priv privkey     dsa private key"
+  echo "-d  --da   address     decrypted(destination) image address"
+  echo "-j  --ja   address     jump address"
+  return
+}
+
+PRIVKEY=
+HEADMAGIC=0x65976743
+INPUTFILE=
+OUTPUTFILE=
+#CBCKEY=693deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4
+CBCKEY=
+CBCIV=00000000000000000000000000000000
+ENCRYPT_ADDR=
+DECRYPT_ADDR=
+JUMP_ADDR=
+
+parse_args() {
+  while [ "$#" -gt "0" ]
+  do
+     case $1 in
+	             --in | -i)
+		                INPUTFILE=$2		
+			            ;;
+                --out | -o)
+                        OUTPUTFILE=$2
+                        ;;
+                --key | -k)
+                        CBCKEY=$2
+						HEADMAGIC=0x65976742
+                        ;;
+				--privkey | -p)
+				        PRIVKEY=$2
+						;;
+                --ea | -e)
+                        ENCRYPT_ADDR=$2
+                        ;;
+				--da | -d)
+				        DECRYPT_ADDR=$2
+					    ;;
+                --ja | -j)
+			            JUMP_ADDR=$2
+			            ;;
+                --help | -h )
+			Usage
+			exit 1
+			;;
+      esac			
+      shift 
+  done
+  return
+}
+
+packhex(){
+    PACK_DATA_LEN=`echo $1 |wc -c`
+    let PACK_DATA_LEN=$PACK_DATA_LEN-1
+    PACK_START=1
+    PACK_RESULT=
+    while [ $PACK_START -le $PACK_DATA_LEN ]
+    do
+       PACK_TMP=`echo $1 | awk '{print substr($0, '$PACK_START', 2)}'`
+       PACK_RESULT="${PACK_RESULT}\x${PACK_TMP}" 
+       let PACK_START=$PACK_START+2
+    done
+    echo $PACK_RESULT
+}
+
+addchksum(){
+    RESULT=`perl -e "print $1+$2"|xargs printf "%08x\n"`
+    echo 0x$RESULT
+}
+
+
+
+if [ $# -eq 0 ] ; then  
+   Usage
+   exit 1
+fi 
+
+parse_args $@
+
+
+if [ -z $PRIVKEY ]
+then
+   echo "no dsa privkey"
+   Usage
+   exit 1
+fi
+
+if [ -z $DECRYPT_ADDR ]
+then
+   echo "no destination address"
+   Usage
+   exit 1
+fi
+
+
+if [ -z $JUMP_ADDR ]
+then
+   echo "no jump address"
+   Usage
+   exit 1
+fi
+
+
+if [ -z $OUTPUTFILE ]
+then
+   echo "no output file"
+   Usage
+   exit 1
+fi
+
+
+if [ -z $INPUTFILE ]
+then
+   echo "no output file"
+   Usage
+   exit 1
+fi
+
+
+#echo "input:" $INPUTFILE
+#echo "output:" $OUTPUTFILE
+#echo "cbckey:" $CBCKEY
+#echo "cbciv:"  $CBCIV
+#echo "headmagic:" $HEADMAGIC
+
+
+#creating secure header now
+
+#add headmagic
+DATA=`printf "%08x" $HEADMAGIC`
+echo -en `packhex $DATA` >shdr
+
+#followed by image length
+LEN=`stat -c %s $INPUTFILE`
+LENHEX=`printf "%08x" $LEN`
+echo -en `packhex $LENHEX` >>shdr
+
+#Followed by decrypted image address
+ADDR=`printf "%08x" $DECRYPT_ADDR`
+echo -en `packhex $ADDR` >>shdr
+
+#jump address
+ADDR=`printf "%08x" $JUMP_ADDR`
+echo -en `packhex $ADDR` >>shdr
+
+#SHA1 result 
+SHA_RESULT=`openssl dgst -sha1 $INPUTFILE | awk -F'= ' '{print $2}'`
+#echo "sha result:" $SHA_RESULT
+echo -en `packhex $SHA_RESULT` >>shdr
+
+#dsa signature now
+openssl dgst -dss1 -sign $PRIVKEY $INPUTFILE >sign.result
+
+openssl asn1parse -inform DER -in sign.result >sign.asn1
+R=`sed -n '2 p' sign.asn1 | awk -F':' '{print $4}'`
+#echo "R:" $R
+echo -en `packhex $R` >>shdr
+
+S=`sed -n '3 p' sign.asn1 | awk -F':' '{print $4}'`
+#echo "S:" $S
+echo -en `packhex $S` >>shdr
+
+#add header checksum */
+CHKSUM=0x0
+DATA=`hexdump -v -e '"0x"' -e '4/1 "%02x"' -e '" "' shdr`
+
+for VALUE in $DATA
+do
+  CHKSUM=`addchksum $CHKSUM $VALUE`
+done
+
+#echo $CHKSUM
+
+RESULT=`perl -e "print $CHKSUM & 0xffffffff"|xargs printf "%08x\n"`
+RESULT=`echo 0x$RESULT`
+
+DATA=`printf "%08x" $RESULT`
+echo -en `packhex $DATA` >>shdr
+
+cp shdr $OUTPUTFILE
+
+if [ -z $CBCKEY ];then
+  cat $INPUTFILE >>$OUTPUTFILE
+else
+  openssl enc -aes-256-cbc -in $INPUTFILE -out file.enc -K $CBCKEY -iv $CBCIV -nopad
+  cat file.enc >>$OUTPUTFILE
+fi
+
diff --git a/scripts_platform/hex2array.pl b/scripts_platform/hex2array.pl
new file mode 100755
--- /dev/null
+++ b/scripts_platform/hex2array.pl
@@ -0,0 +1,45 @@
+#!/usr/bin/perl
+#perl script to convert hex to C array
+#Revision history
+#27/11/2009 Author Wu Qi Ming
+#usage: hex2array.pl bn 010203....
+#output: unsigned char bn[]={0x01,0x02,0x03,....};
+
+
+$name = $ARGV[0];
+$string = $ARGV[1];
+
+
+if(length($string) % 2 >0){
+   $string="0".$string;
+}
+
+@bytes = unpack("(A2)*", $string);
+$len=@bytes;
+$rem=$len%4;
+
+print "unsigned char ";
+print $name;
+print "[]={";
+
+$i=0;
+if($rem>0){
+ while($i<(4-$rem))
+ {
+   print "0x00,";
+   $i++;
+ }
+}
+
+$i=0;
+while ($i<$len)
+{
+   print "0x$bytes[$i]";
+   if($i != ($len-1)){
+      print ",";
+   }
+   $i++;
+}
+
+print "};\n";
+
diff --git a/scripts_platform/key2header.sh b/scripts_platform/key2header.sh
new file mode 100755
--- /dev/null
+++ b/scripts_platform/key2header.sh
@@ -0,0 +1,19 @@
+#!/bin/sh
+INPUTFILE=$1
+OUTPUTFILE=$2
+
+openssl asn1parse -in $INPUTFILE >privkey.asn1
+
+P=`sed -n '3 p' privkey.asn1 | awk -F':' '{print $4}'`
+scripts_platform/hex2array.pl bn_p $P >$OUTPUTFILE
+
+Q=`sed -n '4 p' privkey.asn1 | awk -F':' '{print $4}'`
+scripts_platform/hex2array.pl bn_q $Q >>$OUTPUTFILE
+
+G=`sed -n '5 p' privkey.asn1 | awk -F':' '{print $4}'`
+scripts_platform/hex2array.pl bn_g $G >>$OUTPUTFILE
+
+PUBKEY=`sed -n '6 p' privkey.asn1 | awk -F':' '{print $4}'`
+scripts_platform/hex2array.pl bn_pubkey $PUBKEY >>$OUTPUTFILE
+
+
diff --git a/scripts_platform/mk_key_img.pl b/scripts_platform/mk_key_img.pl
new file mode 100755
--- /dev/null
+++ b/scripts_platform/mk_key_img.pl
@@ -0,0 +1,50 @@
+#!/usr/bin/perl
+#perl script to make an image which contains the aes key
+#Revision history
+#18/02/2013 Author Wu Qi Ming
+#usage: mk_key_img.pl $(key) data.bin
+#output: data.bin
+
+use strict;
+
+#key image size, hardcoded to 256 bytes
+my $img_size=256;
+
+my $mask=0;
+my @array;
+my @key;
+my @result;
+
+my $string = $ARGV[0];
+open(OUTFILE, ">$ARGV[1]") || die("\nOutput file open fail\n");
+
+if(length($string) % 2 >0){
+   $string="0".$string;
+   }
+
+printf("key=%s\n",$string);
+
+my $range = 255;
+my $minimum = 0;
+my $rand_number;
+my $mask='';
+
+my @ascii = unpack("(A2)*", $string);
+my $arg;
+foreach $arg (@ascii){
+   $rand_number = int(rand($range)) + $minimum;
+   $arg = hex($arg) ^ $rand_number;
+   $rand_number=sprintf("%02x",$rand_number); 
+   $mask=$mask.$rand_number;
+   $arg=sprintf("%02x",$arg);
+}
+
+printf("mask=%s\n",$mask);
+
+my $result_string = pack("(A2)*", @ascii);
+
+printf("result_string=%s\n",$result_string);
+
+printf OUTFILE pack("H*", $result_string);
+
+
