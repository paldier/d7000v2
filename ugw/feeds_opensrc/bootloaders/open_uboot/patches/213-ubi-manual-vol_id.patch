diff --git a/common/cmd_ubi.c b/common/cmd_ubi.c
--- a/common/cmd_ubi.c
+++ b/common/cmd_ubi.c
@@ -156,7 +156,7 @@
 	return err;
 }
 
-static int ubi_create_vol(char *volume, int size, int dynamic)
+int ubi_create_vol(char *volume, int size, int dynamic, int vol_id)
 {
 	struct ubi_mkvol_req req;
 	int err;
@@ -166,7 +166,11 @@
 	else
 		req.vol_type = UBI_STATIC_VOLUME;
 
-	req.vol_id = UBI_VOL_NUM_AUTO;
+	if (vol_id >= 0)
+		req.vol_id = vol_id;
+	else
+		req.vol_id = UBI_VOL_NUM_AUTO;
+
 	req.alignment = 1;
 	req.bytes = size;
 
@@ -180,13 +184,13 @@
 		printf("verify_mkvol_req failed %d\n", err);
 		return err;
 	}
-	printf("Creating %s volume %s of size %d\n",
-		dynamic ? "dynamic" : "static", volume, size);
+	printf("Creating %s volume %s of size %d and volume id %d\n",
+		dynamic ? "dynamic" : "static", volume, size, vol_id);
 	/* Call real ubi create volume */
 	return ubi_create_volume(ubi, &req);
 }
 
-static int ubi_remove_vol(char *volume)
+int ubi_remove_vol(char *volume)
 {
 	int i, err, reserved_pebs;
 	int found = 0, vol_id = 0;
@@ -248,7 +252,7 @@
 	return err;
 }
 
-static int ubi_volume_write(char *volume, void *buf, size_t size)
+int ubi_volume_write(char *volume, void *buf, size_t size)
 {
 	int i = 0, err = -1;
 	int rsvd_bytes = 0;
@@ -308,7 +312,7 @@
 	return 0;
 }
 
-static int ubi_volume_read(char *volume, char *buf, size_t size)
+int ubi_volume_read(char *volume, char *buf, size_t size)
 {
 	int err, lnum, off, len, tbuf_size, i = 0;
 	size_t count_save = size;
@@ -436,11 +440,22 @@
 	return 0;
 }
 
+#define is_digit(c)	((c) >= '0' && (c) <= '9')
+
+static int skip_atoi(const char **s)
+{
+	int i=0;
+
+	while (is_digit(**s))
+		i = i*10 + *((*s)++) - '0';
+	return i;
+}
+
 static int do_ubi(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
 {
 	size_t size = 0;
 	ulong addr = 0;
-	int err = 0;
+	int err = 0, vol_id = UBI_VOL_NUM_AUTO;
 
 	if (argc < 2) {
 		cmd_usage(cmdtp);
@@ -538,6 +553,12 @@
 		/* Use maximum available size */
 		size = 0;
 
+		/* E.g., create volume with a manual id */
+		if (argc == 6) {
+			vol_id = skip_atoi(&argv[5]);
+			argc--;
+		}
+
 		/* E.g., create volume size type */
 		if (argc == 5) {
 			if (strncmp(argv[4], "s", 1) == 0)
@@ -558,7 +579,7 @@
 			size = ubi->avail_pebs * ubi->leb_size;
 		/* E.g., create volume */
 		if (argc == 3)
-			return ubi_create_vol(argv[2], size, dynamic);
+			return ubi_create_vol(argv[2], size, dynamic, vol_id);
 	}
 
 	if (strncmp(argv[1], "remove", 6) == 0) {
@@ -602,14 +623,14 @@
 	return -1;
 }
 
-U_BOOT_CMD(ubi, 6, 1, do_ubi,
+U_BOOT_CMD(ubi, 7, 1, do_ubi,
 	"ubi commands",
 	"part [part] [offset]\n"
 		" - Show or set current partition (with optional VID"
 		" header offset)\n"
 	"ubi info [l[ayout]]"
 		" - Display volume and ubi layout information\n"
-	"ubi create[vol] volume [size] [type]"
+	"ubi create[vol] volume [size] [type] [id]"
 		" - create volume name with size\n"
 	"ubi write[vol] address volume size"
 		" - Write volume from address with size\n"
