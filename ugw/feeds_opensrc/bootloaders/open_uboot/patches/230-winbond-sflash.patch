diff --git a/drivers/mtd/spi/winbond.c b/drivers/mtd/spi/winbond.c
--- a/drivers/mtd/spi/winbond.c
+++ b/drivers/mtd/spi/winbond.c
@@ -27,6 +27,7 @@
 #define WINBOND_ID_W25X16		0x3015
 #define WINBOND_ID_W25X32		0x3016
 #define WINBOND_ID_W25X64		0x3017
+#define WINBOND_ID_W25Q64       0x4017
 
 #define WINBOND_SR_WIP		(1 << 0)	/* Write-in-Progress */
 
@@ -77,6 +78,15 @@ static const struct winbond_spi_flash_pa
 		.nr_blocks		= 128,
 		.name			= "W25X64",
 	},
+	{
+	    .id         = WINBOND_ID_W25Q64,
+	    .l2_page_size       = 8,
+	    .pages_per_sector   = 16,
+	    .sectors_per_block  = 16,
+	    .nr_blocks      = 128,
+	    .name           = "W25Q64",
+	},
+
 };
 
 static int winbond_wait_ready(struct spi_flash *flash, unsigned long timeout)
@@ -139,6 +149,8 @@ static void winbond_build_address(struct
 	cmd[0] = page_addr >> (16 - page_shift);
 	cmd[1] = page_addr << (page_shift - 8) | (byte_addr >> 8);
 	cmd[2] = byte_addr;
+
+	//printf("%02x,%02x,%02x\n",cmd[0],cmd[1],cmd[2]);
 }
 
 static int winbond_read_fast(struct spi_flash *flash,
@@ -221,6 +233,74 @@ out:
 	return ret;
 }
 
+
+static int winbond_write_partial(struct spi_flash *flash,
+                         u32 offset, size_t len, const void *buf)
+{
+        struct winbond_spi_flash *stm = to_winbond_spi_flash(flash);
+        unsigned long page_addr;
+        unsigned long byte_addr;
+        unsigned long page_size;
+        unsigned long sect_addr;
+        unsigned long sector_size;
+        size_t chunk_len;
+        size_t actual;
+        int ret;
+        unsigned char *sect_buf = NULL;
+        int f_start_partial=0;
+        int f_end_partial=0;
+        int f_malloc=0;
+        int total_sect_num=0;    
+            
+        int i;
+
+        page_size = 1<< stm->params->l2_page_size;
+        sector_size = page_size * stm->params->pages_per_sector;
+        
+        page_addr = offset / page_size;
+        byte_addr = offset % page_size;
+        
+        if( (offset % sector_size)!=0 ) f_start_partial = 1;
+        if( ( (offset + len ) % sector_size)!=0 ) f_end_partial = 1;
+        debug("f_start_partial=%d,f_end_partial=%d\n",f_start_partial,f_end_partial);
+        total_sect_num = (offset + len -1) / sector_size - offset / sector_size + 1; 
+           
+        sect_addr = offset / sector_size;         
+        sect_buf = buf;
+        for(i=0; i<total_sect_num; i++){
+             if((f_start_partial && i==0) || (f_end_partial && total_sect_num ==1)) {
+                 //sect_buf = malloc(sizeof(sector_size));
+                 sect_buf=(uchar *)calloc(sector_size, sizeof(char));
+                 if(!sect_buf) {
+                    debug("cannot allocate memory!\n");
+                  }
+                 stm->flash.read(flash, (sect_addr + i) * sector_size, sector_size, sect_buf);
+                 memcpy(sect_buf + (offset % sector_size), buf, \
+                        min((sector_size-(offset % sector_size)),len));
+                 f_malloc = 1;
+                 
+              }else if(f_end_partial && i == total_sect_num -1 && i!=0){
+                 //sect_buf = malloc(sizeof(sector_size));
+                 sect_buf=(uchar *)calloc(sector_size, sizeof(char));
+                 if(!sect_buf) {
+                    debug("cannot allocate memory!\n");
+                  }
+                 stm->flash.read(flash, (sect_addr + i) * sector_size, sector_size, sect_buf);
+                 memcpy(sect_buf,buf+i*sector_size-(offset % sector_size), (offset+len) % sector_size);
+                 f_malloc=1;   
+              } 
+             stm->flash.erase(flash, (sect_addr + i) * sector_size, sector_size);  
+             ret=winbond_write(flash, (sect_addr + i) * sector_size, sector_size, sect_buf);
+             if(f_malloc) {
+                 free(sect_buf);
+                 f_malloc=0;
+               }
+             sect_buf = buf + (i+1)*sector_size - (offset % sector_size);
+        }
+        return ret;
+ 
+}
+
 int winbond_erase(struct spi_flash *flash, u32 offset, size_t len)
 {
 	struct winbond_spi_flash *stm = to_winbond_spi_flash(flash);
@@ -318,7 +398,8 @@ struct spi_flash *spi_flash_probe_winbon
 	/* Assuming power-of-two page size initially. */
 	page_size = 1 << params->l2_page_size;
 
-	stm->flash.write = winbond_write;
+	//stm->flash.write = winbond_write;
+	stm->flash.write = winbond_write_partial;
 	stm->flash.erase = winbond_erase;
 	stm->flash.read = winbond_read_fast;
 	stm->flash.size = page_size * params->pages_per_sector
