# HG changeset patch
# Parent b702c5681f1e8e519a4b6805a0858cb76f785adf

diff --git a/common/image.c b/common/image.c
--- a/common/image.c
+++ b/common/image.c
@@ -140,6 +140,7 @@ static table_entry_t uimage_type[] = {
 	{	IH_TYPE_FLATDT,     "flat_dt",    "Flat Device Tree",	},
 	{	IH_TYPE_KWBIMAGE,   "kwbimage",   "Kirkwood Boot Image",},
 	{	IH_TYPE_IMXIMAGE,   "imximage",   "Freescale i.MX Boot Image",},
+	{   IH_TYPE_UBOOT,      "uboot",      "uboot Image",},
 	{	-1,		    "",		  "",			},
 };
 
diff --git a/include/image.h b/include/image.h
old mode 100644
new mode 100755
--- a/include/image.h
+++ b/include/image.h
@@ -156,7 +156,9 @@
 #define IH_TYPE_FLATDT		8	/* Binary Flat Device Tree Blob	*/
 #define IH_TYPE_KWBIMAGE	9	/* Kirkwood Boot Image		*/
 #define IH_TYPE_IMXIMAGE	10	/* Freescale IMXBoot Image	*/
-#define IH_TYPE_UBOOT       11
+#define IH_TYPE_UBOOT       11  /* Lantiq uboot image*/
+#define IH_TYPE_UBOOTENV    12  /* Lantiq uboot environment image*/ 
+#define IH_TYPE_SYSTEMSW    13  /* Lantiq ubinized image*/
 
 /*
  * Compression Types
@@ -187,6 +189,14 @@ typedef struct image_header {
 	uint8_t		ih_type;	/* Image Type			*/
 	uint8_t		ih_comp;	/* Compression Type		*/
 	uint8_t		ih_name[IH_NMLEN];	/* Image Name		*/
+#ifdef CONFIG_LTQ_IMAGE_EXTRA_CHECKS
+    uint8_t     ih_vendor[IH_NMLEN]; /* 32 char Vendor Name String */
+    uint8_t     ih_board[IH_NMLEN]; /* 32 char Board Name String */
+    uint8_t     ih_boardVer[VERSIONLEN]; /* Board Version 16 char str */
+    uint8_t     ih_chip[IH_NMLEN]; /* 32 char Chip Name String */
+    uint8_t     ih_chipVer[VERSIONLEN]; /* Chip Version16 char string */
+    uint8_t     ih_swVer[VERSIONLEN]; /* Software Version-16 char string*/
+#endif // IFX_IMAGE_EXTRA_CHECKS
 } image_header_t;
 
 typedef struct image_info {
diff --git a/tools/default_image.c b/tools/default_image.c
--- a/tools/default_image.c
+++ b/tools/default_image.c
@@ -35,7 +35,7 @@ static image_header_t header;
 
 static int image_check_image_types (uint8_t type)
 {
-	if ((type > IH_TYPE_INVALID) && (type < IH_TYPE_FLATDT))
+	if ((type > IH_TYPE_INVALID) && (type <= IH_TYPE_UBOOT))
 		return EXIT_SUCCESS;
 	else
 		return EXIT_FAILURE;
