# HG changeset patch
# Parent a01d069bc677bac6f9e092cd5876c4ff37f4d44a

diff --git a/target/linux/generic/patches-3.10/081-pppoe-Use-workqueue-to-die-properly-when-a-PADT-is-r.patch b/target/linux/generic/patches-3.10/081-pppoe-Use-workqueue-to-die-properly-when-a-PADT-is-r.patch
new file mode 100755
--- /dev/null
+++ b/target/linux/generic/patches-3.10/081-pppoe-Use-workqueue-to-die-properly-when-a-PADT-is-r.patch
@@ -0,0 +1,93 @@
+From: Simon Farnsworth <simon@farnz.org.uk>
+Date: Sun, 1 Mar 2015 10:54:39 +0000
+Subject: [PATCH] pppoe: Use workqueue to die properly when a PADT is received
+
+When a PADT frame is received, the socket may not be in a good state to
+close down the PPP interface. The current implementation handles this by
+simply blocking all further PPP traffic, and hoping that the lack of traffic
+will trigger the user to investigate.
+
+Use schedule_work to get to a process context from which we clear down the
+PPP interface, in a fashion analogous to hangup on a TTY-based PPP
+interface. This causes pppd to disconnect immediately, and allows tools to
+take immediate corrective action.
+
+Note that pppd's rp_pppoe.so plugin has code in it to disable the session
+when it disconnects; however, as a consequence of this patch, the session is
+already disabled before rp_pppoe.so is asked to disable the session. The
+result is a harmless error message:
+
+Failed to disconnect PPPoE socket: 114 Operation already in progress
+
+This message is safe to ignore, as long as the error is 114 Operation
+already in progress; in that specific case, it means that the PPPoE session
+has already been disabled before pppd tried to disable it.
+
+Signed-off-by: Simon Farnsworth <simon@farnz.org.uk>
+Tested-by: Dan Williams <dcbw@redhat.com>
+Tested-by: Christoph Schulz <develop@kristov.de>
+Signed-off-by: David S. Miller <davem@davemloft.net>
+---
+
+Index: kernel_tree/drivers/net/ppp/pppoe.c
+===================================================================
+--- kernel_tree.orig/drivers/net/ppp/pppoe.c
++++ kernel_tree/drivers/net/ppp/pppoe.c
+@@ -454,6 +454,18 @@ out:
+ 	return NET_RX_DROP;
+ }
+ 
++static void pppoe_unbind_sock_work(struct work_struct *work)
++{
++	struct pppox_sock *po = container_of(work, struct pppox_sock,
++					     proto.pppoe.padt_work);
++	struct sock *sk = sk_pppox(po);
++
++	lock_sock(sk);
++	pppox_unbind_sock(sk);
++	release_sock(sk);
++	sock_put(sk);
++}
++
+ /************************************************************************
+  *
+  * Receive a PPPoE Discovery frame.
+@@ -499,7 +511,8 @@ static int pppoe_disc_rcv(struct sk_buff
+ 		}
+ 
+ 		bh_unlock_sock(sk);
+-		sock_put(sk);
++		if (!schedule_work(&po->proto.pppoe.padt_work))
++			sock_put(sk);
+ 	}
+ 
+ abort:
+@@ -612,6 +625,8 @@ static int pppoe_connect(struct socket *
+ 
+ 	lock_sock(sk);
+ 
++	INIT_WORK(&po->proto.pppoe.padt_work, pppoe_unbind_sock_work);
++
+ 	error = -EINVAL;
+ 	if (sp->sa_protocol != PX_PROTO_OE)
+ 		goto end;
+Index: kernel_tree/include/linux/if_pppox.h
+===================================================================
+--- kernel_tree.orig/include/linux/if_pppox.h
++++ kernel_tree/include/linux/if_pppox.h
+@@ -19,6 +19,7 @@
+ #include <linux/netdevice.h>
+ #include <linux/ppp_channel.h>
+ #include <linux/skbuff.h>
++#include <linux/workqueue.h>
+ #include <uapi/linux/if_pppox.h>
+ 
+ static inline struct pppoe_hdr *pppoe_hdr(const struct sk_buff *skb)
+@@ -32,6 +33,7 @@ struct pppoe_opt {
+ 	struct pppoe_addr	pa;	  /* what this socket is bound to*/
+ 	struct sockaddr_pppox	relay;	  /* what socket data will be
+ 					     relayed to (PPPoE relaying) */
++	struct work_struct      padt_work;/* Work item for handling PADT */
+ };
+ 
+ struct pptp_opt {
diff --git a/target/linux/generic/patches-3.10/100-pppoe-drop-pppoe-device-in-pppoe_unbind_sock_work.patch b/target/linux/generic/patches-3.10/100-pppoe-drop-pppoe-device-in-pppoe_unbind_sock_work.patch
new file mode 100755
--- /dev/null
+++ b/target/linux/generic/patches-3.10/100-pppoe-drop-pppoe-device-in-pppoe_unbind_sock_work.patch
@@ -0,0 +1,29 @@
+From: Felix Fietkau <nbd@openwrt.org>
+Date: Sat, 9 May 2015 23:03:47 +0200
+Subject: [PATCH] pppoe: drop pppoe device in pppoe_unbind_sock_work
+
+After receiving a PADT and the socket is closed, user space will no
+longer drop the reference to the pppoe device.
+This leads to errors like this:
+
+[  488.570000] unregister_netdevice: waiting for eth0.2 to become free. Usage count = 2
+
+Fixes: 287f3a943fe ("pppoe: Use workqueue to die properly when a PADT is received")
+Signed-off-by: Felix Fietkau <nbd@openwrt.org>
+---
+
+Index: kernel_tree/drivers/net/ppp/pppoe.c
+===================================================================
+--- kernel_tree.orig/drivers/net/ppp/pppoe.c
++++ kernel_tree/drivers/net/ppp/pppoe.c
+@@ -461,6 +461,10 @@ static void pppoe_unbind_sock_work(struc
+ 	struct sock *sk = sk_pppox(po);
+ 
+ 	lock_sock(sk);
++	if (po->pppoe_dev) {
++		dev_put(po->pppoe_dev);
++		po->pppoe_dev = NULL;
++	}
+ 	pppox_unbind_sock(sk);
+ 	release_sock(sk);
+ 	sock_put(sk);
diff --git a/target/linux/generic/patches-3.10/650-pppoe_header_pad.patch b/target/linux/generic/patches-3.10/650-pppoe_header_pad.patch
--- a/target/linux/generic/patches-3.10/650-pppoe_header_pad.patch
+++ b/target/linux/generic/patches-3.10/650-pppoe_header_pad.patch
@@ -1,6 +1,6 @@
 --- a/drivers/net/ppp/pppoe.c
 +++ b/drivers/net/ppp/pppoe.c
-@@ -850,7 +850,7 @@ static int pppoe_sendmsg(struct kiocb *i
+@@ -868,7 +868,7 @@ static int pppoe_sendmsg(struct kiocb *i
  		goto end;
  
  
@@ -9,7 +9,7 @@
  			   0, GFP_KERNEL);
  	if (!skb) {
  		error = -ENOMEM;
-@@ -858,7 +858,7 @@ static int pppoe_sendmsg(struct kiocb *i
+@@ -876,7 +876,7 @@ static int pppoe_sendmsg(struct kiocb *i
  	}
  
  	/* Reserve space for headers. */
