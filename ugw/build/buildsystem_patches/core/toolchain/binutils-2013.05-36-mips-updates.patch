UGW: bintutils 2013.05-36 from mips for MIPS InterAptiv support.

diff --git a/toolchain/binutils/Config.in b/toolchain/binutils/Config.in
--- a/toolchain/binutils/Config.in
+++ b/toolchain/binutils/Config.in
@@ -35,6 +35,9 @@ choice
 		depends on !avr32 || (avr32 && BROKEN)
 		bool "binutils 2.23.1"
 
+	config BINUTILS_VERSION_2013_05_36
+		bool "binutils 2013.05-36"
+
 endchoice
 
 config EXTRA_BINUTILS_CONFIG_OPTIONS
@@ -54,5 +57,6 @@ config BINUTILS_VERSION
 	default "2.22"            if BINUTILS_VERSION_2_22
 	default "2.19.1"          if ubicom32
 	default "2.23.1"          if BINUTILS_VERSION_2_23_1
+	default "2013.05-36"      if BINUTILS_VERSION_2013_05_36
 	default "2.20.1"          if avr32
 	default "2.22"
diff --git a/toolchain/binutils/Makefile b/toolchain/binutils/Makefile
--- a/toolchain/binutils/Makefile
+++ b/toolchain/binutils/Makefile
@@ -31,6 +31,9 @@ endif
 ifeq ($(PKG_VERSION),2.23.1)
   PKG_MD5SUM:=33adb18c3048d057ac58d07a3f1adb38
 endif
+ifeq ($(PKG_VERSION),2013.05-36)
+  PKG_MD5SUM:=f3d9a6d3e1f38bfda4f3b77848910c63
+endif
 
 HOST_BUILD_PARALLEL:=1
 
diff --git a/toolchain/binutils/patches/2013.05-36/112-arm-uclibc-gas-needs-libm.patch b/toolchain/binutils/patches/2013.05-36/112-arm-uclibc-gas-needs-libm.patch
new file mode 100644
--- /dev/null
+++ b/toolchain/binutils/patches/2013.05-36/112-arm-uclibc-gas-needs-libm.patch
@@ -0,0 +1,35 @@
+Source: Khem Raj <raj.khem@gmail.com>
+Disposition: submit upstream.
+
+Description:
+
+We do not need to have the libtool patch anymore for binutils after
+libtool has been updated upstream it include support for it. However
+for building gas natively on uclibc systems we have to link it with
+-lm so that it picks up missing symbols.
+
+/local/build_area/BUILD/arm_v5t_le_uclibc/binutils-2.17.50/objdir/libiberty/pic/libiberty.a(floatformat.o): In function `floatformat_from_double':
+floatformat.c:(.text+0x1ec): undefined reference to `frexp'
+floatformat.c:(.text+0x2f8): undefined reference to `ldexp'
+/local/build_area/BUILD/arm_v5t_le_uclibc/binutils-2.17.50/objdir/libiberty/pic/libiberty.a(floatformat.o): In function `floatformat_to_double':
+floatformat.c:(.text+0x38a): undefined reference to `ldexp'
+floatformat.c:(.text+0x3d2): undefined reference to `ldexp'
+floatformat.c:(.text+0x43e): undefined reference to `ldexp'                     floatformat.c:(.text+0x4e2): undefined reference to `ldexp'
+collect2: ld returned 1 exit status
+make[4]: *** [as-new] Error 1
+
+--- a/gas/configure.tgt
++++ b/gas/configure.tgt
+@@ -450,6 +450,12 @@ case ${generic_target} in
+   *-*-netware)				fmt=elf em=netware ;;
+ esac
+ 
++case ${generic_target} in
++  arm-*-*uclibc*)
++    need_libm=yes
++    ;;
++esac
++
+ case ${cpu_type} in
+   aarch64 | alpha | arm | i386 | ia64 | microblaze | mips | ns32k | pdp11 | ppc | sparc | z80 | z8k)
+     bfd_gas=yes
diff --git a/toolchain/binutils/patches/2013.05-36/120-sh-conf.patch b/toolchain/binutils/patches/2013.05-36/120-sh-conf.patch
new file mode 100644
--- /dev/null
+++ b/toolchain/binutils/patches/2013.05-36/120-sh-conf.patch
@@ -0,0 +1,22 @@
+--- a/configure
++++ b/configure
+@@ -3595,7 +3595,7 @@ case "${target}" in
+   mips*-*-*)
+     noconfigdirs="$noconfigdirs gprof"
+     ;;
+-  sh-*-* | sh64-*-*)
++  sh*-*-* | sh64-*-*)
+     case "${target}" in
+       sh*-*-elf)
+          ;;
+--- a/configure.ac
++++ b/configure.ac
+@@ -1021,7 +1021,7 @@ case "${target}" in
+   mips*-*-*)
+     noconfigdirs="$noconfigdirs gprof"
+     ;;
+-  sh-*-* | sh64-*-*)
++  sh*-*-* | sh64-*-*)
+     case "${target}" in
+       sh*-*-elf)
+          ;;
diff --git a/toolchain/binutils/patches/2013.05-36/300-001_ld_makefile_patch.patch b/toolchain/binutils/patches/2013.05-36/300-001_ld_makefile_patch.patch
new file mode 100644
--- /dev/null
+++ b/toolchain/binutils/patches/2013.05-36/300-001_ld_makefile_patch.patch
@@ -0,0 +1,22 @@
+--- a/ld/Makefile.am
++++ b/ld/Makefile.am
+@@ -37,7 +37,7 @@ endif
+ # We put the scripts in the directory $(scriptdir)/ldscripts.
+ # We can't put the scripts in $(datadir) because the SEARCH_DIR
+ # directives need to be different for native and cross linkers.
+-scriptdir = $(tooldir)/lib
++scriptdir = $(libdir)
+ 
+ EMUL = @EMUL@
+ EMULATION_OFILES = @EMULATION_OFILES@
+--- a/ld/Makefile.in
++++ b/ld/Makefile.in
+@@ -367,7 +367,7 @@ AM_CFLAGS = $(WARN_CFLAGS)
+ # We put the scripts in the directory $(scriptdir)/ldscripts.
+ # We can't put the scripts in $(datadir) because the SEARCH_DIR
+ # directives need to be different for native and cross linkers.
+-scriptdir = $(tooldir)/lib
++scriptdir = $(libdir)
+ BASEDIR = $(srcdir)/..
+ BFDDIR = $(BASEDIR)/bfd
+ INCDIR = $(BASEDIR)/include
diff --git a/toolchain/binutils/patches/2013.05-36/300-012_check_ldrunpath_length.patch b/toolchain/binutils/patches/2013.05-36/300-012_check_ldrunpath_length.patch
new file mode 100644
--- /dev/null
+++ b/toolchain/binutils/patches/2013.05-36/300-012_check_ldrunpath_length.patch
@@ -0,0 +1,20 @@
+--- a/ld/emultempl/elf32.em
++++ b/ld/emultempl/elf32.em
+@@ -1274,6 +1274,8 @@ fragment <<EOF
+ 	      && command_line.rpath == NULL)
+ 	    {
+ 	      lib_path = (const char *) getenv ("LD_RUN_PATH");
++	      if ((lib_path) && (strlen (lib_path) == 0))
++	      	lib_path = NULL;
+ 	      if (gld${EMULATION_NAME}_search_needed (lib_path, &n,
+ 						      force))
+ 		break;
+@@ -1501,6 +1503,8 @@ gld${EMULATION_NAME}_before_allocation (
+   rpath = command_line.rpath;
+   if (rpath == NULL)
+     rpath = (const char *) getenv ("LD_RUN_PATH");
++  if ((rpath) && (strlen (rpath) == 0))
++  	rpath = NULL;
+ 
+   for (abfd = link_info.input_bfds; abfd; abfd = abfd->link_next)
+     if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)
diff --git a/toolchain/binutils/patches/2013.05-36/400-mips_no_dynamic_linking_sym.patch b/toolchain/binutils/patches/2013.05-36/400-mips_no_dynamic_linking_sym.patch
new file mode 100644
--- /dev/null
+++ b/toolchain/binutils/patches/2013.05-36/400-mips_no_dynamic_linking_sym.patch
@@ -0,0 +1,18 @@
+--- a/bfd/elfxx-mips.c
++++ b/bfd/elfxx-mips.c
+@@ -7335,6 +7335,7 @@ _bfd_mips_elf_create_dynamic_sections (b
+ 
+       name = SGI_COMPAT (abfd) ? "_DYNAMIC_LINK" : "_DYNAMIC_LINKING";
+       bh = NULL;
++      if (0) {
+       if (!(_bfd_generic_link_add_one_symbol
+ 	    (info, abfd, name, BSF_GLOBAL, bfd_abs_section_ptr, 0,
+ 	     NULL, FALSE, get_elf_backend_data (abfd)->collect, &bh)))
+@@ -7347,6 +7348,7 @@ _bfd_mips_elf_create_dynamic_sections (b
+ 
+       if (! bfd_elf_link_record_dynamic_symbol (info, h))
+ 	return FALSE;
++      }
+ 
+       if (! mips_elf_hash_table (info)->use_rld_obj_head)
+ 	{
