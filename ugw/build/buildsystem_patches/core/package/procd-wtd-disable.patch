PROCD: add an option to the watchdog handling to disable it by the "Magic Close feature"

diff --git a/package/system/procd/patches/001-wdt-disable.patch b/package/system/procd/patches/001-wdt-disable.patch
new file mode 100644
--- /dev/null
+++ b/package/system/procd/patches/001-wdt-disable.patch
@@ -0,0 +1,57 @@
+--- a/watchdog.c
++++ b/watchdog.c
+@@ -53,6 +53,16 @@ bool watchdog_get_stopped(void)
+ 	return !wdt_timeout.pending;
+ }
+ 
++void watchdog_set_disabled (bool val)
++{
++	if (val) {
++		write(wdt_fd, "V", 1);
++		uloop_timeout_cancel(&wdt_timeout);
++		close (wdt_fd);
++		wdt_fd = -1;
++	}
++}
++
+ int watchdog_timeout(int timeout)
+ {
+ 	if (wdt_fd < 0)
+--- a/system.c
++++ b/system.c
+@@ -227,6 +227,7 @@ enum {
+ 	WDT_FREQUENCY,
+ 	WDT_TIMEOUT,
+ 	WDT_STOP,
++	WDT_DISABLE,
+ 	__WDT_MAX
+ };
+ 
+@@ -234,6 +235,7 @@ static const struct blobmsg_policy watch
+ 	[WDT_FREQUENCY] = { .name = "frequency", .type = BLOBMSG_TYPE_INT32 },
+ 	[WDT_TIMEOUT] = { .name = "timeout", .type = BLOBMSG_TYPE_INT32 },
+ 	[WDT_STOP] = { .name = "stop", .type = BLOBMSG_TYPE_BOOL },
++	[WDT_DISABLE] = { .name = "disable", .type = BLOBMSG_TYPE_BOOL },
+ };
+ 
+ static int watchdog_set(struct ubus_context *ctx, struct ubus_object *obj,
+@@ -270,6 +272,9 @@ static int watchdog_set(struct ubus_cont
+ 	if (tb[WDT_STOP])
+ 		watchdog_set_stopped(blobmsg_get_bool(tb[WDT_STOP]));
+ 
++	if (tb[WDT_DISABLE])
++		watchdog_set_disabled(blobmsg_get_bool(tb[WDT_DISABLE]));
++
+ 	if (watchdog_fd() < 0)
+ 		status = "offline";
+ 	else if (watchdog_get_stopped())
+--- a/watchdog.h
++++ b/watchdog.h
+@@ -21,6 +21,7 @@ int watchdog_timeout(int timeout);
+ int watchdog_frequency(int frequency);
+ void watchdog_set_stopped(bool val);
+ bool watchdog_get_stopped(void);
++void watchdog_set_disabled(bool val);
+ void watchdog_no_cloexec(void);
+ 
+ #endif
